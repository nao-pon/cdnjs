{"version":3,"sources":["../node_modules/vega-util/src/accessor.js","../node_modules/vega-util/src/error.js","../node_modules/vega-util/src/splitAccessPath.js","../node_modules/vega-util/src/isArray.js","../node_modules/vega-util/src/isObject.js","../node_modules/vega-util/src/isString.js","../node_modules/vega-util/src/stringValue.js","../node_modules/vega-util/src/accessors.js","../node_modules/vega-util/src/field.js","../node_modules/vega-util/src/logger.js","../node_modules/vega-util/src/isBoolean.js","../node_modules/vega-util/src/isNumber.js","../node_modules/vega-util/src/toSet.js","../node_modules/jsonify/lib/parse.js","../node_modules/jsonify/lib/stringify.js","../node_modules/json-stable-stringify/index.js","src/logical.js","src/util.js","src/aggregate.js","../node_modules/tslib/tslib.es6.js","src/axis.js","src/channel.js","src/bin.js","src/mark.js","src/log.js","src/datetime.js","src/timeunit.js","src/type.js","src/fielddef.js","src/encoding.js","src/compositemark/common.js","src/compositemark/boxplot.js","src/compositemark/index.js","src/compositemark/errorbar.js","src/scale.js","src/guide.js","src/legend.js","src/selection.js","src/title.js","src/config.js","src/stack.js","src/spec.js","src/toplevelprops.js","src/data.js","../node_modules/vega-event-selector/src/event-selector.js","src/transform.js","src/vega.schema.js","src/compile/axis/assemble.js","src/compile/common.js","src/compile/layout/header.js","src/compile/layoutsize/assemble.js","src/compile/resolve.js","src/compile/split.js","src/compile/legend/component.js","src/compile/mark/valueref.js","src/compile/mark/mixins.js","src/compile/legend/encode.js","src/compile/legend/parse.js","src/compile/legend/properties.js","src/compile/legend/assemble.js","src/compile/projection/assemble.js","src/projection.js","src/compile/projection/component.js","src/compile/projection/parse.js","src/sort.js","src/compile/data/dataflow.js","src/compile/data/calculate.js","src/compile/data/aggregate.js","src/compile/data/facet.js","src/compile/data/filterinvalid.js","src/compile/data/formatparse.js","src/compile/data/source.js","src/compile/data/timeunit.js","src/compile/data/optimizers.js","src/compile/data/stack.js","src/compile/data/optimize.js","src/compile/scale/domain.js","src/compile/scale/assemble.js","src/compile/selection/selection.js","src/compile/scale/component.js","src/compile/scale/range.js","src/compile/scale/properties.js","src/compile/scale/type.js","src/compile/scale/parse.js","src/compile/model.js","src/compile/selection/transforms/scales.js","src/compile/selection/interval.js","src/compile/selection/transforms/nearest.js","src/compile/selection/multi.js","src/compile/selection/single.js","src/compile/selection/transforms/translate.js","src/compile/selection/transforms/zoom.js","src/compile/selection/transforms/transforms.js","src/compile/selection/transforms/project.js","src/compile/selection/transforms/toggle.js","src/compile/selection/transforms/inputs.js","src/predicate.js","src/compile/data/bin.js","src/compile/data/filter.js","src/compile/data/geojson.js","src/compile/data/geopoint.js","src/compile/data/indentifier.js","src/compile/data/lookup.js","src/compile/data/window.js","src/compile/data/parse.js","src/compile/baseconcat.js","src/compile/layoutsize/parse.js","src/compile/concat.js","src/compile/data/assemble.js","src/compile/repeater.js","src/compile/facet.js","src/compile/axis/component.js","src/compile/axis/config.js","src/compile/axis/encode.js","src/compile/axis/parse.js","src/compile/axis/properties.js","src/compile/mark/init.js","src/compile/mark/bar.js","src/compile/mark/point.js","src/compile/mark/mark.js","src/compile/mark/area.js","src/compile/mark/geoshape.js","src/compile/mark/line.js","src/compile/mark/rect.js","src/compile/mark/rule.js","src/compile/mark/text.js","src/compile/mark/tick.js","src/compile/unit.js","src/compile/layer.js","src/compile/repeat.js","src/compile/buildmodel.js","src/validate.js","src/compile/compile.js"],"names":["accessor","fn","fields","name","fname","error","message","Error","splitAccessPath","p","i","j","c","path","q","b","n","length","s","push","substring","isArray","Array","isObject","_","Object","isString","$","x","map","JSON","stringify","replace","empty","field","code","stringValue","join","Function","log","method","level","input","args","concat","slice","call","console","apply","None","Warn","Info","Debug","isBoolean","isNumber","toSet","at","ch","text","value","escapee","\"","\\","/","f","r","t","m","next","charAt","number","string","isFinite","hex","uffff","parseInt","String","fromCharCode","white","key","object","hasOwnProperty","array","word","gap","indent","rep","escapable","meta","\b","\t","\n","\f","\r","quote","lastIndex","test","a","charCodeAt","toString","json","source","reviver","result","walk","holder","k","v","prototype","undefined","","replacer","space","str","partial","mind","toJSON","jsonStableStringify","obj","opts","cmp","cycles","node","aobj","bobj","seen","parent","colonSeparator","out","item","indexOf","TypeError","keys","objectKeys","sort","keyValue","splice","has","isLogicalOr","op","or","isLogicalAnd","and","isLogicalNot","not","stableStringify","stableStringify_['default']","hash","h","contains","without","excludedItems","filter","some","arr","every","flatten","arrays","mergeDeep","dest","src","_i","arguments","_a","src_1","deepMerge_","constructor","unique","values","results","u","values_1","val","differ","dict","other","hasIntersection","vals","_vals","flagKeys","duplicate","parse","varName","alphanumericS","match","logicalExpr","cb","deleteNestedProperty","orderedProps","prop","shift","titlecase","toUpperCase","substr","accessPathWithDatum","datum","pieces","prefixes","prefix","flatAccessWithDatum","replacePathInField","removePathFromField","accessPathDepth","props","copy","props_1","props_2","num","isNaN","AGGREGATE_OP_INDEX","argmax","argmin","average","count","distinct","max","mean","median","min","missing","q1","q3","ci0","ci1","stderr","stdev","stdevp","sum","valid","variance","variancep","AGGREGATE_OPS","isAggregateOp","COUNTING_OPS","isCountingAggregateOp","aggregate","SUM_OPS","SHARED_DOMAIN_OPS","SHARED_DOMAIN_OP_INDEX","extendStatics","setPrototypeOf","__proto__","d","__extends","__","this","create","__assign","assign","__rest","e","getOwnPropertySymbols","AXIS_PARTS","AXIS_PROPERTY_TYPE","grid","gridScale","domain","labels","labelFlush","labelOverlap","minExtent","maxExtent","offset","ticks","title","scale","zindex","COMMON_AXIS_PROPERTIES_INDEX","orient","format","labelBound","labelPadding","position","tickCount","tickSize","titlePadding","AXIS_PROPERTIES_INDEX","tslib_1.__assign","encoding","labelAngle","titleMaxLength","isAxisProperty","Channel","VG_AXIS_PROPERTIES","encode","AXIS_PROPERTIES","ROW","COLUMN","X","Y","X2","Y2","LATITUDE","LONGITUDE","LATITUDE2","LONGITUDE2","COLOR","FILL","STROKE","SHAPE","SIZE","OPACITY","TEXT","ORDER","DETAIL","KEY","TOOLTIP","HREF","GEOPOSITION_CHANNEL_INDEX","longitude","longitude2","latitude","latitude2","GEOPOSITION_CHANNELS","UNIT_CHANNEL_INDEX","y","x2","y2","color","fill","stroke","opacity","size","shape","order","detail","tooltip","href","isColorChannel","channel","CHANNEL_INDEX","row","column","CHANNELS","SINGLE_DEF_CHANNELS","tslib_1.__rest","isChannel","UNIT_CHANNELS","NONPOSITION_CHANNEL_INDEX","NONPOSITION_CHANNELS","POSITION_SCALE_CHANNEL_INDEX","POSITION_SCALE_CHANNELS","NONPOSITION_SCALE_CHANNEL_INDEX","NONPOSITION_SCALE_CHANNELS","SCALE_CHANNEL_INDEX","SCALE_CHANNELS","isScaleChannel","supportMark","mark","getSupportedMark","point","tick","rule","circle","square","bar","rect","line","trail","area","geoshape","rangeType","binToString","bin","isBinParams","autoMaxBins","Mark","AREA","BAR","LINE","POINT","RECT","RULE","TICK","TRAIL","CIRCLE","SQUARE","GEOSHAPE","MARK_INDEX","isPathMark","PRIMITIVE_MARKS","isMarkDef","PRIMITIVE_MARK_INDEX","isPrimitiveMark","type","STROKE_CONFIG","FILL_CONFIG","FILL_STROKE_CONFIG","VL_ONLY_MARK_CONFIG_PROPERTIES","VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX","defaultMarkConfig","defaultBarConfig","binSpacing","continuousBandSize","defaultTickConfig","thickness","main","warn","info","debug","current","INVALID_SPEC","FIT_NON_SINGLE","CANNOT_FIX_RANGE_STEP_WITH_FIT","cannotProjectOnChannelWithoutField","nearestNotSupportForContinuous","selectionNotFound","SCALE_BINDINGS_CONTINUOUS","noSuchRepeatedValue","CONCAT_CANNOT_SHARE_AXIS","REPEAT_CANNOT_SHARE_AXIS","cannotSetTitleAnchor","unrecognizedParse","differentParse","local","ancestor","invalidTransformIgnored","transform","NO_FIELDS_NEEDS_AS","encodingOverridden","channels","projectionOverridden","opt","parentProjection","projection","primitiveChannelDef","invalidFieldType","nonZeroScaleUsedWithLengthMark","scaleType","zeroFalse","invalidFieldTypeForCountAggregate","invalidAggregate","emptyOrInvalidFieldType","newType","droppingColor","emptyFieldDef","fieldDef","latLongDeprecated","newChannel","LINE_WITH_VARYING_SIZE","incompatibleChannel","markOrFacet","when","invalidEncodingChannel","facetChannelShouldBeDiscrete","discreteChannelCannotEncode","BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL","lineWithRange","hasX2","hasY2","unclearOrientContinuous","unclearOrientDiscreteOrEmpty","orientOverridden","original","actual","CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN","cannotUseScalePropertyWithNonColor","unaggregateDomainHasNoEffectForRawField","unaggregateDomainWithNonSharedDomainOp","unaggregatedDomainWithLogScale","cannotUseSizeFieldWithBandSize","positionChannel","cannotApplySizeToNonOrientedMark","rangeStepDropped","scaleTypeNotWorkWithChannel","defaultScaleType","scaleTypeNotWorkWithFieldDef","scalePropertyNotWorkWithScaleType","propName","scaleTypeNotWorkWithMark","mergeConflictingProperty","property","propertyOf","v1","v2","independentScaleMeansIndependentGuide","domainSortDropped","UNABLE_TO_MERGE_DOMAINS","MORE_THAN_ONE_SORT","INVALID_CHANNEL_FOR_AXIS","cannotStackRangedMark","cannotStackNonLinearScale","stackNonSummativeAggregate","invalidTimeUnit","unitName","dayReplacedWithDate","fullTimeUnit","droppedDay","SUNDAY_YEAR","isDateTime","o","year","quarter","month","date","day","hours","minutes","seconds","milliseconds","MONTHS","SHORT_MONTHS","DAYS","SHORT_DAYS","dateTimeExpr","normalize","units","log.warn","log.message","lowerM","toLowerCase","monthIndex","shortM","shortMonthIndex","normalizeMonth","normalizeQuarter","lowerD","dayIndex","shortD","shortDayIndex","normalizeDay","timeUnit","utc","TimeUnit","YEAR","MONTH","DAY","DATE","HOURS","MINUTES","SECONDS","MILLISECONDS","YEARMONTH","YEARMONTHDATE","YEARMONTHDATEHOURS","YEARMONTHDATEHOURSMINUTES","YEARMONTHDATEHOURSMINUTESSECONDS","MONTHDATE","HOURSMINUTES","HOURSMINUTESSECONDS","MINUTESSECONDS","SECONDSMILLISECONDS","QUARTER","YEARQUARTER","QUARTERMONTH","YEARQUARTERMONTH","UTCYEAR","UTCMONTH","UTCDAY","UTCDATE","UTCHOURS","UTCMINUTES","UTCSECONDS","UTCMILLISECONDS","UTCYEARMONTH","UTCYEARMONTHDATE","UTCYEARMONTHDATEHOURS","UTCYEARMONTHDATEHOURSMINUTES","UTCYEARMONTHDATEHOURSMINUTESSECONDS","UTCMONTHDATE","UTCHOURSMINUTES","UTCHOURSMINUTESSECONDS","UTCMINUTESSECONDS","UTCSECONDSMILLISECONDS","UTCQUARTER","UTCYEARQUARTER","UTCQUARTERMONTH","UTCYEARQUARTERMONTH","LOCAL_SINGLE_TIMEUNIT_INDEX","TIMEUNIT_PARTS","isLocalSingleTimeUnit","UTC_SINGLE_TIMEUNIT_INDEX","utcyear","utcquarter","utcmonth","utcday","utcdate","utchours","utcminutes","utcseconds","utcmilliseconds","isUtcSingleTimeUnit","UTC_MULTI_TIMEUNIT_INDEX","utcyearquarter","utcyearquartermonth","utcyearmonth","utcyearmonthdate","utcyearmonthdatehours","utcyearmonthdatehoursminutes","utcyearmonthdatehoursminutesseconds","utcquartermonth","utcmonthdate","utchoursminutes","utchoursminutesseconds","utcminutesseconds","utcsecondsmilliseconds","UTC_TIMEUNIT_INDEX","isUTCTimeUnit","getLocalTimeUnit","TIMEUNIT_INDEX","yearquarter","yearquartermonth","yearmonth","yearmonthdate","yearmonthdatehours","yearmonthdatehoursminutes","yearmonthdatehoursminutesseconds","quartermonth","monthdate","hoursminutes","hoursminutesseconds","minutesseconds","secondsmilliseconds","TIMEUNITS","SET_DATE_METHOD","dateMethods","singleUnit","isUtc","rawSetDateMethod","setDateMethod","getDateMethod","getTimeUnitParts","reduce","parts","part","containsTimeUnit","index","fieldExpr","fieldRef","dateExpr","tu","formatExpression","shortTimeLabels","isUTCScale","dateComponents","expression","hasYear","timeComponents","dateTimeComponents","normalizeTimeUnit","Type","unit","isUTC","Date","UTC","TIMEUNIT_PARTS_1","timeUnitPart","getDateMethod_1","Math","floor","_b","QUANTITATIVE","ORDINAL","TEMPORAL","NOMINAL","GEOJSON","TYPE_INDEX","quantitative","ordinal","temporal","nominal","geojson","getFullName","isConditionalSelection","isRepeatRef","toFieldDefBase","isConditionalDef","channelDef","condition","hasConditionalFieldDef","isFieldDef","hasConditionalValueDef","isValueDef","isStringFieldDef","isScaleFieldDef","vgField","suffix","isCount","nofn","binSuffix","expr","isDiscrete","isContinuous","verbalTitleFormatter","config","countTitle","functionalTitleFormatter","defaultTitleFormatter","fieldTitle","titleFormatter","setTitleFormatter","formatter","resetTitleFormatter","defaultType","getFieldDef","primitiveType","normalizeFieldDef","fieldDefWithoutAggregate","normalizeBin","fullType","channelCompatibility","compatible","warning","maxbins","step","COMPATIBLE","isNumberFieldDef","isTimeFieldDef","channelHasField","isAggregate","normalizeEncoding","normalizedEncoding","defs","newEncoding","isRanged","fieldDefs","forEach","def","mapping","thisArg","_loop_1","init","r1","getMarkSpecificConfigMixins","markSpecificConfig","BOXPLOT","isBoxPlotDef","supportedChannels","normalizerRegistry","add","normalizer","COMPOSITE_MARK_STYLES","VL_ONLY_COMPOSITE_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX","box","boxWhisker","boxMid","spec","filterUnsupportedChannels","selection","outerSpec","kIQRScalar","extent","_c","_d","_e","continuousAxisChannelDef","continuousAxis","continuousAxisWithoutAggregate","boxContinousAxis","isMinMax","as","postAggregateCalculates","calculate","groupby","bins","timeUnits","encodingWithoutContinuousAxis","transformedField","boxParams","boxOrient","encodingWithoutSizeColorAndContinuousAxis","sizeMixins","continuousAxisScaleAndAxis","axis","layer","style","encodingWithoutSize","encodingWithoutX2Y2","encodingWithoutX_X2_Y_Y2","ScaleType","VL_ONLY_GUIDE_CONFIG","defaultLegendConfig","COMMON_LEGEND_PROPERTY_INDEX","entryPadding","padding","VG_LEGEND_PROPERTY_INDEX","LEGEND_PROPERTIES","VG_LEGEND_PROPERTIES","LINEAR","BIN_LINEAR","LOG","POW","SQRT","TIME","SEQUENTIAL","QUANTILE","QUANTIZE","THRESHOLD","BIN_ORDINAL","BAND","SCALE_CATEGORY_INDEX","linear","pow","sqrt","bin-linear","time","sequential","bin-ordinal","band","SCALE_TYPES","scaleCompatible","scaleType1","scaleType2","scaleCategory1","scaleCategory2","SCALE_PRECEDENCE_INDEX","scaleTypePrecedence","CONTINUOUS_TO_CONTINUOUS_SCALES","CONTINUOUS_TO_CONTINUOUS_INDEX","CONTINUOUS_DOMAIN_SCALES","CONTINUOUS_DOMAIN_INDEX","DISCRETE_DOMAIN_SCALES","DISCRETE_DOMAIN_INDEX","BIN_SCALES_INDEX","hasDiscreteDomain","isBinScale","hasContinuousDomain","isContinuousToContinuous","defaultScaleConfig","textXRangeStep","rangeStep","pointPadding","bandPaddingInner","facetSpacing","minBandSize","minFontSize","maxFontSize","minOpacity","maxOpacity","minSize","minStrokeWidth","maxStrokeWidth","isExtendedScheme","scheme","isSelectionDomain","SCALE_PROPERTY_INDEX","range","reverse","round","clamp","nice","base","exponent","interpolate","zero","paddingInner","paddingOuter","SCALE_PROPERTIES","NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES","scaleTypeSupportProperty","channelScalePropertyIncompatability","channelSupportScaleType","SELECTION_ID","extractTitleConfig","titleConfig","anchor","titleMarkConfig","nonMark","defaultViewConfig","width","height","defaultConfig","timeFormat","invalidValues","view","mark.defaultMarkConfig","mark.defaultBarConfig","mark.defaultTickConfig","axisX","axisY","axisLeft","axisRight","axisTop","axisBottom","axisBand","legend","single","on","resolve","multi","toggle","interval","encodings","translate","zoom","fillOpacity","initConfig","MARK_STYLES","VL_ONLY_CONFIG_PROPERTIES","VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX","stripAndRedirectConfig","VL_ONLY_CONFIG_PROPERTIES_1","VL_ONLY_GUIDE_CONFIG_1","VL_ONLY_GUIDE_CONFIG_2","VL_ONLY_MARK_CONFIG_PROPERTIES_1","MARK_STYLES_1","markType","VL_ONLY_MARK_CONFIG_PROPERTIES_2","vlOnlyMarkSpecificConfigs","_f","vlOnlyMarkSpecificConfigs_1","redirectConfig","toProp","propConfig","STACK_OFFSET_INDEX","center","isStackOffset","STACKABLE_MARKS","STACK_BY_DEFAULT_MARKS","stack","stackConfig","fieldChannel","xDef","yDef","potentialStackedChannel","stackedFieldDef","stackedField","dimensionChannel","dimensionDef","dimensionField","stackBy","sc","cDef","groupbyChannel","impute","isFacetSpec","isUnitSpec","isLayerSpec","isRepeatSpec","isConcatSpec","isVConcatSpec","isHConcatSpec","subspec","rest","normalizeFacet","normalizeLayer","parentEncoding","mergedEncoding","mergeEncoding","mergedProjection","mergeProjection","normalizeNonFacetUnit","normalizeRepeat","vconcat","normalizeVConcat","hconcat","normalizeHConcat","hasRow","hasColumn","facet","normalizeFacetedUnit","overriden","merged","isNonFacetUnitSpecWithPrimitiveMark","hasX","hasY","normalizedSpec","normalizeRangedUnit","markDef","pointOverlay","markConfig","getPointOverlay","lineOverlay","getLineOverlay","dropLineAndPoint","stackProps","overlayEncoding","stackFieldChannel","filled","normalizePathOverlay","compositeMark.normalize","accumulate","fieldDefIndex","vlEncoding.fieldDefs","child","_normalizeAutoSize","autosize","TOP_LEVEL_PROPERTIES","extractTopLevelProperties","isUrlData","data","isInlineData","isNamedData","MAIN","RAW","parseSelector","selector","marks","DEFAULT_SOURCE","VIEW","MARKS","DEFAULT_MARKS","parseMerge","trim","LBRACK","RBRACK","LBRACE","RBRACE","COLON","COMMA","NAME","GT","ILLEGAL","*","arc","group","image","symbol","find","endChar","pushChar","popChar","output","start","stream","between","parseBetween","throttle","markname","lastIndexOf","split","parseThrottle","marktype","consume","debounce","parseStream","isFilter","isLookup","isWindow","isCalculate","isBin","isTimeUnit","normalizeTransform","normalizeLogicalOperand","normalizePredicate","isVgSignalRef","isVgRangeStep","isDataRefDomain","VG_MARK_CONFIGS","strokeCap","strokeWidth","strokeOpacity","strokeDash","strokeDashOffset","tension","align","baseline","limit","dx","dy","radius","theta","angle","font","fontSize","fontWeight","fontStyle","cursor","assembleAxis","axisCmpt","kind","header","combine","propType","mainExtracted","AXIS_PARTS_1","hasAxisPart","titleString","fieldDefTitle","assembleTitle","getStyles","getMarkConfig","styles_1","styleConfig","formatSignalRef","specifiedFormat","numberFormat","signal","binFormatExpression","formatExpr","timeFormatExpression","getSpecifiedOrDefaultValue","specifiedValue","defaultValue","numberFormatExpr","startField","endField","timeFormatConfig","_format","sortParams","orderDef","fieldRefOption","orderChannelDef","mergeTitleFieldDefs","f1","f2","fdToMerge","merged_1","fieldDef1","titleMerger","explicit","binRequiresRange","HEADER_CHANNELS","HEADER_TYPES","getTitleGroup","model","component","layoutHeaders","update","getName","role","getHeaderGroups","layoutHeader","groups","HEADER_TYPES_1","headerType","headerCmpt","getHeaderGroup","facetFieldDef","labelBaseline","axes","hasAxes","sizeChannel","from","sizeSignal","assembleLayoutSignals","sizeSignals","sizeType","layoutSize","get","getSizeSignalRef","scaleComponent","getScaleComponent","scaleName","isFacetModel","stepSignal","sizeExpr","cardinality","parseGuideResolve","channelScaleResolve","guide","Split","implicit","clone","getWithExplicit","setWithExplicit","set","copyKeyFromSplit","copyKeyFromObject","makeExplicit","makeImplicit","tieBreakByComparing","compare","diff","defaultTieBreaker","mergeValuesWithExplicit","tieBreaker","LegendComponent","_super","tslib_1.__extends","side","mixins","ref","bandRef","midPoint","defaultRef","binMidSignal","textDef","mid","sizeRef","mult","getDefaultRef","domains","domainDefinitelyIncludeZero","valueOnly","configValue","transparentIfNeeded","colorVgChannel","fillStrokeMarkDefAndConfig","nonPosition","vgChannel","baseEncodeEntry","ignore","markDefProperties","keyValues","ref.text","textCommon","validPredicate","vgRef","defined","wrapCondition","ref.midPoint","refFn","valueRef","vgConditions","conditionValueRef","selectionPredicate","bandPosition","centeredBandPositionMixins","ref.fieldRef","ref.bandRef","centeredBandPosition","defaultPosRef","defaultSizeRef","pointPosition","binnedPosition","spacing","ref.bin","ref.stackable","ref.getDefaultRef","pointPosition2","baseChannel","aFieldDef","a2fieldDef","ref.stackable2","getMaxValue","getConditionValue","conditionalDef","getFirstConditionValue","reducer","symbolsSpec","propsList","propsList_2","applyMarkConfig","mixins.color","gradientSpec","labelsSpec","parseLegend","isUnitModel","legends","legendComponent","legendCmpt","getLegendDefWithScale","specifiedLegend","specifiedTitle","dt","properties.type","getProperty","legendEncoding","legendEncode","parseLegendForChannel","parseUnitLegend","mergeLegendComponent","children","parseNonUnitLegend","mergedLegend","childLegend","mergedOrient","childOrient","typeMerged","_loop_2","mergedValueWithExplicit","VG_LEGEND_PROPERTIES_1","gradient","assembleLegends","legendComponentIndex","legendByDomain","domainHash","assembleProjections","isLayerModel","isConcatModel","isRepeatModel","projections","assembleProjectionForModel","assembleProjectionsForModelAndChildren","fit","sources","lookupDataSource","PROJECTION_PROPERTIES","ProjectionComponent","specifiedProjection","_this","parseProjection","isGeoShapeMark","isGeoPointOrLineMark","data_1","posssiblePair","requestDataName","projectionName","parseUnitProjection","nonUnitProjection","mergable","merge","first","second","allPropertiesShared","mergeIfNoConflict","name_1","modelProjection_1","renameProjection","parseNonUnitProjections","isSortField","isSortArray","DataFlowNode","debugName","_children","_parent","producedFields","dependentFields","defineProperty","addChild","enumerable","configurable","numChildren","removeChild","oldChild","remove","insertAsParentOf","swapWithParent","newParent","OutputNode","refCounts","_source","_name","cloneObj","getSource","isRequired","setSource","CalculateNode","parseAllForSortIndex","forEachFieldDef","calculateExpressionFromSortField","sortArrayIndexField","sortFields","assemble","AggregateNode","dimensions","measures","makeFromEncoding","fd","meas","dims","scaleDomain","addDimension","makeFromTransform","log.debug","parentMeasures","childMeasures","ops","mergeMeasures","addDimensions","FacetNode","columnFields","columnName","rowFields","rowName","childModel","getChildIndependentFieldsWithStep","childIndependentFieldsWithStep","childScaleComponent","scales","getFieldFromDomain","assembleDomain","assembleRowColumnData","crossedDataName","aggregateChildField","childChannel","FilterInvalidNode","make","reduceFieldDef","aggregator","filters","vegaFilters","ParseNode","_parse","calcFieldMap","transforms","forEachLeaf","isFieldPredicate","p_1","modelParse","ancestorParse","assembleFormatParse","formatParse","assembleTransforms","onlyNested","parseExpression","SourceNode","_data","url","defaultExtension","exec","hasName","_hash","TimeUnitNode","formula","timeUnitComponent","iterateFromLeaves","optimizeNextFromLeaves","moveParseUp","removeUnusedSubtrees","removeDuplicateTimeUnits","leaf","pfields","StackNode","_stack","dimensionFieldDef","stackProperties","stackby","by","_field","getStackByFields","facetby","getGroupbyFields","stackField","FACET_SCALE_PREFIX","moveFacetDown","moveMainDownToFacet","copy_1","newName","outputNodes","removeUnnecessaryNodes","getLeaves","roots","leaves","append","parseScaleDomain","specifiedScales","localScaleComponents","util.keys","specifiedScale","specifiedDomain","scaleConfig","canUseUnaggregatedDomain","reason","useUnaggregatedDomain","normalizeUnaggregatedDomain","parseSingleChannelDomain","parseDomainForChannel","localScaleCmpt","SELECTION_DOMAIN","isFaceted","facetParent","domains_1","parseUnitScaleDomain","domainRaw","childComponent","dr","parseNonUnitScaleDomain","util.contains","domainSort","util.isBoolean","isDataRefUnionedDomain","nonUnionDomain","isFieldRefUnionDomain","uniqueDomains","util.unique","util.hash","sorts","sort_1","simpleSorts","allData","mergeDomains","assembleScalesForModel","otherScaleProps","scaleRange","r0","getSizeName","assembleScaleRange","isRawSelectionDomain","selDomain","selCmpt","getSelectionComponent","project","compiler","STORE","selectionScaleDomain","ScaleComponent","typeWithExplicit","RANGE_PROPERTIES","parseScaleRange","mergedScaleCmpt","sizeSpecified","xyRangeSteps","xScale","xRange","yScale","yRange","getXYRangeStep","rangeWithExplicit","noRangeStep","RANGE_PROPERTIES_1","supportedByScaleType","channelIncompatability","parseScheme","rangeMin","sizeRangeMin","rangeMax","maxBandSize","minXYRangeStep","maxSize","pointStep","sizeRangeMax","defaultRange","parseRangeForChannel","parseUnitScaleRange","parseNonUnitScaleProperty","parseScaleProperty","sType","scalePadding","scalePaddingInner","barConfig","continuousPadding","paddingValue","paddingInnerValue","bandPaddingOuter","getDefaultValue","parseUnitScaleProperty","valueWithExplicit","specifiedType","fieldDefMatchScaleType","parseScaleCore","scaleComponents","specifiedScaleType","parseUnitScaleCore","scaleTypeWithExplicitIndex","defaultScaleResolve","explicitScaleType","childScaleType","scaleTypeTieBreaker","childScale","renameScale","parseNonUnitScaleCore","st1","st2","NameMap","nameMap","rename","oldName","Model","parentGivenName","repeater","correctDataNames","scaleNameMap","projectionNameMap","layoutSizeNameMap","description","outputNodeRefCounts","initSize","parseScale","parseLayoutSize","renameTopLevelLayoutSize","parseSelection","parseData","parseAxisAndHeader","parseMarkGroup","NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES_1","renameLayoutSize","assembleGroupStyle","assembleLayoutSize","assembleHeaderMarks","headerMarks","HEADER_CHANNELS_1","HEADER_CHANNELS_2","assembleAxes","axisComponents","assembleGroup","signals","assembleSelectionSignals","layout","assembleLayout","assembleMarks","assembleScales","hasDescendantWithFieldOnChannel","fullName","oldSizeName","originalScaleName","localScaleComponent","variableName","origName","sel","ModelWithField","getMapping","acc","cd","scaleBindings","bind","selDef","bound","channelSignalName","topLevelSignals","SCALE_TRIGGER","predicate","hasScales","intervals","tupleTriggers","scaleTriggers","filterExpr_1","events","evt","cs","vname","dname","scaleStr","coord","channelSignals","toNum","TUPLE","modifyExpr","positionalProjections","xi","yi","store","vgStroke","clip","enter","nearest","cellDef","isVoronoi","exists","proj","force","multiSignals","hasSignal","ANCHOR","DELTA","onDelta","scalesCompiler","delta","sizeSg","scaleCmpt","compilers","tuField","tpl","sx","sy","inputs","sgname","unshift","forEachTransform","MODIFY","assembleUnitSelectionMarks","forEachSelection","selCompiler","txCompiler","selections","dfnode","stores","predicateStr","raw","tunode","name_3","singleCompiler","multiCompiler","intervalCompiler","getFacetModel","requiresSelectionId","identifier","sgNames","_signalNames","basename","counter","isFieldEqualPredicate","equal","isFieldRangePredicate","isFieldOneOfPredicate","oneOf","in","filterOp","isSelectionPredicate","useInRange","timeUnitFieldExpr","valueExpr","lower","upper","exprs","fieldFilterExpression","datetime","createBinComponent","isBinTransform","binKey","extentSignal","getSignalsFromModel","binComponent","BinNode","binComponentIndex","formulaAs","rangeFormula","binTrans","FilterNode","GeoJSONNode","parseAll","geoJsonCounter","coordinates","pair","GeoPointNode","IdentifierNode","LookupNode","secondary","fromSource","fromOutputName","fromOutputNode","foreign","asName","lookup","default","WindowTransformNode","window","windowFieldDef","getDefaultName","params","window_1","param","frame","sortOrder","sortField","ignorePeers","head","facetRoot","parseRoot","parentIsLayer","lookupCounter","parseTransformArray","rawName","agg","mainName","facetName","BaseConcatModel","assembleSelectionTopLevelSignals","sg","assembleSelectionData","db","layoutSizeEncodeEntry","parseLayerLayoutSize","parseChildrenLayoutSize","layoutSizeCmpt","parseNonUnitLayoutSizeForChannel","parseRepeatLayoutSize","mergedSize","childSize","scaleResolve","defaultUnitSize","ConcatModel","isVConcat","buildModel","sizeTypeToMerge","parseConcatLayoutSize","parseAxisGroup","columns","bounds","makeWalkTree","datasetIndex","walkTree","dataSource","source_1","replaceRepeat","repeat","replaceRepeaterInFieldDef","replaceRepeaterInChannelDef","replaceRepeater","FacetModel","replaceRepeaterInFacet","initFacet","normalizedFacet","parseHeader","mergeChildAxis","makeHeaderComponent","headerChannel","axisComponent","mainAxis","getLayoutBandMixins","bandMixins","bandType","headerComponent","columnDistinctSignal","getCardinalityAggregateForChild","root","assembleFacetData","aggregateMixins","cross","cardinalityAggregateForChild","AxisComponent","getAxisConfig","configTypes_1","configType","specifiedLabelsSpec","labelAlign","parseUnitAxis","specifiedAxis","gridChannel","properties.gridScale","properties.grid","properties.labelFlush","properties.labelOverlap","properties.orient","properties.tickCount","channel2","fieldDef2","properties.values","axisEncoding","axisEncode","encode.labels","parseAxis","OPPOSITE_ORIENT","bottom","top","left","right","mergeAxisComponents","mergedAxisCmpts","childAxisCmpts","length_1","mergeAxisComponent","VG_AXIS_PROPERTIES_1","normalizeMarkDef","specifiedOrient","yIsRange","xIsRange","xIsContinuous","yIsContinuous","xIsTemporal","yIsTemporal","defaultOpacity","filledConfig","discreteBandSize","encodeEntry","fixedShape","mixins.baseEncodeEntry","mixins.pointPosition","ref.mid","mixins.nonPosition","shapeMixins","markCompiler","vgMark","mixins.pointPosition2","mixins.defined","sizeDef","xScaleName","xScaleType","mixins.binnedPosition","mixins.bandPosition","mixins.centeredBandPosition","yScaleName","yScaleType","postEncodingTransform","shapeDef","x2Def","y2Def","xDefault","mixins.text","mixins.valueIfDefined","vgSizeChannel","vgThicknessChannel","bandSize","defaultSize","details","pathMarks","getMarkGroups","fromPrefix","FACETED_PATH_PREFIX","parsePathMark","scaleClip","getSort","UnitModel","parentGivenSize","specifiedAxes","specifiedLegends","replaceRepeaterInEncoding","initScales","initAxes","initLegend","_axis","axisSpec","_legend","layoutSizeComponent","parseUnitLayoutSize","selDefs","selCmpts","selectionConfig","cfg","parseUnitSelection","needsUnit","facetModel","name_2","assembleUnitSelectionSignals","assembleUnitSelectionData","toSpec","excludeConfig","excludeData","vlEncoding.channelHasField","LayerModel","axisCount","_g","_h","_j","_k","_l","oppositeOrient","parseLayerAxis","RepeatModel","repeatValues","_initChildren","row_1","rowField","column_1","columnField","childRepeat","unitSize","DEFAULT_REQUIRED_CHANNEL_MAP","DEFAULT_SUPPORTED_CHANNEL_TYPE","requiredChannelMap","supportedChannelMap","requiredChannels","inputSpec","newLogger","dataComponent","logger","vlFieldDef.setTitleFormatter","topLevelAutosize","configAutosize","isUnitOrLayer","normalizeAutoSize","optimizers.iterateFromLeaves","optimizers.removeUnusedSubtrees","optimizers.moveParseUp","optimizers.removeDuplicateTimeUnits","topLevelProperties","vgConfig","datasets","sourceIndex","dataName","newData","whereTo","data_2","assembleRootData","layoutSignals","$schema","assembleTopLevelModel","topLevelSpec","getTopLevelProperties","vlFieldDef.resetTitleFormatter"],"mappings":"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","file":"build/vega-lite.min.js.map","sourcesContent":["export default function(fn, fields, name) {\n  fn.fields = fields || [];\n  fn.fname = name;\n  return fn;\n}\n\nexport function accessorName(fn) {\n  return fn == null ? null : fn.fname;\n}\n\nexport function accessorFields(fn) {\n  return fn == null ? null : fn.fields;\n}\n","export default function(message) {\n  throw Error(message);\n}\n","import error from './error';\n\nexport default function(p) {\n  var path = [],\n      q = null,\n      b = 0,\n      n = p.length,\n      s = '',\n      i, j, c;\n\n  p = p + '';\n\n  function push() {\n    path.push(s + p.substring(i, j));\n    s = '';\n    i = j + 1;\n  }\n\n  for (i=j=0; j<n; ++j) {\n    c = p[j];\n    if (c === '\\\\') {\n      s += p.substring(i, j);\n      i = ++j;\n    } else if (c === q) {\n      push();\n      q = null;\n      b = -1;\n    } else if (q) {\n      continue;\n    } else if (i === b && c === '\"') {\n      i = j + 1;\n      q = c;\n    } else if (i === b && c === \"'\") {\n      i = j + 1;\n      q = c;\n    } else if (c === '.' && !b) {\n      if (j > i) {\n        push();\n      } else {\n        i = j + 1;\n      }\n    } else if (c === '[') {\n      if (j > i) push();\n      b = i = j + 1;\n    } else if (c === ']') {\n      if (!b) error('Access path missing open bracket: ' + p);\n      if (b > 0) push();\n      b = 0;\n      i = j + 1;\n    }\n  }\n\n  if (b) error('Access path missing closing bracket: ' + p);\n  if (q) error('Access path missing closing quote: ' + p);\n\n  if (j > i) {\n    j++;\n    push();\n  }\n\n  return path;\n}\n","export default Array.isArray;\n","export default function(_) {\n  return _ === Object(_);\n}\n","export default function(_) {\n  return typeof _ === 'string';\n}\n","import isArray from './isArray';\nimport isObject from './isObject';\nimport isString from './isString';\n\nexport default function $(x) {\n  return isArray(x) ? '[' + x.map($) + ']'\n    : isObject(x) || isString(x) ?\n      // Output valid JSON and JS source strings.\n      // See http://timelessrepo.com/json-isnt-a-javascript-subset\n      JSON.stringify(x).replace('\\u2028','\\\\u2028').replace('\\u2029', '\\\\u2029')\n    : x;\n}\n","import accessor from './accessor';\nimport field from './field';\n\nvar empty = [];\n\nexport var id = field('id');\n\nexport var identity = accessor(function(_) { return _; }, empty, 'identity');\n\nexport var zero = accessor(function() { return 0; }, empty, 'zero');\n\nexport var one = accessor(function() { return 1; }, empty, 'one');\n\nexport var truthy = accessor(function() { return true; }, empty, 'true');\n\nexport var falsy = accessor(function() { return false; }, empty, 'false');\n","import accessor from './accessor';\nimport splitAccessPath from './splitAccessPath';\nimport stringValue from './stringValue';\n\nexport default function(field, name) {\n  var path = splitAccessPath(field),\n      code = 'return _[' + path.map(stringValue).join('][') + '];';\n\n  return accessor(\n    Function('_', code),\n    [(field = path.length===1 ? path[0] : field)],\n    name || field\n  );\n}\n","function log(method, level, input) {\n  var args = [level].concat([].slice.call(input));\n  console[method].apply(console, args); // eslint-disable-line no-console\n}\n\nexport var None  = 0;\nexport var Error = 1;\nexport var Warn  = 2;\nexport var Info  = 3;\nexport var Debug = 4;\n\nexport default function(_) {\n  var level = _ || None;\n  return {\n    level: function(_) {\n      if (arguments.length) {\n        level = +_;\n        return this;\n      } else {\n        return level;\n      }\n    },\n    error: function() {\n      if (level >= Error) log('error', 'ERROR', arguments);\n      return this;\n    },\n    warn: function() {\n      if (level >= Warn) log('warn', 'WARN', arguments);\n      return this;\n    },\n    info: function() {\n      if (level >= Info) log('log', 'INFO', arguments);\n      return this;\n    },\n    debug: function() {\n      if (level >= Debug) log('log', 'DEBUG', arguments);\n      return this;\n    }\n  }\n}\n","export default function(_) {\n  return typeof _ === 'boolean';\n}\n","export default function(_) {\n  return typeof _ === 'number';\n}\n","export default function(_) {\n  for (var s={}, i=0, n=_.length; i<n; ++i) s[_[i]] = true;\n  return s;\n}\n","var at, // The index of the current character\n    ch, // The current character\n    escapee = {\n        '\"':  '\"',\n        '\\\\': '\\\\',\n        '/':  '/',\n        b:    '\\b',\n        f:    '\\f',\n        n:    '\\n',\n        r:    '\\r',\n        t:    '\\t'\n    },\n    text,\n\n    error = function (m) {\n        // Call error when something is wrong.\n        throw {\n            name:    'SyntaxError',\n            message: m,\n            at:      at,\n            text:    text\n        };\n    },\n    \n    next = function (c) {\n        // If a c parameter is provided, verify that it matches the current character.\n        if (c && c !== ch) {\n            error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n        }\n        \n        // Get the next character. When there are no more characters,\n        // return the empty string.\n        \n        ch = text.charAt(at);\n        at += 1;\n        return ch;\n    },\n    \n    number = function () {\n        // Parse a number value.\n        var number,\n            string = '';\n        \n        if (ch === '-') {\n            string = '-';\n            next('-');\n        }\n        while (ch >= '0' && ch <= '9') {\n            string += ch;\n            next();\n        }\n        if (ch === '.') {\n            string += '.';\n            while (next() && ch >= '0' && ch <= '9') {\n                string += ch;\n            }\n        }\n        if (ch === 'e' || ch === 'E') {\n            string += ch;\n            next();\n            if (ch === '-' || ch === '+') {\n                string += ch;\n                next();\n            }\n            while (ch >= '0' && ch <= '9') {\n                string += ch;\n                next();\n            }\n        }\n        number = +string;\n        if (!isFinite(number)) {\n            error(\"Bad number\");\n        } else {\n            return number;\n        }\n    },\n    \n    string = function () {\n        // Parse a string value.\n        var hex,\n            i,\n            string = '',\n            uffff;\n        \n        // When parsing for string values, we must look for \" and \\ characters.\n        if (ch === '\"') {\n            while (next()) {\n                if (ch === '\"') {\n                    next();\n                    return string;\n                } else if (ch === '\\\\') {\n                    next();\n                    if (ch === 'u') {\n                        uffff = 0;\n                        for (i = 0; i < 4; i += 1) {\n                            hex = parseInt(next(), 16);\n                            if (!isFinite(hex)) {\n                                break;\n                            }\n                            uffff = uffff * 16 + hex;\n                        }\n                        string += String.fromCharCode(uffff);\n                    } else if (typeof escapee[ch] === 'string') {\n                        string += escapee[ch];\n                    } else {\n                        break;\n                    }\n                } else {\n                    string += ch;\n                }\n            }\n        }\n        error(\"Bad string\");\n    },\n\n    white = function () {\n\n// Skip whitespace.\n\n        while (ch && ch <= ' ') {\n            next();\n        }\n    },\n\n    word = function () {\n\n// true, false, or null.\n\n        switch (ch) {\n        case 't':\n            next('t');\n            next('r');\n            next('u');\n            next('e');\n            return true;\n        case 'f':\n            next('f');\n            next('a');\n            next('l');\n            next('s');\n            next('e');\n            return false;\n        case 'n':\n            next('n');\n            next('u');\n            next('l');\n            next('l');\n            return null;\n        }\n        error(\"Unexpected '\" + ch + \"'\");\n    },\n\n    value,  // Place holder for the value function.\n\n    array = function () {\n\n// Parse an array value.\n\n        var array = [];\n\n        if (ch === '[') {\n            next('[');\n            white();\n            if (ch === ']') {\n                next(']');\n                return array;   // empty array\n            }\n            while (ch) {\n                array.push(value());\n                white();\n                if (ch === ']') {\n                    next(']');\n                    return array;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad array\");\n    },\n\n    object = function () {\n\n// Parse an object value.\n\n        var key,\n            object = {};\n\n        if (ch === '{') {\n            next('{');\n            white();\n            if (ch === '}') {\n                next('}');\n                return object;   // empty object\n            }\n            while (ch) {\n                key = string();\n                white();\n                next(':');\n                if (Object.hasOwnProperty.call(object, key)) {\n                    error('Duplicate key \"' + key + '\"');\n                }\n                object[key] = value();\n                white();\n                if (ch === '}') {\n                    next('}');\n                    return object;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad object\");\n    };\n\nvalue = function () {\n\n// Parse a JSON value. It could be an object, an array, a string, a number,\n// or a word.\n\n    white();\n    switch (ch) {\n    case '{':\n        return object();\n    case '[':\n        return array();\n    case '\"':\n        return string();\n    case '-':\n        return number();\n    default:\n        return ch >= '0' && ch <= '9' ? number() : word();\n    }\n};\n\n// Return the json_parse function. It will have access to all of the above\n// functions and variables.\n\nmodule.exports = function (source, reviver) {\n    var result;\n    \n    text = source;\n    at = 0;\n    ch = ' ';\n    result = value();\n    white();\n    if (ch) {\n        error(\"Syntax error\");\n    }\n\n    // If there is a reviver function, we recursively walk the new structure,\n    // passing each name/value pair to the reviver function for possible\n    // transformation, starting with a temporary root object that holds the result\n    // in an empty key. If there is not a reviver function, we simply return the\n    // result.\n\n    return typeof reviver === 'function' ? (function walk(holder, key) {\n        var k, v, value = holder[key];\n        if (value && typeof value === 'object') {\n            for (k in value) {\n                if (Object.prototype.hasOwnProperty.call(value, k)) {\n                    v = walk(value, k);\n                    if (v !== undefined) {\n                        value[k] = v;\n                    } else {\n                        delete value[k];\n                    }\n                }\n            }\n        }\n        return reviver.call(holder, key, value);\n    }({'': result}, '')) : result;\n};\n","var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    gap,\n    indent,\n    meta = {    // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"' : '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    },\n    rep;\n\nfunction quote(string) {\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n    \n    escapable.lastIndex = 0;\n    return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n        var c = meta[a];\n        return typeof c === 'string' ? c :\n            '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n    // Produce a string from holder[key].\n    var i,          // The loop counter.\n        k,          // The member key.\n        v,          // The member value.\n        length,\n        mind = gap,\n        partial,\n        value = holder[key];\n    \n    // If the value has a toJSON method, call it to obtain a replacement value.\n    if (value && typeof value === 'object' &&\n            typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n    }\n    \n    // If we were called with a replacer function, then call the replacer to\n    // obtain a replacement value.\n    if (typeof rep === 'function') {\n        value = rep.call(holder, key, value);\n    }\n    \n    // What happens next depends on the value's type.\n    switch (typeof value) {\n        case 'string':\n            return quote(value);\n        \n        case 'number':\n            // JSON numbers must be finite. Encode non-finite numbers as null.\n            return isFinite(value) ? String(value) : 'null';\n        \n        case 'boolean':\n        case 'null':\n            // If the value is a boolean or null, convert it to a string. Note:\n            // typeof null does not produce 'null'. The case is included here in\n            // the remote chance that this gets fixed someday.\n            return String(value);\n            \n        case 'object':\n            if (!value) return 'null';\n            gap += indent;\n            partial = [];\n            \n            // Array.isArray\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || 'null';\n                }\n                \n                // Join all of the elements together, separated with commas, and\n                // wrap them in brackets.\n                v = partial.length === 0 ? '[]' : gap ?\n                    '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                    '[' + partial.join(',') + ']';\n                gap = mind;\n                return v;\n            }\n            \n            // If the replacer is an array, use it to select the members to be\n            // stringified.\n            if (rep && typeof rep === 'object') {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    k = rep[i];\n                    if (typeof k === 'string') {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            else {\n                // Otherwise, iterate through all of the keys in the object.\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            \n        // Join all of the member texts together, separated with commas,\n        // and wrap them in braces.\n\n        v = partial.length === 0 ? '{}' : gap ?\n            '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n            '{' + partial.join(',') + '}';\n        gap = mind;\n        return v;\n    }\n}\n\nmodule.exports = function (value, replacer, space) {\n    var i;\n    gap = '';\n    indent = '';\n    \n    // If the space parameter is a number, make an indent string containing that\n    // many spaces.\n    if (typeof space === 'number') {\n        for (i = 0; i < space; i += 1) {\n            indent += ' ';\n        }\n    }\n    // If the space parameter is a string, it will be used as the indent string.\n    else if (typeof space === 'string') {\n        indent = space;\n    }\n\n    // If there is a replacer, it must be a function or an array.\n    // Otherwise, throw an error.\n    rep = replacer;\n    if (replacer && typeof replacer !== 'function'\n    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n        throw new Error('JSON.stringify');\n    }\n    \n    // Make a fake root object containing our value under the key of ''.\n    // Return the result of stringifying the value.\n    return str('', {'': value});\n};\n","var json = typeof JSON !== 'undefined' ? JSON : require('jsonify');\n\nmodule.exports = function (obj, opts) {\n    if (!opts) opts = {};\n    if (typeof opts === 'function') opts = { cmp: opts };\n    var space = opts.space || '';\n    if (typeof space === 'number') space = Array(space+1).join(' ');\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\n    var replacer = opts.replacer || function(key, value) { return value; };\n\n    var cmp = opts.cmp && (function (f) {\n        return function (node) {\n            return function (a, b) {\n                var aobj = { key: a, value: node[a] };\n                var bobj = { key: b, value: node[b] };\n                return f(aobj, bobj);\n            };\n        };\n    })(opts.cmp);\n\n    var seen = [];\n    return (function stringify (parent, key, node, level) {\n        var indent = space ? ('\\n' + new Array(level + 1).join(space)) : '';\n        var colonSeparator = space ? ': ' : ':';\n\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\n            node = node.toJSON();\n        }\n\n        node = replacer.call(parent, key, node);\n\n        if (node === undefined) {\n            return;\n        }\n        if (typeof node !== 'object' || node === null) {\n            return json.stringify(node);\n        }\n        if (isArray(node)) {\n            var out = [];\n            for (var i = 0; i < node.length; i++) {\n                var item = stringify(node, i, node[i], level+1) || json.stringify(null);\n                out.push(indent + space + item);\n            }\n            return '[' + out.join(',') + indent + ']';\n        }\n        else {\n            if (seen.indexOf(node) !== -1) {\n                if (cycles) return json.stringify('__cycle__');\n                throw new TypeError('Converting circular structure to JSON');\n            }\n            else seen.push(node);\n\n            var keys = objectKeys(node).sort(cmp && cmp(node));\n            var out = [];\n            for (var i = 0; i < keys.length; i++) {\n                var key = keys[i];\n                var value = stringify(node, key, node[key], level+1);\n\n                if(!value) continue;\n\n                var keyValue = json.stringify(key)\n                    + colonSeparator\n                    + value;\n                ;\n                out.push(indent + space + keyValue);\n            }\n            seen.splice(seen.indexOf(node), 1);\n            return '{' + out.join(',') + indent + '}';\n        }\n    })({ '': obj }, '', obj, 0);\n};\n\nvar isArray = Array.isArray || function (x) {\n    return {}.toString.call(x) === '[object Array]';\n};\n\nvar objectKeys = Object.keys || function (obj) {\n    var has = Object.prototype.hasOwnProperty || function () { return true };\n    var keys = [];\n    for (var key in obj) {\n        if (has.call(obj, key)) keys.push(key);\n    }\n    return keys;\n};\n","export function isLogicalOr(op) {\n    return !!op.or;\n}\nexport function isLogicalAnd(op) {\n    return !!op.and;\n}\nexport function isLogicalNot(op) {\n    return !!op.not;\n}\nexport function forEachLeaf(op, fn) {\n    if (isLogicalNot(op)) {\n        forEachLeaf(op.not, fn);\n    }\n    else if (isLogicalAnd(op)) {\n        for (var _i = 0, _a = op.and; _i < _a.length; _i++) {\n            var subop = _a[_i];\n            forEachLeaf(subop, fn);\n        }\n    }\n    else if (isLogicalOr(op)) {\n        for (var _b = 0, _c = op.or; _b < _c.length; _b++) {\n            var subop = _c[_b];\n            forEachLeaf(subop, fn);\n        }\n    }\n    else {\n        fn(op);\n    }\n}\nexport function normalizeLogicalOperand(op, normalizer) {\n    if (isLogicalNot(op)) {\n        return { not: normalizeLogicalOperand(op.not, normalizer) };\n    }\n    else if (isLogicalAnd(op)) {\n        return { and: op.and.map(function (o) { return normalizeLogicalOperand(o, normalizer); }) };\n    }\n    else if (isLogicalOr(op)) {\n        return { or: op.or.map(function (o) { return normalizeLogicalOperand(o, normalizer); }) };\n    }\n    else {\n        return normalizer(op);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naWNhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dpY2FsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLE1BQU0sc0JBQXNCLEVBQXVCO0lBQ2pELE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sdUJBQXVCLEVBQXVCO0lBQ2xELE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDbEIsQ0FBQztBQUVELE1BQU0sdUJBQXVCLEVBQXVCO0lBQ2xELE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDbEIsQ0FBQztBQUVELE1BQU0sc0JBQXlCLEVBQXFCLEVBQUUsRUFBbUI7SUFDdkUsSUFBSSxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDcEIsV0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDekI7U0FBTSxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUMzQixLQUFvQixVQUFNLEVBQU4sS0FBQSxFQUFFLENBQUMsR0FBRyxFQUFOLGNBQU0sRUFBTixJQUFNO1lBQXJCLElBQU0sS0FBSyxTQUFBO1lBQ2QsV0FBVyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN4QjtLQUNGO1NBQU0sSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDMUIsS0FBb0IsVUFBSyxFQUFMLEtBQUEsRUFBRSxDQUFDLEVBQUUsRUFBTCxjQUFLLEVBQUwsSUFBSztZQUFwQixJQUFNLEtBQUssU0FBQTtZQUNkLFdBQVcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDeEI7S0FDRjtTQUFNO1FBQ0wsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ1I7QUFDSCxDQUFDO0FBRUQsTUFBTSxrQ0FBcUMsRUFBcUIsRUFBRSxVQUF1QjtJQUN2RixJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNwQixPQUFPLEVBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLEVBQUMsQ0FBQztLQUMzRDtTQUFNLElBQUksWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQzNCLE9BQU8sRUFBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSx1QkFBdUIsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQXRDLENBQXNDLENBQUMsRUFBQyxDQUFDO0tBQ3ZFO1NBQU0sSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDMUIsT0FBTyxFQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLHVCQUF1QixDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBdEMsQ0FBc0MsQ0FBQyxFQUFDLENBQUM7S0FDckU7U0FBTTtRQUNMLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIExvZ2ljYWxPcGVyYW5kPFQ+ID0gTG9naWNhbE5vdDxUPiB8IExvZ2ljYWxBbmQ8VD4gfCBMb2dpY2FsT3I8VD4gfCBUO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvZ2ljYWxPcjxUPiB7XG4gIG9yOiBMb2dpY2FsT3BlcmFuZDxUPltdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvZ2ljYWxBbmQ8VD4ge1xuICBhbmQ6IExvZ2ljYWxPcGVyYW5kPFQ+W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9naWNhbE5vdDxUPiB7XG4gIG5vdDogTG9naWNhbE9wZXJhbmQ8VD47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xvZ2ljYWxPcihvcDogTG9naWNhbE9wZXJhbmQ8YW55Pik6IG9wIGlzIExvZ2ljYWxPcjxhbnk+IHtcbiAgcmV0dXJuICEhb3Aub3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xvZ2ljYWxBbmQob3A6IExvZ2ljYWxPcGVyYW5kPGFueT4pOiBvcCBpcyBMb2dpY2FsQW5kPGFueT4ge1xuICByZXR1cm4gISFvcC5hbmQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xvZ2ljYWxOb3Qob3A6IExvZ2ljYWxPcGVyYW5kPGFueT4pOiBvcCBpcyBMb2dpY2FsTm90PGFueT4ge1xuICByZXR1cm4gISFvcC5ub3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JFYWNoTGVhZjxUPihvcDogTG9naWNhbE9wZXJhbmQ8VD4sIGZuOiAob3A6IFQpID0+IHZvaWQpIHtcbiAgaWYgKGlzTG9naWNhbE5vdChvcCkpIHtcbiAgICBmb3JFYWNoTGVhZihvcC5ub3QsIGZuKTtcbiAgfSBlbHNlIGlmIChpc0xvZ2ljYWxBbmQob3ApKSB7XG4gICAgZm9yIChjb25zdCBzdWJvcCBvZiBvcC5hbmQpIHtcbiAgICAgIGZvckVhY2hMZWFmKHN1Ym9wLCBmbik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzTG9naWNhbE9yKG9wKSkge1xuICAgIGZvciAoY29uc3Qgc3Vib3Agb2Ygb3Aub3IpIHtcbiAgICAgIGZvckVhY2hMZWFmKHN1Ym9wLCBmbik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZuKG9wKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplTG9naWNhbE9wZXJhbmQ8VD4ob3A6IExvZ2ljYWxPcGVyYW5kPFQ+LCBub3JtYWxpemVyOiAobzogVCkgPT4gVCk6IExvZ2ljYWxPcGVyYW5kPFQ+IHtcbiAgaWYgKGlzTG9naWNhbE5vdChvcCkpIHtcbiAgICByZXR1cm4ge25vdDogbm9ybWFsaXplTG9naWNhbE9wZXJhbmQob3Aubm90LCBub3JtYWxpemVyKX07XG4gIH0gZWxzZSBpZiAoaXNMb2dpY2FsQW5kKG9wKSkge1xuICAgIHJldHVybiB7YW5kOiBvcC5hbmQubWFwKG8gPT4gbm9ybWFsaXplTG9naWNhbE9wZXJhbmQobywgbm9ybWFsaXplcikpfTtcbiAgfSBlbHNlIGlmIChpc0xvZ2ljYWxPcihvcCkpIHtcbiAgICByZXR1cm4ge29yOiBvcC5vci5tYXAobyA9PiBub3JtYWxpemVMb2dpY2FsT3BlcmFuZChvLCBub3JtYWxpemVyKSl9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBub3JtYWxpemVyKG9wKTtcbiAgfVxufVxuIl19","import * as stableStringify_ from 'json-stable-stringify';\nimport { isArray, isNumber, isString, splitAccessPath, stringValue } from 'vega-util';\nimport { isLogicalAnd, isLogicalNot, isLogicalOr } from './logical';\nvar stableStringify = stableStringify_['default'] || stableStringify_;\n/**\n * Creates an object composed of the picked object properties.\n *\n * Example:  (from lodash)\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // → {'a': 1, 'c': 3}\n *\n */\nexport function pick(obj, props) {\n    var copy = {};\n    for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {\n        var prop = props_1[_i];\n        if (obj.hasOwnProperty(prop)) {\n            copy[prop] = obj[prop];\n        }\n    }\n    return copy;\n}\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\nexport function omit(obj, props) {\n    var copy = duplicate(obj);\n    for (var _i = 0, props_2 = props; _i < props_2.length; _i++) {\n        var prop = props_2[_i];\n        delete copy[prop];\n    }\n    return copy;\n}\n/**\n * Converts any object into a string representation that can be consumed by humans.\n */\nexport var stringify = stableStringify;\n/**\n * Converts any object into a string of limited size, or a number.\n */\nexport function hash(a) {\n    if (isNumber(a)) {\n        return a;\n    }\n    var str = isString(a) ? a : stableStringify(a);\n    // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n    if (str.length < 100) {\n        return str;\n    }\n    // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n    var h = 0;\n    for (var i = 0; i < str.length; i++) {\n        var char = str.charCodeAt(i);\n        h = ((h << 5) - h) + char;\n        h = h & h; // Convert to 32bit integer\n    }\n    return h;\n}\nexport function contains(array, item) {\n    return array.indexOf(item) > -1;\n}\n/** Returns the array without the elements in item */\nexport function without(array, excludedItems) {\n    return array.filter(function (item) { return !contains(excludedItems, item); });\n}\nexport function union(array, other) {\n    return array.concat(without(other, array));\n}\n/**\n * Returns true if any item returns true.\n */\nexport function some(arr, f) {\n    var i = 0;\n    for (var k = 0; k < arr.length; k++) {\n        if (f(arr[k], k, i++)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Returns true if all items return true.\n */\nexport function every(arr, f) {\n    var i = 0;\n    for (var k = 0; k < arr.length; k++) {\n        if (!f(arr[k], k, i++)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function flatten(arrays) {\n    return [].concat.apply([], arrays);\n}\n/**\n * recursively merges src into dest\n */\nexport function mergeDeep(dest) {\n    var src = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        src[_i - 1] = arguments[_i];\n    }\n    for (var _a = 0, src_1 = src; _a < src_1.length; _a++) {\n        var s = src_1[_a];\n        dest = deepMerge_(dest, s);\n    }\n    return dest;\n}\n// recursively merges src into dest\nfunction deepMerge_(dest, src) {\n    if (typeof src !== 'object' || src === null) {\n        return dest;\n    }\n    for (var p in src) {\n        if (!src.hasOwnProperty(p)) {\n            continue;\n        }\n        if (src[p] === undefined) {\n            continue;\n        }\n        if (typeof src[p] !== 'object' || isArray(src[p]) || src[p] === null) {\n            dest[p] = src[p];\n        }\n        else if (typeof dest[p] !== 'object' || dest[p] === null) {\n            dest[p] = mergeDeep(isArray(src[p].constructor) ? [] : {}, src[p]);\n        }\n        else {\n            mergeDeep(dest[p], src[p]);\n        }\n    }\n    return dest;\n}\nexport function unique(values, f) {\n    var results = [];\n    var u = {};\n    var v;\n    for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n        var val = values_1[_i];\n        v = f(val);\n        if (v in u) {\n            continue;\n        }\n        u[v] = 1;\n        results.push(val);\n    }\n    return results;\n}\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\nexport function differ(dict, other) {\n    for (var key in dict) {\n        if (dict.hasOwnProperty(key)) {\n            if (other[key] && dict[key] && other[key] !== dict[key]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport function hasIntersection(a, b) {\n    for (var key in a) {\n        if (key in b) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function isNumeric(num) {\n    return !isNaN(num);\n}\nexport function differArray(array, other) {\n    if (array.length !== other.length) {\n        return true;\n    }\n    array.sort();\n    other.sort();\n    for (var i = 0; i < array.length; i++) {\n        if (other[i] !== array[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n// This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\nexport var keys = Object.keys;\nexport function vals(x) {\n    var _vals = [];\n    for (var k in x) {\n        if (x.hasOwnProperty(k)) {\n            _vals.push(x[k]);\n        }\n    }\n    return _vals;\n}\nexport function flagKeys(f) {\n    return keys(f);\n}\nexport function duplicate(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nexport function isBoolean(b) {\n    return b === true || b === false;\n}\n/**\n * Convert a string into a valid variable name\n */\nexport function varName(s) {\n    // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n    var alphanumericS = s.replace(/\\W/g, '_');\n    // Add _ if the string has leading numbers.\n    return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\nexport function logicalExpr(op, cb) {\n    if (isLogicalNot(op)) {\n        return '!(' + logicalExpr(op.not, cb) + ')';\n    }\n    else if (isLogicalAnd(op)) {\n        return '(' + op.and.map(function (and) { return logicalExpr(and, cb); }).join(') && (') + ')';\n    }\n    else if (isLogicalOr(op)) {\n        return '(' + op.or.map(function (or) { return logicalExpr(or, cb); }).join(') || (') + ')';\n    }\n    else {\n        return cb(op);\n    }\n}\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\nexport function deleteNestedProperty(obj, orderedProps) {\n    if (orderedProps.length === 0) {\n        return true;\n    }\n    var prop = orderedProps.shift();\n    if (deleteNestedProperty(obj[prop], orderedProps)) {\n        delete obj[prop];\n    }\n    return Object.keys(obj).length === 0;\n}\nexport function titlecase(s) {\n    return s.charAt(0).toUpperCase() + s.substr(1);\n}\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function accessPathWithDatum(path, datum) {\n    if (datum === void 0) { datum = 'datum'; }\n    var pieces = splitAccessPath(path);\n    var prefixes = [];\n    for (var i = 1; i <= pieces.length; i++) {\n        var prefix = \"[\" + pieces.slice(0, i).map(stringValue).join('][') + \"]\";\n        prefixes.push(\"\" + datum + prefix);\n    }\n    return prefixes.join(' && ');\n}\n/**\n * Return access with datum to the falttened field.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function flatAccessWithDatum(path, datum) {\n    if (datum === void 0) { datum = 'datum'; }\n    return datum + \"[\" + stringValue(splitAccessPath(path).join('.')) + \"]\";\n}\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\nexport function replacePathInField(path) {\n    return \"\" + splitAccessPath(path).map(function (p) { return p.replace('.', '\\\\.'); }).join('\\\\.');\n}\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\nexport function removePathFromField(path) {\n    return \"\" + splitAccessPath(path).join('.');\n}\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\nexport function accessPathDepth(path) {\n    return splitAccessPath(path).length;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxnQkFBZ0IsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNwRixPQUFPLEVBQUMsWUFBWSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQWlCLE1BQU0sV0FBVyxDQUFDO0FBRWxGLElBQU0sZUFBZSxHQUFHLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxJQUFJLGdCQUFnQixDQUFDO0FBRXhFOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sZUFBZSxHQUFXLEVBQUUsS0FBZTtJQUMvQyxJQUFNLElBQUksR0FBRyxFQUFFLENBQUM7SUFDaEIsS0FBbUIsVUFBSyxFQUFMLGVBQUssRUFBTCxtQkFBSyxFQUFMLElBQUs7UUFBbkIsSUFBTSxJQUFJLGNBQUE7UUFDYixJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxlQUFlLEdBQVcsRUFBRSxLQUFlO0lBQy9DLElBQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixLQUFtQixVQUFLLEVBQUwsZUFBSyxFQUFMLG1CQUFLLEVBQUwsSUFBSztRQUFuQixJQUFNLElBQUksY0FBQTtRQUNiLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ25CO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDO0FBRXpDOztHQUVHO0FBQ0gsTUFBTSxlQUFlLENBQU07SUFDekIsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDZixPQUFPLENBQUMsQ0FBQztLQUNWO0lBRUQsSUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVqRCwrRkFBK0Y7SUFDL0YsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtRQUNwQixPQUFPLEdBQUcsQ0FBQztLQUNaO0lBRUQsbUdBQW1HO0lBQ25HLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ25DLElBQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDO1FBQ3BCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0tBQ3ZDO0lBQ0QsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBRUQsTUFBTSxtQkFBc0IsS0FBVSxFQUFFLElBQU87SUFDN0MsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFFRCxxREFBcUQ7QUFDckQsTUFBTSxrQkFBcUIsS0FBVSxFQUFFLGFBQWtCO0lBQ3ZELE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsRUFBOUIsQ0FBOEIsQ0FBQyxDQUFDO0FBQzlELENBQUM7QUFFRCxNQUFNLGdCQUFtQixLQUFVLEVBQUUsS0FBVTtJQUM3QyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sZUFBa0IsR0FBUSxFQUFFLENBQXNDO0lBQ3RFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2pDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNyQixPQUFPLElBQUksQ0FBQztTQUNiO0tBQ0Y7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRDs7R0FFRztBQUNGLE1BQU0sZ0JBQW1CLEdBQVEsRUFBRSxDQUFzQztJQUN4RSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNqQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN0QixPQUFPLEtBQUssQ0FBQztTQUNkO0tBQ0Y7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRCxNQUFNLGtCQUFrQixNQUFhO0lBQ25DLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sb0JBQXVCLElBQU87SUFBRSxhQUFvQjtTQUFwQixVQUFvQixFQUFwQixxQkFBb0IsRUFBcEIsSUFBb0I7UUFBcEIsNEJBQW9COztJQUN4RCxLQUFnQixVQUFHLEVBQUgsV0FBRyxFQUFILGlCQUFHLEVBQUgsSUFBRztRQUFkLElBQU0sQ0FBQyxZQUFBO1FBQ1YsSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDNUI7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRCxtQ0FBbUM7QUFDbkMsb0JBQW9CLElBQVMsRUFBRSxHQUFRO0lBQ3JDLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDM0MsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELEtBQUssSUFBTSxDQUFDLElBQUksR0FBRyxFQUFFO1FBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzFCLFNBQVM7U0FDVjtRQUNELElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUN4QixTQUFTO1NBQ1Y7UUFDRCxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUNwRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xCO2FBQU0sSUFBSSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUMxRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BFO2FBQU07WUFDTCxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzVCO0tBQ0Y7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRCxNQUFNLGlCQUFvQixNQUFXLEVBQUUsQ0FBK0I7SUFDcEUsSUFBTSxPQUFPLEdBQVUsRUFBRSxDQUFDO0lBQzFCLElBQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNiLElBQUksQ0FBa0IsQ0FBQztJQUN2QixLQUFrQixVQUFNLEVBQU4saUJBQU0sRUFBTixvQkFBTSxFQUFOLElBQU07UUFBbkIsSUFBTSxHQUFHLGVBQUE7UUFDWixDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ1YsU0FBUztTQUNWO1FBQ0QsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNULE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDbkI7SUFDRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBUUQ7O0dBRUc7QUFDSCxNQUFNLGlCQUFvQixJQUFhLEVBQUUsS0FBYztJQUNyRCxLQUFLLElBQU0sR0FBRyxJQUFJLElBQUksRUFBRTtRQUN0QixJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3ZELE9BQU8sSUFBSSxDQUFDO2FBQ2I7U0FDRjtLQUNGO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSwwQkFBMEIsQ0FBWSxFQUFFLENBQVk7SUFDeEQsS0FBSyxJQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUU7UUFDbkIsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFO1lBQ1osT0FBTyxJQUFJLENBQUM7U0FDYjtLQUNGO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxvQkFBb0IsR0FBb0I7SUFDNUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFVLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBRUQsTUFBTSxzQkFBeUIsS0FBVSxFQUFFLEtBQVU7SUFDbkQsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLEtBQUssQ0FBQyxNQUFNLEVBQUU7UUFDakMsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNiLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUViLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN6QixPQUFPLElBQUksQ0FBQztTQUNiO0tBQ0Y7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxpSkFBaUo7QUFDakosTUFBTSxDQUFDLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFnQyxDQUFDO0FBRTVELE1BQU0sZUFBa0IsQ0FBcUI7SUFDM0MsSUFBTSxLQUFLLEdBQVEsRUFBRSxDQUFDO0lBQ3RCLEtBQUssSUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2pCLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN2QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xCO0tBQ0Y7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFRRCxNQUFNLG1CQUFxQyxDQUFVO0lBQ25ELE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBUSxDQUFDO0FBQ3hCLENBQUM7QUFFRCxNQUFNLG9CQUF1QixHQUFNO0lBQ2pDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVELE1BQU0sb0JBQW9CLENBQU07SUFDOUIsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUM7QUFDbkMsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxrQkFBa0IsQ0FBUztJQUMvQiwyRUFBMkU7SUFDM0UsSUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFNUMsMkNBQTJDO0lBQzNDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQztBQUN0RCxDQUFDO0FBRUQsTUFBTSxzQkFBeUIsRUFBcUIsRUFBRSxFQUFZO0lBQ2hFLElBQUksWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUM3QztTQUFNLElBQUksWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQzNCLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQUMsR0FBc0IsSUFBSyxPQUFBLFdBQVcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQXBCLENBQW9CLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ2hHO1NBQU0sSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDMUIsT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBQyxFQUFxQixJQUFLLE9BQUEsV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUM7S0FDN0Y7U0FBTTtRQUNMLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2Y7QUFDSCxDQUFDO0FBTUQ7O0dBRUc7QUFDSCxNQUFNLCtCQUErQixHQUFRLEVBQUUsWUFBc0I7SUFDbkUsSUFBSSxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUM3QixPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsSUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2xDLElBQUksb0JBQW9CLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFO1FBQ2pELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2xCO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELE1BQU0sb0JBQW9CLENBQVM7SUFDakMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLDhCQUE4QixJQUFZLEVBQUUsS0FBYTtJQUFiLHNCQUFBLEVBQUEsZUFBYTtJQUM3RCxJQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsSUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3ZDLElBQU0sTUFBTSxHQUFHLE1BQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBRyxDQUFDO1FBQ3BFLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBRyxLQUFLLEdBQUcsTUFBUSxDQUFDLENBQUM7S0FDcEM7SUFDRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLDhCQUE4QixJQUFZLEVBQUUsS0FBYTtJQUFiLHNCQUFBLEVBQUEsZUFBYTtJQUM3RCxPQUFVLEtBQUssU0FBSSxXQUFXLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFHLENBQUM7QUFDckUsQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sNkJBQTZCLElBQVk7SUFDN0MsT0FBTyxLQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBckIsQ0FBcUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUcsQ0FBQztBQUNoRixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSw4QkFBOEIsSUFBWTtJQUM5QyxPQUFPLEtBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUcsQ0FBQztBQUM5QyxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLDBCQUEwQixJQUFZO0lBQzFDLE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUN0QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgc3RhYmxlU3RyaW5naWZ5XyBmcm9tICdqc29uLXN0YWJsZS1zdHJpbmdpZnknO1xuaW1wb3J0IHtpc0FycmF5LCBpc051bWJlciwgaXNTdHJpbmcsIHNwbGl0QWNjZXNzUGF0aCwgc3RyaW5nVmFsdWV9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5pbXBvcnQge2lzTG9naWNhbEFuZCwgaXNMb2dpY2FsTm90LCBpc0xvZ2ljYWxPciwgTG9naWNhbE9wZXJhbmR9IGZyb20gJy4vbG9naWNhbCc7XG5cbmNvbnN0IHN0YWJsZVN0cmluZ2lmeSA9IHN0YWJsZVN0cmluZ2lmeV9bJ2RlZmF1bHQnXSB8fCBzdGFibGVTdHJpbmdpZnlfO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgb2JqZWN0IHByb3BlcnRpZXMuXG4gKlxuICogRXhhbXBsZTogIChmcm9tIGxvZGFzaClcbiAqXG4gKiB2YXIgb2JqZWN0ID0geydhJzogMSwgJ2InOiAnMicsICdjJzogM307XG4gKiBwaWNrKG9iamVjdCwgWydhJywgJ2MnXSk7XG4gKiAvLyDihpIgeydhJzogMSwgJ2MnOiAzfVxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBpY2sob2JqOiBvYmplY3QsIHByb3BzOiBzdHJpbmdbXSkge1xuICBjb25zdCBjb3B5ID0ge307XG4gIGZvciAoY29uc3QgcHJvcCBvZiBwcm9wcykge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgIGNvcHlbcHJvcF0gPSBvYmpbcHJvcF07XG4gICAgfVxuICB9XG4gIHJldHVybiBjb3B5O1xufVxuXG4vKipcbiAqIFRoZSBvcHBvc2l0ZSBvZiBfLnBpY2s7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBvd25cbiAqIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBvYmplY3QgdGhhdCBhcmUgbm90IG9taXR0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbWl0KG9iajogb2JqZWN0LCBwcm9wczogc3RyaW5nW10pIHtcbiAgY29uc3QgY29weSA9IGR1cGxpY2F0ZShvYmopO1xuICBmb3IgKGNvbnN0IHByb3Agb2YgcHJvcHMpIHtcbiAgICBkZWxldGUgY29weVtwcm9wXTtcbiAgfVxuICByZXR1cm4gY29weTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbnkgb2JqZWN0IGludG8gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gdGhhdCBjYW4gYmUgY29uc3VtZWQgYnkgaHVtYW5zLlxuICovXG5leHBvcnQgY29uc3Qgc3RyaW5naWZ5ID0gc3RhYmxlU3RyaW5naWZ5O1xuXG4vKipcbiAqIENvbnZlcnRzIGFueSBvYmplY3QgaW50byBhIHN0cmluZyBvZiBsaW1pdGVkIHNpemUsIG9yIGEgbnVtYmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzaChhOiBhbnkpIHtcbiAgaWYgKGlzTnVtYmVyKGEpKSB7XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICBjb25zdCBzdHIgPSBpc1N0cmluZyhhKSA/IGEgOiBzdGFibGVTdHJpbmdpZnkoYSk7XG5cbiAgLy8gc2hvcnQgc3RyaW5ncyBjYW4gYmUgdXNlZCBhcyBoYXNoIGRpcmVjdGx5LCBsb25nZXIgc3RyaW5ncyBhcmUgaGFzaGVkIHRvIHJlZHVjZSBtZW1vcnkgdXNhZ2VcbiAgaWYgKHN0ci5sZW5ndGggPCAxMDApIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgLy8gZnJvbSBodHRwOi8vd2VyeGx0ZC5jb20vd3AvMjAxMC8wNS8xMy9qYXZhc2NyaXB0LWltcGxlbWVudGF0aW9uLW9mLWphdmFzLXN0cmluZy1oYXNoY29kZS1tZXRob2QvXG4gIGxldCBoID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGFyID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaCA9ICgoaDw8NSktaCkrY2hhcjtcbiAgICBoID0gaCAmIGg7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG4gIHJldHVybiBoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnM8VD4oYXJyYXk6IFRbXSwgaXRlbTogVCkge1xuICByZXR1cm4gYXJyYXkuaW5kZXhPZihpdGVtKSA+IC0xO1xufVxuXG4vKiogUmV0dXJucyB0aGUgYXJyYXkgd2l0aG91dCB0aGUgZWxlbWVudHMgaW4gaXRlbSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhvdXQ8VD4oYXJyYXk6IFRbXSwgZXhjbHVkZWRJdGVtczogVFtdKSB7XG4gIHJldHVybiBhcnJheS5maWx0ZXIoaXRlbSA9PiAhY29udGFpbnMoZXhjbHVkZWRJdGVtcywgaXRlbSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5pb248VD4oYXJyYXk6IFRbXSwgb3RoZXI6IFRbXSkge1xuICByZXR1cm4gYXJyYXkuY29uY2F0KHdpdGhvdXQob3RoZXIsIGFycmF5KSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGFueSBpdGVtIHJldHVybnMgdHJ1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNvbWU8VD4oYXJyOiBUW10sIGY6IChkOiBULCBrPzogYW55LCBpPzogYW55KSA9PiBib29sZWFuKSB7XG4gIGxldCBpID0gMDtcbiAgZm9yIChsZXQgayA9IDA7IGs8YXJyLmxlbmd0aDsgaysrKSB7XG4gICAgaWYgKGYoYXJyW2tdLCBrLCBpKyspKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhbGwgaXRlbXMgcmV0dXJuIHRydWUuXG4gKi9cbiBleHBvcnQgZnVuY3Rpb24gZXZlcnk8VD4oYXJyOiBUW10sIGY6IChkOiBULCBrPzogYW55LCBpPzogYW55KSA9PiBib29sZWFuKSB7XG4gIGxldCBpID0gMDtcbiAgZm9yIChsZXQgayA9IDA7IGs8YXJyLmxlbmd0aDsgaysrKSB7XG4gICAgaWYgKCFmKGFycltrXSwgaywgaSsrKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXlzOiBhbnlbXSkge1xuICByZXR1cm4gW10uY29uY2F0LmFwcGx5KFtdLCBhcnJheXMpO1xufVxuXG4vKipcbiAqIHJlY3Vyc2l2ZWx5IG1lcmdlcyBzcmMgaW50byBkZXN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZURlZXA8VD4oZGVzdDogVCwgLi4uc3JjOiBQYXJ0aWFsPFQ+W10pOiBUIHtcbiAgZm9yIChjb25zdCBzIG9mIHNyYykge1xuICAgIGRlc3QgPSBkZWVwTWVyZ2VfKGRlc3QsIHMpO1xuICB9XG4gIHJldHVybiBkZXN0O1xufVxuXG4vLyByZWN1cnNpdmVseSBtZXJnZXMgc3JjIGludG8gZGVzdFxuZnVuY3Rpb24gZGVlcE1lcmdlXyhkZXN0OiBhbnksIHNyYzogYW55KSB7XG4gIGlmICh0eXBlb2Ygc3JjICE9PSAnb2JqZWN0JyB8fCBzcmMgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZGVzdDtcbiAgfVxuXG4gIGZvciAoY29uc3QgcCBpbiBzcmMpIHtcbiAgICBpZiAoIXNyYy5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChzcmNbcF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc3JjW3BdICE9PSAnb2JqZWN0JyB8fCBpc0FycmF5KHNyY1twXSkgfHwgc3JjW3BdID09PSBudWxsKSB7XG4gICAgICBkZXN0W3BdID0gc3JjW3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlc3RbcF0gIT09ICdvYmplY3QnIHx8IGRlc3RbcF0gPT09IG51bGwpIHtcbiAgICAgIGRlc3RbcF0gPSBtZXJnZURlZXAoaXNBcnJheShzcmNbcF0uY29uc3RydWN0b3IpID8gW10gOiB7fSwgc3JjW3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVyZ2VEZWVwKGRlc3RbcF0sIHNyY1twXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZXN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5pcXVlPFQ+KHZhbHVlczogVFtdLCBmOiAoaXRlbTogVCkgPT4gc3RyaW5nIHwgbnVtYmVyKTogVFtdIHtcbiAgY29uc3QgcmVzdWx0czogYW55W10gPSBbXTtcbiAgY29uc3QgdSA9IHt9O1xuICBsZXQgdjogc3RyaW5nIHwgbnVtYmVyO1xuICBmb3IgKGNvbnN0IHZhbCBvZiB2YWx1ZXMpIHtcbiAgICB2ID0gZih2YWwpO1xuICAgIGlmICh2IGluIHUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB1W3ZdID0gMTtcbiAgICByZXN1bHRzLnB1c2godmFsKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEaWN0PFQ+IHtcbiAgW2tleTogc3RyaW5nXTogVDtcbn1cblxuZXhwb3J0IHR5cGUgU3RyaW5nU2V0ID0gRGljdDx0cnVlPjtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHR3byBkaWN0aW9uYXJpZXMgZGlzYWdyZWUuIEFwcGxpZXMgb25seSB0byBkZWZpbmVkIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpZmZlcjxUPihkaWN0OiBEaWN0PFQ+LCBvdGhlcjogRGljdDxUPikge1xuICBmb3IgKGNvbnN0IGtleSBpbiBkaWN0KSB7XG4gICAgaWYgKGRpY3QuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgaWYgKG90aGVyW2tleV0gJiYgZGljdFtrZXldICYmIG90aGVyW2tleV0gIT09IGRpY3Rba2V5XSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzSW50ZXJzZWN0aW9uKGE6IFN0cmluZ1NldCwgYjogU3RyaW5nU2V0KSB7XG4gIGZvciAoY29uc3Qga2V5IGluIGEpIHtcbiAgICBpZiAoa2V5IGluIGIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWVyaWMobnVtOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgcmV0dXJuICFpc05hTihudW0gYXMgYW55KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZlckFycmF5PFQ+KGFycmF5OiBUW10sIG90aGVyOiBUW10pIHtcbiAgaWYgKGFycmF5Lmxlbmd0aCAhPT0gb3RoZXIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhcnJheS5zb3J0KCk7XG4gIG90aGVyLnNvcnQoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG90aGVyW2ldICE9PSBhcnJheVtpXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBUaGlzIGlzIGEgc3RyaWN0ZXIgdmVyc2lvbiBvZiBPYmplY3Qua2V5cyBidXQgd2l0aCBiZXR0ZXIgdHlwZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvcHVsbC8xMjI1MyNpc3N1ZWNvbW1lbnQtMjYzMTMyMjA4XG5leHBvcnQgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzIGFzIDxUPihvOiBUKSA9PiAoa2V5b2YgVClbXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbHM8VD4oeDoge1trZXk6IHN0cmluZ106IFR9KTogVFtdIHtcbiAgY29uc3QgX3ZhbHM6IFRbXSA9IFtdO1xuICBmb3IgKGNvbnN0IGsgaW4geCkge1xuICAgIGlmICh4Lmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICBfdmFscy5wdXNoKHhba10pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX3ZhbHM7XG59XG5cbi8vIFVzaW5nIG1hcHBlZCB0eXBlIHRvIGRlY2xhcmUgYSBjb2xsZWN0IG9mIGZsYWdzIGZvciBhIHN0cmluZyBsaXRlcmFsIHR5cGUgU1xuLy8gaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svYWR2YW5jZWQtdHlwZXMuaHRtbCNtYXBwZWQtdHlwZXNcbmV4cG9ydCB0eXBlIEZsYWc8UyBleHRlbmRzIHN0cmluZz4gPSB7XG4gIFtLIGluIFNdOiAxXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZmxhZ0tleXM8UyBleHRlbmRzIHN0cmluZz4oZjogRmxhZzxTPik6IFNbXSB7XG4gIHJldHVybiBrZXlzKGYpIGFzIFNbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGR1cGxpY2F0ZTxUPihvYmo6IFQpOiBUIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Jvb2xlYW4oYjogYW55KTogYiBpcyBib29sZWFuIHtcbiAgcmV0dXJuIGIgPT09IHRydWUgfHwgYiA9PT0gZmFsc2U7XG59XG5cbi8qKlxuICogQ29udmVydCBhIHN0cmluZyBpbnRvIGEgdmFsaWQgdmFyaWFibGUgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFyTmFtZShzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAvLyBSZXBsYWNlIG5vbi1hbHBoYW51bWVyaWMgY2hhcmFjdGVycyAoYW55dGhpbmcgYmVzaWRlcyBhLXpBLVowLTlfKSB3aXRoIF9cbiAgY29uc3QgYWxwaGFudW1lcmljUyA9IHMucmVwbGFjZSgvXFxXL2csICdfJyk7XG5cbiAgLy8gQWRkIF8gaWYgdGhlIHN0cmluZyBoYXMgbGVhZGluZyBudW1iZXJzLlxuICByZXR1cm4gKHMubWF0Y2goL15cXGQrLykgPyAnXycgOiAnJykgKyBhbHBoYW51bWVyaWNTO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9naWNhbEV4cHI8VD4ob3A6IExvZ2ljYWxPcGVyYW5kPFQ+LCBjYjogRnVuY3Rpb24pOiBzdHJpbmcge1xuICBpZiAoaXNMb2dpY2FsTm90KG9wKSkge1xuICAgIHJldHVybiAnISgnICsgbG9naWNhbEV4cHIob3Aubm90LCBjYikgKyAnKSc7XG4gIH0gZWxzZSBpZiAoaXNMb2dpY2FsQW5kKG9wKSkge1xuICAgIHJldHVybiAnKCcgKyBvcC5hbmQubWFwKChhbmQ6IExvZ2ljYWxPcGVyYW5kPFQ+KSA9PiBsb2dpY2FsRXhwcihhbmQsIGNiKSkuam9pbignKSAmJiAoJykgKyAnKSc7XG4gIH0gZWxzZSBpZiAoaXNMb2dpY2FsT3Iob3ApKSB7XG4gICAgcmV0dXJuICcoJyArIG9wLm9yLm1hcCgob3I6IExvZ2ljYWxPcGVyYW5kPFQ+KSA9PiBsb2dpY2FsRXhwcihvciwgY2IpKS5qb2luKCcpIHx8ICgnKSArICcpJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2Iob3ApO1xuICB9XG59XG5cbi8vIE9taXQgZnJvbSBodHRwOi8vaWRlYXNpbnRvc29mdHdhcmUuY29tL3R5cGVzY3JpcHQtYWR2YW5jZWQtdHJpY2tzL1xuZXhwb3J0IHR5cGUgRGlmZjxUIGV4dGVuZHMgc3RyaW5nLCBVIGV4dGVuZHMgc3RyaW5nPiA9ICh7W1AgaW4gVF06IFAgfSAmIHtbUCBpbiBVXTogbmV2ZXIgfSAmIHsgW3g6IHN0cmluZ106IG5ldmVyIH0pW1RdO1xuZXhwb3J0IHR5cGUgT21pdDxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSB7W1AgaW4gRGlmZjxrZXlvZiBULCBLPl06IFRbUF19O1xuXG4vKipcbiAqIERlbGV0ZSBuZXN0ZWQgcHJvcGVydHkgb2YgYW4gb2JqZWN0LCBhbmQgZGVsZXRlIHRoZSBhbmNlc3RvcnMgb2YgdGhlIHByb3BlcnR5IGlmIHRoZXkgYmVjb21lIGVtcHR5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlTmVzdGVkUHJvcGVydHkob2JqOiBhbnksIG9yZGVyZWRQcm9wczogc3RyaW5nW10pIHtcbiAgaWYgKG9yZGVyZWRQcm9wcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCBwcm9wID0gb3JkZXJlZFByb3BzLnNoaWZ0KCk7XG4gIGlmIChkZWxldGVOZXN0ZWRQcm9wZXJ0eShvYmpbcHJvcF0sIG9yZGVyZWRQcm9wcykpIHtcbiAgICBkZWxldGUgb2JqW3Byb3BdO1xuICB9XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpdGxlY2FzZShzOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzLnN1YnN0cigxKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHBhdGggdG8gYW4gYWNjZXNzIHBhdGggd2l0aCBkYXR1bS5cbiAqIEBwYXJhbSBwYXRoIFRoZSBmaWVsZCBuYW1lLlxuICogQHBhcmFtIGRhdHVtIFRoZSBzdHJpbmcgdG8gdXNlIGZvciBgZGF0dW1gLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWNjZXNzUGF0aFdpdGhEYXR1bShwYXRoOiBzdHJpbmcsIGRhdHVtPSdkYXR1bScpIHtcbiAgY29uc3QgcGllY2VzID0gc3BsaXRBY2Nlc3NQYXRoKHBhdGgpO1xuICBjb25zdCBwcmVmaXhlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMTsgaSA8PSBwaWVjZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwcmVmaXggPSBgWyR7cGllY2VzLnNsaWNlKDAsaSkubWFwKHN0cmluZ1ZhbHVlKS5qb2luKCddWycpfV1gO1xuICAgIHByZWZpeGVzLnB1c2goYCR7ZGF0dW19JHtwcmVmaXh9YCk7XG4gIH1cbiAgcmV0dXJuIHByZWZpeGVzLmpvaW4oJyAmJiAnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYWNjZXNzIHdpdGggZGF0dW0gdG8gdGhlIGZhbHR0ZW5lZCBmaWVsZC5cbiAqIEBwYXJhbSBwYXRoIFRoZSBmaWVsZCBuYW1lLlxuICogQHBhcmFtIGRhdHVtIFRoZSBzdHJpbmcgdG8gdXNlIGZvciBgZGF0dW1gLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxhdEFjY2Vzc1dpdGhEYXR1bShwYXRoOiBzdHJpbmcsIGRhdHVtPSdkYXR1bScpIHtcbiAgcmV0dXJuIGAke2RhdHVtfVske3N0cmluZ1ZhbHVlKHNwbGl0QWNjZXNzUGF0aChwYXRoKS5qb2luKCcuJykpfV1gO1xufVxuXG4vKipcbiAqIFJlcGxhY2VzIHBhdGggYWNjZXNzZXMgd2l0aCBhY2Nlc3MgdG8gbm9uLW5lc3RlZCBmaWVsZC5cbiAqIEZvciBleGFtcGxlLCBgZm9vW1wiYmFyXCJdLmJhemAgYmVjb21lcyBgZm9vXFxcXC5iYXJcXFxcLmJhemAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlUGF0aEluRmllbGQocGF0aDogc3RyaW5nKSB7XG4gIHJldHVybiBgJHtzcGxpdEFjY2Vzc1BhdGgocGF0aCkubWFwKHAgPT4gcC5yZXBsYWNlKCcuJywgJ1xcXFwuJykpLmpvaW4oJ1xcXFwuJyl9YDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgcGF0aCBhY2Nlc3NlcyB3aXRoIGFjY2VzcyBmcm9tIGZpZWxkLlxuICogRm9yIGV4YW1wbGUsIGBmb29bXCJiYXJcIl0uYmF6YCBiZWNvbWVzIGBmb28uYmFyLmJhemAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVQYXRoRnJvbUZpZWxkKHBhdGg6IHN0cmluZykge1xuICByZXR1cm4gYCR7c3BsaXRBY2Nlc3NQYXRoKHBhdGgpLmpvaW4oJy4nKX1gO1xufVxuXG4vKipcbiAqIENvdW50IHRoZSBkZXB0aCBvZiB0aGUgcGF0aC4gUmV0dXJucyAxIGZvciBmaWVsZHMgdGhhdCBhcmUgbm90IG5lc3RlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFjY2Vzc1BhdGhEZXB0aChwYXRoOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHNwbGl0QWNjZXNzUGF0aChwYXRoKS5sZW5ndGg7XG59XG4iXX0=","import { toSet } from 'vega-util';\nimport { contains, flagKeys } from './util';\nvar AGGREGATE_OP_INDEX = {\n    argmax: 1,\n    argmin: 1,\n    average: 1,\n    count: 1,\n    distinct: 1,\n    max: 1,\n    mean: 1,\n    median: 1,\n    min: 1,\n    missing: 1,\n    q1: 1,\n    q3: 1,\n    ci0: 1,\n    ci1: 1,\n    stderr: 1,\n    stdev: 1,\n    stdevp: 1,\n    sum: 1,\n    valid: 1,\n    values: 1,\n    variance: 1,\n    variancep: 1,\n};\nexport var AGGREGATE_OPS = flagKeys(AGGREGATE_OP_INDEX);\nexport function isAggregateOp(a) {\n    return !!AGGREGATE_OP_INDEX[a];\n}\nexport var COUNTING_OPS = ['count', 'valid', 'missing', 'distinct'];\nexport function isCountingAggregateOp(aggregate) {\n    return aggregate && contains(COUNTING_OPS, aggregate);\n}\n/** Additive-based aggregation operations.  These can be applied to stack. */\nexport var SUM_OPS = [\n    'count',\n    'sum',\n    'distinct',\n    'valid',\n    'missing'\n];\n/**\n * Aggregation operators that always produce values within the range [domainMin, domainMax].\n */\nexport var SHARED_DOMAIN_OPS = [\n    'mean',\n    'average',\n    'median',\n    'q1',\n    'q3',\n    'min',\n    'max',\n];\nexport var SHARED_DOMAIN_OP_INDEX = toSet(SHARED_DOMAIN_OPS);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FnZ3JlZ2F0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxRQUFRLEVBQVEsUUFBUSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBRWhELElBQU0sa0JBQWtCLEdBQXNCO0lBQzVDLE1BQU0sRUFBRSxDQUFDO0lBQ1QsTUFBTSxFQUFFLENBQUM7SUFDVCxPQUFPLEVBQUUsQ0FBQztJQUNWLEtBQUssRUFBRSxDQUFDO0lBQ1IsUUFBUSxFQUFFLENBQUM7SUFDWCxHQUFHLEVBQUUsQ0FBQztJQUNOLElBQUksRUFBRSxDQUFDO0lBQ1AsTUFBTSxFQUFFLENBQUM7SUFDVCxHQUFHLEVBQUUsQ0FBQztJQUNOLE9BQU8sRUFBRSxDQUFDO0lBQ1YsRUFBRSxFQUFFLENBQUM7SUFDTCxFQUFFLEVBQUUsQ0FBQztJQUNMLEdBQUcsRUFBRSxDQUFDO0lBQ04sR0FBRyxFQUFFLENBQUM7SUFDTixNQUFNLEVBQUUsQ0FBQztJQUNULEtBQUssRUFBRSxDQUFDO0lBQ1IsTUFBTSxFQUFFLENBQUM7SUFDVCxHQUFHLEVBQUUsQ0FBQztJQUNOLEtBQUssRUFBRSxDQUFDO0lBQ1IsTUFBTSxFQUFFLENBQUM7SUFDVCxRQUFRLEVBQUUsQ0FBQztJQUNYLFNBQVMsRUFBRSxDQUFDO0NBQ2IsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUUxRCxNQUFNLHdCQUF3QixDQUFTO0lBQ3JDLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQWtCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFFckYsTUFBTSxnQ0FBZ0MsU0FBaUI7SUFDckQsT0FBTyxTQUFTLElBQUksUUFBUSxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQsNkVBQTZFO0FBQzdFLE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBa0I7SUFDbEMsT0FBTztJQUNQLEtBQUs7SUFDTCxVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7Q0FDWixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FBa0I7SUFDNUMsTUFBTTtJQUNOLFNBQVM7SUFDVCxRQUFRO0lBQ1IsSUFBSTtJQUNKLElBQUk7SUFDSixLQUFLO0lBQ0wsS0FBSztDQUNSLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxzQkFBc0IsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWdncmVnYXRlT3B9IGZyb20gJ3ZlZ2EnO1xuaW1wb3J0IHt0b1NldH0gZnJvbSAndmVnYS11dGlsJztcbmltcG9ydCB7Y29udGFpbnMsIEZsYWcsIGZsYWdLZXlzfSBmcm9tICcuL3V0aWwnO1xuXG5jb25zdCBBR0dSRUdBVEVfT1BfSU5ERVg6IEZsYWc8QWdncmVnYXRlT3A+ID0ge1xuICBhcmdtYXg6IDEsXG4gIGFyZ21pbjogMSxcbiAgYXZlcmFnZTogMSxcbiAgY291bnQ6IDEsXG4gIGRpc3RpbmN0OiAxLFxuICBtYXg6IDEsXG4gIG1lYW46IDEsXG4gIG1lZGlhbjogMSxcbiAgbWluOiAxLFxuICBtaXNzaW5nOiAxLFxuICBxMTogMSxcbiAgcTM6IDEsXG4gIGNpMDogMSxcbiAgY2kxOiAxLFxuICBzdGRlcnI6IDEsXG4gIHN0ZGV2OiAxLFxuICBzdGRldnA6IDEsXG4gIHN1bTogMSxcbiAgdmFsaWQ6IDEsXG4gIHZhbHVlczogMSxcbiAgdmFyaWFuY2U6IDEsXG4gIHZhcmlhbmNlcDogMSxcbn07XG5cbmV4cG9ydCBjb25zdCBBR0dSRUdBVEVfT1BTID0gZmxhZ0tleXMoQUdHUkVHQVRFX09QX0lOREVYKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWdncmVnYXRlT3AoYTogc3RyaW5nKTogYSBpcyBBZ2dyZWdhdGVPcCB7XG4gIHJldHVybiAhIUFHR1JFR0FURV9PUF9JTkRFWFthXTtcbn1cblxuZXhwb3J0IGNvbnN0IENPVU5USU5HX09QUzogQWdncmVnYXRlT3BbXSA9IFsnY291bnQnLCAndmFsaWQnLCAnbWlzc2luZycsICdkaXN0aW5jdCddO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNDb3VudGluZ0FnZ3JlZ2F0ZU9wKGFnZ3JlZ2F0ZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBhZ2dyZWdhdGUgJiYgY29udGFpbnMoQ09VTlRJTkdfT1BTLCBhZ2dyZWdhdGUpO1xufVxuXG4vKiogQWRkaXRpdmUtYmFzZWQgYWdncmVnYXRpb24gb3BlcmF0aW9ucy4gIFRoZXNlIGNhbiBiZSBhcHBsaWVkIHRvIHN0YWNrLiAqL1xuZXhwb3J0IGNvbnN0IFNVTV9PUFM6IEFnZ3JlZ2F0ZU9wW10gPSBbXG4gICAgJ2NvdW50JyxcbiAgICAnc3VtJyxcbiAgICAnZGlzdGluY3QnLFxuICAgICd2YWxpZCcsXG4gICAgJ21pc3NpbmcnXG5dO1xuXG4vKipcbiAqIEFnZ3JlZ2F0aW9uIG9wZXJhdG9ycyB0aGF0IGFsd2F5cyBwcm9kdWNlIHZhbHVlcyB3aXRoaW4gdGhlIHJhbmdlIFtkb21haW5NaW4sIGRvbWFpbk1heF0uXG4gKi9cbmV4cG9ydCBjb25zdCBTSEFSRURfRE9NQUlOX09QUzogQWdncmVnYXRlT3BbXSA9IFtcbiAgICAnbWVhbicsXG4gICAgJ2F2ZXJhZ2UnLFxuICAgICdtZWRpYW4nLFxuICAgICdxMScsXG4gICAgJ3EzJyxcbiAgICAnbWluJyxcbiAgICAnbWF4Jyxcbl07XG5cbmV4cG9ydCBjb25zdCBTSEFSRURfRE9NQUlOX09QX0lOREVYID0gdG9TZXQoU0hBUkVEX0RPTUFJTl9PUFMpO1xuIl19","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import * as tslib_1 from \"tslib\";\nimport { flagKeys } from './util';\nexport var AXIS_PARTS = ['domain', 'grid', 'labels', 'ticks', 'title'];\n/**\n * A dictionary listing whether a certain axis property is applicable for only main axes or only grid axes.\n * (Properties not listed are applicable for both)\n */\nexport var AXIS_PROPERTY_TYPE = {\n    grid: 'grid',\n    gridScale: 'grid',\n    domain: 'main',\n    labels: 'main',\n    labelFlush: 'main',\n    labelOverlap: 'main',\n    minExtent: 'main',\n    maxExtent: 'main',\n    offset: 'main',\n    ticks: 'main',\n    title: 'main',\n    values: 'both',\n    scale: 'both',\n    zindex: 'both' // this is actually set afterward, so it doesn't matter\n};\nvar COMMON_AXIS_PROPERTIES_INDEX = {\n    orient: 1,\n    domain: 1,\n    format: 1,\n    grid: 1,\n    labelBound: 1,\n    labelFlush: 1,\n    labelPadding: 1,\n    labels: 1,\n    labelOverlap: 1,\n    maxExtent: 1,\n    minExtent: 1,\n    offset: 1,\n    position: 1,\n    tickCount: 1,\n    ticks: 1,\n    tickSize: 1,\n    title: 1,\n    titlePadding: 1,\n    values: 1,\n    zindex: 1,\n};\nvar AXIS_PROPERTIES_INDEX = tslib_1.__assign({}, COMMON_AXIS_PROPERTIES_INDEX, { encoding: 1, labelAngle: 1, titleMaxLength: 1 });\nvar VG_AXIS_PROPERTIES_INDEX = tslib_1.__assign({ scale: 1 }, COMMON_AXIS_PROPERTIES_INDEX, { gridScale: 1, encode: 1 });\nexport function isAxisProperty(prop) {\n    return !!AXIS_PROPERTIES_INDEX[prop];\n}\nexport var VG_AXIS_PROPERTIES = flagKeys(VG_AXIS_PROPERTIES_INDEX);\n// Export for dependent projects\nexport var AXIS_PROPERTIES = flagKeys(AXIS_PROPERTIES_INDEX);\n//# sourceMappingURL=data:application/json;base64,","/*\n * Constants and utilities for encoding channels (Visual variables)\n * such as 'x', 'y', 'color'.\n */\nimport * as tslib_1 from \"tslib\";\nimport { flagKeys } from './util';\nexport var Channel;\n(function (Channel) {\n    // Facet\n    Channel.ROW = 'row';\n    Channel.COLUMN = 'column';\n    // Position\n    Channel.X = 'x';\n    Channel.Y = 'y';\n    Channel.X2 = 'x2';\n    Channel.Y2 = 'y2';\n    // Geo Position\n    Channel.LATITUDE = 'latitude';\n    Channel.LONGITUDE = 'longitude';\n    Channel.LATITUDE2 = 'latitude2';\n    Channel.LONGITUDE2 = 'longitude2';\n    // Mark property with scale\n    Channel.COLOR = 'color';\n    Channel.FILL = 'fill';\n    Channel.STROKE = 'stroke';\n    Channel.SHAPE = 'shape';\n    Channel.SIZE = 'size';\n    Channel.OPACITY = 'opacity';\n    // Non-scale channel\n    Channel.TEXT = 'text';\n    Channel.ORDER = 'order';\n    Channel.DETAIL = 'detail';\n    Channel.KEY = 'key';\n    Channel.TOOLTIP = 'tooltip';\n    Channel.HREF = 'href';\n})(Channel || (Channel = {}));\nexport var X = Channel.X;\nexport var Y = Channel.Y;\nexport var X2 = Channel.X2;\nexport var Y2 = Channel.Y2;\nexport var LATITUDE = Channel.LATITUDE;\nexport var LATITUDE2 = Channel.LATITUDE2;\nexport var LONGITUDE = Channel.LONGITUDE;\nexport var LONGITUDE2 = Channel.LONGITUDE2;\nexport var ROW = Channel.ROW;\nexport var COLUMN = Channel.COLUMN;\nexport var SHAPE = Channel.SHAPE;\nexport var SIZE = Channel.SIZE;\nexport var COLOR = Channel.COLOR;\nexport var FILL = Channel.FILL;\nexport var STROKE = Channel.STROKE;\nexport var TEXT = Channel.TEXT;\nexport var DETAIL = Channel.DETAIL;\nexport var KEY = Channel.KEY;\nexport var ORDER = Channel.ORDER;\nexport var OPACITY = Channel.OPACITY;\nexport var TOOLTIP = Channel.TOOLTIP;\nexport var HREF = Channel.HREF;\nexport var GEOPOSITION_CHANNEL_INDEX = {\n    longitude: 1,\n    longitude2: 1,\n    latitude: 1,\n    latitude2: 1,\n};\nexport var GEOPOSITION_CHANNELS = flagKeys(GEOPOSITION_CHANNEL_INDEX);\nvar UNIT_CHANNEL_INDEX = tslib_1.__assign({ \n    // position\n    x: 1, y: 1, x2: 1, y2: 1 }, GEOPOSITION_CHANNEL_INDEX, { \n    // color\n    color: 1, fill: 1, stroke: 1, \n    // other non-position with scale\n    opacity: 1, size: 1, shape: 1, \n    // channels without scales\n    order: 1, text: 1, detail: 1, key: 1, tooltip: 1, href: 1 });\nexport function isColorChannel(channel) {\n    return channel === 'color' || channel === 'fill' || channel === 'stroke';\n}\nvar FACET_CHANNEL_INDEX = {\n    row: 1,\n    column: 1\n};\nvar CHANNEL_INDEX = tslib_1.__assign({}, UNIT_CHANNEL_INDEX, FACET_CHANNEL_INDEX);\nexport var CHANNELS = flagKeys(CHANNEL_INDEX);\nvar _o = CHANNEL_INDEX.order, _d = CHANNEL_INDEX.detail, SINGLE_DEF_CHANNEL_INDEX = tslib_1.__rest(CHANNEL_INDEX, [\"order\", \"detail\"]);\n/**\n * Channels that cannot have an array of channelDef.\n * model.fieldDef, getFieldDef only work for these channels.\n *\n * (The only two channels that can have an array of channelDefs are \"detail\" and \"order\".\n * Since there can be multiple fieldDefs for detail and order, getFieldDef/model.fieldDef\n * are not applicable for them.  Similarly, selection projection won't work with \"detail\" and \"order\".)\n */\nexport var SINGLE_DEF_CHANNELS = flagKeys(SINGLE_DEF_CHANNEL_INDEX);\nexport function isChannel(str) {\n    return !!CHANNEL_INDEX[str];\n}\n// CHANNELS without COLUMN, ROW\nexport var UNIT_CHANNELS = flagKeys(UNIT_CHANNEL_INDEX);\n// NONPOSITION_CHANNELS = UNIT_CHANNELS without X, Y, X2, Y2;\nvar _x = UNIT_CHANNEL_INDEX.x, _y = UNIT_CHANNEL_INDEX.y, \n// x2 and y2 share the same scale as x and y\n_x2 = UNIT_CHANNEL_INDEX.x2, _y2 = UNIT_CHANNEL_INDEX.y2, _latitude = UNIT_CHANNEL_INDEX.latitude, _longitude = UNIT_CHANNEL_INDEX.longitude, _latitude2 = UNIT_CHANNEL_INDEX.latitude2, _longitude2 = UNIT_CHANNEL_INDEX.longitude2, \n// The rest of unit channels then have scale\nNONPOSITION_CHANNEL_INDEX = tslib_1.__rest(UNIT_CHANNEL_INDEX, [\"x\", \"y\", \"x2\", \"y2\", \"latitude\", \"longitude\", \"latitude2\", \"longitude2\"]);\nexport var NONPOSITION_CHANNELS = flagKeys(NONPOSITION_CHANNEL_INDEX);\n// POSITION_SCALE_CHANNELS = X and Y;\nvar POSITION_SCALE_CHANNEL_INDEX = { x: 1, y: 1 };\nexport var POSITION_SCALE_CHANNELS = flagKeys(POSITION_SCALE_CHANNEL_INDEX);\n// NON_POSITION_SCALE_CHANNEL = SCALE_CHANNELS without X, Y\nvar \n// x2 and y2 share the same scale as x and y\n// text and tooltip have format instead of scale,\n// href has neither format, nor scale\n_t = NONPOSITION_CHANNEL_INDEX.text, _tt = NONPOSITION_CHANNEL_INDEX.tooltip, _hr = NONPOSITION_CHANNEL_INDEX.href, \n// detail and order have no scale\n_dd = NONPOSITION_CHANNEL_INDEX.detail, _k = NONPOSITION_CHANNEL_INDEX.key, _oo = NONPOSITION_CHANNEL_INDEX.order, NONPOSITION_SCALE_CHANNEL_INDEX = tslib_1.__rest(NONPOSITION_CHANNEL_INDEX, [\"text\", \"tooltip\", \"href\", \"detail\", \"key\", \"order\"]);\nexport var NONPOSITION_SCALE_CHANNELS = flagKeys(NONPOSITION_SCALE_CHANNEL_INDEX);\n// Declare SCALE_CHANNEL_INDEX\nvar SCALE_CHANNEL_INDEX = tslib_1.__assign({}, POSITION_SCALE_CHANNEL_INDEX, NONPOSITION_SCALE_CHANNEL_INDEX);\n/** List of channels with scales */\nexport var SCALE_CHANNELS = flagKeys(SCALE_CHANNEL_INDEX);\nexport function isScaleChannel(channel) {\n    return !!SCALE_CHANNEL_INDEX[channel];\n}\n/**\n * Return whether a channel supports a particular mark type.\n * @param channel  channel name\n * @param mark the mark type\n * @return whether the mark supports the channel\n */\nexport function supportMark(channel, mark) {\n    return mark in getSupportedMark(channel);\n}\n/**\n * Return a dictionary showing whether a channel supports mark type.\n * @param channel\n * @return A dictionary mapping mark types to boolean values.\n */\nexport function getSupportedMark(channel) {\n    switch (channel) {\n        case COLOR:\n        case FILL:\n        case STROKE:\n        case DETAIL:\n        case KEY:\n        case TOOLTIP:\n        case HREF:\n        case ORDER: // TODO: revise (order might not support rect, which is not stackable?)\n        case OPACITY:\n        case ROW:\n        case COLUMN:\n            return {\n                point: true, tick: true, rule: true, circle: true, square: true,\n                bar: true, rect: true, line: true, trail: true, area: true, text: true, geoshape: true\n            };\n        case X:\n        case Y:\n        case LATITUDE:\n        case LONGITUDE:\n            return {\n                point: true, tick: true, rule: true, circle: true, square: true,\n                bar: true, rect: true, line: true, trail: true, area: true, text: true\n            };\n        case X2:\n        case Y2:\n        case LATITUDE2:\n        case LONGITUDE2:\n            return {\n                rule: true, bar: true, rect: true, area: true\n            };\n        case SIZE:\n            return {\n                point: true, tick: true, rule: true, circle: true, square: true,\n                bar: true, text: true, line: true, trail: true\n            };\n        case SHAPE:\n            return { point: true, geoshape: true };\n        case TEXT:\n            return { text: true };\n    }\n}\nexport function rangeType(channel) {\n    switch (channel) {\n        case X:\n        case Y:\n        case SIZE:\n        case OPACITY:\n        // X2 and Y2 use X and Y scales, so they similarly have continuous range.\n        case X2:\n        case Y2:\n            return 'continuous';\n        case ROW:\n        case COLUMN:\n        case SHAPE:\n        // TEXT, TOOLTIP, and HREF have no scale but have discrete output\n        case TEXT:\n        case TOOLTIP:\n        case HREF:\n            return 'discrete';\n        // Color can be either continuous or discrete, depending on scale type.\n        case COLOR:\n        case FILL:\n        case STROKE:\n            return 'flexible';\n        // No scale, no range type.\n        case LATITUDE:\n        case LONGITUDE:\n        case LATITUDE2:\n        case LONGITUDE2:\n        case DETAIL:\n        case KEY:\n        case ORDER:\n            return undefined;\n    }\n    /* istanbul ignore next: should never reach here. */\n    throw new Error('rangeType not implemented for ' + channel);\n}\n//# sourceMappingURL=data:application/json;base64,","import { isBoolean } from 'vega-util';\nimport { COLOR, COLUMN, FILL, OPACITY, ROW, SHAPE, SIZE, STROKE } from './channel';\nimport { keys, varName } from './util';\nexport function binToString(bin) {\n    if (isBoolean(bin)) {\n        return 'bin';\n    }\n    return 'bin' + keys(bin).map(function (p) { return varName(\"_\" + p + \"_\" + bin[p]); }).join('');\n}\nexport function isBinParams(bin) {\n    return bin && !isBoolean(bin);\n}\nexport function autoMaxBins(channel) {\n    switch (channel) {\n        case ROW:\n        case COLUMN:\n        case SIZE:\n        case COLOR:\n        case FILL:\n        case STROKE:\n        case OPACITY:\n        // Facets and Size shouldn't have too many bins\n        // We choose 6 like shape to simplify the rule\n        case SHAPE:\n            return 6; // Vega's \"shape\" has 6 distinct values\n        default:\n            return 10;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Jpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3BDLE9BQU8sRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQzFGLE9BQU8sRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBNkRyQyxNQUFNLHNCQUFzQixHQUF3QjtJQUNsRCxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNsQixPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsT0FBTyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLE9BQU8sQ0FBQyxNQUFJLENBQUMsU0FBSSxHQUFHLENBQUMsQ0FBQyxDQUFHLENBQUMsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBRUQsTUFBTSxzQkFBc0IsR0FBd0I7SUFDbEQsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVELE1BQU0sc0JBQXNCLE9BQWdCO0lBQzFDLFFBQVEsT0FBTyxFQUFFO1FBQ2YsS0FBSyxHQUFHLENBQUM7UUFDVCxLQUFLLE1BQU0sQ0FBQztRQUNaLEtBQUssSUFBSSxDQUFDO1FBQ1YsS0FBSyxLQUFLLENBQUM7UUFDWCxLQUFLLElBQUksQ0FBQztRQUNWLEtBQUssTUFBTSxDQUFDO1FBQ1osS0FBSyxPQUFPLENBQUM7UUFDWCwrQ0FBK0M7UUFDL0MsOENBQThDO1FBQ2hELEtBQUssS0FBSztZQUNSLE9BQU8sQ0FBQyxDQUFDLENBQUMsdUNBQXVDO1FBQ25EO1lBQ0UsT0FBTyxFQUFFLENBQUM7S0FDYjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzQm9vbGVhbn0gZnJvbSAndmVnYS11dGlsJztcbmltcG9ydCB7Q2hhbm5lbCwgQ09MT1IsIENPTFVNTiwgRklMTCwgT1BBQ0lUWSwgUk9XLCBTSEFQRSwgU0laRSwgU1RST0tFfSBmcm9tICcuL2NoYW5uZWwnO1xuaW1wb3J0IHtrZXlzLCB2YXJOYW1lfSBmcm9tICcuL3V0aWwnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUJpbiB7XG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIGJhc2UgdG8gdXNlIGZvciBhdXRvbWF0aWMgYmluIGRldGVybWluYXRpb24gKGRlZmF1bHQgaXMgYmFzZSAxMCkuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMTBgXG4gICAqXG4gICAqL1xuICBiYXNlPzogbnVtYmVyO1xuICAvKipcbiAgICogQW4gZXhhY3Qgc3RlcCBzaXplIHRvIHVzZSBiZXR3ZWVuIGJpbnMuXG4gICAqXG4gICAqIF9fTm90ZTpfXyBJZiBwcm92aWRlZCwgb3B0aW9ucyBzdWNoIGFzIG1heGJpbnMgd2lsbCBiZSBpZ25vcmVkLlxuICAgKi9cbiAgc3RlcD86IG51bWJlcjtcbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGFsbG93YWJsZSBzdGVwIHNpemVzIHRvIGNob29zZSBmcm9tLlxuICAgKiBAbWluSXRlbXMgMVxuICAgKi9cbiAgc3RlcHM/OiBudW1iZXJbXTtcbiAgLyoqXG4gICAqIEEgbWluaW11bSBhbGxvd2FibGUgc3RlcCBzaXplIChwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBpbnRlZ2VyIHZhbHVlcykuXG4gICAqL1xuICBtaW5zdGVwPzogbnVtYmVyO1xuICAvKipcbiAgICogU2NhbGUgZmFjdG9ycyBpbmRpY2F0aW5nIGFsbG93YWJsZSBzdWJkaXZpc2lvbnMuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIFs1LCAyXSwgd2hpY2ggaW5kaWNhdGVzIHRoYXQgZm9yIGJhc2UgMTAgbnVtYmVycyAodGhlIGRlZmF1bHQgYmFzZSksIHRoZSBtZXRob2QgbWF5IGNvbnNpZGVyIGRpdmlkaW5nIGJpbiBzaXplcyBieSA1IGFuZC9vciAyLiBGb3IgZXhhbXBsZSwgZm9yIGFuIGluaXRpYWwgc3RlcCBzaXplIG9mIDEwLCB0aGUgbWV0aG9kIGNhbiBjaGVjayBpZiBiaW4gc2l6ZXMgb2YgMiAoPSAxMC81KSwgNSAoPSAxMC8yKSwgb3IgMSAoPSAxMC8oNSoyKSkgbWlnaHQgYWxzbyBzYXRpc2Z5IHRoZSBnaXZlbiBjb25zdHJhaW50cy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBbNSwgMl1gXG4gICAqXG4gICAqIEBtaW5JdGVtcyAxXG4gICAqL1xuICBkaXZpZGU/OiBudW1iZXJbXTtcbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIGJpbnMuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgNmAgZm9yIGByb3dgLCBgY29sdW1uYCBhbmQgYHNoYXBlYCBjaGFubmVsczsgYDEwYCBmb3Igb3RoZXIgY2hhbm5lbHNcbiAgICpcbiAgICogQG1pbmltdW0gMlxuICAgKi9cbiAgbWF4Ymlucz86IG51bWJlcjtcbiAgLyoqXG4gICAqIElmIHRydWUgKHRoZSBkZWZhdWx0KSwgYXR0ZW1wdHMgdG8gbWFrZSB0aGUgYmluIGJvdW5kYXJpZXMgdXNlIGh1bWFuLWZyaWVuZGx5IGJvdW5kYXJpZXMsIHN1Y2ggYXMgbXVsdGlwbGVzIG9mIHRlbi5cbiAgICovXG4gIG5pY2U/OiBib29sZWFuO1xufVxuXG5cbi8qKlxuICogQmlubmluZyBwcm9wZXJ0aWVzIG9yIGJvb2xlYW4gZmxhZyBmb3IgZGV0ZXJtaW5pbmcgd2hldGhlciB0byBiaW4gZGF0YSBvciBub3QuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmluUGFyYW1zIGV4dGVuZHMgQmFzZUJpbiB7XG4gIC8qKlxuICAgKiBBIHR3by1lbGVtZW50IChgW21pbiwgbWF4XWApIGFycmF5IGluZGljYXRpbmcgdGhlIHJhbmdlIG9mIGRlc2lyZWQgYmluIHZhbHVlcy5cbiAgICogQG1pbkl0ZW1zIDJcbiAgICogQG1heEl0ZW1zIDJcbiAgICovXG4gIGV4dGVudD86IG51bWJlcltdOyAgLy8gVmdCaW5UcmFuc2Zvcm0gdXNlcyBhIGRpZmZlcmVudCBleHRlbnQgc28gd2UgbmVlZCB0byBwdWxsIHRoaXMgb3V0LlxufVxuXG5leHBvcnQgZnVuY3Rpb24gYmluVG9TdHJpbmcoYmluOiBCaW5QYXJhbXMgfCBib29sZWFuKSB7XG4gIGlmIChpc0Jvb2xlYW4oYmluKSkge1xuICAgIHJldHVybiAnYmluJztcbiAgfVxuICByZXR1cm4gJ2JpbicgKyBrZXlzKGJpbikubWFwKHAgPT4gdmFyTmFtZShgXyR7cH1fJHtiaW5bcF19YCkpLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCaW5QYXJhbXMoYmluOiBCaW5QYXJhbXMgfCBib29sZWFuKTogYmluIGlzIEJpblBhcmFtcyB7XG4gIHJldHVybiBiaW4gJiYgIWlzQm9vbGVhbihiaW4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXV0b01heEJpbnMoY2hhbm5lbDogQ2hhbm5lbCk6IG51bWJlciB7XG4gIHN3aXRjaCAoY2hhbm5lbCkge1xuICAgIGNhc2UgUk9XOlxuICAgIGNhc2UgQ09MVU1OOlxuICAgIGNhc2UgU0laRTpcbiAgICBjYXNlIENPTE9SOlxuICAgIGNhc2UgRklMTDpcbiAgICBjYXNlIFNUUk9LRTpcbiAgICBjYXNlIE9QQUNJVFk6XG4gICAgICAvLyBGYWNldHMgYW5kIFNpemUgc2hvdWxkbid0IGhhdmUgdG9vIG1hbnkgYmluc1xuICAgICAgLy8gV2UgY2hvb3NlIDYgbGlrZSBzaGFwZSB0byBzaW1wbGlmeSB0aGUgcnVsZVxuICAgIGNhc2UgU0hBUEU6XG4gICAgICByZXR1cm4gNjsgLy8gVmVnYSdzIFwic2hhcGVcIiBoYXMgNiBkaXN0aW5jdCB2YWx1ZXNcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDEwO1xuICB9XG59XG4iXX0=","import { toSet } from 'vega-util';\nimport { contains, flagKeys } from './util';\nexport var Mark;\n(function (Mark) {\n    Mark.AREA = 'area';\n    Mark.BAR = 'bar';\n    Mark.LINE = 'line';\n    Mark.POINT = 'point';\n    Mark.RECT = 'rect';\n    Mark.RULE = 'rule';\n    Mark.TEXT = 'text';\n    Mark.TICK = 'tick';\n    Mark.TRAIL = 'trail';\n    Mark.CIRCLE = 'circle';\n    Mark.SQUARE = 'square';\n    Mark.GEOSHAPE = 'geoshape';\n})(Mark || (Mark = {}));\nexport var AREA = Mark.AREA;\nexport var BAR = Mark.BAR;\nexport var LINE = Mark.LINE;\nexport var POINT = Mark.POINT;\nexport var TEXT = Mark.TEXT;\nexport var TICK = Mark.TICK;\nexport var TRAIL = Mark.TRAIL;\nexport var RECT = Mark.RECT;\nexport var RULE = Mark.RULE;\nexport var GEOSHAPE = Mark.GEOSHAPE;\nexport var CIRCLE = Mark.CIRCLE;\nexport var SQUARE = Mark.SQUARE;\n// Using mapped type to declare index, ensuring we always have all marks when we add more.\nvar MARK_INDEX = {\n    area: 1,\n    bar: 1,\n    line: 1,\n    point: 1,\n    text: 1,\n    tick: 1,\n    trail: 1,\n    rect: 1,\n    geoshape: 1,\n    rule: 1,\n    circle: 1,\n    square: 1\n};\nexport function isMark(m) {\n    return !!MARK_INDEX[m];\n}\nexport function isPathMark(m) {\n    return contains(['line', 'area', 'trail'], m);\n}\nexport var PRIMITIVE_MARKS = flagKeys(MARK_INDEX);\nexport function isMarkDef(mark) {\n    return mark['type'];\n}\nvar PRIMITIVE_MARK_INDEX = toSet(PRIMITIVE_MARKS);\nexport function isPrimitiveMark(mark) {\n    var markType = isMarkDef(mark) ? mark.type : mark;\n    return markType in PRIMITIVE_MARK_INDEX;\n}\nexport var STROKE_CONFIG = ['stroke', 'strokeWidth',\n    'strokeDash', 'strokeDashOffset', 'strokeOpacity'];\nexport var FILL_CONFIG = ['fill', 'fillOpacity'];\nexport var FILL_STROKE_CONFIG = [].concat(STROKE_CONFIG, FILL_CONFIG);\nexport var VL_ONLY_MARK_CONFIG_PROPERTIES = ['filled', 'color'];\nexport var VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\n    area: ['line', 'point'],\n    bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\n    line: ['point'],\n    text: ['shortTimeLabels'],\n    tick: ['bandSize', 'thickness']\n};\nexport var defaultMarkConfig = {\n    color: '#4c78a8',\n};\nexport var defaultBarConfig = {\n    binSpacing: 1,\n    continuousBandSize: 5\n};\nexport var defaultTickConfig = {\n    thickness: 1\n};\n//# sourceMappingURL=data:application/json;base64,","/**\n * Vega-Lite's singleton logger utility.\n */\nimport { logger, Warn } from 'vega-util';\nimport { stringify } from './util';\n/**\n * Main (default) Vega Logger instance for Vega-Lite\n */\nvar main = logger(Warn);\nvar current = main;\n/**\n * Logger tool for checking if the code throws correct warning\n */\nvar LocalLogger = /** @class */ (function () {\n    function LocalLogger() {\n        this.warns = [];\n        this.infos = [];\n        this.debugs = [];\n    }\n    LocalLogger.prototype.level = function () {\n        return this;\n    };\n    LocalLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        (_a = this.warns).push.apply(_a, args);\n        return this;\n        var _a;\n    };\n    LocalLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        (_a = this.infos).push.apply(_a, args);\n        return this;\n        var _a;\n    };\n    LocalLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        (_a = this.debugs).push.apply(_a, args);\n        return this;\n        var _a;\n    };\n    return LocalLogger;\n}());\nexport { LocalLogger };\nexport function wrap(f) {\n    return function () {\n        current = new LocalLogger();\n        f(current);\n        reset();\n    };\n}\n/**\n * Set the singleton logger to be a custom logger\n */\nexport function set(newLogger) {\n    current = newLogger;\n    return current;\n}\n/**\n * Reset the main logger to use the default Vega Logger\n */\nexport function reset() {\n    current = main;\n    return current;\n}\nexport function warn() {\n    var _ = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        _[_i] = arguments[_i];\n    }\n    current.warn.apply(current, arguments);\n}\nexport function info() {\n    var _ = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        _[_i] = arguments[_i];\n    }\n    current.info.apply(current, arguments);\n}\nexport function debug() {\n    var _ = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        _[_i] = arguments[_i];\n    }\n    current.debug.apply(current, arguments);\n}\n/**\n * Collection of all Vega-Lite Error Messages\n */\nexport var message;\n(function (message) {\n    message.INVALID_SPEC = 'Invalid spec';\n    // FIT\n    message.FIT_NON_SINGLE = 'Autosize \"fit\" only works for single views and layered views.';\n    message.CANNOT_FIX_RANGE_STEP_WITH_FIT = 'Cannot use a fixed value of \"rangeStep\" when \"autosize\" is \"fit\".';\n    // SELECTION\n    function cannotProjectOnChannelWithoutField(channel) {\n        return \"Cannot project a selection on encoding channel \\\"\" + channel + \"\\\", which has no field.\";\n    }\n    message.cannotProjectOnChannelWithoutField = cannotProjectOnChannelWithoutField;\n    function nearestNotSupportForContinuous(mark) {\n        return \"The \\\"nearest\\\" transform is not supported for \" + mark + \" marks.\";\n    }\n    message.nearestNotSupportForContinuous = nearestNotSupportForContinuous;\n    function selectionNotFound(name) {\n        return \"Cannot find a selection named \\\"\" + name + \"\\\"\";\n    }\n    message.selectionNotFound = selectionNotFound;\n    message.SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';\n    // REPEAT\n    function noSuchRepeatedValue(field) {\n        return \"Unknown repeated value \\\"\" + field + \"\\\".\";\n    }\n    message.noSuchRepeatedValue = noSuchRepeatedValue;\n    // CONCAT\n    message.CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated views.';\n    // REPEAT\n    message.REPEAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in repeated views.';\n    // TITLE\n    function cannotSetTitleAnchor(type) {\n        return \"Cannot set title \\\"anchor\\\" for a \" + type + \" spec\";\n    }\n    message.cannotSetTitleAnchor = cannotSetTitleAnchor;\n    // DATA\n    function unrecognizedParse(p) {\n        return \"Unrecognized parse \\\"\" + p + \"\\\".\";\n    }\n    message.unrecognizedParse = unrecognizedParse;\n    function differentParse(field, local, ancestor) {\n        return \"An ancestor parsed field \\\"\" + field + \"\\\" as \" + ancestor + \" but a child wants to parse the field as \" + local + \".\";\n    }\n    message.differentParse = differentParse;\n    // TRANSFORMS\n    function invalidTransformIgnored(transform) {\n        return \"Ignoring an invalid transform: \" + stringify(transform) + \".\";\n    }\n    message.invalidTransformIgnored = invalidTransformIgnored;\n    message.NO_FIELDS_NEEDS_AS = 'If \"from.fields\" is not specified, \"as\" has to be a string that specifies the key to be used for the data from the secondary source.';\n    // ENCODING & FACET\n    function encodingOverridden(channels) {\n        return \"Layer's shared \" + channels.join(',') + \" channel \" + (channels.length === 1 ? 'is' : 'are') + \" overriden\";\n    }\n    message.encodingOverridden = encodingOverridden;\n    function projectionOverridden(opt) {\n        var parentProjection = opt.parentProjection, projection = opt.projection;\n        return \"Layer's shared projection \" + stringify(parentProjection) + \" is overridden by a child projection \" + stringify(projection) + \".\";\n    }\n    message.projectionOverridden = projectionOverridden;\n    function primitiveChannelDef(channel, type, value) {\n        return \"Channel \" + channel + \" is a \" + type + \". Converted to {value: \" + stringify(value) + \"}.\";\n    }\n    message.primitiveChannelDef = primitiveChannelDef;\n    function invalidFieldType(type) {\n        return \"Invalid field type \\\"\" + type + \"\\\"\";\n    }\n    message.invalidFieldType = invalidFieldType;\n    function nonZeroScaleUsedWithLengthMark(mark, channel, opt) {\n        var scaleText = opt.scaleType ? opt.scaleType + \" scale\" :\n            opt.zeroFalse ? 'scale with zero=false' :\n                'scale with custom domain that excludes zero';\n        return \"A \" + scaleText + \" is used with \" + mark + \" mark. This can be misleading as the \" + (channel === 'x' ? 'width' : 'height') + \" of the \" + mark + \" can be arbitrary based on the scale domain. You may want to use point mark instead.\";\n    }\n    message.nonZeroScaleUsedWithLengthMark = nonZeroScaleUsedWithLengthMark;\n    function invalidFieldTypeForCountAggregate(type, aggregate) {\n        return \"Invalid field type \\\"\" + type + \"\\\" for aggregate: \\\"\" + aggregate + \"\\\", using \\\"quantitative\\\" instead.\";\n    }\n    message.invalidFieldTypeForCountAggregate = invalidFieldTypeForCountAggregate;\n    function invalidAggregate(aggregate) {\n        return \"Invalid aggregation operator \\\"\" + aggregate + \"\\\"\";\n    }\n    message.invalidAggregate = invalidAggregate;\n    function emptyOrInvalidFieldType(type, channel, newType) {\n        return \"Invalid field type \\\"\" + type + \"\\\" for channel \\\"\" + channel + \"\\\", using \\\"\" + newType + \"\\\" instead.\";\n    }\n    message.emptyOrInvalidFieldType = emptyOrInvalidFieldType;\n    function droppingColor(type, opt) {\n        var fill = opt.fill, stroke = opt.stroke;\n        return \"Dropping color \" + type + \" as the plot also has \" + (fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke');\n    }\n    message.droppingColor = droppingColor;\n    function emptyFieldDef(fieldDef, channel) {\n        return \"Dropping \" + stringify(fieldDef) + \" from channel \\\"\" + channel + \"\\\" since it does not contain data field or value.\";\n    }\n    message.emptyFieldDef = emptyFieldDef;\n    function latLongDeprecated(channel, type, newChannel) {\n        return channel + \"-encoding with type \" + type + \" is deprecated. Replacing with \" + newChannel + \"-encoding.\";\n    }\n    message.latLongDeprecated = latLongDeprecated;\n    message.LINE_WITH_VARYING_SIZE = 'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';\n    function incompatibleChannel(channel, markOrFacet, when) {\n        return channel + \" dropped as it is incompatible with \\\"\" + markOrFacet + \"\\\"\" + (when ? \" when \" + when : '') + \".\";\n    }\n    message.incompatibleChannel = incompatibleChannel;\n    function invalidEncodingChannel(channel) {\n        return channel + \"-encoding is dropped as \" + channel + \" is not a valid encoding channel.\";\n    }\n    message.invalidEncodingChannel = invalidEncodingChannel;\n    function facetChannelShouldBeDiscrete(channel) {\n        return channel + \" encoding should be discrete (ordinal / nominal / binned).\";\n    }\n    message.facetChannelShouldBeDiscrete = facetChannelShouldBeDiscrete;\n    function discreteChannelCannotEncode(channel, type) {\n        return \"Using discrete channel \\\"\" + channel + \"\\\" to encode \\\"\" + type + \"\\\" field can be misleading as it does not encode \" + (type === 'ordinal' ? 'order' : 'magnitude') + \".\";\n    }\n    message.discreteChannelCannotEncode = discreteChannelCannotEncode;\n    // Mark\n    message.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL = 'Bar mark should not be used with point scale when rangeStep is null. Please use band scale instead.';\n    function lineWithRange(hasX2, hasY2) {\n        var channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';\n        return \"Line mark is for continuous lines and thus cannot be used with \" + channels + \". We will use the rule mark (line segments) instead.\";\n    }\n    message.lineWithRange = lineWithRange;\n    function unclearOrientContinuous(mark) {\n        return \"Cannot clearly determine orientation for \\\"\" + mark + \"\\\" since both x and y channel encode continuous fields. In this case, we use vertical by default\";\n    }\n    message.unclearOrientContinuous = unclearOrientContinuous;\n    function unclearOrientDiscreteOrEmpty(mark) {\n        return \"Cannot clearly determine orientation for \\\"\" + mark + \"\\\" since both x and y channel encode discrete or empty fields.\";\n    }\n    message.unclearOrientDiscreteOrEmpty = unclearOrientDiscreteOrEmpty;\n    function orientOverridden(original, actual) {\n        return \"Specified orient \\\"\" + original + \"\\\" overridden with \\\"\" + actual + \"\\\"\";\n    }\n    message.orientOverridden = orientOverridden;\n    // SCALE\n    message.CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = 'custom domain scale cannot be unioned with default field-based domain';\n    function cannotUseScalePropertyWithNonColor(prop) {\n        return \"Cannot use the scale property \\\"\" + prop + \"\\\" with non-color channel.\";\n    }\n    message.cannotUseScalePropertyWithNonColor = cannotUseScalePropertyWithNonColor;\n    function unaggregateDomainHasNoEffectForRawField(fieldDef) {\n        return \"Using unaggregated domain with raw field has no effect (\" + stringify(fieldDef) + \").\";\n    }\n    message.unaggregateDomainHasNoEffectForRawField = unaggregateDomainHasNoEffectForRawField;\n    function unaggregateDomainWithNonSharedDomainOp(aggregate) {\n        return \"Unaggregated domain not applicable for \\\"\" + aggregate + \"\\\" since it produces values outside the origin domain of the source data.\";\n    }\n    message.unaggregateDomainWithNonSharedDomainOp = unaggregateDomainWithNonSharedDomainOp;\n    function unaggregatedDomainWithLogScale(fieldDef) {\n        return \"Unaggregated domain is currently unsupported for log scale (\" + stringify(fieldDef) + \").\";\n    }\n    message.unaggregatedDomainWithLogScale = unaggregatedDomainWithLogScale;\n    function cannotUseSizeFieldWithBandSize(positionChannel) {\n        return \"Using size field when \" + positionChannel + \"-channel has a band scale is not supported.\";\n    }\n    message.cannotUseSizeFieldWithBandSize = cannotUseSizeFieldWithBandSize;\n    function cannotApplySizeToNonOrientedMark(mark) {\n        return \"Cannot apply size to non-oriented mark \\\"\" + mark + \"\\\".\";\n    }\n    message.cannotApplySizeToNonOrientedMark = cannotApplySizeToNonOrientedMark;\n    function rangeStepDropped(channel) {\n        return \"rangeStep for \\\"\" + channel + \"\\\" is dropped as top-level \" + (channel === 'x' ? 'width' : 'height') + \" is provided.\";\n    }\n    message.rangeStepDropped = rangeStepDropped;\n    function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {\n        return \"Channel \\\"\" + channel + \"\\\" does not work with \\\"\" + scaleType + \"\\\" scale. We are using \\\"\" + defaultScaleType + \"\\\" scale instead.\";\n    }\n    message.scaleTypeNotWorkWithChannel = scaleTypeNotWorkWithChannel;\n    function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {\n        return \"FieldDef does not work with \\\"\" + scaleType + \"\\\" scale. We are using \\\"\" + defaultScaleType + \"\\\" scale instead.\";\n    }\n    message.scaleTypeNotWorkWithFieldDef = scaleTypeNotWorkWithFieldDef;\n    function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {\n        return channel + \"-scale's \\\"\" + propName + \"\\\" is dropped as it does not work with \" + scaleType + \" scale.\";\n    }\n    message.scalePropertyNotWorkWithScaleType = scalePropertyNotWorkWithScaleType;\n    function scaleTypeNotWorkWithMark(mark, scaleType) {\n        return \"Scale type \\\"\" + scaleType + \"\\\" does not work with mark \\\"\" + mark + \"\\\".\";\n    }\n    message.scaleTypeNotWorkWithMark = scaleTypeNotWorkWithMark;\n    function mergeConflictingProperty(property, propertyOf, v1, v2) {\n        return \"Conflicting \" + propertyOf + \" property \\\"\" + property + \"\\\" (\" + stringify(v1) + \" and \" + stringify(v2) + \").  Using \" + stringify(v1) + \".\";\n    }\n    message.mergeConflictingProperty = mergeConflictingProperty;\n    function independentScaleMeansIndependentGuide(channel) {\n        return \"Setting the scale to be independent for \\\"\" + channel + \"\\\" means we also have to set the guide (axis or legend) to be independent.\";\n    }\n    message.independentScaleMeansIndependentGuide = independentScaleMeansIndependentGuide;\n    function domainSortDropped(sort) {\n        return \"Dropping sort property \" + stringify(sort) + \" as unioned domains only support boolean or op 'count'.\";\n    }\n    message.domainSortDropped = domainSortDropped;\n    message.UNABLE_TO_MERGE_DOMAINS = 'Unable to merge domains';\n    message.MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';\n    // AXIS\n    message.INVALID_CHANNEL_FOR_AXIS = 'Invalid channel for axis.';\n    // STACK\n    function cannotStackRangedMark(channel) {\n        return \"Cannot stack \\\"\" + channel + \"\\\" if there is already \\\"\" + channel + \"2\\\"\";\n    }\n    message.cannotStackRangedMark = cannotStackRangedMark;\n    function cannotStackNonLinearScale(scaleType) {\n        return \"Cannot stack non-linear scale (\" + scaleType + \")\";\n    }\n    message.cannotStackNonLinearScale = cannotStackNonLinearScale;\n    function stackNonSummativeAggregate(aggregate) {\n        return \"Stacking is applied even though the aggregate function is non-summative (\\\"\" + aggregate + \"\\\")\";\n    }\n    message.stackNonSummativeAggregate = stackNonSummativeAggregate;\n    // TIMEUNIT\n    function invalidTimeUnit(unitName, value) {\n        return \"Invalid \" + unitName + \": \" + stringify(value);\n    }\n    message.invalidTimeUnit = invalidTimeUnit;\n    function dayReplacedWithDate(fullTimeUnit) {\n        return \"Time unit \\\"\" + fullTimeUnit + \"\\\" is not supported. We are replacing it with \" + fullTimeUnit.replace('day', 'date') + \".\";\n    }\n    message.dayReplacedWithDate = dayReplacedWithDate;\n    function droppedDay(d) {\n        return \"Dropping day from datetime \" + stringify(d) + \" as day cannot be combined with other units.\";\n    }\n    message.droppedDay = droppedDay;\n})(message || (message = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUdILE9BQU8sRUFBQyxNQUFNLEVBQW1CLElBQUksRUFBQyxNQUFNLFdBQVcsQ0FBQztBQVN4RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBTWpDOztHQUVHO0FBQ0gsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFCLElBQUksT0FBTyxHQUFvQixJQUFJLENBQUM7QUFFcEM7O0dBRUc7QUFDSDtJQUFBO1FBQ1MsVUFBSyxHQUFVLEVBQUUsQ0FBQztRQUNsQixVQUFLLEdBQVUsRUFBRSxDQUFDO1FBQ2xCLFdBQU0sR0FBVSxFQUFFLENBQUM7SUFvQjVCLENBQUM7SUFsQlEsMkJBQUssR0FBWjtRQUNFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLDBCQUFJLEdBQVg7UUFBWSxjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLHlCQUFjOztRQUN4QixDQUFBLEtBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQSxDQUFDLElBQUksV0FBSSxJQUFJLEVBQUU7UUFDekIsT0FBTyxJQUFJLENBQUM7O0lBQ2QsQ0FBQztJQUVNLDBCQUFJLEdBQVg7UUFBWSxjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLHlCQUFjOztRQUN4QixDQUFBLEtBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQSxDQUFDLElBQUksV0FBSSxJQUFJLEVBQUU7UUFDekIsT0FBTyxJQUFJLENBQUM7O0lBQ2QsQ0FBQztJQUVNLDJCQUFLLEdBQVo7UUFBYSxjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLHlCQUFjOztRQUN6QixDQUFBLEtBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQSxDQUFDLElBQUksV0FBSSxJQUFJLEVB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QUVoQyxDQUFBO0lBRVksK0JBQXVCLEdBQUcseUJBQXlCLENBQUM7SUFFcEQsMEJBQWtCLEdBQUcsMkZBQTJGLENBQUM7SUFFOUgsT0FBTztJQUNNLGdDQUF3QixHQUFHLDJCQUEyQixDQUFDO0lBRXBFLFFBQVE7SUFDUiwrQkFBc0MsT0FBZ0I7UUFDcEQsT0FBTyxvQkFBaUIsT0FBTyxpQ0FBMEIsT0FBTyxRQUFJLENBQUM7SUFDdkUsQ0FBQztJQUZlLDZCQUFxQix3QkFFcEMsQ0FBQTtJQUVELG1DQUEwQyxTQUFvQjtRQUM1RCxPQUFPLG9DQUFrQyxTQUFTLE1BQUcsQ0FBQztJQUN4RCxDQUFDO0lBRmUsaUNBQXlCLDRCQUV4QyxDQUFBO0lBRUQsb0NBQTJDLFNBQWlCO1FBQzFELE9BQU8sZ0ZBQTZFLFNBQVMsUUFBSSxDQUFDO0lBQ3BHLENBQUM7SUFGZSxrQ0FBMEIsNkJBRXpDLENBQUE7SUFFRCxXQUFXO0lBQ1gseUJBQWdDLFFBQWdCLEVBQUUsS0FBc0I7UUFDdEUsT0FBTyxhQUFXLFFBQVEsVUFBSyxTQUFTLENBQUMsS0FBSyxDQUFHLENBQUM7SUFDcEQsQ0FBQztJQUZlLHVCQUFlLGtCQUU5QixDQUFBO0lBRUQsNkJBQW9DLFlBQW9CO1FBQ3RELE9BQU8saUJBQWMsWUFBWSxzREFDL0IsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQUcsQ0FBQztJQUMzQyxDQUFDO0lBSGUsMkJBQW1CLHNCQUdsQyxDQUFBO0lBRUQsb0JBQTJCLENBQTBCO1FBQ25ELE9BQU8sZ0NBQThCLFNBQVMsQ0FBQyxDQUFDLENBQUMsaURBQThDLENBQUM7SUFDbEcsQ0FBQztJQUZlLGtCQUFVLGFBRXpCLENBQUE7QUFDSCxDQUFDLEVBaFBnQixPQUFPLEtBQVAsT0FBTyxRQWdQdkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFZlZ2EtTGl0ZSdzIHNpbmdsZXRvbiBsb2dnZXIgdXRpbGl0eS5cbiAqL1xuXG5pbXBvcnQge0FnZ3JlZ2F0ZU9wfSBmcm9tICd2ZWdhJztcbmltcG9ydCB7bG9nZ2VyLCBMb2dnZXJJbnRlcmZhY2UsIFdhcm59IGZyb20gJ3ZlZ2EtdXRpbCc7XG5pbXBvcnQge0NoYW5uZWwsIEdlb1Bvc2l0aW9uQ2hhbm5lbH0gZnJvbSAnLi9jaGFubmVsJztcbmltcG9ydCB7Q29tcG9zaXRlTWFya30gZnJvbSAnLi9jb21wb3NpdGVtYXJrJztcbmltcG9ydCB7RGF0ZVRpbWUsIERhdGVUaW1lRXhwcn0gZnJvbSAnLi9kYXRldGltZSc7XG5pbXBvcnQge0ZpZWxkRGVmfSBmcm9tICcuL2ZpZWxkZGVmJztcbmltcG9ydCB7TWFya30gZnJvbSAnLi9tYXJrJztcbmltcG9ydCB7UHJvamVjdGlvbn0gZnJvbSAnLi9wcm9qZWN0aW9uJztcbmltcG9ydCB7U2NhbGVUeXBlfSBmcm9tICcuL3NjYWxlJztcbmltcG9ydCB7VHlwZX0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7c3RyaW5naWZ5fSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHtWZ1NvcnRGaWVsZH0gZnJvbSAnLi92ZWdhLnNjaGVtYSc7XG5cblxuZXhwb3J0IHtMb2dnZXJJbnRlcmZhY2V9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5cbi8qKlxuICogTWFpbiAoZGVmYXVsdCkgVmVnYSBMb2dnZXIgaW5zdGFuY2UgZm9yIFZlZ2EtTGl0ZVxuICovXG5jb25zdCBtYWluID0gbG9nZ2VyKFdhcm4pO1xubGV0IGN1cnJlbnQ6IExvZ2dlckludGVyZmFjZSA9IG1haW47XG5cbi8qKlxuICogTG9nZ2VyIHRvb2wgZm9yIGNoZWNraW5nIGlmIHRoZSBjb2RlIHRocm93cyBjb3JyZWN0IHdhcm5pbmdcbiAqL1xuZXhwb3J0IGNsYXNzIExvY2FsTG9nZ2VyIGltcGxlbWVudHMgTG9nZ2VySW50ZXJmYWNlIHtcbiAgcHVibGljIHdhcm5zOiBhbnlbXSA9IFtdO1xuICBwdWJsaWMgaW5mb3M6IGFueVtdID0gW107XG4gIHB1YmxpYyBkZWJ1Z3M6IGFueVtdID0gW107XG5cbiAgcHVibGljIGxldmVsKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIHdhcm4oLi4uYXJnczogYW55W10pIHtcbiAgICB0aGlzLndhcm5zLnB1c2goLi4uYXJncyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgaW5mbyguLi5hcmdzOiBhbnlbXSkge1xuICAgIHRoaXMuaW5mb3MucHVzaCguLi5hcmdzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyBkZWJ1ZyguLi5hcmdzOiBhbnlbXSkge1xuICAgIHRoaXMuZGVidWdzLnB1c2goLi4uYXJncyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXAoZjogKGxvZ2dlcjogTG9jYWxMb2dnZXIpID0+IHZvaWQpIHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBjdXJyZW50ID0gbmV3IExvY2FsTG9nZ2VyKCk7XG4gICAgZihjdXJyZW50IGFzIExvY2FsTG9nZ2VyKTtcbiAgICByZXNldCgpO1xuICB9O1xufVxuXG4vKipcbiAqIFNldCB0aGUgc2luZ2xldG9uIGxvZ2dlciB0byBiZSBhIGN1c3RvbSBsb2dnZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldChuZXdMb2dnZXI6IExvZ2dlckludGVyZmFjZSkge1xuICBjdXJyZW50ID0gbmV3TG9nZ2VyO1xuICByZXR1cm4gY3VycmVudDtcbn1cblxuLyoqXG4gKiBSZXNldCB0aGUgbWFpbiBsb2dnZXIgdG8gdXNlIHRoZSBkZWZhdWx0IFZlZ2EgTG9nZ2VyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldCgpIHtcbiAgY3VycmVudCA9IG1haW47XG4gIHJldHVybiBjdXJyZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2FybiguLi5fOiBhbnlbXSkge1xuICBjdXJyZW50Lndhcm4uYXBwbHkoY3VycmVudCwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZm8oLi4uXzogYW55W10pIHtcbiAgY3VycmVudC5pbmZvLmFwcGx5KGN1cnJlbnQsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJ1ZyguLi5fOiBhbnlbXSkge1xuICBjdXJyZW50LmRlYnVnLmFwcGx5KGN1cnJlbnQsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogQ29sbGVjdGlvbiBvZiBhbGwgVmVnYS1MaXRlIEVycm9yIE1lc3NhZ2VzXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgbWVzc2FnZSB7XG4gIGV4cG9ydCBjb25zdCBJTlZBTElEX1NQRUMgPSAnSW52YWxpZCBzcGVjJztcblxuICAvLyBGSVRcbiAgZXhwb3J0IGNvbnN0IEZJVF9OT05fU0lOR0xFID0gJ0F1dG9zaXplIFwiZml0XCIgb25seSB3b3JrcyBmb3Igc2luZ2xlIHZpZXdzIGFuZCBsYXllcmVkIHZpZXdzLic7XG5cbiAgZXhwb3J0IGNvbnN0IENBTk5PVF9GSVhfUkFOR0VfU1RFUF9XSVRIX0ZJVCA9ICdDYW5ub3QgdXNlIGEgZml4ZWQgdmFsdWUgb2YgXCJyYW5nZVN0ZXBcIiB3aGVuIFwiYXV0b3NpemVcIiBpcyBcImZpdFwiLic7XG5cbiAgLy8gU0VMRUNUSU9OXG4gIGV4cG9ydCBmdW5jdGlvbiBjYW5ub3RQcm9qZWN0T25DaGFubmVsV2l0aG91dEZpZWxkKGNoYW5uZWw6IENoYW5uZWwpIHtcbiAgICByZXR1cm4gYENhbm5vdCBwcm9qZWN0IGEgc2VsZWN0aW9uIG9uIGVuY29kaW5nIGNoYW5uZWwgXCIke2NoYW5uZWx9XCIsIHdoaWNoIGhhcyBubyBmaWVsZC5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG5lYXJlc3ROb3RTdXBwb3J0Rm9yQ29udGludW91cyhtYXJrOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYFRoZSBcIm5lYXJlc3RcIiB0cmFuc2Zvcm0gaXMgbm90IHN1cHBvcnRlZCBmb3IgJHttYXJrfSBtYXJrcy5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdGlvbk5vdEZvdW5kKG5hbWU6IHN0cmluZykge1xuICAgIHJldHVybiBgQ2Fubm90IGZpbmQgYSBzZWxlY3Rpb24gbmFtZWQgXCIke25hbWV9XCJgO1xuICB9XG5cbiAgZXhwb3J0IGNvbnN0IFNDQUxFX0JJTkRJTkdTX0NPTlRJTlVPVVMgPSAnU2NhbGUgYmluZGluZ3MgYXJlIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCBmb3Igc2NhbGVzIHdpdGggdW5iaW5uZWQsIGNvbnRpbnVvdXMgZG9tYWlucy4nO1xuXG4gIC8vIFJFUEVBVFxuICBleHBvcnQgZnVuY3Rpb24gbm9TdWNoUmVwZWF0ZWRWYWx1ZShmaWVsZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGBVbmtub3duIHJlcGVhdGVkIHZhbHVlIFwiJHtmaWVsZH1cIi5gO1xuICB9XG5cbiAgLy8gQ09OQ0FUXG4gIGV4cG9ydCBjb25zdCBDT05DQVRfQ0FOTk9UX1NIQVJFX0FYSVMgPSAnQXhlcyBjYW5ub3QgYmUgc2hhcmVkIGluIGNvbmNhdGVuYXRlZCB2aWV3cy4nO1xuXG4gIC8vIFJFUEVBVFxuICBleHBvcnQgY29uc3QgUkVQRUFUX0NBTk5PVF9TSEFSRV9BWElTID0gJ0F4ZXMgY2Fubm90IGJlIHNoYXJlZCBpbiByZXBlYXRlZCB2aWV3cy4nO1xuXG4gIC8vIFRJVExFXG4gIGV4cG9ydCBmdW5jdGlvbiBjYW5ub3RTZXRUaXRsZUFuY2hvcih0eXBlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYENhbm5vdCBzZXQgdGl0bGUgXCJhbmNob3JcIiBmb3IgYSAke3R5cGV9IHNwZWNgO1xuICB9XG5cbiAgLy8gREFUQVxuICBleHBvcnQgZnVuY3Rpb24gdW5yZWNvZ25pemVkUGFyc2UocDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGBVbnJlY29nbml6ZWQgcGFyc2UgXCIke3B9XCIuYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBkaWZmZXJlbnRQYXJzZShmaWVsZDogc3RyaW5nLCBsb2NhbDogc3RyaW5nLCBhbmNlc3Rvcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGBBbiBhbmNlc3RvciBwYXJzZWQgZmllbGQgXCIke2ZpZWxkfVwiIGFzICR7YW5jZXN0b3J9IGJ1dCBhIGNoaWxkIHdhbnRzIHRvIHBhcnNlIHRoZSBmaWVsZCBhcyAke2xvY2FsfS5gO1xuICB9XG5cbiAgLy8gVFJBTlNGT1JNU1xuICBleHBvcnQgZnVuY3Rpb24gaW52YWxpZFRyYW5zZm9ybUlnbm9yZWQodHJhbnNmb3JtOiBhbnkpIHtcbiAgICByZXR1cm4gYElnbm9yaW5nIGFuIGludmFsaWQgdHJhbnNmb3JtOiAke3N0cmluZ2lmeSh0cmFuc2Zvcm0pfS5gO1xuICB9XG5cbiAgZXhwb3J0IGNvbnN0IE5PX0ZJRUxEU19ORUVEU19BUyA9ICdJZiBcImZyb20uZmllbGRzXCIgaXMgbm90IHNwZWNpZmllZCwgXCJhc1wiIGhhcyB0byBiZSBhIHN0cmluZyB0aGF0IHNwZWNpZmllcyB0aGUga2V5IHRvIGJlIHVzZWQgZm9yIHRoZSBkYXRhIGZyb20gdGhlIHNlY29uZGFyeSBzb3VyY2UuJztcblxuICAvLyBFTkNPRElORyAmIEZBQ0VUXG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGVuY29kaW5nT3ZlcnJpZGRlbihjaGFubmVsczogQ2hhbm5lbFtdKSB7XG4gICAgcmV0dXJuIGBMYXllcidzIHNoYXJlZCAke2NoYW5uZWxzLmpvaW4oJywnKX0gY2hhbm5lbCAke2NoYW5uZWxzLmxlbmd0aCA9PT0gMSA/ICdpcycgOiAnYXJlJ30gb3ZlcnJpZGVuYDtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gcHJvamVjdGlvbk92ZXJyaWRkZW4ob3B0OiB7cGFyZW50UHJvamVjdGlvbjogUHJvamVjdGlvbiwgcHJvamVjdGlvbjogUHJvamVjdGlvbn0pIHtcbiAgICBjb25zdCB7cGFyZW50UHJvamVjdGlvbiwgcHJvamVjdGlvbn0gPSBvcHQ7XG4gICAgcmV0dXJuIGBMYXllcidzIHNoYXJlZCBwcm9qZWN0aW9uICR7c3RyaW5naWZ5KHBhcmVudFByb2plY3Rpb24pfSBpcyBvdmVycmlkZGVuIGJ5IGEgY2hpbGQgcHJvamVjdGlvbiAke3N0cmluZ2lmeShwcm9qZWN0aW9uKX0uYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBwcmltaXRpdmVDaGFubmVsRGVmKGNoYW5uZWw6IENoYW5uZWwsIHR5cGU6ICdzdHJpbmcnIHwgJ251bWJlcicgfCAnYm9vbGVhbicsIHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuKSB7XG4gICAgcmV0dXJuIGBDaGFubmVsICR7Y2hhbm5lbH0gaXMgYSAke3R5cGV9LiBDb252ZXJ0ZWQgdG8ge3ZhbHVlOiAke3N0cmluZ2lmeSh2YWx1ZSl9fS5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGludmFsaWRGaWVsZFR5cGUodHlwZTogVHlwZSkge1xuICAgIHJldHVybiBgSW52YWxpZCBmaWVsZCB0eXBlIFwiJHt0eXBlfVwiYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBub25aZXJvU2NhbGVVc2VkV2l0aExlbmd0aE1hcmsoXG4gICAgbWFyazogJ2JhcicgfCAnYXJlYScsIGNoYW5uZWw6IENoYW5uZWwsXG4gICAgb3B0OiB7c2NhbGVUeXBlPzogU2NhbGVUeXBlLCB6ZXJvRmFsc2U/OiBib29sZWFufVxuICApIHtcbiAgICBjb25zdCBzY2FsZVRleHQgPSBvcHQuc2NhbGVUeXBlID8gYCR7b3B0LnNjYWxlVHlwZX0gc2NhbGVgIDpcbiAgICAgIG9wdC56ZXJvRmFsc2UgPyAnc2NhbGUgd2l0aCB6ZXJvPWZhbHNlJyA6XG4gICAgICAnc2NhbGUgd2l0aCBjdXN0b20gZG9tYWluIHRoYXQgZXhjbHVkZXMgemVybyc7XG5cbiAgICByZXR1cm4gYEEgJHtzY2FsZVRleHR9IGlzIHVzZWQgd2l0aCAke21hcmt9IG1hcmsuIFRoaXMgY2FuIGJlIG1pc2xlYWRpbmcgYXMgdGhlICR7Y2hhbm5lbCA9PT0gJ3gnID8gJ3dpZHRoJyA6ICdoZWlnaHQnfSBvZiB0aGUgJHttYXJrfSBjYW4gYmUgYXJiaXRyYXJ5IGJhc2VkIG9uIHRoZSBzY2FsZSBkb21haW4uIFlvdSBtYXkgd2FudCB0byB1c2UgcG9pbnQgbWFyayBpbnN0ZWFkLmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gaW52YWxpZEZpZWxkVHlwZUZvckNvdW50QWdncmVnYXRlKHR5cGU6IFR5cGUsIGFnZ3JlZ2F0ZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGBJbnZhbGlkIGZpZWxkIHR5cGUgXCIke3R5cGV9XCIgZm9yIGFnZ3JlZ2F0ZTogXCIke2FnZ3JlZ2F0ZX1cIiwgdXNpbmcgXCJxdWFudGl0YXRpdmVcIiBpbnN0ZWFkLmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gaW52YWxpZEFnZ3JlZ2F0ZShhZ2dyZWdhdGU6IEFnZ3JlZ2F0ZU9wIHwgc3RyaW5nKSB7XG4gICAgcmV0dXJuIGBJbnZhbGlkIGFnZ3JlZ2F0aW9uIG9wZXJhdG9yIFwiJHthZ2dyZWdhdGV9XCJgO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGVtcHR5T3JJbnZhbGlkRmllbGRUeXBlKHR5cGU6IFR5cGUgfCBzdHJpbmcsIGNoYW5uZWw6IENoYW5uZWwsIG5ld1R5cGU6IFR5cGUpIHtcbiAgICByZXR1cm4gYEludmFsaWQgZmllbGQgdHlwZSBcIiR7dHlwZX1cIiBmb3IgY2hhbm5lbCBcIiR7Y2hhbm5lbH1cIiwgdXNpbmcgXCIke25ld1R5cGV9XCIgaW5zdGVhZC5gO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiBkcm9wcGluZ0NvbG9yKHR5cGU6ICdlbmNvZGluZycgfCAncHJvcGVydHknLCBvcHQ6IHtmaWxsPzogYm9vbGVhbiwgc3Ryb2tlPzogYm9vbGVhbn0pIHtcbiAgICBjb25zdCB7ZmlsbCwgc3Ryb2tlfSA9IG9wdDtcbiAgICByZXR1cm4gYERyb3BwaW5nIGNvbG9yICR7dHlwZX0gYXMgdGhlIHBsb3QgYWxzbyBoYXMgYCArIChcbiAgICAgIGZpbGwgJiYgc3Ryb2tlID8gJ2ZpbGwgYW5kIHN0cm9rZScgOiBmaWxsID8gJ2ZpbGwnIDogJ3N0cm9rZSdcbiAgICApO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGVtcHR5RmllbGREZWYoZmllbGREZWY6IEZpZWxkRGVmPHN0cmluZz4sIGNoYW5uZWw6IENoYW5uZWwpIHtcbiAgICByZXR1cm4gYERyb3BwaW5nICR7c3RyaW5naWZ5KGZpZWxkRGVmKX0gZnJvbSBjaGFubmVsIFwiJHtjaGFubmVsfVwiIHNpbmNlIGl0IGRvZXMgbm90IGNvbnRhaW4gZGF0YSBmaWVsZCBvciB2YWx1ZS5gO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiBsYXRMb25nRGVwcmVjYXRlZChjaGFubmVsOiBDaGFubmVsLCB0eXBlOiBUeXBlLCBuZXdDaGFubmVsOiBHZW9Qb3NpdGlvbkNoYW5uZWwpIHtcbiAgICByZXR1cm4gYCR7Y2hhbm5lbH0tZW5jb2Rpbmcgd2l0aCB0eXBlICR7dHlwZX0gaXMgZGVwcmVjYXRlZC4gUmVwbGFjaW5nIHdpdGggJHtuZXdDaGFubmVsfS1lbmNvZGluZy5gO1xuICB9XG5cbiAgZXhwb3J0IGNvbnN0IExJTkVfV0lUSF9WQVJZSU5HX1NJWkUgPSAnTGluZSBtYXJrcyBjYW5ub3QgZW5jb2RlIHNpemUgd2l0aCBhIG5vbi1ncm91cGJ5IGZpZWxkLiBZb3UgbWF5IHdhbnQgdG8gdXNlIHRyYWlsIG1hcmtzIGluc3RlYWQuJztcblxuICBleHBvcnQgZnVuY3Rpb24gaW5jb21wYXRpYmxlQ2hhbm5lbChjaGFubmVsOiBDaGFubmVsLCBtYXJrT3JGYWNldDogTWFyayB8ICdmYWNldCcgfCBDb21wb3NpdGVNYXJrLCB3aGVuPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGAke2NoYW5uZWx9IGRyb3BwZWQgYXMgaXQgaXMgaW5jb21wYXRpYmxlIHdpdGggXCIke21hcmtPckZhY2V0fVwiJHt3aGVuID8gYCB3aGVuICR7d2hlbn1gIDogJyd9LmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gaW52YWxpZEVuY29kaW5nQ2hhbm5lbChjaGFubmVsOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYCR7Y2hhbm5lbH0tZW5jb2RpbmcgaXMgZHJvcHBlZCBhcyAke2NoYW5uZWx9IGlzIG5vdCBhIHZhbGlkIGVuY29kaW5nIGNoYW5uZWwuYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBmYWNldENoYW5uZWxTaG91bGRCZURpc2NyZXRlKGNoYW5uZWw6IHN0cmluZykge1xuICAgIHJldHVybiBgJHtjaGFubmVsfSBlbmNvZGluZyBzaG91bGQgYmUgZGlzY3JldGUgKG9yZGluYWwgLyBub21pbmFsIC8gYmlubmVkKS5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGRpc2NyZXRlQ2hhbm5lbENhbm5vdEVuY29kZShjaGFubmVsOiBDaGFubmVsLCB0eXBlOiBUeXBlKSB7XG4gICAgcmV0dXJuIGBVc2luZyBkaXNjcmV0ZSBjaGFubmVsIFwiJHtjaGFubmVsfVwiIHRvIGVuY29kZSBcIiR7dHlwZX1cIiBmaWVsZCBjYW4gYmUgbWlzbGVhZGluZyBhcyBpdCBkb2VzIG5vdCBlbmNvZGUgJHt0eXBlID09PSAnb3JkaW5hbCcgPyAnb3JkZXInIDogJ21hZ25pdHVkZSd9LmA7XG4gIH1cblxuICAvLyBNYXJrXG4gIGV4cG9ydCBjb25zdCBCQVJfV0lUSF9QT0lOVF9TQ0FMRV9BTkRfUkFOR0VTVEVQX05VTEwgPSAnQmFyIG1hcmsgc2hvdWxkIG5vdCBiZSB1c2VkIHdpdGggcG9pbnQgc2NhbGUgd2hlbiByYW5nZVN0ZXAgaXMgbnVsbC4gUGxlYXNlIHVzZSBiYW5kIHNjYWxlIGluc3RlYWQuJztcblxuICBleHBvcnQgZnVuY3Rpb24gbGluZVdpdGhSYW5nZShoYXNYMjogYm9vbGVhbiwgaGFzWTI6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBjaGFubmVscyA9IGhhc1gyICYmIGhhc1kyID8gJ3gyIGFuZCB5MicgOiBoYXNYMiA/ICd4MicgOiAneTInO1xuICAgIHJldHVybiBgTGluZSBtYXJrIGlzIGZvciBjb250aW51b3VzIGxpbmVzIGFuZCB0aHVzIGNhbm5vdCBiZSB1c2VkIHdpdGggJHtjaGFubmVsc30uIFdlIHdpbGwgdXNlIHRoZSBydWxlIG1hcmsgKGxpbmUgc2VnbWVudHMpIGluc3RlYWQuYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiB1bmNsZWFyT3JpZW50Q29udGludW91cyhtYXJrOiBNYXJrKSB7XG4gICAgcmV0dXJuIGBDYW5ub3QgY2xlYXJseSBkZXRlcm1pbmUgb3JpZW50YXRpb24gZm9yIFwiJHttYXJrfVwiIHNpbmNlIGJvdGggeCBhbmQgeSBjaGFubmVsIGVuY29kZSBjb250aW51b3VzIGZpZWxkcy4gSW4gdGhpcyBjYXNlLCB3ZSB1c2UgdmVydGljYWwgYnkgZGVmYXVsdGA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gdW5jbGVhck9yaWVudERpc2NyZXRlT3JFbXB0eShtYXJrOiBNYXJrKSB7XG4gICAgcmV0dXJuIGBDYW5ub3QgY2xlYXJseSBkZXRlcm1pbmUgb3JpZW50YXRpb24gZm9yIFwiJHttYXJrfVwiIHNpbmNlIGJvdGggeCBhbmQgeSBjaGFubmVsIGVuY29kZSBkaXNjcmV0ZSBvciBlbXB0eSBmaWVsZHMuYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBvcmllbnRPdmVycmlkZGVuKG9yaWdpbmFsOiBzdHJpbmcsIGFjdHVhbDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGBTcGVjaWZpZWQgb3JpZW50IFwiJHtvcmlnaW5hbH1cIiBvdmVycmlkZGVuIHdpdGggXCIke2FjdHVhbH1cImA7XG4gIH1cblxuICAvLyBTQ0FMRVxuICBleHBvcnQgY29uc3QgQ0FOTk9UX1VOSU9OX0NVU1RPTV9ET01BSU5fV0lUSF9GSUVMRF9ET01BSU4gPSAnY3VzdG9tIGRvbWFpbiBzY2FsZSBjYW5ub3QgYmUgdW5pb25lZCB3aXRoIGRlZmF1bHQgZmllbGQtYmFzZWQgZG9tYWluJztcblxuICBleHBvcnQgZnVuY3Rpb24gY2Fubm90VXNlU2NhbGVQcm9wZXJ0eVdpdGhOb25Db2xvcihwcm9wOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYENhbm5vdCB1c2UgdGhlIHNjYWxlIHByb3BlcnR5IFwiJHtwcm9wfVwiIHdpdGggbm9uLWNvbG9yIGNoYW5uZWwuYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiB1bmFnZ3JlZ2F0ZURvbWFpbkhhc05vRWZmZWN0Rm9yUmF3RmllbGQoZmllbGREZWY6IEZpZWxkRGVmPHN0cmluZz4pIHtcbiAgICByZXR1cm4gYFVzaW5nIHVuYWdncmVnYXRlZCBkb21haW4gd2l0aCByYXcgZmllbGQgaGFzIG5vIGVmZmVjdCAoJHtzdHJpbmdpZnkoZmllbGREZWYpfSkuYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiB1bmFnZ3JlZ2F0ZURvbWFpbldpdGhOb25TaGFyZWREb21haW5PcChhZ2dyZWdhdGU6IHN0cmluZykge1xuICAgIHJldHVybiBgVW5hZ2dyZWdhdGVkIGRvbWFpbiBub3QgYXBwbGljYWJsZSBmb3IgXCIke2FnZ3JlZ2F0ZX1cIiBzaW5jZSBpdCBwcm9kdWNlcyB2YWx1ZXMgb3V0c2lkZSB0aGUgb3JpZ2luIGRvbWFpbiBvZiB0aGUgc291cmNlIGRhdGEuYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiB1bmFnZ3JlZ2F0ZWREb21haW5XaXRoTG9nU2NhbGUoZmllbGREZWY6IEZpZWxkRGVmPHN0cmluZz4pIHtcbiAgICByZXR1cm4gYFVuYWdncmVnYXRlZCBkb21haW4gaXMgY3VycmVudGx5IHVuc3VwcG9ydGVkIGZvciBsb2cgc2NhbGUgKCR7c3RyaW5naWZ5KGZpZWxkRGVmKX0pLmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gY2Fubm90VXNlU2l6ZUZpZWxkV2l0aEJhbmRTaXplKHBvc2l0aW9uQ2hhbm5lbDogJ3gnfCd5Jykge1xuICAgIHJldHVybiBgVXNpbmcgc2l6ZSBmaWVsZCB3aGVuICR7cG9zaXRpb25DaGFubmVsfS1jaGFubmVsIGhhcyBhIGJhbmQgc2NhbGUgaXMgbm90IHN1cHBvcnRlZC5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGNhbm5vdEFwcGx5U2l6ZVRvTm9uT3JpZW50ZWRNYXJrKG1hcms6IE1hcmspIHtcbiAgICByZXR1cm4gYENhbm5vdCBhcHBseSBzaXplIHRvIG5vbi1vcmllbnRlZCBtYXJrIFwiJHttYXJrfVwiLmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcmFuZ2VTdGVwRHJvcHBlZChjaGFubmVsOiBDaGFubmVsKSB7XG4gICAgcmV0dXJuIGByYW5nZVN0ZXAgZm9yIFwiJHtjaGFubmVsfVwiIGlzIGRyb3BwZWQgYXMgdG9wLWxldmVsICR7XG4gICAgICBjaGFubmVsID09PSAneCcgPyAnd2lkdGgnIDogJ2hlaWdodCd9IGlzIHByb3ZpZGVkLmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gc2NhbGVUeXBlTm90V29ya1dpdGhDaGFubmVsKGNoYW5uZWw6IENoYW5uZWwsIHNjYWxlVHlwZTogU2NhbGVUeXBlLCBkZWZhdWx0U2NhbGVUeXBlOiBTY2FsZVR5cGUpIHtcbiAgICByZXR1cm4gYENoYW5uZWwgXCIke2NoYW5uZWx9XCIgZG9lcyBub3Qgd29yayB3aXRoIFwiJHtzY2FsZVR5cGV9XCIgc2NhbGUuIFdlIGFyZSB1c2luZyBcIiR7ZGVmYXVsdFNjYWxlVHlwZX1cIiBzY2FsZSBpbnN0ZWFkLmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gc2NhbGVUeXBlTm90V29ya1dpdGhGaWVsZERlZihzY2FsZVR5cGU6IFNjYWxlVHlwZSwgZGVmYXVsdFNjYWxlVHlwZTogU2NhbGVUeXBlKSB7XG4gICAgcmV0dXJuIGBGaWVsZERlZiBkb2VzIG5vdCB3b3JrIHdpdGggXCIke3NjYWxlVHlwZX1cIiBzY2FsZS4gV2UgYXJlIHVzaW5nIFwiJHtkZWZhdWx0U2NhbGVUeXBlfVwiIHNjYWxlIGluc3RlYWQuYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBzY2FsZVByb3BlcnR5Tm90V29ya1dpdGhTY2FsZVR5cGUoc2NhbGVUeXBlOiBTY2FsZVR5cGUsIHByb3BOYW1lOiBzdHJpbmcsIGNoYW5uZWw6IENoYW5uZWwpIHtcbiAgICByZXR1cm4gYCR7Y2hhbm5lbH0tc2NhbGUncyBcIiR7cHJvcE5hbWV9XCIgaXMgZHJvcHBlZCBhcyBpdCBkb2VzIG5vdCB3b3JrIHdpdGggJHtzY2FsZVR5cGV9IHNjYWxlLmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gc2NhbGVUeXBlTm90V29ya1dpdGhNYXJrKG1hcms6IE1hcmssIHNjYWxlVHlwZTogU2NhbGVUeXBlKSB7XG4gICAgcmV0dXJuIGBTY2FsZSB0eXBlIFwiJHtzY2FsZVR5cGV9XCIgZG9lcyBub3Qgd29yayB3aXRoIG1hcmsgXCIke21hcmt9XCIuYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBtZXJnZUNvbmZsaWN0aW5nUHJvcGVydHk8VD4ocHJvcGVydHk6IHN0cmluZywgcHJvcGVydHlPZjogc3RyaW5nLCB2MTogVCwgdjI6IFQpIHtcbiAgICByZXR1cm4gYENvbmZsaWN0aW5nICR7cHJvcGVydHlPZn0gcHJvcGVydHkgXCIke3Byb3BlcnR5fVwiICgke3N0cmluZ2lmeSh2MSl9IGFuZCAke3N0cmluZ2lmeSh2Mil9KS4gIFVzaW5nICR7c3RyaW5naWZ5KHYxKX0uYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBpbmRlcGVuZGVudFNjYWxlTWVhbnNJbmRlcGVuZGVudEd1aWRlKGNoYW5uZWw6IENoYW5uZWwpIHtcbiAgICByZXR1cm4gYFNldHRpbmcgdGhlIHNjYWxlIHRvIGJlIGluZGVwZW5kZW50IGZvciBcIiR7Y2hhbm5lbH1cIiBtZWFucyB3ZSBhbHNvIGhhdmUgdG8gc2V0IHRoZSBndWlkZSAoYXhpcyBvciBsZWdlbmQpIHRvIGJlIGluZGVwZW5kZW50LmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZG9tYWluU29ydERyb3BwZWQoc29ydDogVmdTb3J0RmllbGQpIHtcbiAgICByZXR1cm4gYERyb3BwaW5nIHNvcnQgcHJvcGVydHkgJHtzdHJpbmdpZnkoc29ydCl9IGFzIHVuaW9uZWQgZG9tYWlucyBvbmx5IHN1cHBvcnQgYm9vbGVhbiBvciBvcCAnY291bnQnLmA7XG4gIH1cblxuICBleHBvcnQgY29uc3QgVU5BQkxFX1RPX01FUkdFX0RPTUFJTlMgPSAnVW5hYmxlIHRvIG1lcmdlIGRvbWFpbnMnO1xuXG4gIGV4cG9ydCBjb25zdCBNT1JFX1RIQU5fT05FX1NPUlQgPSAnRG9tYWlucyB0aGF0IHNob3VsZCBiZSB1bmlvbmVkIGhhcyBjb25mbGljdGluZyBzb3J0IHByb3BlcnRpZXMuIFNvcnQgd2lsbCBiZSBzZXQgdG8gdHJ1ZS4nO1xuXG4gIC8vIEFYSVNcbiAgZXhwb3J0IGNvbnN0IElOVkFMSURfQ0hBTk5FTF9GT1JfQVhJUyA9ICdJbnZhbGlkIGNoYW5uZWwgZm9yIGF4aXMuJztcblxuICAvLyBTVEFDS1xuICBleHBvcnQgZnVuY3Rpb24gY2Fubm90U3RhY2tSYW5nZWRNYXJrKGNoYW5uZWw6IENoYW5uZWwpIHtcbiAgICByZXR1cm4gYENhbm5vdCBzdGFjayBcIiR7Y2hhbm5lbH1cIiBpZiB0aGVyZSBpcyBhbHJlYWR5IFwiJHtjaGFubmVsfTJcImA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gY2Fubm90U3RhY2tOb25MaW5lYXJTY2FsZShzY2FsZVR5cGU6IFNjYWxlVHlwZSkge1xuICAgIHJldHVybiBgQ2Fubm90IHN0YWNrIG5vbi1saW5lYXIgc2NhbGUgKCR7c2NhbGVUeXBlfSlgO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHN0YWNrTm9uU3VtbWF0aXZlQWdncmVnYXRlKGFnZ3JlZ2F0ZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGBTdGFja2luZyBpcyBhcHBsaWVkIGV2ZW4gdGhvdWdoIHRoZSBhZ2dyZWdhdGUgZnVuY3Rpb24gaXMgbm9uLXN1bW1hdGl2ZSAoXCIke2FnZ3JlZ2F0ZX1cIilgO1xuICB9XG5cbiAgLy8gVElNRVVOSVRcbiAgZXhwb3J0IGZ1bmN0aW9uIGludmFsaWRUaW1lVW5pdCh1bml0TmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgcmV0dXJuIGBJbnZhbGlkICR7dW5pdE5hbWV9OiAke3N0cmluZ2lmeSh2YWx1ZSl9YDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBkYXlSZXBsYWNlZFdpdGhEYXRlKGZ1bGxUaW1lVW5pdDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGBUaW1lIHVuaXQgXCIke2Z1bGxUaW1lVW5pdH1cIiBpcyBub3Qgc3VwcG9ydGVkLiBXZSBhcmUgcmVwbGFjaW5nIGl0IHdpdGggJHtcbiAgICAgIGZ1bGxUaW1lVW5pdC5yZXBsYWNlKCdkYXknLCAnZGF0ZScpfS5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGRyb3BwZWREYXkoZDogRGF0ZVRpbWUgfCBEYXRlVGltZUV4cHIpIHtcbiAgICByZXR1cm4gYERyb3BwaW5nIGRheSBmcm9tIGRhdGV0aW1lICR7c3RyaW5naWZ5KGQpfSBhcyBkYXkgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdW5pdHMuYDtcbiAgfVxufVxuXG4iXX0=","// DateTime definition object\nimport { isNumber } from 'vega-util';\nimport * as log from './log';\nimport { duplicate, keys } from './util';\n/*\n * A designated year that starts on Sunday.\n */\nvar SUNDAY_YEAR = 2006;\nexport function isDateTime(o) {\n    return !!o && (!!o.year || !!o.quarter || !!o.month || !!o.date || !!o.day ||\n        !!o.hours || !!o.minutes || !!o.seconds || !!o.milliseconds);\n}\nexport var MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\nexport var SHORT_MONTHS = MONTHS.map(function (m) { return m.substr(0, 3); });\nexport var DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nexport var SHORT_DAYS = DAYS.map(function (d) { return d.substr(0, 3); });\nfunction normalizeQuarter(q) {\n    if (isNumber(q)) {\n        if (q > 4) {\n            log.warn(log.message.invalidTimeUnit('quarter', q));\n        }\n        // We accept 1-based quarter, so need to readjust to 0-based quarter\n        return (q - 1) + '';\n    }\n    else {\n        // Invalid quarter\n        throw new Error(log.message.invalidTimeUnit('quarter', q));\n    }\n}\nfunction normalizeMonth(m) {\n    if (isNumber(m)) {\n        // We accept 1-based month, so need to readjust to 0-based month\n        return (m - 1) + '';\n    }\n    else {\n        var lowerM = m.toLowerCase();\n        var monthIndex = MONTHS.indexOf(lowerM);\n        if (monthIndex !== -1) {\n            return monthIndex + ''; // 0 for january, ...\n        }\n        var shortM = lowerM.substr(0, 3);\n        var shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n        if (shortMonthIndex !== -1) {\n            return shortMonthIndex + '';\n        }\n        // Invalid month\n        throw new Error(log.message.invalidTimeUnit('month', m));\n    }\n}\nfunction normalizeDay(d) {\n    if (isNumber(d)) {\n        // mod so that this can be both 0-based where 0 = sunday\n        // and 1-based where 7=sunday\n        return (d % 7) + '';\n    }\n    else {\n        var lowerD = d.toLowerCase();\n        var dayIndex = DAYS.indexOf(lowerD);\n        if (dayIndex !== -1) {\n            return dayIndex + ''; // 0 for january, ...\n        }\n        var shortD = lowerD.substr(0, 3);\n        var shortDayIndex = SHORT_DAYS.indexOf(shortD);\n        if (shortDayIndex !== -1) {\n            return shortDayIndex + '';\n        }\n        // Invalid day\n        throw new Error(log.message.invalidTimeUnit('day', d));\n    }\n}\n/**\n * Return Vega Expression for a particular date time.\n * @param d\n * @param normalize whether to normalize quarter, month, day.\n */\nexport function dateTimeExpr(d, normalize) {\n    if (normalize === void 0) { normalize = false; }\n    var units = [];\n    if (normalize && d.day !== undefined) {\n        if (keys(d).length > 1) {\n            log.warn(log.message.droppedDay(d));\n            d = duplicate(d);\n            delete d.day;\n        }\n    }\n    if (d.year !== undefined) {\n        units.push(d.year);\n    }\n    else if (d.day !== undefined) {\n        // Set year to 2006 for working with day since January 1 2006 is a Sunday\n        units.push(SUNDAY_YEAR);\n    }\n    else {\n        units.push(0);\n    }\n    if (d.month !== undefined) {\n        var month = normalize ? normalizeMonth(d.month) : d.month;\n        units.push(month);\n    }\n    else if (d.quarter !== undefined) {\n        var quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n        units.push(quarter + '*3');\n    }\n    else {\n        units.push(0); // months start at zero in JS\n    }\n    if (d.date !== undefined) {\n        units.push(d.date);\n    }\n    else if (d.day !== undefined) {\n        // HACK: Day only works as a standalone unit\n        // This is only correct because we always set year to 2006 for day\n        var day = normalize ? normalizeDay(d.day) : d.day;\n        units.push(day + '+1');\n    }\n    else {\n        units.push(1); // Date starts at 1 in JS\n    }\n    // Note: can't use TimeUnit enum here as importing it will create\n    // circular dependency problem!\n    for (var _i = 0, _a = ['hours', 'minutes', 'seconds', 'milliseconds']; _i < _a.length; _i++) {\n        var timeUnit = _a[_i];\n        if (d[timeUnit] !== undefined) {\n            units.push(d[timeUnit]);\n        }\n        else {\n            units.push(0);\n        }\n    }\n    if (d.utc) {\n        return \"utc(\" + units.join(', ') + \")\";\n    }\n    else {\n        return \"datetime(\" + units.join(', ') + \")\";\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXRpbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGF0ZXRpbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCO0FBRTdCLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUM7QUFDN0IsT0FBTyxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFHdkM7O0dBRUc7QUFDSCxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUM7QUE4R3pCLE1BQU0scUJBQXFCLENBQU07SUFDL0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHO1FBQ3hFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDakUsQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLE1BQU0sR0FBRyxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDakosTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxD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O2FBQU07WUFDTCxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2Y7S0FDRjtJQUVELElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRTtRQUNULE9BQU8sU0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFHLENBQUM7S0FDbkM7U0FBTTtRQUNMLE9BQU8sY0FBWSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFHLENBQUM7S0FDeEM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRGF0ZVRpbWUgZGVmaW5pdGlvbiBvYmplY3RcblxuaW1wb3J0IHtpc051bWJlcn0gZnJvbSAndmVnYS11dGlsJztcbmltcG9ydCAqIGFzIGxvZyBmcm9tICcuL2xvZyc7XG5pbXBvcnQge2R1cGxpY2F0ZSwga2V5c30gZnJvbSAnLi91dGlsJztcblxuXG4vKlxuICogQSBkZXNpZ25hdGVkIHllYXIgdGhhdCBzdGFydHMgb24gU3VuZGF5LlxuICovXG5jb25zdCBTVU5EQVlfWUVBUiA9IDIwMDY7XG5cbi8qKlxuICogQG1pbmltdW0gMVxuICogQG1heGltdW0gMTJcbiAqIEBUSlMtdHlwZSBpbnRlZ2VyXG4gKi9cbmV4cG9ydCB0eXBlIE1vbnRoID0gbnVtYmVyO1xuXG4vKipcbiAqIEBtaW5pbXVtIDFcbiAqIEBtYXhpbXVtIDdcbiAqL1xuZXhwb3J0IHR5cGUgRGF5ID0gbnVtYmVyO1xuXG4vKipcbiAqIE9iamVjdCBmb3IgZGVmaW5pbmcgZGF0ZXRpbWUgaW4gVmVnYS1MaXRlIEZpbHRlci5cbiAqIElmIGJvdGggbW9udGggYW5kIHF1YXJ0ZXIgYXJlIHByb3ZpZGVkLCBtb250aCBoYXMgaGlnaGVyIHByZWNlZGVuY2UuXG4gKiBgZGF5YCBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciBkYXRlLlxuICogV2UgYWNjZXB0IHN0cmluZyBmb3IgbW9udGggYW5kIGRheSBuYW1lcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEYXRlVGltZSB7XG4gIC8qKlxuICAgKiBJbnRlZ2VyIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgeWVhci5cbiAgICogQFRKUy10eXBlIGludGVnZXJcbiAgICovXG4gIHllYXI/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEludGVnZXIgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBxdWFydGVyIG9mIHRoZSB5ZWFyIChmcm9tIDEtNCkuXG4gICAqIEBtaW5pbXVtIDFcbiAgICogQG1heGltdW0gNFxuICAgKiBAVEpTLXR5cGUgaW50ZWdlclxuICAgKi9cbiAgcXVhcnRlcj86IG51bWJlcjtcblxuICAvKiogT25lIG9mOiAoMSkgaW50ZWdlciB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIG1vbnRoIGZyb20gYDFgLWAxMmAuIGAxYCByZXByZXNlbnRzIEphbnVhcnk7ICAoMikgY2FzZS1pbnNlbnNpdGl2ZSBtb250aCBuYW1lIChlLmcuLCBgXCJKYW51YXJ5XCJgKTsgICgzKSBjYXNlLWluc2Vuc2l0aXZlLCAzLWNoYXJhY3RlciBzaG9ydCBtb250aCBuYW1lIChlLmcuLCBgXCJKYW5cImApLiAqL1xuICBtb250aD86IE1vbnRoIHwgc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBJbnRlZ2VyIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgZGF0ZSBmcm9tIDEtMzEuXG4gICAqIEBtaW5pbXVtIDFcbiAgICogQG1heGltdW0gMzFcbiAgICogQFRKUy10eXBlIGludGVnZXJcbiAgICovXG4gIGRhdGU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFZhbHVlIHJlcHJlc2VudGluZyB0aGUgZGF5IG9mIGEgd2Vlay4gIFRoaXMgY2FuIGJlIG9uZSBvZjogKDEpIGludGVnZXIgdmFsdWUgLS0gYDFgIHJlcHJlc2VudHMgTW9uZGF5OyAoMikgY2FzZS1pbnNlbnNpdGl2ZSBkYXkgbmFtZSAoZS5nLiwgYFwiTW9uZGF5XCJgKTsgICgzKSBjYXNlLWluc2Vuc2l0aXZlLCAzLWNoYXJhY3RlciBzaG9ydCBkYXkgbmFtZSAoZS5nLiwgYFwiTW9uXCJgKS4gICA8YnIvPiAqKldhcm5pbmc6KiogQSBEYXRlVGltZSBkZWZpbml0aW9uIG9iamVjdCB3aXRoIGBkYXlgKiogc2hvdWxkIG5vdCBiZSBjb21iaW5lZCB3aXRoIGB5ZWFyYCwgYHF1YXJ0ZXJgLCBgbW9udGhgLCBvciBgZGF0ZWAuXG4gICAqL1xuICBkYXk/OiBEYXkgfCBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEludGVnZXIgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBob3VyIG9mIGEgZGF5IGZyb20gMC0yMy5cbiAgICogQG1pbmltdW0gMFxuICAgKiBAbWF4aW11bSAyM1xuICAgKiBAVEpTLXR5cGUgaW50ZWdlclxuICAgKi9cbiAgaG91cnM/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEludGVnZXIgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBtaW51dGUgc2VnbWVudCBvZiB0aW1lIGZyb20gMC01OS5cbiAgICogQG1pbmltdW0gMFxuICAgKiBAbWF4aW11bSA1OVxuICAgKiBAVEpTLXR5cGUgaW50ZWdlclxuICAgKi9cbiAgbWludXRlcz86IG51bWJlcjtcblxuICAvKipcbiAgICogSW50ZWdlciB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIHNlY29uZCBzZWdtZW50ICgwLTU5KSBvZiBhIHRpbWUgdmFsdWVcbiAgICogQG1pbmltdW0gMFxuICAgKiBAbWF4aW11bSA1OVxuICAgKiBAVEpTLXR5cGUgaW50ZWdlclxuICAgKi9cbiAgc2Vjb25kcz86IG51bWJlcjtcblxuICAvKipcbiAgICogSW50ZWdlciB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIG1pbGxpc2Vjb25kIHNlZ21lbnQgb2YgdGltZS5cbiAgICogQG1pbmltdW0gMFxuICAgKiBAbWF4aW11bSA5OTlcbiAgICogQFRKUy10eXBlIGludGVnZXJcbiAgICovXG4gIG1pbGxpc2Vjb25kcz86IG51bWJlcjtcblxuICAvKipcbiAgICogQSBib29sZWFuIGZsYWcgaW5kaWNhdGluZyBpZiBkYXRlIHRpbWUgaXMgaW4gdXRjIHRpbWUuIElmIGZhbHNlLCB0aGUgZGF0ZSB0aW1lIGlzIGluIGxvY2FsIHRpbWVcbiAgICovXG4gIHV0Yz86IGJvb2xlYW47XG59XG5cblxuLyoqXG4gKiBJbnRlcm5hbCBPYmplY3QgZm9yIGRlZmluaW5nIGRhdGV0aW1lIGV4cHJlc3Npb25zLlxuICogVGhpcyBpcyBhbiBleHByZXNzaW9uIHZlcnNpb24gb2YgRGF0ZVRpbWUuXG4gKiBJZiBib3RoIG1vbnRoIGFuZCBxdWFydGVyIGFyZSBwcm92aWRlZCwgbW9udGggaGFzIGhpZ2hlciBwcmVjZWRlbmNlLlxuICogYGRheWAgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgZGF0ZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEYXRlVGltZUV4cHIge1xuICB5ZWFyPzogc3RyaW5nO1xuICBxdWFydGVyPzogc3RyaW5nO1xuICBtb250aD86IHN0cmluZztcbiAgZGF0ZT86IHN0cmluZztcbiAgZGF5Pzogc3RyaW5nO1xuICBob3Vycz86IHN0cmluZztcbiAgbWludXRlcz86IHN0cmluZztcbiAgc2Vjb25kcz86IHN0cmluZztcbiAgbWlsbGlzZWNvbmRzPzogc3RyaW5nO1xuICB1dGM/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRlVGltZShvOiBhbnkpOiBvIGlzIERhdGVUaW1lIHtcbiAgcmV0dXJuICEhbyAmJiAoISFvLnllYXIgfHwgISFvLnF1YXJ0ZXIgfHwgISFvLm1vbnRoIHx8ICEhby5kYXRlIHx8ICEhby5kYXkgfHxcbiAgICAhIW8uaG91cnMgfHwgISFvLm1pbnV0ZXMgfHwgISFvLnNlY29uZHMgfHwgISFvLm1pbGxpc2Vjb25kcyk7XG59XG5cbmV4cG9ydCBjb25zdCBNT05USFMgPSBbJ2phbnVhcnknLCAnZmVicnVhcnknLCAnbWFyY2gnLCAnYXByaWwnLCAnbWF5JywgJ2p1bmUnLCAnanVseScsICdhdWd1c3QnLCAnc2VwdGVtYmVyJywgJ29jdG9iZXInLCAnbm92ZW1iZXInLCAnZGVjZW1iZXInXTtcbmV4cG9ydCBjb25zdCBTSE9SVF9NT05USFMgPSBNT05USFMubWFwKChtKSA9PiBtLnN1YnN0cigwLCAzKSk7XG5cbmV4cG9ydCBjb25zdCBEQVlTID0gWydzdW5kYXknLCAnbW9uZGF5JywgJ3R1ZXNkYXknLCAnd2VkbmVzZGF5JywgJ3RodXJzZGF5JywgJ2ZyaWRheScsICdzYXR1cmRheSddO1xuZXhwb3J0IGNvbnN0IFNIT1JUX0RBWVMgPSBEQVlTLm1hcCgoZCkgPT4gZC5zdWJzdHIoMCwzKSk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVF1YXJ0ZXIocTogbnVtYmVyIHwgc3RyaW5nKSB7XG4gIGlmIChpc051bWJlcihxKSkge1xuICAgIGlmIChxID4gNCkge1xuICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuaW52YWxpZFRpbWVVbml0KCdxdWFydGVyJywgcSkpO1xuICAgIH1cbiAgICAvLyBXZSBhY2NlcHQgMS1iYXNlZCBxdWFydGVyLCBzbyBuZWVkIHRvIHJlYWRqdXN0IHRvIDAtYmFzZWQgcXVhcnRlclxuICAgIHJldHVybiAocSAtIDEpICsgJyc7XG4gIH0gZWxzZSB7XG4gICAgLy8gSW52YWxpZCBxdWFydGVyXG4gICAgdGhyb3cgbmV3IEVycm9yKGxvZy5tZXNzYWdlLmludmFsaWRUaW1lVW5pdCgncXVhcnRlcicsIHEpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVNb250aChtOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgaWYgKGlzTnVtYmVyKG0pKSB7XG4gICAgLy8gV2UgYWNjZXB0IDEtYmFzZWQgbW9udGgsIHNvIG5lZWQgdG8gcmVhZGp1c3QgdG8gMC1iYXNlZCBtb250aFxuICAgIHJldHVybiAobSAtIDEpICsgJyc7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbG93ZXJNID0gbS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IG1vbnRoSW5kZXggPSBNT05USFMuaW5kZXhPZihsb3dlck0pO1xuICAgIGlmIChtb250aEluZGV4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIG1vbnRoSW5kZXggKyAnJzsgLy8gMCBmb3IgamFudWFyeSwgLi4uXG4gICAgfVxuICAgIGNvbnN0IHNob3J0TSA9IGxvd2VyTS5zdWJzdHIoMCwgMyk7XG4gICAgY29uc3Qgc2hvcnRNb250aEluZGV4ID0gU0hPUlRfTU9OVEhTLmluZGV4T2Yoc2hvcnRNKTtcbiAgICBpZiAoc2hvcnRNb250aEluZGV4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHNob3J0TW9udGhJbmRleCArICcnO1xuICAgIH1cbiAgICAvLyBJbnZhbGlkIG1vbnRoXG4gICAgdGhyb3cgbmV3IEVycm9yKGxvZy5tZXNzYWdlLmludmFsaWRUaW1lVW5pdCgnbW9udGgnLCBtKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplRGF5KGQ6IHN0cmluZyB8IG51bWJlcikge1xuICBpZiAoaXNOdW1iZXIoZCkpIHtcbiAgICAvLyBtb2Qgc28gdGhhdCB0aGlzIGNhbiBiZSBib3RoIDAtYmFzZWQgd2hlcmUgMCA9IHN1bmRheVxuICAgIC8vIGFuZCAxLWJhc2VkIHdoZXJlIDc9c3VuZGF5XG4gICAgcmV0dXJuIChkICUgNykgKyAnJztcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBsb3dlckQgPSBkLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgZGF5SW5kZXggPSBEQVlTLmluZGV4T2YobG93ZXJEKTtcbiAgICBpZiAoZGF5SW5kZXggIT09IC0xKSB7XG4gICAgICByZXR1cm4gZGF5SW5kZXggKyAnJzsgLy8gMCBmb3IgamFudWFyeSwgLi4uXG4gICAgfVxuICAgIGNvbnN0IHNob3J0RCA9IGxvd2VyRC5zdWJzdHIoMCwgMyk7XG4gICAgY29uc3Qgc2hvcnREYXlJbmRleCA9IFNIT1JUX0RBWVMuaW5kZXhPZihzaG9ydEQpO1xuICAgIGlmIChzaG9ydERheUluZGV4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHNob3J0RGF5SW5kZXggKyAnJztcbiAgICB9XG4gICAgLy8gSW52YWxpZCBkYXlcbiAgICB0aHJvdyBuZXcgRXJyb3IobG9nLm1lc3NhZ2UuaW52YWxpZFRpbWVVbml0KCdkYXknLCBkKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gVmVnYSBFeHByZXNzaW9uIGZvciBhIHBhcnRpY3VsYXIgZGF0ZSB0aW1lLlxuICogQHBhcmFtIGRcbiAqIEBwYXJhbSBub3JtYWxpemUgd2hldGhlciB0byBub3JtYWxpemUgcXVhcnRlciwgbW9udGgsIGRheS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRhdGVUaW1lRXhwcihkOiBEYXRlVGltZSB8IERhdGVUaW1lRXhwciwgbm9ybWFsaXplID0gZmFsc2UpIHtcbiAgY29uc3QgdW5pdHM6IChzdHJpbmcgfCBudW1iZXIpW10gPSBbXTtcblxuICBpZiAobm9ybWFsaXplICYmIGQuZGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoa2V5cyhkKS5sZW5ndGggPiAxKSB7XG4gICAgICBsb2cud2Fybihsb2cubWVzc2FnZS5kcm9wcGVkRGF5KGQpKTtcbiAgICAgIGQgPSBkdXBsaWNhdGUoZCk7XG4gICAgICBkZWxldGUgZC5kYXk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGQueWVhciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdW5pdHMucHVzaChkLnllYXIpO1xuICB9IGVsc2UgaWYgKGQuZGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBTZXQgeWVhciB0byAyMDA2IGZvciB3b3JraW5nIHdpdGggZGF5IHNpbmNlIEphbnVhcnkgMSAyMDA2IGlzIGEgU3VuZGF5XG4gICAgdW5pdHMucHVzaChTVU5EQVlfWUVBUik7XG4gIH0gZWxzZSB7XG4gICAgdW5pdHMucHVzaCgwKTtcbiAgfVxuXG4gIGlmIChkLm1vbnRoICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBtb250aCA9IG5vcm1hbGl6ZSA/IG5vcm1hbGl6ZU1vbnRoKGQubW9udGgpIDogZC5tb250aDtcbiAgICB1bml0cy5wdXNoKG1vbnRoKTtcbiAgfSBlbHNlIGlmIChkLnF1YXJ0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHF1YXJ0ZXIgPSBub3JtYWxpemUgPyBub3JtYWxpemVRdWFydGVyKGQucXVhcnRlcikgOiBkLnF1YXJ0ZXI7XG4gICAgdW5pdHMucHVzaChxdWFydGVyICsgJyozJyk7XG4gIH0gZWxzZSB7XG4gICAgdW5pdHMucHVzaCgwKTsgLy8gbW9udGhzIHN0YXJ0IGF0IHplcm8gaW4gSlNcbiAgfVxuXG4gIGlmIChkLmRhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHVuaXRzLnB1c2goZC5kYXRlKTtcbiAgfSBlbHNlIGlmIChkLmRheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gSEFDSzogRGF5IG9ubHkgd29ya3MgYXMgYSBzdGFuZGFsb25lIHVuaXRcbiAgICAvLyBUaGlzIGlzIG9ubHkgY29ycmVjdCBiZWNhdXNlIHdlIGFsd2F5cyBzZXQgeWVhciB0byAyMDA2IGZvciBkYXlcbiAgICBjb25zdCBkYXkgPSBub3JtYWxpemUgPyBub3JtYWxpemVEYXkoZC5kYXkpIDogZC5kYXk7XG4gICAgdW5pdHMucHVzaChkYXkgKyAnKzEnKTtcbiAgfSBlbHNlIHtcbiAgICB1bml0cy5wdXNoKDEpOyAvLyBEYXRlIHN0YXJ0cyBhdCAxIGluIEpTXG4gIH1cblxuICAvLyBOb3RlOiBjYW4ndCB1c2UgVGltZVVuaXQgZW51bSBoZXJlIGFzIGltcG9ydGluZyBpdCB3aWxsIGNyZWF0ZVxuICAvLyBjaXJjdWxhciBkZXBlbmRlbmN5IHByb2JsZW0hXG4gIGZvciAoY29uc3QgdGltZVVuaXQgb2YgWydob3VycycsICdtaW51dGVzJywgJ3NlY29uZHMnLCAnbWlsbGlzZWNvbmRzJ10pIHtcbiAgICBpZiAoZFt0aW1lVW5pdF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgdW5pdHMucHVzaChkW3RpbWVVbml0XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVuaXRzLnB1c2goMCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGQudXRjKSB7XG4gICAgcmV0dXJuIGB1dGMoJHt1bml0cy5qb2luKCcsICcpfSlgO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBgZGF0ZXRpbWUoJHt1bml0cy5qb2luKCcsICcpfSlgO1xuICB9XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { dateTimeExpr } from './datetime';\nimport * as log from './log';\nimport { accessPathWithDatum, flagKeys } from './util';\nexport var TimeUnit;\n(function (TimeUnit) {\n    TimeUnit.YEAR = 'year';\n    TimeUnit.MONTH = 'month';\n    TimeUnit.DAY = 'day';\n    TimeUnit.DATE = 'date';\n    TimeUnit.HOURS = 'hours';\n    TimeUnit.MINUTES = 'minutes';\n    TimeUnit.SECONDS = 'seconds';\n    TimeUnit.MILLISECONDS = 'milliseconds';\n    TimeUnit.YEARMONTH = 'yearmonth';\n    TimeUnit.YEARMONTHDATE = 'yearmonthdate';\n    TimeUnit.YEARMONTHDATEHOURS = 'yearmonthdatehours';\n    TimeUnit.YEARMONTHDATEHOURSMINUTES = 'yearmonthdatehoursminutes';\n    TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS = 'yearmonthdatehoursminutesseconds';\n    // MONTHDATE always include 29 February since we use year 0th (which is a leap year);\n    TimeUnit.MONTHDATE = 'monthdate';\n    TimeUnit.HOURSMINUTES = 'hoursminutes';\n    TimeUnit.HOURSMINUTESSECONDS = 'hoursminutesseconds';\n    TimeUnit.MINUTESSECONDS = 'minutesseconds';\n    TimeUnit.SECONDSMILLISECONDS = 'secondsmilliseconds';\n    TimeUnit.QUARTER = 'quarter';\n    TimeUnit.YEARQUARTER = 'yearquarter';\n    TimeUnit.QUARTERMONTH = 'quartermonth';\n    TimeUnit.YEARQUARTERMONTH = 'yearquartermonth';\n    TimeUnit.UTCYEAR = 'utcyear';\n    TimeUnit.UTCMONTH = 'utcmonth';\n    TimeUnit.UTCDAY = 'utcday';\n    TimeUnit.UTCDATE = 'utcdate';\n    TimeUnit.UTCHOURS = 'utchours';\n    TimeUnit.UTCMINUTES = 'utcminutes';\n    TimeUnit.UTCSECONDS = 'utcseconds';\n    TimeUnit.UTCMILLISECONDS = 'utcmilliseconds';\n    TimeUnit.UTCYEARMONTH = 'utcyearmonth';\n    TimeUnit.UTCYEARMONTHDATE = 'utcyearmonthdate';\n    TimeUnit.UTCYEARMONTHDATEHOURS = 'utcyearmonthdatehours';\n    TimeUnit.UTCYEARMONTHDATEHOURSMINUTES = 'utcyearmonthdatehoursminutes';\n    TimeUnit.UTCYEARMONTHDATEHOURSMINUTESSECONDS = 'utcyearmonthdatehoursminutesseconds';\n    // MONTHDATE always include 29 February since we use year 0th (which is a leap year);\n    TimeUnit.UTCMONTHDATE = 'utcmonthdate';\n    TimeUnit.UTCHOURSMINUTES = 'utchoursminutes';\n    TimeUnit.UTCHOURSMINUTESSECONDS = 'utchoursminutesseconds';\n    TimeUnit.UTCMINUTESSECONDS = 'utcminutesseconds';\n    TimeUnit.UTCSECONDSMILLISECONDS = 'utcsecondsmilliseconds';\n    TimeUnit.UTCQUARTER = 'utcquarter';\n    TimeUnit.UTCYEARQUARTER = 'utcyearquarter';\n    TimeUnit.UTCQUARTERMONTH = 'utcquartermonth';\n    TimeUnit.UTCYEARQUARTERMONTH = 'utcyearquartermonth';\n})(TimeUnit || (TimeUnit = {}));\n/** Time Unit that only corresponds to only one part of Date objects. */\nvar LOCAL_SINGLE_TIMEUNIT_INDEX = {\n    year: 1,\n    quarter: 1,\n    month: 1,\n    day: 1,\n    date: 1,\n    hours: 1,\n    minutes: 1,\n    seconds: 1,\n    milliseconds: 1\n};\nexport var TIMEUNIT_PARTS = flagKeys(LOCAL_SINGLE_TIMEUNIT_INDEX);\nexport function isLocalSingleTimeUnit(timeUnit) {\n    return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nvar UTC_SINGLE_TIMEUNIT_INDEX = {\n    utcyear: 1,\n    utcquarter: 1,\n    utcmonth: 1,\n    utcday: 1,\n    utcdate: 1,\n    utchours: 1,\n    utcminutes: 1,\n    utcseconds: 1,\n    utcmilliseconds: 1\n};\nexport function isUtcSingleTimeUnit(timeUnit) {\n    return !!UTC_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nvar LOCAL_MULTI_TIMEUNIT_INDEX = {\n    yearquarter: 1,\n    yearquartermonth: 1,\n    yearmonth: 1,\n    yearmonthdate: 1,\n    yearmonthdatehours: 1,\n    yearmonthdatehoursminutes: 1,\n    yearmonthdatehoursminutesseconds: 1,\n    quartermonth: 1,\n    monthdate: 1,\n    hoursminutes: 1,\n    hoursminutesseconds: 1,\n    minutesseconds: 1,\n    secondsmilliseconds: 1\n};\nvar UTC_MULTI_TIMEUNIT_INDEX = {\n    utcyearquarter: 1,\n    utcyearquartermonth: 1,\n    utcyearmonth: 1,\n    utcyearmonthdate: 1,\n    utcyearmonthdatehours: 1,\n    utcyearmonthdatehoursminutes: 1,\n    utcyearmonthdatehoursminutesseconds: 1,\n    utcquartermonth: 1,\n    utcmonthdate: 1,\n    utchoursminutes: 1,\n    utchoursminutesseconds: 1,\n    utcminutesseconds: 1,\n    utcsecondsmilliseconds: 1\n};\nvar UTC_TIMEUNIT_INDEX = tslib_1.__assign({}, UTC_SINGLE_TIMEUNIT_INDEX, UTC_MULTI_TIMEUNIT_INDEX);\nexport function isUTCTimeUnit(t) {\n    return !!UTC_TIMEUNIT_INDEX[t];\n}\nexport function getLocalTimeUnit(t) {\n    return t.substr(3);\n}\nvar TIMEUNIT_INDEX = tslib_1.__assign({}, LOCAL_SINGLE_TIMEUNIT_INDEX, UTC_SINGLE_TIMEUNIT_INDEX, LOCAL_MULTI_TIMEUNIT_INDEX, UTC_MULTI_TIMEUNIT_INDEX);\nexport var TIMEUNITS = flagKeys(TIMEUNIT_INDEX);\nexport function isTimeUnit(t) {\n    return !!TIMEUNIT_INDEX[t];\n}\nvar SET_DATE_METHOD = {\n    year: 'setFullYear',\n    month: 'setMonth',\n    date: 'setDate',\n    hours: 'setHours',\n    minutes: 'setMinutes',\n    seconds: 'setSeconds',\n    milliseconds: 'setMilliseconds',\n    // Day and quarter have their own special cases\n    quarter: null,\n    day: null,\n};\n/**\n * Converts a date to only have the measurements relevant to the specified unit\n * i.e. ('yearmonth', '2000-12-04 07:58:14') -> '2000-12-01 00:00:00'\n * Note: the base date is Jan 01 1900 00:00:00\n */\nexport function convert(unit, date) {\n    var isUTC = isUTCTimeUnit(unit);\n    var result = isUTC ?\n        // start with uniform date\n        new Date(Date.UTC(0, 0, 1, 0, 0, 0, 0)) :\n        new Date(0, 0, 1, 0, 0, 0, 0);\n    for (var _i = 0, TIMEUNIT_PARTS_1 = TIMEUNIT_PARTS; _i < TIMEUNIT_PARTS_1.length; _i++) {\n        var timeUnitPart = TIMEUNIT_PARTS_1[_i];\n        if (containsTimeUnit(unit, timeUnitPart)) {\n            switch (timeUnitPart) {\n                case TimeUnit.DAY:\n                    throw new Error('Cannot convert to TimeUnits containing \\'day\\'');\n                case TimeUnit.QUARTER: {\n                    var _a = dateMethods('month', isUTC), getDateMethod_1 = _a.getDateMethod, setDateMethod_1 = _a.setDateMethod;\n                    // indicate quarter by setting month to be the first of the quarter i.e. may (4) -> april (3)\n                    result[setDateMethod_1]((Math.floor(date[getDateMethod_1]() / 3)) * 3);\n                    break;\n                }\n                default:\n                    var _b = dateMethods(timeUnitPart, isUTC), getDateMethod = _b.getDateMethod, setDateMethod = _b.setDateMethod;\n                    result[setDateMethod](date[getDateMethod]());\n            }\n        }\n    }\n    return result;\n}\nfunction dateMethods(singleUnit, isUtc) {\n    var rawSetDateMethod = SET_DATE_METHOD[singleUnit];\n    var setDateMethod = isUtc ? 'setUTC' + rawSetDateMethod.substr(3) : rawSetDateMethod;\n    var getDateMethod = 'get' + (isUtc ? 'UTC' : '') + rawSetDateMethod.substr(3);\n    return { setDateMethod: setDateMethod, getDateMethod: getDateMethod };\n}\nexport function getTimeUnitParts(timeUnit) {\n    return TIMEUNIT_PARTS.reduce(function (parts, part) {\n        if (containsTimeUnit(timeUnit, part)) {\n            return parts.concat(part);\n        }\n        return parts;\n    }, []);\n}\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\nexport function containsTimeUnit(fullTimeUnit, timeUnit) {\n    var index = fullTimeUnit.indexOf(timeUnit);\n    return index > -1 &&\n        (timeUnit !== TimeUnit.SECONDS ||\n            index === 0 ||\n            fullTimeUnit.charAt(index - 1) !== 'i' // exclude milliseconds\n        );\n}\n/**\n * Returns Vega expresssion for a given timeUnit and fieldRef\n */\nexport function fieldExpr(fullTimeUnit, field) {\n    var fieldRef = accessPathWithDatum(field);\n    var utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n    function func(timeUnit) {\n        if (timeUnit === TimeUnit.QUARTER) {\n            // quarter starting at 0 (0,3,6,9).\n            return \"(\" + utc + \"quarter(\" + fieldRef + \")-1)\";\n        }\n        else {\n            return \"\" + utc + timeUnit + \"(\" + fieldRef + \")\";\n        }\n    }\n    var d = TIMEUNIT_PARTS.reduce(function (dateExpr, tu) {\n        if (containsTimeUnit(fullTimeUnit, tu)) {\n            dateExpr[tu] = func(tu);\n        }\n        return dateExpr;\n    }, {});\n    return dateTimeExpr(d);\n}\n/**\n * returns the signal expression used for axis labels for a time unit\n */\nexport function formatExpression(timeUnit, field, shortTimeLabels, isUTCScale) {\n    if (!timeUnit) {\n        return undefined;\n    }\n    var dateComponents = [];\n    var expression = '';\n    var hasYear = containsTimeUnit(timeUnit, TimeUnit.YEAR);\n    if (containsTimeUnit(timeUnit, TimeUnit.QUARTER)) {\n        // special expression for quarter as prefix\n        expression = \"'Q' + quarter(\" + field + \")\";\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.MONTH)) {\n        // By default use short month name\n        dateComponents.push(shortTimeLabels !== false ? '%b' : '%B');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.DAY)) {\n        dateComponents.push(shortTimeLabels ? '%a' : '%A');\n    }\n    else if (containsTimeUnit(timeUnit, TimeUnit.DATE)) {\n        dateComponents.push('%d' + (hasYear ? ',' : '')); // add comma if there is year\n    }\n    if (hasYear) {\n        dateComponents.push(shortTimeLabels ? '%y' : '%Y');\n    }\n    var timeComponents = [];\n    if (containsTimeUnit(timeUnit, TimeUnit.HOURS)) {\n        timeComponents.push('%H');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.MINUTES)) {\n        timeComponents.push('%M');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.SECONDS)) {\n        timeComponents.push('%S');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.MILLISECONDS)) {\n        timeComponents.push('%L');\n    }\n    var dateTimeComponents = [];\n    if (dateComponents.length > 0) {\n        dateTimeComponents.push(dateComponents.join(' '));\n    }\n    if (timeComponents.length > 0) {\n        dateTimeComponents.push(timeComponents.join(':'));\n    }\n    if (dateTimeComponents.length > 0) {\n        if (expression) {\n            // Add space between quarter and main time format\n            expression += \" + ' ' + \";\n        }\n        // We only use utcFormat for utc scale\n        // For utc time units, the data is already converted as a part of timeUnit transform.\n        // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n        if (isUTCScale) {\n            expression += \"utcFormat(\" + field + \", '\" + dateTimeComponents.join(' ') + \"')\";\n        }\n        else {\n            expression += \"timeFormat(\" + field + \", '\" + dateTimeComponents.join(' ') + \"')\";\n        }\n    }\n    // If expression is still an empty string, return undefined instead.\n    return expression || undefined;\n}\nexport function normalizeTimeUnit(timeUnit) {\n    if (timeUnit !== 'day' && timeUnit.indexOf('day') >= 0) {\n        log.warn(log.message.dayReplacedWithDate(timeUnit));\n        return timeUnit.replace('day', 'date');\n    }\n    return timeUnit;\n}\n//# sourceMappingURL=data:application/json;base64,","/** Constants and utilities for data type */\n/** Data type based on level of measurement */\nexport var Type;\n(function (Type) {\n    Type.QUANTITATIVE = 'quantitative';\n    Type.ORDINAL = 'ordinal';\n    Type.TEMPORAL = 'temporal';\n    Type.NOMINAL = 'nominal';\n    Type.LATITUDE = 'latitude';\n    Type.LONGITUDE = 'longitude';\n    Type.GEOJSON = 'geojson';\n})(Type || (Type = {}));\nvar TYPE_INDEX = {\n    quantitative: 1,\n    ordinal: 1,\n    temporal: 1,\n    nominal: 1,\n    latitude: 1,\n    longitude: 1,\n    geojson: 1\n};\nexport function isType(t) {\n    return !!TYPE_INDEX[t];\n}\nexport var QUANTITATIVE = Type.QUANTITATIVE;\nexport var ORDINAL = Type.ORDINAL;\nexport var TEMPORAL = Type.TEMPORAL;\nexport var NOMINAL = Type.NOMINAL;\nexport var GEOJSON = Type.GEOJSON;\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\nexport function getFullName(type) {\n    if (type) {\n        type = type.toLowerCase();\n        switch (type) {\n            case 'q':\n            case QUANTITATIVE:\n                return 'quantitative';\n            case 't':\n            case TEMPORAL:\n                return 'temporal';\n            case 'o':\n            case ORDINAL:\n                return 'ordinal';\n            case 'n':\n            case NOMINAL:\n                return 'nominal';\n            case Type.LATITUDE:\n                return 'latitude';\n            case Type.LONGITUDE:\n                return 'longitude';\n            case GEOJSON:\n                return 'geojson';\n        }\n    }\n    // If we get invalid input, return undefined type.\n    return undefined;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLDRDQUE0QztBQUM1Qyw4Q0FBOEM7QUFFOUMsTUFBTSxLQUFXLElBQUksQ0FTcEI7QUFURCxXQUFpQixJQUFJO0lBQ04saUJBQVksR0FBbUIsY0FBYyxDQUFDO0lBQzlDLFlBQU8sR0FBYyxTQUFTLENBQUM7SUFDL0IsYUFBUSxHQUFlLFVBQVUsQ0FBQztJQUNsQyxZQUFPLEdBQWMsU0FBUyxDQUFDO0lBRS9CLGFBQVEsR0FBZSxVQUFVLENBQUM7SUFDbEMsY0FBUyxHQUFnQixXQUFXLENBQUM7SUFDckMsWUFBTyxHQUFjLFNBQVMsQ0FBQztBQUM5QyxDQUFDLEVBVGdCLElBQUksS0FBSixJQUFJLFFBU3BCO0FBTUQsSUFBTSxVQUFVLEdBQWU7SUFDN0IsWUFBWSxFQUFFLENBQUM7SUFDZixPQUFPLEVBQUUsQ0FBQztJQUNWLFFBQVEsRUFBRSxDQUFDO0lBQ1gsT0FBTyxFQUFFLENBQUM7SUFDVixRQUFRLEVBQUUsQ0FBQztJQUNYLFNBQVMsRUFBRSxDQUFDO0lBQ1osT0FBTyxFQUFFLENBQUM7Q0FDWCxDQUFDO0FBRUYsTUFBTSxpQkFBaUIsQ0FBTTtJQUMzQixPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekIsQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0FBQzlDLE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3RDLE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBRXBDLE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBRXBDOzs7O0dBSUc7QUFDSCxNQUFNLHNCQUFzQixJQUFpQjtJQUMzQyxJQUFJLElBQUksRUFBRTtRQUNSLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDMUIsUUFBUSxJQUFJLEVBQUU7WUFDWixLQUFLLEdBQUcsQ0FBQztZQUNULEtBQUssWUFBWTtnQkFDZixPQUFPLGNBQWMsQ0FBQztZQUN4QixLQUFLLEdBQUcsQ0FBQztZQUNULEtBQUssUUFBUTtnQkFDWCxPQUFPLFVBQVUsQ0FBQztZQUNwQixLQUFLLEdBQUcsQ0FBQztZQUNULEtBQUssT0FBTztnQkFDVixPQUFPLFNBQVMsQ0FBQztZQUNuQixLQUFLLEdBQUcsQ0FBQztZQUNULEtBQUssT0FBTztnQkFDVixPQUFPLFNBQVMsQ0FBQztZQUNuQixLQUFLLElBQUksQ0FBQyxRQUFRO2dCQUNoQixPQUFPLFVBQVUsQ0FBQztZQUNwQixLQUFLLElBQUksQ0FBQyxTQUFTO2dCQUNqQixPQUFPLFdBQVcsQ0FBQztZQUNyQixLQUFLLE9BQU87Z0JBQ1YsT0FBTyxTQUFTLENBQUM7U0FDcEI7S0FDRjtJQUNELGtEQUFrRDtJQUNsRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGbGFnfSBmcm9tICcuL3V0aWwnO1xuLyoqIENvbnN0YW50cyBhbmQgdXRpbGl0aWVzIGZvciBkYXRhIHR5cGUgKi9cbi8qKiBEYXRhIHR5cGUgYmFzZWQgb24gbGV2ZWwgb2YgbWVhc3VyZW1lbnQgKi9cblxuZXhwb3J0IG5hbWVzcGFjZSBUeXBlIHtcbiAgZXhwb3J0IGNvbnN0IFFVQU5USVRBVElWRTogJ3F1YW50aXRhdGl2ZScgPSAncXVhbnRpdGF0aXZlJztcbiAgZXhwb3J0IGNvbnN0IE9SRElOQUw6ICdvcmRpbmFsJyA9ICdvcmRpbmFsJztcbiAgZXhwb3J0IGNvbnN0IFRFTVBPUkFMOiAndGVtcG9yYWwnID0gJ3RlbXBvcmFsJztcbiAgZXhwb3J0IGNvbnN0IE5PTUlOQUw6ICdub21pbmFsJyA9ICdub21pbmFsJztcblxuICBleHBvcnQgY29uc3QgTEFUSVRVREU6ICdsYXRpdHVkZScgPSAnbGF0aXR1ZGUnO1xuICBleHBvcnQgY29uc3QgTE9OR0lUVURFOiAnbG9uZ2l0dWRlJyA9ICdsb25naXR1ZGUnO1xuICBleHBvcnQgY29uc3QgR0VPSlNPTjogJ2dlb2pzb24nID0gJ2dlb2pzb24nO1xufVxuZXhwb3J0IHR5cGUgQmFzaWNUeXBlID0gdHlwZW9mIFR5cGUuUVVBTlRJVEFUSVZFIHwgdHlwZW9mIFR5cGUuT1JESU5BTCB8IHR5cGVvZiBUeXBlLlRFTVBPUkFMIHwgdHlwZW9mIFR5cGUuTk9NSU5BTDtcbmV4cG9ydCB0eXBlIEdlb1R5cGUgPSB0eXBlb2YgVHlwZS5MQVRJVFVERSB8IHR5cGVvZiBUeXBlLkxPTkdJVFVERSB8IHR5cGVvZiBUeXBlLkdFT0pTT047XG5cbmV4cG9ydCB0eXBlIFR5cGUgPSBCYXNpY1R5cGUgfCBHZW9UeXBlO1xuXG5jb25zdCBUWVBFX0lOREVYOiBGbGFnPFR5cGU+ID0ge1xuICBxdWFudGl0YXRpdmU6IDEsXG4gIG9yZGluYWw6IDEsXG4gIHRlbXBvcmFsOiAxLFxuICBub21pbmFsOiAxLFxuICBsYXRpdHVkZTogMSxcbiAgbG9uZ2l0dWRlOiAxLFxuICBnZW9qc29uOiAxXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNUeXBlKHQ6IGFueSk6IHQgaXMgVHlwZSB7XG4gIHJldHVybiAhIVRZUEVfSU5ERVhbdF07XG59XG5cbmV4cG9ydCBjb25zdCBRVUFOVElUQVRJVkUgPSBUeXBlLlFVQU5USVRBVElWRTtcbmV4cG9ydCBjb25zdCBPUkRJTkFMID0gVHlwZS5PUkRJTkFMO1xuZXhwb3J0IGNvbnN0IFRFTVBPUkFMID0gVHlwZS5URU1QT1JBTDtcbmV4cG9ydCBjb25zdCBOT01JTkFMID0gVHlwZS5OT01JTkFMO1xuXG5leHBvcnQgY29uc3QgR0VPSlNPTiA9IFR5cGUuR0VPSlNPTjtcblxuLyoqXG4gKiBHZXQgZnVsbCwgbG93ZXJjYXNlIHR5cGUgbmFtZSBmb3IgYSBnaXZlbiB0eXBlLlxuICogQHBhcmFtICB0eXBlXG4gKiBAcmV0dXJuIEZ1bGwgdHlwZSBuYW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnVsbE5hbWUodHlwZTogVHlwZXxzdHJpbmcpOiBUeXBlIHtcbiAgaWYgKHR5cGUpIHtcbiAgICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAncSc6XG4gICAgICBjYXNlIFFVQU5USVRBVElWRTpcbiAgICAgICAgcmV0dXJuICdxdWFudGl0YXRpdmUnO1xuICAgICAgY2FzZSAndCc6XG4gICAgICBjYXNlIFRFTVBPUkFMOlxuICAgICAgICByZXR1cm4gJ3RlbXBvcmFsJztcbiAgICAgIGNhc2UgJ28nOlxuICAgICAgY2FzZSBPUkRJTkFMOlxuICAgICAgICByZXR1cm4gJ29yZGluYWwnO1xuICAgICAgY2FzZSAnbic6XG4gICAgICBjYXNlIE5PTUlOQUw6XG4gICAgICAgIHJldHVybiAnbm9taW5hbCc7XG4gICAgICBjYXNlIFR5cGUuTEFUSVRVREU6XG4gICAgICAgIHJldHVybiAnbGF0aXR1ZGUnO1xuICAgICAgY2FzZSBUeXBlLkxPTkdJVFVERTpcbiAgICAgICAgcmV0dXJuICdsb25naXR1ZGUnO1xuICAgICAgY2FzZSBHRU9KU09OOlxuICAgICAgICByZXR1cm4gJ2dlb2pzb24nO1xuICAgIH1cbiAgfVxuICAvLyBJZiB3ZSBnZXQgaW52YWxpZCBpbnB1dCwgcmV0dXJuIHVuZGVmaW5lZCB0eXBlLlxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIl19","import * as tslib_1 from \"tslib\";\nimport { isArray, isBoolean, isNumber, isString } from 'vega-util';\nimport { isAggregateOp, isCountingAggregateOp } from './aggregate';\nimport { autoMaxBins, binToString } from './bin';\nimport { rangeType } from './channel';\nimport * as log from './log';\nimport { getTimeUnitParts, normalizeTimeUnit } from './timeunit';\nimport { getFullName, QUANTITATIVE } from './type';\nimport { flatAccessWithDatum, replacePathInField, titlecase } from './util';\nexport function isConditionalSelection(c) {\n    return c['selection'];\n}\nexport function isRepeatRef(field) {\n    return field && !isString(field) && 'repeat' in field;\n}\nexport function toFieldDefBase(fieldDef) {\n    var field = fieldDef.field, timeUnit = fieldDef.timeUnit, bin = fieldDef.bin, aggregate = fieldDef.aggregate;\n    return tslib_1.__assign({}, (timeUnit ? { timeUnit: timeUnit } : {}), (bin ? { bin: bin } : {}), (aggregate ? { aggregate: aggregate } : {}), { field: field });\n}\nexport function isConditionalDef(channelDef) {\n    return !!channelDef && !!channelDef.condition;\n}\n/**\n * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef\n */\nexport function hasConditionalFieldDef(channelDef) {\n    return !!channelDef && !!channelDef.condition && !isArray(channelDef.condition) && isFieldDef(channelDef.condition);\n}\nexport function hasConditionalValueDef(channelDef) {\n    return !!channelDef && !!channelDef.condition && (isArray(channelDef.condition) || isValueDef(channelDef.condition));\n}\nexport function isFieldDef(channelDef) {\n    return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');\n}\nexport function isStringFieldDef(fieldDef) {\n    return isFieldDef(fieldDef) && isString(fieldDef.field);\n}\nexport function isValueDef(channelDef) {\n    return channelDef && 'value' in channelDef && channelDef['value'] !== undefined;\n}\nexport function isScaleFieldDef(channelDef) {\n    return !!channelDef && (!!channelDef['scale'] || !!channelDef['sort']);\n}\nexport function vgField(fieldDef, opt) {\n    if (opt === void 0) { opt = {}; }\n    var field = fieldDef.field;\n    var prefix = opt.prefix;\n    var suffix = opt.suffix;\n    if (isCount(fieldDef)) {\n        field = 'count_*';\n    }\n    else {\n        var fn = undefined;\n        if (!opt.nofn) {\n            if (fieldDef.bin) {\n                fn = binToString(fieldDef.bin);\n                suffix = opt.binSuffix || '';\n            }\n            else if (fieldDef.aggregate) {\n                fn = String(opt.aggregate || fieldDef.aggregate);\n            }\n            else if (fieldDef.timeUnit) {\n                fn = String(fieldDef.timeUnit);\n            }\n        }\n        if (fn) {\n            field = fn + \"_\" + field;\n        }\n    }\n    if (suffix) {\n        field = field + \"_\" + suffix;\n    }\n    if (prefix) {\n        field = prefix + \"_\" + field;\n    }\n    if (opt.expr) {\n        // Expression to access flattened field. No need to escape dots.\n        return flatAccessWithDatum(field, opt.expr);\n    }\n    else {\n        // We flattened all fields so paths should have become dot.\n        return replacePathInField(field);\n    }\n}\nexport function isDiscrete(fieldDef) {\n    switch (fieldDef.type) {\n        case 'nominal':\n        case 'ordinal':\n        case 'geojson':\n            return true;\n        case 'quantitative':\n            return !!fieldDef.bin;\n        case 'latitude':\n        case 'longitude':\n        case 'temporal':\n            return false;\n    }\n    throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\nexport function isContinuous(fieldDef) {\n    return !isDiscrete(fieldDef);\n}\nexport function isCount(fieldDef) {\n    return fieldDef.aggregate === 'count';\n}\nexport function verbalTitleFormatter(fieldDef, config) {\n    var field = fieldDef.field, bin = fieldDef.bin, timeUnit = fieldDef.timeUnit, aggregate = fieldDef.aggregate;\n    if (aggregate === 'count') {\n        return config.countTitle;\n    }\n    else if (bin) {\n        return field + \" (binned)\";\n    }\n    else if (timeUnit) {\n        var units = getTimeUnitParts(timeUnit).join('-');\n        return field + \" (\" + units + \")\";\n    }\n    else if (aggregate) {\n        return titlecase(aggregate) + \" of \" + field;\n    }\n    return field;\n}\nexport function functionalTitleFormatter(fieldDef, config) {\n    var fn = fieldDef.aggregate || fieldDef.timeUnit || (fieldDef.bin && 'bin');\n    if (fn) {\n        return fn.toUpperCase() + '(' + fieldDef.field + ')';\n    }\n    else {\n        return fieldDef.field;\n    }\n}\nexport var defaultTitleFormatter = function (fieldDef, config) {\n    switch (config.fieldTitle) {\n        case 'plain':\n            return fieldDef.field;\n        case 'functional':\n            return functionalTitleFormatter(fieldDef, config);\n        default:\n            return verbalTitleFormatter(fieldDef, config);\n    }\n};\nvar titleFormatter = defaultTitleFormatter;\nexport function setTitleFormatter(formatter) {\n    titleFormatter = formatter;\n}\nexport function resetTitleFormatter() {\n    setTitleFormatter(defaultTitleFormatter);\n}\nexport function title(fieldDef, config) {\n    return titleFormatter(fieldDef, config);\n}\nexport function defaultType(fieldDef, channel) {\n    if (fieldDef.timeUnit) {\n        return 'temporal';\n    }\n    if (fieldDef.bin) {\n        return 'quantitative';\n    }\n    switch (rangeType(channel)) {\n        case 'continuous':\n            return 'quantitative';\n        case 'discrete':\n            return 'nominal';\n        case 'flexible': // color\n            return 'nominal';\n        default:\n            return 'quantitative';\n    }\n}\n/**\n * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.\n * @param channelDef\n */\nexport function getFieldDef(channelDef) {\n    if (isFieldDef(channelDef)) {\n        return channelDef;\n    }\n    else if (hasConditionalFieldDef(channelDef)) {\n        return channelDef.condition;\n    }\n    return undefined;\n}\n/**\n * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n */\nexport function normalize(channelDef, channel) {\n    if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {\n        var primitiveType = isString(channelDef) ? 'string' :\n            isNumber(channelDef) ? 'number' : 'boolean';\n        log.warn(log.message.primitiveChannelDef(channel, primitiveType, channelDef));\n        return { value: channelDef };\n    }\n    // If a fieldDef contains a field, we need type.\n    if (isFieldDef(channelDef)) {\n        return normalizeFieldDef(channelDef, channel);\n    }\n    else if (hasConditionalFieldDef(channelDef)) {\n        return tslib_1.__assign({}, channelDef, { \n            // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>\n            condition: normalizeFieldDef(channelDef.condition, channel) });\n    }\n    return channelDef;\n}\nexport function normalizeFieldDef(fieldDef, channel) {\n    // Drop invalid aggregate\n    if (fieldDef.aggregate && !isAggregateOp(fieldDef.aggregate)) {\n        var aggregate = fieldDef.aggregate, fieldDefWithoutAggregate = tslib_1.__rest(fieldDef, [\"aggregate\"]);\n        log.warn(log.message.invalidAggregate(fieldDef.aggregate));\n        fieldDef = fieldDefWithoutAggregate;\n    }\n    // Normalize Time Unit\n    if (fieldDef.timeUnit) {\n        fieldDef = tslib_1.__assign({}, fieldDef, { timeUnit: normalizeTimeUnit(fieldDef.timeUnit) });\n    }\n    // Normalize bin\n    if (fieldDef.bin) {\n        fieldDef = tslib_1.__assign({}, fieldDef, { bin: normalizeBin(fieldDef.bin, channel) });\n    }\n    // Normalize Type\n    if (fieldDef.type) {\n        var fullType = getFullName(fieldDef.type);\n        if (fieldDef.type !== fullType) {\n            // convert short type to full type\n            fieldDef = tslib_1.__assign({}, fieldDef, { type: fullType });\n        }\n        if (fieldDef.type !== 'quantitative') {\n            if (isCountingAggregateOp(fieldDef.aggregate)) {\n                log.warn(log.message.invalidFieldTypeForCountAggregate(fieldDef.type, fieldDef.aggregate));\n                fieldDef = tslib_1.__assign({}, fieldDef, { type: 'quantitative' });\n            }\n        }\n    }\n    else {\n        // If type is empty / invalid, then augment with default type\n        var newType = defaultType(fieldDef, channel);\n        log.warn(log.message.emptyOrInvalidFieldType(fieldDef.type, channel, newType));\n        fieldDef = tslib_1.__assign({}, fieldDef, { type: newType });\n    }\n    var _a = channelCompatibility(fieldDef, channel), compatible = _a.compatible, warning = _a.warning;\n    if (!compatible) {\n        log.warn(warning);\n    }\n    return fieldDef;\n}\nexport function normalizeBin(bin, channel) {\n    if (isBoolean(bin)) {\n        return { maxbins: autoMaxBins(channel) };\n    }\n    else if (!bin.maxbins && !bin.step) {\n        return tslib_1.__assign({}, bin, { maxbins: autoMaxBins(channel) });\n    }\n    else {\n        return bin;\n    }\n}\nvar COMPATIBLE = { compatible: true };\nexport function channelCompatibility(fieldDef, channel) {\n    switch (channel) {\n        case 'row':\n        case 'column':\n            if (isContinuous(fieldDef) && !fieldDef.timeUnit) {\n                // TODO:(https://github.com/vega/vega-lite/issues/2011):\n                // with timeUnit it's not always strictly continuous\n                return {\n                    compatible: false,\n                    warning: log.message.facetChannelShouldBeDiscrete(channel)\n                };\n            }\n            return COMPATIBLE;\n        case 'x':\n        case 'y':\n        case 'color':\n        case 'fill':\n        case 'stroke':\n        case 'text':\n        case 'detail':\n        case 'key':\n        case 'tooltip':\n        case 'href':\n            return COMPATIBLE;\n        case 'longitude':\n        case 'longitude2':\n        case 'latitude':\n        case 'latitude2':\n            if (fieldDef.type !== QUANTITATIVE) {\n                return {\n                    compatible: false,\n                    warning: \"Channel \" + channel + \" should not be used with \" + fieldDef.type + \" field.\"\n                };\n            }\n            return COMPATIBLE;\n        case 'opacity':\n        case 'size':\n        case 'x2':\n        case 'y2':\n            if (isDiscrete(fieldDef) && !fieldDef.bin) {\n                return {\n                    compatible: false,\n                    warning: \"Channel \" + channel + \" should not be used with discrete field.\"\n                };\n            }\n            return COMPATIBLE;\n        case 'shape':\n            if (fieldDef.type !== 'nominal' && fieldDef.type !== 'geojson') {\n                return {\n                    compatible: false,\n                    warning: 'Shape channel should be used with nominal data or geojson only'\n                };\n            }\n            return COMPATIBLE;\n        case 'order':\n            if (fieldDef.type === 'nominal') {\n                return {\n                    compatible: false,\n                    warning: \"Channel order is inappropriate for nominal field, which has no inherent order.\"\n                };\n            }\n            return COMPATIBLE;\n    }\n    throw new Error('channelCompatability not implemented for channel ' + channel);\n}\nexport function isNumberFieldDef(fieldDef) {\n    return fieldDef.type === 'quantitative' || !!fieldDef.bin;\n}\nexport function isTimeFieldDef(fieldDef) {\n    return fieldDef.type === 'temporal' || !!fieldDef.timeUnit;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { CHANNELS, isChannel, supportMark } from './channel';\nimport { getFieldDef, hasConditionalFieldDef, isConditionalDef, isFieldDef, isValueDef, normalize, normalizeFieldDef } from './fielddef';\nimport * as log from './log';\nimport { Type } from './type';\nimport { contains, keys, some } from './util';\nexport function channelHasField(encoding, channel) {\n    var channelDef = encoding && encoding[channel];\n    if (channelDef) {\n        if (isArray(channelDef)) {\n            return some(channelDef, function (fieldDef) { return !!fieldDef.field; });\n        }\n        else {\n            return isFieldDef(channelDef) || hasConditionalFieldDef(channelDef);\n        }\n    }\n    return false;\n}\nexport function isAggregate(encoding) {\n    return some(CHANNELS, function (channel) {\n        if (channelHasField(encoding, channel)) {\n            var channelDef = encoding[channel];\n            if (isArray(channelDef)) {\n                return some(channelDef, function (fieldDef) { return !!fieldDef.aggregate; });\n            }\n            else {\n                var fieldDef = getFieldDef(channelDef);\n                return fieldDef && !!fieldDef.aggregate;\n            }\n        }\n        return false;\n    });\n}\nexport function normalizeEncoding(encoding, mark) {\n    return keys(encoding).reduce(function (normalizedEncoding, channel) {\n        if (!isChannel(channel)) {\n            // Drop invalid channel\n            log.warn(log.message.invalidEncodingChannel(channel));\n            return normalizedEncoding;\n        }\n        if (!supportMark(channel, mark)) {\n            // Drop unsupported channel\n            log.warn(log.message.incompatibleChannel(channel, mark));\n            return normalizedEncoding;\n        }\n        // Drop line's size if the field is aggregated.\n        if (channel === 'size' && mark === 'line') {\n            var fieldDef = getFieldDef(encoding[channel]);\n            if (fieldDef && fieldDef.aggregate) {\n                log.warn(log.message.LINE_WITH_VARYING_SIZE);\n                return normalizedEncoding;\n            }\n        }\n        // Drop color if either fill or stroke is specified\n        if (channel === 'color' && ('fill' in encoding || 'stroke' in encoding)) {\n            log.warn(log.message.droppingColor('encoding', { fill: 'fill' in encoding, stroke: 'stroke' in encoding }));\n            return normalizedEncoding;\n        }\n        var channelDef = encoding[channel];\n        if (channel === 'detail' ||\n            (channel === 'order' && !isArray(channelDef) && !isValueDef(channelDef)) ||\n            (channel === 'tooltip' && isArray(channelDef))) {\n            if (channelDef) {\n                // Array of fieldDefs for detail channel (or production rule)\n                normalizedEncoding[channel] = (isArray(channelDef) ? channelDef : [channelDef])\n                    .reduce(function (defs, fieldDef) {\n                    if (!isFieldDef(fieldDef)) {\n                        log.warn(log.message.emptyFieldDef(fieldDef, channel));\n                    }\n                    else {\n                        defs.push(normalizeFieldDef(fieldDef, channel));\n                    }\n                    return defs;\n                }, []);\n            }\n        }\n        else {\n            var fieldDef = getFieldDef(encoding[channel]);\n            if (fieldDef && contains([Type.LATITUDE, Type.LONGITUDE], fieldDef.type)) {\n                var _a = channel, _ = normalizedEncoding[_a], newEncoding = tslib_1.__rest(normalizedEncoding, [typeof _a === \"symbol\" ? _a : _a + \"\"]);\n                var newChannel = channel === 'x' ? 'longitude' :\n                    channel === 'y' ? 'latitude' :\n                        channel === 'x2' ? 'longitude2' :\n                            channel === 'y2' ? 'latitude2' : undefined;\n                log.warn(log.message.latLongDeprecated(channel, fieldDef.type, newChannel));\n                return tslib_1.__assign({}, newEncoding, (_b = {}, _b[newChannel] = tslib_1.__assign({}, normalize(fieldDef, channel), { type: 'quantitative' }), _b));\n            }\n            if (!isFieldDef(channelDef) && !isValueDef(channelDef) && !isConditionalDef(channelDef)) {\n                log.warn(log.message.emptyFieldDef(channelDef, channel));\n                return normalizedEncoding;\n            }\n            normalizedEncoding[channel] = normalize(channelDef, channel);\n        }\n        return normalizedEncoding;\n        var _b;\n    }, {});\n}\nexport function isRanged(encoding) {\n    return encoding && ((!!encoding.x && !!encoding.x2) || (!!encoding.y && !!encoding.y2));\n}\nexport function fieldDefs(encoding) {\n    var arr = [];\n    CHANNELS.forEach(function (channel) {\n        if (channelHasField(encoding, channel)) {\n            var channelDef = encoding[channel];\n            (isArray(channelDef) ? channelDef : [channelDef]).forEach(function (def) {\n                if (isFieldDef(def)) {\n                    arr.push(def);\n                }\n                else if (hasConditionalFieldDef(def)) {\n                    arr.push(def.condition);\n                }\n            });\n        }\n    });\n    return arr;\n}\nexport function forEach(mapping, f, thisArg) {\n    if (!mapping) {\n        return;\n    }\n    var _loop_1 = function (channel) {\n        if (isArray(mapping[channel])) {\n            mapping[channel].forEach(function (channelDef) {\n                f.call(thisArg, channelDef, channel);\n            });\n        }\n        else {\n            f.call(thisArg, mapping[channel], channel);\n        }\n    };\n    for (var _i = 0, _a = keys(mapping); _i < _a.length; _i++) {\n        var channel = _a[_i];\n        _loop_1(channel);\n    }\n}\nexport function reduce(mapping, f, init, thisArg) {\n    if (!mapping) {\n        return init;\n    }\n    return keys(mapping).reduce(function (r, channel) {\n        var map = mapping[channel];\n        if (isArray(map)) {\n            return map.reduce(function (r1, channelDef) {\n                return f.call(thisArg, r1, channelDef, channel);\n            }, r);\n        }\n        else {\n            return f.call(thisArg, r, map, channel);\n        }\n    }, init);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jb2RpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5jb2RpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDbEMsT0FBTyxFQUFVLFFBQVEsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRXBFLE9BQU8sRUFLTCxXQUFXLEVBQ1gsc0JBQXNCLEVBQ3RCLGdCQUFnQixFQUNoQixVQUFVLEVBQ1YsVUFBVSxFQUVWLFNBQVMsRUFDVCxpQkFBaUIsRUFNbEIsTUFBTSxZQUFZLENBQUM7QUFDcEIsT0FBTyxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUM7QUFFN0IsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUE4STVDLE1BQU0sMEJBQTBCLFFBQWtDLEVBQUUsT0FBZ0I7SUFDbEYsSUFBTSxVQUFVLEdBQUcsUUFBUSxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqRCxJQUFJLFVBQVUsRUFBRTtRQUNkLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxVQUFDLFFBQVEsSUFBSyxPQUFBLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFoQixDQUFnQixDQUFDLENBQUM7U0FDekQ7YUFBTTtZQUNMLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3JFO0tBQ0Y7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFHRCxNQUFNLHNCQUFzQixRQUFrQztJQUM1RCxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBQyxPQUFPO1FBQzVCLElBQUksZUFBZSxD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LEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2hCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEVBQUssRUFBRSxVQUE4QjtnQkFDdEQsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2xELENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNQO2FBQU07WUFDTCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDWCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQge2lzQXJyYXl9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5pbXBvcnQge0NoYW5uZWwsIENIQU5ORUxTLCBpc0NoYW5uZWwsIHN1cHBvcnRNYXJrfSBmcm9tICcuL2NoYW5uZWwnO1xuaW1wb3J0IHtGYWNldE1hcHBpbmd9IGZyb20gJy4vZmFjZXQnO1xuaW1wb3J0IHtcbiAgQ2hhbm5lbERlZixcbiAgRmllbGQsXG4gIEZpZWxkRGVmLFxuICBGaWVsZERlZldpdGhDb25kaXRpb24sXG4gIGdldEZpZWxkRGVmLFxuICBoYXNDb25kaXRpb25hbEZpZWxkRGVmLFxuICBpc0NvbmRpdGlvbmFsRGVmLFxuICBpc0ZpZWxkRGVmLFxuICBpc1ZhbHVlRGVmLFxuICBNYXJrUHJvcEZpZWxkRGVmLFxuICBub3JtYWxpemUsXG4gIG5vcm1hbGl6ZUZpZWxkRGVmLFxuICBPcmRlckZpZWxkRGVmLFxuICBQb3NpdGlvbkZpZWxkRGVmLFxuICBUZXh0RmllbGREZWYsXG4gIFZhbHVlRGVmLFxuICBWYWx1ZURlZldpdGhDb25kaXRpb25cbn0gZnJvbSAnLi9maWVsZGRlZic7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi9sb2cnO1xuaW1wb3J0IHtNYXJrfSBmcm9tICcuL21hcmsnO1xuaW1wb3J0IHtUeXBlfSBmcm9tICcuL3R5cGUnO1xuaW1wb3J0IHtjb250YWlucywga2V5cywgc29tZX0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IGludGVyZmFjZSBFbmNvZGluZzxGPiB7XG4gIC8qKlxuICAgKiBYIGNvb3JkaW5hdGVzIG9mIHRoZSBtYXJrcywgb3Igd2lkdGggb2YgaG9yaXpvbnRhbCBgXCJiYXJcImAgYW5kIGBcImFyZWFcImAuXG4gICAqL1xuICB4PzogUG9zaXRpb25GaWVsZERlZjxGPiB8IFZhbHVlRGVmO1xuXG4gIC8qKlxuICAgKiBZIGNvb3JkaW5hdGVzIG9mIHRoZSBtYXJrcywgb3IgaGVpZ2h0IG9mIHZlcnRpY2FsIGBcImJhclwiYCBhbmQgYFwiYXJlYVwiYC5cbiAgICovXG4gIHk/OiBQb3NpdGlvbkZpZWxkRGVmPEY+IHwgVmFsdWVEZWY7XG5cbiAgLyoqXG4gICAqIFgyIGNvb3JkaW5hdGVzIGZvciByYW5nZWQgYFwiYXJlYVwiYCwgYFwiYmFyXCJgLCBgXCJyZWN0XCJgLCBhbmQgIGBcInJ1bGVcImAuXG4gICAqL1xuICAvLyBUT0RPOiBIYW0gbmVlZCB0byBhZGQgZGVmYXVsdCBiZWhhdmlvclxuICB4Mj86IEZpZWxkRGVmPEY+IHwgVmFsdWVEZWY7XG5cbiAgLyoqXG4gICAqIFkyIGNvb3JkaW5hdGVzIGZvciByYW5nZWQgYFwiYXJlYVwiYCwgYFwiYmFyXCJgLCBgXCJyZWN0XCJgLCBhbmQgIGBcInJ1bGVcImAuXG4gICAqL1xuICAvLyBUT0RPOiBIYW0gbmVlZCB0byBhZGQgZGVmYXVsdCBiZWhhdmlvclxuICB5Mj86IEZpZWxkRGVmPEY+IHwgVmFsdWVEZWY7XG5cblxuICAvKipcbiAgICogTG9uZ2l0dWRlIHBvc2l0aW9uIG9mIGdlb2dyYXBoaWNhbGx5IHByb2plY3RlZCBtYXJrcy5cbiAgICovXG4gIGxvbmdpdHVkZT86IEZpZWxkRGVmPEY+O1xuXG4gIC8qKlxuICAgKiBMYXRpdHVkZSBwb3NpdGlvbiBvZiBnZW9ncmFwaGljYWxseSBwcm9qZWN0ZWQgbWFya3MuXG4gICAqL1xuICBsYXRpdHVkZT86IEZpZWxkRGVmPEY+O1xuXG4gIC8qKlxuICAgKiBMb25naXR1ZGUtMiBwb3NpdGlvbiBmb3IgZ2VvZ3JhcGhpY2FsbHkgcHJvamVjdGVkIHJhbmdlZCBgXCJhcmVhXCJgLCBgXCJiYXJcImAsIGBcInJlY3RcImAsIGFuZCAgYFwicnVsZVwiYC5cbiAgICovXG4gIGxvbmdpdHVkZTI/OiBGaWVsZERlZjxGPjtcblxuICAvKipcbiAgICogTGF0aXR1ZGUtMiBwb3NpdGlvbiBmb3IgZ2VvZ3JhcGhpY2FsbHkgcHJvamVjdGVkIHJhbmdlZCBgXCJhcmVhXCJgLCBgXCJiYXJcImAsIGBcInJlY3RcImAsIGFuZCAgYFwicnVsZVwiYC5cbiAgICovXG4gIGxhdGl0dWRlMj86IEZpZWxkRGVmPEY+O1xuXG4gIC8qKlxuICAgKiBDb2xvciBvZiB0aGUgbWFya3Mg4oCTIGVpdGhlciBmaWxsIG9yIHN0cm9rZSBjb2xvciBiYXNlZCBvbiAgdGhlIGBmaWxsZWRgIHByb3BlcnR5IG9mIG1hcmsgZGVmaW5pdGlvbi5cbiAgICogQnkgZGVmYXVsdCwgYGNvbG9yYCByZXByZXNlbnRzIGZpbGwgY29sb3IgZm9yIGBcImFyZWFcImAsIGBcImJhclwiYCwgYFwidGlja1wiYCxcbiAgICogYFwidGV4dFwiYCwgYFwidHJhaWxcImAsIGBcImNpcmNsZVwiYCwgYW5kIGBcInNxdWFyZVwiYCAvIHN0cm9rZSBjb2xvciBmb3IgYFwibGluZVwiYCBhbmQgYFwicG9pbnRcImAuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBJZiB1bmRlZmluZWQsIHRoZSBkZWZhdWx0IGNvbG9yIGRlcGVuZHMgb24gW21hcmsgY29uZmlnXShjb25maWcuaHRtbCNtYXJrKSdzIGBjb2xvcmAgcHJvcGVydHkuXG4gICAqXG4gICAqIF9Ob3RlOl9cbiAgICogMSkgRm9yIGZpbmUtZ3JhaW5lZCBjb250cm9sIG92ZXIgYm90aCBmaWxsIGFuZCBzdHJva2UgY29sb3JzIG9mIHRoZSBtYXJrcywgcGxlYXNlIHVzZSB0aGUgYGZpbGxgIGFuZCBgc3Ryb2tlYCBjaGFubmVscy4gIElmIGVpdGhlciBgZmlsbGAgb3IgYHN0cm9rZWAgY2hhbm5lbCBpcyBzcGVjaWZpZWQsIGBjb2xvcmAgY2hhbm5lbCB3aWxsIGJlIGlnbm9yZWQuXG4gICAqIDIpIFNlZSB0aGUgc2NhbGUgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBjdXN0b21pemluZyBbY29sb3Igc2NoZW1lXShzY2FsZS5odG1sI3NjaGVtZSkuXG4gICAqL1xuICBjb2xvcj86IEZpZWxkRGVmV2l0aENvbmRpdGlvbjxNYXJrUHJvcEZpZWxkRGVmPEY+PiB8IFZhbHVlRGVmV2l0aENvbmRpdGlvbjxNYXJrUHJvcEZpZWxkRGVmPEY+PjtcblxuICAvKipcbiAgICogRmlsbCBjb2xvciBvZiB0aGUgbWFya3MuXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBJZiB1bmRlZmluZWQsIHRoZSBkZWZhdWx0IGNvbG9yIGRlcGVuZHMgb24gW21hcmsgY29uZmlnXShjb25maWcuaHRtbCNtYXJrKSdzIGBjb2xvcmAgcHJvcGVydHkuXG4gICAqXG4gICAqIF9Ob3RlOl8gV2hlbiB1c2luZyBgZmlsbGAgY2hhbm5lbCwgYGNvbG9yIGAgY2hhbm5lbCB3aWxsIGJlIGlnbm9yZWQuIFRvIGN1c3RvbWl6ZSBib3RoIGZpbGwgYW5kIHN0cm9rZSwgcGxlYXNlIHVzZSBgZmlsbGAgYW5kIGBzdHJva2VgIGNoYW5uZWxzIChub3QgYGZpbGxgIGFuZCBgY29sb3JgKS5cbiAgICovXG4gIGZpbGw/OiBGaWVsZERlZldpdGhDb25kaXRpb248TWFya1Byb3BGaWVsZERlZjxGPj4gfCBWYWx1ZURlZldpdGhDb25kaXRpb248TWFya1Byb3BGaWVsZERlZjxGPj47XG5cblxuICAvKipcbiAgICogU3Ryb2tlIGNvbG9yIG9mIHRoZSBtYXJrcy5cbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIElmIHVuZGVmaW5lZCwgdGhlIGRlZmF1bHQgY29sb3IgZGVwZW5kcyBvbiBbbWFyayBjb25maWddKGNvbmZpZy5odG1sI21hcmspJ3MgYGNvbG9yYCBwcm9wZXJ0eS5cbiAgICpcbiAgICogX05vdGU6XyBXaGVuIHVzaW5nIGBzdHJva2VgIGNoYW5uZWwsIGBjb2xvciBgIGNoYW5uZWwgd2lsbCBiZSBpZ25vcmVkLiBUbyBjdXN0b21pemUgYm90aCBzdHJva2UgYW5kIGZpbGwsIHBsZWFzZSB1c2UgYHN0cm9rZWAgYW5kIGBmaWxsYCBjaGFubmVscyAobm90IGBzdHJva2VgIGFuZCBgY29sb3JgKS5cbiAgICovXG4gIHN0cm9rZT86IEZpZWxkRGVmV2l0aENvbmRpdGlvbjxNYXJrUHJvcEZpZWxkRGVmPEY+PiB8IFZhbHVlRGVmV2l0aENvbmRpdGlvbjxNYXJrUHJvcEZpZWxkRGVmPEY+PjtcblxuXG4gIC8qKlxuICAgKiBPcGFjaXR5IG9mIHRoZSBtYXJrcyDigJMgZWl0aGVyIGNhbiBiZSBhIHZhbHVlIG9yIGEgcmFuZ2UuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBJZiB1bmRlZmluZWQsIHRoZSBkZWZhdWx0IG9wYWNpdHkgZGVwZW5kcyBvbiBbbWFyayBjb25maWddKGNvbmZpZy5odG1sI21hcmspJ3MgYG9wYWNpdHlgIHByb3BlcnR5LlxuICAgKi9cbiAgb3BhY2l0eT86IEZpZWxkRGVmV2l0aENvbmRpdGlvbjxNYXJrUHJvcEZpZWxkRGVmPEY+PiB8IFZhbHVlRGVmV2l0aENvbmRpdGlvbjxNYXJrUHJvcEZpZWxkRGVmPEY+PjtcblxuICAvKipcbiAgICogU2l6ZSBvZiB0aGUgbWFyay5cbiAgICogLSBGb3IgYFwicG9pbnRcImAsIGBcInNxdWFyZVwiYCBhbmQgYFwiY2lyY2xlXCJgLCDigJMgdGhlIHN5bWJvbCBzaXplLCBvciBwaXhlbCBhcmVhIG9mIHRoZSBtYXJrLlxuICAgKiAtIEZvciBgXCJiYXJcImAgYW5kIGBcInRpY2tcImAg4oCTIHRoZSBiYXIgYW5kIHRpY2sncyBzaXplLlxuICAgKiAtIEZvciBgXCJ0ZXh0XCJgIOKAkyB0aGUgdGV4dCdzIGZvbnQgc2l6ZS5cbiAgICogLSBTaXplIGlzIHVuc3VwcG9ydGVkIGZvciBgXCJsaW5lXCJgLCBgXCJhcmVhXCJgLCBhbmQgYFwicmVjdFwiYC4gKFVzZSBgXCJ0cmFpbFwiYCBpbnN0ZWFkIG9mIGxpbmUgd2l0aCB2YXJ5aW5nIHNpemUpXG4gICAqL1xuICBzaXplPzogRmllbGREZWZXaXRoQ29uZGl0aW9uPE1hcmtQcm9wRmllbGREZWY8Rj4+IHwgVmFsdWVEZWZXaXRoQ29uZGl0aW9uPE1hcmtQcm9wRmllbGREZWY8Rj4+O1xuXG4gIC8qKlxuICAgKiBGb3IgYHBvaW50YCBtYXJrcyB0aGUgc3VwcG9ydGVkIHZhbHVlcyBhcmVcbiAgICogYFwiY2lyY2xlXCJgIChkZWZhdWx0KSwgYFwic3F1YXJlXCJgLCBgXCJjcm9zc1wiYCwgYFwiZGlhbW9uZFwiYCwgYFwidHJpYW5nbGUtdXBcImAsXG4gICAqIG9yIGBcInRyaWFuZ2xlLWRvd25cImAsIG9yIGVsc2UgYSBjdXN0b20gU1ZHIHBhdGggc3RyaW5nLlxuICAgKiBGb3IgYGdlb3NoYXBlYCBtYXJrcyBpdCBzaG91bGQgYmUgYSBmaWVsZCBkZWZpbml0aW9uIG9mIHRoZSBnZW9qc29uIGRhdGFcbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIElmIHVuZGVmaW5lZCwgdGhlIGRlZmF1bHQgc2hhcGUgZGVwZW5kcyBvbiBbbWFyayBjb25maWddKGNvbmZpZy5odG1sI3BvaW50LWNvbmZpZykncyBgc2hhcGVgIHByb3BlcnR5LlxuICAgKi9cbiAgc2hhcGU/OiBGaWVsZERlZldpdGhDb25kaXRpb248TWFya1Byb3BGaWVsZERlZjxGPj4gfCBWYWx1ZURlZldpdGhDb25kaXRpb248TWFya1Byb3BGaWVsZERlZjxGPj47IC8vIFRPRE86IG1heWJlIGRpc3Rpbmd1aXNoIG9yZGluYWwtb25seVxuXG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGxldmVscyBvZiBkZXRhaWwgZm9yIGdyb3VwaW5nIGRhdGEgaW4gYWdncmVnYXRlIHZpZXdzIGFuZFxuICAgKiBpbiBsaW5lLCB0cmFpbCwgYW5kIGFyZWEgbWFya3Mgd2l0aG91dCBtYXBwaW5nIGRhdGEgdG8gYSBzcGVjaWZpYyB2aXN1YWwgY2hhbm5lbC5cbiAgICovXG4gIGRldGFpbD86IEZpZWxkRGVmPEY+IHwgRmllbGREZWY8Rj5bXTtcblxuICAvKipcbiAgICogQSBkYXRhIGZpZWxkIHRvIHVzZSBhcyBhIHVuaXF1ZSBrZXkgZm9yIGRhdGEgYmluZGluZy4gV2hlbiBhIHZpc3VhbGl6YXRpb27igJlzIGRhdGEgaXMgdXBkYXRlZCwgdGhlIGtleSB2YWx1ZSB3aWxsIGJlIHVzZWQgdG8gbWF0Y2ggZGF0YSBlbGVtZW50cyB0byBleGlzdGluZyBtYXJrIGluc3RhbmNlcy4gVXNlIGEga2V5IGNoYW5uZWwgdG8gZW5hYmxlIG9iamVjdCBjb25zdGFuY3kgZm9yIHRyYW5zaXRpb25zIG92ZXIgZHluYW1pYyBkYXRhLlxuICAgKi9cbiAga2V5PzogRmllbGREZWY8Rj47XG5cbiAgLyoqXG4gICAqIFRleHQgb2YgdGhlIGB0ZXh0YCBtYXJrLlxuICAgKi9cbiAgdGV4dD86IEZpZWxkRGVmV2l0aENvbmRpdGlvbjxUZXh0RmllbGREZWY8Rj4+IHwgVmFsdWVEZWZXaXRoQ29uZGl0aW9uPFRleHRGaWVsZERlZjxGPj47XG5cbiAgLyoqXG4gICAqIFRoZSB0b29sdGlwIHRleHQgdG8gc2hvdyB1cG9uIG1vdXNlIGhvdmVyLlxuICAgKi9cbiAgdG9vbHRpcD86IEZpZWxkRGVmV2l0aENvbmRpdGlvbjxUZXh0RmllbGREZWY8Rj4+IHwgVmFsdWVEZWZXaXRoQ29uZGl0aW9uPFRleHRGaWVsZERlZjxGPj4gfCBUZXh0RmllbGREZWY8Rj5bXTtcblxuICAvKipcbiAgICogQSBVUkwgdG8gbG9hZCB1cG9uIG1vdXNlIGNsaWNrLlxuICAgKi9cbiAgaHJlZj86IEZpZWxkRGVmV2l0aENvbmRpdGlvbjxGaWVsZERlZjxGPj4gfCBWYWx1ZURlZldpdGhDb25kaXRpb248RmllbGREZWY8Rj4+O1xuXG4gIC8qKlxuICAgKiBPcmRlciBvZiB0aGUgbWFya3MuXG4gICAqIC0gRm9yIHN0YWNrZWQgbWFya3MsIHRoaXMgYG9yZGVyYCBjaGFubmVsIGVuY29kZXMgW3N0YWNrIG9yZGVyXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL3N0YWNrLmh0bWwjb3JkZXIpLlxuICAgKiAtIEZvciBsaW5lIGFuZCB0cmFpbCBtYXJrcywgdGhpcyBgb3JkZXJgIGNoYW5uZWwgZW5jb2RlcyBvcmRlciBvZiBkYXRhIHBvaW50cyBpbiB0aGUgbGluZXMuIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgY3JlYXRpbmcgW2EgY29ubmVjdGVkIHNjYXR0ZXJwbG90XShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9leGFtcGxlcy9jb25uZWN0ZWRfc2NhdHRlcnBsb3QuaHRtbCkuICBTZXR0aW5nIGBvcmRlcmAgdG8gYHtcInZhbHVlXCI6IG51bGx9YCBtYWtlcyB0aGUgbGluZSBtYXJrcyB1c2UgdGhlIG9yaWdpbmFsIG9yZGVyIGluIHRoZSBkYXRhIHNvdXJjZXMuXG4gICAqIC0gT3RoZXJ3aXNlLCB0aGlzIGBvcmRlcmAgY2hhbm5lbCBlbmNvZGVzIGxheWVyIG9yZGVyIG9mIHRoZSBtYXJrcy5cbiAgICpcbiAgICogX19Ob3RlX186IEluIGFnZ3JlZ2F0ZSBwbG90cywgYG9yZGVyYCBmaWVsZCBzaG91bGQgYmUgYGFnZ3JlZ2F0ZWBkIHRvIGF2b2lkIGNyZWF0aW5nIGFkZGl0aW9uYWwgYWdncmVnYXRpb24gZ3JvdXBpbmcuXG4gICAqL1xuICBvcmRlcj86IE9yZGVyRmllbGREZWY8Rj4gfCBPcmRlckZpZWxkRGVmPEY+W10gfCBWYWx1ZURlZjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbmNvZGluZ1dpdGhGYWNldDxGPiBleHRlbmRzIEVuY29kaW5nPEY+LCBGYWNldE1hcHBpbmc8Rj4ge31cblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5uZWxIYXNGaWVsZChlbmNvZGluZzogRW5jb2RpbmdXaXRoRmFjZXQ8RmllbGQ+LCBjaGFubmVsOiBDaGFubmVsKTogYm9vbGVhbiB7XG4gIGNvbnN0IGNoYW5uZWxEZWYgPSBlbmNvZGluZyAmJiBlbmNvZGluZ1tjaGFubmVsXTtcbiAgaWYgKGNoYW5uZWxEZWYpIHtcbiAgICBpZiAoaXNBcnJheShjaGFubmVsRGVmKSkge1xuICAgICAgcmV0dXJuIHNvbWUoY2hhbm5lbERlZiwgKGZpZWxkRGVmKSA9PiAhIWZpZWxkRGVmLmZpZWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGlzRmllbGREZWYoY2hhbm5lbERlZikgfHwgaGFzQ29uZGl0aW9uYWxGaWVsZERlZihjaGFubmVsRGVmKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FnZ3JlZ2F0ZShlbmNvZGluZzogRW5jb2RpbmdXaXRoRmFjZXQ8RmllbGQ+KSB7XG4gIHJldHVybiBzb21lKENIQU5ORUxTLCAoY2hhbm5lbCkgPT4ge1xuICAgIGlmIChjaGFubmVsSGFzRmllbGQoZW5jb2RpbmcsIGNoYW5uZWwpKSB7XG4gICAgICBjb25zdCBjaGFubmVsRGVmID0gZW5jb2RpbmdbY2hhbm5lbF07XG4gICAgICBpZiAoaXNBcnJheShjaGFubmVsRGVmKSkge1xuICAgICAgICByZXR1cm4gc29tZShjaGFubmVsRGVmLCAoZmllbGREZWYpID0+ICEhZmllbGREZWYuYWdncmVnYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGZpZWxkRGVmID0gZ2V0RmllbGREZWYoY2hhbm5lbERlZik7XG4gICAgICAgIHJldHVybiBmaWVsZERlZiAmJiAhIWZpZWxkRGVmLmFnZ3JlZ2F0ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nOiBFbmNvZGluZzxzdHJpbmc+LCBtYXJrOiBNYXJrKTogRW5jb2Rpbmc8c3RyaW5nPiB7XG4gICByZXR1cm4ga2V5cyhlbmNvZGluZykucmVkdWNlKChub3JtYWxpemVkRW5jb2Rpbmc6IEVuY29kaW5nPHN0cmluZz4sIGNoYW5uZWw6IENoYW5uZWwgfCBzdHJpbmcpID0+IHtcbiAgICBpZiAoIWlzQ2hhbm5lbChjaGFubmVsKSkge1xuICAgICAgLy8gRHJvcCBpbnZhbGlkIGNoYW5uZWxcbiAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLmludmFsaWRFbmNvZGluZ0NoYW5uZWwoY2hhbm5lbCkpO1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRFbmNvZGluZztcbiAgICB9XG5cbiAgICBpZiAoIXN1cHBvcnRNYXJrKGNoYW5uZWwsIG1hcmspKSB7XG4gICAgICAvLyBEcm9wIHVuc3VwcG9ydGVkIGNoYW5uZWxcblxuICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuaW5jb21wYXRpYmxlQ2hhbm5lbChjaGFubmVsLCBtYXJrKSk7XG4gICAgICByZXR1cm4gbm9ybWFsaXplZEVuY29kaW5nO1xuICAgIH1cblxuICAgIC8vIERyb3AgbGluZSdzIHNpemUgaWYgdGhlIGZpZWxkIGlzIGFnZ3JlZ2F0ZWQuXG4gICAgaWYgKGNoYW5uZWwgPT09ICdzaXplJyAmJiBtYXJrID09PSAnbGluZScpIHtcbiAgICAgIGNvbnN0IGZpZWxkRGVmID0gZ2V0RmllbGREZWYoZW5jb2RpbmdbY2hhbm5lbF0pO1xuICAgICAgaWYgKGZpZWxkRGVmICYmIGZpZWxkRGVmLmFnZ3JlZ2F0ZSkge1xuICAgICAgICBsb2cud2Fybihsb2cubWVzc2FnZS5MSU5FX1dJVEhfVkFSWUlOR19TSVpFKTtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRFbmNvZGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEcm9wIGNvbG9yIGlmIGVpdGhlciBmaWxsIG9yIHN0cm9rZSBpcyBzcGVjaWZpZWRcbiAgICAgaWYgKGNoYW5uZWwgPT09ICdjb2xvcicgJiYgKCdmaWxsJyBpbiBlbmNvZGluZyB8fCAnc3Ryb2tlJyBpbiBlbmNvZGluZykgKSB7XG4gICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuZHJvcHBpbmdDb2xvcignZW5jb2RpbmcnLCB7ZmlsbDogJ2ZpbGwnIGluIGVuY29kaW5nLCBzdHJva2U6ICdzdHJva2UnIGluIGVuY29kaW5nfSkpO1xuICAgICAgIHJldHVybiBub3JtYWxpemVkRW5jb2Rpbmc7XG4gICAgfVxuXG4gICAgY29uc3QgY2hhbm5lbERlZiA9IGVuY29kaW5nW2NoYW5uZWxdO1xuICAgIGlmIChcbiAgICAgIGNoYW5uZWwgPT09ICdkZXRhaWwnIHx8XG4gICAgICAoY2hhbm5lbCA9PT0gJ29yZGVyJyAmJiAhaXNBcnJheShjaGFubmVsRGVmKSAmJiAhaXNWYWx1ZURlZihjaGFubmVsRGVmKSkgfHxcbiAgICAgIChjaGFubmVsID09PSAndG9vbHRpcCcgJiYgaXNBcnJheShjaGFubmVsRGVmKSlcbiAgICApIHtcbiAgICAgIGlmIChjaGFubmVsRGVmKSB7XG4gICAgICAgIC8vIEFycmF5IG9mIGZpZWxkRGVmcyBmb3IgZGV0YWlsIGNoYW5uZWwgKG9yIHByb2R1Y3Rpb24gcnVsZSlcbiAgICAgICAgbm9ybWFsaXplZEVuY29kaW5nW2NoYW5uZWxdID0gKGlzQXJyYXkoY2hhbm5lbERlZikgPyBjaGFubmVsRGVmIDogW2NoYW5uZWxEZWZdKVxuICAgICAgICAgIC5yZWR1Y2UoKGRlZnM6IEZpZWxkRGVmPHN0cmluZz5bXSwgZmllbGREZWY6IEZpZWxkRGVmPHN0cmluZz4pID0+IHtcbiAgICAgICAgICAgIGlmICghaXNGaWVsZERlZihmaWVsZERlZikpIHtcbiAgICAgICAgICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuZW1wdHlGaWVsZERlZihmaWVsZERlZiwgY2hhbm5lbCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGVmcy5wdXNoKG5vcm1hbGl6ZUZpZWxkRGVmKGZpZWxkRGVmLCBjaGFubmVsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVmcztcbiAgICAgICAgICB9LCBbXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcblxuICAgICAgY29uc3QgZmllbGREZWYgPSBnZXRGaWVsZERlZihlbmNvZGluZ1tjaGFubmVsXSk7XG4gICAgICBpZiAoZmllbGREZWYgJiYgY29udGFpbnMoW1R5cGUuTEFUSVRVREUsIFR5cGUuTE9OR0lUVURFXSwgZmllbGREZWYudHlwZSkpIHtcbiAgICAgICAgY29uc3Qge1tjaGFubmVsXTogXywgLi4ubmV3RW5jb2Rpbmd9ID0gbm9ybWFsaXplZEVuY29kaW5nO1xuICAgICAgICBjb25zdCBuZXdDaGFubmVsID0gY2hhbm5lbCA9PT0gJ3gnID8gJ2xvbmdpdHVkZScgOlxuICAgICAgICAgIGNoYW5uZWwgPT09ICd5JyA/ICdsYXRpdHVkZScgOlxuICAgICAgICAgIGNoYW5uZWwgPT09ICd4MicgPyAnbG9uZ2l0dWRlMicgOlxuICAgICAgICAgIGNoYW5uZWwgPT09ICd5MicgPyAnbGF0aXR1ZGUyJyA6IHVuZGVmaW5lZDtcbiAgICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UubGF0TG9uZ0RlcHJlY2F0ZWQoY2hhbm5lbCwgZmllbGREZWYudHlwZSwgbmV3Q2hhbm5lbCkpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLm5ld0VuY29kaW5nLFxuICAgICAgICAgIFtuZXdDaGFubmVsXToge1xuICAgICAgICAgICAgLi4ubm9ybWFsaXplKGZpZWxkRGVmIGFzIGFueSwgY2hhbm5lbCksXG4gICAgICAgICAgICB0eXBlOiAncXVhbnRpdGF0aXZlJ1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0ZpZWxkRGVmKGNoYW5uZWxEZWYpICYmICFpc1ZhbHVlRGVmKGNoYW5uZWxEZWYpICYmICFpc0NvbmRpdGlvbmFsRGVmKGNoYW5uZWxEZWYpKSB7XG4gICAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLmVtcHR5RmllbGREZWYoY2hhbm5lbERlZiwgY2hhbm5lbCkpO1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplZEVuY29kaW5nO1xuICAgICAgfVxuICAgICAgbm9ybWFsaXplZEVuY29kaW5nW2NoYW5uZWxdID0gbm9ybWFsaXplKGNoYW5uZWxEZWYgYXMgQ2hhbm5lbERlZjxzdHJpbmc+LCBjaGFubmVsKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRFbmNvZGluZztcbiAgfSwge30pO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JhbmdlZChlbmNvZGluZzogRW5jb2RpbmdXaXRoRmFjZXQ8YW55Pikge1xuICByZXR1cm4gZW5jb2RpbmcgJiYgKCghIWVuY29kaW5nLnggJiYgISFlbmNvZGluZy54MikgfHwgKCEhZW5jb2RpbmcueSAmJiAhIWVuY29kaW5nLnkyKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWVsZERlZnMoZW5jb2Rpbmc6IEVuY29kaW5nV2l0aEZhY2V0PEZpZWxkPik6IEZpZWxkRGVmPEZpZWxkPltdIHtcbiAgY29uc3QgYXJyOiBGaWVsZERlZjxGaWVsZD5bXSA9IFtdO1xuICBDSEFOTkVMUy5mb3JFYWNoKGZ1bmN0aW9uKGNoYW5uZWwpIHtcbiAgICBpZiAoY2hhbm5lbEhhc0ZpZWxkKGVuY29kaW5nLCBjaGFubmVsKSkge1xuICAgICAgY29uc3QgY2hhbm5lbERlZiA9IGVuY29kaW5nW2NoYW5uZWxdO1xuICAgICAgKGlzQXJyYXkoY2hhbm5lbERlZikgPyBjaGFubmVsRGVmIDogW2NoYW5uZWxEZWZdKS5mb3JFYWNoKChkZWYpID0+IHtcbiAgICAgICAgaWYgKGlzRmllbGREZWYoZGVmKSkge1xuICAgICAgICAgIGFyci5wdXNoKGRlZik7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFzQ29uZGl0aW9uYWxGaWVsZERlZihkZWYpKSB7XG4gICAgICAgICAgYXJyLnB1c2goZGVmLmNvbmRpdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JFYWNoKG1hcHBpbmc6IGFueSxcbiAgICBmOiAoZmQ6IEZpZWxkRGVmPHN0cmluZz4sIGM6IENoYW5uZWwpID0+IHZvaWQsXG4gICAgdGhpc0FyZz86IGFueSkge1xuICBpZiAoIW1hcHBpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKGNvbnN0IGNoYW5uZWwgb2Yga2V5cyhtYXBwaW5nKSkge1xuICAgIGlmIChpc0FycmF5KG1hcHBpbmdbY2hhbm5lbF0pKSB7XG4gICAgICBtYXBwaW5nW2NoYW5uZWxdLmZvckVhY2goZnVuY3Rpb24oY2hhbm5lbERlZjogQ2hhbm5lbERlZjxzdHJpbmc+KSB7XG4gICAgICAgIGYuY2FsbCh0aGlzQXJnLCBjaGFubmVsRGVmLCBjaGFubmVsKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmLmNhbGwodGhpc0FyZywgbWFwcGluZ1tjaGFubmVsXSwgY2hhbm5lbCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2U8VCwgVSBleHRlbmRzIHtbayBpbiBDaGFubmVsXT86IGFueX0+KG1hcHBpbmc6IFUsXG4gICAgZjogKGFjYzogYW55LCBmZDogRmllbGREZWY8c3RyaW5nPiwgYzogQ2hhbm5lbCkgPT4gVSxcbiAgICBpbml0OiBULCB0aGlzQXJnPzogYW55KSB7XG4gIGlmICghbWFwcGluZykge1xuICAgIHJldHVybiBpbml0O1xuICB9XG5cbiAgcmV0dXJuIGtleXMobWFwcGluZykucmVkdWNlKChyLCBjaGFubmVsKSA9PiB7XG4gICAgY29uc3QgbWFwID0gbWFwcGluZ1tjaGFubmVsXTtcbiAgICBpZiAoaXNBcnJheShtYXApKSB7XG4gICAgICByZXR1cm4gbWFwLnJlZHVjZSgocjE6IFQsIGNoYW5uZWxEZWY6IENoYW5uZWxEZWY8c3RyaW5nPikgPT4ge1xuICAgICAgICByZXR1cm4gZi5jYWxsKHRoaXNBcmcsIHIxLCBjaGFubmVsRGVmLCBjaGFubmVsKTtcbiAgICAgIH0sIHIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZi5jYWxsKHRoaXNBcmcsIHIsIG1hcCwgY2hhbm5lbCk7XG4gICAgfVxuICB9LCBpbml0KTtcbn1cbiJdfQ==","export function getMarkSpecificConfigMixins(markSpecificConfig, channel) {\n    var value = markSpecificConfig[channel];\n    return value !== undefined ? (_a = {}, _a[channel] = { value: value }, _a) : {};\n    var _a;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvc2l0ZW1hcmsvY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sc0NBQXNDLGtCQUE4QixFQUFFLE9BQTJCO0lBQ3JHLElBQU0sS0FBSyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFDLE9BQU8sS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLFdBQUUsR0FBQyxPQUFPLElBQUcsRUFBQyxLQUFLLE9BQUEsRUFBQyxNQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7O0FBQ3pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05vblBvc2l0aW9uQ2hhbm5lbH0gZnJvbSAnLi4vY2hhbm5lbCc7XG5pbXBvcnQge01hcmtDb25maWd9IGZyb20gJy4uL21hcmsnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWFya1NwZWNpZmljQ29uZmlnTWl4aW5zKG1hcmtTcGVjaWZpY0NvbmZpZzogTWFya0NvbmZpZywgY2hhbm5lbDogTm9uUG9zaXRpb25DaGFubmVsKSB7XG4gIGNvbnN0IHZhbHVlID0gbWFya1NwZWNpZmljQ29uZmlnW2NoYW5uZWxdO1xuICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHtbY2hhbm5lbF06IHt2YWx1ZX19IDoge307XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { isNumber } from 'vega-util';\nimport { reduce } from '../encoding';\nimport { forEach } from './../encoding';\nimport { isContinuous, isFieldDef, vgField } from './../fielddef';\nimport * as log from './../log';\nimport { getMarkSpecificConfigMixins } from './common';\nexport var BOXPLOT = 'box-plot';\nexport function isBoxPlotDef(mark) {\n    return !!mark['type'];\n}\nexport var BOXPLOT_STYLES = ['boxWhisker', 'box', 'boxMid'];\nexport var VL_ONLY_BOXPLOT_CONFIG_PROPERTY_INDEX = {\n    box: ['size', 'color', 'extent'],\n    boxWhisker: ['color'],\n    boxMid: ['color']\n};\nvar supportedChannels = ['x', 'y', 'color', 'detail', 'opacity', 'size'];\nexport function filterUnsupportedChannels(spec) {\n    return tslib_1.__assign({}, spec, { encoding: reduce(spec.encoding, function (newEncoding, fieldDef, channel) {\n            if (supportedChannels.indexOf(channel) > -1) {\n                newEncoding[channel] = fieldDef;\n            }\n            else {\n                log.warn(log.message.incompatibleChannel(channel, BOXPLOT));\n            }\n            return newEncoding;\n        }, {}) });\n}\nexport function normalizeBoxPlot(spec, config) {\n    spec = filterUnsupportedChannels(spec);\n    // TODO: use selection\n    var mark = spec.mark, encoding = spec.encoding, selection = spec.selection, _p = spec.projection, outerSpec = tslib_1.__rest(spec, [\"mark\", \"encoding\", \"selection\", \"projection\"]);\n    var kIQRScalar = undefined;\n    if (isNumber(config.box.extent)) {\n        kIQRScalar = config.box.extent;\n    }\n    if (isBoxPlotDef(mark)) {\n        if (mark.extent) {\n            if (mark.extent === 'min-max') {\n                kIQRScalar = undefined;\n            }\n        }\n    }\n    var orient = boxOrient(spec);\n    var _a = boxParams(spec, orient, kIQRScalar), transform = _a.transform, continuousAxisChannelDef = _a.continuousAxisChannelDef, continuousAxis = _a.continuousAxis, encodingWithoutContinuousAxis = _a.encodingWithoutContinuousAxis;\n    var color = encodingWithoutContinuousAxis.color, size = encodingWithoutContinuousAxis.size, encodingWithoutSizeColorAndContinuousAxis = tslib_1.__rest(encodingWithoutContinuousAxis, [\"color\", \"size\"]);\n    // Size encoding or the default config.box.size is applied to box and boxMid\n    var sizeMixins = size ? { size: size } : getMarkSpecificConfigMixins(config.box, 'size');\n    var continuousAxisScaleAndAxis = {};\n    if (continuousAxisChannelDef.scale) {\n        continuousAxisScaleAndAxis['scale'] = continuousAxisChannelDef.scale;\n    }\n    if (continuousAxisChannelDef.axis) {\n        continuousAxisScaleAndAxis['axis'] = continuousAxisChannelDef.axis;\n    }\n    return tslib_1.__assign({}, outerSpec, { transform: transform, layer: [\n            {\n                mark: {\n                    type: 'rule',\n                    style: 'boxWhisker'\n                },\n                encoding: tslib_1.__assign((_b = {}, _b[continuousAxis] = tslib_1.__assign({ field: 'lower_whisker_' + continuousAxisChannelDef.field, type: continuousAxisChannelDef.type }, continuousAxisScaleAndAxis), _b[continuousAxis + '2'] = {\n                    field: 'lower_box_' + continuousAxisChannelDef.field,\n                    type: continuousAxisChannelDef.type\n                }, _b), encodingWithoutSizeColorAndContinuousAxis, getMarkSpecificConfigMixins(config.boxWhisker, 'color'))\n            }, {\n                mark: {\n                    type: 'rule',\n                    style: 'boxWhisker'\n                },\n                encoding: tslib_1.__assign((_c = {}, _c[continuousAxis] = {\n                    field: 'upper_box_' + continuousAxisChannelDef.field,\n                    type: continuousAxisChannelDef.type\n                }, _c[continuousAxis + '2'] = {\n                    field: 'upper_whisker_' + continuousAxisChannelDef.field,\n                    type: continuousAxisChannelDef.type\n                }, _c), encodingWithoutSizeColorAndContinuousAxis, getMarkSpecificConfigMixins(config.boxWhisker, 'color'))\n            },\n            tslib_1.__assign({}, (selection ? { selection: selection } : {}), { mark: {\n                    type: 'bar',\n                    style: 'box'\n                }, encoding: tslib_1.__assign((_d = {}, _d[continuousAxis] = {\n                    field: 'lower_box_' + continuousAxisChannelDef.field,\n                    type: continuousAxisChannelDef.type\n                }, _d[continuousAxis + '2'] = {\n                    field: 'upper_box_' + continuousAxisChannelDef.field,\n                    type: continuousAxisChannelDef.type\n                }, _d), encodingWithoutContinuousAxis, (encodingWithoutContinuousAxis.color ? {} : getMarkSpecificConfigMixins(config.box, 'color')), sizeMixins) }),\n            {\n                mark: {\n                    type: 'tick',\n                    style: 'boxMid'\n                },\n                encoding: tslib_1.__assign((_e = {}, _e[continuousAxis] = {\n                    field: 'mid_box_' + continuousAxisChannelDef.field,\n                    type: continuousAxisChannelDef.type\n                }, _e), encodingWithoutSizeColorAndContinuousAxis, getMarkSpecificConfigMixins(config.boxMid, 'color'), sizeMixins)\n            }\n        ] });\n    var _b, _c, _d, _e;\n}\nfunction boxOrient(spec) {\n    var mark = spec.mark, encoding = spec.encoding, _p = spec.projection, _outerSpec = tslib_1.__rest(spec, [\"mark\", \"encoding\", \"projection\"]);\n    if (isFieldDef(encoding.x) && isContinuous(encoding.x)) {\n        // x is continuous\n        if (isFieldDef(encoding.y) && isContinuous(encoding.y)) {\n            // both x and y are continuous\n            if (encoding.x.aggregate === undefined && encoding.y.aggregate === BOXPLOT) {\n                return 'vertical';\n            }\n            else if (encoding.y.aggregate === undefined && encoding.x.aggregate === BOXPLOT) {\n                return 'horizontal';\n            }\n            else if (encoding.x.aggregate === BOXPLOT && encoding.y.aggregate === BOXPLOT) {\n                throw new Error('Both x and y cannot have aggregate');\n            }\n            else {\n                if (isBoxPlotDef(mark) && mark.orient) {\n                    return mark.orient;\n                }\n                // default orientation = vertical\n                return 'vertical';\n            }\n        }\n        // x is continuous but y is not\n        return 'horizontal';\n    }\n    else if (isFieldDef(encoding.y) && isContinuous(encoding.y)) {\n        // y is continuous but x is not\n        return 'vertical';\n    }\n    else {\n        // Neither x nor y is continuous.\n        throw new Error('Need a valid continuous axis for boxplots');\n    }\n}\nfunction boxContinousAxis(spec, orient) {\n    var mark = spec.mark, encoding = spec.encoding, _p = spec.projection, _outerSpec = tslib_1.__rest(spec, [\"mark\", \"encoding\", \"projection\"]);\n    var continuousAxisChannelDef;\n    var continuousAxis;\n    if (orient === 'vertical') {\n        continuousAxis = 'y';\n        continuousAxisChannelDef = encoding.y; // Safe to cast because if y is not continuous fielddef, the orient would not be vertical.\n    }\n    else {\n        continuousAxis = 'x';\n        continuousAxisChannelDef = encoding.x; // Safe to cast because if x is not continuous fielddef, the orient would not be horizontal.\n    }\n    if (continuousAxisChannelDef && continuousAxisChannelDef.aggregate) {\n        var aggregate = continuousAxisChannelDef.aggregate, continuousAxisWithoutAggregate = tslib_1.__rest(continuousAxisChannelDef, [\"aggregate\"]);\n        if (aggregate !== BOXPLOT) {\n            log.warn(\"Continuous axis should not have customized aggregation function \" + aggregate);\n        }\n        continuousAxisChannelDef = continuousAxisWithoutAggregate;\n    }\n    return {\n        continuousAxisChannelDef: continuousAxisChannelDef,\n        continuousAxis: continuousAxis\n    };\n}\nfunction boxParams(spec, orient, kIQRScalar) {\n    var _a = boxContinousAxis(spec, orient), continuousAxisChannelDef = _a.continuousAxisChannelDef, continuousAxis = _a.continuousAxis;\n    var encoding = spec.encoding;\n    var isMinMax = kIQRScalar === undefined;\n    var aggregate = [\n        {\n            op: 'q1',\n            field: continuousAxisChannelDef.field,\n            as: 'lower_box_' + continuousAxisChannelDef.field\n        },\n        {\n            op: 'q3',\n            field: continuousAxisChannelDef.field,\n            as: 'upper_box_' + continuousAxisChannelDef.field\n        },\n        {\n            op: 'median',\n            field: continuousAxisChannelDef.field,\n            as: 'mid_box_' + continuousAxisChannelDef.field\n        }\n    ];\n    var postAggregateCalculates = [];\n    aggregate.push({\n        op: 'min',\n        field: continuousAxisChannelDef.field,\n        as: (isMinMax ? 'lower_whisker_' : 'min_') + continuousAxisChannelDef.field\n    });\n    aggregate.push({\n        op: 'max',\n        field: continuousAxisChannelDef.field,\n        as: (isMinMax ? 'upper_whisker_' : 'max_') + continuousAxisChannelDef.field\n    });\n    if (!isMinMax) {\n        postAggregateCalculates = [\n            {\n                calculate: \"datum.upper_box_\" + continuousAxisChannelDef.field + \" - datum.lower_box_\" + continuousAxisChannelDef.field,\n                as: 'iqr_' + continuousAxisChannelDef.field\n            },\n            {\n                calculate: \"min(datum.upper_box_\" + continuousAxisChannelDef.field + \" + datum.iqr_\" + continuousAxisChannelDef.field + \" * \" + kIQRScalar + \", datum.max_\" + continuousAxisChannelDef.field + \")\",\n                as: 'upper_whisker_' + continuousAxisChannelDef.field\n            },\n            {\n                calculate: \"max(datum.lower_box_\" + continuousAxisChannelDef.field + \" - datum.iqr_\" + continuousAxisChannelDef.field + \" * \" + kIQRScalar + \", datum.min_\" + continuousAxisChannelDef.field + \")\",\n                as: 'lower_whisker_' + continuousAxisChannelDef.field\n            }\n        ];\n    }\n    var groupby = [];\n    var bins = [];\n    var timeUnits = [];\n    var encodingWithoutContinuousAxis = {};\n    forEach(encoding, function (channelDef, channel) {\n        if (channel === continuousAxis) {\n            // Skip continuous axis as we already handle it separately\n            return;\n        }\n        if (isFieldDef(channelDef)) {\n            if (channelDef.aggregate && channelDef.aggregate !== BOXPLOT) {\n                aggregate.push({\n                    op: channelDef.aggregate,\n                    field: channelDef.field,\n                    as: vgField(channelDef)\n                });\n            }\n            else if (channelDef.aggregate === undefined) {\n                var transformedField = vgField(channelDef);\n                // Add bin or timeUnit transform if applicable\n                var bin = channelDef.bin;\n                if (bin) {\n                    var field = channelDef.field;\n                    bins.push({ bin: bin, field: field, as: transformedField });\n                }\n                else if (channelDef.timeUnit) {\n                    var timeUnit = channelDef.timeUnit, field = channelDef.field;\n                    timeUnits.push({ timeUnit: timeUnit, field: field, as: transformedField });\n                }\n                groupby.push(transformedField);\n            }\n            // now the field should refer to post-transformed field instead\n            encodingWithoutContinuousAxis[channel] = {\n                field: vgField(channelDef),\n                type: channelDef.type\n            };\n        }\n        else {\n            // For value def, just copy\n            encodingWithoutContinuousAxis[channel] = encoding[channel];\n        }\n    });\n    return {\n        transform: [].concat(bins, timeUnits, [{ aggregate: aggregate, groupby: groupby }], postAggregateCalculates),\n        continuousAxisChannelDef: continuousAxisChannelDef,\n        continuousAxis: continuousAxis,\n        encodingWithoutContinuousAxis: encodingWithoutContinuousAxis\n    };\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isMarkDef } from './../mark';\nimport { BOXPLOT, BOXPLOT_STYLES, normalizeBoxPlot, VL_ONLY_BOXPLOT_CONFIG_PROPERTY_INDEX } from './boxplot';\nimport { ERRORBAR, normalizeErrorBar } from './errorbar';\n/**\n * Registry index for all composite mark's normalizer\n */\nvar normalizerRegistry = {};\nexport function add(mark, normalizer) {\n    normalizerRegistry[mark] = normalizer;\n}\nexport function remove(mark) {\n    delete normalizerRegistry[mark];\n}\nexport var COMPOSITE_MARK_STYLES = BOXPLOT_STYLES;\nexport var VL_ONLY_COMPOSITE_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = tslib_1.__assign({}, VL_ONLY_BOXPLOT_CONFIG_PROPERTY_INDEX);\nadd(BOXPLOT, normalizeBoxPlot);\nadd(ERRORBAR, normalizeErrorBar);\n/**\n * Transform a unit spec with composite mark into a normal layer spec.\n */\nexport function normalize(\n// This GenericUnitSpec has any as Encoding because unit specs with composite mark can have additional encoding channels.\nspec, config) {\n    var mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n    var normalizer = normalizerRegistry[mark];\n    if (normalizer) {\n        return normalizer(spec, config);\n    }\n    throw new Error(\"Invalid mark type \\\"\" + mark + \"\\\"\");\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9zaXRlbWFyay9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFVLFNBQVMsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUU3QyxPQUFPLEVBQUMsT0FBTyxFQUFFLGNBQWMsRUFBbUMsZ0JBQWdCLEVBQUUscUNBQXFDLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDNUksT0FBTyxFQUFDLFFBQVEsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLFlBQVksQ0FBQztBQU12RDs7R0FFRztBQUNILElBQU0sa0JBQWtCLEdBQXFDLEVBQUUsQ0FBQztBQUVoRSxNQUFNLGNBQWMsSUFBWSxFQUFFLFVBQTBCO0lBQzFELGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxpQkFBaUIsSUFBWTtJQUNqQyxPQUFPLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFRRCxNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FBRyxjQUFjLENBQUM7QUFLcEQsTUFBTSxDQUFDLElBQU0scURBQXFELHdCQUM3RCxxQ0FBcUMsQ0FDekMsQ0FBQztBQUVGLEdBQUcsQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUMvQixHQUFHLENBQUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFFakM7O0dBRUc7QUFDSCxNQUFNO0FBQ0YseUhBQXlIO0FBQ3pILElBQW1DLEVBQ25DLE1BQWM7SUFHaEIsSUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDL0QsSUFBTSxVQUFVLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsSUFBSSxVQUFVLEVBQUU7UUFDZCxPQUFPLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDakM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUFzQixJQUFJLE9BQUcsQ0FBQyxDQUFDO0FBQ2pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbmZpZ30gZnJvbSAnLi8uLi9jb25maWcnO1xuaW1wb3J0IHtBbnlNYXJrLCBpc01hcmtEZWZ9IGZyb20gJy4vLi4vbWFyayc7XG5pbXBvcnQge0dlbmVyaWNVbml0U3BlYywgTm9ybWFsaXplZExheWVyU3BlY30gZnJvbSAnLi8uLi9zcGVjJztcbmltcG9ydCB7Qk9YUExPVCwgQk9YUExPVF9TVFlMRVMsIEJveFBsb3RDb25maWdNaXhpbnMsIEJveFBsb3REZWYsIG5vcm1hbGl6ZUJveFBsb3QsIFZMX09OTFlfQk9YUExPVF9DT05GSUdfUFJPUEVSVFlfSU5ERVh9IGZyb20gJy4vYm94cGxvdCc7XG5pbXBvcnQge0VSUk9SQkFSLCBub3JtYWxpemVFcnJvckJhcn0gZnJvbSAnLi9lcnJvcmJhcic7XG5cblxuZXhwb3J0IHtCb3hQbG90Q29uZmlnfSBmcm9tICcuL2JveHBsb3QnO1xuZXhwb3J0IHR5cGUgVW5pdE5vcm1hbGl6ZXIgPSAoc3BlYzogR2VuZXJpY1VuaXRTcGVjPGFueSwgYW55PiwgY29uZmlnOiBDb25maWcpPT4gTm9ybWFsaXplZExheWVyU3BlYztcblxuLyoqXG4gKiBSZWdpc3RyeSBpbmRleCBmb3IgYWxsIGNvbXBvc2l0ZSBtYXJrJ3Mgbm9ybWFsaXplclxuICovXG5jb25zdCBub3JtYWxpemVyUmVnaXN0cnk6IHtbbWFyazogc3RyaW5nXTogVW5pdE5vcm1hbGl6ZXJ9ID0ge307XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQobWFyazogc3RyaW5nLCBub3JtYWxpemVyOiBVbml0Tm9ybWFsaXplcikge1xuICBub3JtYWxpemVyUmVnaXN0cnlbbWFya10gPSBub3JtYWxpemVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKG1hcms6IHN0cmluZykge1xuICBkZWxldGUgbm9ybWFsaXplclJlZ2lzdHJ5W21hcmtdO1xufVxuXG5leHBvcnQgdHlwZSBDb21wb3NpdGVNYXJrID0gQk9YUExPVCB8IEVSUk9SQkFSO1xuXG5leHBvcnQgdHlwZSBDb21wb3NpdGVNYXJrRGVmID0gQm94UGxvdERlZjtcblxuZXhwb3J0IHR5cGUgQ29tcG9zaXRlQWdncmVnYXRlID0gQk9YUExPVDtcblxuZXhwb3J0IGNvbnN0IENPTVBPU0lURV9NQVJLX1NUWUxFUyA9IEJPWFBMT1RfU1RZTEVTO1xuZXhwb3J0IHR5cGUgQ29tcG9zaXRlTWFya1N0eWxlID0gdHlwZW9mIENPTVBPU0lURV9NQVJLX1NUWUxFU1swXTtcblxuZXhwb3J0IGludGVyZmFjZSBDb21wb3NpdGVNYXJrQ29uZmlnTWl4aW5zIGV4dGVuZHMgQm94UGxvdENvbmZpZ01peGlucyB7fVxuXG5leHBvcnQgY29uc3QgVkxfT05MWV9DT01QT1NJVEVfTUFSS19TUEVDSUZJQ19DT05GSUdfUFJPUEVSVFlfSU5ERVggPSB7XG4gIC4uLlZMX09OTFlfQk9YUExPVF9DT05GSUdfUFJPUEVSVFlfSU5ERVhcbn07XG5cbmFkZChCT1hQTE9ULCBub3JtYWxpemVCb3hQbG90KTtcbmFkZChFUlJPUkJBUiwgbm9ybWFsaXplRXJyb3JCYXIpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSBhIHVuaXQgc3BlYyB3aXRoIGNvbXBvc2l0ZSBtYXJrIGludG8gYSBub3JtYWwgbGF5ZXIgc3BlYy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShcbiAgICAvLyBUaGlzIEdlbmVyaWNVbml0U3BlYyBoYXMgYW55IGFzIEVuY29kaW5nIGJlY2F1c2UgdW5pdCBzcGVjcyB3aXRoIGNvbXBvc2l0ZSBtYXJrIGNhbiBoYXZlIGFkZGl0aW9uYWwgZW5jb2RpbmcgY2hhbm5lbHMuXG4gICAgc3BlYzogR2VuZXJpY1VuaXRTcGVjPGFueSwgQW55TWFyaz4sXG4gICAgY29uZmlnOiBDb25maWdcbiAgKTogTm9ybWFsaXplZExheWVyU3BlYyB7XG5cbiAgY29uc3QgbWFyayA9IGlzTWFya0RlZihzcGVjLm1hcmspID8gc3BlYy5tYXJrLnR5cGUgOiBzcGVjLm1hcms7XG4gIGNvbnN0IG5vcm1hbGl6ZXIgPSBub3JtYWxpemVyUmVnaXN0cnlbbWFya107XG4gIGlmIChub3JtYWxpemVyKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZXIoc3BlYywgY29uZmlnKTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBtYXJrIHR5cGUgXCIke21hcmt9XCJgKTtcbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nexport var ERRORBAR = 'error-bar';\nexport function normalizeErrorBar(spec) {\n    // TODO: use selection\n    var _m = spec.mark, _sel = spec.selection, _p = spec.projection, encoding = spec.encoding, outerSpec = tslib_1.__rest(spec, [\"mark\", \"selection\", \"projection\", \"encoding\"]);\n    var _s = encoding.size, encodingWithoutSize = tslib_1.__rest(encoding, [\"size\"]);\n    var _x2 = encoding.x2, _y2 = encoding.y2, encodingWithoutX2Y2 = tslib_1.__rest(encoding, [\"x2\", \"y2\"]);\n    var _x = encodingWithoutX2Y2.x, _y = encodingWithoutX2Y2.y, encodingWithoutX_X2_Y_Y2 = tslib_1.__rest(encodingWithoutX2Y2, [\"x\", \"y\"]);\n    if (!encoding.x2 && !encoding.y2) {\n        throw new Error('Neither x2 or y2 provided');\n    }\n    return tslib_1.__assign({}, outerSpec, { layer: [\n            {\n                mark: 'rule',\n                encoding: encodingWithoutSize\n            }, {\n                mark: 'tick',\n                encoding: encodingWithoutX2Y2\n            }, {\n                mark: 'tick',\n                encoding: encoding.x2 ? tslib_1.__assign({ x: encoding.x2, y: encoding.y }, encodingWithoutX_X2_Y_Y2) : tslib_1.__assign({ x: encoding.x, y: encoding.y2 }, encodingWithoutX_X2_Y_Y2)\n            }\n        ] });\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JiYXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9zaXRlbWFyay9lcnJvcmJhci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBS0EsTUFBTSxDQUFDLElBQU0sUUFBUSxHQUFnQixXQUFXLENBQUM7QUFHakQsTUFBTSw0QkFBNEIsSUFBZ0Q7SUFDaEYsc0JBQXNCO0lBQ2YsSUFBQSxjQUFRLEVBQUUscUJBQWUsRUFBRSxvQkFBYyxFQUFFLHdCQUFRLEVBQUUsaUZBQVksQ0FBUztJQUMxRSxJQUFBLGtCQUFRLEVBQUUsd0RBQXNCLENBQWE7SUFDN0MsSUFBQSxpQkFBTyxFQUFFLGlCQUFPLEVBQUUsNERBQXNCLENBQWE7SUFDckQsSUFBQSwwQkFBSyxFQUFFLDBCQUFLLEVBQUUsMEVBQTJCLENBQXdCO0lBRXhFLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRTtRQUNoQyxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7S0FDOUM7SUFFRCw0QkFDSyxTQUFTLElBQ1osS0FBSyxFQUFFO1lBQ0w7Z0JBQ0UsSUFBSSxFQUFFLE1BQU07Z0JBQ1osUUFBUSxFQUFFLG1CQUFtQjthQUM5QixFQUFDO2dCQUNBLElBQUksRUFBRSxNQUFNO2dCQUNaLFFBQVEsRUFBRSxtQkFBbUI7YUFDOUIsRUFBRTtnQkFDRCxJQUFJLEVBQUUsTUFBTTtnQkFDWixRQUFRLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLG9CQUNyQixDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsRUFDZCxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFDVix3QkFBd0IsRUFDM0IsQ0FBQyxvQkFDRCxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFDYixDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsSUFDWCx3QkFBd0IsQ0FDNUI7YUFDRjtTQUNGLElBQ0Q7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGaWVsZH0gZnJvbSAnLi4vZmllbGRkZWYnO1xuaW1wb3J0IHtFbmNvZGluZ30gZnJvbSAnLi8uLi9lbmNvZGluZyc7XG5pbXBvcnQge0dlbmVyaWNVbml0U3BlYywgTm9ybWFsaXplZExheWVyU3BlY30gZnJvbSAnLi8uLi9zcGVjJztcblxuXG5leHBvcnQgY29uc3QgRVJST1JCQVI6ICdlcnJvci1iYXInID0gJ2Vycm9yLWJhcic7XG5leHBvcnQgdHlwZSBFUlJPUkJBUiA9IHR5cGVvZiBFUlJPUkJBUjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUVycm9yQmFyKHNwZWM6IEdlbmVyaWNVbml0U3BlYzxFbmNvZGluZzxGaWVsZD4sIEVSUk9SQkFSPik6IE5vcm1hbGl6ZWRMYXllclNwZWMge1xuICAvLyBUT0RPOiB1c2Ugc2VsZWN0aW9uXG4gIGNvbnN0IHttYXJrOiBfbSwgc2VsZWN0aW9uOiBfc2VsLCBwcm9qZWN0aW9uOiBfcCwgZW5jb2RpbmcsIC4uLm91dGVyU3BlY30gPSBzcGVjO1xuICBjb25zdCB7c2l6ZTogX3MsIC4uLmVuY29kaW5nV2l0aG91dFNpemV9ID0gZW5jb2Rpbmc7XG4gIGNvbnN0IHt4MjogX3gyLCB5MjogX3kyLCAuLi5lbmNvZGluZ1dpdGhvdXRYMlkyfSA9IGVuY29kaW5nO1xuICBjb25zdCB7eDogX3gsIHk6IF95LCAuLi5lbmNvZGluZ1dpdGhvdXRYX1gyX1lfWTJ9ID0gZW5jb2RpbmdXaXRob3V0WDJZMjtcblxuICBpZiAoIWVuY29kaW5nLngyICYmICFlbmNvZGluZy55Mikge1xuICAgIHRocm93IG5ldyBFcnJvcignTmVpdGhlciB4MiBvciB5MiBwcm92aWRlZCcpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5vdXRlclNwZWMsXG4gICAgbGF5ZXI6IFtcbiAgICAgIHtcbiAgICAgICAgbWFyazogJ3J1bGUnLFxuICAgICAgICBlbmNvZGluZzogZW5jb2RpbmdXaXRob3V0U2l6ZVxuICAgICAgfSx7IC8vIExvd2VyIHRpY2tcbiAgICAgICAgbWFyazogJ3RpY2snLFxuICAgICAgICBlbmNvZGluZzogZW5jb2RpbmdXaXRob3V0WDJZMlxuICAgICAgfSwgeyAvLyBVcHBlciB0aWNrXG4gICAgICAgIG1hcms6ICd0aWNrJyxcbiAgICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLngyID8ge1xuICAgICAgICAgIHg6IGVuY29kaW5nLngyLFxuICAgICAgICAgIHk6IGVuY29kaW5nLnksXG4gICAgICAgICAgLi4uZW5jb2RpbmdXaXRob3V0WF9YMl9ZX1kyXG4gICAgICAgIH0gOiB7XG4gICAgICAgICAgeDogZW5jb2RpbmcueCxcbiAgICAgICAgICB5OiBlbmNvZGluZy55MixcbiAgICAgICAgICAuLi5lbmNvZGluZ1dpdGhvdXRYX1gyX1lfWTJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { toSet } from 'vega-util';\nimport { Channel, isColorChannel } from './channel';\nimport * as log from './log';\nimport { contains, flagKeys, keys } from './util';\nexport var ScaleType;\n(function (ScaleType) {\n    // Continuous - Quantitative\n    ScaleType.LINEAR = 'linear';\n    ScaleType.BIN_LINEAR = 'bin-linear';\n    ScaleType.LOG = 'log';\n    ScaleType.POW = 'pow';\n    ScaleType.SQRT = 'sqrt';\n    // Continuous - Time\n    ScaleType.TIME = 'time';\n    ScaleType.UTC = 'utc';\n    // sequential\n    ScaleType.SEQUENTIAL = 'sequential';\n    // Quantile, Quantize, threshold\n    ScaleType.QUANTILE = 'quantile';\n    ScaleType.QUANTIZE = 'quantize';\n    ScaleType.THRESHOLD = 'threshold';\n    ScaleType.ORDINAL = 'ordinal';\n    ScaleType.BIN_ORDINAL = 'bin-ordinal';\n    ScaleType.POINT = 'point';\n    ScaleType.BAND = 'band';\n})(ScaleType || (ScaleType = {}));\n/**\n * Index for scale categories -- only scale of the same categories can be merged together.\n * Current implementation is trying to be conservative and avoid merging scale type that might not work together\n */\nvar SCALE_CATEGORY_INDEX = {\n    linear: 'numeric',\n    log: 'numeric',\n    pow: 'numeric',\n    sqrt: 'numeric',\n    'bin-linear': 'bin-linear',\n    time: 'time',\n    utc: 'time',\n    sequential: 'sequential',\n    ordinal: 'ordinal',\n    'bin-ordinal': 'bin-ordinal',\n    point: 'ordinal-position',\n    band: 'ordinal-position'\n};\nexport var SCALE_TYPES = keys(SCALE_CATEGORY_INDEX);\n/**\n * Whether the two given scale types can be merged together.\n */\nexport function scaleCompatible(scaleType1, scaleType2) {\n    var scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];\n    var scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];\n    return scaleCategory1 === scaleCategory2 ||\n        (scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time') ||\n        (scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time');\n}\n/**\n * Index for scale precedence -- high score = higher priority for merging.\n */\nvar SCALE_PRECEDENCE_INDEX = {\n    // numeric\n    linear: 0,\n    log: 1,\n    pow: 1,\n    sqrt: 1,\n    // time\n    time: 0,\n    utc: 0,\n    // ordinal-position -- these have higher precedence than continuous scales as they support more types of data\n    point: 10,\n    band: 11,\n    // non grouped types\n    'bin-linear': 0,\n    sequential: 0,\n    ordinal: 0,\n    'bin-ordinal': 0,\n};\n/**\n * Return scale categories -- only scale of the same categories can be merged together.\n */\nexport function scaleTypePrecedence(scaleType) {\n    return SCALE_PRECEDENCE_INDEX[scaleType];\n}\nexport var CONTINUOUS_TO_CONTINUOUS_SCALES = ['linear', 'bin-linear', 'log', 'pow', 'sqrt', 'time', 'utc'];\nvar CONTINUOUS_TO_CONTINUOUS_INDEX = toSet(CONTINUOUS_TO_CONTINUOUS_SCALES);\nexport var CONTINUOUS_DOMAIN_SCALES = CONTINUOUS_TO_CONTINUOUS_SCALES.concat(['sequential' /* TODO add 'quantile', 'quantize', 'threshold'*/]);\nvar CONTINUOUS_DOMAIN_INDEX = toSet(CONTINUOUS_DOMAIN_SCALES);\nexport var DISCRETE_DOMAIN_SCALES = ['ordinal', 'bin-ordinal', 'point', 'band'];\nvar DISCRETE_DOMAIN_INDEX = toSet(DISCRETE_DOMAIN_SCALES);\nvar BIN_SCALES_INDEX = toSet(['bin-linear', 'bin-ordinal']);\nexport var TIME_SCALE_TYPES = ['time', 'utc'];\nexport function hasDiscreteDomain(type) {\n    return type in DISCRETE_DOMAIN_INDEX;\n}\nexport function isBinScale(type) {\n    return type in BIN_SCALES_INDEX;\n}\nexport function hasContinuousDomain(type) {\n    return type in CONTINUOUS_DOMAIN_INDEX;\n}\nexport function isContinuousToContinuous(type) {\n    return type in CONTINUOUS_TO_CONTINUOUS_INDEX;\n}\nexport var defaultScaleConfig = {\n    textXRangeStep: 90,\n    rangeStep: 21,\n    pointPadding: 0.5,\n    bandPaddingInner: 0.1,\n    facetSpacing: 16,\n    minBandSize: 2,\n    minFontSize: 8,\n    maxFontSize: 40,\n    minOpacity: 0.3,\n    maxOpacity: 0.8,\n    // FIXME: revise if these *can* become ratios of rangeStep\n    minSize: 9,\n    minStrokeWidth: 1,\n    maxStrokeWidth: 4\n};\nexport function isExtendedScheme(scheme) {\n    return scheme && !!scheme['name'];\n}\nexport function isSelectionDomain(domain) {\n    return domain && domain['selection'];\n}\nvar SCALE_PROPERTY_INDEX = {\n    type: 1,\n    domain: 1,\n    range: 1,\n    rangeStep: 1,\n    scheme: 1,\n    // Other properties\n    reverse: 1,\n    round: 1,\n    // quantitative / time\n    clamp: 1,\n    nice: 1,\n    // quantitative\n    base: 1,\n    exponent: 1,\n    interpolate: 1,\n    zero: 1,\n    // band/point\n    padding: 1,\n    paddingInner: 1,\n    paddingOuter: 1\n};\nexport var SCALE_PROPERTIES = flagKeys(SCALE_PROPERTY_INDEX);\nvar type = SCALE_PROPERTY_INDEX.type, domain = SCALE_PROPERTY_INDEX.domain, range = SCALE_PROPERTY_INDEX.range, rangeStep = SCALE_PROPERTY_INDEX.rangeStep, scheme = SCALE_PROPERTY_INDEX.scheme, NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX = tslib_1.__rest(SCALE_PROPERTY_INDEX, [\"type\", \"domain\", \"range\", \"rangeStep\", \"scheme\"]);\nexport var NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = flagKeys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);\nexport function scaleTypeSupportProperty(scaleType, propName) {\n    switch (propName) {\n        case 'type':\n        case 'domain':\n        case 'reverse':\n        case 'range':\n            return true;\n        case 'scheme':\n            return contains(['sequential', 'ordinal', 'bin-ordinal', 'quantile', 'quantize'], scaleType);\n        case 'interpolate':\n            // FIXME(https://github.com/vega/vega-lite/issues/2902) how about ordinal?\n            return contains(['linear', 'bin-linear', 'pow', 'log', 'sqrt', 'utc', 'time'], scaleType);\n        case 'round':\n            return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';\n        case 'padding':\n            return isContinuousToContinuous(scaleType) || contains(['point', 'band'], scaleType);\n        case 'paddingOuter':\n        case 'rangeStep':\n            return contains(['point', 'band'], scaleType);\n        case 'paddingInner':\n            return scaleType === 'band';\n        case 'clamp':\n            return isContinuousToContinuous(scaleType) || scaleType === 'sequential';\n        case 'nice':\n            return isContinuousToContinuous(scaleType) || scaleType === 'sequential' || scaleType === 'quantize';\n        case 'exponent':\n            return scaleType === 'pow';\n        case 'base':\n            return scaleType === 'log';\n        case 'zero':\n            return hasContinuousDomain(scaleType) && !contains([\n                'log',\n                'time', 'utc',\n                'bin-linear',\n                'threshold',\n                'quantile' // quantile depends on distribution so zero does not matter\n            ], scaleType);\n    }\n    /* istanbul ignore next: should never reach here*/\n    throw new Error(\"Invalid scale property \" + propName + \".\");\n}\n/**\n * Returns undefined if the input channel supports the input scale property name\n */\nexport function channelScalePropertyIncompatability(channel, propName) {\n    switch (propName) {\n        case 'interpolate':\n        case 'scheme':\n            if (!isColorChannel(channel)) {\n                return log.message.cannotUseScalePropertyWithNonColor(channel);\n            }\n            return undefined;\n        case 'type':\n        case 'domain':\n        case 'range':\n        case 'base':\n        case 'exponent':\n        case 'nice':\n        case 'padding':\n        case 'paddingInner':\n        case 'paddingOuter':\n        case 'rangeStep':\n        case 'reverse':\n        case 'round':\n        case 'clamp':\n        case 'zero':\n            return undefined; // GOOD!\n    }\n    /* istanbul ignore next: it should never reach here */\n    throw new Error(\"Invalid scale property \\\"\" + propName + \"\\\".\");\n}\nexport function channelSupportScaleType(channel, scaleType) {\n    switch (channel) {\n        case Channel.X:\n        case Channel.Y:\n        case Channel.SIZE: // TODO: size and opacity can support ordinal with more modification\n        case Channel.OPACITY:\n            // Although it generally doesn't make sense to use band with size and opacity,\n            // it can also work since we use band: 0.5 to get midpoint.\n            return isContinuousToContinuous(scaleType) || contains(['band', 'point'], scaleType);\n        case Channel.COLOR:\n        case Channel.FILL:\n        case Channel.STROKE:\n            return scaleType !== 'band'; // band does not make sense with color\n        case Channel.SHAPE:\n            return scaleType === 'ordinal'; // shape = lookup only\n    }\n    /* istanbul ignore next: it should never reach here */\n    return false;\n}\n//# sourceMappingURL=data:application/json;base64,","export var VL_ONLY_GUIDE_CONFIG = ['shortTimeLabels'];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ3VpZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkNBLE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUFnQyxDQUFDLGlCQUFpQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1ZhbHVlRGVmfSBmcm9tICcuL2ZpZWxkZGVmJztcbmltcG9ydCB7VmdFbmNvZGVDaGFubmVsfSBmcm9tICcuL3ZlZ2Euc2NoZW1hJztcblxuZXhwb3J0IGludGVyZmFjZSBUaXRsZU1peGlucyB7XG4gIC8qKlxuICAgKiBBIHRpdGxlIGZvciB0aGUgZmllbGQuIElmIGBudWxsYCwgdGhlIHRpdGxlIHdpbGwgYmUgcmVtb3ZlZC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fICBkZXJpdmVkIGZyb20gdGhlIGZpZWxkJ3MgbmFtZSBhbmQgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24gKGBhZ2dyZWdhdGVgLCBgYmluYCBhbmQgYHRpbWVVbml0YCkuICBJZiB0aGUgZmllbGQgaGFzIGFuIGFnZ3JlZ2F0ZSBmdW5jdGlvbiwgdGhlIGZ1bmN0aW9uIGlzIGRpc3BsYXllZCBhcyBwYXJ0IG9mIHRoZSB0aXRsZSAoZS5nLiwgYFwiU3VtIG9mIFByb2ZpdFwiYCkuIElmIHRoZSBmaWVsZCBpcyBiaW5uZWQgb3IgaGFzIGEgdGltZSB1bml0IGFwcGxpZWQsIHRoZSBhcHBsaWVkIGZ1bmN0aW9uIGlzIHNob3duIGluIHBhcmVudGhlc2VzIChlLmcuLCBgXCJQcm9maXQgKGJpbm5lZClcImAsIGBcIlRyYW5zYWN0aW9uIERhdGUgKHllYXItbW9udGgpXCJgKS4gIE90aGVyd2lzZSwgdGhlIHRpdGxlIGlzIHNpbXBseSB0aGUgZmllbGQgbmFtZS5cbiAgICpcbiAgICogX19Ob3Rlc19fOlxuICAgKlxuICAgKiAxKSBZb3UgY2FuIGN1c3RvbWl6ZSB0aGUgZGVmYXVsdCBmaWVsZCB0aXRsZSBmb3JtYXQgYnkgcHJvdmlkaW5nIHRoZSBbYGZpZWxkVGl0bGVgIHByb3BlcnR5IGluIHRoZSBbY29uZmlnXShjb25maWcuaHRtbCkgb3IgW2BmaWVsZFRpdGxlYCBmdW5jdGlvbiB2aWEgdGhlIGBjb21waWxlYCBmdW5jdGlvbidzIG9wdGlvbnNdKGNvbXBpbGUuaHRtbCNmaWVsZC10aXRsZSkuXG4gICAqXG4gICAqIDIpIElmIGJvdGggZmllbGQgZGVmaW5pdGlvbidzIGB0aXRsZWAgYW5kIGF4aXMsIGhlYWRlciwgb3IgbGVnZW5kIGB0aXRsZWAgYXJlIGRlZmluZWQsIGF4aXMvaGVhZGVyL2xlZ2VuZCB0aXRsZSB3aWxsIGJlIHVzZWQuXG4gICAqL1xuICB0aXRsZT86IHN0cmluZyB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR3VpZGUgZXh0ZW5kcyBUaXRsZU1peGlucyB7XG4gIC8qKlxuICAgKiBUaGUgZm9ybWF0dGluZyBwYXR0ZXJuIGZvciBsYWJlbHMuIFRoaXMgaXMgRDMncyBbbnVtYmVyIGZvcm1hdCBwYXR0ZXJuXShodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtZm9ybWF0I2xvY2FsZV9mb3JtYXQpIGZvciBxdWFudGl0YXRpdmUgZmllbGRzIGFuZCBEMydzIFt0aW1lIGZvcm1hdCBwYXR0ZXJuXShodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtdGltZS1mb3JtYXQjbG9jYWxlX2Zvcm1hdCkgZm9yIHRpbWUgZmllbGQuXG4gICAqXG4gICAqIFNlZSB0aGUgW2Zvcm1hdCBkb2N1bWVudGF0aW9uXShmb3JtYXQuaHRtbCkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyAgZGVyaXZlZCBmcm9tIFtudW1iZXJGb3JtYXRdKGNvbmZpZy5odG1sI2Zvcm1hdCkgY29uZmlnIGZvciBxdWFudGl0YXRpdmUgZmllbGRzIGFuZCBmcm9tIFt0aW1lRm9ybWF0XShjb25maWcuaHRtbCNmb3JtYXQpIGNvbmZpZyBmb3IgdGVtcG9yYWwgZmllbGRzLlxuICAgKi9cbiAgZm9ybWF0Pzogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBWbE9ubHlHdWlkZUNvbmZpZyB7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgbW9udGggbmFtZXMgYW5kIHdlZWtkYXkgbmFtZXMgc2hvdWxkIGJlIGFiYnJldmlhdGVkLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gIGBmYWxzZWBcbiAgICovXG4gIHNob3J0VGltZUxhYmVscz86IGJvb2xlYW47XG59XG5cblxuZXhwb3J0IHR5cGUgR3VpZGVFbmNvZGluZ0VudHJ5ID0ge1xuICBbayBpbiBWZ0VuY29kZUNoYW5uZWxdPzogVmFsdWVEZWY7XG59O1xuXG5leHBvcnQgY29uc3QgVkxfT05MWV9HVUlERV9DT05GSUc6IChrZXlvZiBWbE9ubHlHdWlkZUNvbmZpZylbXSA9IFsnc2hvcnRUaW1lTGFiZWxzJ107XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { flagKeys } from './util';\nexport var defaultLegendConfig = {};\nvar COMMON_LEGEND_PROPERTY_INDEX = {\n    entryPadding: 1,\n    format: 1,\n    offset: 1,\n    orient: 1,\n    padding: 1,\n    tickCount: 1,\n    title: 1,\n    type: 1,\n    values: 1,\n    zindex: 1\n};\nvar VG_LEGEND_PROPERTY_INDEX = tslib_1.__assign({}, COMMON_LEGEND_PROPERTY_INDEX, { \n    // channel scales\n    opacity: 1, shape: 1, stroke: 1, fill: 1, size: 1, \n    // encode\n    encode: 1 });\nexport var LEGEND_PROPERTIES = flagKeys(COMMON_LEGEND_PROPERTY_INDEX);\nexport var VG_LEGEND_PROPERTIES = flagKeys(VG_LEGEND_PROPERTY_INDEX);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xlZ2VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFPLFFBQVEsRUFBQyxNQUFNLFFBQVEsQ0FBQztBQXdFdEMsTUFBTSxDQUFDLElBQU0sbUJBQW1CLEdBQWlCLEVBQUUsQ0FBQztBQUVwRCxJQUFNLDRCQUE0QixHQUFvQztJQUNwRSxZQUFZLEVBQUUsQ0FBQztJQUNmLE1BQU0sRUFBRSxDQUFDO0lBQ1QsTUFBTSxFQUFFLENBQUM7SUFDVCxNQUFNLEVBQUUsQ0FBQztJQUNULE9BQU8sRUFBRSxDQUFDO0lBQ1YsU0FBUyxFQUFFLENBQUM7SUFDWixLQUFLLEVBQUUsQ0FBQztJQUNSLElBQUksRUFBRSxDQUFDO0lBQ1AsTUFBTSxFQUFFLENBQUM7SUFDVCxNQUFNLEVBQUUsQ0FBQztDQUNWLENBQUM7QUFFRixJQUFNLHdCQUF3Qix3QkFDekIsNEJBQTRCO0lBQy9CLGlCQUFpQjtJQUNqQixPQUFPLEVBQUUsQ0FBQyxFQUNWLEtBQUssRUFBRSxDQUFDLEVBQ1IsTUFBTSxFQUFFLENBQUMsRUFDVCxJQUFJLEVBQUUsQ0FBQyxFQUNQLElBQUksRUFBRSxDQUFDO0lBQ1AsU0FBUztJQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBRXhFLE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUFHLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEYXRlVGltZX0gZnJvbSAnLi9kYXRldGltZSc7XG5pbXBvcnQge0d1aWRlLCBHdWlkZUVuY29kaW5nRW50cnksIFZsT25seUd1aWRlQ29uZmlnfSBmcm9tICcuL2d1aWRlJztcbmltcG9ydCB7RmxhZywgZmxhZ0tleXN9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQge1ZnTGVnZW5kLCBWZ0xlZ2VuZEJhc2UsIFZnTGVnZW5kQ29uZmlnfSBmcm9tICcuL3ZlZ2Euc2NoZW1hJztcblxuXG5leHBvcnQgaW50ZXJmYWNlIExlZ2VuZENvbmZpZyBleHRlbmRzIFZnTGVnZW5kQ29uZmlnLCBWbE9ubHlHdWlkZUNvbmZpZyB7fVxuXG4vKipcbiAqIFByb3BlcnRpZXMgb2YgYSBsZWdlbmQgb3IgYm9vbGVhbiBmbGFnIGZvciBkZXRlcm1pbmluZyB3aGV0aGVyIHRvIHNob3cgaXQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGVnZW5kIGV4dGVuZHMgVmdMZWdlbmRCYXNlLCBHdWlkZSB7XG4gIC8qKlxuICAgKiBNYXJrIGRlZmluaXRpb25zIGZvciBjdXN0b20gbGVnZW5kIGVuY29kaW5nLlxuICAgKlxuICAgKiBAaGlkZVxuICAgKi9cbiAgZW5jb2Rpbmc/OiBMZWdlbmRFbmNvZGluZztcblxuICAvKipcbiAgICogVGhlIGRlc2lyZWQgbnVtYmVyIG9mIHRpY2sgdmFsdWVzIGZvciBxdWFudGl0YXRpdmUgbGVnZW5kcy5cbiAgICovXG4gIHRpY2tDb3VudD86IG51bWJlcjtcblxuICAvKipcbiAgICogRXhwbGljaXRseSBzZXQgdGhlIHZpc2libGUgbGVnZW5kIHZhbHVlcy5cbiAgICovXG4gIHZhbHVlcz86IG51bWJlcltdIHwgc3RyaW5nW10gfCBEYXRlVGltZVtdO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgbGVnZW5kLiBVc2UgYFwic3ltYm9sXCJgIHRvIGNyZWF0ZSBhIGRpc2NyZXRlIGxlZ2VuZCBhbmQgYFwiZ3JhZGllbnRcImAgZm9yIGEgY29udGludW91cyBjb2xvciBncmFkaWVudC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBcImdyYWRpZW50XCJgIGZvciBub24tYmlubmVkIHF1YW50aXRhdGl2ZSBmaWVsZHMgYW5kIHRlbXBvcmFsIGZpZWxkczsgYFwic3ltYm9sXCJgIG90aGVyd2lzZS5cbiAgICovXG4gIHR5cGU/OiAnc3ltYm9sJyB8ICdncmFkaWVudCc7XG5cbiAgLyoqXG4gICAqIEEgbm9uLXBvc2l0aXZlIGludGVnZXIgaW5kaWNhdGluZyB6LWluZGV4IG9mIHRoZSBsZWdlbmQuXG4gICAqIElmIHppbmRleCBpcyAwLCBsZWdlbmQgc2hvdWxkIGJlIGRyYXduIGJlaGluZCBhbGwgY2hhcnQgZWxlbWVudHMuXG4gICAqIFRvIHB1dCB0aGVtIGluIGZyb250LCB1c2UgemluZGV4ID0gMS5cbiAgICogQFRKUy10eXBlIGludGVnZXJcbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgemluZGV4PzogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBMZWdlbmRFbmNvZGluZyA9IHtcbiAgLyoqXG4gICAqIEN1c3RvbSBlbmNvZGluZyBmb3IgdGhlIGxlZ2VuZCBjb250YWluZXIuXG4gICAqIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgY3JlYXRpbmcgbGVnZW5kIHdpdGggY3VzdG9tIHgsIHkgcG9zaXRpb24uXG4gICAqL1xuICBsZWdlbmQ/OiBHdWlkZUVuY29kaW5nRW50cnk7XG5cbiAgLyoqXG4gICAqIEN1c3RvbSBlbmNvZGluZyBmb3IgdGhlIGxlZ2VuZCB0aXRsZSB0ZXh0IG1hcmsuXG4gICAqL1xuICB0aXRsZT86IEd1aWRlRW5jb2RpbmdFbnRyeTtcblxuICAvKipcbiAgICogQ3VzdG9tIGVuY29kaW5nIGZvciBsZWdlbmQgbGFiZWwgdGV4dCBtYXJrcy5cbiAgICovXG4gIGxhYmVscz86IEd1aWRlRW5jb2RpbmdFbnRyeTtcblxuICAvKipcbiAgICogQ3VzdG9tIGVuY29kaW5nIGZvciBsZWdlbmQgc3ltYm9sIG1hcmtzLlxuICAgKi9cbiAgc3ltYm9scz86IEd1aWRlRW5jb2RpbmdFbnRyeTtcblxuICAvKipcbiAgICogQ3VzdG9tIGVuY29kaW5nIGZvciBsZWdlbmQgZ3JhZGllbnQgZmlsbGVkIHJlY3QgbWFya3MuXG4gICAqL1xuICBncmFkaWVudD86IEd1aWRlRW5jb2RpbmdFbnRyeTtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0TGVnZW5kQ29uZmlnOiBMZWdlbmRDb25maWcgPSB7fTtcblxuY29uc3QgQ09NTU9OX0xFR0VORF9QUk9QRVJUWV9JTkRFWDogRmxhZzxrZXlvZiAoVmdMZWdlbmQgfCBMZWdlbmQpPiA9IHtcbiAgZW50cnlQYWRkaW5nOiAxLFxuICBmb3JtYXQ6IDEsXG4gIG9mZnNldDogMSxcbiAgb3JpZW50OiAxLFxuICBwYWRkaW5nOiAxLFxuICB0aWNrQ291bnQ6IDEsXG4gIHRpdGxlOiAxLFxuICB0eXBlOiAxLFxuICB2YWx1ZXM6IDEsXG4gIHppbmRleDogMVxufTtcblxuY29uc3QgVkdfTEVHRU5EX1BST1BFUlRZX0lOREVYOiBGbGFnPGtleW9mIFZnTGVnZW5kPiA9IHtcbiAgLi4uQ09NTU9OX0xFR0VORF9QUk9QRVJUWV9JTkRFWCxcbiAgLy8gY2hhbm5lbCBzY2FsZXNcbiAgb3BhY2l0eTogMSxcbiAgc2hhcGU6IDEsXG4gIHN0cm9rZTogMSxcbiAgZmlsbDogMSxcbiAgc2l6ZTogMSxcbiAgLy8gZW5jb2RlXG4gIGVuY29kZTogMVxufTtcblxuZXhwb3J0IGNvbnN0IExFR0VORF9QUk9QRVJUSUVTID0gZmxhZ0tleXMoQ09NTU9OX0xFR0VORF9QUk9QRVJUWV9JTkRFWCk7XG5cbmV4cG9ydCBjb25zdCBWR19MRUdFTkRfUFJPUEVSVElFUyA9IGZsYWdLZXlzKFZHX0xFR0VORF9QUk9QRVJUWV9JTkRFWCk7XG4iXX0=","export var SELECTION_ID = '_vgsid_';\nexport var defaultConfig = {\n    single: {\n        on: 'click',\n        fields: [SELECTION_ID],\n        resolve: 'global',\n        empty: 'all'\n    },\n    multi: {\n        on: 'click',\n        fields: [SELECTION_ID],\n        toggle: 'event.shiftKey',\n        resolve: 'global',\n        empty: 'all'\n    },\n    interval: {\n        on: '[mousedown, window:mouseup] > window:mousemove!',\n        encodings: ['x', 'y'],\n        translate: '[mousedown, window:mouseup] > window:mousemove!',\n        zoom: 'wheel!',\n        mark: { fill: '#333', fillOpacity: 0.125, stroke: 'white' },\n        resolve: 'global'\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDO0FBMk10QyxNQUFNLENBQUMsSUFBTSxhQUFhLEdBQW1CO0lBQzNDLE1BQU0sRUFBRTtRQUNOLEVBQUUsRUFBRSxPQUFPO1FBQ1gsTUFBTSxFQUFFLENBQUMsWUFBWSxDQUFDO1FBQ3RCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLEtBQUssRUFBRSxLQUFLO0tBQ2I7SUFDRCxLQUFLLEVBQUU7UUFDTCxFQUFFLEVBQUUsT0FBTztRQUNYLE1BQU0sRUFBRSxDQUFDLFlBQVksQ0FBQztRQUN0QixNQUFNLEVBQUUsZ0JBQWdCO1FBQ3hCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLEtBQUssRUFBRSxLQUFLO0tBQ2I7SUFDRCxRQUFRLEVBQUU7UUFDUixFQUFFLEVBQUUsaURBQWlEO1FBQ3JELFNBQVMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7UUFDckIsU0FBUyxFQUFFLGlEQUFpRDtRQUM1RCxJQUFJLEVBQUUsUUFBUTtRQUNkLElBQUksRUFBRSxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFDO1FBQ3pELE9BQU8sRUFBRSxRQUFRO0tBQ2xCO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2luZ2xlRGVmQ2hhbm5lbH0gZnJvbSAnLi9jaGFubmVsJztcbmltcG9ydCB7VmdCaW5kaW5nLCBWZ0V2ZW50U3RyZWFtfSBmcm9tICcuL3ZlZ2Euc2NoZW1hJztcblxuZXhwb3J0IGNvbnN0IFNFTEVDVElPTl9JRCA9ICdfdmdzaWRfJztcbmV4cG9ydCB0eXBlIFNlbGVjdGlvblR5cGUgPSAnc2luZ2xlJyB8ICdtdWx0aScgfCAnaW50ZXJ2YWwnO1xuZXhwb3J0IHR5cGUgU2VsZWN0aW9uUmVzb2x1dGlvbiA9ICdnbG9iYWwnIHwgJ3VuaW9uJyB8ICdpbnRlcnNlY3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VTZWxlY3Rpb25EZWYge1xuICAvKipcbiAgICogQSBbVmVnYSBldmVudCBzdHJlYW1dKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS9kb2NzL2V2ZW50LXN0cmVhbXMvKSAob2JqZWN0IG9yIHNlbGVjdG9yKSB0aGF0IHRyaWdnZXJzIHRoZSBzZWxlY3Rpb24uXG4gICAqIEZvciBpbnRlcnZhbCBzZWxlY3Rpb25zLCB0aGUgZXZlbnQgc3RyZWFtIG11c3Qgc3BlY2lmeSBhIFtzdGFydCBhbmQgZW5kXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EvZG9jcy9ldmVudC1zdHJlYW1zLyNiZXR3ZWVuLWZpbHRlcnMpLlxuICAgKi9cbiAgb24/OiBWZ0V2ZW50U3RyZWFtO1xuICAvKipcbiAgICogV2l0aCBsYXllcmVkIGFuZCBtdWx0aS12aWV3IGRpc3BsYXlzLCBhIHN0cmF0ZWd5IHRoYXQgZGV0ZXJtaW5lcyBob3dcbiAgICogc2VsZWN0aW9ucycgZGF0YSBxdWVyaWVzIGFyZSByZXNvbHZlZCB3aGVuIGFwcGxpZWQgaW4gYSBmaWx0ZXIgdHJhbnNmb3JtLFxuICAgKiBjb25kaXRpb25hbCBlbmNvZGluZyBydWxlLCBvciBzY2FsZSBkb21haW4uXG4gICAqXG4gICAqL1xuICByZXNvbHZlPzogU2VsZWN0aW9uUmVzb2x1dGlvbjtcblxuICAvLyBUT0RPKGh0dHBzOi8vZ2l0aHViLmNvbS92ZWdhL3ZlZ2EtbGl0ZS9pc3N1ZXMvMjU5NikuXG4gIC8vIHByZWRpY2F0ZT86IHN0cmluZztcbiAgLy8gZG9tYWluPzogU2VsZWN0aW9uRG9tYWluO1xuXG4gIC8vIFRyYW5zZm9ybXNcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgZW5jb2RpbmcgY2hhbm5lbHMuIFRoZSBjb3JyZXNwb25kaW5nIGRhdGEgZmllbGQgdmFsdWVzXG4gICAqIG11c3QgbWF0Y2ggZm9yIGEgZGF0YSB0dXBsZSB0byBmYWxsIHdpdGhpbiB0aGUgc2VsZWN0aW9uLlxuICAgKi9cbiAgZW5jb2RpbmdzPzogU2luZ2xlRGVmQ2hhbm5lbFtdO1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBmaWVsZCBuYW1lcyB3aG9zZSB2YWx1ZXMgbXVzdCBtYXRjaCBmb3IgYSBkYXRhIHR1cGxlIHRvXG4gICAqIGZhbGwgd2l0aGluIHRoZSBzZWxlY3Rpb24uXG4gICAqL1xuICBmaWVsZHM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCwgYWxsIGRhdGEgdmFsdWVzIGFyZSBjb25zaWRlcmVkIHRvIGxpZSB3aXRoaW4gYW4gZW1wdHkgc2VsZWN0aW9uLlxuICAgKiBXaGVuIHNldCB0byBgbm9uZWAsIGVtcHR5IHNlbGVjdGlvbnMgY29udGFpbiBubyBkYXRhIHZhbHVlcy5cbiAgICovXG4gIGVtcHR5PzogJ2FsbCcgfCAnbm9uZSc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2luZ2xlU2VsZWN0aW9uQ29uZmlnIGV4dGVuZHMgQmFzZVNlbGVjdGlvbkRlZiB7XG4gIC8qKlxuICAgKiBFc3RhYmxpc2ggYSB0d28td2F5IGJpbmRpbmcgYmV0d2VlbiBhIHNpbmdsZSBzZWxlY3Rpb24gYW5kIGlucHV0IGVsZW1lbnRzXG4gICAqIChhbHNvIGtub3duIGFzIGR5bmFtaWMgcXVlcnkgd2lkZ2V0cykuIEEgYmluZGluZyB0YWtlcyB0aGUgZm9ybSBvZlxuICAgKiBWZWdhJ3MgW2lucHV0IGVsZW1lbnQgYmluZGluZyBkZWZpbml0aW9uXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EvZG9jcy9zaWduYWxzLyNiaW5kKVxuICAgKiBvciBjYW4gYmUgYSBtYXBwaW5nIGJldHdlZW4gcHJvamVjdGVkIGZpZWxkL2VuY29kaW5ncyBhbmQgYmluZGluZyBkZWZpbml0aW9ucy5cbiAgICpcbiAgICogU2VlIHRoZSBbYmluZCB0cmFuc2Zvcm1dKGJpbmQuaHRtbCkgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICovXG4gIGJpbmQ/OiBWZ0JpbmRpbmcgfCB7W2tleTogc3RyaW5nXTogVmdCaW5kaW5nfTtcblxuICAvKipcbiAgICogV2hlbiB0cnVlLCBhbiBpbnZpc2libGUgdm9yb25vaSBkaWFncmFtIGlzIGNvbXB1dGVkIHRvIGFjY2VsZXJhdGUgZGlzY3JldGVcbiAgICogc2VsZWN0aW9uLiBUaGUgZGF0YSB2YWx1ZSBfbmVhcmVzdF8gdGhlIG1vdXNlIGN1cnNvciBpcyBhZGRlZCB0byB0aGUgc2VsZWN0aW9uLlxuICAgKlxuICAgKiBTZWUgdGhlIFtuZWFyZXN0IHRyYW5zZm9ybV0obmVhcmVzdC5odG1sKSBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgbmVhcmVzdD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTXVsdGlTZWxlY3Rpb25Db25maWcgZXh0ZW5kcyBCYXNlU2VsZWN0aW9uRGVmIHtcbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZXRoZXIgZGF0YSB2YWx1ZXMgc2hvdWxkIGJlIHRvZ2dsZWQgb3Igb25seSBldmVyIGluc2VydGVkIGludG9cbiAgICogbXVsdGkgc2VsZWN0aW9ucy4gQ2FuIGJlIGB0cnVlYCwgYGZhbHNlYCAoZm9yIGluc2VydGlvbiBvbmx5KSwgb3IgYVxuICAgKiBbVmVnYSBleHByZXNzaW9uXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EvZG9jcy9leHByZXNzaW9ucy8pLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYHRydWVgLCB3aGljaCBjb3JyZXNwb25kcyB0byBgZXZlbnQuc2hpZnRLZXlgIChpLmUuLFxuICAgKiBkYXRhIHZhbHVlcyBhcmUgdG9nZ2xlZCB3aGVuIGEgdXNlciBpbnRlcmFjdHMgd2l0aCB0aGUgc2hpZnQta2V5IHByZXNzZWQpLlxuICAgKlxuICAgKiBTZWUgdGhlIFt0b2dnbGUgdHJhbnNmb3JtXSh0b2dnbGUuaHRtbCkgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICovXG4gIHRvZ2dsZT86IHN0cmluZyB8IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgYW4gaW52aXNpYmxlIHZvcm9ub2kgZGlhZ3JhbSBpcyBjb21wdXRlZCB0byBhY2NlbGVyYXRlIGRpc2NyZXRlXG4gICAqIHNlbGVjdGlvbi4gVGhlIGRhdGEgdmFsdWUgX25lYXJlc3RfIHRoZSBtb3VzZSBjdXJzb3IgaXMgYWRkZWQgdG8gdGhlIHNlbGVjdGlvbi5cbiAgICpcbiAgICogU2VlIHRoZSBbbmVhcmVzdCB0cmFuc2Zvcm1dKG5lYXJlc3QuaHRtbCkgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICovXG4gIG5lYXJlc3Q/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJydXNoQ29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSBmaWxsIGNvbG9yIG9mIHRoZSBpbnRlcnZhbCBtYXJrLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYCMzMzMzMzNgXG4gICAqXG4gICAqL1xuICBmaWxsPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGZpbGwgb3BhY2l0eSBvZiB0aGUgaW50ZXJ2YWwgbWFyayAoYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEpLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYDAuMTI1YFxuICAgKi9cbiAgZmlsbE9wYWNpdHk/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgc3Ryb2tlIGNvbG9yIG9mIHRoZSBpbnRlcnZhbCBtYXJrLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYCNmZmZmZmZgXG4gICAqL1xuICBzdHJva2U/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgc3Ryb2tlIG9wYWNpdHkgb2YgdGhlIGludGVydmFsIG1hcmsgKGEgdmFsdWUgYmV0d2VlbiAwIGFuZCAxKS5cbiAgICovXG4gIHN0cm9rZU9wYWNpdHk/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgc3Ryb2tlIHdpZHRoIG9mIHRoZSBpbnRlcnZhbCBtYXJrLlxuICAgKi9cbiAgc3Ryb2tlV2lkdGg/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBhbHRlcm5hdGluZyBzdHJva2UgYW5kIHNwYWNlIGxlbmd0aHMsXG4gICAqIGZvciBjcmVhdGluZyBkYXNoZWQgb3IgZG90dGVkIGxpbmVzLlxuICAgKi9cbiAgc3Ryb2tlRGFzaD86IG51bWJlcltdO1xuICAvKipcbiAgICogVGhlIG9mZnNldCAoaW4gcGl4ZWxzKSB3aXRoIHdoaWNoIHRvIGJlZ2luIGRyYXdpbmcgdGhlIHN0cm9rZSBkYXNoIGFycmF5LlxuICAgKi9cbiAgc3Ryb2tlRGFzaE9mZnNldD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbnRlcnZhbFNlbGVjdGlvbkNvbmZpZyBleHRlbmRzIEJhc2VTZWxlY3Rpb25EZWYge1xuICAvKipcbiAgICogV2hlbiB0cnV0aHksIGFsbG93cyBhIHVzZXIgdG8gaW50ZXJhY3RpdmVseSBtb3ZlIGFuIGludGVydmFsIHNlbGVjdGlvblxuICAgKiBiYWNrLWFuZC1mb3J0aC4gQ2FuIGJlIGB0cnVlYCwgYGZhbHNlYCAodG8gZGlzYWJsZSBwYW5uaW5nKSwgb3IgYVxuICAgKiBbVmVnYSBldmVudCBzdHJlYW0gZGVmaW5pdGlvbl0oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhL2RvY3MvZXZlbnQtc3RyZWFtcy8pXG4gICAqIHdoaWNoIG11c3QgaW5jbHVkZSBhIHN0YXJ0IGFuZCBlbmQgZXZlbnQgdG8gdHJpZ2dlciBjb250aW51b3VzIHBhbm5pbmcuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgdHJ1ZWAsIHdoaWNoIGNvcnJlc3BvbmRzIHRvXG4gICAqIGBbbW91c2Vkb3duLCB3aW5kb3c6bW91c2V1cF0gPiB3aW5kb3c6bW91c2Vtb3ZlIWAgd2hpY2ggY29ycmVzcG9uZHMgdG9cbiAgICogY2xpY2tzIGFuZCBkcmFnZ2luZyB3aXRoaW4gYW4gaW50ZXJ2YWwgc2VsZWN0aW9uIHRvIHJlcG9zaXRpb24gaXQuXG4gICAqL1xuICB0cmFuc2xhdGU/OiBzdHJpbmcgfCBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBXaGVuIHRydXRoeSwgYWxsb3dzIGEgdXNlciB0byBpbnRlcmFjdGl2ZWx5IHJlc2l6ZSBhbiBpbnRlcnZhbCBzZWxlY3Rpb24uXG4gICAqIENhbiBiZSBgdHJ1ZWAsIGBmYWxzZWAgKHRvIGRpc2FibGUgem9vbWluZyksIG9yIGEgW1ZlZ2EgZXZlbnQgc3RyZWFtXG4gICAqIGRlZmluaXRpb25dKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS9kb2NzL2V2ZW50LXN0cmVhbXMvKS4gQ3VycmVudGx5LFxuICAgKiBvbmx5IGB3aGVlbGAgZXZlbnRzIGFyZSBzdXBwb3J0ZWQuXG4gICAqXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgdHJ1ZWAsIHdoaWNoIGNvcnJlc3BvbmRzIHRvIGB3aGVlbCFgLlxuICAgKi9cbiAgem9vbT86IHN0cmluZyB8IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEVzdGFibGlzaGVzIGEgdHdvLXdheSBiaW5kaW5nIGJldHdlZW4gdGhlIGludGVydmFsIHNlbGVjdGlvbiBhbmQgdGhlIHNjYWxlc1xuICAgKiB1c2VkIHdpdGhpbiB0aGUgc2FtZSB2aWV3LiBUaGlzIGFsbG93cyBhIHVzZXIgdG8gaW50ZXJhY3RpdmVseSBwYW4gYW5kXG4gICAqIHpvb20gdGhlIHZpZXcuXG4gICAqL1xuICBiaW5kPzogJ3NjYWxlcyc7XG5cbiAgLyoqXG4gICAqIEFuIGludGVydmFsIHNlbGVjdGlvbiBhbHNvIGFkZHMgYSByZWN0YW5nbGUgbWFyayB0byBkZXBpY3QgdGhlXG4gICAqIGV4dGVudHMgb2YgdGhlIGludGVydmFsLiBUaGUgYG1hcmtgIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIGN1c3RvbWl6ZSB0aGVcbiAgICogYXBwZWFyYW5jZSBvZiB0aGUgbWFyay5cbiAgICovXG4gIG1hcms/OiBCcnVzaENvbmZpZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaW5nbGVTZWxlY3Rpb24gZXh0ZW5kcyBTaW5nbGVTZWxlY3Rpb25Db25maWcge1xuICB0eXBlOiAnc2luZ2xlJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNdWx0aVNlbGVjdGlvbiBleHRlbmRzIE11bHRpU2VsZWN0aW9uQ29uZmlnIHtcbiAgdHlwZTogJ211bHRpJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbnRlcnZhbFNlbGVjdGlvbiBleHRlbmRzIEludGVydmFsU2VsZWN0aW9uQ29uZmlnIHtcbiAgdHlwZTogJ2ludGVydmFsJztcbn1cblxuZXhwb3J0IHR5cGUgU2VsZWN0aW9uRGVmID0gU2luZ2xlU2VsZWN0aW9uIHwgTXVsdGlTZWxlY3Rpb24gfCBJbnRlcnZhbFNlbGVjdGlvbjtcblxuZXhwb3J0IGludGVyZmFjZSBTZWxlY3Rpb25Db25maWcge1xuICAvKipcbiAgICogVGhlIGRlZmF1bHQgZGVmaW5pdGlvbiBmb3IgYSBbYHNpbmdsZWBdKHNlbGVjdGlvbi5odG1sI3R5cGUpIHNlbGVjdGlvbi4gQWxsIHByb3BlcnRpZXMgYW5kIHRyYW5zZm9ybWF0aW9uc1xuICAgKiAgZm9yIGEgc2luZ2xlIHNlbGVjdGlvbiBkZWZpbml0aW9uIChleGNlcHQgYHR5cGVgKSBtYXkgYmUgc3BlY2lmaWVkIGhlcmUuXG4gICAqXG4gICAqIEZvciBpbnN0YW5jZSwgc2V0dGluZyBgc2luZ2xlYCB0byBge1wib25cIjogXCJkYmxjbGlja1wifWAgcG9wdWxhdGVzIHNpbmdsZSBzZWxlY3Rpb25zIG9uIGRvdWJsZS1jbGljayBieSBkZWZhdWx0LlxuICAgKi9cbiAgc2luZ2xlPzogU2luZ2xlU2VsZWN0aW9uQ29uZmlnO1xuICAvKipcbiAgICogVGhlIGRlZmF1bHQgZGVmaW5pdGlvbiBmb3IgYSBbYG11bHRpYF0oc2VsZWN0aW9uLmh0bWwjdHlwZSkgc2VsZWN0aW9uLiBBbGwgcHJvcGVydGllcyBhbmQgdHJhbnNmb3JtYXRpb25zXG4gICAqIGZvciBhIG11bHRpIHNlbGVjdGlvbiBkZWZpbml0aW9uIChleGNlcHQgYHR5cGVgKSBtYXkgYmUgc3BlY2lmaWVkIGhlcmUuXG4gICAqXG4gICAqIEZvciBpbnN0YW5jZSwgc2V0dGluZyBgbXVsdGlgIHRvIGB7XCJ0b2dnbGVcIjogXCJldmVudC5hbHRLZXlcIn1gIGFkZHMgYWRkaXRpb25hbCB2YWx1ZXMgdG9cbiAgICogbXVsdGkgc2VsZWN0aW9ucyB3aGVuIGNsaWNraW5nIHdpdGggdGhlIGFsdC1rZXkgcHJlc3NlZCBieSBkZWZhdWx0LlxuICAgKi9cbiAgbXVsdGk/OiBNdWx0aVNlbGVjdGlvbkNvbmZpZztcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGRlZmluaXRpb24gZm9yIGFuIFtgaW50ZXJ2YWxgXShzZWxlY3Rpb24uaHRtbCN0eXBlKSBzZWxlY3Rpb24uIEFsbCBwcm9wZXJ0aWVzIGFuZCB0cmFuc2Zvcm1hdGlvbnNcbiAgICogZm9yIGFuIGludGVydmFsIHNlbGVjdGlvbiBkZWZpbml0aW9uIChleGNlcHQgYHR5cGVgKSBtYXkgYmUgc3BlY2lmaWVkIGhlcmUuXG4gICAqXG4gICAqIEZvciBpbnN0YW5jZSwgc2V0dGluZyBgaW50ZXJ2YWxgIHRvIGB7XCJ0cmFuc2xhdGVcIjogZmFsc2V9YCBkaXNhYmxlcyB0aGUgYWJpbGl0eSB0byBtb3ZlXG4gICAqIGludGVydmFsIHNlbGVjdGlvbnMgYnkgZGVmYXVsdC5cbiAgICovXG4gIGludGVydmFsPzogSW50ZXJ2YWxTZWxlY3Rpb25Db25maWc7XG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0Q29uZmlnOlNlbGVjdGlvbkNvbmZpZyA9IHtcbiAgc2luZ2xlOiB7XG4gICAgb246ICdjbGljaycsXG4gICAgZmllbGRzOiBbU0VMRUNUSU9OX0lEXSxcbiAgICByZXNvbHZlOiAnZ2xvYmFsJyxcbiAgICBlbXB0eTogJ2FsbCdcbiAgfSxcbiAgbXVsdGk6IHtcbiAgICBvbjogJ2NsaWNrJyxcbiAgICBmaWVsZHM6IFtTRUxFQ1RJT05fSURdLFxuICAgIHRvZ2dsZTogJ2V2ZW50LnNoaWZ0S2V5JyxcbiAgICByZXNvbHZlOiAnZ2xvYmFsJyxcbiAgICBlbXB0eTogJ2FsbCdcbiAgfSxcbiAgaW50ZXJ2YWw6IHtcbiAgICBvbjogJ1ttb3VzZWRvd24sIHdpbmRvdzptb3VzZXVwXSA+IHdpbmRvdzptb3VzZW1vdmUhJyxcbiAgICBlbmNvZGluZ3M6IFsneCcsICd5J10sXG4gICAgdHJhbnNsYXRlOiAnW21vdXNlZG93biwgd2luZG93Om1vdXNldXBdID4gd2luZG93Om1vdXNlbW92ZSEnLFxuICAgIHpvb206ICd3aGVlbCEnLFxuICAgIG1hcms6IHtmaWxsOiAnIzMzMycsIGZpbGxPcGFjaXR5OiAwLjEyNSwgc3Ryb2tlOiAnd2hpdGUnfSxcbiAgICByZXNvbHZlOiAnZ2xvYmFsJ1xuICB9XG59O1xuIl19","import * as tslib_1 from \"tslib\";\nexport function extractTitleConfig(titleConfig) {\n    var \n    // These are non-mark title config that need to be hardcoded\n    anchor = titleConfig.anchor, offset = titleConfig.offset, orient = titleConfig.orient, \n    // color needs to be redirect to fill\n    color = titleConfig.color, \n    // The rest are mark config.\n    titleMarkConfig = tslib_1.__rest(titleConfig, [\"anchor\", \"offset\", \"orient\", \"color\"]);\n    var mark = tslib_1.__assign({}, titleMarkConfig, color ? { fill: color } : {});\n    var nonMark = tslib_1.__assign({}, anchor ? { anchor: anchor } : {}, offset ? { offset: offset } : {}, orient ? { orient: orient } : {});\n    return { mark: mark, nonMark: nonMark };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGl0bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGl0bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQXdDQSxNQUFNLDZCQUE2QixXQUEwQjtJQU16RDtJQURBLDREQUE0RDtJQUM1RCwyQkFBTSxFQUFFLDJCQUFNLEVBQUUsMkJBQU07SUFDdEIscUNBQXFDO0lBQ3JDLHlCQUFLO0lBQ0wsNEJBQTRCO0lBQzVCLHNGQUFrQixDQUNKO0lBRWhCLElBQU0sSUFBSSx3QkFDTCxlQUFlLEVBQ2YsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUM5QixDQUFDO0lBRUYsSUFBTSxPQUFPLHdCQUNSLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLFFBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLFFBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLFFBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzFCLENBQUM7SUFFRixPQUFPLEVBQUMsSUFBSSxNQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUMsQ0FBQztBQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBbmNob3IsIFRpdGxlT3JpZW50LCBWZ01hcmtDb25maWcsIFZnVGl0bGVDb25maWd9IGZyb20gJy4vdmVnYS5zY2hlbWEnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRpdGxlQmFzZSB7XG4gIC8qKlxuICAgKiBUaGUgb3JpZW50YXRpb24gb2YgdGhlIHRpdGxlIHJlbGF0aXZlIHRvIHRoZSBjaGFydC4gT25lIG9mIGBcInRvcFwiYCAodGhlIGRlZmF1bHQpLCBgXCJib3R0b21cImAsIGBcImxlZnRcImAsIG9yIGBcInJpZ2h0XCJgLlxuICAgKi9cbiAgb3JpZW50PzogVGl0bGVPcmllbnQ7XG5cbiAgLyoqXG4gICAqIFRoZSBhbmNob3IgcG9zaXRpb24gZm9yIHBsYWNpbmcgdGhlIHRpdGxlLiBPbmUgb2YgYFwic3RhcnRcImAsIGBcIm1pZGRsZVwiYCwgb3IgYFwiZW5kXCJgLiBGb3IgZXhhbXBsZSwgd2l0aCBhbiBvcmllbnRhdGlvbiBvZiB0b3AgdGhlc2UgYW5jaG9yIHBvc2l0aW9ucyBtYXAgdG8gYSBsZWZ0LSwgY2VudGVyLSwgb3IgcmlnaHQtYWxpZ25lZCB0aXRsZS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBcIm1pZGRsZVwiYCBmb3IgW3NpbmdsZV0oc3BlYy5odG1sKSBhbmQgW2xheWVyZWRdKGxheWVyLmh0bWwpIHZpZXdzLlxuICAgKiBgXCJzdGFydFwiYCBmb3Igb3RoZXIgY29tcG9zaXRlIHZpZXdzLlxuICAgKlxuICAgKiBfX05vdGU6X18gW0ZvciBub3ddKGh0dHBzOi8vZ2l0aHViLmNvbS92ZWdhL3ZlZ2EtbGl0ZS9pc3N1ZXMvMjg3NSksIGBhbmNob3JgIGlzIG9ubHkgY3VzdG9taXphYmxlIG9ubHkgZm9yIFtzaW5nbGVdKHNwZWMuaHRtbCkgYW5kIFtsYXllcmVkXShsYXllci5odG1sKSB2aWV3cy4gIEZvciBvdGhlciBjb21wb3NpdGUgdmlld3MsIGBhbmNob3JgIGlzIGFsd2F5cyBgXCJzdGFydFwiYC5cbiAgICovXG4gIGFuY2hvcj86IEFuY2hvcjtcblxuICAvKipcbiAgICogVGhlIG9ydGhvZ29uYWwgb2Zmc2V0IGluIHBpeGVscyBieSB3aGljaCB0byBkaXNwbGFjZSB0aGUgdGl0bGUgZnJvbSBpdHMgcG9zaXRpb24gYWxvbmcgdGhlIGVkZ2Ugb2YgdGhlIGNoYXJ0LlxuICAgKi9cbiAgb2Zmc2V0PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBBIFttYXJrIHN0eWxlIHByb3BlcnR5XShjb25maWcuaHRtbCNzdHlsZSkgdG8gYXBwbHkgdG8gdGhlIHRpdGxlIHRleHQgbWFyay5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBcImdyb3VwLXRpdGxlXCJgLlxuICAgKi9cbiAgc3R5bGU/OiBzdHJpbmcgfCBzdHJpbmdbXTtcblxuICAvLyBUT0RPOiBuYW1lLCBlbmNvZGUsIGludGVyYWN0aXZlLCB6aW5kZXhcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUaXRsZVBhcmFtcyBleHRlbmRzIFRpdGxlQmFzZSB7XG4gIC8qKlxuICAgKiBUaGUgdGl0bGUgdGV4dC5cbiAgICovXG4gIHRleHQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RUaXRsZUNvbmZpZyh0aXRsZUNvbmZpZzogVmdUaXRsZUNvbmZpZyk6IHtcbiAgbWFyazogVmdNYXJrQ29uZmlnLFxuICBub25NYXJrOiBUaXRsZUJhc2Vcbn0ge1xuICBjb25zdCB7XG4gICAgLy8gVGhlc2UgYXJlIG5vbi1tYXJrIHRpdGxlIGNvbmZpZyB0aGF0IG5lZWQgdG8gYmUgaGFyZGNvZGVkXG4gICAgYW5jaG9yLCBvZmZzZXQsIG9yaWVudCxcbiAgICAvLyBjb2xvciBuZWVkcyB0byBiZSByZWRpcmVjdCB0byBmaWxsXG4gICAgY29sb3IsXG4gICAgLy8gVGhlIHJlc3QgYXJlIG1hcmsgY29uZmlnLlxuICAgIC4uLnRpdGxlTWFya0NvbmZpZ1xuICB9ID0gdGl0bGVDb25maWc7XG5cbiAgY29uc3QgbWFyazogVmdNYXJrQ29uZmlnID0ge1xuICAgIC4uLnRpdGxlTWFya0NvbmZpZyxcbiAgICAuLi5jb2xvciA/IHtmaWxsOiBjb2xvcn0gOiB7fVxuICB9O1xuXG4gIGNvbnN0IG5vbk1hcms6IFRpdGxlQmFzZSA9IHtcbiAgICAuLi5hbmNob3IgPyB7YW5jaG9yfSA6IHt9LFxuICAgIC4uLm9mZnNldCA/IHtvZmZzZXR9IDoge30sXG4gICAgLi4ub3JpZW50ID8ge29yaWVudH0gOiB7fVxuICB9O1xuXG4gIHJldHVybiB7bWFyaywgbm9uTWFya307XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { isObject } from 'vega-util';\nimport { COMPOSITE_MARK_STYLES } from './compositemark';\nimport { VL_ONLY_COMPOSITE_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX } from './compositemark/index';\nimport { VL_ONLY_GUIDE_CONFIG } from './guide';\nimport { defaultLegendConfig } from './legend';\nimport { PRIMITIVE_MARKS, VL_ONLY_MARK_CONFIG_PROPERTIES, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX } from './mark';\nimport * as mark from './mark';\nimport { defaultScaleConfig } from './scale';\nimport { defaultConfig as defaultSelectionConfig } from './selection';\nimport { extractTitleConfig } from './title';\nimport { duplicate, keys, mergeDeep } from './util';\nexport var defaultViewConfig = {\n    width: 200,\n    height: 200\n};\nexport var defaultConfig = {\n    padding: 5,\n    timeFormat: '%b %d, %Y',\n    countTitle: 'Number of Records',\n    invalidValues: 'filter',\n    view: defaultViewConfig,\n    mark: mark.defaultMarkConfig,\n    area: {},\n    bar: mark.defaultBarConfig,\n    circle: {},\n    geoshape: {},\n    line: {},\n    point: {},\n    rect: {},\n    rule: { color: 'black' },\n    square: {},\n    text: { color: 'black' },\n    tick: mark.defaultTickConfig,\n    trail: {},\n    box: { size: 14, extent: 1.5 },\n    boxWhisker: {},\n    boxMid: { color: 'white' },\n    scale: defaultScaleConfig,\n    projection: {},\n    axis: {},\n    axisX: {},\n    axisY: { minExtent: 30 },\n    axisLeft: {},\n    axisRight: {},\n    axisTop: {},\n    axisBottom: {},\n    axisBand: {},\n    legend: defaultLegendConfig,\n    selection: defaultSelectionConfig,\n    style: {},\n    title: {},\n};\nexport function initConfig(config) {\n    return mergeDeep(duplicate(defaultConfig), config);\n}\nvar MARK_STYLES = ['view'].concat(PRIMITIVE_MARKS, COMPOSITE_MARK_STYLES);\nvar VL_ONLY_CONFIG_PROPERTIES = [\n    'padding', 'numberFormat', 'timeFormat', 'countTitle',\n    'stack', 'scale', 'selection', 'invalidValues',\n    'overlay' // FIXME: Redesign and unhide this\n];\nvar VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = tslib_1.__assign({ view: ['width', 'height'] }, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX, VL_ONLY_COMPOSITE_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX);\nexport function stripAndRedirectConfig(config) {\n    config = duplicate(config);\n    for (var _i = 0, VL_ONLY_CONFIG_PROPERTIES_1 = VL_ONLY_CONFIG_PROPERTIES; _i < VL_ONLY_CONFIG_PROPERTIES_1.length; _i++) {\n        var prop = VL_ONLY_CONFIG_PROPERTIES_1[_i];\n        delete config[prop];\n    }\n    // Remove Vega-Lite only axis/legend config\n    if (config.axis) {\n        for (var _a = 0, VL_ONLY_GUIDE_CONFIG_1 = VL_ONLY_GUIDE_CONFIG; _a < VL_ONLY_GUIDE_CONFIG_1.length; _a++) {\n            var prop = VL_ONLY_GUIDE_CONFIG_1[_a];\n            delete config.axis[prop];\n        }\n    }\n    if (config.legend) {\n        for (var _b = 0, VL_ONLY_GUIDE_CONFIG_2 = VL_ONLY_GUIDE_CONFIG; _b < VL_ONLY_GUIDE_CONFIG_2.length; _b++) {\n            var prop = VL_ONLY_GUIDE_CONFIG_2[_b];\n            delete config.legend[prop];\n        }\n    }\n    // Remove Vega-Lite only generic mark config\n    if (config.mark) {\n        for (var _c = 0, VL_ONLY_MARK_CONFIG_PROPERTIES_1 = VL_ONLY_MARK_CONFIG_PROPERTIES; _c < VL_ONLY_MARK_CONFIG_PROPERTIES_1.length; _c++) {\n            var prop = VL_ONLY_MARK_CONFIG_PROPERTIES_1[_c];\n            delete config.mark[prop];\n        }\n    }\n    for (var _d = 0, MARK_STYLES_1 = MARK_STYLES; _d < MARK_STYLES_1.length; _d++) {\n        var markType = MARK_STYLES_1[_d];\n        // Remove Vega-Lite-only mark config\n        for (var _e = 0, VL_ONLY_MARK_CONFIG_PROPERTIES_2 = VL_ONLY_MARK_CONFIG_PROPERTIES; _e < VL_ONLY_MARK_CONFIG_PROPERTIES_2.length; _e++) {\n            var prop = VL_ONLY_MARK_CONFIG_PROPERTIES_2[_e];\n            delete config[markType][prop];\n        }\n        // Remove Vega-Lite only mark-specific config\n        var vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];\n        if (vlOnlyMarkSpecificConfigs) {\n            for (var _f = 0, vlOnlyMarkSpecificConfigs_1 = vlOnlyMarkSpecificConfigs; _f < vlOnlyMarkSpecificConfigs_1.length; _f++) {\n                var prop = vlOnlyMarkSpecificConfigs_1[_f];\n                delete config[markType][prop];\n            }\n        }\n        // Redirect mark config to config.style so that mark config only affect its own mark type\n        // without affecting other marks that share the same underlying Vega marks.\n        // For example, config.rect should not affect bar marks.\n        redirectConfig(config, markType);\n    }\n    // Redirect config.title -- so that title config do not\n    // affect header labels, which also uses `title` directive to implement.\n    redirectConfig(config, 'title', 'group-title');\n    // Remove empty config objects\n    for (var prop in config) {\n        if (isObject(config[prop]) && keys(config[prop]).length === 0) {\n            delete config[prop];\n        }\n    }\n    return keys(config).length > 0 ? config : undefined;\n}\nfunction redirectConfig(config, prop, toProp) {\n    var propConfig = prop === 'title' ? extractTitleConfig(config.title).mark : config[prop];\n    if (prop === 'view') {\n        toProp = 'cell'; // View's default style is \"cell\"\n    }\n    var style = tslib_1.__assign({}, propConfig, config.style[prop]);\n    // set config.style if it is not an empty object\n    if (keys(style).length > 0) {\n        config.style[toProp || prop] = style;\n    }\n    delete config[prop];\n}\n//# sourceMappingURL=data:application/json;base64,","import { isArray } from 'vega-util';\nimport { SUM_OPS } from './aggregate';\nimport { NONPOSITION_CHANNELS, X, X2, Y2 } from './channel';\nimport { channelHasField } from './encoding';\nimport { getFieldDef, isFieldDef, isStringFieldDef, vgField } from './fielddef';\nimport * as log from './log';\nimport { AREA, BAR, CIRCLE, isMarkDef, isPathMark, LINE, POINT, RULE, SQUARE, TEXT, TICK } from './mark';\nimport { ScaleType } from './scale';\nimport { contains } from './util';\nvar STACK_OFFSET_INDEX = {\n    zero: 1,\n    center: 1,\n    normalize: 1\n};\nexport function isStackOffset(s) {\n    return !!STACK_OFFSET_INDEX[s];\n}\nexport var STACKABLE_MARKS = [BAR, AREA, RULE, POINT, CIRCLE, SQUARE, LINE, TEXT, TICK];\nexport var STACK_BY_DEFAULT_MARKS = [BAR, AREA];\nfunction potentialStackedChannel(encoding) {\n    var xDef = encoding.x;\n    var yDef = encoding.y;\n    if (isFieldDef(xDef) && isFieldDef(yDef)) {\n        if (xDef.type === 'quantitative' && yDef.type === 'quantitative') {\n            if (xDef.stack) {\n                return 'x';\n            }\n            else if (yDef.stack) {\n                return 'y';\n            }\n            // if there is no explicit stacking, only apply stack if there is only one aggregate for x or y\n            if ((!!xDef.aggregate) !== (!!yDef.aggregate)) {\n                return xDef.aggregate ? 'x' : 'y';\n            }\n        }\n        else if (xDef.type === 'quantitative') {\n            return 'x';\n        }\n        else if (yDef.type === 'quantitative') {\n            return 'y';\n        }\n    }\n    else if (isFieldDef(xDef) && xDef.type === 'quantitative') {\n        return 'x';\n    }\n    else if (isFieldDef(yDef) && yDef.type === 'quantitative') {\n        return 'y';\n    }\n    return undefined;\n}\n// Note: CompassQL uses this method and only pass in required properties of each argument object.\n// If required properties change, make sure to update CompassQL.\nexport function stack(m, encoding, stackConfig) {\n    var mark = isMarkDef(m) ? m.type : m;\n    // Should have stackable mark\n    if (!contains(STACKABLE_MARKS, mark)) {\n        return null;\n    }\n    var fieldChannel = potentialStackedChannel(encoding);\n    if (!fieldChannel) {\n        return null;\n    }\n    var stackedFieldDef = encoding[fieldChannel];\n    var stackedField = isStringFieldDef(stackedFieldDef) ? vgField(stackedFieldDef, {}) : undefined;\n    var dimensionChannel = fieldChannel === 'x' ? 'y' : 'x';\n    var dimensionDef = encoding[dimensionChannel];\n    var dimensionField = isStringFieldDef(dimensionDef) ? vgField(dimensionDef, {}) : undefined;\n    // Should have grouping level of detail that is different from the dimension field\n    var stackBy = NONPOSITION_CHANNELS.reduce(function (sc, channel) {\n        if (channelHasField(encoding, channel)) {\n            var channelDef = encoding[channel];\n            (isArray(channelDef) ? channelDef : [channelDef]).forEach(function (cDef) {\n                var fieldDef = getFieldDef(cDef);\n                if (fieldDef.aggregate) {\n                    return;\n                }\n                // Check whether the channel's field is identical to x/y's field or if the channel is a repeat\n                var f = isStringFieldDef(fieldDef) ? vgField(fieldDef, {}) : undefined;\n                if (\n                // if fielddef is a repeat, just include it in the stack by\n                !f ||\n                    // otherwise, the field must be different from x and y fields.\n                    (f !== dimensionField && f !== stackedField)) {\n                    sc.push({ channel: channel, fieldDef: fieldDef });\n                }\n            });\n        }\n        return sc;\n    }, []);\n    if (stackBy.length === 0) {\n        return null;\n    }\n    // Automatically determine offset\n    var offset = undefined;\n    if (stackedFieldDef.stack !== undefined) {\n        offset = stackedFieldDef.stack;\n    }\n    else if (contains(STACK_BY_DEFAULT_MARKS, mark)) {\n        // Bar and Area with sum ops are automatically stacked by default\n        offset = stackConfig === undefined ? 'zero' : stackConfig;\n    }\n    else {\n        offset = stackConfig;\n    }\n    if (!offset || !isStackOffset(offset)) {\n        return null;\n    }\n    // warn when stacking non-linear\n    if (stackedFieldDef.scale && stackedFieldDef.scale.type && stackedFieldDef.scale.type !== ScaleType.LINEAR) {\n        log.warn(log.message.cannotStackNonLinearScale(stackedFieldDef.scale.type));\n    }\n    // Check if it is a ranged mark\n    if (channelHasField(encoding, fieldChannel === X ? X2 : Y2)) {\n        log.warn(log.message.cannotStackRangedMark(fieldChannel));\n        return null;\n    }\n    // Warn if stacking summative aggregate\n    if (stackedFieldDef.aggregate && !contains(SUM_OPS, stackedFieldDef.aggregate)) {\n        log.warn(log.message.stackNonSummativeAggregate(stackedFieldDef.aggregate));\n    }\n    return {\n        groupbyChannel: dimensionDef ? dimensionChannel : undefined,\n        fieldChannel: fieldChannel,\n        impute: isPathMark(mark),\n        stackBy: stackBy,\n        offset: offset\n    };\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isObject } from 'vega-util';\nimport { COLUMN, ROW, X, X2, Y, Y2 } from './channel';\nimport * as compositeMark from './compositemark';\nimport { channelHasField, isRanged } from './encoding';\nimport * as vlEncoding from './encoding';\nimport * as log from './log';\nimport { isMarkDef, isPathMark, isPrimitiveMark } from './mark';\nimport { stack } from './stack';\nimport { duplicate, hash, keys, vals } from './util';\n/* Custom type guards */\nexport function isFacetSpec(spec) {\n    return spec['facet'] !== undefined;\n}\nexport function isUnitSpec(spec) {\n    return !!spec['mark'];\n}\nexport function isLayerSpec(spec) {\n    return spec['layer'] !== undefined;\n}\nexport function isRepeatSpec(spec) {\n    return spec['repeat'] !== undefined;\n}\nexport function isConcatSpec(spec) {\n    return isVConcatSpec(spec) || isHConcatSpec(spec);\n}\nexport function isVConcatSpec(spec) {\n    return spec['vconcat'] !== undefined;\n}\nexport function isHConcatSpec(spec) {\n    return spec['hconcat'] !== undefined;\n}\n/**\n * Decompose extended unit specs into composition of pure unit specs.\n */\n// TODO: consider moving this to another file.  Maybe vl.spec.normalize or vl.normalize\nexport function normalize(spec, config) {\n    if (isFacetSpec(spec)) {\n        return normalizeFacet(spec, config);\n    }\n    if (isLayerSpec(spec)) {\n        return normalizeLayer(spec, config);\n    }\n    if (isRepeatSpec(spec)) {\n        return normalizeRepeat(spec, config);\n    }\n    if (isVConcatSpec(spec)) {\n        return normalizeVConcat(spec, config);\n    }\n    if (isHConcatSpec(spec)) {\n        return normalizeHConcat(spec, config);\n    }\n    if (isUnitSpec(spec)) {\n        var hasRow = channelHasField(spec.encoding, ROW);\n        var hasColumn = channelHasField(spec.encoding, COLUMN);\n        if (hasRow || hasColumn) {\n            return normalizeFacetedUnit(spec, config);\n        }\n        return normalizeNonFacetUnit(spec, config);\n    }\n    throw new Error(log.message.INVALID_SPEC);\n}\nfunction normalizeFacet(spec, config) {\n    var subspec = spec.spec, rest = tslib_1.__rest(spec, [\"spec\"]);\n    return tslib_1.__assign({}, rest, { \n        // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n        spec: normalize(subspec, config) });\n}\nfunction mergeEncoding(opt) {\n    var parentEncoding = opt.parentEncoding, encoding = opt.encoding;\n    if (parentEncoding && encoding) {\n        var overriden = keys(parentEncoding).reduce(function (o, key) {\n            if (encoding[key]) {\n                o.push(key);\n            }\n            return o;\n        }, []);\n        if (overriden.length > 0) {\n            log.warn(log.message.encodingOverridden(overriden));\n        }\n    }\n    var merged = tslib_1.__assign({}, (parentEncoding || {}), (encoding || {}));\n    return keys(merged).length > 0 ? merged : undefined;\n}\nfunction mergeProjection(opt) {\n    var parentProjection = opt.parentProjection, projection = opt.projection;\n    if (parentProjection && projection) {\n        log.warn(log.message.projectionOverridden({ parentProjection: parentProjection, projection: projection }));\n    }\n    return projection || parentProjection;\n}\nfunction normalizeLayer(spec, config, parentEncoding, parentProjection) {\n    var layer = spec.layer, encoding = spec.encoding, projection = spec.projection, rest = tslib_1.__rest(spec, [\"layer\", \"encoding\", \"projection\"]);\n    var mergedEncoding = mergeEncoding({ parentEncoding: parentEncoding, encoding: encoding });\n    var mergedProjection = mergeProjection({ parentProjection: parentProjection, projection: projection });\n    return tslib_1.__assign({}, rest, { layer: layer.map(function (subspec) {\n            if (isLayerSpec(subspec)) {\n                return normalizeLayer(subspec, config, mergedEncoding, mergedProjection);\n            }\n            return normalizeNonFacetUnit(subspec, config, mergedEncoding, mergedProjection);\n        }) });\n}\nfunction normalizeRepeat(spec, config) {\n    var subspec = spec.spec, rest = tslib_1.__rest(spec, [\"spec\"]);\n    return tslib_1.__assign({}, rest, { spec: normalize(subspec, config) });\n}\nfunction normalizeVConcat(spec, config) {\n    var vconcat = spec.vconcat, rest = tslib_1.__rest(spec, [\"vconcat\"]);\n    return tslib_1.__assign({}, rest, { vconcat: vconcat.map(function (subspec) { return normalize(subspec, config); }) });\n}\nfunction normalizeHConcat(spec, config) {\n    var hconcat = spec.hconcat, rest = tslib_1.__rest(spec, [\"hconcat\"]);\n    return tslib_1.__assign({}, rest, { hconcat: hconcat.map(function (subspec) { return normalize(subspec, config); }) });\n}\nfunction normalizeFacetedUnit(spec, config) {\n    // New encoding in the inside spec should not contain row / column\n    // as row/column should be moved to facet\n    var _a = spec.encoding, row = _a.row, column = _a.column, encoding = tslib_1.__rest(_a, [\"row\", \"column\"]);\n    // Mark and encoding should be moved into the inner spec\n    var mark = spec.mark, width = spec.width, projection = spec.projection, height = spec.height, selection = spec.selection, _ = spec.encoding, outerSpec = tslib_1.__rest(spec, [\"mark\", \"width\", \"projection\", \"height\", \"selection\", \"encoding\"]);\n    return tslib_1.__assign({}, outerSpec, { facet: tslib_1.__assign({}, (row ? { row: row } : {}), (column ? { column: column } : {})), spec: normalizeNonFacetUnit(tslib_1.__assign({}, (projection ? { projection: projection } : {}), { mark: mark }, (width ? { width: width } : {}), (height ? { height: height } : {}), { encoding: encoding }, (selection ? { selection: selection } : {})), config) });\n}\nfunction isNonFacetUnitSpecWithPrimitiveMark(spec) {\n    return isPrimitiveMark(spec.mark);\n}\nfunction getPointOverlay(markDef, markConfig, encoding) {\n    if (markDef.point === 'transparent') {\n        return { opacity: 0 };\n    }\n    else if (markDef.point) { // truthy : true or object\n        return isObject(markDef.point) ? markDef.point : {};\n    }\n    else if (markDef.point !== undefined) { // false or null\n        return null;\n    }\n    else { // undefined (not disabled)\n        if (markConfig.point || encoding.shape) {\n            // enable point overlay if config[mark].point is truthy or if encoding.shape is provided\n            return isObject(markConfig.point) ? markConfig.point : {};\n        }\n        // markDef.point is defined as falsy\n        return null;\n    }\n}\nfunction getLineOverlay(markDef, markConfig) {\n    if (markDef.line) { // true or object\n        return markDef.line === true ? {} : markDef.line;\n    }\n    else if (markDef.line !== undefined) { // false or null\n        return null;\n    }\n    else { // undefined (not disabled)\n        if (markConfig.line) {\n            // enable line overlay if config[mark].line is truthy\n            return markConfig.line === true ? {} : markConfig.line;\n        }\n        // markDef.point is defined as falsy\n        return null;\n    }\n}\nfunction normalizeNonFacetUnit(spec, config, parentEncoding, parentProjection) {\n    var encoding = spec.encoding, projection = spec.projection;\n    var mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n    // merge parent encoding / projection first\n    if (parentEncoding || parentProjection) {\n        var mergedProjection = mergeProjection({ parentProjection: parentProjection, projection: projection });\n        var mergedEncoding = mergeEncoding({ parentEncoding: parentEncoding, encoding: encoding });\n        return normalizeNonFacetUnit(tslib_1.__assign({}, spec, (mergedProjection ? { projection: mergedProjection } : {}), (mergedEncoding ? { encoding: mergedEncoding } : {})), config);\n    }\n    if (isNonFacetUnitSpecWithPrimitiveMark(spec)) {\n        // TODO: thoroughly test\n        if (isRanged(encoding)) {\n            return normalizeRangedUnit(spec);\n        }\n        if (mark === 'line' && (encoding.x2 || encoding.y2)) {\n            log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));\n            return normalizeNonFacetUnit(tslib_1.__assign({ mark: 'rule' }, spec), config, parentEncoding, parentProjection);\n        }\n        if (isPathMark(mark)) {\n            return normalizePathOverlay(spec, config);\n        }\n        return spec; // Nothing to normalize\n    }\n    else {\n        return compositeMark.normalize(spec, config);\n    }\n}\nfunction normalizeRangedUnit(spec) {\n    var hasX = channelHasField(spec.encoding, X);\n    var hasY = channelHasField(spec.encoding, Y);\n    var hasX2 = channelHasField(spec.encoding, X2);\n    var hasY2 = channelHasField(spec.encoding, Y2);\n    if ((hasX2 && !hasX) || (hasY2 && !hasY)) {\n        var normalizedSpec = duplicate(spec);\n        if (hasX2 && !hasX) {\n            normalizedSpec.encoding.x = normalizedSpec.encoding.x2;\n            delete normalizedSpec.encoding.x2;\n        }\n        if (hasY2 && !hasY) {\n            normalizedSpec.encoding.y = normalizedSpec.encoding.y2;\n            delete normalizedSpec.encoding.y2;\n        }\n        return normalizedSpec;\n    }\n    return spec;\n}\nfunction dropLineAndPoint(markDef) {\n    var _point = markDef.point, _line = markDef.line, mark = tslib_1.__rest(markDef, [\"point\", \"line\"]);\n    return keys(mark).length > 1 ? mark : mark.type;\n}\nfunction normalizePathOverlay(spec, config) {\n    if (config === void 0) { config = {}; }\n    // _ is used to denote a dropped property of the unit spec\n    // which should not be carried over to the layer spec\n    var selection = spec.selection, projection = spec.projection, encoding = spec.encoding, mark = spec.mark, outerSpec = tslib_1.__rest(spec, [\"selection\", \"projection\", \"encoding\", \"mark\"]);\n    var markDef = isMarkDef(mark) ? mark : { type: mark };\n    var pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);\n    var lineOverlay = markDef.type === 'area' && getLineOverlay(markDef, config[markDef.type]);\n    if (!pointOverlay && !lineOverlay) {\n        return tslib_1.__assign({}, spec, { \n            // Do not include point / line overlay in the normalize spec\n            mark: dropLineAndPoint(markDef) });\n    }\n    var layer = [{\n            // Do not include point / line overlay in the normalize spec\n            mark: dropLineAndPoint(tslib_1.__assign({}, markDef, (markDef.type === 'area' ? { opacity: 0.7 } : {}))),\n            encoding: encoding\n        }];\n    // FIXME: disable tooltip for the line layer if tooltip is not group-by field.\n    // FIXME: determine rules for applying selections.\n    // Need to copy stack config to overlayed layer\n    var stackProps = stack(markDef, encoding, config ? config.stack : undefined);\n    var overlayEncoding = encoding;\n    if (stackProps) {\n        var stackFieldChannel = stackProps.fieldChannel, offset = stackProps.offset;\n        overlayEncoding = tslib_1.__assign({}, encoding, (_a = {}, _a[stackFieldChannel] = tslib_1.__assign({}, encoding[stackFieldChannel], (offset ? { stack: offset } : {})), _a));\n    }\n    if (lineOverlay) {\n        layer.push(tslib_1.__assign({}, (projection ? { projection: projection } : {}), { mark: tslib_1.__assign({ type: 'line' }, lineOverlay) }, (selection ? { selection: selection } : {}), { encoding: overlayEncoding }));\n    }\n    if (pointOverlay) {\n        layer.push(tslib_1.__assign({}, (projection ? { projection: projection } : {}), { mark: tslib_1.__assign({ type: 'point', opacity: 1, filled: true }, pointOverlay) }, (selection ? { selection: selection } : {}), { encoding: overlayEncoding }));\n    }\n    return tslib_1.__assign({}, outerSpec, { layer: layer });\n    var _a;\n}\n// TODO: add vl.spec.validate & move stuff from vl.validate to here\n/* Accumulate non-duplicate fieldDefs in a dictionary */\nfunction accumulate(dict, defs) {\n    defs.forEach(function (fieldDef) {\n        // Consider only pure fieldDef properties (ignoring scale, axis, legend)\n        var pureFieldDef = ['field', 'type', 'value', 'timeUnit', 'bin', 'aggregate'].reduce(function (f, key) {\n            if (fieldDef[key] !== undefined) {\n                f[key] = fieldDef[key];\n            }\n            return f;\n        }, {});\n        var key = hash(pureFieldDef);\n        dict[key] = dict[key] || fieldDef;\n    });\n    return dict;\n}\n/* Recursively get fieldDefs from a spec, returns a dictionary of fieldDefs */\nfunction fieldDefIndex(spec, dict) {\n    if (dict === void 0) { dict = {}; }\n    // FIXME(https://github.com/vega/vega-lite/issues/2207): Support fieldDefIndex for repeat\n    if (isLayerSpec(spec)) {\n        spec.layer.forEach(function (layer) {\n            if (isUnitSpec(layer)) {\n                accumulate(dict, vlEncoding.fieldDefs(layer.encoding));\n            }\n            else {\n                fieldDefIndex(layer, dict);\n            }\n        });\n    }\n    else if (isFacetSpec(spec)) {\n        accumulate(dict, vlEncoding.fieldDefs(spec.facet));\n        fieldDefIndex(spec.spec, dict);\n    }\n    else if (isRepeatSpec(spec)) {\n        fieldDefIndex(spec.spec, dict);\n    }\n    else if (isConcatSpec(spec)) {\n        var childSpec = isVConcatSpec(spec) ? spec.vconcat : spec.hconcat;\n        childSpec.forEach(function (child) { return fieldDefIndex(child, dict); });\n    }\n    else { // Unit Spec\n        accumulate(dict, vlEncoding.fieldDefs(spec.encoding));\n    }\n    return dict;\n}\n/* Returns all non-duplicate fieldDefs in a spec in a flat array */\nexport function fieldDefs(spec) {\n    return vals(fieldDefIndex(spec));\n}\nexport function isStacked(spec, config) {\n    config = config || spec.config;\n    if (isPrimitiveMark(spec.mark)) {\n        return stack(spec.mark, spec.encoding, config ? config.stack : undefined) !== null;\n    }\n    return false;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isString } from 'vega-util';\nimport * as log from './log';\nfunction _normalizeAutoSize(autosize) {\n    return isString(autosize) ? { type: autosize } : autosize || {};\n}\nexport function normalizeAutoSize(topLevelAutosize, configAutosize, isUnitOrLayer) {\n    if (isUnitOrLayer === void 0) { isUnitOrLayer = true; }\n    var autosize = tslib_1.__assign({ type: 'pad' }, _normalizeAutoSize(configAutosize), _normalizeAutoSize(topLevelAutosize));\n    if (autosize.type === 'fit') {\n        if (!isUnitOrLayer) {\n            log.warn(log.message.FIT_NON_SINGLE);\n            autosize.type = 'pad';\n        }\n    }\n    return autosize;\n}\nvar TOP_LEVEL_PROPERTIES = [\n    'background', 'padding', 'datasets'\n    // We do not include \"autosize\" here as it is supported by only unit and layer specs and thus need to be normalized\n];\nexport function extractTopLevelProperties(t) {\n    return TOP_LEVEL_PROPERTIES.reduce(function (o, p) {\n        if (t && t[p] !== undefined) {\n            o[p] = t[p];\n        }\n        return o;\n    }, {});\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9wbGV2ZWxwcm9wcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90b3BsZXZlbHByb3BzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBR25DLE9BQU8sS0FBSyxHQUFHLE1BQU0sT0FBTyxDQUFDO0FBbUU3Qiw0QkFBNEIsUUFBdUM7SUFDakUsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO0FBQ2hFLENBQUM7QUFFRCxNQUFNLDRCQUE0QixnQkFBK0MsRUFBRSxjQUE2QyxFQUFFLGFBQTZCO0lBQTdCLDhCQUFBLEVBQUEsb0JBQTZCO0lBQzdKLElBQU0sUUFBUSxzQkFDWixJQUFJLEVBQUUsS0FBSyxJQUNSLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxFQUNsQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUN4QyxDQUFDO0lBRUYsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtRQUMzQixJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNyQyxRQUFRLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztTQUN2QjtLQUNGO0lBRUQsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQUVELElBQU0sb0JBQW9CLEdBQWlDO0lBQ3pELFlBQVksRUFBRSxTQUFTLEVBQUUsVUFBVTtJQUNuQyxtSEFBbUg7Q0FDcEgsQ0FBQztBQUVGLE1BQU0sb0NBQWtFLENBQUk7SUFDMUUsT0FBTyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQztRQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQzNCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDYjtRQUNELE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNTdHJpbmd9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5cbmltcG9ydCB7SW5saW5lRGF0YXNldH0gZnJvbSAnLi9kYXRhJztcbmltcG9ydCAqIGFzIGxvZyBmcm9tICcuL2xvZyc7XG5pbXBvcnQge0RpY3R9IGZyb20gJy4vdXRpbCc7XG5cbi8qKlxuICogQG1pbmltdW0gMFxuICovXG5leHBvcnQgdHlwZSBQYWRkaW5nID0gbnVtYmVyIHwge3RvcD86IG51bWJlciwgYm90dG9tPzogbnVtYmVyLCBsZWZ0PzogbnVtYmVyLCByaWdodD86IG51bWJlcn07XG5cbmV4cG9ydCB0eXBlIERhdGFzZXRzID0gRGljdDxJbmxpbmVEYXRhc2V0PjtcblxuZXhwb3J0IGludGVyZmFjZSBUb3BMZXZlbFByb3BlcnRpZXMge1xuICAvKipcbiAgICogQ1NTIGNvbG9yIHByb3BlcnR5IHRvIHVzZSBhcyB0aGUgYmFja2dyb3VuZCBvZiB2aXN1YWxpemF0aW9uLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gbm9uZSAodHJhbnNwYXJlbnQpXG4gICAqL1xuICBiYWNrZ3JvdW5kPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2aXN1YWxpemF0aW9uIHBhZGRpbmcsIGluIHBpeGVscywgZnJvbSB0aGUgZWRnZSBvZiB0aGUgdmlzdWFsaXphdGlvbiBjYW52YXMgdG8gdGhlIGRhdGEgcmVjdGFuZ2xlLiAgSWYgYSBudW1iZXIsIHNwZWNpZmllcyBwYWRkaW5nIGZvciBhbGwgc2lkZXMuXG4gICAqIElmIGFuIG9iamVjdCwgdGhlIHZhbHVlIHNob3VsZCBoYXZlIHRoZSBmb3JtYXQgYHtcImxlZnRcIjogNSwgXCJ0b3BcIjogNSwgXCJyaWdodFwiOiA1LCBcImJvdHRvbVwiOiA1fWAgdG8gc3BlY2lmeSBwYWRkaW5nIGZvciBlYWNoIHNpZGUgb2YgdGhlIHZpc3VhbGl6YXRpb24uXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZV9fOiBgNWBcbiAgICovXG4gIHBhZGRpbmc/OiBQYWRkaW5nO1xuXG4gIC8qKlxuICAgKiBTZXRzIGhvdyB0aGUgdmlzdWFsaXphdGlvbiBzaXplIHNob3VsZCBiZSBkZXRlcm1pbmVkLiBJZiBhIHN0cmluZywgc2hvdWxkIGJlIG9uZSBvZiBgXCJwYWRcImAsIGBcImZpdFwiYCBvciBgXCJub25lXCJgLlxuICAgKiBPYmplY3QgdmFsdWVzIGNhbiBhZGRpdGlvbmFsbHkgc3BlY2lmeSBwYXJhbWV0ZXJzIGZvciBjb250ZW50IHNpemluZyBhbmQgYXV0b21hdGljIHJlc2l6aW5nLlxuICAgKiBgXCJmaXRcImAgaXMgb25seSBzdXBwb3J0ZWQgZm9yIHNpbmdsZSBhbmQgbGF5ZXJlZCB2aWV3cyB0aGF0IGRvbid0IHVzZSBgcmFuZ2VTdGVwYC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlX186IGBwYWRgXG4gICAqL1xuICBhdXRvc2l6ZT86IEF1dG9zaXplVHlwZSB8IEF1dG9TaXplUGFyYW1zO1xuXG4gIC8qKlxuICAgKiBBIGdsb2JhbCBkYXRhIHN0b3JlIGZvciBuYW1lZCBkYXRhc2V0cy4gVGhpcyBpcyBhIG1hcHBpbmcgZnJvbSBuYW1lcyB0byBpbmxpbmUgZGF0YXNldHMuXG4gICAqIFRoaXMgY2FuIGJlIGFuIGFycmF5IG9mIG9iamVjdHMgb3IgcHJpbWl0aXZlIHZhbHVlcyBvciBhIHN0cmluZy4gQXJyYXlzIG9mIHByaW1pdGl2ZSB2YWx1ZXMgYXJlIGluZ2VzdGVkIGFzIG9iamVjdHMgd2l0aCBhIGBkYXRhYCBwcm9wZXJ0eS5cbiAgICovXG4gIGRhdGFzZXRzPzogRGF0YXNldHM7XG59XG5cbmV4cG9ydCB0eXBlIEF1dG9zaXplVHlwZSA9ICdwYWQnIHwgJ2ZpdCcgfCAnbm9uZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXV0b1NpemVQYXJhbXMge1xuICAvKipcbiAgICogVGhlIHNpemluZyBmb3JtYXQgdHlwZS4gT25lIG9mIGBcInBhZFwiYCwgYFwiZml0XCJgIG9yIGBcIm5vbmVcImAuIFNlZSB0aGUgW2F1dG9zaXplIHR5cGVdKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3Mvc2l6ZS5odG1sI2F1dG9zaXplKSBkb2N1bWVudGF0aW9uIGZvciBkZXNjcmlwdGlvbnMgb2YgZWFjaC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlX186IGBcInBhZFwiYFxuICAgKi9cbiAgdHlwZT86IEF1dG9zaXplVHlwZTtcblxuICAvKipcbiAgICogQSBib29sZWFuIGZsYWcgaW5kaWNhdGluZyBpZiBhdXRvc2l6ZSBsYXlvdXQgc2hvdWxkIGJlIHJlLWNhbGN1bGF0ZWQgb24gZXZlcnkgdmlldyB1cGRhdGUuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZV9fOiBgZmFsc2VgXG4gICAqL1xuICByZXNpemU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGhvdyBzaXplIGNhbGN1bGF0aW9uIHNob3VsZCBiZSBwZXJmb3JtZWQsIG9uZSBvZiBgXCJjb250ZW50XCJgIG9yIGBcInBhZGRpbmdcImAuIFRoZSBkZWZhdWx0IHNldHRpbmcgKGBcImNvbnRlbnRcImApIGludGVycHJldHMgdGhlIHdpZHRoIGFuZCBoZWlnaHQgc2V0dGluZ3MgYXMgdGhlIGRhdGEgcmVjdGFuZ2xlIChwbG90dGluZykgZGltZW5zaW9ucywgdG8gd2hpY2ggcGFkZGluZyBpcyB0aGVuIGFkZGVkLiBJbiBjb250cmFzdCwgdGhlIGBcInBhZGRpbmdcImAgc2V0dGluZyBpbmNsdWRlcyB0aGUgcGFkZGluZyB3aXRoaW4gdGhlIHZpZXcgc2l6ZSBjYWxjdWxhdGlvbnMsIHN1Y2ggdGhhdCB0aGUgd2lkdGggYW5kIGhlaWdodCBzZXR0aW5ncyBpbmRpY2F0ZSB0aGUgKip0b3RhbCoqIGludGVuZGVkIHNpemUgb2YgdGhlIHZpZXcuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZV9fOiBgXCJjb250ZW50XCJgXG4gICAqL1xuICBjb250YWlucz86ICdjb250ZW50JyB8ICdwYWRkaW5nJztcbn1cblxuZnVuY3Rpb24gX25vcm1hbGl6ZUF1dG9TaXplKGF1dG9zaXplOiBBdXRvc2l6ZVR5cGUgfCBBdXRvU2l6ZVBhcmFtcykge1xuICByZXR1cm4gaXNTdHJpbmcoYXV0b3NpemUpID8ge3R5cGU6IGF1dG9zaXplfSA6IGF1dG9zaXplIHx8IHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplQXV0b1NpemUodG9wTGV2ZWxBdXRvc2l6ZTogQXV0b3NpemVUeXBlIHwgQXV0b1NpemVQYXJhbXMsIGNvbmZpZ0F1dG9zaXplOiBBdXRvc2l6ZVR5cGUgfCBBdXRvU2l6ZVBhcmFtcywgaXNVbml0T3JMYXllcjogYm9vbGVhbiA9IHRydWUpOiBBdXRvU2l6ZVBhcmFtcyB7XG4gIGNvbnN0IGF1dG9zaXplOiBBdXRvU2l6ZVBhcmFtcyA9IHtcbiAgICB0eXBlOiAncGFkJyxcbiAgICAuLi5fbm9ybWFsaXplQXV0b1NpemUoY29uZmlnQXV0b3NpemUpLFxuICAgIC4uLl9ub3JtYWxpemVBdXRvU2l6ZSh0b3BMZXZlbEF1dG9zaXplKVxuICB9O1xuXG4gIGlmIChhdXRvc2l6ZS50eXBlID09PSAnZml0Jykge1xuICAgIGlmICghaXNVbml0T3JMYXllcikge1xuICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuRklUX05PTl9TSU5HTEUpO1xuICAgICAgYXV0b3NpemUudHlwZSA9ICdwYWQnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdXRvc2l6ZTtcbn1cblxuY29uc3QgVE9QX0xFVkVMX1BST1BFUlRJRVM6IChrZXlvZiBUb3BMZXZlbFByb3BlcnRpZXMpW10gPSBbXG4gICdiYWNrZ3JvdW5kJywgJ3BhZGRpbmcnLCAnZGF0YXNldHMnXG4gIC8vIFdlIGRvIG5vdCBpbmNsdWRlIFwiYXV0b3NpemVcIiBoZXJlIGFzIGl0IGlzIHN1cHBvcnRlZCBieSBvbmx5IHVuaXQgYW5kIGxheWVyIHNwZWNzIGFuZCB0aHVzIG5lZWQgdG8gYmUgbm9ybWFsaXplZFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RUb3BMZXZlbFByb3BlcnRpZXM8VCBleHRlbmRzIFRvcExldmVsUHJvcGVydGllcz4odDogVCkge1xuICByZXR1cm4gVE9QX0xFVkVMX1BST1BFUlRJRVMucmVkdWNlKChvLCBwKSA9PiB7XG4gICAgaWYgKHQgJiYgdFtwXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvW3BdID0gdFtwXTtcbiAgICB9XG4gICAgcmV0dXJuIG87XG4gIH0sIHt9KTtcbn1cbiJdfQ==","export function isUrlData(data) {\n    return !!data['url'];\n}\nexport function isInlineData(data) {\n    return !!data['values'];\n}\nexport function isNamedData(data) {\n    return !!data['name'];\n}\nexport var MAIN = 'main';\nexport var RAW = 'raw';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRHQSxNQUFNLG9CQUFvQixJQUFxQztJQUM3RCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkIsQ0FBQztBQUVELE1BQU0sdUJBQXVCLElBQXFDO0lBQ2hFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBRUQsTUFBTSxzQkFBc0IsSUFBbUI7SUFDN0MsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFJRCxNQUFNLENBQUMsSUFBTSxJQUFJLEdBQVcsTUFBTSxDQUFDO0FBQ25DLE1BQU0sQ0FBQyxJQUFNLEdBQUcsR0FBVSxLQUFLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29uc3RhbnRzIGFuZCB1dGlsaXRpZXMgZm9yIGRhdGEuXG4gKi9cbmltcG9ydCB7VmdEYXRhfSBmcm9tICcuL3ZlZ2Euc2NoZW1hJztcblxuZXhwb3J0IGludGVyZmFjZSBEYXRhRm9ybWF0QmFzZSB7XG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gYXV0byAodGhlIGRlZmF1bHQpLCBwZXJmb3JtIGF1dG9tYXRpYyB0eXBlIGluZmVyZW5jZSB0byBkZXRlcm1pbmUgdGhlIGRlc2lyZWQgZGF0YSB0eXBlcy5cbiAgICogQWx0ZXJuYXRpdmVseSwgYSBwYXJzaW5nIGRpcmVjdGl2ZSBvYmplY3QgY2FuIGJlIHByb3ZpZGVkIGZvciBleHBsaWNpdCBkYXRhIHR5cGVzLiBFYWNoIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgY29ycmVzcG9uZHMgdG8gYSBmaWVsZCBuYW1lLCBhbmQgdGhlIHZhbHVlIHRvIHRoZSBkZXNpcmVkIGRhdGEgdHlwZSAob25lIG9mIGBcIm51bWJlclwiYCwgYFwiYm9vbGVhblwiYCBvciBgXCJkYXRlXCJgKS5cbiAgICogRm9yIGV4YW1wbGUsIGBcInBhcnNlXCI6IHtcIm1vZGlmaWVkX29uXCI6IFwiZGF0ZVwifWAgcGFyc2VzIHRoZSBgbW9kaWZpZWRfb25gIGZpZWxkIGluIGVhY2ggaW5wdXQgcmVjb3JkIGEgRGF0ZSB2YWx1ZS5cbiAgICpcbiAgICogRm9yIGBcImRhdGVcImAsIHdlIHBhcnNlIGRhdGEgYmFzZWQgdXNpbmcgSmF2YXNjcmlwdCdzIFtgRGF0ZS5wYXJzZSgpYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZS9wYXJzZSkuXG4gICAqIEZvciBTcGVjaWZpYyBkYXRlIGZvcm1hdHMgY2FuIGJlIHByb3ZpZGVkIChlLmcuLCBge2ZvbzogJ2RhdGU6XCIlbSVkJVlcIid9YCksIHVzaW5nIHRoZSBbZDMtdGltZS1mb3JtYXQgc3ludGF4XShodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtdGltZS1mb3JtYXQjbG9jYWxlX2Zvcm1hdCkuIFVUQyBkYXRlIGZvcm1hdCBwYXJzaW5nIGlzIHN1cHBvcnRlZCBzaW1pbGFybHkgKGUuZy4sIGB7Zm9vOiAndXRjOlwiJW0lZCVZXCInfWApLiBTZWUgbW9yZSBhYm91dCBbVVRDIHRpbWVdKHRpbWV1bml0Lmh0bWwjdXRjKVxuICAgKi9cbiAgcGFyc2U/OiAnYXV0bycgfCBvYmplY3Q7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3N2RGF0YUZvcm1hdCBleHRlbmRzIERhdGFGb3JtYXRCYXNlIHtcbiAgLyoqXG4gICAqIFR5cGUgb2YgaW5wdXQgZGF0YTogYFwianNvblwiYCwgYFwiY3N2XCJgLCBgXCJ0c3ZcImAuXG4gICAqIFRoZSBkZWZhdWx0IGZvcm1hdCB0eXBlIGlzIGRldGVybWluZWQgYnkgdGhlIGV4dGVuc2lvbiBvZiB0aGUgZmlsZSBVUkwuXG4gICAqIElmIG5vIGV4dGVuc2lvbiBpcyBkZXRlY3RlZCwgYFwianNvblwiYCB3aWxsIGJlIHVzZWQgYnkgZGVmYXVsdC5cbiAgICovXG4gIHR5cGU/OiAnY3N2JyB8ICd0c3YnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEpzb25EYXRhRm9ybWF0IGV4dGVuZHMgRGF0YUZvcm1hdEJhc2Uge1xuICAvKipcbiAgICogVHlwZSBvZiBpbnB1dCBkYXRhOiBgXCJqc29uXCJgLCBgXCJjc3ZcImAsIGBcInRzdlwiYC5cbiAgICogVGhlIGRlZmF1bHQgZm9ybWF0IHR5cGUgaXMgZGV0ZXJtaW5lZCBieSB0aGUgZXh0ZW5zaW9uIG9mIHRoZSBmaWxlIFVSTC5cbiAgICogSWYgbm8gZXh0ZW5zaW9uIGlzIGRldGVjdGVkLCBgXCJqc29uXCJgIHdpbGwgYmUgdXNlZCBieSBkZWZhdWx0LlxuICAgKi9cbiAgdHlwZT86ICdqc29uJztcbiAgLyoqXG4gICAqIFRoZSBKU09OIHByb3BlcnR5IGNvbnRhaW5pbmcgdGhlIGRlc2lyZWQgZGF0YS5cbiAgICogVGhpcyBwYXJhbWV0ZXIgY2FuIGJlIHVzZWQgd2hlbiB0aGUgbG9hZGVkIEpTT04gZmlsZSBtYXkgaGF2ZSBzdXJyb3VuZGluZyBzdHJ1Y3R1cmUgb3IgbWV0YS1kYXRhLlxuICAgKiBGb3IgZXhhbXBsZSBgXCJwcm9wZXJ0eVwiOiBcInZhbHVlcy5mZWF0dXJlc1wiYCBpcyBlcXVpdmFsZW50IHRvIHJldHJpZXZpbmcgYGpzb24udmFsdWVzLmZlYXR1cmVzYFxuICAgKiBmcm9tIHRoZSBsb2FkZWQgSlNPTiBvYmplY3QuXG4gICAqL1xuICBwcm9wZXJ0eT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb3BvRGF0YUZvcm1hdCBleHRlbmRzIERhdGFGb3JtYXRCYXNlIHtcbiAgLyoqXG4gICAqIFR5cGUgb2YgaW5wdXQgZGF0YTogYFwianNvblwiYCwgYFwiY3N2XCJgLCBgXCJ0c3ZcImAuXG4gICAqIFRoZSBkZWZhdWx0IGZvcm1hdCB0eXBlIGlzIGRldGVybWluZWQgYnkgdGhlIGV4dGVuc2lvbiBvZiB0aGUgZmlsZSBVUkwuXG4gICAqIElmIG5vIGV4dGVuc2lvbiBpcyBkZXRlY3RlZCwgYFwianNvblwiYCB3aWxsIGJlIHVzZWQgYnkgZGVmYXVsdC5cbiAgICovXG4gIHR5cGU/OiAndG9wb2pzb24nO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIFRvcG9KU09OIG9iamVjdCBzZXQgdG8gY29udmVydCB0byBhIEdlb0pTT04gZmVhdHVyZSBjb2xsZWN0aW9uLlxuICAgKiBGb3IgZXhhbXBsZSwgaW4gYSBtYXAgb2YgdGhlIHdvcmxkLCB0aGVyZSBtYXkgYmUgYW4gb2JqZWN0IHNldCBuYW1lZCBgXCJjb3VudHJpZXNcImAuXG4gICAqIFVzaW5nIHRoZSBmZWF0dXJlIHByb3BlcnR5LCB3ZSBjYW4gZXh0cmFjdCB0aGlzIHNldCBhbmQgZ2VuZXJhdGUgYSBHZW9KU09OIGZlYXR1cmUgb2JqZWN0IGZvciBlYWNoIGNvdW50cnkuXG4gICAqL1xuICBmZWF0dXJlPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIFRvcG9KU09OIG9iamVjdCBzZXQgdG8gY29udmVydCB0byBtZXNoLlxuICAgKiBTaW1pbGFyIHRvIHRoZSBgZmVhdHVyZWAgb3B0aW9uLCBgbWVzaGAgZXh0cmFjdHMgYSBuYW1lZCBUb3BvSlNPTiBvYmplY3Qgc2V0LlxuICAgKiAgVW5saWtlIHRoZSBgZmVhdHVyZWAgb3B0aW9uLCB0aGUgY29ycmVzcG9uZGluZyBnZW8gZGF0YSBpcyByZXR1cm5lZCBhcyBhIHNpbmdsZSwgdW5pZmllZCBtZXNoIGluc3RhbmNlLCBub3QgYXMgaW5kaXZpZHVhbCBHZW9KU09OIGZlYXR1cmVzLlxuICAgKiBFeHRyYWN0aW5nIGEgbWVzaCBpcyB1c2VmdWwgZm9yIG1vcmUgZWZmaWNpZW50bHkgZHJhd2luZyBib3JkZXJzIG9yIG90aGVyIGdlb2dyYXBoaWMgZWxlbWVudHMgdGhhdCB5b3UgZG8gbm90IG5lZWQgdG8gYXNzb2NpYXRlIHdpdGggc3BlY2lmaWMgcmVnaW9ucyBzdWNoIGFzIGluZGl2aWR1YWwgY291bnRyaWVzLCBzdGF0ZXMgb3IgY291bnRpZXMuXG4gICAqL1xuICBtZXNoPzogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBEYXRhRm9ybWF0ID0gQ3N2RGF0YUZvcm1hdCB8IEpzb25EYXRhRm9ybWF0IHwgVG9wb0RhdGFGb3JtYXQ7XG5cbmV4cG9ydCB0eXBlIERhdGFGb3JtYXRUeXBlID0gJ2pzb24nIHwgJ2NzdicgfCAndHN2JyB8ICd0b3BvanNvbic7XG5cbmV4cG9ydCB0eXBlIERhdGEgPSBVcmxEYXRhIHwgSW5saW5lRGF0YSB8IE5hbWVkRGF0YTtcblxuZXhwb3J0IHR5cGUgSW5saW5lRGF0YXNldCA9IG51bWJlcltdIHwgc3RyaW5nW10gfCBib29sZWFuW10gfCBvYmplY3RbXSB8IHN0cmluZyB8IG9iamVjdDtcblxuZXhwb3J0IGludGVyZmFjZSBVcmxEYXRhIHtcbiAgLyoqXG4gICAqIEFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyB0aGUgZm9ybWF0IGZvciBwYXJzaW5nIHRoZSBkYXRhIGZpbGUuXG4gICAqL1xuICBmb3JtYXQ/OiBEYXRhRm9ybWF0O1xuXG4gIC8qKlxuICAgKiBBbiBVUkwgZnJvbSB3aGljaCB0byBsb2FkIHRoZSBkYXRhIHNldC4gVXNlIHRoZSBgZm9ybWF0LnR5cGVgIHByb3BlcnR5XG4gICAqIHRvIGVuc3VyZSB0aGUgbG9hZGVkIGRhdGEgaXMgY29ycmVjdGx5IHBhcnNlZC5cbiAgICovXG4gIHVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElubGluZURhdGEge1xuICAvKipcbiAgICogQW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIHRoZSBmb3JtYXQgZm9yIHBhcnNpbmcgdGhlIGRhdGEgdmFsdWVzLlxuICAgKi9cbiAgZm9ybWF0PzogRGF0YUZvcm1hdDtcbiAgLyoqXG4gICAqIFRoZSBmdWxsIGRhdGEgc2V0LCBpbmNsdWRlZCBpbmxpbmUuIFRoaXMgY2FuIGJlIGFuIGFycmF5IG9mIG9iamVjdHMgb3IgcHJpbWl0aXZlIHZhbHVlcyBvciBhIHN0cmluZy5cbiAgICogQXJyYXlzIG9mIHByaW1pdGl2ZSB2YWx1ZXMgYXJlIGluZ2VzdGVkIGFzIG9iamVjdHMgd2l0aCBhIGBkYXRhYCBwcm9wZXJ0eS4gU3RyaW5ncyBhcmUgcGFyc2VkIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGZvcm1hdCB0eXBlLlxuICAgKi9cbiAgdmFsdWVzOiBJbmxpbmVEYXRhc2V0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hbWVkRGF0YSB7XG4gIC8qKlxuICAgKiBBbiBvYmplY3QgdGhhdCBzcGVjaWZpZXMgdGhlIGZvcm1hdCBmb3IgcGFyc2luZyB0aGUgZGF0YS5cbiAgICovXG4gIGZvcm1hdD86IERhdGFGb3JtYXQ7XG4gIC8qKlxuICAgKiBQcm92aWRlIGEgcGxhY2Vob2xkZXIgbmFtZSBhbmQgYmluZCBkYXRhIGF0IHJ1bnRpbWUuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1VybERhdGEoZGF0YTogUGFydGlhbDxEYXRhPiB8IFBhcnRpYWw8VmdEYXRhPik6IGRhdGEgaXMgVXJsRGF0YSB7XG4gIHJldHVybiAhIWRhdGFbJ3VybCddO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJbmxpbmVEYXRhKGRhdGE6IFBhcnRpYWw8RGF0YT4gfCBQYXJ0aWFsPFZnRGF0YT4pOiBkYXRhIGlzIElubGluZURhdGEge1xuICByZXR1cm4gISFkYXRhWyd2YWx1ZXMnXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTmFtZWREYXRhKGRhdGE6IFBhcnRpYWw8RGF0YT4pOiBkYXRhIGlzIE5hbWVkRGF0YSB7XG4gIHJldHVybiAhIWRhdGFbJ25hbWUnXTtcbn1cblxuZXhwb3J0IHR5cGUgRGF0YVNvdXJjZVR5cGUgPSAncmF3JyB8ICdtYWluJyB8ICdyb3cnIHwgJ2NvbHVtbicgfCAnbG9va3VwJztcblxuZXhwb3J0IGNvbnN0IE1BSU46ICdtYWluJyA9ICdtYWluJztcbmV4cG9ydCBjb25zdCBSQVc6ICdyYXcnID0gJ3Jhdyc7XG4iXX0=","/**\n * Parse an event selector string.\n * Returns an array of event stream definitions.\n */\nexport default function(selector, source, marks) {\n  DEFAULT_SOURCE = source || VIEW;\n  MARKS = marks || DEFAULT_MARKS;\n  return parseMerge(selector.trim()).map(parseSelector);\n}\n\nvar VIEW    = 'view',\n    LBRACK  = '[',\n    RBRACK  = ']',\n    LBRACE  = '{',\n    RBRACE  = '}',\n    COLON   = ':',\n    COMMA   = ',',\n    NAME    = '@',\n    GT      = '>',\n    ILLEGAL = /[[\\]{}]/,\n    DEFAULT_SOURCE,\n    MARKS,\n    DEFAULT_MARKS = {\n      '*': 1,\n      arc: 1,\n      area: 1,\n      group: 1,\n      image: 1,\n      line: 1,\n      path: 1,\n      rect: 1,\n      rule: 1,\n      shape: 1,\n      symbol: 1,\n      text: 1,\n      trail: 1\n    };\n\nfunction isMarkType(type) {\n  return MARKS.hasOwnProperty(type);\n}\n\nfunction find(s, i, endChar, pushChar, popChar) {\n  var count = 0,\n      n = s.length,\n      c;\n  for (; i<n; ++i) {\n    c = s[i];\n    if (!count && c === endChar) return i;\n    else if (popChar && popChar.indexOf(c) >= 0) --count;\n    else if (pushChar && pushChar.indexOf(c) >= 0) ++count;\n  }\n  return i;\n}\n\nfunction parseMerge(s) {\n  var output = [],\n      start = 0,\n      n = s.length,\n      i = 0;\n\n  while (i < n) {\n    i = find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);\n    output.push(s.substring(start, i).trim());\n    start = ++i;\n  }\n\n  if (output.length === 0) {\n    throw 'Empty event selector: ' + s;\n  }\n  return output;\n}\n\nfunction parseSelector(s) {\n  return s[0] === '['\n    ? parseBetween(s)\n    : parseStream(s);\n}\n\nfunction parseBetween(s) {\n  var n = s.length,\n      i = 1,\n      b, stream;\n\n  i = find(s, i, RBRACK, LBRACK, RBRACK);\n  if (i === n) {\n    throw 'Empty between selector: ' + s;\n  }\n\n  b = parseMerge(s.substring(1, i));\n  if (b.length !== 2) {\n    throw 'Between selector must have two elements: ' + s;\n  }\n\n  s = s.slice(i + 1).trim();\n  if (s[0] !== GT) {\n    throw 'Expected \\'>\\' after between selector: ' + s;\n  }\n\n  b = b.map(parseSelector);\n\n  stream = parseSelector(s.slice(1).trim());\n  if (stream.between) {\n    return {\n      between: b,\n      stream: stream\n    };\n  } else {\n    stream.between = b;\n  }\n\n  return stream;\n}\n\nfunction parseStream(s) {\n  var stream = {source: DEFAULT_SOURCE},\n      source = [],\n      throttle = [0, 0],\n      markname = 0,\n      start = 0,\n      n = s.length,\n      i = 0, j,\n      filter;\n\n  // extract throttle from end\n  if (s[n-1] === RBRACE) {\n    i = s.lastIndexOf(LBRACE);\n    if (i >= 0) {\n      try {\n        throttle = parseThrottle(s.substring(i+1, n-1));\n      } catch (e) {\n        throw 'Invalid throttle specification: ' + s;\n      }\n      s = s.slice(0, i).trim();\n      n = s.length;\n    } else throw 'Unmatched right brace: ' + s;\n    i = 0;\n  }\n\n  if (!n) throw s;\n\n  // set name flag based on first char\n  if (s[0] === NAME) markname = ++i;\n\n  // extract first part of multi-part stream selector\n  j = find(s, i, COLON);\n  if (j < n) {\n    source.push(s.substring(start, j).trim());\n    start = i = ++j;\n  }\n\n  // extract remaining part of stream selector\n  i = find(s, i, LBRACK);\n  if (i === n) {\n    source.push(s.substring(start, n).trim());\n  } else {\n    source.push(s.substring(start, i).trim());\n    filter = [];\n    start = ++i;\n    if (start === n) throw 'Unmatched left bracket: ' + s;\n  }\n\n  // extract filters\n  while (i < n) {\n    i = find(s, i, RBRACK);\n    if (i === n) throw 'Unmatched left bracket: ' + s;\n    filter.push(s.substring(start, i).trim());\n    if (i < n-1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;\n    start = ++i;\n  }\n\n  // marshall event stream specification\n  if (!(n = source.length) || ILLEGAL.test(source[n-1])) {\n    throw 'Invalid event selector: ' + s;\n  }\n\n  if (n > 1) {\n    stream.type = source[1];\n    if (markname) {\n      stream.markname = source[0].slice(1);\n    } else if (isMarkType(source[0])) {\n      stream.marktype = source[0];\n    } else {\n      stream.source = source[0];\n    }\n  } else {\n    stream.type = source[0];\n  }\n  if (stream.type.slice(-1) === '!') {\n    stream.consume = true;\n    stream.type = stream.type.slice(0, -1)\n  }\n  if (filter != null) stream.filter = filter;\n  if (throttle[0]) stream.throttle = throttle[0];\n  if (throttle[1]) stream.debounce = throttle[1];\n\n  return stream;\n}\n\nfunction parseThrottle(s) {\n  var a = s.split(COMMA);\n  if (!s.length || a.length > 2) throw s;\n  return a.map(function(_) {\n    var x = +_;\n    if (x !== x) throw s;\n    return x;\n  });\n}\n","import { normalizeLogicalOperand } from './logical';\nimport { normalizePredicate } from './predicate';\nexport function isFilter(t) {\n    return t['filter'] !== undefined;\n}\nexport function isLookup(t) {\n    return t['lookup'] !== undefined;\n}\nexport function isWindow(t) {\n    return t['window'] !== undefined;\n}\nexport function isCalculate(t) {\n    return t['calculate'] !== undefined;\n}\nexport function isBin(t) {\n    return !!t['bin'];\n}\nexport function isTimeUnit(t) {\n    return t['timeUnit'] !== undefined;\n}\nexport function isAggregate(t) {\n    return t['aggregate'] !== undefined;\n}\nexport function normalizeTransform(transform) {\n    return transform.map(function (t) {\n        if (isFilter(t)) {\n            return {\n                filter: normalizeLogicalOperand(t.filter, normalizePredicate)\n            };\n        }\n        return t;\n    });\n}\n//# sourceMappingURL=data:application/json;base64,","import { isArray } from 'vega-util';\nimport { flagKeys } from './util';\nexport function isVgSignalRef(o) {\n    return !!o['signal'];\n}\nexport function isVgRangeStep(range) {\n    return !!range['step'];\n}\nexport function isDataRefUnionedDomain(domain) {\n    if (!isArray(domain)) {\n        return 'fields' in domain && !('data' in domain);\n    }\n    return false;\n}\nexport function isFieldRefUnionDomain(domain) {\n    if (!isArray(domain)) {\n        return 'fields' in domain && 'data' in domain;\n    }\n    return false;\n}\nexport function isDataRefDomain(domain) {\n    if (!isArray(domain)) {\n        return 'field' in domain && 'data' in domain;\n    }\n    return false;\n}\nexport function isSignalRefDomain(domain) {\n    if (!isArray(domain)) {\n        return 'signal' in domain;\n    }\n    return false;\n}\nvar VG_MARK_CONFIG_INDEX = {\n    opacity: 1,\n    fill: 1,\n    fillOpacity: 1,\n    stroke: 1,\n    strokeCap: 1,\n    strokeWidth: 1,\n    strokeOpacity: 1,\n    strokeDash: 1,\n    strokeDashOffset: 1,\n    size: 1,\n    shape: 1,\n    interpolate: 1,\n    tension: 1,\n    orient: 1,\n    align: 1,\n    baseline: 1,\n    text: 1,\n    limit: 1,\n    dx: 1,\n    dy: 1,\n    radius: 1,\n    theta: 1,\n    angle: 1,\n    font: 1,\n    fontSize: 1,\n    fontWeight: 1,\n    fontStyle: 1,\n    cursor: 1,\n    href: 1,\n};\nexport var VG_MARK_CONFIGS = flagKeys(VG_MARK_CONFIG_INDEX);\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { AXIS_PARTS, AXIS_PROPERTY_TYPE } from '../../axis';\nimport { title as fieldDefTitle } from '../../fielddef';\nimport { keys } from '../../util';\nfunction assembleTitle(title, config) {\n    if (isArray(title)) {\n        return title.map(function (fieldDef) { return fieldDefTitle(fieldDef, config); }).join(', ');\n    }\n    return title;\n}\nexport function assembleAxis(axisCmpt, kind, config, opt) {\n    if (opt === void 0) { opt = { header: false }; }\n    var _a = axisCmpt.combine(), orient = _a.orient, scale = _a.scale, title = _a.title, zindex = _a.zindex, axis = tslib_1.__rest(_a, [\"orient\", \"scale\", \"title\", \"zindex\"]);\n    // Remove properties that are not valid for this kind of axis\n    keys(axis).forEach(function (key) {\n        var propType = AXIS_PROPERTY_TYPE[key];\n        if (propType && propType !== kind && propType !== 'both') {\n            delete axis[key];\n        }\n    });\n    if (kind === 'grid') {\n        if (!axis.grid) {\n            return undefined;\n        }\n        // Remove unnecessary encode block\n        if (axis.encode) {\n            // Only need to keep encode block for grid\n            var grid = axis.encode.grid;\n            axis.encode = tslib_1.__assign({}, (grid ? { grid: grid } : {}));\n            if (keys(axis.encode).length === 0) {\n                delete axis.encode;\n            }\n        }\n        return tslib_1.__assign({ scale: scale,\n            orient: orient }, axis, { domain: false, labels: false, \n            // Always set min/maxExtent to 0 to ensure that `config.axis*.minExtent` and `config.axis*.maxExtent`\n            // would not affect gridAxis\n            maxExtent: 0, minExtent: 0, ticks: false, zindex: zindex !== undefined ? zindex : 0 // put grid behind marks by default\n         });\n    }\n    else { // kind === 'main'\n        if (!opt.header && axisCmpt.mainExtracted) {\n            // if mainExtracted has been extracted to a separate facet\n            return undefined;\n        }\n        // Remove unnecessary encode block\n        if (axis.encode) {\n            for (var _i = 0, AXIS_PARTS_1 = AXIS_PARTS; _i < AXIS_PARTS_1.length; _i++) {\n                var part = AXIS_PARTS_1[_i];\n                if (!axisCmpt.hasAxisPart(part)) {\n                    delete axis.encode[part];\n                }\n            }\n            if (keys(axis.encode).length === 0) {\n                delete axis.encode;\n            }\n        }\n        var titleString = assembleTitle(title, config);\n        return tslib_1.__assign({ scale: scale,\n            orient: orient }, (titleString ? { title: titleString } : {}), axis, { zindex: zindex !== undefined ? zindex : 1 // put axis line above marks by default\n         });\n    }\n}\nexport function assembleAxes(axisComponents, config) {\n    var _a = axisComponents.x, x = _a === void 0 ? [] : _a, _b = axisComponents.y, y = _b === void 0 ? [] : _b;\n    return x.map(function (a) { return assembleAxis(a, 'main', config); }).concat(x.map(function (a) { return assembleAxis(a, 'grid', config); }), y.map(function (a) { return assembleAxis(a, 'main', config); }), y.map(function (a) { return assembleAxis(a, 'grid', config); })).filter(function (a) { return a; }); // filter undefined\n}\n//# sourceMappingURL=data:application/json;base64,","import { isArray } from 'vega-util';\nimport { isScaleChannel } from '../channel';\nimport { isScaleFieldDef, isTimeFieldDef, vgField } from '../fielddef';\nimport { ScaleType } from '../scale';\nimport { formatExpression } from '../timeunit';\nimport { QUANTITATIVE } from '../type';\nimport { contains, stringify } from '../util';\nexport function applyConfig(e, config, // TODO(#1842): consolidate MarkConfig | TextConfig?\npropsList) {\n    for (var _i = 0, propsList_1 = propsList; _i < propsList_1.length; _i++) {\n        var property = propsList_1[_i];\n        var value = config[property];\n        if (value !== undefined) {\n            e[property] = { value: value };\n        }\n    }\n    return e;\n}\nexport function applyMarkConfig(e, model, propsList) {\n    for (var _i = 0, propsList_2 = propsList; _i < propsList_2.length; _i++) {\n        var property = propsList_2[_i];\n        var value = getMarkConfig(property, model.markDef, model.config);\n        if (value !== undefined) {\n            e[property] = { value: value };\n        }\n    }\n    return e;\n}\nexport function getStyles(mark) {\n    return [].concat(mark.type, mark.style || []);\n}\n/**\n * Return property value from style or mark specific config property if exists.\n * Otherwise, return general mark specific config.\n */\nexport function getMarkConfig(prop, mark, config) {\n    // By default, read from mark config first!\n    var value = config.mark[prop];\n    // Then read mark specific config, which has higher precedence\n    var markSpecificConfig = config[mark.type];\n    if (markSpecificConfig[prop] !== undefined) {\n        value = markSpecificConfig[prop];\n    }\n    // Then read style config, which has even higher precedence.\n    var styles = getStyles(mark);\n    for (var _i = 0, styles_1 = styles; _i < styles_1.length; _i++) {\n        var style = styles_1[_i];\n        var styleConfig = config.style[style];\n        // MarkConfig extends VgMarkConfig so a prop may not be a valid property for style\n        // However here we also check if it is defined, so it is okay to cast here\n        var p = prop;\n        if (styleConfig && styleConfig[p] !== undefined) {\n            value = styleConfig[p];\n        }\n    }\n    return value;\n}\nexport function formatSignalRef(fieldDef, specifiedFormat, expr, config) {\n    var format = numberFormat(fieldDef, specifiedFormat, config);\n    if (fieldDef.bin) {\n        var startField = vgField(fieldDef, { expr: expr });\n        var endField = vgField(fieldDef, { expr: expr, binSuffix: 'end' });\n        return {\n            signal: binFormatExpression(startField, endField, format, config)\n        };\n    }\n    else if (fieldDef.type === 'quantitative') {\n        return {\n            signal: \"\" + formatExpr(vgField(fieldDef, { expr: expr, binSuffix: 'range' }), format)\n        };\n    }\n    else if (isTimeFieldDef(fieldDef)) {\n        var isUTCScale = isScaleFieldDef(fieldDef) && fieldDef['scale'] && fieldDef['scale'].type === ScaleType.UTC;\n        return {\n            signal: timeFormatExpression(vgField(fieldDef, { expr: expr }), fieldDef.timeUnit, specifiedFormat, config.text.shortTimeLabels, config.timeFormat, isUTCScale)\n        };\n    }\n    else {\n        return {\n            signal: \"''+\" + vgField(fieldDef, { expr: expr })\n        };\n    }\n}\nexport function getSpecifiedOrDefaultValue(specifiedValue, defaultValue) {\n    if (specifiedValue !== undefined) {\n        return specifiedValue;\n    }\n    return defaultValue;\n}\n/**\n * Returns number format for a fieldDef\n *\n * @param format explicitly specified format\n */\nexport function numberFormat(fieldDef, specifiedFormat, config) {\n    if (fieldDef.type === QUANTITATIVE) {\n        // add number format for quantitative type only\n        // Specified format in axis/legend has higher precedence than fieldDef.format\n        if (specifiedFormat) {\n            return specifiedFormat;\n        }\n        // TODO: need to make this work correctly for numeric ordinal / nominal type\n        return config.numberFormat;\n    }\n    return undefined;\n}\nfunction formatExpr(field, format) {\n    return \"format(\" + field + \", \\\"\" + (format || '') + \"\\\")\";\n}\nexport function numberFormatExpr(field, specifiedFormat, config) {\n    return formatExpr(field, specifiedFormat || config.numberFormat);\n}\nexport function binFormatExpression(startField, endField, format, config) {\n    return startField + \" === null || isNaN(\" + startField + \") ? \\\"null\\\" : \" + numberFormatExpr(startField, format, config) + \" + \\\" - \\\" + \" + numberFormatExpr(endField, format, config);\n}\n/**\n * Returns the time expression used for axis/legend labels or text mark for a temporal field\n */\nexport function timeFormatExpression(field, timeUnit, format, shortTimeLabels, timeFormatConfig, isUTCScale) {\n    if (!timeUnit || format) {\n        // If there is not time unit, or if user explicitly specify format for axis/legend/text.\n        var _format = format || timeFormatConfig; // only use config.timeFormat if there is no timeUnit.\n        if (isUTCScale) {\n            return \"utcFormat(\" + field + \", '\" + _format + \"')\";\n        }\n        else {\n            return \"timeFormat(\" + field + \", '\" + _format + \"')\";\n        }\n    }\n    else {\n        return formatExpression(timeUnit, field, shortTimeLabels, isUTCScale);\n    }\n}\n/**\n * Return Vega sort parameters (tuple of field and order).\n */\nexport function sortParams(orderDef, fieldRefOption) {\n    return (isArray(orderDef) ? orderDef : [orderDef]).reduce(function (s, orderChannelDef) {\n        s.field.push(vgField(orderChannelDef, fieldRefOption));\n        s.order.push(orderChannelDef.sort || 'ascending');\n        return s;\n    }, { field: [], order: [] });\n}\nexport function mergeTitleFieldDefs(f1, f2) {\n    var merged = f1.slice();\n    f2.forEach(function (fdToMerge) {\n        for (var _i = 0, merged_1 = merged; _i < merged_1.length; _i++) {\n            var fieldDef1 = merged_1[_i];\n            // If already exists, no need to append to merged array\n            if (stringify(fieldDef1) === stringify(fdToMerge)) {\n                return;\n            }\n        }\n        merged.push(fdToMerge);\n    });\n    return merged;\n}\nexport function titleMerger(v1, v2) {\n    if (isArray(v1.value) && isArray(v2.value)) {\n        return {\n            explicit: v1.explicit,\n            value: mergeTitleFieldDefs(v1.value, v2.value)\n        };\n    }\n    else if (!isArray(v1.value) && !isArray(v2.value)) {\n        return {\n            explicit: v1.explicit,\n            value: v1.value === v2.value ?\n                v1.value : // if title is the same just use one of them\n                v1.value + ', ' + v2.value // join title with comma if different\n        };\n    }\n    /* istanbul ignore next: Condition should not happen -- only for warning in development. */\n    throw new Error('It should never reach here');\n}\n/**\n * Checks whether a fieldDef for a particular channel requires a computed bin range.\n */\nexport function binRequiresRange(fieldDef, channel) {\n    if (!fieldDef.bin) {\n        console.warn('Only use this method with binned field defs');\n        return false;\n    }\n    // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.\n    // We could check whether the axis or legend exists (not disabled) but that seems overkill.\n    return isScaleChannel(channel) && contains(['ordinal', 'nominal'], fieldDef.type);\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { vgField } from '../../fielddef';\nimport { keys } from '../../util';\nimport { formatSignalRef } from '../common';\nexport var HEADER_CHANNELS = ['row', 'column'];\nexport var HEADER_TYPES = ['header', 'footer'];\nexport function getHeaderType(orient) {\n    if (orient === 'top' || orient === 'left') {\n        return 'header';\n    }\n    return 'footer';\n}\nexport function getTitleGroup(model, channel) {\n    var title = model.component.layoutHeaders[channel].title;\n    var textOrient = channel === 'row' ? 'vertical' : undefined;\n    var update = tslib_1.__assign({ align: { value: 'center' }, text: { value: title } }, (textOrient === 'vertical' ? { angle: { value: 270 } } : {}));\n    return {\n        name: model.getName(channel + \"_title\"),\n        role: channel + \"-title\",\n        type: 'group',\n        marks: [tslib_1.__assign({ type: 'text', role: channel + \"-title-text\", style: 'guide-title' }, (keys(update).length > 0 ? { encode: { update: update } } : {}))]\n    };\n}\nexport function getHeaderGroups(model, channel) {\n    var layoutHeader = model.component.layoutHeaders[channel];\n    var groups = [];\n    for (var _i = 0, HEADER_TYPES_1 = HEADER_TYPES; _i < HEADER_TYPES_1.length; _i++) {\n        var headerType = HEADER_TYPES_1[_i];\n        if (layoutHeader[headerType]) {\n            for (var _a = 0, _b = layoutHeader[headerType]; _a < _b.length; _a++) {\n                var headerCmpt = _b[_a];\n                groups.push(getHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt));\n            }\n        }\n    }\n    return groups;\n}\n// 0, (0,90), 90, (90, 180), 180, (180, 270), 270, (270, 0)\nexport function labelAlign(angle) {\n    // to keep angle in [0, 360)\n    angle = ((angle % 360) + 360) % 360;\n    if ((angle + 90) % 180 === 0) { // for 90 and 270\n        return {}; // default center\n    }\n    else if (angle < 90 || 270 < angle) {\n        return { align: { value: 'right' } };\n    }\n    else if (135 <= angle && angle < 225) {\n        return { align: { value: 'left' } };\n    }\n    return {};\n}\nexport function labelBaseline(angle) {\n    // to keep angle in [0, 360)\n    angle = ((angle % 360) + 360) % 360;\n    if (45 <= angle && angle <= 135) {\n        return { baseline: { value: 'top' } };\n    }\n    return {};\n}\nfunction getHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt) {\n    if (headerCmpt) {\n        var title = null;\n        var facetFieldDef = layoutHeader.facetFieldDef;\n        if (facetFieldDef && headerCmpt.labels) {\n            var _a = facetFieldDef.header, header = _a === void 0 ? {} : _a;\n            var format = header.format, labelAngle = header.labelAngle;\n            var update = tslib_1.__assign({}, (labelAngle !== undefined ? { angle: { value: labelAngle } } : {}), labelAlign(labelAngle), labelBaseline(labelAngle));\n            title = tslib_1.__assign({ text: formatSignalRef(facetFieldDef, format, 'parent', model.config), offset: 10, orient: channel === 'row' ? 'left' : 'top', style: 'guide-label' }, (keys(update).length > 0 ? { encode: { update: update } } : {}));\n        }\n        var axes = headerCmpt.axes;\n        var hasAxes = axes && axes.length > 0;\n        if (title || hasAxes) {\n            var sizeChannel = channel === 'row' ? 'height' : 'width';\n            return tslib_1.__assign({ name: model.getName(channel + \"_\" + headerType), type: 'group', role: channel + \"-\" + headerType }, (layoutHeader.facetFieldDef ? {\n                from: { data: model.getName(channel + '_domain') },\n                sort: {\n                    field: vgField(facetFieldDef, { expr: 'datum' }),\n                    order: facetFieldDef.sort || 'ascending'\n                }\n            } : {}), (title ? { title: title } : {}), (headerCmpt.sizeSignal ? {\n                encode: {\n                    update: (_b = {},\n                        _b[sizeChannel] = headerCmpt.sizeSignal,\n                        _b)\n                }\n            } : {}), (hasAxes ? { axes: axes } : {}));\n        }\n    }\n    return null;\n    var _b;\n}\n//# sourceMappingURL=data:application/json;base64,","import { hasDiscreteDomain } from '../../scale';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { isFacetModel } from '../model';\nexport function assembleLayoutSignals(model) {\n    return [].concat(sizeSignals(model, 'width'), sizeSignals(model, 'height'));\n}\nexport function sizeSignals(model, sizeType) {\n    var channel = sizeType === 'width' ? 'x' : 'y';\n    var size = model.component.layoutSize.get(sizeType);\n    if (!size || size === 'merged') {\n        return [];\n    }\n    // Read size signal name from name map, just in case it is the top-level size signal that got renamed.\n    var name = model.getSizeSignalRef(sizeType).signal;\n    if (size === 'range-step') {\n        var scaleComponent = model.getScaleComponent(channel);\n        if (scaleComponent) {\n            var type = scaleComponent.get('type');\n            var range = scaleComponent.get('range');\n            if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                var scaleName = model.scaleName(channel);\n                if (isFacetModel(model.parent)) {\n                    // If parent is facet and this is an independent scale, return only signal signal\n                    // as the width/height will be calculated using the cardinality from\n                    // facet's aggregate rather than reading from scale domain\n                    var parentResolve = model.parent.component.resolve;\n                    if (parentResolve.scale[channel] === 'independent') {\n                        return [stepSignal(scaleName, range)];\n                    }\n                }\n                return [\n                    stepSignal(scaleName, range),\n                    {\n                        name: name,\n                        update: sizeExpr(scaleName, scaleComponent, \"domain('\" + scaleName + \"').length\")\n                    }\n                ];\n            }\n        }\n        /* istanbul ignore next: Condition should not happen -- only for warning in development. */\n        throw new Error('layout size is range step although there is no rangeStep.');\n    }\n    else {\n        return [{\n                name: name,\n                value: size\n            }];\n    }\n}\nfunction stepSignal(scaleName, range) {\n    return {\n        name: scaleName + '_step',\n        value: range.step,\n    };\n}\nexport function sizeExpr(scaleName, scaleComponent, cardinality) {\n    var type = scaleComponent.get('type');\n    var padding = scaleComponent.get('padding');\n    var paddingOuter = scaleComponent.get('paddingOuter');\n    paddingOuter = paddingOuter !== undefined ? paddingOuter : padding;\n    var paddingInner = scaleComponent.get('paddingInner');\n    paddingInner = type === 'band' ?\n        // only band has real paddingInner\n        (paddingInner !== undefined ? paddingInner : padding) :\n        // For point, as calculated in https://github.com/vega/vega-scale/blob/master/src/band.js#L128,\n        // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.\n        1;\n    return \"bandspace(\" + cardinality + \", \" + paddingInner + \", \" + paddingOuter + \") * \" + scaleName + \"_step\";\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9sYXlvdXRzaXplL2Fzc2VtYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUM5QyxPQUFPLEVBQUMsYUFBYSxFQUF3QixNQUFNLG1CQUFtQixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxZQUFZLEVBQVEsTUFBTSxVQUFVLENBQUM7QUFHN0MsTUFBTSxnQ0FBZ0MsS0FBWTtJQUNoRCxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQ2QsV0FBVyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsRUFDM0IsV0FBVyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FDN0IsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLHNCQUFzQixLQUFZLEVBQUUsUUFBNEI7SUFDcEUsSUFBTSxPQUFPLEdBQUcsUUFBUSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDakQsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RELElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUM5QixPQUFPLEVBQUUsQ0FBQztLQUNYO0lBRUQsc0dBQXNHO0lBQ3RHLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFFckQsSUFBSSxJQUFJLEtBQUssWUFBWSxFQUFFO1FBQ3pCLElBQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV4RCxJQUFJLGNBQWMsRUFBRTtZQUNsQixJQUFNLElBQUksR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hDLElBQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFMUMsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ25ELElBQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBRTNDLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtvQkFDOUIsaUZBQWlGO29CQUNqRixvRUFBb0U7b0JBQ3BFLDBEQUEwRDtvQkFDMUQsSUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO29CQUNyRCxJQUFJLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssYUFBYSxFQUFFO3dCQUNsRCxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO3FCQUN2QztpQkFDRjtnQkFFRCxPQUFPO29CQUNMLFVBQVUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO29CQUM1Qjt3QkFDRSxJQUFJLE1BQUE7d0JBQ0osTUFBTSxFQUFFLFFBQVEsQ0FBQyxTQUFTLEVBQUUsY0FBYyxFQUFFLGFBQVcsU0FBUyxjQUFXLENBQUM7cUJBQzdFO2lCQUNGLENBQUM7YUFDSDtTQUNGO1FBQ0QsMkZBQTJGO1FBQzNGLE1BQU0sSUFBSSxLQUFLLENBQUMsMkRBQTJELENBQUMsQ0FBQztLQUM5RTtTQUFNO1FBQ0wsT0FBTyxDQUFDO2dCQUNOLElBQUksTUFBQTtnQkFDSixLQUFLLEVBQUUsSUFBSTthQUNaLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQztBQUVELG9CQUFvQixTQUFpQixFQUFFLEtBQWtCO0lBQ3ZELE9BQU87UUFDTCxJQUFJLEVBQUUsU0FBUyxHQUFHLE9BQU87UUFDekIsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJO0tBQ2xCLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxtQkFBbUIsU0FBaUIsRUFBRSxjQUE4QixFQUFFLFdBQW1CO0lBQzdGLElBQU0sSUFBSSxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEMsSUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM5QyxJQUFJLFlBQVksR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3RELFlBQVksR0FBRyxZQUFZLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUVuRSxJQUFJLFlBQVksR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3RELFlBQVksR0FBRyxJQUFJLEtBQUssTUFBTSxDQUFDLENBQUM7UUFDOUIsa0NBQWtDO1FBQ2xDLENBQUMsWUFBWSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELCtGQUErRjtRQUMvRiwyRkFBMkY7UUFDM0YsQ0FBQyxDQUFDO0lBQ0osT0FBTyxlQUFhLFdBQVcsVUFBSyxZQUFZLFVBQUssWUFBWSxZQUFPLFNBQVMsVUFBTyxDQUFDO0FBQzNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7aGFzRGlzY3JldGVEb21haW59IGZyb20gJy4uLy4uL3NjYWxlJztcbmltcG9ydCB7aXNWZ1JhbmdlU3RlcCwgVmdSYW5nZVN0ZXAsIFZnU2lnbmFsfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge2lzRmFjZXRNb2RlbCwgTW9kZWx9IGZyb20gJy4uL21vZGVsJztcbmltcG9ydCB7U2NhbGVDb21wb25lbnR9IGZyb20gJy4uL3NjYWxlL2NvbXBvbmVudCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlbWJsZUxheW91dFNpZ25hbHMobW9kZWw6IE1vZGVsKTogVmdTaWduYWxbXSB7XG4gIHJldHVybiBbXS5jb25jYXQoXG4gICAgc2l6ZVNpZ25hbHMobW9kZWwsICd3aWR0aCcpLFxuICAgIHNpemVTaWduYWxzKG1vZGVsLCAnaGVpZ2h0JylcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpemVTaWduYWxzKG1vZGVsOiBNb2RlbCwgc2l6ZVR5cGU6ICd3aWR0aCcgfCAnaGVpZ2h0Jyk6IFZnU2lnbmFsW10ge1xuICBjb25zdCBjaGFubmVsID0gc2l6ZVR5cGUgPT09ICd3aWR0aCcgPyAneCcgOiAneSc7XG4gIGNvbnN0IHNpemUgPSBtb2RlbC5jb21wb25lbnQubGF5b3V0U2l6ZS5nZXQoc2l6ZVR5cGUpO1xuICBpZiAoIXNpemUgfHwgc2l6ZSA9PT0gJ21lcmdlZCcpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvLyBSZWFkIHNpemUgc2lnbmFsIG5hbWUgZnJvbSBuYW1lIG1hcCwganVzdCBpbiBjYXNlIGl0IGlzIHRoZSB0b3AtbGV2ZWwgc2l6ZSBzaWduYWwgdGhhdCBnb3QgcmVuYW1lZC5cbiAgY29uc3QgbmFtZSA9IG1vZGVsLmdldFNpemVTaWduYWxSZWYoc2l6ZVR5cGUpLnNpZ25hbDtcblxuICBpZiAoc2l6ZSA9PT0gJ3JhbmdlLXN0ZXAnKSB7XG4gICAgY29uc3Qgc2NhbGVDb21wb25lbnQgPSBtb2RlbC5nZXRTY2FsZUNvbXBvbmVudChjaGFubmVsKTtcblxuICAgIGlmIChzY2FsZUNvbXBvbmVudCkge1xuICAgICAgY29uc3QgdHlwZSA9IHNjYWxlQ29tcG9uZW50LmdldCgndHlwZScpO1xuICAgICAgY29uc3QgcmFuZ2UgPSBzY2FsZUNvbXBvbmVudC5nZXQoJ3JhbmdlJyk7XG5cbiAgICAgIGlmIChoYXNEaXNjcmV0ZURvbWFpbih0eXBlKSAmJiBpc1ZnUmFuZ2VTdGVwKHJhbmdlKSkge1xuICAgICAgICBjb25zdCBzY2FsZU5hbWUgPSBtb2RlbC5zY2FsZU5hbWUoY2hhbm5lbCk7XG5cbiAgICAgICAgaWYgKGlzRmFjZXRNb2RlbChtb2RlbC5wYXJlbnQpKSB7XG4gICAgICAgICAgLy8gSWYgcGFyZW50IGlzIGZhY2V0IGFuZCB0aGlzIGlzIGFuIGluZGVwZW5kZW50IHNjYWxlLCByZXR1cm4gb25seSBzaWduYWwgc2lnbmFsXG4gICAgICAgICAgLy8gYXMgdGhlIHdpZHRoL2hlaWdodCB3aWxsIGJlIGNhbGN1bGF0ZWQgdXNpbmcgdGhlIGNhcmRpbmFsaXR5IGZyb21cbiAgICAgICAgICAvLyBmYWNldCdzIGFnZ3JlZ2F0ZSByYXRoZXIgdGhhbiByZWFkaW5nIGZyb20gc2NhbGUgZG9tYWluXG4gICAgICAgICAgY29uc3QgcGFyZW50UmVzb2x2ZSA9IG1vZGVsLnBhcmVudC5jb21wb25lbnQucmVzb2x2ZTtcbiAgICAgICAgICBpZiAocGFyZW50UmVzb2x2ZS5zY2FsZVtjaGFubmVsXSA9PT0gJ2luZGVwZW5kZW50Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtzdGVwU2lnbmFsKHNjYWxlTmFtZSwgcmFuZ2UpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIHN0ZXBTaWduYWwoc2NhbGVOYW1lLCByYW5nZSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHVwZGF0ZTogc2l6ZUV4cHIoc2NhbGVOYW1lLCBzY2FsZUNvbXBvbmVudCwgYGRvbWFpbignJHtzY2FsZU5hbWV9JykubGVuZ3RoYClcbiAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICB9XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBDb25kaXRpb24gc2hvdWxkIG5vdCBoYXBwZW4gLS0gb25seSBmb3Igd2FybmluZyBpbiBkZXZlbG9wbWVudC4gKi9cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2xheW91dCBzaXplIGlzIHJhbmdlIHN0ZXAgYWx0aG91Z2ggdGhlcmUgaXMgbm8gcmFuZ2VTdGVwLicpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbe1xuICAgICAgbmFtZSxcbiAgICAgIHZhbHVlOiBzaXplXG4gICAgfV07XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RlcFNpZ25hbChzY2FsZU5hbWU6IHN0cmluZywgcmFuZ2U6IFZnUmFuZ2VTdGVwKTogVmdTaWduYWwge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IHNjYWxlTmFtZSArICdfc3RlcCcsXG4gICAgdmFsdWU6IHJhbmdlLnN0ZXAsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaXplRXhwcihzY2FsZU5hbWU6IHN0cmluZywgc2NhbGVDb21wb25lbnQ6IFNjYWxlQ29tcG9uZW50LCBjYXJkaW5hbGl0eTogc3RyaW5nKSB7XG4gIGNvbnN0IHR5cGUgPSBzY2FsZUNvbXBvbmVudC5nZXQoJ3R5cGUnKTtcbiAgY29uc3QgcGFkZGluZyA9IHNjYWxlQ29tcG9uZW50LmdldCgncGFkZGluZycpO1xuICBsZXQgcGFkZGluZ091dGVyID0gc2NhbGVDb21wb25lbnQuZ2V0KCdwYWRkaW5nT3V0ZXInKTtcbiAgcGFkZGluZ091dGVyID0gcGFkZGluZ091dGVyICE9PSB1bmRlZmluZWQgPyBwYWRkaW5nT3V0ZXIgOiBwYWRkaW5nO1xuXG4gIGxldCBwYWRkaW5nSW5uZXIgPSBzY2FsZUNvbXBvbmVudC5nZXQoJ3BhZGRpbmdJbm5lcicpO1xuICBwYWRkaW5nSW5uZXIgPSB0eXBlID09PSAnYmFuZCcgP1xuICAgIC8vIG9ubHkgYmFuZCBoYXMgcmVhbCBwYWRkaW5nSW5uZXJcbiAgICAocGFkZGluZ0lubmVyICE9PSB1bmRlZmluZWQgPyBwYWRkaW5nSW5uZXIgOiBwYWRkaW5nKSA6XG4gICAgLy8gRm9yIHBvaW50LCBhcyBjYWxjdWxhdGVkIGluIGh0dHBzOi8vZ2l0aHViLmNvbS92ZWdhL3ZlZ2Etc2NhbGUvYmxvYi9tYXN0ZXIvc3JjL2JhbmQuanMjTDEyOCxcbiAgICAvLyBpdCdzIGVxdWl2YWxlbnQgdG8gaGF2ZSBwYWRkaW5nSW5uZXIgPSAxIHNpbmNlIHRoZXJlIGlzIG9ubHkgbi0xIHN0ZXBzIGJldHdlZW4gbiBwb2ludHMuXG4gICAgMTtcbiAgcmV0dXJuIGBiYW5kc3BhY2UoJHtjYXJkaW5hbGl0eX0sICR7cGFkZGluZ0lubmVyfSwgJHtwYWRkaW5nT3V0ZXJ9KSAqICR7c2NhbGVOYW1lfV9zdGVwYDtcbn1cblxuXG4iXX0=","import { POSITION_SCALE_CHANNELS } from '../channel';\nimport * as log from '../log';\nimport { contains } from '../util';\nimport { isConcatModel, isFacetModel, isLayerModel, isRepeatModel } from './model';\nexport function defaultScaleResolve(channel, model) {\n    if (isLayerModel(model) || isFacetModel(model)) {\n        return 'shared';\n    }\n    else if (isConcatModel(model) || isRepeatModel(model)) {\n        return contains(POSITION_SCALE_CHANNELS, channel) ? 'independent' : 'shared';\n    }\n    /* istanbul ignore next: should never reach here. */\n    throw new Error('invalid model type for resolve');\n}\nexport function parseGuideResolve(resolve, channel) {\n    var channelScaleResolve = resolve.scale[channel];\n    var guide = contains(POSITION_SCALE_CHANNELS, channel) ? 'axis' : 'legend';\n    if (channelScaleResolve === 'independent') {\n        if (resolve[guide][channel] === 'shared') {\n            log.warn(log.message.independentScaleMeansIndependentGuide(channel));\n        }\n        return 'independent';\n    }\n    return resolve[guide][channel] || 'shared';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlL3Jlc29sdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFlLE1BQU0sWUFBWSxDQUFDO0FBQ2pFLE9BQU8sS0FBSyxHQUFHLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFDakMsT0FBTyxFQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBUSxNQUFNLFNBQVMsQ0FBQztBQUV4RixNQUFNLDhCQUE4QixPQUFxQixFQUFFLEtBQVk7SUFDckUsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzlDLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO1NBQU0sSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3ZELE9BQU8sUUFBUSxDQUFDLHVCQUF1QixFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztLQUM5RTtJQUNELG9EQUFvRDtJQUNwRCxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUVELE1BQU0sNEJBQTRCLE9BQWdCLEVBQUUsT0FBcUI7SUFDdkUsSUFBTSxtQkFBbUIsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFFN0UsSUFBSSxtQkFBbUIsS0FBSyxhQUFhLEVBQUU7UUFDekMsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQ3hDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxxQ0FBcUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ3RFO1FBQ0QsT0FBTyxhQUFhLENBQUM7S0FDdEI7SUFFRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxRQUFRLENBQUM7QUFDN0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UE9TSVRJT05fU0NBTEVfQ0hBTk5FTFMsIFNjYWxlQ2hhbm5lbH0gZnJvbSAnLi4vY2hhbm5lbCc7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vbG9nJztcbmltcG9ydCB7UmVzb2x2ZSwgUmVzb2x2ZU1vZGV9IGZyb20gJy4uL3Jlc29sdmUnO1xuaW1wb3J0IHtjb250YWluc30gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQge2lzQ29uY2F0TW9kZWwsIGlzRmFjZXRNb2RlbCwgaXNMYXllck1vZGVsLCBpc1JlcGVhdE1vZGVsLCBNb2RlbH0gZnJvbSAnLi9tb2RlbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0U2NhbGVSZXNvbHZlKGNoYW5uZWw6IFNjYWxlQ2hhbm5lbCwgbW9kZWw6IE1vZGVsKTogUmVzb2x2ZU1vZGUge1xuICBpZiAoaXNMYXllck1vZGVsKG1vZGVsKSB8fCBpc0ZhY2V0TW9kZWwobW9kZWwpKSB7XG4gICAgcmV0dXJuICdzaGFyZWQnO1xuICB9IGVsc2UgaWYgKGlzQ29uY2F0TW9kZWwobW9kZWwpIHx8IGlzUmVwZWF0TW9kZWwobW9kZWwpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zKFBPU0lUSU9OX1NDQUxFX0NIQU5ORUxTLCBjaGFubmVsKSA/ICdpbmRlcGVuZGVudCcgOiAnc2hhcmVkJztcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogc2hvdWxkIG5ldmVyIHJlYWNoIGhlcmUuICovXG4gIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBtb2RlbCB0eXBlIGZvciByZXNvbHZlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUd1aWRlUmVzb2x2ZShyZXNvbHZlOiBSZXNvbHZlLCBjaGFubmVsOiBTY2FsZUNoYW5uZWwpOiBSZXNvbHZlTW9kZSB7XG4gIGNvbnN0IGNoYW5uZWxTY2FsZVJlc29sdmUgPSByZXNvbHZlLnNjYWxlW2NoYW5uZWxdO1xuICBjb25zdCBndWlkZSA9IGNvbnRhaW5zKFBPU0lUSU9OX1NDQUxFX0NIQU5ORUxTLCBjaGFubmVsKSA/ICdheGlzJyA6ICdsZWdlbmQnO1xuXG4gIGlmIChjaGFubmVsU2NhbGVSZXNvbHZlID09PSAnaW5kZXBlbmRlbnQnKSB7XG4gICAgaWYgKHJlc29sdmVbZ3VpZGVdW2NoYW5uZWxdID09PSAnc2hhcmVkJykge1xuICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuaW5kZXBlbmRlbnRTY2FsZU1lYW5zSW5kZXBlbmRlbnRHdWlkZShjaGFubmVsKSk7XG4gICAgfVxuICAgIHJldHVybiAnaW5kZXBlbmRlbnQnO1xuICB9XG5cbiAgcmV0dXJuIHJlc29sdmVbZ3VpZGVdW2NoYW5uZWxdIHx8ICdzaGFyZWQnO1xufVxuIl19","import * as tslib_1 from \"tslib\";\nimport * as log from '../log';\nimport { duplicate, stringify } from '../util';\n/**\n * Generic class for storing properties that are explicitly specified\n * and implicitly determined by the compiler.\n * This is important for scale/axis/legend merging as\n * we want to prioritize properties that users explicitly specified.\n */\nvar Split = /** @class */ (function () {\n    function Split(explicit, implicit) {\n        if (explicit === void 0) { explicit = {}; }\n        if (implicit === void 0) { implicit = {}; }\n        this.explicit = explicit;\n        this.implicit = implicit;\n    }\n    Split.prototype.clone = function () {\n        return new Split(duplicate(this.explicit), duplicate(this.implicit));\n    };\n    Split.prototype.combine = function () {\n        // FIXME remove \"as any\".\n        // Add \"as any\" to avoid an error \"Spread types may only be created from object types\".\n        return tslib_1.__assign({}, this.explicit, this.implicit);\n    };\n    Split.prototype.get = function (key) {\n        // Explicit has higher precedence\n        return this.explicit[key] !== undefined ? this.explicit[key] : this.implicit[key];\n    };\n    Split.prototype.getWithExplicit = function (key) {\n        // Explicit has higher precedence\n        if (this.explicit[key] !== undefined) {\n            return { explicit: true, value: this.explicit[key] };\n        }\n        else if (this.implicit[key] !== undefined) {\n            return { explicit: false, value: this.implicit[key] };\n        }\n        return { explicit: false, value: undefined };\n    };\n    Split.prototype.setWithExplicit = function (key, value) {\n        if (value.value !== undefined) {\n            this.set(key, value.value, value.explicit);\n        }\n    };\n    Split.prototype.set = function (key, value, explicit) {\n        delete this[explicit ? 'implicit' : 'explicit'][key];\n        this[explicit ? 'explicit' : 'implicit'][key] = value;\n        return this;\n    };\n    Split.prototype.copyKeyFromSplit = function (key, s) {\n        // Explicit has higher precedence\n        if (s.explicit[key] !== undefined) {\n            this.set(key, s.explicit[key], true);\n        }\n        else if (s.implicit[key] !== undefined) {\n            this.set(key, s.implicit[key], false);\n        }\n    };\n    Split.prototype.copyKeyFromObject = function (key, s) {\n        // Explicit has higher precedence\n        if (s[key] !== undefined) {\n            this.set(key, s[key], true);\n        }\n    };\n    return Split;\n}());\nexport { Split };\nexport function makeExplicit(value) {\n    return {\n        explicit: true,\n        value: value\n    };\n}\nexport function makeImplicit(value) {\n    return {\n        explicit: false,\n        value: value\n    };\n}\nexport function tieBreakByComparing(compare) {\n    return function (v1, v2, property, propertyOf) {\n        var diff = compare(v1.value, v2.value);\n        if (diff > 0) {\n            return v1;\n        }\n        else if (diff < 0) {\n            return v2;\n        }\n        return defaultTieBreaker(v1, v2, property, propertyOf);\n    };\n}\nexport function defaultTieBreaker(v1, v2, property, propertyOf) {\n    if (v1.explicit && v2.explicit) {\n        log.warn(log.message.mergeConflictingProperty(property, propertyOf, v1.value, v2.value));\n    }\n    // If equal score, prefer v1.\n    return v1;\n}\nexport function mergeValuesWithExplicit(v1, v2, property, propertyOf, tieBreaker) {\n    if (tieBreaker === void 0) { tieBreaker = defaultTieBreaker; }\n    if (v1 === undefined || v1.value === undefined) {\n        // For first run\n        return v2;\n    }\n    if (v1.explicit && !v2.explicit) {\n        return v1;\n    }\n    else if (v2.explicit && !v1.explicit) {\n        return v2;\n    }\n    else if (stringify(v1.value) === stringify(v2.value)) {\n        return v1;\n    }\n    else {\n        return tieBreaker(v1, v2, property, propertyOf);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { Split } from '../split';\nvar LegendComponent = /** @class */ (function (_super) {\n    tslib_1.__extends(LegendComponent, _super);\n    function LegendComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return LegendComponent;\n}(Split));\nexport { LegendComponent };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvbGVnZW5kL2NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0EsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUcvQjtJQUFxQywyQ0FBZTtJQUFwRDs7SUFBc0QsQ0FBQztJQUFELHNCQUFDO0FBQUQsQ0FBQyxBQUF2RCxDQUFxQyxLQUFLLEdBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xlZ2VuZH0gZnJvbSAnLi4vLi4vL2xlZ2VuZCc7XG5pbXBvcnQge05vblBvc2l0aW9uU2NhbGVDaGFubmVsfSBmcm9tICcuLi8uLi9jaGFubmVsJztcbmltcG9ydCB7VmdMZWdlbmR9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7U3BsaXR9IGZyb20gJy4uL3NwbGl0JztcblxuXG5leHBvcnQgY2xhc3MgTGVnZW5kQ29tcG9uZW50IGV4dGVuZHMgU3BsaXQ8VmdMZWdlbmQ+IHt9XG5cbi8vIFVzaW5nIE1hcHBlZCBUeXBlIHRvIGRlY2xhcmUgdHlwZSAoaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svYWR2YW5jZWQtdHlwZXMuaHRtbCNtYXBwZWQtdHlwZXMpXG5leHBvcnQgdHlwZSBMZWdlbmRDb21wb25lbnRJbmRleCA9IHtbUCBpbiBOb25Qb3NpdGlvblNjYWxlQ2hhbm5lbF0/OiBMZWdlbmRDb21wb25lbnR9O1xuXG5leHBvcnQgdHlwZSBMZWdlbmRJbmRleCA9IHtbUCBpbiBOb25Qb3NpdGlvblNjYWxlQ2hhbm5lbF0/OiBMZWdlbmR9O1xuIl19","import * as tslib_1 from \"tslib\";\n/**\n * Utility files for producing Vega ValueRef for marks\n */\nimport { isArray, isString } from 'vega-util';\nimport { X, Y } from '../../channel';\nimport { isFieldDef, isValueDef, vgField, } from '../../fielddef';\nimport * as log from '../../log';\nimport { hasDiscreteDomain, ScaleType } from '../../scale';\nimport { QUANTITATIVE } from '../../type';\nimport { contains, some } from '../../util';\nimport { binRequiresRange, formatSignalRef } from '../common';\n// TODO: we need to find a way to refactor these so that scaleName is a part of scale\n// but that's complicated.  For now, this is a huge step moving forward.\n/**\n * @return Vega ValueRef for stackable x or y\n */\nexport function stackable(channel, channelDef, scaleName, scale, stack, defaultRef) {\n    if (isFieldDef(channelDef) && stack && channel === stack.fieldChannel) {\n        // x or y use stack_end so that stacked line's point mark use stack_end too.\n        return fieldRef(channelDef, scaleName, { suffix: 'end' });\n    }\n    return midPoint(channel, channelDef, scaleName, scale, stack, defaultRef);\n}\n/**\n * @return Vega ValueRef for stackable x2 or y2\n */\nexport function stackable2(channel, aFieldDef, a2fieldDef, scaleName, scale, stack, defaultRef) {\n    if (isFieldDef(aFieldDef) && stack &&\n        // If fieldChannel is X and channel is X2 (or Y and Y2)\n        channel.charAt(0) === stack.fieldChannel.charAt(0)) {\n        return fieldRef(aFieldDef, scaleName, { suffix: 'start' });\n    }\n    return midPoint(channel, a2fieldDef, scaleName, scale, stack, defaultRef);\n}\n/**\n * Value Ref for binned fields\n */\nexport function bin(fieldDef, scaleName, side, offset) {\n    var binSuffix = side === 'start' ? undefined : 'end';\n    return fieldRef(fieldDef, scaleName, { binSuffix: binSuffix }, offset ? { offset: offset } : {});\n}\nexport function fieldRef(fieldDef, scaleName, opt, mixins) {\n    var ref = tslib_1.__assign({}, (scaleName ? { scale: scaleName } : {}), { field: vgField(fieldDef, opt) });\n    if (mixins) {\n        return tslib_1.__assign({}, ref, mixins);\n    }\n    return ref;\n}\nexport function bandRef(scaleName, band) {\n    if (band === void 0) { band = true; }\n    return {\n        scale: scaleName,\n        band: band\n    };\n}\n/**\n * Signal that returns the middle of a bin. Should only be used with x and y.\n */\nfunction binMidSignal(fieldDef, scaleName) {\n    return {\n        signal: \"(\" +\n            (\"scale(\\\"\" + scaleName + \"\\\", \" + vgField(fieldDef, { expr: 'datum' }) + \")\") +\n            \" + \" +\n            (\"scale(\\\"\" + scaleName + \"\\\", \" + vgField(fieldDef, { binSuffix: 'end', expr: 'datum' }) + \")\") +\n            \")/2\"\n    };\n}\n/**\n * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.\n */\nexport function midPoint(channel, channelDef, scaleName, scale, stack, defaultRef) {\n    // TODO: datum support\n    if (channelDef) {\n        /* istanbul ignore else */\n        if (isFieldDef(channelDef)) {\n            if (channelDef.bin) {\n                // Use middle only for x an y to place marks in the center between start and end of the bin range.\n                // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.\n                if (contains([X, Y], channel) && channelDef.type === QUANTITATIVE) {\n                    if (stack && stack.impute) {\n                        // For stack, we computed bin_mid so we can impute.\n                        return fieldRef(channelDef, scaleName, { binSuffix: 'mid' });\n                    }\n                    // For non-stack, we can just calculate bin mid on the fly using signal.\n                    return binMidSignal(channelDef, scaleName);\n                }\n                return fieldRef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? { binSuffix: 'range' } : {});\n            }\n            if (scale) {\n                var scaleType = scale.get('type');\n                if (hasDiscreteDomain(scaleType)) {\n                    if (scaleType === 'band') {\n                        // For band, to get mid point, need to offset by half of the band\n                        return fieldRef(channelDef, scaleName, { binSuffix: 'range' }, { band: 0.5 });\n                    }\n                    return fieldRef(channelDef, scaleName, { binSuffix: 'range' });\n                }\n            }\n            return fieldRef(channelDef, scaleName, {}); // no need for bin suffix\n        }\n        else if (isValueDef(channelDef)) {\n            return { value: channelDef.value };\n        }\n        // If channelDef is neither field def or value def, it's a condition-only def.\n        // In such case, we will use default ref.\n    }\n    return defaultRef;\n}\nexport function text(textDef, config) {\n    // text\n    if (textDef) {\n        if (isFieldDef(textDef)) {\n            return formatSignalRef(textDef, textDef.format, 'datum', config);\n        }\n        else if (isValueDef(textDef)) {\n            return { value: textDef.value };\n        }\n    }\n    return undefined;\n}\nexport function mid(sizeRef) {\n    return tslib_1.__assign({}, sizeRef, { mult: 0.5 });\n}\n/**\n * Whether the scale definitely includes zero in the domain\n */\nfunction domainDefinitelyIncludeZero(scale) {\n    if (scale.get('zero') !== false) {\n        return true;\n    }\n    var domains = scale.domains;\n    if (isArray(domains)) {\n        return some(domains, function (d) { return isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0; });\n    }\n    return false;\n}\nexport function getDefaultRef(defaultRef, channel, scaleName, scale, mark) {\n    if (isString(defaultRef)) {\n        if (scaleName) {\n            var scaleType = scale.get('type');\n            if (contains([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType)) {\n                // Log scales cannot have zero.\n                // Zero in time scale is arbitrary, and does not affect ratio.\n                // (Time is an interval level of measurement, not ratio).\n                // See https://en.wikipedia.org/wiki/Level_of_measurement for more info.\n                if (mark === 'bar' || mark === 'area') {\n                    log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, channel, { scaleType: scaleType }));\n                }\n            }\n            else {\n                if (domainDefinitelyIncludeZero(scale)) {\n                    return {\n                        scale: scaleName,\n                        value: 0\n                    };\n                }\n                if (mark === 'bar' || mark === 'area') {\n                    log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, channel, { zeroFalse: scale.explicit.zero === false }));\n                }\n            }\n        }\n        if (defaultRef === 'zeroOrMin') {\n            return channel === 'x' ? { value: 0 } : { field: { group: 'height' } };\n        }\n        else { // zeroOrMax\n            return channel === 'x' ? { field: { group: 'width' } } : { value: 0 };\n        }\n    }\n    return defaultRef;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { getFieldDef, isConditionalSelection, isValueDef, vgField, } from '../../fielddef';\nimport * as log from '../../log';\nimport { expression } from '../../predicate';\nimport { hasContinuousDomain } from '../../scale';\nimport { contains } from '../../util';\nimport { VG_MARK_CONFIGS } from '../../vega.schema';\nimport { getMarkConfig } from '../common';\nimport { selectionPredicate } from '../selection/selection';\nimport * as ref from './valueref';\nexport function color(model, opt) {\n    if (opt === void 0) { opt = { valueOnly: false }; }\n    var markDef = model.markDef, encoding = model.encoding, config = model.config;\n    var filled = markDef.filled, markType = markDef.type;\n    var configValue = {\n        fill: getMarkConfig('fill', markDef, config),\n        stroke: getMarkConfig('stroke', markDef, config),\n        color: getMarkConfig('color', markDef, config)\n    };\n    var transparentIfNeeded = contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType) ? 'transparent' : undefined;\n    var defaultValue = {\n        fill: markDef.fill || configValue.fill ||\n            // If there is no fill, always fill symbols, bar, geoshape\n            // with transparent fills https://github.com/vega/vega-lite/issues/1316\n            transparentIfNeeded,\n        stroke: markDef.stroke || configValue.stroke\n    };\n    var colorVgChannel = filled ? 'fill' : 'stroke';\n    var fillStrokeMarkDefAndConfig = tslib_1.__assign({}, (defaultValue.fill ? {\n        fill: { value: defaultValue.fill }\n    } : {}), (defaultValue.stroke ? {\n        stroke: { value: defaultValue.stroke }\n    } : {}));\n    if (encoding.fill || encoding.stroke) {\n        // ignore encoding.color, markDef.color, config.color\n        if (markDef.color) {\n            // warn for markDef.color  (no need to warn encoding.color as it will be dropped in normalized already)\n            log.warn(log.message.droppingColor('property', { fill: 'fill' in encoding, stroke: 'stroke' in encoding }));\n        }\n        return tslib_1.__assign({}, nonPosition('fill', model, { defaultValue: defaultValue.fill || transparentIfNeeded }), nonPosition('stroke', model, { defaultValue: defaultValue.stroke }));\n    }\n    else if (encoding.color) {\n        return tslib_1.__assign({}, fillStrokeMarkDefAndConfig, nonPosition('color', model, {\n            vgChannel: colorVgChannel,\n            // apply default fill/stroke first, then color config, then transparent if needed.\n            defaultValue: markDef[colorVgChannel] || markDef.color || configValue[colorVgChannel] || configValue.color || (filled ? transparentIfNeeded : undefined)\n        }));\n    }\n    else if (markDef.fill || markDef.stroke) {\n        // Ignore markDef.color, config.color\n        if (markDef.color) {\n            log.warn(log.message.droppingColor('property', { fill: 'fill' in markDef, stroke: 'stroke' in markDef }));\n        }\n        return fillStrokeMarkDefAndConfig;\n    }\n    else if (markDef.color) {\n        return tslib_1.__assign({}, fillStrokeMarkDefAndConfig, (_a = {}, _a[colorVgChannel] = { value: markDef.color }, _a));\n    }\n    else if (configValue.fill || configValue.stroke) {\n        // ignore config.color\n        return fillStrokeMarkDefAndConfig;\n    }\n    else if (configValue.color) {\n        return tslib_1.__assign({}, (transparentIfNeeded ? { fill: { value: 'transparent' } } : {}), (_b = {}, _b[colorVgChannel] = { value: configValue.color }, _b));\n    }\n    return {};\n    var _a, _b;\n}\nexport function baseEncodeEntry(model, ignore) {\n    return tslib_1.__assign({}, markDefProperties(model.markDef, ignore), color(model), nonPosition('opacity', model), tooltip(model), text(model, 'href'));\n}\nfunction markDefProperties(mark, ignore) {\n    return VG_MARK_CONFIGS.reduce(function (m, prop) {\n        if (mark[prop] !== undefined && ignore[prop] !== 'ignore') {\n            m[prop] = { value: mark[prop] };\n        }\n        return m;\n    }, {});\n}\nexport function valueIfDefined(prop, value) {\n    if (value !== undefined) {\n        return _a = {}, _a[prop] = { value: value }, _a;\n    }\n    return undefined;\n    var _a;\n}\nfunction validPredicate(vgRef) {\n    return vgRef + \" !== null && !isNaN(\" + vgRef + \")\";\n}\nexport function defined(model) {\n    if (model.config.invalidValues === 'filter') {\n        var fields = ['x', 'y'].map(function (channel) {\n            var scaleComponent = model.getScaleComponent(channel);\n            if (scaleComponent) {\n                var scaleType = scaleComponent.get('type');\n                // Discrete domain scales can handle invalid values, but continuous scales can't.\n                if (hasContinuousDomain(scaleType)) {\n                    return model.vgField(channel, { expr: 'datum' });\n                }\n            }\n            return undefined;\n        })\n            .filter(function (field) { return !!field; })\n            .map(validPredicate);\n        if (fields.length > 0) {\n            return {\n                defined: { signal: fields.join(' && ') }\n            };\n        }\n    }\n    return {};\n}\n/**\n * Return mixins for non-positional channels with scales.  (Text doesn't have scale.)\n */\nexport function nonPosition(channel, model, opt) {\n    if (opt === void 0) { opt = {}; }\n    var defaultValue = opt.defaultValue, vgChannel = opt.vgChannel;\n    var defaultRef = opt.defaultRef || (defaultValue !== undefined ? { value: defaultValue } : undefined);\n    var channelDef = model.encoding[channel];\n    return wrapCondition(model, channelDef, vgChannel || channel, function (cDef) {\n        return ref.midPoint(channel, cDef, model.scaleName(channel), model.getScaleComponent(channel), null, // No need to provide stack for non-position as it does not affect mid point\n        defaultRef);\n    });\n}\n/**\n * Return a mixin that include a Vega production rule for a Vega-Lite conditional channel definition.\n * or a simple mixin if channel def has no condition.\n */\nfunction wrapCondition(model, channelDef, vgChannel, refFn) {\n    var condition = channelDef && channelDef.condition;\n    var valueRef = refFn(channelDef);\n    if (condition) {\n        var conditions = isArray(condition) ? condition : [condition];\n        var vgConditions = conditions.map(function (c) {\n            var conditionValueRef = refFn(c);\n            var test = isConditionalSelection(c) ? selectionPredicate(model, c.selection) : expression(model, c.test);\n            return tslib_1.__assign({ test: test }, conditionValueRef);\n        });\n        return _a = {},\n            _a[vgChannel] = vgConditions.concat((valueRef !== undefined ? [valueRef] : [])),\n            _a;\n    }\n    else {\n        return valueRef !== undefined ? (_b = {}, _b[vgChannel] = valueRef, _b) : {};\n    }\n    var _a, _b;\n}\nexport function tooltip(model) {\n    var channel = 'tooltip';\n    var channelDef = model.encoding[channel];\n    if (isArray(channelDef)) {\n        var keyValues = channelDef.map(function (fieldDef) {\n            var key = fieldDef.title !== undefined ? fieldDef.title : vgField(fieldDef, { binSuffix: 'range' });\n            var value = ref.text(fieldDef, model.config).signal;\n            return \"\\\"\" + key + \"\\\": \" + value;\n        });\n        return { tooltip: { signal: \"{\" + keyValues.join(', ') + \"}\" } };\n    }\n    else {\n        // if not an array, behave just like text\n        return textCommon(model, channel, channelDef);\n    }\n}\nexport function text(model, channel) {\n    if (channel === void 0) { channel = 'text'; }\n    var channelDef = model.encoding[channel];\n    return textCommon(model, channel, channelDef);\n}\nfunction textCommon(model, channel, channelDef) {\n    return wrapCondition(model, channelDef, channel, function (cDef) { return ref.text(cDef, model.config); });\n}\nexport function bandPosition(fieldDef, channel, model) {\n    var scaleName = model.scaleName(channel);\n    var sizeChannel = channel === 'x' ? 'width' : 'height';\n    if (model.encoding.size || model.markDef.size !== undefined) {\n        var orient = model.markDef.orient;\n        if (orient) {\n            var centeredBandPositionMixins = (_a = {},\n                // Use xc/yc and place the mark at the middle of the band\n                // This way we never have to deal with size's condition for x/y position.\n                _a[channel + 'c'] = ref.fieldRef(fieldDef, scaleName, {}, { band: 0.5 }),\n                _a);\n            if (getFieldDef(model.encoding.size)) {\n                log.warn(log.message.cannotUseSizeFieldWithBandSize(channel));\n                // TODO: apply size to band and set scale range to some values between 0-1.\n                // return {\n                //   ...centeredBandPositionMixins,\n                //   ...bandSize('size', model, {vgChannel: sizeChannel})\n                // };\n            }\n            else if (isValueDef(model.encoding.size)) {\n                return tslib_1.__assign({}, centeredBandPositionMixins, nonPosition('size', model, { vgChannel: sizeChannel }));\n            }\n            else if (model.markDef.size !== undefined) {\n                return tslib_1.__assign({}, centeredBandPositionMixins, (_b = {}, _b[sizeChannel] = { value: model.markDef.size }, _b));\n            }\n        }\n        else {\n            log.warn(log.message.cannotApplySizeToNonOrientedMark(model.markDef.type));\n        }\n    }\n    return _c = {},\n        _c[channel] = ref.fieldRef(fieldDef, scaleName, { binSuffix: 'range' }),\n        _c[sizeChannel] = ref.bandRef(scaleName),\n        _c;\n    var _a, _b, _c;\n}\nexport function centeredBandPosition(channel, model, defaultPosRef, defaultSizeRef) {\n    var centerChannel = channel === 'x' ? 'xc' : 'yc';\n    var sizeChannel = channel === 'x' ? 'width' : 'height';\n    return tslib_1.__assign({}, pointPosition(channel, model, defaultPosRef, centerChannel), nonPosition('size', model, { defaultRef: defaultSizeRef, vgChannel: sizeChannel }));\n}\nexport function binnedPosition(fieldDef, channel, scaleName, spacing, reverse) {\n    if (channel === 'x') {\n        return {\n            x2: ref.bin(fieldDef, scaleName, 'start', reverse ? 0 : spacing),\n            x: ref.bin(fieldDef, scaleName, 'end', reverse ? spacing : 0)\n        };\n    }\n    else {\n        return {\n            y2: ref.bin(fieldDef, scaleName, 'start', reverse ? spacing : 0),\n            y: ref.bin(fieldDef, scaleName, 'end', reverse ? 0 : spacing)\n        };\n    }\n}\n/**\n * Return mixins for point (non-band) position channels.\n */\nexport function pointPosition(channel, model, defaultRef, vgChannel) {\n    // TODO: refactor how refer to scale as discussed in https://github.com/vega/vega-lite/pull/1613\n    var encoding = model.encoding, mark = model.mark, stack = model.stack;\n    var channelDef = encoding[channel];\n    var scaleName = model.scaleName(channel);\n    var scale = model.getScaleComponent(channel);\n    var valueRef = !channelDef && (encoding.latitude || encoding.longitude) ?\n        // use geopoint output if there are lat/long and there is no point position overriding lat/long.\n        { field: model.getName(channel) } :\n        ref.stackable(channel, encoding[channel], scaleName, scale, stack, ref.getDefaultRef(defaultRef, channel, scaleName, scale, mark));\n    return _a = {},\n        _a[vgChannel || channel] = valueRef,\n        _a;\n    var _a;\n}\n/**\n * Return mixins for x2, y2.\n * If channel is not specified, return one channel based on orientation.\n */\nexport function pointPosition2(model, defaultRef, channel) {\n    var encoding = model.encoding, mark = model.mark, markDef = model.markDef, stack = model.stack;\n    channel = channel || (markDef.orient === 'horizontal' ? 'x2' : 'y2');\n    var baseChannel = channel === 'x2' ? 'x' : 'y';\n    var channelDef = encoding[baseChannel];\n    var scaleName = model.scaleName(baseChannel);\n    var scale = model.getScaleComponent(baseChannel);\n    var valueRef = !channelDef && (encoding.latitude || encoding.longitude) ?\n        // use geopoint output if there are lat2/long2 and there is no point position2 overriding lat2/long2.\n        { field: model.getName(channel) } :\n        ref.stackable2(channel, channelDef, encoding[channel], scaleName, scale, stack, ref.getDefaultRef(defaultRef, baseChannel, scaleName, scale, mark));\n    return _a = {}, _a[channel] = valueRef, _a;\n    var _a;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { COLOR, OPACITY, SHAPE } from '../../channel';\nimport { hasConditionalValueDef, isTimeFieldDef, isValueDef, } from '../../fielddef';\nimport { AREA, BAR, CIRCLE, FILL_STROKE_CONFIG, GEOSHAPE, LINE, POINT, SQUARE, TEXT, TICK } from '../../mark';\nimport { ScaleType } from '../../scale';\nimport { keys } from '../../util';\nimport { applyMarkConfig, timeFormatExpression } from '../common';\nimport * as mixins from '../mark/mixins';\nexport function symbols(fieldDef, symbolsSpec, model, channel, type) {\n    if (type === 'gradient') {\n        return undefined;\n    }\n    var out = tslib_1.__assign({}, applyMarkConfig({}, model, FILL_STROKE_CONFIG), mixins.color(model));\n    switch (model.mark) {\n        case BAR:\n        case TICK:\n        case TEXT:\n            out.shape = { value: 'square' };\n            break;\n        case CIRCLE:\n        case SQUARE:\n            out.shape = { value: model.mark };\n            break;\n        case POINT:\n        case LINE:\n        case GEOSHAPE:\n        case AREA:\n            // use default circle\n            break;\n    }\n    var markDef = model.markDef, encoding = model.encoding;\n    var filled = markDef.filled;\n    if (out.fill) {\n        // for fill legend, we don't want any fill in symbol\n        if (channel === 'fill' || (filled && channel === COLOR)) {\n            delete out.fill;\n        }\n        else {\n            if (out.fill['field']) {\n                // For others, remove fill field\n                delete out.fill;\n            }\n            else if (isArray(out.fill)) {\n                var fill = getFirstConditionValue(encoding.fill || encoding.color) || markDef.fill || (filled && markDef.color);\n                if (fill) {\n                    out.fill = { value: fill };\n                }\n            }\n        }\n    }\n    if (out.stroke) {\n        if (channel === 'stroke' || (!filled && channel === COLOR)) {\n            delete out.stroke;\n        }\n        else {\n            if (out.stroke['field']) {\n                // For others, remove stroke field\n                delete out.stroke;\n            }\n            else if (isArray(out.stroke)) {\n                var stroke = getFirstConditionValue(encoding.stroke || encoding.color) || markDef.stroke || (!filled && markDef.color);\n                if (stroke) {\n                    out.stroke = { value: stroke };\n                }\n            }\n        }\n    }\n    if (out.fill && out.fill['value'] !== 'transparent' && !out.stroke) {\n        // for non color channel's legend, we need to override symbol stroke config from Vega config\n        out.stroke = { value: 'transparent' };\n    }\n    if (channel !== SHAPE) {\n        var shape = getFirstConditionValue(encoding.shape) || markDef.shape;\n        if (shape) {\n            out.shape = { value: shape };\n        }\n    }\n    if (channel !== OPACITY) {\n        var opacity = getMaxValue(encoding.opacity) || markDef.opacity;\n        if (opacity) { // only apply opacity if it is neither zero or undefined\n            out.opacity = { value: opacity };\n        }\n    }\n    out = tslib_1.__assign({}, out, symbolsSpec);\n    return keys(out).length > 0 ? out : undefined;\n}\nexport function gradient(fieldDef, gradientSpec, model, channel, type) {\n    var out = {};\n    if (type === 'gradient') {\n        var opacity = getMaxValue(model.encoding.opacity) || model.markDef.opacity;\n        if (opacity) { // only apply opacity if it is neither zero or undefined\n            out.opacity = { value: opacity };\n        }\n    }\n    out = tslib_1.__assign({}, out, gradientSpec);\n    return keys(out).length > 0 ? out : undefined;\n}\nexport function labels(fieldDef, labelsSpec, model, channel, type) {\n    var legend = model.legend(channel);\n    var config = model.config;\n    var out = {};\n    if (isTimeFieldDef(fieldDef)) {\n        var isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;\n        labelsSpec = tslib_1.__assign({ text: {\n                signal: timeFormatExpression('datum.value', fieldDef.timeUnit, legend.format, config.legend.shortTimeLabels, config.timeFormat, isUTCScale)\n            } }, labelsSpec);\n    }\n    out = tslib_1.__assign({}, out, labelsSpec);\n    return keys(out).length > 0 ? out : undefined;\n}\nfunction getMaxValue(channelDef) {\n    return getConditionValue(channelDef, function (v, conditionalDef) { return Math.max(v, conditionalDef.value); });\n}\nfunction getFirstConditionValue(channelDef) {\n    return getConditionValue(channelDef, function (v, conditionalDef) { return v !== undefined ? v : conditionalDef.value; });\n}\nfunction getConditionValue(channelDef, reducer) {\n    if (hasConditionalValueDef(channelDef)) {\n        return (isArray(channelDef.condition) ? channelDef.condition : [channelDef.condition])\n            .reduce(reducer, channelDef.value);\n    }\n    else if (isValueDef(channelDef)) {\n        return channelDef.value;\n    }\n    return undefined;\n}\n//# sourceMappingURL=data:application/json;base64,","import { COLOR, FILL, OPACITY, SHAPE, SIZE, STROKE } from '../../channel';\nimport { isFieldDef, title as fieldDefTitle } from '../../fielddef';\nimport { LEGEND_PROPERTIES, VG_LEGEND_PROPERTIES } from '../../legend';\nimport { GEOJSON } from '../../type';\nimport { deleteNestedProperty, keys } from '../../util';\nimport { getSpecifiedOrDefaultValue, numberFormat, titleMerger } from '../common';\nimport { isUnitModel } from '../model';\nimport { parseGuideResolve } from '../resolve';\nimport { makeImplicit } from '../split';\nimport { defaultTieBreaker, mergeValuesWithExplicit } from '../split';\nimport { LegendComponent } from './component';\nimport * as encode from './encode';\nimport * as properties from './properties';\nexport function parseLegend(model) {\n    if (isUnitModel(model)) {\n        model.component.legends = parseUnitLegend(model);\n    }\n    else {\n        model.component.legends = parseNonUnitLegend(model);\n    }\n}\nfunction parseUnitLegend(model) {\n    var encoding = model.encoding;\n    return [COLOR, FILL, STROKE, SIZE, SHAPE, OPACITY].reduce(function (legendComponent, channel) {\n        var def = encoding[channel];\n        if (model.legend(channel) && model.getScaleComponent(channel) && !(isFieldDef(def) && (channel === SHAPE && def.type === GEOJSON))) {\n            legendComponent[channel] = parseLegendForChannel(model, channel);\n        }\n        return legendComponent;\n    }, {});\n}\nfunction getLegendDefWithScale(model, channel) {\n    // For binned field with continuous scale, use a special scale so we can overrride the mark props and labels\n    switch (channel) {\n        case COLOR:\n            var scale = model.scaleName(COLOR);\n            return model.markDef.filled ? { fill: scale } : { stroke: scale };\n        case FILL:\n        case STROKE:\n        case SIZE:\n        case SHAPE:\n        case OPACITY:\n            return _a = {}, _a[channel] = model.scaleName(channel), _a;\n    }\n    var _a;\n}\nexport function parseLegendForChannel(model, channel) {\n    var fieldDef = model.fieldDef(channel);\n    var legend = model.legend(channel);\n    var legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));\n    LEGEND_PROPERTIES.forEach(function (property) {\n        var value = getProperty(property, legend, channel, model);\n        if (value !== undefined) {\n            var explicit = property === 'values' ?\n                !!legend.values : // specified legend.values is already respected, but may get transformed.\n                value === legend[property];\n            if (explicit || model.config.legend[property] === undefined) {\n                legendCmpt.set(property, value, explicit);\n            }\n        }\n    });\n    // 2) Add mark property definition groups\n    var legendEncoding = legend.encoding || {};\n    var legendEncode = ['labels', 'legend', 'title', 'symbols', 'gradient'].reduce(function (e, part) {\n        var value = encode[part] ?\n            // TODO: replace legendCmpt with type is sufficient\n            encode[part](fieldDef, legendEncoding[part], model, channel, legendCmpt.get('type')) : // apply rule\n            legendEncoding[part]; // no rule -- just default values\n        if (value !== undefined && keys(value).length > 0) {\n            e[part] = { update: value };\n        }\n        return e;\n    }, {});\n    if (keys(legendEncode).length > 0) {\n        legendCmpt.set('encode', legendEncode, !!legend.encoding);\n    }\n    return legendCmpt;\n}\nfunction getProperty(property, specifiedLegend, channel, model) {\n    var fieldDef = model.fieldDef(channel);\n    switch (property) {\n        case 'format':\n            // We don't include temporal field here as we apply format in encode block\n            return numberFormat(fieldDef, specifiedLegend.format, model.config);\n        case 'title':\n            // For falsy value, keep undefined so we use default,\n            // but use null for '', null, and false to hide the title\n            var specifiedTitle = fieldDef.title !== undefined ? fieldDef.title :\n                specifiedLegend.title || (specifiedLegend.title === undefined ? undefined : null);\n            return getSpecifiedOrDefaultValue(specifiedTitle, fieldDefTitle(fieldDef, model.config)) || undefined; // make falsy value undefined so output Vega spec is shorter\n        case 'values':\n            return properties.values(specifiedLegend);\n        case 'type':\n            return getSpecifiedOrDefaultValue(specifiedLegend.type, properties.type(fieldDef.type, channel, model.getScaleComponent(channel).get('type')));\n    }\n    // Otherwise, return specified property.\n    return specifiedLegend[property];\n}\nfunction parseNonUnitLegend(model) {\n    var _a = model.component, legends = _a.legends, resolve = _a.resolve;\n    var _loop_1 = function (child) {\n        parseLegend(child);\n        keys(child.component.legends).forEach(function (channel) {\n            resolve.legend[channel] = parseGuideResolve(model.component.resolve, channel);\n            if (resolve.legend[channel] === 'shared') {\n                // If the resolve says shared (and has not been overridden)\n                // We will try to merge and see if there is a conflict\n                legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);\n                if (!legends[channel]) {\n                    // If merge returns nothing, there is a conflict so we cannot make the legend shared.\n                    // Thus, mark legend as independent and remove the legend component.\n                    resolve.legend[channel] = 'independent';\n                    delete legends[channel];\n                }\n            }\n        });\n    };\n    for (var _i = 0, _b = model.children; _i < _b.length; _i++) {\n        var child = _b[_i];\n        _loop_1(child);\n    }\n    keys(legends).forEach(function (channel) {\n        for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            if (!child.component.legends[channel]) {\n                // skip if the child does not have a particular legend\n                continue;\n            }\n            if (resolve.legend[channel] === 'shared') {\n                // After merging shared legend, make sure to remove legend from child\n                delete child.component.legends[channel];\n            }\n        }\n    });\n    return legends;\n}\nexport function mergeLegendComponent(mergedLegend, childLegend) {\n    if (!mergedLegend) {\n        return childLegend.clone();\n    }\n    var mergedOrient = mergedLegend.getWithExplicit('orient');\n    var childOrient = childLegend.getWithExplicit('orient');\n    if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n        // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n        // Cannot merge due to inconsistent orient\n        return undefined;\n    }\n    var typeMerged = false;\n    var _loop_2 = function (prop) {\n        var mergedValueWithExplicit = mergeValuesWithExplicit(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, 'legend', \n        // Tie breaker function\n        function (v1, v2) {\n            switch (prop) {\n                case 'title':\n                    return titleMerger(v1, v2);\n                case 'type':\n                    // There are only two types. If we have different types, then prefer symbol over gradient.\n                    typeMerged = true;\n                    return makeImplicit('symbol');\n            }\n            return defaultTieBreaker(v1, v2, prop, 'legend');\n        });\n        mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);\n    };\n    // Otherwise, let's merge\n    for (var _i = 0, VG_LEGEND_PROPERTIES_1 = VG_LEGEND_PROPERTIES; _i < VG_LEGEND_PROPERTIES_1.length; _i++) {\n        var prop = VG_LEGEND_PROPERTIES_1[_i];\n        _loop_2(prop);\n    }\n    if (typeMerged) {\n        if (((mergedLegend.implicit || {}).encode || {}).gradient) {\n            deleteNestedProperty(mergedLegend.implicit, ['encode', 'gradient']);\n        }\n        if (((mergedLegend.explicit || {}).encode || {}).gradient) {\n            deleteNestedProperty(mergedLegend.explicit, ['encode', 'gradient']);\n        }\n    }\n    return mergedLegend;\n}\n//# sourceMappingURL=data:application/json;base64,","import { isColorChannel } from '../../channel';\nimport { dateTimeExpr, isDateTime } from '../../datetime';\nimport { isBinScale } from '../../scale';\nimport { contains } from '../../util';\nexport function values(legend) {\n    var vals = legend.values;\n    if (vals && isDateTime(vals[0])) {\n        return vals.map(function (dt) {\n            // normalize = true as end user won't put 0 = January\n            return { signal: dateTimeExpr(dt, true) };\n        });\n    }\n    return vals;\n}\nexport function type(t, channel, scaleType) {\n    if (isColorChannel(channel) && ((t === 'quantitative' && !isBinScale(scaleType)) ||\n        (t === 'temporal' && contains(['time', 'utc'], scaleType)))) {\n        return 'gradient';\n    }\n    return undefined;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydGllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL2xlZ2VuZC9wcm9wZXJ0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBVSxjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFXLFlBQVksRUFBRSxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRSxPQUFPLEVBQUMsVUFBVSxFQUFZLE1BQU0sYUFBYSxDQUFDO0FBRWxELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFcEMsTUFBTSxpQkFBaUIsTUFBYztJQUNuQyxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzNCLElBQUksSUFBSSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUMvQixPQUFRLElBQW1CLENBQUMsR0FBRyxDQUFDLFVBQUMsRUFBRTtZQUNqQyxxREFBcUQ7WUFDckQsT0FBTyxFQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sZUFBZSxDQUFPLEVBQUUsT0FBZ0IsRUFBRSxTQUFvQjtJQUNsRSxJQUNJLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUN6QixDQUFDLENBQUMsS0FBSyxjQUFjLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLEtBQUssVUFBVSxJQUFJLFFBQVEsQ0FBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUN0RSxFQUNEO1FBQ0YsT0FBTyxVQUFVLENBQUM7S0FDbkI7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFubmVsLCBpc0NvbG9yQ2hhbm5lbH0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge0RhdGVUaW1lLCBkYXRlVGltZUV4cHIsIGlzRGF0ZVRpbWV9IGZyb20gJy4uLy4uL2RhdGV0aW1lJztcbmltcG9ydCB7TGVnZW5kfSBmcm9tICcuLi8uLi9sZWdlbmQnO1xuaW1wb3J0IHtpc0JpblNjYWxlLCBTY2FsZVR5cGV9IGZyb20gJy4uLy4uL3NjYWxlJztcbmltcG9ydCB7VHlwZX0gZnJvbSAnLi4vLi4vdHlwZSc7XG5pbXBvcnQge2NvbnRhaW5zfSBmcm9tICcuLi8uLi91dGlsJztcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlcyhsZWdlbmQ6IExlZ2VuZCkge1xuICBjb25zdCB2YWxzID0gbGVnZW5kLnZhbHVlcztcbiAgaWYgKHZhbHMgJiYgaXNEYXRlVGltZSh2YWxzWzBdKSkge1xuICAgIHJldHVybiAodmFscyBhcyBEYXRlVGltZVtdKS5tYXAoKGR0KSA9PiB7XG4gICAgICAvLyBub3JtYWxpemUgPSB0cnVlIGFzIGVuZCB1c2VyIHdvbid0IHB1dCAwID0gSmFudWFyeVxuICAgICAgcmV0dXJuIHtzaWduYWw6IGRhdGVUaW1lRXhwcihkdCwgdHJ1ZSl9O1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB2YWxzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHlwZSh0OiBUeXBlLCBjaGFubmVsOiBDaGFubmVsLCBzY2FsZVR5cGU6IFNjYWxlVHlwZSk6ICdncmFkaWVudCcge1xuICBpZiAoXG4gICAgICBpc0NvbG9yQ2hhbm5lbChjaGFubmVsKSAmJiAoXG4gICAgICAgICh0ID09PSAncXVhbnRpdGF0aXZlJyAmJiAhaXNCaW5TY2FsZShzY2FsZVR5cGUpKSB8fFxuICAgICAgICAodCA9PT0gJ3RlbXBvcmFsJyAmJiBjb250YWluczxTY2FsZVR5cGU+KFsndGltZScsICd1dGMnXSwgc2NhbGVUeXBlKSlcbiAgICAgIClcbiAgICApIHtcbiAgICByZXR1cm4gJ2dyYWRpZW50JztcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIl19","import { flatten, keys, stringify, vals } from '../../util';\nimport { mergeLegendComponent } from './parse';\nexport function assembleLegends(model) {\n    var legendComponentIndex = model.component.legends;\n    var legendByDomain = {};\n    for (var _i = 0, _a = keys(legendComponentIndex); _i < _a.length; _i++) {\n        var channel = _a[_i];\n        var scaleComponent = model.getScaleComponent(channel);\n        var domainHash = stringify(scaleComponent.domains);\n        if (legendByDomain[domainHash]) {\n            for (var _b = 0, _c = legendByDomain[domainHash]; _b < _c.length; _b++) {\n                var mergedLegendComponent = _c[_b];\n                var merged = mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);\n                if (!merged) {\n                    // If cannot merge, need to add this legend separately\n                    legendByDomain[domainHash].push(legendComponentIndex[channel]);\n                }\n            }\n        }\n        else {\n            legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];\n        }\n    }\n    return flatten(vals(legendByDomain)).map(function (legendCmpt) { return legendCmpt.combine(); });\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9sZWdlbmQvYXNzZW1ibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBQyxNQUFNLFlBQVksQ0FBQztBQUkxRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFN0MsTUFBTSwwQkFBMEIsS0FBWTtJQUMxQyxJQUFNLG9CQUFvQixHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3JELElBQU0sY0FBYyxHQUE4QyxFQUFFLENBQUM7SUFFckUsS0FBc0IsVUFBMEIsRUFBMUIsS0FBQSxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBMUIsY0FBMEIsRUFBMUIsSUFBMEI7UUFBM0MsSUFBTSxPQUFPLFNBQUE7UUFDaEIsSUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hELElBQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckQsSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDOUIsS0FBb0MsVUFBMEIsRUFBMUIsS0FBQSxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQTFCLGNBQTBCLEVBQTFCLElBQTBCO2dCQUF6RCxJQUFNLHFCQUFxQixTQUFBO2dCQUM5QixJQUFNLE1BQU0sR0FBRyxvQkFBb0IsQ0FBQyxxQkFBcUIsRUFBRSxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUMxRixJQUFJLENBQUMsTUFBTSxFQUFFO29CQUNYLHNEQUFzRDtvQkFDdEQsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2lCQUNoRTthQUNGO1NBRUY7YUFBTTtZQUNMLGNBQWMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDdEU7S0FDRjtJQUVELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLFVBQTJCLElBQUssT0FBQSxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQXBCLENBQW9CLENBQUMsQ0FBQztBQUNsRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtmbGF0dGVuLCBrZXlzLCBzdHJpbmdpZnksIHZhbHN9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0xlZ2VuZH0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtNb2RlbH0gZnJvbSAnLi4vbW9kZWwnO1xuaW1wb3J0IHtMZWdlbmRDb21wb25lbnR9IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCB7bWVyZ2VMZWdlbmRDb21wb25lbnR9IGZyb20gJy4vcGFyc2UnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzZW1ibGVMZWdlbmRzKG1vZGVsOiBNb2RlbCk6IFZnTGVnZW5kW10ge1xuICBjb25zdCBsZWdlbmRDb21wb25lbnRJbmRleCA9IG1vZGVsLmNvbXBvbmVudC5sZWdlbmRzO1xuICBjb25zdCBsZWdlbmRCeURvbWFpbjoge1tkb21haW5IYXNoOiBzdHJpbmddOiBMZWdlbmRDb21wb25lbnRbXX0gPSB7fTtcblxuICBmb3IgKGNvbnN0IGNoYW5uZWwgb2Yga2V5cyhsZWdlbmRDb21wb25lbnRJbmRleCkpIHtcbiAgICBjb25zdCBzY2FsZUNvbXBvbmVudCA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KGNoYW5uZWwpO1xuICAgIGNvbnN0IGRvbWFpbkhhc2ggPSBzdHJpbmdpZnkoc2NhbGVDb21wb25lbnQuZG9tYWlucyk7XG4gICAgaWYgKGxlZ2VuZEJ5RG9tYWluW2RvbWFpbkhhc2hdKSB7XG4gICAgICBmb3IgKGNvbnN0IG1lcmdlZExlZ2VuZENvbXBvbmVudCBvZiBsZWdlbmRCeURvbWFpbltkb21haW5IYXNoXSkge1xuICAgICAgICBjb25zdCBtZXJnZWQgPSBtZXJnZUxlZ2VuZENvbXBvbmVudChtZXJnZWRMZWdlbmRDb21wb25lbnQsIGxlZ2VuZENvbXBvbmVudEluZGV4W2NoYW5uZWxdKTtcbiAgICAgICAgaWYgKCFtZXJnZWQpIHtcbiAgICAgICAgICAvLyBJZiBjYW5ub3QgbWVyZ2UsIG5lZWQgdG8gYWRkIHRoaXMgbGVnZW5kIHNlcGFyYXRlbHlcbiAgICAgICAgICBsZWdlbmRCeURvbWFpbltkb21haW5IYXNoXS5wdXNoKGxlZ2VuZENvbXBvbmVudEluZGV4W2NoYW5uZWxdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZ2VuZEJ5RG9tYWluW2RvbWFpbkhhc2hdID0gW2xlZ2VuZENvbXBvbmVudEluZGV4W2NoYW5uZWxdLmNsb25lKCldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmbGF0dGVuKHZhbHMobGVnZW5kQnlEb21haW4pKS5tYXAoKGxlZ2VuZENtcHQ6IExlZ2VuZENvbXBvbmVudCkgPT4gbGVnZW5kQ21wdC5jb21iaW5lKCkpO1xufVxuIl19","import * as tslib_1 from \"tslib\";\nimport { contains } from '../../util';\nimport { isVgSignalRef } from '../../vega.schema';\nimport { isConcatModel, isLayerModel, isRepeatModel } from '../model';\nexport function assembleProjections(model) {\n    if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n        return assembleProjectionsForModelAndChildren(model);\n    }\n    else {\n        return assembleProjectionForModel(model);\n    }\n}\nexport function assembleProjectionsForModelAndChildren(model) {\n    return model.children.reduce(function (projections, child) {\n        return projections.concat(child.assembleProjections());\n    }, assembleProjectionForModel(model));\n}\nexport function assembleProjectionForModel(model) {\n    var component = model.component.projection;\n    if (!component || component.merged) {\n        return [];\n    }\n    var projection = component.combine();\n    var name = projection.name, rest = tslib_1.__rest(projection, [\"name\"]); // we need to extract name so that it is always present in the output and pass TS type validation\n    var size = {\n        signal: \"[\" + component.size.map(function (ref) { return ref.signal; }).join(', ') + \"]\"\n    };\n    var fit = component.data.reduce(function (sources, data) {\n        var source = isVgSignalRef(data) ? data.signal : \"data('\" + model.lookupDataSource(data) + \"')\";\n        if (!contains(sources, source)) {\n            // build a unique list of sources\n            sources.push(source);\n        }\n        return sources;\n    }, []);\n    if (fit.length <= 0) {\n        throw new Error(\"Projection's fit didn't find any data sources\");\n    }\n    return [tslib_1.__assign({ name: name,\n            size: size, fit: {\n                signal: fit.length > 1 ? \"[\" + fit.join(', ') + \"]\" : fit[0]\n            } }, rest)];\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9wcm9qZWN0aW9uL2Fzc2VtYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ3BDLE9BQU8sRUFBQyxhQUFhLEVBQTRCLE1BQU0sbUJBQW1CLENBQUM7QUFDM0UsT0FBTyxFQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFRLE1BQU0sVUFBVSxDQUFDO0FBRTNFLE1BQU0sOEJBQThCLEtBQVk7SUFDOUMsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN2RSxPQUFPLHNDQUFzQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3REO1NBQU07UUFDTCxPQUFPLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzFDO0FBQ0gsQ0FBQztBQUVELE1BQU0saURBQWlELEtBQVk7SUFDakUsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFDLFdBQVcsRUFBRSxLQUFLO1FBQzlDLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELENBQUMsRUFBRSwwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFFRCxNQUFNLHFDQUFxQyxLQUFZO0lBQ3JELElBQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0lBQzdDLElBQUksQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUNsQyxPQUFPLEVBQUUsQ0FBQztLQUNYO0lBRUQsSUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hDLElBQUEsc0JBQUksRUFBRSwyQ0FBTyxDQUFlLENBQUUsaUdBQWlHO0lBRXRJLElBQU0sSUFBSSxHQUFnQjtRQUN4QixNQUFNLEVBQUUsTUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLEdBQUcsQ0FBQyxNQUFNLEVBQVYsQ0FBVSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFHO0tBQ2xFLENBQUM7SUFFRixJQUFNLEdBQUcsR0FBYSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFDLE9BQU8sRUFBRSxJQUFJO1FBQ3hELElBQU0sTUFBTSxHQUFXLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBUyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQUksQ0FBQztRQUNyRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBRTtZQUM5QixpQ0FBaUM7WUFDakMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN0QjtRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVQLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7UUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0tBQ2xFO0lBRUQsT0FBTyxvQkFDTCxJQUFJLE1BQUE7WUFDSixJQUFJLE1BQUEsRUFDSixHQUFHLEVBQUU7Z0JBQ0gsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUN4RCxJQUNFLElBQUksRUFDUCxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y29udGFpbnN9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtpc1ZnU2lnbmFsUmVmLCBWZ1Byb2plY3Rpb24sIFZnU2lnbmFsUmVmfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge2lzQ29uY2F0TW9kZWwsIGlzTGF5ZXJNb2RlbCwgaXNSZXBlYXRNb2RlbCwgTW9kZWx9IGZyb20gJy4uL21vZGVsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlUHJvamVjdGlvbnMobW9kZWw6IE1vZGVsKTogVmdQcm9qZWN0aW9uW10ge1xuICBpZiAoaXNMYXllck1vZGVsKG1vZGVsKSB8fCBpc0NvbmNhdE1vZGVsKG1vZGVsKSB8fCBpc1JlcGVhdE1vZGVsKG1vZGVsKSkge1xuICAgIHJldHVybiBhc3NlbWJsZVByb2plY3Rpb25zRm9yTW9kZWxBbmRDaGlsZHJlbihtb2RlbCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFzc2VtYmxlUHJvamVjdGlvbkZvck1vZGVsKG1vZGVsKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZW1ibGVQcm9qZWN0aW9uc0Zvck1vZGVsQW5kQ2hpbGRyZW4obW9kZWw6IE1vZGVsKTogVmdQcm9qZWN0aW9uW10ge1xuICByZXR1cm4gbW9kZWwuY2hpbGRyZW4ucmVkdWNlKChwcm9qZWN0aW9ucywgY2hpbGQpID0+IHtcbiAgICByZXR1cm4gcHJvamVjdGlvbnMuY29uY2F0KGNoaWxkLmFzc2VtYmxlUHJvamVjdGlvbnMoKSk7XG4gIH0sIGFzc2VtYmxlUHJvamVjdGlvbkZvck1vZGVsKG1vZGVsKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlbWJsZVByb2plY3Rpb25Gb3JNb2RlbChtb2RlbDogTW9kZWwpOiBWZ1Byb2plY3Rpb25bXSB7XG4gIGNvbnN0IGNvbXBvbmVudCA9IG1vZGVsLmNvbXBvbmVudC5wcm9qZWN0aW9uO1xuICBpZiAoIWNvbXBvbmVudCB8fCBjb21wb25lbnQubWVyZ2VkKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3QgcHJvamVjdGlvbiA9IGNvbXBvbmVudC5jb21iaW5lKCk7XG4gIGNvbnN0IHtuYW1lLCAuLi5yZXN0fSA9IHByb2plY3Rpb247ICAvLyB3ZSBuZWVkIHRvIGV4dHJhY3QgbmFtZSBzbyB0aGF0IGl0IGlzIGFsd2F5cyBwcmVzZW50IGluIHRoZSBvdXRwdXQgYW5kIHBhc3MgVFMgdHlwZSB2YWxpZGF0aW9uXG5cbiAgY29uc3Qgc2l6ZTogVmdTaWduYWxSZWYgPSB7XG4gICAgc2lnbmFsOiBgWyR7Y29tcG9uZW50LnNpemUubWFwKChyZWYpID0+IHJlZi5zaWduYWwpLmpvaW4oJywgJyl9XWBcbiAgfTtcblxuICBjb25zdCBmaXQ6IHN0cmluZ1tdID0gY29tcG9uZW50LmRhdGEucmVkdWNlKChzb3VyY2VzLCBkYXRhKSA9PiB7XG4gICAgY29uc3Qgc291cmNlOiBzdHJpbmcgPSBpc1ZnU2lnbmFsUmVmKGRhdGEpID8gZGF0YS5zaWduYWwgOiBgZGF0YSgnJHttb2RlbC5sb29rdXBEYXRhU291cmNlKGRhdGEpfScpYDtcbiAgICBpZiAoIWNvbnRhaW5zKHNvdXJjZXMsIHNvdXJjZSkpIHtcbiAgICAgIC8vIGJ1aWxkIGEgdW5pcXVlIGxpc3Qgb2Ygc291cmNlc1xuICAgICAgc291cmNlcy5wdXNoKHNvdXJjZSk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VzO1xuICB9LCBbXSk7XG5cbiAgaWYgKGZpdC5sZW5ndGggPD0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlByb2plY3Rpb24ncyBmaXQgZGlkbid0IGZpbmQgYW55IGRhdGEgc291cmNlc1wiKTtcbiAgfVxuXG4gIHJldHVybiBbe1xuICAgIG5hbWUsXG4gICAgc2l6ZSxcbiAgICBmaXQ6IHtcbiAgICAgIHNpZ25hbDogZml0Lmxlbmd0aCA+IDEgPyBgWyR7Zml0LmpvaW4oJywgJyl9XWAgOiBmaXRbMF1cbiAgICB9LFxuICAgIC4uLnJlc3RcbiAgfV07XG59XG4iXX0=","export var PROJECTION_PROPERTIES = [\n    'type',\n    'clipAngle',\n    'clipExtent',\n    'center',\n    'rotate',\n    'precision',\n    'coefficient',\n    'distance',\n    'fraction',\n    'lobes',\n    'parallel',\n    'radius',\n    'ratio',\n    'spacing',\n    'tilt'\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm9qZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJEQSxNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FBeUI7SUFDekQsTUFBTTtJQUNOLFdBQVc7SUFDWCxZQUFZO0lBQ1osUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsYUFBYTtJQUNiLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxNQUFNO0NBQ1AsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHtWZ1Byb2plY3Rpb25UeXBlfSBmcm9tICcuL3ZlZ2Euc2NoZW1hJztcblxuZXhwb3J0IHR5cGUgUHJvamVjdGlvblR5cGUgPSBWZ1Byb2plY3Rpb25UeXBlO1xuXG5leHBvcnQgaW50ZXJmYWNlIFByb2plY3Rpb24ge1xuICAvKipcbiAgICogVGhlIGNhcnRvZ3JhcGhpYyBwcm9qZWN0aW9uIHRvIHVzZS4gVGhpcyB2YWx1ZSBpcyBjYXNlLWluc2Vuc2l0aXZlLCBmb3IgZXhhbXBsZSBgXCJhbGJlcnNcImAgYW5kIGBcIkFsYmVyc1wiYCBpbmRpY2F0ZSB0aGUgc2FtZSBwcm9qZWN0aW9uIHR5cGUuIFlvdSBjYW4gZmluZCBhbGwgdmFsaWQgcHJvamVjdGlvbiB0eXBlcyBbaW4gdGhlIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3MvcHJvamVjdGlvbi5odG1sI3Byb2plY3Rpb24tdHlwZXMpLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYG1lcmNhdG9yYFxuICAgKi9cbiAgdHlwZT86IFByb2plY3Rpb25UeXBlO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwcm9qZWN0aW9u4oCZcyBjbGlwcGluZyBjaXJjbGUgcmFkaXVzIHRvIHRoZSBzcGVjaWZpZWQgYW5nbGUgaW4gZGVncmVlcy4gSWYgYG51bGxgLCBzd2l0Y2hlcyB0byBbYW50aW1lcmlkaWFuXShodHRwOi8vYmwub2Nrcy5vcmcvbWJvc3RvY2svMzc4ODk5OSkgY3V0dGluZyByYXRoZXIgdGhhbiBzbWFsbC1jaXJjbGUgY2xpcHBpbmcuXG4gICAqL1xuICBjbGlwQW5nbGU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHByb2plY3Rpb27igJlzIHZpZXdwb3J0IGNsaXAgZXh0ZW50IHRvIHRoZSBzcGVjaWZpZWQgYm91bmRzIGluIHBpeGVscy4gVGhlIGV4dGVudCBib3VuZHMgYXJlIHNwZWNpZmllZCBhcyBhbiBhcnJheSBgW1t4MCwgeTBdLCBbeDEsIHkxXV1gLCB3aGVyZSBgeDBgIGlzIHRoZSBsZWZ0LXNpZGUgb2YgdGhlIHZpZXdwb3J0LCBgeTBgIGlzIHRoZSB0b3AsIGB4MWAgaXMgdGhlIHJpZ2h0IGFuZCBgeTFgIGlzIHRoZSBib3R0b20uIElmIGBudWxsYCwgbm8gdmlld3BvcnQgY2xpcHBpbmcgaXMgcGVyZm9ybWVkLlxuICAgKi9cbiAgY2xpcEV4dGVudD86IG51bWJlcltdW107XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHByb2plY3Rpb27igJlzIGNlbnRlciB0byB0aGUgc3BlY2lmaWVkIGNlbnRlciwgYSB0d28tZWxlbWVudCBhcnJheSBvZiBsb25naXR1ZGUgYW5kIGxhdGl0dWRlIGluIGRlZ3JlZXMuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgWzAsIDBdYFxuICAgKi9cbiAgY2VudGVyPzogbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHByb2plY3Rpb27igJlzIHRocmVlLWF4aXMgcm90YXRpb24gdG8gdGhlIHNwZWNpZmllZCBhbmdsZXMsIHdoaWNoIG11c3QgYmUgYSB0d28tIG9yIHRocmVlLWVsZW1lbnQgYXJyYXkgb2YgbnVtYmVycyBbYGxhbWJkYWAsIGBwaGlgLCBgZ2FtbWFgXSBzcGVjaWZ5aW5nIHRoZSByb3RhdGlvbiBhbmdsZXMgaW4gZGVncmVlcyBhYm91dCBlYWNoIHNwaGVyaWNhbCBheGlzLiAoVGhlc2UgY29ycmVzcG9uZCB0byB5YXcsIHBpdGNoIGFuZCByb2xsLilcbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBbMCwgMCwgMF1gXG4gICAqL1xuICByb3RhdGU/OiBudW1iZXJbXTtcblxuICAvKipcbiAgICogU2V0cyB0aGUgdGhyZXNob2xkIGZvciB0aGUgcHJvamVjdGlvbuKAmXMgW2FkYXB0aXZlIHJlc2FtcGxpbmddKGh0dHA6Ly9ibC5vY2tzLm9yZy9tYm9zdG9jay8zNzk1NTQ0KSB0byB0aGUgc3BlY2lmaWVkIHZhbHVlIGluIHBpeGVscy4gVGhpcyB2YWx1ZSBjb3JyZXNwb25kcyB0byB0aGUgW0RvdWdsYXPigJNQZXVja2VyIGRpc3RhbmNlXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1JhbWVyJUUyJTgwJTkzRG91Z2xhcyVFMiU4MCU5M1BldWNrZXJfYWxnb3JpdGhtKS4gSWYgcHJlY2lzaW9uIGlzIG5vdCBzcGVjaWZpZWQsIHJldHVybnMgdGhlIHByb2plY3Rpb27igJlzIGN1cnJlbnQgcmVzYW1wbGluZyBwcmVjaXNpb24gd2hpY2ggZGVmYXVsdHMgdG8gYOKImjAuNSDiiYUgMC43MDcxMOKApmAuXG4gICAqL1xuICBwcmVjaXNpb24/OiBTdHJpbmc7XG5cbiAgLyogVGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIGFyZSBhbGwgc3VwcG9ydGVkIGZvciBzcGVjaWZpYyB0eXBlcyBvZiBwcm9qZWN0aW9ucy4gQ29uc3VsdCB0aGUgZDMtZ2VvLXByb2plY3Rpb24gbGlicmFyeSBmb3IgbW9yZSBpbmZvcm1hdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLWdlby1wcm9qZWN0aW9uICovXG4gIGNvZWZmaWNpZW50PzogbnVtYmVyO1xuICBkaXN0YW5jZT86IG51bWJlcjtcbiAgZnJhY3Rpb24/OiBudW1iZXI7XG4gIGxvYmVzPzogbnVtYmVyO1xuICBwYXJhbGxlbD86IG51bWJlcjtcbiAgcmFkaXVzPzogbnVtYmVyO1xuICByYXRpbz86IG51bWJlcjtcbiAgc3BhY2luZz86IG51bWJlcjtcbiAgdGlsdD86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBBbnkgcHJvcGVydHkgb2YgUHJvamVjdGlvbiBjYW4gYmUgaW4gY29uZmlnXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvamVjdGlvbkNvbmZpZyBleHRlbmRzIFByb2plY3Rpb24geyB9XG5cbmV4cG9ydCBjb25zdCBQUk9KRUNUSU9OX1BST1BFUlRJRVM6IChrZXlvZiBQcm9qZWN0aW9uKVtdID0gW1xuICAndHlwZScsXG4gICdjbGlwQW5nbGUnLFxuICAnY2xpcEV4dGVudCcsXG4gICdjZW50ZXInLFxuICAncm90YXRlJyxcbiAgJ3ByZWNpc2lvbicsXG4gICdjb2VmZmljaWVudCcsXG4gICdkaXN0YW5jZScsXG4gICdmcmFjdGlvbicsXG4gICdsb2JlcycsXG4gICdwYXJhbGxlbCcsXG4gICdyYWRpdXMnLFxuICAncmF0aW8nLFxuICAnc3BhY2luZycsXG4gICd0aWx0J1xuXTtcbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { Split } from '../split';\nvar ProjectionComponent = /** @class */ (function (_super) {\n    tslib_1.__extends(ProjectionComponent, _super);\n    function ProjectionComponent(name, specifiedProjection, size, data) {\n        var _this = _super.call(this, tslib_1.__assign({}, specifiedProjection), // all explicit properties of projection\n        { name: name } // name as initial implicit property\n        ) || this;\n        _this.specifiedProjection = specifiedProjection;\n        _this.size = size;\n        _this.data = data;\n        _this.merged = false;\n        return _this;\n    }\n    return ProjectionComponent;\n}(Split));\nexport { ProjectionComponent };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvcHJvamVjdGlvbi9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFL0I7SUFBeUMsK0NBQW1CO0lBRzFELDZCQUFZLElBQVksRUFBUyxtQkFBK0IsRUFBUyxJQUFtQixFQUFTLElBQThCO1FBQW5JLFlBQ0UsdUNBQ00sbUJBQW1CLEdBQUksd0NBQXdDO1FBQ25FLEVBQUMsSUFBSSxNQUFBLEVBQUMsQ0FBRSxvQ0FBb0M7U0FDN0MsU0FDRjtRQUxnQyx5QkFBbUIsR0FBbkIsbUJBQW1CLENBQVk7UUFBUyxVQUFJLEdBQUosSUFBSSxDQUFlO1FBQVMsVUFBSSxHQUFKLElBQUksQ0FBMEI7UUFGNUgsWUFBTSxHQUFHLEtBQUssQ0FBQzs7SUFPdEIsQ0FBQztJQUNILDBCQUFDO0FBQUQsQ0FBQyxBQVRELENBQXlDLEtBQUssR0FTN0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Byb2plY3Rpb259IGZyb20gJy4uLy4uL3Byb2plY3Rpb24nO1xuaW1wb3J0IHtWZ1Byb2plY3Rpb24sIFZnU2lnbmFsUmVmfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge1NwbGl0fSBmcm9tICcuLi9zcGxpdCc7XG5cbmV4cG9ydCBjbGFzcyBQcm9qZWN0aW9uQ29tcG9uZW50IGV4dGVuZHMgU3BsaXQ8VmdQcm9qZWN0aW9uPiB7XG4gIHB1YmxpYyBtZXJnZWQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHB1YmxpYyBzcGVjaWZpZWRQcm9qZWN0aW9uOiBQcm9qZWN0aW9uLCBwdWJsaWMgc2l6ZTogVmdTaWduYWxSZWZbXSwgcHVibGljIGRhdGE6IChzdHJpbmcgfCBWZ1NpZ25hbFJlZilbXSkge1xuICAgIHN1cGVyKFxuICAgICAgey4uLnNwZWNpZmllZFByb2plY3Rpb259LCAgLy8gYWxsIGV4cGxpY2l0IHByb3BlcnRpZXMgb2YgcHJvamVjdGlvblxuICAgICAge25hbWV9ICAvLyBuYW1lIGFzIGluaXRpYWwgaW1wbGljaXQgcHJvcGVydHlcbiAgICApO1xuICB9XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { GEOPOSITION_CHANNELS, LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { MAIN } from '../../data';\nimport { isFieldDef } from '../../fielddef';\nimport { GEOSHAPE } from '../../mark';\nimport { PROJECTION_PROPERTIES } from '../../projection';\nimport { GEOJSON } from '../../type';\nimport { duplicate, every, stringify } from '../../util';\nimport { isUnitModel } from '../model';\nimport { ProjectionComponent } from './component';\nexport function parseProjection(model) {\n    if (isUnitModel(model)) {\n        model.component.projection = parseUnitProjection(model);\n    }\n    else {\n        // because parse happens from leaves up (unit specs before layer spec),\n        // we can be sure that the above if statement has already occurred\n        // and therefore we have access to child.component.projection\n        // for each of model's children\n        model.component.projection = parseNonUnitProjections(model);\n    }\n}\nfunction parseUnitProjection(model) {\n    var specifiedProjection = model.specifiedProjection, markDef = model.markDef, config = model.config, encoding = model.encoding;\n    var isGeoShapeMark = markDef && markDef.type === GEOSHAPE;\n    var isGeoPointOrLineMark = encoding && GEOPOSITION_CHANNELS.some(function (channel) { return isFieldDef(encoding[channel]); });\n    if (isGeoShapeMark || isGeoPointOrLineMark) {\n        var data_1 = [];\n        [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach(function (posssiblePair) {\n            if (model.channelHasField(posssiblePair[0]) || model.channelHasField(posssiblePair[1])) {\n                data_1.push({\n                    signal: model.getName(\"geojson_\" + data_1.length)\n                });\n            }\n        });\n        if (model.channelHasField(SHAPE) && model.fieldDef(SHAPE).type === GEOJSON) {\n            data_1.push({\n                signal: model.getName(\"geojson_\" + data_1.length)\n            });\n        }\n        if (data_1.length === 0) {\n            // main source is geojson, so we can just use that\n            data_1.push(model.requestDataName(MAIN));\n        }\n        return new ProjectionComponent(model.projectionName(true), tslib_1.__assign({}, (config.projection || {}), (specifiedProjection || {})), [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')], data_1);\n    }\n    return undefined;\n}\nfunction mergeIfNoConflict(first, second) {\n    var allPropertiesShared = every(PROJECTION_PROPERTIES, function (prop) {\n        // neither has the poperty\n        if (!first.explicit.hasOwnProperty(prop) &&\n            !second.explicit.hasOwnProperty(prop)) {\n            return true;\n        }\n        // both have property and an equal value for property\n        if (first.explicit.hasOwnProperty(prop) &&\n            second.explicit.hasOwnProperty(prop) &&\n            // some properties might be signals or objects and require hashing for comparison\n            stringify(first.get(prop)) === stringify(second.get(prop))) {\n            return true;\n        }\n        return false;\n    });\n    var size = stringify(first.size) === stringify(second.size);\n    if (size) {\n        if (allPropertiesShared) {\n            return first;\n        }\n        else if (stringify(first.explicit) === stringify({})) {\n            return second;\n        }\n        else if (stringify(second.explicit) === stringify({})) {\n            return first;\n        }\n    }\n    // if all properties don't match, let each unit spec have its own projection\n    return null;\n}\nfunction parseNonUnitProjections(model) {\n    if (model.children.length === 0) {\n        return undefined;\n    }\n    var nonUnitProjection;\n    var mergable = every(model.children, function (child) {\n        parseProjection(child);\n        var projection = child.component.projection;\n        if (!projection) {\n            // child layer does not use a projection\n            return true;\n        }\n        else if (!nonUnitProjection) {\n            // cached 'projection' is null, cache this one\n            nonUnitProjection = projection;\n            return true;\n        }\n        else {\n            var merge = mergeIfNoConflict(nonUnitProjection, projection);\n            if (merge) {\n                nonUnitProjection = merge;\n            }\n            return !!merge;\n        }\n    });\n    // it cached one and all other children share the same projection,\n    if (nonUnitProjection && mergable) {\n        // so we can elevate it to the layer level\n        var name_1 = model.projectionName(true);\n        var modelProjection_1 = new ProjectionComponent(name_1, nonUnitProjection.specifiedProjection, nonUnitProjection.size, duplicate(nonUnitProjection.data));\n        // rename and assign all others as merged\n        model.children.forEach(function (child) {\n            if (child.component.projection) {\n                modelProjection_1.data = modelProjection_1.data.concat(child.component.projection.data);\n                child.renameProjection(child.component.projection.get('name'), name_1);\n                child.component.projection.merged = true;\n            }\n        });\n        return modelProjection_1;\n    }\n    return undefined;\n}\n//# sourceMappingURL=data:application/json;base64,","import { isArray, isString } from 'vega-util';\nexport function isSortField(sort) {\n    return !!sort && (sort['op'] === 'count' || !!sort['field']) && !!sort['op'];\n}\nexport function isSortArray(sort) {\n    return !!sort && isArray(sort) && sort.every(function (s) { return isString(s); });\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBNkI1QyxNQUFNLHNCQUF5QixJQUF5QztJQUN0RSxPQUFPLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssT0FBTyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9FLENBQUM7QUFFRCxNQUFNLHNCQUF5QixJQUF5QztJQUN0RSxPQUFPLENBQUMsQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQVgsQ0FBVyxDQUFDLENBQUM7QUFDakUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWdncmVnYXRlT3B9IGZyb20gJ3ZlZ2EnO1xuaW1wb3J0IHtpc0FycmF5LCBpc1N0cmluZ30gZnJvbSAndmVnYS11dGlsJztcblxuaW1wb3J0IHtWZ0NvbXBhcmF0b3JPcmRlcn0gZnJvbSAnLi92ZWdhLnNjaGVtYSc7XG5cblxuZXhwb3J0IHR5cGUgU29ydE9yZGVyID0gVmdDb21wYXJhdG9yT3JkZXIgfCBudWxsO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNvcnRGaWVsZDxGPiB7XG4gIC8qKlxuICAgKiBUaGUgZGF0YSBbZmllbGRdKGZpZWxkLmh0bWwpIHRvIHNvcnQgYnkuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBJZiB1bnNwZWNpZmllZCwgZGVmYXVsdHMgdG8gdGhlIGZpZWxkIHNwZWNpZmllZCBpbiB0aGUgb3V0ZXIgZGF0YSByZWZlcmVuY2UuXG4gICAqL1xuICBmaWVsZD86IEY7XG4gIC8qKlxuICAgKiBBbiBbYWdncmVnYXRlIG9wZXJhdGlvbl0oYWdncmVnYXRlLmh0bWwjb3BzKSB0byBwZXJmb3JtIG9uIHRoZSBmaWVsZCBwcmlvciB0byBzb3J0aW5nIChlLmcuLCBgXCJjb3VudFwiYCwgYFwibWVhblwiYCBhbmQgYFwibWVkaWFuXCJgKS5cbiAgICogVGhpcyBwcm9wZXJ0eSBpcyByZXF1aXJlZCBpbiBjYXNlcyB3aGVyZSB0aGUgc29ydCBmaWVsZCBhbmQgdGhlIGRhdGEgcmVmZXJlbmNlIGZpZWxkIGRvIG5vdCBtYXRjaC5cbiAgICogVGhlIGlucHV0IGRhdGEgb2JqZWN0cyB3aWxsIGJlIGFnZ3JlZ2F0ZWQsIGdyb3VwZWQgYnkgdGhlIGVuY29kZWQgZGF0YSBmaWVsZC5cbiAgICpcbiAgICogRm9yIGEgZnVsbCBsaXN0IG9mIG9wZXJhdGlvbnMsIHBsZWFzZSBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIFthZ2dyZWdhdGVdKGFnZ3JlZ2F0ZS5odG1sI29wcykuXG4gICAqL1xuICBvcDogQWdncmVnYXRlT3A7XG5cbiAgLyoqXG4gICAqIFRoZSBzb3J0IG9yZGVyLiBPbmUgb2YgYFwiYXNjZW5kaW5nXCJgIChkZWZhdWx0KSwgYFwiZGVzY2VuZGluZ1wiYCwgb3IgYG51bGxgIChubyBub3Qgc29ydCkuXG4gICAqL1xuICBvcmRlcj86IFNvcnRPcmRlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU29ydEZpZWxkPEY+KHNvcnQ6IHN0cmluZ1tdIHwgU29ydE9yZGVyIHwgU29ydEZpZWxkPEY+KTogc29ydCBpcyBTb3J0RmllbGQ8Rj4ge1xuICByZXR1cm4gISFzb3J0ICYmIChzb3J0WydvcCddID09PSAnY291bnQnIHx8ICEhc29ydFsnZmllbGQnXSkgJiYgISFzb3J0WydvcCddO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTb3J0QXJyYXk8Rj4oc29ydDogc3RyaW5nW10gfCBTb3J0T3JkZXIgfCBTb3J0RmllbGQ8Rj4pOiBzb3J0IGlzIHN0cmluZ1tdIHtcbiAgcmV0dXJuICEhc29ydCAmJiBpc0FycmF5KHNvcnQpICYmIHNvcnQuZXZlcnkocyA9PiBpc1N0cmluZyhzKSk7XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\n/**\n * A node in the dataflow tree.\n */\nvar DataFlowNode = /** @class */ (function () {\n    function DataFlowNode(parent, debugName) {\n        this.debugName = debugName;\n        this._children = [];\n        this._parent = null;\n        if (parent) {\n            this.parent = parent;\n        }\n    }\n    /**\n     * Clone this node with a deep copy but don't clone links to children or parents.\n     */\n    DataFlowNode.prototype.clone = function () {\n        throw new Error('Cannot clone node');\n    };\n    /**\n     * Set of fields that are being created by this node.\n     */\n    DataFlowNode.prototype.producedFields = function () {\n        return {};\n    };\n    DataFlowNode.prototype.dependentFields = function () {\n        return {};\n    };\n    Object.defineProperty(DataFlowNode.prototype, \"parent\", {\n        get: function () {\n            return this._parent;\n        },\n        /**\n         * Set the parent of the node and also add this not to the parent's children.\n         */\n        set: function (parent) {\n            this._parent = parent;\n            parent.addChild(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataFlowNode.prototype, \"children\", {\n        get: function () {\n            return this._children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DataFlowNode.prototype.numChildren = function () {\n        return this._children.length;\n    };\n    DataFlowNode.prototype.addChild = function (child) {\n        this._children.push(child);\n    };\n    DataFlowNode.prototype.removeChild = function (oldChild) {\n        this._children.splice(this._children.indexOf(oldChild), 1);\n    };\n    /**\n     * Remove node from the dataflow.\n     */\n    DataFlowNode.prototype.remove = function () {\n        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            child.parent = this._parent;\n        }\n        this._parent.removeChild(this);\n    };\n    /**\n     * Insert another node as a parent of this node.\n     */\n    DataFlowNode.prototype.insertAsParentOf = function (other) {\n        var parent = other.parent;\n        parent.removeChild(this);\n        this.parent = parent;\n        other.parent = this;\n    };\n    DataFlowNode.prototype.swapWithParent = function () {\n        var parent = this._parent;\n        var newParent = parent.parent;\n        // reconnect the children\n        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            child.parent = parent;\n        }\n        // remove old links\n        this._children = []; // equivalent to removing every child link one by one\n        parent.removeChild(this);\n        parent.parent.removeChild(parent);\n        // swap two nodes\n        this.parent = newParent;\n        parent.parent = this;\n    };\n    return DataFlowNode;\n}());\nexport { DataFlowNode };\nvar OutputNode = /** @class */ (function (_super) {\n    tslib_1.__extends(OutputNode, _super);\n    /**\n     * @param source The name of the source. Will change in assemble.\n     * @param type The type of the output node.\n     * @param refCounts A global ref counter map.\n     */\n    function OutputNode(parent, source, type, refCounts) {\n        var _this = _super.call(this, parent, source) || this;\n        _this.type = type;\n        _this.refCounts = refCounts;\n        _this._source = _this._name = source;\n        if (_this.refCounts && !(_this._name in _this.refCounts)) {\n            _this.refCounts[_this._name] = 0;\n        }\n        return _this;\n    }\n    OutputNode.prototype.clone = function () {\n        var cloneObj = new this.constructor;\n        cloneObj.debugName = 'clone_' + this.debugName;\n        cloneObj._source = this._source;\n        cloneObj._name = 'clone_' + this._name;\n        cloneObj.type = this.type;\n        cloneObj.refCounts = this.refCounts;\n        cloneObj.refCounts[cloneObj._name] = 0;\n        return cloneObj;\n    };\n    /**\n     * Request the datasource name and increase the ref counter.\n     *\n     * During the parsing phase, this will return the simple name such as 'main' or 'raw'.\n     * It is crucial to request the name from an output node to mark it as a required node.\n     * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.\n     *\n     * In the assemble phase, this will return the correct name.\n     */\n    OutputNode.prototype.getSource = function () {\n        this.refCounts[this._name]++;\n        return this._source;\n    };\n    OutputNode.prototype.isRequired = function () {\n        return !!this.refCounts[this._name];\n    };\n    OutputNode.prototype.setSource = function (source) {\n        this._source = source;\n    };\n    return OutputNode;\n}(DataFlowNode));\nexport { OutputNode };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isScaleFieldDef, vgField } from '../../fielddef';\nimport { isSortArray } from '../../sort';\nimport { duplicate } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * We don't know what a calculate node depends on so we should never move it beyond anything that produces fields.\n */\nvar CalculateNode = /** @class */ (function (_super) {\n    tslib_1.__extends(CalculateNode, _super);\n    function CalculateNode(parent, transform) {\n        var _this = _super.call(this, parent) || this;\n        _this.transform = transform;\n        return _this;\n    }\n    CalculateNode.prototype.clone = function () {\n        return new CalculateNode(null, duplicate(this.transform));\n    };\n    CalculateNode.parseAllForSortIndex = function (parent, model) {\n        // get all the encoding with sort fields from model\n        model.forEachFieldDef(function (fieldDef, channel) {\n            if (isScaleFieldDef(fieldDef) && isSortArray(fieldDef.sort)) {\n                var transform = {\n                    calculate: CalculateNode.calculateExpressionFromSortField(fieldDef.field, fieldDef.sort),\n                    as: sortArrayIndexField(model, channel)\n                };\n                parent = new CalculateNode(parent, transform);\n            }\n        });\n        return parent;\n    };\n    CalculateNode.calculateExpressionFromSortField = function (field, sortFields) {\n        var expression = '';\n        var i;\n        for (i = 0; i < sortFields.length; i++) {\n            expression += \"datum.\" + field + \" === '\" + sortFields[i] + \"' ? \" + i + \" : \";\n        }\n        expression += i;\n        return expression;\n    };\n    CalculateNode.prototype.producedFields = function () {\n        var out = {};\n        out[this.transform.as] = true;\n        return out;\n    };\n    CalculateNode.prototype.assemble = function () {\n        return {\n            type: 'formula',\n            expr: this.transform.calculate,\n            as: this.transform.as\n        };\n    };\n    return CalculateNode;\n}(DataFlowNode));\nexport { CalculateNode };\nexport function sortArrayIndexField(model, channel) {\n    var fieldDef = model.fieldDef(channel);\n    return channel + \"_\" + vgField(fieldDef) + \"_sort_index\";\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsY3VsYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS9jYWxjdWxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxlQUFlLEVBQWlCLE9BQU8sRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDdkMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUtyQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRXhDOztHQUVHO0FBQ0g7SUFBbUMseUNBQVk7SUFLN0MsdUJBQVksTUFBb0IsRUFBVSxTQUE2QjtRQUF2RSxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQUNkO1FBRnlDLGVBQVMsR0FBVCxTQUFTLENBQW9COztJQUV2RSxDQUFDO0lBTk0sNkJBQUssR0FBWjtRQUNFLE9BQU8sSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBTWEsa0NBQW9CLEdBQWxDLFVBQW1DLE1BQW9CLEVBQUUsS0FBcUI7UUFDNUUsbURBQW1EO1FBQ25ELEtBQUssQ0FBQyxlQUFlLENBQUMsVUFBQyxRQUErQixFQUFFLE9BQXlCO1lBQy9FLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzNELElBQU0sU0FBUyxHQUF1QjtvQkFDcEMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxnQ0FBZ0MsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUM7b0JBQ3hGLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDO2lCQUN4QyxDQUFDO2dCQUNGLE1BQU0sR0FBRyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDL0M7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFYSw4Q0FBZ0MsR0FBOUMsVUFBK0MsS0FBYSxFQUFFLFVBQW9CO1FBQ2hGLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQVMsQ0FBQztRQUNkLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN0QyxVQUFVLElBQUksV0FBUyxLQUFLLGNBQVMsVUFBVSxDQUFDLENBQUMsQ0FBQyxZQUFPLENBQUMsUUFBSyxDQUFDO1NBQ2pFO1FBQ0QsVUFBVSxJQUFJLENBQUMsQ0FBQztRQUNoQixPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRU0sc0NBQWMsR0FBckI7UUFDRSxJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZixHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDOUIsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRU0sZ0NBQVEsR0FBZjtRQUNFLE9BQU87WUFDTCxJQUFJLEVBQUUsU0FBUztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVM7WUFDOUIsRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtTQUN0QixDQUFDO0lBQ0osQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQTlDRCxDQUFtQyxZQUFZLEdBOEM5Qzs7QUFFRCxNQUFNLDhCQUE4QixLQUFxQixFQUFFLE9BQXlCO0lBQ2xGLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsT0FBVSxPQUFPLFNBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxnQkFBYSxDQUFDO0FBQ3RELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzU2NhbGVGaWVsZERlZiwgU2NhbGVGaWVsZERlZiwgdmdGaWVsZH0gZnJvbSAnLi4vLi4vZmllbGRkZWYnO1xuaW1wb3J0IHtpc1NvcnRBcnJheX0gZnJvbSAnLi4vLi4vc29ydCc7XG5pbXBvcnQge2R1cGxpY2F0ZX0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnRm9ybXVsYVRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtNb2RlbFdpdGhGaWVsZH0gZnJvbSAnLi4vbW9kZWwnO1xuaW1wb3J0IHtTaW5nbGVEZWZDaGFubmVsfSBmcm9tICcuLy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtDYWxjdWxhdGVUcmFuc2Zvcm19IGZyb20gJy4vLi4vLi4vdHJhbnNmb3JtJztcbmltcG9ydCB7RGF0YUZsb3dOb2RlfSBmcm9tICcuL2RhdGFmbG93JztcblxuLyoqXG4gKiBXZSBkb24ndCBrbm93IHdoYXQgYSBjYWxjdWxhdGUgbm9kZSBkZXBlbmRzIG9uIHNvIHdlIHNob3VsZCBuZXZlciBtb3ZlIGl0IGJleW9uZCBhbnl0aGluZyB0aGF0IHByb2R1Y2VzIGZpZWxkcy5cbiAqL1xuZXhwb3J0IGNsYXNzIENhbGN1bGF0ZU5vZGUgZXh0ZW5kcyBEYXRhRmxvd05vZGUge1xuICBwdWJsaWMgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBDYWxjdWxhdGVOb2RlKG51bGwsIGR1cGxpY2F0ZSh0aGlzLnRyYW5zZm9ybSkpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBEYXRhRmxvd05vZGUsIHByaXZhdGUgdHJhbnNmb3JtOiBDYWxjdWxhdGVUcmFuc2Zvcm0pIHtcbiAgICBzdXBlcihwYXJlbnQpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBwYXJzZUFsbEZvclNvcnRJbmRleChwYXJlbnQ6IERhdGFGbG93Tm9kZSwgbW9kZWw6IE1vZGVsV2l0aEZpZWxkKSB7XG4gICAgLy8gZ2V0IGFsbCB0aGUgZW5jb2Rpbmcgd2l0aCBzb3J0IGZpZWxkcyBmcm9tIG1vZGVsXG4gICAgbW9kZWwuZm9yRWFjaEZpZWxkRGVmKChmaWVsZERlZjogU2NhbGVGaWVsZERlZjxzdHJpbmc+LCBjaGFubmVsOiBTaW5nbGVEZWZDaGFubmVsKSA9PiB7XG4gICAgICBpZiAoaXNTY2FsZUZpZWxkRGVmKGZpZWxkRGVmKSAmJiBpc1NvcnRBcnJheShmaWVsZERlZi5zb3J0KSkge1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm06IENhbGN1bGF0ZVRyYW5zZm9ybSA9IHtcbiAgICAgICAgICBjYWxjdWxhdGU6IENhbGN1bGF0ZU5vZGUuY2FsY3VsYXRlRXhwcmVzc2lvbkZyb21Tb3J0RmllbGQoZmllbGREZWYuZmllbGQsIGZpZWxkRGVmLnNvcnQpLFxuICAgICAgICAgIGFzOiBzb3J0QXJyYXlJbmRleEZpZWxkKG1vZGVsLCBjaGFubmVsKVxuICAgICAgICB9O1xuICAgICAgICBwYXJlbnQgPSBuZXcgQ2FsY3VsYXRlTm9kZShwYXJlbnQsIHRyYW5zZm9ybSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcmVudDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY2FsY3VsYXRlRXhwcmVzc2lvbkZyb21Tb3J0RmllbGQoZmllbGQ6IHN0cmluZywgc29ydEZpZWxkczogc3RyaW5nW10pOiBzdHJpbmcge1xuICAgIGxldCBleHByZXNzaW9uID0gJyc7XG4gICAgbGV0IGk6IG51bWJlcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc29ydEZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgZXhwcmVzc2lvbiArPSBgZGF0dW0uJHtmaWVsZH0gPT09ICcke3NvcnRGaWVsZHNbaV19JyA/ICR7aX0gOiBgO1xuICAgIH1cbiAgICBleHByZXNzaW9uICs9IGk7XG4gICAgcmV0dXJuIGV4cHJlc3Npb247XG4gIH1cblxuICBwdWJsaWMgcHJvZHVjZWRGaWVsZHMoKSB7XG4gICAgY29uc3Qgb3V0ID0ge307XG4gICAgb3V0W3RoaXMudHJhbnNmb3JtLmFzXSA9IHRydWU7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZSgpOiBWZ0Zvcm11bGFUcmFuc2Zvcm0ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnZm9ybXVsYScsXG4gICAgICBleHByOiB0aGlzLnRyYW5zZm9ybS5jYWxjdWxhdGUsXG4gICAgICBhczogdGhpcy50cmFuc2Zvcm0uYXNcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0QXJyYXlJbmRleEZpZWxkKG1vZGVsOiBNb2RlbFdpdGhGaWVsZCwgY2hhbm5lbDogU2luZ2xlRGVmQ2hhbm5lbCkge1xuICBjb25zdCBmaWVsZERlZiA9IG1vZGVsLmZpZWxkRGVmKGNoYW5uZWwpO1xuICByZXR1cm4gYCR7Y2hhbm5lbH1fJHt2Z0ZpZWxkKGZpZWxkRGVmKX1fc29ydF9pbmRleGA7XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { isScaleChannel } from '../../channel';\nimport { vgField } from '../../fielddef';\nimport * as log from '../../log';\nimport { differ, duplicate, keys } from '../../util';\nimport { binRequiresRange } from '../common';\nimport { DataFlowNode } from './dataflow';\nfunction addDimension(dims, channel, fieldDef) {\n    if (fieldDef.bin) {\n        dims[vgField(fieldDef, {})] = true;\n        dims[vgField(fieldDef, { binSuffix: 'end' })] = true;\n        if (binRequiresRange(fieldDef, channel)) {\n            dims[vgField(fieldDef, { binSuffix: 'range' })] = true;\n        }\n    }\n    else {\n        dims[vgField(fieldDef)] = true;\n    }\n    return dims;\n}\nfunction mergeMeasures(parentMeasures, childMeasures) {\n    for (var f in childMeasures) {\n        if (childMeasures.hasOwnProperty(f)) {\n            // when we merge a measure, we either have to add an aggregation operator or even a new field\n            var ops = childMeasures[f];\n            for (var op in ops) {\n                if (ops.hasOwnProperty(op)) {\n                    if (f in parentMeasures) {\n                        // add operator to existing measure field\n                        parentMeasures[f][op] = ops[op];\n                    }\n                    else {\n                        parentMeasures[f] = { op: ops[op] };\n                    }\n                }\n            }\n        }\n    }\n}\nvar AggregateNode = /** @class */ (function (_super) {\n    tslib_1.__extends(AggregateNode, _super);\n    /**\n     * @param dimensions string set for dimensions\n     * @param measures dictionary mapping field name => dict of aggregation functions and names to use\n     */\n    function AggregateNode(parent, dimensions, measures) {\n        var _this = _super.call(this, parent) || this;\n        _this.dimensions = dimensions;\n        _this.measures = measures;\n        return _this;\n    }\n    AggregateNode.prototype.clone = function () {\n        return new AggregateNode(null, tslib_1.__assign({}, this.dimensions), duplicate(this.measures));\n    };\n    AggregateNode.makeFromEncoding = function (parent, model) {\n        var isAggregate = false;\n        model.forEachFieldDef(function (fd) {\n            if (fd.aggregate) {\n                isAggregate = true;\n            }\n        });\n        var meas = {};\n        var dims = {};\n        if (!isAggregate) {\n            // no need to create this node if the model has no aggregation\n            return null;\n        }\n        model.forEachFieldDef(function (fieldDef, channel) {\n            if (fieldDef.aggregate) {\n                if (fieldDef.aggregate === 'count') {\n                    meas['*'] = meas['*'] || {};\n                    meas['*']['count'] = vgField(fieldDef, { aggregate: 'count' });\n                }\n                else {\n                    meas[fieldDef.field] = meas[fieldDef.field] || {};\n                    meas[fieldDef.field][fieldDef.aggregate] = vgField(fieldDef);\n                    // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain\n                    if (isScaleChannel(channel) && model.scaleDomain(channel) === 'unaggregated') {\n                        meas[fieldDef.field]['min'] = vgField(fieldDef, { aggregate: 'min' });\n                        meas[fieldDef.field]['max'] = vgField(fieldDef, { aggregate: 'max' });\n                    }\n                }\n            }\n            else {\n                addDimension(dims, channel, fieldDef);\n            }\n        });\n        if ((keys(dims).length + keys(meas).length) === 0) {\n            return null;\n        }\n        return new AggregateNode(parent, dims, meas);\n    };\n    AggregateNode.makeFromTransform = function (parent, t) {\n        var dims = {};\n        var meas = {};\n        for (var _i = 0, _a = t.aggregate; _i < _a.length; _i++) {\n            var s = _a[_i];\n            if (s.op) {\n                if (s.op === 'count') {\n                    meas['*'] = meas['*'] || {};\n                    meas['*']['count'] = s.as || vgField(s);\n                }\n                else {\n                    meas[s.field] = meas[s.field] || {};\n                    meas[s.field][s.op] = s.as || vgField(s);\n                }\n            }\n        }\n        for (var _b = 0, _c = t.groupby || []; _b < _c.length; _b++) {\n            var s = _c[_b];\n            dims[s] = true;\n        }\n        if ((keys(dims).length + keys(meas).length) === 0) {\n            return null;\n        }\n        return new AggregateNode(parent, dims, meas);\n    };\n    AggregateNode.prototype.merge = function (other) {\n        if (!differ(this.dimensions, other.dimensions)) {\n            mergeMeasures(this.measures, other.measures);\n            other.remove();\n        }\n        else {\n            log.debug('different dimensions, cannot merge');\n        }\n    };\n    AggregateNode.prototype.addDimensions = function (fields) {\n        var _this = this;\n        fields.forEach(function (f) { return _this.dimensions[f] = true; });\n    };\n    AggregateNode.prototype.dependentFields = function () {\n        var out = {};\n        keys(this.dimensions).forEach(function (f) { return out[f] = true; });\n        keys(this.measures).forEach(function (m) { return out[m] = true; });\n        return out;\n    };\n    AggregateNode.prototype.producedFields = function () {\n        var _this = this;\n        var out = {};\n        keys(this.measures).forEach(function (field) {\n            keys(_this.measures[field]).forEach(function (op) {\n                out[op + \"_\" + field] = true;\n            });\n        });\n        return out;\n    };\n    AggregateNode.prototype.assemble = function () {\n        var ops = [];\n        var fields = [];\n        var as = [];\n        for (var _i = 0, _a = keys(this.measures); _i < _a.length; _i++) {\n            var field = _a[_i];\n            for (var _b = 0, _c = keys(this.measures[field]); _b < _c.length; _b++) {\n                var op = _c[_b];\n                as.push(this.measures[field][op]);\n                ops.push(op);\n                fields.push(field);\n            }\n        }\n        var result = {\n            type: 'aggregate',\n            groupby: keys(this.dimensions),\n            ops: ops,\n            fields: fields,\n            as: as\n        };\n        return result;\n    };\n    return AggregateNode;\n}(DataFlowNode));\nexport { AggregateNode };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { COLUMN, ROW } from '../../channel';\nimport * as log from '../../log';\nimport { hasDiscreteDomain } from '../../scale';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { assembleDomain, getFieldFromDomain } from '../scale/domain';\nimport { DataFlowNode } from './dataflow';\n/**\n * A node that helps us track what fields we are faceting by.\n */\nvar FacetNode = /** @class */ (function (_super) {\n    tslib_1.__extends(FacetNode, _super);\n    /**\n     * @param model The facet model.\n     * @param name The name that this facet source will have.\n     * @param data The source data for this facet data.\n     */\n    function FacetNode(parent, model, name, data) {\n        var _this = _super.call(this, parent) || this;\n        _this.model = model;\n        _this.name = name;\n        _this.data = data;\n        if (model.facet.column) {\n            _this.columnFields = [model.vgField(COLUMN)];\n            _this.columnName = model.getName('column_domain');\n            if (model.fieldDef(COLUMN).bin) {\n                _this.columnFields.push(model.vgField(COLUMN, { binSuffix: 'end' }));\n            }\n        }\n        if (model.facet.row) {\n            _this.rowFields = [model.vgField(ROW)];\n            _this.rowName = model.getName('row_domain');\n            if (model.fieldDef(ROW).bin) {\n                _this.rowFields.push(model.vgField(ROW, { binSuffix: 'end' }));\n            }\n        }\n        _this.childModel = model.child;\n        return _this;\n    }\n    Object.defineProperty(FacetNode.prototype, \"fields\", {\n        get: function () {\n            var fields = [];\n            if (this.columnFields) {\n                fields = fields.concat(this.columnFields);\n            }\n            if (this.rowFields) {\n                fields = fields.concat(this.rowFields);\n            }\n            return fields;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * The name to reference this source is its name.\n     */\n    FacetNode.prototype.getSource = function () {\n        return this.name;\n    };\n    FacetNode.prototype.getChildIndependentFieldsWithStep = function () {\n        var childIndependentFieldsWithStep = {};\n        for (var _i = 0, _a = ['x', 'y']; _i < _a.length; _i++) {\n            var channel = _a[_i];\n            var childScaleComponent = this.childModel.component.scales[channel];\n            if (childScaleComponent && !childScaleComponent.merged) {\n                var type = childScaleComponent.get('type');\n                var range = childScaleComponent.get('range');\n                if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                    var domain = assembleDomain(this.childModel, channel);\n                    var field = getFieldFromDomain(domain);\n                    if (field) {\n                        childIndependentFieldsWithStep[channel] = field;\n                    }\n                    else {\n                        log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                    }\n                }\n            }\n        }\n        return childIndependentFieldsWithStep;\n    };\n    FacetNode.prototype.assembleRowColumnData = function (channel, crossedDataName, childIndependentFieldsWithStep) {\n        var aggregateChildField = {};\n        var childChannel = channel === 'row' ? 'y' : 'x';\n        if (childIndependentFieldsWithStep[childChannel]) {\n            if (crossedDataName) {\n                aggregateChildField = {\n                    // If there is a crossed data, calculate max\n                    fields: [\"distinct_\" + childIndependentFieldsWithStep[childChannel]],\n                    ops: ['max'],\n                    // Although it is technically a max, just name it distinct so it's easier to refer to it\n                    as: [\"distinct_\" + childIndependentFieldsWithStep[childChannel]]\n                };\n            }\n            else {\n                aggregateChildField = {\n                    // If there is no crossed data, just calculate distinct\n                    fields: [childIndependentFieldsWithStep[childChannel]],\n                    ops: ['distinct']\n                };\n            }\n        }\n        return {\n            name: channel === 'row' ? this.rowName : this.columnName,\n            // Use data from the crossed one if it exist\n            source: crossedDataName || this.data,\n            transform: [tslib_1.__assign({ type: 'aggregate', groupby: channel === 'row' ? this.rowFields : this.columnFields }, aggregateChildField)]\n        };\n    };\n    FacetNode.prototype.assemble = function () {\n        var data = [];\n        var crossedDataName = null;\n        var childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();\n        if (this.columnName && this.rowName && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {\n            // Need to create a cross dataset to correctly calculate cardinality\n            crossedDataName = \"cross_\" + this.columnName + \"_\" + this.rowName;\n            var fields = [].concat(childIndependentFieldsWithStep.x ? [childIndependentFieldsWithStep.x] : [], childIndependentFieldsWithStep.y ? [childIndependentFieldsWithStep.y] : []);\n            var ops = fields.map(function () { return 'distinct'; });\n            data.push({\n                name: crossedDataName,\n                source: this.data,\n                transform: [{\n                        type: 'aggregate',\n                        groupby: this.columnFields.concat(this.rowFields),\n                        fields: fields,\n                        ops: ops\n                    }]\n            });\n        }\n        if (this.columnName) {\n            data.push(this.assembleRowColumnData('column', crossedDataName, childIndependentFieldsWithStep));\n        }\n        if (this.rowName) {\n            data.push(this.assembleRowColumnData('row', crossedDataName, childIndependentFieldsWithStep));\n        }\n        return data;\n    };\n    return FacetNode;\n}(DataFlowNode));\nexport { FacetNode };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isScaleChannel } from '../../channel';\nimport { vgField as fieldRef } from '../../fielddef';\nimport { isPathMark } from '../../mark';\nimport { hasContinuousDomain } from '../../scale';\nimport { keys } from '../../util';\nimport { DataFlowNode } from './dataflow';\nvar FilterInvalidNode = /** @class */ (function (_super) {\n    tslib_1.__extends(FilterInvalidNode, _super);\n    function FilterInvalidNode(parent, fieldDefs) {\n        var _this = _super.call(this, parent) || this;\n        _this.fieldDefs = fieldDefs;\n        return _this;\n    }\n    FilterInvalidNode.prototype.clone = function () {\n        return new FilterInvalidNode(null, tslib_1.__assign({}, this.fieldDefs));\n    };\n    FilterInvalidNode.make = function (parent, model) {\n        var config = model.config, mark = model.mark;\n        if (config.invalidValues !== 'filter') {\n            return null;\n        }\n        var filter = model.reduceFieldDef(function (aggregator, fieldDef, channel) {\n            var scaleComponent = isScaleChannel(channel) && model.getScaleComponent(channel);\n            if (scaleComponent) {\n                var scaleType = scaleComponent.get('type');\n                // While discrete domain scales can handle invalid values, continuous scales can't.\n                // Thus, for non-path marks, we have to filter null for scales with continuous domains.\n                // (For path marks, we will use \"defined\" property and skip these values instead.)\n                if (hasContinuousDomain(scaleType) && !fieldDef.aggregate && !isPathMark(mark)) {\n                    aggregator[fieldDef.field] = fieldDef;\n                }\n            }\n            return aggregator;\n        }, {});\n        if (!keys(filter).length) {\n            return null;\n        }\n        return new FilterInvalidNode(parent, filter);\n    };\n    Object.defineProperty(FilterInvalidNode.prototype, \"filter\", {\n        get: function () {\n            return this.fieldDefs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // create the VgTransforms for each of the filtered fields\n    FilterInvalidNode.prototype.assemble = function () {\n        var _this = this;\n        var filters = keys(this.filter).reduce(function (vegaFilters, field) {\n            var fieldDef = _this.fieldDefs[field];\n            var ref = fieldRef(fieldDef, { expr: 'datum' });\n            if (fieldDef !== null) {\n                vegaFilters.push(ref + \" !== null\");\n                vegaFilters.push(\"!isNaN(\" + ref + \")\");\n            }\n            return vegaFilters;\n        }, []);\n        return filters.length > 0 ?\n            {\n                type: 'filter',\n                expr: filters.join(' && ')\n            } : null;\n    };\n    return FilterInvalidNode;\n}(DataFlowNode));\nexport { FilterInvalidNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyaW52YWxpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL2RhdGEvZmlsdGVyaW52YWxpZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQVcsT0FBTyxJQUFJLFFBQVEsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzdELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxFQUFDLG1CQUFtQixFQUFZLE1BQU0sYUFBYSxDQUFDO0FBQzNELE9BQU8sRUFBTyxJQUFJLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFHdEMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFlBQVksQ0FBQztBQUV4QztJQUF1Qyw2Q0FBWTtJQUtqRCwyQkFBWSxNQUFvQixFQUFVLFNBQWlDO1FBQTNFLFlBQ0Msa0JBQU0sTUFBTSxDQUFDLFNBQ2I7UUFGeUMsZUFBUyxHQUFULFNBQVMsQ0FBd0I7O0lBRTNFLENBQUM7SUFOTSxpQ0FBSyxHQUFaO1FBQ0UsT0FBTyxJQUFJLGlCQUFpQixDQUFDLElBQUksdUJBQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzFELENBQUM7SUFNYSxzQkFBSSxHQUFsQixVQUFtQixNQUFvQixFQUFFLEtBQWdCO1FBQ2hELElBQUEscUJBQU0sRUFBRSxpQkFBSSxDQUFVO1FBQzdCLElBQUksTUFBTSxDQUFDLGFBQWEsS0FBSyxRQUFRLEVBQUc7WUFDdEMsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsVUFBQyxVQUFrQyxFQUFFLFFBQVEsRUFBRSxPQUFPO1lBQ3hGLElBQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkYsSUFBSSxjQUFjLEVBQUU7Z0JBQ2xCLElBQU0sU0FBUyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRzdDLG1GQUFtRjtnQkFDbkYsdUZBQXVGO2dCQUN2RixrRkFBa0Y7Z0JBQ2xGLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUM5RSxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQztpQkFDdkM7YUFDRjtZQUNELE9BQU8sVUFBVSxDQUFDO1FBQ3BCLENBQUMsRUFBRSxFQUE0QixDQUFDLENBQUM7UUFFakMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUU7WUFDeEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELHNCQUFJLHFDQUFNO2FBQVY7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQzs7O09BQUE7SUFFRCwwREFBMEQ7SUFDbkQsb0NBQVEsR0FBZjtRQUFBLGlCQWlCQztRQWhCQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLFdBQVcsRUFBRSxLQUFLO1lBQzFELElBQU0sUUFBUSxHQUFHLEtBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkMsSUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO1lBRWhELElBQUksUUFBUSxLQUFLLElBQUksRUFBRTtnQkFDckIsV0FBVyxDQUFDLElBQUksQ0FBSSxHQUFHLGNBQVcsQ0FBQyxDQUFDO2dCQUNwQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVUsR0FBRyxNQUFHLENBQUMsQ0FBQzthQUNwQztZQUNELE9BQU8sV0FBVyxDQUFDO1FBQ3JCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVQLE9BQU8sT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMzQjtnQkFDSSxJQUFJLEVBQUUsUUFBUTtnQkFDZCxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDN0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ1gsQ0FBQztJQUNILHdCQUFDO0FBQUQsQ0FBQyxBQTdERCxDQUF1QyxZQUFZLEdBNkRsRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNTY2FsZUNoYW5uZWx9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtGaWVsZERlZiwgdmdGaWVsZCBhcyBmaWVsZFJlZn0gZnJvbSAnLi4vLi4vZmllbGRkZWYnO1xuaW1wb3J0IHtpc1BhdGhNYXJrfSBmcm9tICcuLi8uLi9tYXJrJztcbmltcG9ydCB7aGFzQ29udGludW91c0RvbWFpbiwgU2NhbGVUeXBlfSBmcm9tICcuLi8uLi9zY2FsZSc7XG5pbXBvcnQge0RpY3QsIGtleXN9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0ZpbHRlclRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0IHtEYXRhRmxvd05vZGV9IGZyb20gJy4vZGF0YWZsb3cnO1xuXG5leHBvcnQgY2xhc3MgRmlsdGVySW52YWxpZE5vZGUgZXh0ZW5kcyBEYXRhRmxvd05vZGUge1xuICBwdWJsaWMgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBGaWx0ZXJJbnZhbGlkTm9kZShudWxsLCB7Li4udGhpcy5maWVsZERlZnN9KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogRGF0YUZsb3dOb2RlLCBwcml2YXRlIGZpZWxkRGVmczogRGljdDxGaWVsZERlZjxzdHJpbmc+Pikge1xuICAgc3VwZXIocGFyZW50KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbWFrZShwYXJlbnQ6IERhdGFGbG93Tm9kZSwgbW9kZWw6IFVuaXRNb2RlbCk6IEZpbHRlckludmFsaWROb2RlIHtcbiAgICBjb25zdCB7Y29uZmlnLCBtYXJrfSA9IG1vZGVsO1xuICAgIGlmIChjb25maWcuaW52YWxpZFZhbHVlcyAhPT0gJ2ZpbHRlcicgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXIgPSBtb2RlbC5yZWR1Y2VGaWVsZERlZigoYWdncmVnYXRvcjogRGljdDxGaWVsZERlZjxzdHJpbmc+PiwgZmllbGREZWYsIGNoYW5uZWwpID0+IHtcbiAgICAgIGNvbnN0IHNjYWxlQ29tcG9uZW50ID0gaXNTY2FsZUNoYW5uZWwoY2hhbm5lbCkgJiYgbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoY2hhbm5lbCk7XG4gICAgICBpZiAoc2NhbGVDb21wb25lbnQpIHtcbiAgICAgICAgY29uc3Qgc2NhbGVUeXBlID0gc2NhbGVDb21wb25lbnQuZ2V0KCd0eXBlJyk7XG5cblxuICAgICAgICAvLyBXaGlsZSBkaXNjcmV0ZSBkb21haW4gc2NhbGVzIGNhbiBoYW5kbGUgaW52YWxpZCB2YWx1ZXMsIGNvbnRpbnVvdXMgc2NhbGVzIGNhbid0LlxuICAgICAgICAvLyBUaHVzLCBmb3Igbm9uLXBhdGggbWFya3MsIHdlIGhhdmUgdG8gZmlsdGVyIG51bGwgZm9yIHNjYWxlcyB3aXRoIGNvbnRpbnVvdXMgZG9tYWlucy5cbiAgICAgICAgLy8gKEZvciBwYXRoIG1hcmtzLCB3ZSB3aWxsIHVzZSBcImRlZmluZWRcIiBwcm9wZXJ0eSBhbmQgc2tpcCB0aGVzZSB2YWx1ZXMgaW5zdGVhZC4pXG4gICAgICAgIGlmIChoYXNDb250aW51b3VzRG9tYWluKHNjYWxlVHlwZSkgJiYgIWZpZWxkRGVmLmFnZ3JlZ2F0ZSAmJiAhaXNQYXRoTWFyayhtYXJrKSkge1xuICAgICAgICAgIGFnZ3JlZ2F0b3JbZmllbGREZWYuZmllbGRdID0gZmllbGREZWY7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhZ2dyZWdhdG9yO1xuICAgIH0sIHt9IGFzIERpY3Q8RmllbGREZWY8c3RyaW5nPj4pO1xuXG4gICAgaWYgKCFrZXlzKGZpbHRlcikubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEZpbHRlckludmFsaWROb2RlKHBhcmVudCwgZmlsdGVyKTtcbiAgfVxuXG4gIGdldCBmaWx0ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmllbGREZWZzO1xuICB9XG5cbiAgLy8gY3JlYXRlIHRoZSBWZ1RyYW5zZm9ybXMgZm9yIGVhY2ggb2YgdGhlIGZpbHRlcmVkIGZpZWxkc1xuICBwdWJsaWMgYXNzZW1ibGUoKTogVmdGaWx0ZXJUcmFuc2Zvcm0ge1xuICAgIGNvbnN0IGZpbHRlcnMgPSBrZXlzKHRoaXMuZmlsdGVyKS5yZWR1Y2UoKHZlZ2FGaWx0ZXJzLCBmaWVsZCkgPT4ge1xuICAgICAgY29uc3QgZmllbGREZWYgPSB0aGlzLmZpZWxkRGVmc1tmaWVsZF07XG4gICAgICBjb25zdCByZWYgPSBmaWVsZFJlZihmaWVsZERlZiwge2V4cHI6ICdkYXR1bSd9KTtcblxuICAgICAgaWYgKGZpZWxkRGVmICE9PSBudWxsKSB7XG4gICAgICAgIHZlZ2FGaWx0ZXJzLnB1c2goYCR7cmVmfSAhPT0gbnVsbGApO1xuICAgICAgICB2ZWdhRmlsdGVycy5wdXNoKGAhaXNOYU4oJHtyZWZ9KWApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZlZ2FGaWx0ZXJzO1xuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiBmaWx0ZXJzLmxlbmd0aCA+IDAgP1xuICAgIHtcbiAgICAgICAgdHlwZTogJ2ZpbHRlcicsXG4gICAgICAgIGV4cHI6IGZpbHRlcnMuam9pbignICYmICcpXG4gICAgfSA6IG51bGw7XG4gIH1cbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { toSet } from 'vega-util';\nimport { isCountingAggregateOp } from '../../aggregate';\nimport { isNumberFieldDef, isTimeFieldDef } from '../../fielddef';\nimport * as log from '../../log';\nimport { forEachLeaf } from '../../logical';\nimport { isFieldPredicate } from '../../predicate';\nimport { isCalculate, isFilter } from '../../transform';\nimport { accessPathDepth, accessPathWithDatum, duplicate, keys, removePathFromField } from '../../util';\nimport { isFacetModel, isUnitModel } from '../model';\nimport { DataFlowNode } from './dataflow';\n/**\n * @param field The field.\n * @param parse What to parse the field as.\n */\nfunction parseExpression(field, parse) {\n    var f = accessPathWithDatum(field);\n    if (parse === 'number') {\n        return \"toNumber(\" + f + \")\";\n    }\n    else if (parse === 'boolean') {\n        return \"toBoolean(\" + f + \")\";\n    }\n    else if (parse === 'string') {\n        return \"toString(\" + f + \")\";\n    }\n    else if (parse === 'date') {\n        return \"toDate(\" + f + \")\";\n    }\n    else if (parse === 'flatten') {\n        return f;\n    }\n    else if (parse.indexOf('date:') === 0) {\n        var specifier = parse.slice(5, parse.length);\n        return \"timeParse(\" + f + \",\" + specifier + \")\";\n    }\n    else if (parse.indexOf('utc:') === 0) {\n        var specifier = parse.slice(4, parse.length);\n        return \"utcParse(\" + f + \",\" + specifier + \")\";\n    }\n    else {\n        log.warn(log.message.unrecognizedParse(parse));\n        return null;\n    }\n}\nvar ParseNode = /** @class */ (function (_super) {\n    tslib_1.__extends(ParseNode, _super);\n    function ParseNode(parent, parse) {\n        var _this = _super.call(this, parent) || this;\n        _this._parse = {};\n        _this._parse = parse;\n        return _this;\n    }\n    ParseNode.prototype.clone = function () {\n        return new ParseNode(null, duplicate(this.parse));\n    };\n    ParseNode.make = function (parent, model) {\n        var parse = {};\n        var calcFieldMap = {};\n        (model.transforms || []).forEach(function (transform) {\n            if (isCalculate(transform)) {\n                calcFieldMap[transform.as] = true;\n            }\n            else if (isFilter(transform)) {\n                forEachLeaf(transform.filter, function (filter) {\n                    if (isFieldPredicate(filter)) {\n                        if (filter.timeUnit) {\n                            parse[filter.field] = 'date';\n                        }\n                    }\n                });\n            }\n        }, {});\n        if (isUnitModel(model) || isFacetModel(model)) {\n            // Parse encoded fields\n            model.forEachFieldDef(function (fieldDef) {\n                if (isTimeFieldDef(fieldDef)) {\n                    parse[fieldDef.field] = 'date';\n                }\n                else if (isNumberFieldDef(fieldDef)) {\n                    if (calcFieldMap[fieldDef.field] || isCountingAggregateOp(fieldDef.aggregate)) {\n                        return;\n                    }\n                    parse[fieldDef.field] = 'number';\n                }\n                else if (accessPathDepth(fieldDef.field) > 1) {\n                    // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.\n                    // (Parsing numbers / dates already flattens numeric and temporal fields.)\n                    parse[fieldDef.field] = 'flatten';\n                }\n            });\n        }\n        // Custom parse should override inferred parse\n        var data = model.data;\n        if (data && data.format && data.format.parse) {\n            var p_1 = data.format.parse;\n            keys(p_1).forEach(function (field) {\n                parse[field] = p_1[field];\n            });\n        }\n        // We should not parse what has already been parsed in a parent\n        var modelParse = model.component.data.ancestorParse;\n        keys(modelParse).forEach(function (field) {\n            if (parse[field] !== modelParse[field]) {\n                log.warn(log.message.differentParse(field, parse[field], modelParse[field]));\n            }\n            else {\n                delete parse[field];\n            }\n        });\n        if (keys(parse).length === 0) {\n            return null;\n        }\n        return new ParseNode(parent, parse);\n    };\n    Object.defineProperty(ParseNode.prototype, \"parse\", {\n        get: function () {\n            return this._parse;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ParseNode.prototype.merge = function (other) {\n        this._parse = tslib_1.__assign({}, this._parse, other.parse);\n        other.remove();\n    };\n    ParseNode.prototype.assembleFormatParse = function () {\n        var formatParse = {};\n        for (var _i = 0, _a = keys(this._parse); _i < _a.length; _i++) {\n            var field = _a[_i];\n            if (accessPathDepth(field) === 1) {\n                formatParse[field] = this._parse[field];\n            }\n        }\n        return formatParse;\n    };\n    // format parse depends and produces all fields in its parse\n    ParseNode.prototype.producedFields = function () {\n        return toSet(keys(this.parse));\n    };\n    ParseNode.prototype.dependentFields = function () {\n        return toSet(keys(this.parse));\n    };\n    ParseNode.prototype.assembleTransforms = function (onlyNested) {\n        var _this = this;\n        if (onlyNested === void 0) { onlyNested = false; }\n        return keys(this._parse)\n            .filter(function (field) { return onlyNested ? accessPathDepth(field) > 1 : true; })\n            .map(function (field) {\n            var expr = parseExpression(field, _this._parse[field]);\n            if (!expr) {\n                return null;\n            }\n            var formula = {\n                type: 'formula',\n                expr: expr,\n                as: removePathFromField(field) // Vega output is always flattened\n            };\n            return formula;\n        }).filter(function (t) { return t !== null; });\n    };\n    return ParseNode;\n}(DataFlowNode));\nexport { ParseNode };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isInlineData, isNamedData, isUrlData } from '../../data';\nimport { contains, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nvar SourceNode = /** @class */ (function (_super) {\n    tslib_1.__extends(SourceNode, _super);\n    function SourceNode(data) {\n        var _this = _super.call(this, null) || this;\n        data = data || { name: 'source' };\n        if (isInlineData(data)) {\n            _this._data = { values: data.values };\n        }\n        else if (isUrlData(data)) {\n            _this._data = { url: data.url };\n            if (!data.format) {\n                data.format = {};\n            }\n            if (!data.format || !data.format.type) {\n                // Extract extension from URL using snippet from\n                // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript\n                var defaultExtension = /(?:\\.([^.]+))?$/.exec(data.url)[1];\n                if (!contains(['json', 'csv', 'tsv', 'topojson'], defaultExtension)) {\n                    defaultExtension = 'json';\n                }\n                // defaultExtension has type string but we ensure that it is DataFormatType above\n                data.format.type = defaultExtension;\n            }\n        }\n        else if (isNamedData(data)) {\n            _this._name = data.name;\n            _this._data = {};\n        }\n        if (!isNamedData(data) && data.format) {\n            var _a = data.format, _b = _a.parse, parse = _b === void 0 ? null : _b, format = tslib_1.__rest(_a, [\"parse\"]);\n            _this._data.format = format;\n        }\n        return _this;\n    }\n    Object.defineProperty(SourceNode.prototype, \"data\", {\n        get: function () {\n            return this._data;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SourceNode.prototype.hasName = function () {\n        return !!this._name;\n    };\n    Object.defineProperty(SourceNode.prototype, \"dataName\", {\n        get: function () {\n            return this._name;\n        },\n        set: function (name) {\n            this._name = name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SourceNode.prototype, \"parent\", {\n        set: function (parent) {\n            throw new Error('Source nodes have to be roots.');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SourceNode.prototype.remove = function () {\n        throw new Error('Source nodes are roots and cannot be removed.');\n    };\n    /**\n     * Return a unique identifier for this data source.\n     */\n    SourceNode.prototype.hash = function () {\n        if (isInlineData(this._data)) {\n            if (!this._hash) {\n                // Hashing can be expensive for large inline datasets.\n                this._hash = hash(this._data);\n            }\n            return this._hash;\n        }\n        else if (isUrlData(this._data)) {\n            return hash([this._data.url, this._data.format]);\n        }\n        else {\n            return this._name;\n        }\n    };\n    SourceNode.prototype.assemble = function () {\n        return tslib_1.__assign({ name: this._name }, this._data, { transform: [] });\n    };\n    return SourceNode;\n}(DataFlowNode));\nexport { SourceNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS9zb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBdUIsWUFBWSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDdEYsT0FBTyxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFMUMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFlBQVksQ0FBQztBQUV4QztJQUFnQyxzQ0FBWTtJQU8xQyxvQkFBWSxJQUFVO1FBQXRCLFlBQ0Usa0JBQU0sSUFBSSxDQUFDLFNBaUNaO1FBL0JDLElBQUksR0FBRyxJQUFJLElBQUksRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLENBQUM7UUFFaEMsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEIsS0FBSSxDQUFDLEtBQUssR0FBRyxFQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUM7U0FDcEM7YUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMxQixLQUFJLENBQUMsS0FBSyxHQUFHLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUMsQ0FBQztZQUU3QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7YUFDbEI7WUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO2dCQUNyQyxnREFBZ0Q7Z0JBQ2hELHdHQUF3RztnQkFDeEcsSUFBSSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzRCxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsRUFBRTtvQkFDbkUsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDO2lCQUMzQjtnQkFFRCxpRkFBaUY7Z0JBQ2pGLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLGdCQUFrQyxDQUFDO2FBQ3ZEO1NBQ0Y7YUFBTSxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM1QixLQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDdkIsS0FBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7U0FDakI7UUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDckMsSUFBTSxnQkFBdUMsRUFBdEMsYUFBWSxFQUFaLGlDQUFZLEVBQUUsc0NBQXdCLENBQUM7WUFDOUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1NBQzVCOztJQUNILENBQUM7SUFFRCxzQkFBSSw0QkFBSTthQUFSO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUM7OztPQUFBO0lBRU0sNEJBQU8sR0FBZDtRQUNFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELHNCQUFJLGdDQUFRO2FBQVo7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQzthQUVELFVBQWEsSUFBWTtZQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNwQixDQUFDOzs7T0FKQTtJQU1ELHNCQUFJLDhCQUFNO2FBQVYsVUFBVyxNQUFvQjtZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEQsQ0FBQzs7O09BQUE7SUFFTSwyQkFBTSxHQUFiO1FBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7T0FFRztJQUNJLHlCQUFJLEdBQVg7UUFDRSxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ2Ysc0RBQXNEO2dCQUN0RCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDL0I7WUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDbkI7YUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDaEMsT0FBTyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDbEQ7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNuQjtJQUNILENBQUM7SUFFTSw2QkFBUSxHQUFmO1FBQ0UsMEJBQ0UsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLElBQ2IsSUFBSSxDQUFDLEtBQUssSUFDYixTQUFTLEVBQUUsRUFBRSxJQUNiO0lBQ0osQ0FBQztJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQTNGRCxDQUFnQyxZQUFZLEdBMkYzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGF0YSwgRGF0YUZvcm1hdFR5cGUsIGlzSW5saW5lRGF0YSwgaXNOYW1lZERhdGEsIGlzVXJsRGF0YX0gZnJvbSAnLi4vLi4vZGF0YSc7XG5pbXBvcnQge2NvbnRhaW5zLCBoYXNofSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VmdEYXRhfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge0RhdGFGbG93Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5cbmV4cG9ydCBjbGFzcyBTb3VyY2VOb2RlIGV4dGVuZHMgRGF0YUZsb3dOb2RlIHtcbiAgcHJpdmF0ZSBfZGF0YTogUGFydGlhbDxWZ0RhdGE+O1xuXG4gIHByaXZhdGUgX25hbWU6IHN0cmluZztcblxuICBwcml2YXRlIF9oYXNoOiBzdHJpbmcgfCBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoZGF0YTogRGF0YSkge1xuICAgIHN1cGVyKG51bGwpOyAgLy8gc291cmNlIGNhbm5vdCBoYXZlIHBhcmVudFxuXG4gICAgZGF0YSA9IGRhdGEgfHwge25hbWU6ICdzb3VyY2UnfTtcblxuICAgIGlmIChpc0lubGluZURhdGEoZGF0YSkpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSB7dmFsdWVzOiBkYXRhLnZhbHVlc307XG4gICAgfSBlbHNlIGlmIChpc1VybERhdGEoZGF0YSkpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSB7dXJsOiBkYXRhLnVybH07XG5cbiAgICAgIGlmICghZGF0YS5mb3JtYXQpIHtcbiAgICAgICAgZGF0YS5mb3JtYXQgPSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkYXRhLmZvcm1hdCB8fCAhZGF0YS5mb3JtYXQudHlwZSkge1xuICAgICAgICAvLyBFeHRyYWN0IGV4dGVuc2lvbiBmcm9tIFVSTCB1c2luZyBzbmlwcGV0IGZyb21cbiAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82ODA5MjkvaG93LXRvLWV4dHJhY3QtZXh0ZW5zaW9uLWZyb20tZmlsZW5hbWUtc3RyaW5nLWluLWphdmFzY3JpcHRcbiAgICAgICAgbGV0IGRlZmF1bHRFeHRlbnNpb24gPSAvKD86XFwuKFteLl0rKSk/JC8uZXhlYyhkYXRhLnVybClbMV07XG4gICAgICAgIGlmICghY29udGFpbnMoWydqc29uJywgJ2NzdicsICd0c3YnLCAndG9wb2pzb24nXSwgZGVmYXVsdEV4dGVuc2lvbikpIHtcbiAgICAgICAgICBkZWZhdWx0RXh0ZW5zaW9uID0gJ2pzb24nO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVmYXVsdEV4dGVuc2lvbiBoYXMgdHlwZSBzdHJpbmcgYnV0IHdlIGVuc3VyZSB0aGF0IGl0IGlzIERhdGFGb3JtYXRUeXBlIGFib3ZlXG4gICAgICAgIGRhdGEuZm9ybWF0LnR5cGUgPSBkZWZhdWx0RXh0ZW5zaW9uIGFzIERhdGFGb3JtYXRUeXBlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNOYW1lZERhdGEoZGF0YSkpIHtcbiAgICAgIHRoaXMuX25hbWUgPSBkYXRhLm5hbWU7XG4gICAgICB0aGlzLl9kYXRhID0ge307XG4gICAgfVxuXG4gICAgaWYgKCFpc05hbWVkRGF0YShkYXRhKSAmJiBkYXRhLmZvcm1hdCkge1xuICAgICAgY29uc3Qge3BhcnNlID0gbnVsbCwgLi4uZm9ybWF0fSA9IGRhdGEuZm9ybWF0O1xuICAgICAgdGhpcy5fZGF0YS5mb3JtYXQgPSBmb3JtYXQ7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gIH1cblxuICBwdWJsaWMgaGFzTmFtZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLl9uYW1lO1xuICB9XG5cbiAgZ2V0IGRhdGFOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICB9XG5cbiAgc2V0IGRhdGFOYW1lKG5hbWU6IHN0cmluZykge1xuICAgIHRoaXMuX25hbWUgPSBuYW1lO1xuICB9XG5cbiAgc2V0IHBhcmVudChwYXJlbnQ6IERhdGFGbG93Tm9kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignU291cmNlIG5vZGVzIGhhdmUgdG8gYmUgcm9vdHMuJyk7XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignU291cmNlIG5vZGVzIGFyZSByb290cyBhbmQgY2Fubm90IGJlIHJlbW92ZWQuJyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgZGF0YSBzb3VyY2UuXG4gICAqL1xuICBwdWJsaWMgaGFzaCgpIHtcbiAgICBpZiAoaXNJbmxpbmVEYXRhKHRoaXMuX2RhdGEpKSB7XG4gICAgICBpZiAoIXRoaXMuX2hhc2gpIHtcbiAgICAgICAgLy8gSGFzaGluZyBjYW4gYmUgZXhwZW5zaXZlIGZvciBsYXJnZSBpbmxpbmUgZGF0YXNldHMuXG4gICAgICAgIHRoaXMuX2hhc2ggPSBoYXNoKHRoaXMuX2RhdGEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX2hhc2g7XG4gICAgfSBlbHNlIGlmIChpc1VybERhdGEodGhpcy5fZGF0YSkpIHtcbiAgICAgIHJldHVybiBoYXNoKFt0aGlzLl9kYXRhLnVybCwgdGhpcy5fZGF0YS5mb3JtYXRdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlKCk6IFZnRGF0YSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHRoaXMuX25hbWUsXG4gICAgICAuLi50aGlzLl9kYXRhLFxuICAgICAgdHJhbnNmb3JtOiBbXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { vgField } from '../../fielddef';\nimport { fieldExpr } from '../../timeunit';\nimport { duplicate, keys, vals } from '../../util';\nimport { DataFlowNode } from './dataflow';\nvar TimeUnitNode = /** @class */ (function (_super) {\n    tslib_1.__extends(TimeUnitNode, _super);\n    function TimeUnitNode(parent, formula) {\n        var _this = _super.call(this, parent) || this;\n        _this.formula = formula;\n        return _this;\n    }\n    TimeUnitNode.prototype.clone = function () {\n        return new TimeUnitNode(null, duplicate(this.formula));\n    };\n    TimeUnitNode.makeFromEncoding = function (parent, model) {\n        var formula = model.reduceFieldDef(function (timeUnitComponent, fieldDef) {\n            if (fieldDef.timeUnit) {\n                var f = vgField(fieldDef);\n                timeUnitComponent[f] = {\n                    as: f,\n                    timeUnit: fieldDef.timeUnit,\n                    field: fieldDef.field\n                };\n            }\n            return timeUnitComponent;\n        }, {});\n        if (keys(formula).length === 0) {\n            return null;\n        }\n        return new TimeUnitNode(parent, formula);\n    };\n    TimeUnitNode.makeFromTransform = function (parent, t) {\n        return new TimeUnitNode(parent, (_a = {},\n            _a[t.field] = {\n                as: t.as,\n                timeUnit: t.timeUnit,\n                field: t.field\n            },\n            _a));\n        var _a;\n    };\n    TimeUnitNode.prototype.merge = function (other) {\n        this.formula = tslib_1.__assign({}, this.formula, other.formula);\n        other.remove();\n    };\n    TimeUnitNode.prototype.producedFields = function () {\n        var out = {};\n        vals(this.formula).forEach(function (f) {\n            out[f.as] = true;\n        });\n        return out;\n    };\n    TimeUnitNode.prototype.dependentFields = function () {\n        var out = {};\n        vals(this.formula).forEach(function (f) {\n            out[f.field] = true;\n        });\n        return out;\n    };\n    TimeUnitNode.prototype.assemble = function () {\n        return vals(this.formula).map(function (c) {\n            return {\n                type: 'formula',\n                as: c.as,\n                expr: fieldExpr(c.timeUnit, c.field)\n            };\n        });\n    };\n    return TimeUnitNode;\n}(DataFlowNode));\nexport { TimeUnitNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXVuaXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL3RpbWV1bml0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxFQUFDLFNBQVMsRUFBVyxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELE9BQU8sRUFBTyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxNQUFNLFlBQVksQ0FBQztBQUd2RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBU3hDO0lBQWtDLHdDQUFZO0lBSzVDLHNCQUFZLE1BQW9CLEVBQVUsT0FBZ0M7UUFBMUUsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FDZDtRQUZ5QyxhQUFPLEdBQVAsT0FBTyxDQUF5Qjs7SUFFMUUsQ0FBQztJQU5NLDRCQUFLLEdBQVo7UUFDRSxPQUFPLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQU1hLDZCQUFnQixHQUE5QixVQUErQixNQUFvQixFQUFFLEtBQXFCO1FBQ3hFLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsVUFBQyxpQkFBb0MsRUFBRSxRQUFRO1lBQ2xGLElBQUksUUFBUSxDQUFDLFFBQVEsRUFBRTtnQkFDckIsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUM1QixpQkFBaUIsQ0FBQyxDQUFDLENBQUMsR0FBRztvQkFDckIsRUFBRSxFQUFFLENBQUM7b0JBQ0wsUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRO29CQUMzQixLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUs7aUJBQ3RCLENBQUM7YUFDSDtZQUNELE9BQU8saUJBQWlCLENBQUM7UUFDM0IsQ0FBQyxFQUFFLEVBQTZCLENBQUMsQ0FBQztRQUVsQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzlCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxPQUFPLElBQUksWUFBWSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRWEsOEJBQWlCLEdBQS9CLFVBQWdDLE1BQW9CLEVBQUUsQ0FBb0I7UUFDeEUsT0FBTyxJQUFJLFlBQVksQ0FBQyxNQUFNO1lBQzVCLEdBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRztnQkFDVCxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUU7Z0JBQ1IsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRO2dCQUNwQixLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUs7YUFDZjtnQkFDRCxDQUFDOztJQUNMLENBQUM7SUFFTSw0QkFBSyxHQUFaLFVBQWEsS0FBbUI7UUFDOUIsSUFBSSxDQUFDLE9BQU8sd0JBQU8sSUFBSSxDQUFDLE9BQU8sRUFBSyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkQsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFTSxxQ0FBYyxHQUFyQjtRQUNFLElBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUVmLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztZQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVNLHNDQUFlLEdBQXRCO1FBQ0UsSUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBRWYsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1lBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRU0sK0JBQVEsR0FBZjtRQUNFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDO1lBQzdCLE9BQU87Z0JBQ0wsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFO2dCQUNSLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDO2FBQ2YsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUF6RUQsQ0FBa0MsWUFBWSxHQXlFN0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3ZnRmllbGR9IGZyb20gJy4uLy4uL2ZpZWxkZGVmJztcbmltcG9ydCB7ZmllbGRFeHByLCBUaW1lVW5pdH0gZnJvbSAnLi4vLi4vdGltZXVuaXQnO1xuaW1wb3J0IHtUaW1lVW5pdFRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdHJhbnNmb3JtJztcbmltcG9ydCB7RGljdCwgZHVwbGljYXRlLCBrZXlzLCB2YWxzfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VmdGb3JtdWxhVHJhbnNmb3JtfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge01vZGVsV2l0aEZpZWxkfSBmcm9tICcuLi9tb2RlbCc7XG5pbXBvcnQge0RhdGFGbG93Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5cblxuZXhwb3J0IGludGVyZmFjZSBUaW1lVW5pdENvbXBvbmVudCB7XG4gIGFzOiBzdHJpbmc7XG4gIHRpbWVVbml0OiBUaW1lVW5pdDtcbiAgZmllbGQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFRpbWVVbml0Tm9kZSBleHRlbmRzIERhdGFGbG93Tm9kZSB7XG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVVbml0Tm9kZShudWxsLCBkdXBsaWNhdGUodGhpcy5mb3JtdWxhKSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IERhdGFGbG93Tm9kZSwgcHJpdmF0ZSBmb3JtdWxhOiBEaWN0PFRpbWVVbml0Q29tcG9uZW50Pikge1xuICAgIHN1cGVyKHBhcmVudCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIG1ha2VGcm9tRW5jb2RpbmcocGFyZW50OiBEYXRhRmxvd05vZGUsIG1vZGVsOiBNb2RlbFdpdGhGaWVsZCkge1xuICAgIGNvbnN0IGZvcm11bGEgPSBtb2RlbC5yZWR1Y2VGaWVsZERlZigodGltZVVuaXRDb21wb25lbnQ6IFRpbWVVbml0Q29tcG9uZW50LCBmaWVsZERlZikgPT4ge1xuICAgICAgaWYgKGZpZWxkRGVmLnRpbWVVbml0KSB7XG4gICAgICAgIGNvbnN0IGYgPSB2Z0ZpZWxkKGZpZWxkRGVmKTtcbiAgICAgICAgdGltZVVuaXRDb21wb25lbnRbZl0gPSB7XG4gICAgICAgICAgYXM6IGYsXG4gICAgICAgICAgdGltZVVuaXQ6IGZpZWxkRGVmLnRpbWVVbml0LFxuICAgICAgICAgIGZpZWxkOiBmaWVsZERlZi5maWVsZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRpbWVVbml0Q29tcG9uZW50O1xuICAgIH0sIHt9IGFzIERpY3Q8VGltZVVuaXRDb21wb25lbnQ+KTtcblxuICAgIGlmIChrZXlzKGZvcm11bGEpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUaW1lVW5pdE5vZGUocGFyZW50LCBmb3JtdWxhKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbWFrZUZyb21UcmFuc2Zvcm0ocGFyZW50OiBEYXRhRmxvd05vZGUsIHQ6IFRpbWVVbml0VHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIG5ldyBUaW1lVW5pdE5vZGUocGFyZW50LCB7XG4gICAgICBbdC5maWVsZF06IHtcbiAgICAgICAgYXM6IHQuYXMsXG4gICAgICAgIHRpbWVVbml0OiB0LnRpbWVVbml0LFxuICAgICAgICBmaWVsZDogdC5maWVsZFxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIG1lcmdlKG90aGVyOiBUaW1lVW5pdE5vZGUpIHtcbiAgICB0aGlzLmZvcm11bGEgPSB7Li4udGhpcy5mb3JtdWxhLCAuLi5vdGhlci5mb3JtdWxhfTtcbiAgICBvdGhlci5yZW1vdmUoKTtcbiAgfVxuXG4gIHB1YmxpYyBwcm9kdWNlZEZpZWxkcygpIHtcbiAgICBjb25zdCBvdXQgPSB7fTtcblxuICAgIHZhbHModGhpcy5mb3JtdWxhKS5mb3JFYWNoKGYgPT4ge1xuICAgICAgb3V0W2YuYXNdID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICBwdWJsaWMgZGVwZW5kZW50RmllbGRzKCkge1xuICAgIGNvbnN0IG91dCA9IHt9O1xuXG4gICAgdmFscyh0aGlzLmZvcm11bGEpLmZvckVhY2goZiA9PiB7XG4gICAgICBvdXRbZi5maWVsZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZSgpIHtcbiAgICByZXR1cm4gdmFscyh0aGlzLmZvcm11bGEpLm1hcChjID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdmb3JtdWxhJyxcbiAgICAgICAgYXM6IGMuYXMsXG4gICAgICAgIGV4cHI6IGZpZWxkRXhwcihjLnRpbWVVbml0LCBjLmZpZWxkKVxuICAgICAgfSBhcyBWZ0Zvcm11bGFUcmFuc2Zvcm07XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { hasIntersection, keys } from '../../util';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { ParseNode } from './formatparse';\nimport { SourceNode } from './source';\nimport { TimeUnitNode } from './timeunit';\n/**\n * Start optimization path at the leaves. Useful for merging up or removing things.\n *\n * If the callback returns true, the recursion continues.\n */\nexport function iterateFromLeaves(f) {\n    function optimizeNextFromLeaves(node) {\n        if (node instanceof SourceNode) {\n            return;\n        }\n        var next = node.parent;\n        if (f(node)) {\n            optimizeNextFromLeaves(next);\n        }\n    }\n    return optimizeNextFromLeaves;\n}\n/**\n * Move parse nodes up to forks.\n */\nexport function moveParseUp(node) {\n    var parent = node.parent;\n    // move parse up by merging or swapping\n    if (node instanceof ParseNode) {\n        if (parent instanceof SourceNode) {\n            return false;\n        }\n        if (parent.numChildren() > 1) {\n            // don't move parse further up but continue with parent.\n            return true;\n        }\n        if (parent instanceof ParseNode) {\n            parent.merge(node);\n        }\n        else {\n            // don't swap with nodes that produce something that the parse node depends on (e.g. lookup)\n            if (hasIntersection(parent.producedFields(), node.dependentFields())) {\n                return true;\n            }\n            node.swapWithParent();\n        }\n    }\n    return true;\n}\n/**\n * Repeatedly remove leaf nodes that are not output or facet nodes.\n * The reason is that we don't need subtrees that don't have any output nodes.\n * Facet nodes are needed for the row or column domains.\n */\nexport function removeUnusedSubtrees(node) {\n    if (node instanceof OutputNode || node.numChildren() > 0 || node instanceof FacetNode) {\n        // no need to continue with parent because it is output node or will have children (there was a fork)\n        return false;\n    }\n    else {\n        node.remove();\n    }\n    return true;\n}\n/**\n * Removes duplicate time unit nodes (as determined by the name of the\n * output field) that may be generated due to selections projected over\n * time units.\n */\nexport function removeDuplicateTimeUnits(leaf) {\n    var fields = {};\n    return iterateFromLeaves(function (node) {\n        if (node instanceof TimeUnitNode) {\n            var pfields = node.producedFields();\n            var dupe = keys(pfields).every(function (k) { return !!fields[k]; });\n            if (dupe) {\n                node.remove();\n            }\n            else {\n                fields = tslib_1.__assign({}, fields, pfields);\n            }\n        }\n        return true;\n    })(leaf);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW1pemVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL2RhdGEvb3B0aW1pemVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDakQsT0FBTyxFQUFlLFVBQVUsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUNwRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQ2xDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUNwQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBR3hDOzs7O0dBSUc7QUFDSCxNQUFNLDRCQUE0QixDQUFrQztJQUNsRSxnQ0FBZ0MsSUFBa0I7UUFDaEQsSUFBSSxJQUFJLFlBQVksVUFBVSxFQUFFO1lBQzlCLE9BQU87U0FDUjtRQUVELElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDekIsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDWCxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7SUFFRCxPQUFPLHNCQUFzQixDQUFDO0FBQ2hDLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sc0JBQXNCLElBQWtCO0lBQzVDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFFM0IsdUNBQXVDO0lBQ3ZDLElBQUksSUFBSSxZQUFZLFNBQVMsRUFBRTtRQUM3QixJQUFJLE1BQU0sWUFBWSxVQUFVLEVBQUU7WUFDaEMsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsRUFBRTtZQUM1Qix3REFBd0Q7WUFDeEQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksTUFBTSxZQUFZLFNBQVMsRUFBRTtZQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3BCO2FBQU07WUFDTCw0RkFBNEY7WUFDNUYsSUFBSSxlQUFlLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxFQUFFO2dCQUNwRSxPQUFPLElBQUksQ0FBQzthQUNiO1lBRUQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCO0tBQ0Y7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSwrQkFBK0IsSUFBa0I7SUFDckQsSUFBSSxJQUFJLFlBQVksVUFBVSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLElBQUksSUFBSSxZQUFZLFNBQVMsRUFBRTtRQUNyRixxR0FBcUc7UUFDckcsT0FBTyxLQUFLLENBQUM7S0FDZDtTQUFNO1FBQ0wsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ2Y7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxtQ0FBbUMsSUFBa0I7SUFDekQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLE9BQU8saUJBQWlCLENBQUMsVUFBQyxJQUFrQjtRQUMxQyxJQUFJLElBQUksWUFBWSxZQUFZLEVBQUU7WUFDaEMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3RDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFYLENBQVcsQ0FBQyxDQUFDO1lBRXJELElBQUksSUFBSSxFQUFFO2dCQUNSLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUNmO2lCQUFNO2dCQUNMLE1BQU0sd0JBQU8sTUFBTSxFQUFLLE9BQU8sQ0FBQyxDQUFDO2FBQ2xDO1NBQ0Y7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ1gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aGFzSW50ZXJzZWN0aW9uLCBrZXlzfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7RGF0YUZsb3dOb2RlLCBPdXRwdXROb2RlfSBmcm9tICcuL2RhdGFmbG93JztcbmltcG9ydCB7RmFjZXROb2RlfSBmcm9tICcuL2ZhY2V0JztcbmltcG9ydCB7UGFyc2VOb2RlfSBmcm9tICcuL2Zvcm1hdHBhcnNlJztcbmltcG9ydCB7U291cmNlTm9kZX0gZnJvbSAnLi9zb3VyY2UnO1xuaW1wb3J0IHtUaW1lVW5pdE5vZGV9IGZyb20gJy4vdGltZXVuaXQnO1xuXG5cbi8qKlxuICogU3RhcnQgb3B0aW1pemF0aW9uIHBhdGggYXQgdGhlIGxlYXZlcy4gVXNlZnVsIGZvciBtZXJnaW5nIHVwIG9yIHJlbW92aW5nIHRoaW5ncy5cbiAqXG4gKiBJZiB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVlLCB0aGUgcmVjdXJzaW9uIGNvbnRpbnVlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGl0ZXJhdGVGcm9tTGVhdmVzKGY6IChub2RlOiBEYXRhRmxvd05vZGUpID0+IGJvb2xlYW4pIHtcbiAgZnVuY3Rpb24gb3B0aW1pemVOZXh0RnJvbUxlYXZlcyhub2RlOiBEYXRhRmxvd05vZGUpIHtcbiAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFNvdXJjZU5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBuZXh0ID0gbm9kZS5wYXJlbnQ7XG4gICAgaWYgKGYobm9kZSkpIHtcbiAgICAgIG9wdGltaXplTmV4dEZyb21MZWF2ZXMobmV4dCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9wdGltaXplTmV4dEZyb21MZWF2ZXM7XG59XG5cbi8qKlxuICogTW92ZSBwYXJzZSBub2RlcyB1cCB0byBmb3Jrcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1vdmVQYXJzZVVwKG5vZGU6IERhdGFGbG93Tm9kZSkge1xuICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudDtcblxuICAvLyBtb3ZlIHBhcnNlIHVwIGJ5IG1lcmdpbmcgb3Igc3dhcHBpbmdcbiAgaWYgKG5vZGUgaW5zdGFuY2VvZiBQYXJzZU5vZGUpIHtcbiAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgU291cmNlTm9kZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChwYXJlbnQubnVtQ2hpbGRyZW4oKSA+IDEpIHtcbiAgICAgIC8vIGRvbid0IG1vdmUgcGFyc2UgZnVydGhlciB1cCBidXQgY29udGludWUgd2l0aCBwYXJlbnQuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgUGFyc2VOb2RlKSB7XG4gICAgICBwYXJlbnQubWVyZ2Uobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGRvbid0IHN3YXAgd2l0aCBub2RlcyB0aGF0IHByb2R1Y2Ugc29tZXRoaW5nIHRoYXQgdGhlIHBhcnNlIG5vZGUgZGVwZW5kcyBvbiAoZS5nLiBsb29rdXApXG4gICAgICBpZiAoaGFzSW50ZXJzZWN0aW9uKHBhcmVudC5wcm9kdWNlZEZpZWxkcygpLCBub2RlLmRlcGVuZGVudEZpZWxkcygpKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgbm9kZS5zd2FwV2l0aFBhcmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFJlcGVhdGVkbHkgcmVtb3ZlIGxlYWYgbm9kZXMgdGhhdCBhcmUgbm90IG91dHB1dCBvciBmYWNldCBub2Rlcy5cbiAqIFRoZSByZWFzb24gaXMgdGhhdCB3ZSBkb24ndCBuZWVkIHN1YnRyZWVzIHRoYXQgZG9uJ3QgaGF2ZSBhbnkgb3V0cHV0IG5vZGVzLlxuICogRmFjZXQgbm9kZXMgYXJlIG5lZWRlZCBmb3IgdGhlIHJvdyBvciBjb2x1bW4gZG9tYWlucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVVudXNlZFN1YnRyZWVzKG5vZGU6IERhdGFGbG93Tm9kZSkge1xuICBpZiAobm9kZSBpbnN0YW5jZW9mIE91dHB1dE5vZGUgfHwgbm9kZS5udW1DaGlsZHJlbigpID4gMCB8fCBub2RlIGluc3RhbmNlb2YgRmFjZXROb2RlKSB7XG4gICAgLy8gbm8gbmVlZCB0byBjb250aW51ZSB3aXRoIHBhcmVudCBiZWNhdXNlIGl0IGlzIG91dHB1dCBub2RlIG9yIHdpbGwgaGF2ZSBjaGlsZHJlbiAodGhlcmUgd2FzIGEgZm9yaylcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5yZW1vdmUoKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGR1cGxpY2F0ZSB0aW1lIHVuaXQgbm9kZXMgKGFzIGRldGVybWluZWQgYnkgdGhlIG5hbWUgb2YgdGhlXG4gKiBvdXRwdXQgZmllbGQpIHRoYXQgbWF5IGJlIGdlbmVyYXRlZCBkdWUgdG8gc2VsZWN0aW9ucyBwcm9qZWN0ZWQgb3ZlclxuICogdGltZSB1bml0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUR1cGxpY2F0ZVRpbWVVbml0cyhsZWFmOiBEYXRhRmxvd05vZGUpIHtcbiAgbGV0IGZpZWxkcyA9IHt9O1xuICByZXR1cm4gaXRlcmF0ZUZyb21MZWF2ZXMoKG5vZGU6IERhdGFGbG93Tm9kZSkgPT4ge1xuICAgIGlmIChub2RlIGluc3RhbmNlb2YgVGltZVVuaXROb2RlKSB7XG4gICAgICBjb25zdCBwZmllbGRzID0gbm9kZS5wcm9kdWNlZEZpZWxkcygpO1xuICAgICAgY29uc3QgZHVwZSA9IGtleXMocGZpZWxkcykuZXZlcnkoKGspID0+ICEhZmllbGRzW2tdKTtcblxuICAgICAgaWYgKGR1cGUpIHtcbiAgICAgICAgbm9kZS5yZW1vdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpZWxkcyA9IHsuLi5maWVsZHMsIC4uLnBmaWVsZHN9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9KShsZWFmKTtcbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { isFieldDef, vgField } from '../../fielddef';\nimport { duplicate } from '../../util';\nimport { sortParams } from '../common';\nimport { DataFlowNode } from './dataflow';\nfunction getStackByFields(model) {\n    return model.stack.stackBy.reduce(function (fields, by) {\n        var fieldDef = by.fieldDef;\n        var _field = vgField(fieldDef);\n        if (_field) {\n            fields.push(_field);\n        }\n        return fields;\n    }, []);\n}\nvar StackNode = /** @class */ (function (_super) {\n    tslib_1.__extends(StackNode, _super);\n    function StackNode(parent, stack) {\n        var _this = _super.call(this, parent) || this;\n        _this._stack = stack;\n        return _this;\n    }\n    StackNode.prototype.clone = function () {\n        return new StackNode(null, duplicate(this._stack));\n    };\n    StackNode.make = function (parent, model) {\n        var stackProperties = model.stack;\n        if (!stackProperties) {\n            return null;\n        }\n        var dimensionFieldDef;\n        if (stackProperties.groupbyChannel) {\n            dimensionFieldDef = model.fieldDef(stackProperties.groupbyChannel);\n        }\n        var stackby = getStackByFields(model);\n        var orderDef = model.encoding.order;\n        var sort;\n        if (isArray(orderDef) || isFieldDef(orderDef)) {\n            sort = sortParams(orderDef);\n        }\n        else {\n            // default = descending by stackFields\n            // FIXME is the default here correct for binned fields?\n            sort = stackby.reduce(function (s, field) {\n                s.field.push(field);\n                s.order.push('descending');\n                return s;\n            }, { field: [], order: [] });\n        }\n        return new StackNode(parent, {\n            dimensionFieldDef: dimensionFieldDef,\n            field: model.vgField(stackProperties.fieldChannel),\n            facetby: [],\n            stackby: stackby,\n            sort: sort,\n            offset: stackProperties.offset,\n            impute: stackProperties.impute,\n        });\n    };\n    Object.defineProperty(StackNode.prototype, \"stack\", {\n        get: function () {\n            return this._stack;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StackNode.prototype.addDimensions = function (fields) {\n        this._stack.facetby = this._stack.facetby.concat(fields);\n    };\n    StackNode.prototype.dependentFields = function () {\n        var out = {};\n        out[this._stack.field] = true;\n        this.getGroupbyFields().forEach(function (f) { return out[f] = true; });\n        this._stack.facetby.forEach(function (f) { return out[f] = true; });\n        var field = this._stack.sort.field;\n        isArray(field) ? field.forEach(function (f) { return out[f] = true; }) : out[field] = true;\n        return out;\n    };\n    StackNode.prototype.producedFields = function () {\n        var out = {};\n        out[this._stack.field + '_start'] = true;\n        out[this._stack.field + '_end'] = true;\n        return out;\n    };\n    StackNode.prototype.getGroupbyFields = function () {\n        var _a = this._stack, dimensionFieldDef = _a.dimensionFieldDef, impute = _a.impute;\n        if (dimensionFieldDef) {\n            if (dimensionFieldDef.bin) {\n                if (impute) {\n                    // For binned group by field with impute, we calculate bin_mid\n                    // as we cannot impute two fields simultaneously\n                    return [vgField(dimensionFieldDef, { binSuffix: 'mid' })];\n                }\n                return [\n                    // For binned group by field without impute, we need both bin (start) and bin_end\n                    vgField(dimensionFieldDef, {}),\n                    vgField(dimensionFieldDef, { binSuffix: 'end' })\n                ];\n            }\n            return [vgField(dimensionFieldDef)];\n        }\n        return [];\n    };\n    StackNode.prototype.assemble = function () {\n        var transform = [];\n        var _a = this._stack, facetby = _a.facetby, stackField = _a.field, dimensionFieldDef = _a.dimensionFieldDef, impute = _a.impute, offset = _a.offset, sort = _a.sort, stackby = _a.stackby;\n        // Impute\n        if (impute && dimensionFieldDef) {\n            var dimensionField = dimensionFieldDef ? vgField(dimensionFieldDef, { binSuffix: 'mid' }) : undefined;\n            if (dimensionFieldDef.bin) {\n                // As we can only impute one field at a time, we need to calculate\n                // mid point for a binned field\n                transform.push({\n                    type: 'formula',\n                    expr: '(' +\n                        vgField(dimensionFieldDef, { expr: 'datum' }) +\n                        '+' +\n                        vgField(dimensionFieldDef, { expr: 'datum', binSuffix: 'end' }) +\n                        ')/2',\n                    as: dimensionField\n                });\n            }\n            transform.push({\n                type: 'impute',\n                field: stackField,\n                groupby: stackby,\n                key: dimensionField,\n                method: 'value',\n                value: 0\n            });\n        }\n        // Stack\n        transform.push({\n            type: 'stack',\n            groupby: this.getGroupbyFields().concat(facetby),\n            field: stackField,\n            sort: sort,\n            as: [\n                stackField + '_start',\n                stackField + '_end'\n            ],\n            offset: offset\n        });\n        return transform;\n    };\n    return StackNode;\n}(DataFlowNode));\nexport { StackNode };\n//# sourceMappingURL=data:application/json;base64,","import { MAIN } from '../../data';\nimport { every, flatten, keys, vals } from '../../util';\nimport { AggregateNode } from './aggregate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { FilterInvalidNode } from './filterinvalid';\nimport * as optimizers from './optimizers';\nimport { StackNode } from './stack';\nexport var FACET_SCALE_PREFIX = 'scale_';\n/**\n * Clones the subtree and ignores output nodes except for the leafs, which are renamed.\n */\nfunction cloneSubtree(facet) {\n    function clone(node) {\n        if (!(node instanceof FacetNode)) {\n            var copy_1 = node.clone();\n            if (copy_1 instanceof OutputNode) {\n                var newName = FACET_SCALE_PREFIX + copy_1.getSource();\n                copy_1.setSource(newName);\n                facet.model.component.data.outputNodes[newName] = copy_1;\n            }\n            else if (copy_1 instanceof AggregateNode || copy_1 instanceof StackNode) {\n                copy_1.addDimensions(facet.fields);\n            }\n            flatten(node.children.map(clone)).forEach(function (n) { return n.parent = copy_1; });\n            return [copy_1];\n        }\n        return flatten(node.children.map(clone));\n    }\n    return clone;\n}\n/**\n * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n */\nfunction moveFacetDown(node) {\n    if (node instanceof FacetNode) {\n        if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n            // move down until we hit a fork or output node\n            var child = node.children[0];\n            if (child instanceof AggregateNode || child instanceof StackNode) {\n                child.addDimensions(node.fields);\n            }\n            child.swapWithParent();\n            moveFacetDown(node);\n        }\n        else {\n            // move main to facet\n            moveMainDownToFacet(node.model.component.data.main);\n            // replicate the subtree and place it before the facet's main node\n            var copy = flatten(node.children.map(cloneSubtree(node)));\n            copy.forEach(function (c) { return c.parent = node.model.component.data.main; });\n        }\n    }\n    else {\n        node.children.forEach(moveFacetDown);\n    }\n}\nfunction moveMainDownToFacet(node) {\n    if (node instanceof OutputNode && node.type === MAIN) {\n        if (node.numChildren() === 1) {\n            var child = node.children[0];\n            if (!(child instanceof FacetNode)) {\n                child.swapWithParent();\n                moveMainDownToFacet(node);\n            }\n        }\n    }\n}\n/**\n * Remove nodes that are not required starting from a root.\n */\nfunction removeUnnecessaryNodes(node) {\n    // remove empty null filter nodes\n    if (node instanceof FilterInvalidNode && every(vals(node.filter), function (f) { return f === null; })) {\n        node.remove();\n    }\n    // remove output nodes that are not required\n    if (node instanceof OutputNode && !node.isRequired()) {\n        node.remove();\n    }\n    node.children.forEach(removeUnnecessaryNodes);\n}\n/**\n * Return all leaf nodes.\n */\nfunction getLeaves(roots) {\n    var leaves = [];\n    function append(node) {\n        if (node.numChildren() === 0) {\n            leaves.push(node);\n        }\n        else {\n            node.children.forEach(append);\n        }\n    }\n    roots.forEach(append);\n    return leaves;\n}\n/**\n * Optimizes the dataflow of the passed in data component.\n */\nexport function optimizeDataflow(dataComponent) {\n    var roots = vals(dataComponent.sources);\n    roots.forEach(removeUnnecessaryNodes);\n    // remove source nodes that don't have any children because they also don't have output nodes\n    roots = roots.filter(function (r) { return r.numChildren() > 0; });\n    getLeaves(roots).forEach(optimizers.iterateFromLeaves(optimizers.removeUnusedSubtrees));\n    roots = roots.filter(function (r) { return r.numChildren() > 0; });\n    getLeaves(roots).forEach(optimizers.iterateFromLeaves(optimizers.moveParseUp));\n    getLeaves(roots).forEach(optimizers.removeDuplicateTimeUnits);\n    roots.forEach(moveFacetDown);\n    keys(dataComponent.sources).forEach(function (s) {\n        if (dataComponent.sources[s].numChildren() === 0) {\n            delete dataComponent.sources[s];\n        }\n    });\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isString } from 'vega-util';\nimport { SHARED_DOMAIN_OP_INDEX } from '../../aggregate';\nimport { binToString, isBinParams } from '../../bin';\nimport { isScaleChannel } from '../../channel';\nimport { MAIN, RAW } from '../../data';\nimport { dateTimeExpr, isDateTime } from '../../datetime';\nimport * as log from '../../log';\nimport { hasDiscreteDomain, isBinScale, isSelectionDomain } from '../../scale';\nimport { isSortArray, isSortField } from '../../sort';\nimport { hash } from '../../util';\nimport * as util from '../../util';\nimport { isDataRefUnionedDomain, isFieldRefUnionDomain } from '../../vega.schema';\nimport { isDataRefDomain, } from '../../vega.schema';\nimport { binRequiresRange } from '../common';\nimport { sortArrayIndexField } from '../data/calculate';\nimport { FACET_SCALE_PREFIX } from '../data/optimize';\nimport { isFacetModel, isUnitModel } from '../model';\nimport { SELECTION_DOMAIN } from '../selection/selection';\nexport function parseScaleDomain(model) {\n    if (isUnitModel(model)) {\n        parseUnitScaleDomain(model);\n    }\n    else {\n        parseNonUnitScaleDomain(model);\n    }\n}\nfunction parseUnitScaleDomain(model) {\n    var scales = model.specifiedScales;\n    var localScaleComponents = model.component.scales;\n    util.keys(localScaleComponents).forEach(function (channel) {\n        var specifiedScale = scales[channel];\n        var specifiedDomain = specifiedScale ? specifiedScale.domain : undefined;\n        var domains = parseDomainForChannel(model, channel);\n        var localScaleCmpt = localScaleComponents[channel];\n        localScaleCmpt.domains = domains;\n        if (isSelectionDomain(specifiedDomain)) {\n            // As scale parsing occurs before selection parsing, we use a temporary\n            // signal here and append the scale.domain definition. This is replaced\n            // with the correct domainRaw signal during scale assembly.\n            // For more information, see isRawSelectionDomain in selection.ts.\n            // FIXME: replace this with a special property in the scaleComponent\n            localScaleCmpt.set('domainRaw', {\n                signal: SELECTION_DOMAIN + hash(specifiedDomain)\n            }, true);\n        }\n        if (model.component.data.isFaceted) {\n            // get resolve from closest facet parent as this decides whether we need to refer to cloned subtree or not\n            var facetParent = model;\n            while (!isFacetModel(facetParent) && facetParent.parent) {\n                facetParent = facetParent.parent;\n            }\n            var resolve = facetParent.component.resolve.scale[channel];\n            if (resolve === 'shared') {\n                for (var _i = 0, domains_1 = domains; _i < domains_1.length; _i++) {\n                    var domain = domains_1[_i];\n                    // Replace the scale domain with data output from a cloned subtree after the facet.\n                    if (isDataRefDomain(domain)) {\n                        // use data from cloned subtree (which is the same as data but with a prefix added once)\n                        domain.data = FACET_SCALE_PREFIX + domain.data.replace(FACET_SCALE_PREFIX, '');\n                    }\n                }\n            }\n        }\n    });\n}\nfunction parseNonUnitScaleDomain(model) {\n    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        parseScaleDomain(child);\n    }\n    var localScaleComponents = model.component.scales;\n    util.keys(localScaleComponents).forEach(function (channel) {\n        var domains;\n        var domainRaw = null;\n        for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            var childComponent = child.component.scales[channel];\n            if (childComponent) {\n                if (domains === undefined) {\n                    domains = childComponent.domains;\n                }\n                else {\n                    domains = domains.concat(childComponent.domains);\n                }\n                var dr = childComponent.get('domainRaw');\n                if (domainRaw && dr && domainRaw.signal !== dr.signal) {\n                    log.warn('The same selection must be used to override scale domains in a layered view.');\n                }\n                domainRaw = dr;\n            }\n        }\n        localScaleComponents[channel].domains = domains;\n        if (domainRaw) {\n            localScaleComponents[channel].set('domainRaw', domainRaw, true);\n        }\n    });\n}\n/**\n * Remove unaggregated domain if it is not applicable\n * Add unaggregated domain if domain is not specified and config.scale.useUnaggregatedDomain is true.\n */\nfunction normalizeUnaggregatedDomain(domain, fieldDef, scaleType, scaleConfig) {\n    if (domain === 'unaggregated') {\n        var _a = canUseUnaggregatedDomain(fieldDef, scaleType), valid = _a.valid, reason = _a.reason;\n        if (!valid) {\n            log.warn(reason);\n            return undefined;\n        }\n    }\n    else if (domain === undefined && scaleConfig.useUnaggregatedDomain) {\n        // Apply config if domain is not specified.\n        var valid = canUseUnaggregatedDomain(fieldDef, scaleType).valid;\n        if (valid) {\n            return 'unaggregated';\n        }\n    }\n    return domain;\n}\nexport function parseDomainForChannel(model, channel) {\n    var scaleType = model.getScaleComponent(channel).get('type');\n    var domain = normalizeUnaggregatedDomain(model.scaleDomain(channel), model.fieldDef(channel), scaleType, model.config.scale);\n    if (domain !== model.scaleDomain(channel)) {\n        model.specifiedScales[channel] = tslib_1.__assign({}, model.specifiedScales[channel], { domain: domain });\n    }\n    // If channel is either X or Y then union them with X2 & Y2 if they exist\n    if (channel === 'x' && model.channelHasField('x2')) {\n        if (model.channelHasField('x')) {\n            return parseSingleChannelDomain(scaleType, domain, model, 'x').concat(parseSingleChannelDomain(scaleType, domain, model, 'x2'));\n        }\n        else {\n            return parseSingleChannelDomain(scaleType, domain, model, 'x2');\n        }\n    }\n    else if (channel === 'y' && model.channelHasField('y2')) {\n        if (model.channelHasField('y')) {\n            return parseSingleChannelDomain(scaleType, domain, model, 'y').concat(parseSingleChannelDomain(scaleType, domain, model, 'y2'));\n        }\n        else {\n            return parseSingleChannelDomain(scaleType, domain, model, 'y2');\n        }\n    }\n    return parseSingleChannelDomain(scaleType, domain, model, channel);\n}\nfunction parseSingleChannelDomain(scaleType, domain, model, channel) {\n    var fieldDef = model.fieldDef(channel);\n    if (domain && domain !== 'unaggregated' && !isSelectionDomain(domain)) { // explicit value\n        if (isDateTime(domain[0])) {\n            return domain.map(function (dt) {\n                return { signal: \"{data: \" + dateTimeExpr(dt, true) + \"}\" };\n            });\n        }\n        return [domain];\n    }\n    var stack = model.stack;\n    if (stack && channel === stack.fieldChannel) {\n        if (stack.offset === 'normalize') {\n            return [[0, 1]];\n        }\n        var data = model.requestDataName(MAIN);\n        return [{\n                data: data,\n                field: model.vgField(channel, { suffix: 'start' })\n            }, {\n                data: data,\n                field: model.vgField(channel, { suffix: 'end' })\n            }];\n    }\n    var sort = isScaleChannel(channel) ? domainSort(model, channel, scaleType) : undefined;\n    if (domain === 'unaggregated') {\n        var data = model.requestDataName(MAIN);\n        return [{\n                data: data,\n                field: model.vgField(channel, { aggregate: 'min' })\n            }, {\n                data: data,\n                field: model.vgField(channel, { aggregate: 'max' })\n            }];\n    }\n    else if (fieldDef.bin) { // bin\n        if (isBinScale(scaleType)) {\n            var signal = model.getName(binToString(fieldDef.bin) + \"_\" + fieldDef.field + \"_bins\");\n            return [{ signal: \"sequence(\" + signal + \".start, \" + signal + \".stop + \" + signal + \".step, \" + signal + \".step)\" }];\n        }\n        if (hasDiscreteDomain(scaleType)) {\n            // ordinal bin scale takes domain from bin_range, ordered by bin start\n            // This is useful for both axis-based scale (x/y) and legend-based scale (other channels).\n            return [{\n                    // If sort by aggregation of a specified sort field, we need to use RAW table,\n                    // so we can aggregate values for the scale independently from the main aggregation.\n                    data: util.isBoolean(sort) ? model.requestDataName(MAIN) : model.requestDataName(RAW),\n                    // Use range if we added it and the scale does not support computing a range as a signal.\n                    field: model.vgField(channel, binRequiresRange(fieldDef, channel) ? { binSuffix: 'range' } : {}),\n                    // we have to use a sort object if sort = true to make the sort correct by bin start\n                    sort: sort === true || !isSortField(sort) ? {\n                        field: model.vgField(channel, {}),\n                        op: 'min' // min or max doesn't matter since we sort by the start of the bin range\n                    } : sort\n                }];\n        }\n        else { // continuous scales\n            if (channel === 'x' || channel === 'y') {\n                if (isBinParams(fieldDef.bin) && fieldDef.bin.extent) {\n                    return [fieldDef.bin.extent];\n                }\n                // X/Y position have to include start and end for non-ordinal scale\n                var data = model.requestDataName(MAIN);\n                return [{\n                        data: data,\n                        field: model.vgField(channel, {})\n                    }, {\n                        data: data,\n                        field: model.vgField(channel, { binSuffix: 'end' })\n                    }];\n            }\n            else {\n                // TODO: use bin_mid\n                return [{\n                        data: model.requestDataName(MAIN),\n                        field: model.vgField(channel, {})\n                    }];\n            }\n        }\n    }\n    else if (sort) {\n        return [{\n                // If sort by aggregation of a specified sort field, we need to use RAW table,\n                // so we can aggregate values for the scale independently from the main aggregation.\n                data: util.isBoolean(sort) ? model.requestDataName(MAIN) : model.requestDataName(RAW),\n                field: model.vgField(channel),\n                sort: sort\n            }];\n    }\n    else {\n        return [{\n                data: model.requestDataName(MAIN),\n                field: model.vgField(channel)\n            }];\n    }\n}\nexport function domainSort(model, channel, scaleType) {\n    if (!hasDiscreteDomain(scaleType)) {\n        return undefined;\n    }\n    var sort = model.sort(channel);\n    // if the sort is specified with array, use the derived sort index field\n    if (isSortArray(sort)) {\n        return {\n            op: 'min',\n            field: sortArrayIndexField(model, channel),\n            order: 'ascending'\n        };\n    }\n    // Sorted based on an aggregate calculation over a specified sort field (only for ordinal scale)\n    if (isSortField(sort)) {\n        return sort;\n    }\n    if (sort === 'descending') {\n        return {\n            op: 'min',\n            field: model.vgField(channel),\n            order: 'descending'\n        };\n    }\n    if (util.contains(['ascending', undefined /* default =ascending*/], sort)) {\n        return true;\n    }\n    // sort == null\n    return undefined;\n}\n/**\n * Determine if a scale can use unaggregated domain.\n * @return {Boolean} Returns true if all of the following conditons applies:\n * 1. `scale.domain` is `unaggregated`\n * 2. Aggregation function is not `count` or `sum`\n * 3. The scale is quantitative or time scale.\n */\nexport function canUseUnaggregatedDomain(fieldDef, scaleType) {\n    if (!fieldDef.aggregate) {\n        return {\n            valid: false,\n            reason: log.message.unaggregateDomainHasNoEffectForRawField(fieldDef)\n        };\n    }\n    if (!SHARED_DOMAIN_OP_INDEX[fieldDef.aggregate]) {\n        return {\n            valid: false,\n            reason: log.message.unaggregateDomainWithNonSharedDomainOp(fieldDef.aggregate)\n        };\n    }\n    if (fieldDef.type === 'quantitative') {\n        if (scaleType === 'log') {\n            return {\n                valid: false,\n                reason: log.message.unaggregatedDomainWithLogScale(fieldDef)\n            };\n        }\n    }\n    return { valid: true };\n}\n/**\n * Converts an array of domains to a single Vega scale domain.\n */\nexport function mergeDomains(domains) {\n    var uniqueDomains = util.unique(domains.map(function (domain) {\n        // ignore sort property when computing the unique domains\n        if (isDataRefDomain(domain)) {\n            var _s = domain.sort, domainWithoutSort = tslib_1.__rest(domain, [\"sort\"]);\n            return domainWithoutSort;\n        }\n        return domain;\n    }), util.hash);\n    var sorts = util.unique(domains.map(function (d) {\n        if (isDataRefDomain(d)) {\n            var s = d.sort;\n            if (s !== undefined && !util.isBoolean(s)) {\n                if (s.op === 'count') {\n                    // let's make sure that if op is count, we don't use a field\n                    delete s.field;\n                }\n                if (s.order === 'ascending') {\n                    // drop order: ascending as it is the default\n                    delete s.order;\n                }\n            }\n            return s;\n        }\n        return undefined;\n    }).filter(function (s) { return s !== undefined; }), util.hash);\n    if (uniqueDomains.length === 1) {\n        var domain = domains[0];\n        if (isDataRefDomain(domain) && sorts.length > 0) {\n            var sort_1 = sorts[0];\n            if (sorts.length > 1) {\n                log.warn(log.message.MORE_THAN_ONE_SORT);\n                sort_1 = true;\n            }\n            return tslib_1.__assign({}, domain, { sort: sort_1 });\n        }\n        return domain;\n    }\n    // only keep simple sort properties that work with unioned domains\n    var simpleSorts = util.unique(sorts.map(function (s) {\n        if (s === true) {\n            return s;\n        }\n        if (s.op === 'count') {\n            return s;\n        }\n        log.warn(log.message.domainSortDropped(s));\n        return true;\n    }), util.hash);\n    var sort = undefined;\n    if (simpleSorts.length === 1) {\n        sort = simpleSorts[0];\n    }\n    else if (simpleSorts.length > 1) {\n        log.warn(log.message.MORE_THAN_ONE_SORT);\n        sort = true;\n    }\n    var allData = util.unique(domains.map(function (d) {\n        if (isDataRefDomain(d)) {\n            return d.data;\n        }\n        return null;\n    }), function (x) { return x; });\n    if (allData.length === 1 && allData[0] !== null) {\n        // create a union domain of different fields with a single data source\n        var domain = tslib_1.__assign({ data: allData[0], fields: uniqueDomains.map(function (d) { return d.field; }) }, (sort ? { sort: sort } : {}));\n        return domain;\n    }\n    return tslib_1.__assign({ fields: uniqueDomains }, (sort ? { sort: sort } : {}));\n}\n/**\n * Return a field if a scale single field.\n * Return `undefined` otherwise.\n *\n */\nexport function getFieldFromDomain(domain) {\n    if (isDataRefDomain(domain) && isString(domain.field)) {\n        return domain.field;\n    }\n    else if (isDataRefUnionedDomain(domain)) {\n        var field = void 0;\n        for (var _i = 0, _a = domain.fields; _i < _a.length; _i++) {\n            var nonUnionDomain = _a[_i];\n            if (isDataRefDomain(nonUnionDomain) && isString(nonUnionDomain.field)) {\n                if (!field) {\n                    field = nonUnionDomain.field;\n                }\n                else if (field !== nonUnionDomain.field) {\n                    log.warn('Detected faceted independent scales that union domain of multiple fields from different data sources.  We will use the first field.  The result view size may be incorrect.');\n                    return field;\n                }\n            }\n        }\n        log.warn('Detected faceted independent scales that union domain of identical fields from different source detected.  We will assume that this is the same field from a different fork of the same data source.  However, if this is not case, the result view size maybe incorrect.');\n        return field;\n    }\n    else if (isFieldRefUnionDomain(domain)) {\n        log.warn('Detected faceted independent scales that union domain of multiple fields from the same data source.  We will use the first field.  The result view size may be incorrect.');\n        var field = domain.fields[0];\n        return isString(field) ? field : undefined;\n    }\n    return undefined;\n}\nexport function assembleDomain(model, channel) {\n    var scaleComponent = model.component.scales[channel];\n    var domains = scaleComponent.domains.map(function (domain) {\n        // Correct references to data as the original domain's data was determined\n        // in parseScale, which happens before parseData. Thus the original data\n        // reference can be incorrect.\n        if (isDataRefDomain(domain)) {\n            domain.data = model.lookupDataSource(domain.data);\n        }\n        return domain;\n    });\n    // domains is an array that has to be merged into a single vega domain\n    return mergeDomains(domains);\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { keys } from '../../util';\nimport { isVgRangeStep, isVgSignalRef } from '../../vega.schema';\nimport { isConcatModel, isLayerModel, isRepeatModel } from '../model';\nimport { isRawSelectionDomain, selectionScaleDomain } from '../selection/selection';\nimport { assembleDomain } from './domain';\nexport function assembleScales(model) {\n    if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n        // For concat / layer / repeat, include scales of children too\n        return model.children.reduce(function (scales, child) {\n            return scales.concat(assembleScales(child));\n        }, assembleScalesForModel(model));\n    }\n    else {\n        // For facet, child scales would not be included in the parent's scope.\n        // For unit, there is no child.\n        return assembleScalesForModel(model);\n    }\n}\nexport function assembleScalesForModel(model) {\n    return keys(model.component.scales).reduce(function (scales, channel) {\n        var scaleComponent = model.component.scales[channel];\n        if (scaleComponent.merged) {\n            // Skipped merged scales\n            return scales;\n        }\n        var scale = scaleComponent.combine();\n        // need to separate const and non const object destruction\n        var domainRaw = scale.domainRaw, range = scale.range;\n        var name = scale.name, type = scale.type, _d = scale.domainRaw, _r = scale.range, otherScaleProps = tslib_1.__rest(scale, [\"name\", \"type\", \"domainRaw\", \"range\"]);\n        range = assembleScaleRange(range, name, model, channel);\n        // As scale parsing occurs before selection parsing, a temporary signal\n        // is used for domainRaw. Here, we detect if this temporary signal\n        // is set, and replace it with the correct domainRaw signal.\n        // For more information, see isRawSelectionDomain in selection.ts.\n        if (domainRaw && isRawSelectionDomain(domainRaw)) {\n            domainRaw = selectionScaleDomain(model, domainRaw);\n        }\n        scales.push(tslib_1.__assign({ name: name,\n            type: type, domain: assembleDomain(model, channel) }, (domainRaw ? { domainRaw: domainRaw } : {}), { range: range }, otherScaleProps));\n        return scales;\n    }, []);\n}\nexport function assembleScaleRange(scaleRange, scaleName, model, channel) {\n    // add signals to x/y range\n    if (channel === 'x' || channel === 'y') {\n        if (isVgRangeStep(scaleRange)) {\n            // For x/y range step, use a signal created in layout assemble instead of a constant range step.\n            return {\n                step: { signal: scaleName + '_step' }\n            };\n        }\n        else if (isArray(scaleRange) && scaleRange.length === 2) {\n            var r0 = scaleRange[0];\n            var r1 = scaleRange[1];\n            if (r0 === 0 && isVgSignalRef(r1)) {\n                // Replace width signal just in case it is renamed.\n                return [0, { signal: model.getSizeName(r1.signal) }];\n            }\n            else if (isVgSignalRef(r0) && r1 === 0) {\n                // Replace height signal just in case it is renamed.\n                return [{ signal: model.getSizeName(r0.signal) }, 0];\n            }\n        }\n    }\n    return scaleRange;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9zY2FsZS9hc3NlbWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUVsQyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxhQUFhLEVBQUUsYUFBYSxFQUFtQixNQUFNLG1CQUFtQixDQUFDO0FBQ2pGLE9BQU8sRUFBQyxhQUFhLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBUSxNQUFNLFVBQVUsQ0FBQztBQUMzRSxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUNsRixPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBRXhDLE1BQU0seUJBQXlCLEtBQVk7SUFDekMsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN2RSw4REFBOEQ7UUFDOUQsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFDLE1BQU0sRUFBRSxLQUFLO1lBQ3pDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDLEVBQUUsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUNuQztTQUFNO1FBQ0wsdUVBQXVFO1FBQ3ZFLCtCQUErQjtRQUMvQixPQUFPLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RDO0FBQ0gsQ0FBQztBQUVELE1BQU0saUNBQWlDLEtBQVk7SUFDL0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQyxNQUFpQixFQUFFLE9BQXFCO1FBQ2xGLElBQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZELElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUN6Qix3QkFBd0I7WUFDeEIsT0FBTyxNQUFNLENBQUM7U0FDZjtRQUVELElBQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUV2QywwREFBMEQ7UUFDckQsSUFBQSwyQkFBUyxFQUFFLG1CQUFLLENBQVU7UUFDeEIsSUFBQSxpQkFBSSxFQUFFLGlCQUFJLEVBQUUsb0JBQWEsRUFBRSxnQkFBUyxFQUFFLCtFQUFrQixDQUFVO1FBRXpFLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUV4RCx1RUFBdUU7UUFDdkUsa0VBQWtFO1FBQ2xFLDREQUE0RDtRQUM1RCxrRUFBa0U7UUFDbEUsSUFBSSxTQUFTLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDaEQsU0FBUyxHQUFHLG9CQUFvQixDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNwRDtRQUdELE1BQU0sQ0FBQyxJQUFJLG9CQUNULElBQUksTUFBQTtZQUNKLElBQUksTUFBQSxFQUNKLE1BQU0sRUFBRSxjQUFjLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxJQUNuQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxTQUFTLFdBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFDakMsS0FBSyxFQUFFLEtBQUssSUFDVCxlQUFlLEVBQ2xCLENBQUM7UUFFSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDLEVBQUUsRUFBZSxDQUFDLENBQUM7QUFDeEIsQ0FBQztBQUVELE1BQU0sNkJBQTZCLFVBQW1CLEVBQUUsU0FBaUIsRUFBRSxLQUFZLEVBQUUsT0FBZ0I7SUFDdkcsMkJBQTJCO0lBQzNCLElBQUksT0FBTyxLQUFLLEdBQUcsSUFBSSxPQUFPLEtBQUssR0FBRyxFQUFFO1FBQ3RDLElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzdCLGdHQUFnRztZQUNoRyxPQUFPO2dCQUNMLElBQUksRUFBRSxFQUFDLE1BQU0sRUFBRSxTQUFTLEdBQUcsT0FBTyxFQUFDO2FBQ3BDLENBQUM7U0FDSDthQUFNLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3pELElBQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixJQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLGFBQWEsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDakMsbURBQW1EO2dCQUNuRCxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFDLENBQUMsQ0FBQzthQUNwRDtpQkFBTSxJQUFJLGFBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFO2dCQUN4QyxvREFBb0Q7Z0JBQ3BELE9BQU8sQ0FBQyxFQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3BEO1NBQ0Y7S0FDRjtJQUNELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzQXJyYXl9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5pbXBvcnQge0NoYW5uZWwsIFNjYWxlQ2hhbm5lbH0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge2tleXN9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtpc1ZnUmFuZ2VTdGVwLCBpc1ZnU2lnbmFsUmVmLCBWZ1JhbmdlLCBWZ1NjYWxlfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge2lzQ29uY2F0TW9kZWwsIGlzTGF5ZXJNb2RlbCwgaXNSZXBlYXRNb2RlbCwgTW9kZWx9IGZyb20gJy4uL21vZGVsJztcbmltcG9ydCB7aXNSYXdTZWxlY3Rpb25Eb21haW4sIHNlbGVjdGlvblNjYWxlRG9tYWlufSBmcm9tICcuLi9zZWxlY3Rpb24vc2VsZWN0aW9uJztcbmltcG9ydCB7YXNzZW1ibGVEb21haW59IGZyb20gJy4vZG9tYWluJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlU2NhbGVzKG1vZGVsOiBNb2RlbCk6IFZnU2NhbGVbXSB7XG4gIGlmIChpc0xheWVyTW9kZWwobW9kZWwpIHx8IGlzQ29uY2F0TW9kZWwobW9kZWwpIHx8IGlzUmVwZWF0TW9kZWwobW9kZWwpKSB7XG4gICAgLy8gRm9yIGNvbmNhdCAvIGxheWVyIC8gcmVwZWF0LCBpbmNsdWRlIHNjYWxlcyBvZiBjaGlsZHJlbiB0b29cbiAgICByZXR1cm4gbW9kZWwuY2hpbGRyZW4ucmVkdWNlKChzY2FsZXMsIGNoaWxkKSA9PiB7XG4gICAgICByZXR1cm4gc2NhbGVzLmNvbmNhdChhc3NlbWJsZVNjYWxlcyhjaGlsZCkpO1xuICAgIH0sIGFzc2VtYmxlU2NhbGVzRm9yTW9kZWwobW9kZWwpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBGb3IgZmFjZXQsIGNoaWxkIHNjYWxlcyB3b3VsZCBub3QgYmUgaW5jbHVkZWQgaW4gdGhlIHBhcmVudCdzIHNjb3BlLlxuICAgIC8vIEZvciB1bml0LCB0aGVyZSBpcyBubyBjaGlsZC5cbiAgICByZXR1cm4gYXNzZW1ibGVTY2FsZXNGb3JNb2RlbChtb2RlbCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlU2NhbGVzRm9yTW9kZWwobW9kZWw6IE1vZGVsKTogVmdTY2FsZVtdIHtcbiAgICByZXR1cm4ga2V5cyhtb2RlbC5jb21wb25lbnQuc2NhbGVzKS5yZWR1Y2UoKHNjYWxlczogVmdTY2FsZVtdLCBjaGFubmVsOiBTY2FsZUNoYW5uZWwpID0+IHtcbiAgICAgIGNvbnN0IHNjYWxlQ29tcG9uZW50ID0gbW9kZWwuY29tcG9uZW50LnNjYWxlc1tjaGFubmVsXTtcbiAgICAgIGlmIChzY2FsZUNvbXBvbmVudC5tZXJnZWQpIHtcbiAgICAgICAgLy8gU2tpcHBlZCBtZXJnZWQgc2NhbGVzXG4gICAgICAgIHJldHVybiBzY2FsZXM7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNjYWxlID0gc2NhbGVDb21wb25lbnQuY29tYmluZSgpO1xuXG4gICAgICAvLyBuZWVkIHRvIHNlcGFyYXRlIGNvbnN0IGFuZCBub24gY29uc3Qgb2JqZWN0IGRlc3RydWN0aW9uXG4gICAgICBsZXQge2RvbWFpblJhdywgcmFuZ2V9ID0gc2NhbGU7XG4gICAgICBjb25zdCB7bmFtZSwgdHlwZSwgZG9tYWluUmF3OiBfZCwgcmFuZ2U6IF9yLCAuLi5vdGhlclNjYWxlUHJvcHN9ID0gc2NhbGU7XG5cbiAgICAgIHJhbmdlID0gYXNzZW1ibGVTY2FsZVJhbmdlKHJhbmdlLCBuYW1lLCBtb2RlbCwgY2hhbm5lbCk7XG5cbiAgICAgIC8vIEFzIHNjYWxlIHBhcnNpbmcgb2NjdXJzIGJlZm9yZSBzZWxlY3Rpb24gcGFyc2luZywgYSB0ZW1wb3Jhcnkgc2lnbmFsXG4gICAgICAvLyBpcyB1c2VkIGZvciBkb21haW5SYXcuIEhlcmUsIHdlIGRldGVjdCBpZiB0aGlzIHRlbXBvcmFyeSBzaWduYWxcbiAgICAgIC8vIGlzIHNldCwgYW5kIHJlcGxhY2UgaXQgd2l0aCB0aGUgY29ycmVjdCBkb21haW5SYXcgc2lnbmFsLlxuICAgICAgLy8gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBpc1Jhd1NlbGVjdGlvbkRvbWFpbiBpbiBzZWxlY3Rpb24udHMuXG4gICAgICBpZiAoZG9tYWluUmF3ICYmIGlzUmF3U2VsZWN0aW9uRG9tYWluKGRvbWFpblJhdykpIHtcbiAgICAgICAgZG9tYWluUmF3ID0gc2VsZWN0aW9uU2NhbGVEb21haW4obW9kZWwsIGRvbWFpblJhdyk7XG4gICAgICB9XG5cblxuICAgICAgc2NhbGVzLnB1c2goe1xuICAgICAgICBuYW1lLFxuICAgICAgICB0eXBlLFxuICAgICAgICBkb21haW46IGFzc2VtYmxlRG9tYWluKG1vZGVsLCBjaGFubmVsKSxcbiAgICAgICAgLi4uKGRvbWFpblJhdyA/IHtkb21haW5SYXd9IDoge30pLFxuICAgICAgICByYW5nZTogcmFuZ2UsXG4gICAgICAgIC4uLm90aGVyU2NhbGVQcm9wc1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzY2FsZXM7XG4gICAgfSwgW10gYXMgVmdTY2FsZVtdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlU2NhbGVSYW5nZShzY2FsZVJhbmdlOiBWZ1JhbmdlLCBzY2FsZU5hbWU6IHN0cmluZywgbW9kZWw6IE1vZGVsLCBjaGFubmVsOiBDaGFubmVsKSB7XG4gIC8vIGFkZCBzaWduYWxzIHRvIHgveSByYW5nZVxuICBpZiAoY2hhbm5lbCA9PT0gJ3gnIHx8IGNoYW5uZWwgPT09ICd5Jykge1xuICAgIGlmIChpc1ZnUmFuZ2VTdGVwKHNjYWxlUmFuZ2UpKSB7XG4gICAgICAvLyBGb3IgeC95IHJhbmdlIHN0ZXAsIHVzZSBhIHNpZ25hbCBjcmVhdGVkIGluIGxheW91dCBhc3NlbWJsZSBpbnN0ZWFkIG9mIGEgY29uc3RhbnQgcmFuZ2Ugc3RlcC5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0ZXA6IHtzaWduYWw6IHNjYWxlTmFtZSArICdfc3RlcCd9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShzY2FsZVJhbmdlKSAmJiBzY2FsZVJhbmdlLmxlbmd0aCA9PT0gMikge1xuICAgICAgY29uc3QgcjAgPSBzY2FsZVJhbmdlWzBdO1xuICAgICAgY29uc3QgcjEgPSBzY2FsZVJhbmdlWzFdO1xuICAgICAgaWYgKHIwID09PSAwICYmIGlzVmdTaWduYWxSZWYocjEpKSB7XG4gICAgICAgIC8vIFJlcGxhY2Ugd2lkdGggc2lnbmFsIGp1c3QgaW4gY2FzZSBpdCBpcyByZW5hbWVkLlxuICAgICAgICByZXR1cm4gWzAsIHtzaWduYWw6IG1vZGVsLmdldFNpemVOYW1lKHIxLnNpZ25hbCl9XTtcbiAgICAgIH0gZWxzZSBpZiAoaXNWZ1NpZ25hbFJlZihyMCkgJiYgcjEgPT09IDApIHtcbiAgICAgICAgLy8gUmVwbGFjZSBoZWlnaHQgc2lnbmFsIGp1c3QgaW4gY2FzZSBpdCBpcyByZW5hbWVkLlxuICAgICAgICByZXR1cm4gW3tzaWduYWw6IG1vZGVsLmdldFNpemVOYW1lKHIwLnNpZ25hbCl9LCAwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNjYWxlUmFuZ2U7XG59XG4iXX0=","/// <reference path=\"../../../typings/vega-event-selector.d.ts\" />\nimport * as tslib_1 from \"tslib\";\nimport { selector as parseSelector } from 'vega-event-selector';\nimport { isString, stringValue } from 'vega-util';\nimport { X, Y } from '../../channel';\nimport { warn } from '../../log';\nimport { SELECTION_ID } from '../../selection';\nimport { accessPathWithDatum, logicalExpr, varName } from '../../util';\nimport { isFacetModel, isUnitModel } from '../model';\nimport intervalCompiler from './interval';\nimport multiCompiler from './multi';\nimport singleCompiler from './single';\nimport { forEachTransform } from './transforms/transforms';\nexport var STORE = '_store';\nexport var TUPLE = '_tuple';\nexport var MODIFY = '_modify';\nexport var SELECTION_DOMAIN = '_selection_domain_';\nexport function parseUnitSelection(model, selDefs) {\n    var selCmpts = {};\n    var selectionConfig = model.config.selection;\n    var _loop_1 = function (name_1) {\n        if (!selDefs.hasOwnProperty(name_1)) {\n            return \"continue\";\n        }\n        var selDef = selDefs[name_1];\n        var cfg = selectionConfig[selDef.type];\n        // Set default values from config if a property hasn't been specified,\n        // or if it is true. E.g., \"translate\": true should use the default\n        // event handlers for translate. However, true may be a valid value for\n        // a property (e.g., \"nearest\": true).\n        for (var key in cfg) {\n            // A selection should contain either `encodings` or `fields`, only use\n            // default values for these two values if neither of them is specified.\n            if ((key === 'encodings' && selDef.fields) || (key === 'fields' && selDef.encodings)) {\n                continue;\n            }\n            if (key === 'mark') {\n                selDef[key] = tslib_1.__assign({}, cfg[key], selDef[key]);\n            }\n            if (selDef[key] === undefined || selDef[key] === true) {\n                selDef[key] = cfg[key] || selDef[key];\n            }\n        }\n        name_1 = varName(name_1);\n        var selCmpt = selCmpts[name_1] = tslib_1.__assign({}, selDef, { name: name_1, events: isString(selDef.on) ? parseSelector(selDef.on, 'scope') : selDef.on });\n        forEachTransform(selCmpt, function (txCompiler) {\n            if (txCompiler.parse) {\n                txCompiler.parse(model, selDef, selCmpt);\n            }\n        });\n    };\n    for (var name_1 in selDefs) {\n        _loop_1(name_1);\n    }\n    return selCmpts;\n}\nexport function assembleUnitSelectionSignals(model, signals) {\n    forEachSelection(model, function (selCmpt, selCompiler) {\n        var name = selCmpt.name;\n        var modifyExpr = selCompiler.modifyExpr(model, selCmpt);\n        signals.push.apply(signals, selCompiler.signals(model, selCmpt));\n        forEachTransform(selCmpt, function (txCompiler) {\n            if (txCompiler.signals) {\n                signals = txCompiler.signals(model, selCmpt, signals);\n            }\n            if (txCompiler.modifyExpr) {\n                modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);\n            }\n        });\n        signals.push({\n            name: name + MODIFY,\n            on: [{\n                    events: { signal: name + TUPLE },\n                    update: \"modify(\" + stringValue(selCmpt.name + STORE) + \", \" + modifyExpr + \")\"\n                }]\n        });\n    });\n    var facetModel = getFacetModel(model);\n    if (signals.length && facetModel) {\n        var name_2 = stringValue(facetModel.getName('cell'));\n        signals.unshift({\n            name: 'facet',\n            value: {},\n            on: [{\n                    events: parseSelector('mousemove', 'scope'),\n                    update: \"isTuple(facet) ? facet : group(\" + name_2 + \").datum\"\n                }]\n        });\n    }\n    return signals;\n}\nexport function assembleTopLevelSignals(model, signals) {\n    var needsUnit = false;\n    forEachSelection(model, function (selCmpt, selCompiler) {\n        if (selCompiler.topLevelSignals) {\n            signals = selCompiler.topLevelSignals(model, selCmpt, signals);\n        }\n        forEachTransform(selCmpt, function (txCompiler) {\n            if (txCompiler.topLevelSignals) {\n                signals = txCompiler.topLevelSignals(model, selCmpt, signals);\n            }\n        });\n        needsUnit = true;\n    });\n    if (needsUnit) {\n        var hasUnit = signals.filter(function (s) { return s.name === 'unit'; });\n        if (!(hasUnit.length)) {\n            signals.unshift({\n                name: 'unit',\n                value: {},\n                on: [{ events: 'mousemove', update: 'isTuple(group()) ? group() : unit' }]\n            });\n        }\n    }\n    return signals;\n}\nexport function assembleUnitSelectionData(model, data) {\n    forEachSelection(model, function (selCmpt) {\n        var contains = data.filter(function (d) { return d.name === selCmpt.name + STORE; });\n        if (!contains.length) {\n            data.push({ name: selCmpt.name + STORE });\n        }\n    });\n    return data;\n}\nexport function assembleUnitSelectionMarks(model, marks) {\n    forEachSelection(model, function (selCmpt, selCompiler) {\n        marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;\n        forEachTransform(selCmpt, function (txCompiler) {\n            if (txCompiler.marks) {\n                marks = txCompiler.marks(model, selCmpt, marks);\n            }\n        });\n    });\n    return marks;\n}\nexport function assembleLayerSelectionMarks(model, marks) {\n    model.children.forEach(function (child) {\n        if (isUnitModel(child)) {\n            marks = assembleUnitSelectionMarks(child, marks);\n        }\n    });\n    return marks;\n}\nexport function selectionPredicate(model, selections, dfnode) {\n    var stores = [];\n    function expr(name) {\n        var vname = varName(name);\n        var selCmpt = model.getSelectionComponent(vname, name);\n        var store = stringValue(vname + STORE);\n        if (selCmpt.timeUnit) {\n            var child = dfnode || model.component.data.raw;\n            var tunode = selCmpt.timeUnit.clone();\n            if (child.parent) {\n                tunode.insertAsParentOf(child);\n            }\n            else {\n                child.parent = tunode;\n            }\n        }\n        if (selCmpt.empty !== 'none') {\n            stores.push(store);\n        }\n        return compiler(selCmpt.type).predicate + (\"(\" + store + \", datum\") +\n            (selCmpt.resolve === 'global' ? ')' : \", \" + stringValue(selCmpt.resolve) + \")\");\n    }\n    var predicateStr = logicalExpr(selections, expr);\n    return (stores.length\n        ? '!(' + stores.map(function (s) { return \"length(data(\" + s + \"))\"; }).join(' || ') + ') || '\n        : '') + (\"(\" + predicateStr + \")\");\n}\n// Selections are parsed _after_ scales. If a scale domain is set to\n// use a selection, the SELECTION_DOMAIN constant is used as the\n// domainRaw.signal during scale.parse and then replaced with the necessary\n// selection expression function during scale.assemble. To not pollute the\n// type signatures to account for this setup, the selection domain definition\n// is coerced to a string and appended to SELECTION_DOMAIN.\nexport function isRawSelectionDomain(domainRaw) {\n    return domainRaw.signal.indexOf(SELECTION_DOMAIN) >= 0;\n}\nexport function selectionScaleDomain(model, domainRaw) {\n    var selDomain = JSON.parse(domainRaw.signal.replace(SELECTION_DOMAIN, ''));\n    var name = varName(selDomain.selection);\n    var selCmpt = model.component.selection && model.component.selection[name];\n    if (selCmpt) {\n        warn('Use \"bind\": \"scales\" to setup a binding for scales and selections within the same view.');\n    }\n    else {\n        selCmpt = model.getSelectionComponent(name, selDomain.selection);\n        if (!selDomain.encoding && !selDomain.field) {\n            selDomain.field = selCmpt.project[0].field;\n            if (selCmpt.project.length > 1) {\n                warn('A \"field\" or \"encoding\" must be specified when using a selection as a scale domain. ' +\n                    (\"Using \\\"field\\\": \" + stringValue(selDomain.field) + \".\"));\n            }\n        }\n        return {\n            signal: compiler(selCmpt.type).scaleDomain +\n                (\"(\" + stringValue(name + STORE) + \", \" + stringValue(selDomain.encoding || null) + \", \") +\n                stringValue(selDomain.field || null) +\n                (selCmpt.resolve === 'global' ? ')' : \", \" + stringValue(selCmpt.resolve) + \")\")\n        };\n    }\n    return { signal: 'null' };\n}\n// Utility functions\nfunction forEachSelection(model, cb) {\n    var selections = model.component.selection;\n    for (var name_3 in selections) {\n        if (selections.hasOwnProperty(name_3)) {\n            var sel = selections[name_3];\n            cb(sel, compiler(sel.type));\n        }\n    }\n}\nfunction compiler(type) {\n    switch (type) {\n        case 'single':\n            return singleCompiler;\n        case 'multi':\n            return multiCompiler;\n        case 'interval':\n            return intervalCompiler;\n    }\n    return null;\n}\nfunction getFacetModel(model) {\n    var parent = model.parent;\n    while (parent) {\n        if (isFacetModel(parent)) {\n            break;\n        }\n        parent = parent.parent;\n    }\n    return parent;\n}\nexport function unitName(model) {\n    var name = stringValue(model.name);\n    var facet = getFacetModel(model);\n    if (facet) {\n        name += (facet.facet.row ? \" + '_' + (\" + accessPathWithDatum(facet.vgField('row'), 'facet') + \")\" : '')\n            + (facet.facet.column ? \" + '_' + (\" + accessPathWithDatum(facet.vgField('column'), 'facet') + \")\" : '');\n    }\n    return name;\n}\nexport function requiresSelectionId(model) {\n    var identifier = false;\n    forEachSelection(model, function (selCmpt) {\n        identifier = identifier || selCmpt.project.some(function (proj) { return proj.field === SELECTION_ID; });\n    });\n    return identifier;\n}\nexport function channelSignalName(selCmpt, channel, range) {\n    var sgNames = selCmpt._signalNames || (selCmpt._signalNames = {});\n    if (sgNames[channel] && sgNames[channel][range]) {\n        return sgNames[channel][range];\n    }\n    sgNames[channel] = sgNames[channel] || {};\n    var basename = varName(selCmpt.name + '_' + (range === 'visual' ? channel : selCmpt.fields[channel]));\n    var name = basename;\n    var counter = 1;\n    while (sgNames[name]) {\n        name = basename + \"_\" + counter++;\n    }\n    return (sgNames[name] = sgNames[channel][range] = name);\n}\nexport function positionalProjections(selCmpt) {\n    var x = null;\n    var xi = null;\n    var y = null;\n    var yi = null;\n    selCmpt.project.forEach(function (p, i) {\n        if (p.channel === X) {\n            x = p;\n            xi = i;\n        }\n        else if (p.channel === Y) {\n            y = p;\n            yi = i;\n        }\n    });\n    return { x: x, xi: xi, y: y, yi: yi };\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { Split } from '../split';\nvar ScaleComponent = /** @class */ (function (_super) {\n    tslib_1.__extends(ScaleComponent, _super);\n    function ScaleComponent(name, typeWithExplicit) {\n        var _this = _super.call(this, {}, // no initial explicit property\n        { name: name } // name as initial implicit property\n        ) || this;\n        _this.merged = false;\n        _this.domains = [];\n        _this.setWithExplicit('type', typeWithExplicit);\n        return _this;\n    }\n    return ScaleComponent;\n}(Split));\nexport { ScaleComponent };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2NhbGUvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQSxPQUFPLEVBQVcsS0FBSyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBU3pDO0lBQW9DLDBDQUEwQjtJQUs1RCx3QkFBWSxJQUFZLEVBQUUsZ0JBQXFDO1FBQS9ELFlBQ0Usa0JBQ0UsRUFBRSxFQUFNLCtCQUErQjtRQUN2QyxFQUFDLElBQUksTUFBQSxFQUFDLENBQUUsb0NBQW9DO1NBQzdDLFNBRUY7UUFWTSxZQUFNLEdBQUcsS0FBSyxDQUFDO1FBRWYsYUFBTyxHQUF1QixFQUFFLENBQUM7UUFPdEMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQzs7SUFDakQsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQVpELENBQW9DLEtBQUssR0FZeEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1NjYWxlQ2hhbm5lbH0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge1NjYWxlLCBTY2FsZVR5cGV9IGZyb20gJy4uLy4uL3NjYWxlJztcbmltcG9ydCB7T21pdH0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnTm9uVW5pb25Eb21haW4sIFZnU2NhbGV9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7RXhwbGljaXQsIFNwbGl0fSBmcm9tICcuLi9zcGxpdCc7XG5cbi8qKlxuICogQWxsIFZnRG9tYWluIHByb3BlcnR5IGV4Y2VwdCBkb21haW4uXG4gKiAoV2UgZXhjbHVkZSBkb21haW4gYXMgd2UgaGF2ZSBhIHNwZWNpYWwgXCJkb21haW5zXCIgYXJyYXkgdGhhdCBhbGxvdyB1cyBtZXJnZSB0aGVtIGFsbCBhdCBvbmNlIGluIGFzc2VtYmxlLilcbiAqL1xuLy8gVE9ETzogYWxzbyBleGNsdWRlIGRvbWFpblJhdyBhbmQgcHJvcGVydHkgaW1wbGVtZW50IHRoZSByaWdodCBzY2FsZUNvbXBvbmVudCBmb3Igc2VsZWN0aW9uIGRvbWFpblxuZXhwb3J0IHR5cGUgU2NhbGVDb21wb25lbnRQcm9wcyA9IE9taXQ8VmdTY2FsZSwgJ2RvbWFpbic+O1xuXG5leHBvcnQgY2xhc3MgU2NhbGVDb21wb25lbnQgZXh0ZW5kcyBTcGxpdDxTY2FsZUNvbXBvbmVudFByb3BzPiB7XG4gIHB1YmxpYyBtZXJnZWQgPSBmYWxzZTtcblxuICBwdWJsaWMgZG9tYWluczogVmdOb25VbmlvbkRvbWFpbltdID0gW107XG5cbiAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB0eXBlV2l0aEV4cGxpY2l0OiBFeHBsaWNpdDxTY2FsZVR5cGU+KSB7XG4gICAgc3VwZXIoXG4gICAgICB7fSwgICAgIC8vIG5vIGluaXRpYWwgZXhwbGljaXQgcHJvcGVydHlcbiAgICAgIHtuYW1lfSAgLy8gbmFtZSBhcyBpbml0aWFsIGltcGxpY2l0IHByb3BlcnR5XG4gICAgKTtcbiAgICB0aGlzLnNldFdpdGhFeHBsaWNpdCgndHlwZScsIHR5cGVXaXRoRXhwbGljaXQpO1xuICB9XG59XG5cbi8vIFVzaW5nIE1hcHBlZCBUeXBlIHRvIGRlY2xhcmUgdHlwZSAoaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svYWR2YW5jZWQtdHlwZXMuaHRtbCNtYXBwZWQtdHlwZXMpXG5leHBvcnQgdHlwZSBTY2FsZUNvbXBvbmVudEluZGV4ID0ge1tQIGluIFNjYWxlQ2hhbm5lbF0/OiBTY2FsZUNvbXBvbmVudH07XG5cbmV4cG9ydCB0eXBlIFNjYWxlSW5kZXggPSB7W1AgaW4gU2NhbGVDaGFubmVsXT86IFNjYWxlfTtcbiJdfQ==","import { isNumber } from 'vega-util';\nimport { COLOR, FILL, OPACITY, SCALE_CHANNELS, SHAPE, SIZE, STROKE, X, Y } from '../../channel';\nimport * as log from '../../log';\nimport { channelScalePropertyIncompatability, isExtendedScheme, scaleTypeSupportProperty, } from '../../scale';\nimport { hasContinuousDomain } from '../../scale';\nimport * as util from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { isUnitModel } from '../model';\nimport { makeExplicit, makeImplicit } from '../split';\nimport { parseNonUnitScaleProperty } from './properties';\nexport var RANGE_PROPERTIES = ['range', 'rangeStep', 'scheme'];\nexport function parseScaleRange(model) {\n    if (isUnitModel(model)) {\n        parseUnitScaleRange(model);\n    }\n    else {\n        parseNonUnitScaleProperty(model, 'range');\n    }\n}\nfunction parseUnitScaleRange(model) {\n    var localScaleComponents = model.component.scales;\n    // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!\n    SCALE_CHANNELS.forEach(function (channel) {\n        var localScaleCmpt = localScaleComponents[channel];\n        if (!localScaleCmpt) {\n            return;\n        }\n        var mergedScaleCmpt = model.getScaleComponent(channel);\n        var specifiedScale = model.specifiedScales[channel];\n        var fieldDef = model.fieldDef(channel);\n        // Read if there is a specified width/height\n        var sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n        var sizeSpecified = sizeType ? !!model.component.layoutSize.get(sizeType) : undefined;\n        var scaleType = mergedScaleCmpt.get('type');\n        // if autosize is fit, size cannot be data driven\n        var rangeStep = util.contains(['point', 'band'], scaleType) || !!specifiedScale.rangeStep;\n        if (sizeType && model.fit && !sizeSpecified && rangeStep) {\n            log.warn(log.message.CANNOT_FIX_RANGE_STEP_WITH_FIT);\n            sizeSpecified = true;\n        }\n        var xyRangeSteps = getXYRangeStep(model);\n        var rangeWithExplicit = parseRangeForChannel(channel, scaleType, fieldDef.type, specifiedScale, model.config, localScaleCmpt.get('zero'), model.mark, sizeSpecified, model.getName(sizeType), xyRangeSteps);\n        localScaleCmpt.setWithExplicit('range', rangeWithExplicit);\n    });\n}\nfunction getXYRangeStep(model) {\n    var xyRangeSteps = [];\n    var xScale = model.getScaleComponent('x');\n    var xRange = xScale && xScale.get('range');\n    if (xRange && isVgRangeStep(xRange) && isNumber(xRange.step)) {\n        xyRangeSteps.push(xRange.step);\n    }\n    var yScale = model.getScaleComponent('y');\n    var yRange = yScale && yScale.get('range');\n    if (yRange && isVgRangeStep(yRange) && isNumber(yRange.step)) {\n        xyRangeSteps.push(yRange.step);\n    }\n    return xyRangeSteps;\n}\n/**\n * Return mixins that includes one of the range properties (range, rangeStep, scheme).\n */\nexport function parseRangeForChannel(channel, scaleType, type, specifiedScale, config, zero, mark, sizeSpecified, sizeSignal, xyRangeSteps) {\n    var noRangeStep = sizeSpecified || specifiedScale.rangeStep === null;\n    // Check if any of the range properties is specified.\n    // If so, check if it is compatible and make sure that we only output one of the properties\n    for (var _i = 0, RANGE_PROPERTIES_1 = RANGE_PROPERTIES; _i < RANGE_PROPERTIES_1.length; _i++) {\n        var property = RANGE_PROPERTIES_1[_i];\n        if (specifiedScale[property] !== undefined) {\n            var supportedByScaleType = scaleTypeSupportProperty(scaleType, property);\n            var channelIncompatability = channelScalePropertyIncompatability(channel, property);\n            if (!supportedByScaleType) {\n                log.warn(log.message.scalePropertyNotWorkWithScaleType(scaleType, property, channel));\n            }\n            else if (channelIncompatability) { // channel\n                log.warn(channelIncompatability);\n            }\n            else {\n                switch (property) {\n                    case 'range':\n                        return makeExplicit(specifiedScale[property]);\n                    case 'scheme':\n                        return makeExplicit(parseScheme(specifiedScale[property]));\n                    case 'rangeStep':\n                        var rangeStep = specifiedScale[property];\n                        if (rangeStep !== null) {\n                            if (!sizeSpecified) {\n                                return makeExplicit({ step: rangeStep });\n                            }\n                            else {\n                                // If top-level size is specified, we ignore specified rangeStep.\n                                log.warn(log.message.rangeStepDropped(channel));\n                            }\n                        }\n                }\n            }\n        }\n    }\n    return makeImplicit(defaultRange(channel, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep));\n}\nfunction parseScheme(scheme) {\n    if (isExtendedScheme(scheme)) {\n        var r = { scheme: scheme.name };\n        if (scheme.count) {\n            r.count = scheme.count;\n        }\n        if (scheme.extent) {\n            r.extent = scheme.extent;\n        }\n        return r;\n    }\n    return { scheme: scheme };\n}\nexport function defaultRange(channel, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep) {\n    switch (channel) {\n        case X:\n        case Y:\n            if (util.contains(['point', 'band'], scaleType) && !noRangeStep) {\n                if (channel === X && mark === 'text') {\n                    if (config.scale.textXRangeStep) {\n                        return { step: config.scale.textXRangeStep };\n                    }\n                }\n                else {\n                    if (config.scale.rangeStep) {\n                        return { step: config.scale.rangeStep };\n                    }\n                }\n            }\n            // If range step is null, use zero to width or height.\n            // Note that these range signals are temporary\n            // as they can be merged and renamed.\n            // (We do not have the right size signal here since parseLayoutSize() happens after parseScale().)\n            // We will later replace these temporary names with\n            // the final name in assembleScaleRange()\n            if (channel === Y && hasContinuousDomain(scaleType)) {\n                // For y continuous scale, we have to start from the height as the bottom part has the max value.\n                return [{ signal: sizeSignal }, 0];\n            }\n            else {\n                return [0, { signal: sizeSignal }];\n            }\n        case SIZE:\n            // TODO: support custom rangeMin, rangeMax\n            var rangeMin = sizeRangeMin(mark, zero, config);\n            var rangeMax = sizeRangeMax(mark, xyRangeSteps, config);\n            return [rangeMin, rangeMax];\n        case SHAPE:\n            return 'symbol';\n        case COLOR:\n        case FILL:\n        case STROKE:\n            if (scaleType === 'ordinal') {\n                // Only nominal data uses ordinal scale by default\n                return type === 'nominal' ? 'category' : 'ordinal';\n            }\n            return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';\n        case OPACITY:\n            // TODO: support custom rangeMin, rangeMax\n            return [config.scale.minOpacity, config.scale.maxOpacity];\n    }\n    /* istanbul ignore next: should never reach here */\n    throw new Error(\"Scale range undefined for channel \" + channel);\n}\nfunction sizeRangeMin(mark, zero, config) {\n    if (zero) {\n        return 0;\n    }\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            return config.scale.minBandSize;\n        case 'line':\n        case 'trail':\n        case 'rule':\n            return config.scale.minStrokeWidth;\n        case 'text':\n            return config.scale.minFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            return config.scale.minSize;\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMin not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\nfunction sizeRangeMax(mark, xyRangeSteps, config) {\n    var scaleConfig = config.scale;\n    // TODO(#1168): make max size scale based on rangeStep / overall plot size\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            if (config.scale.maxBandSize !== undefined) {\n                return config.scale.maxBandSize;\n            }\n            return minXYRangeStep(xyRangeSteps, config.scale) - 1;\n        case 'line':\n        case 'trail':\n        case 'rule':\n            return config.scale.maxStrokeWidth;\n        case 'text':\n            return config.scale.maxFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            if (config.scale.maxSize) {\n                return config.scale.maxSize;\n            }\n            // FIXME this case totally should be refactored\n            var pointStep = minXYRangeStep(xyRangeSteps, scaleConfig);\n            return (pointStep - 2) * (pointStep - 2);\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMax not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\n/**\n * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.\n */\nfunction minXYRangeStep(xyRangeSteps, scaleConfig) {\n    if (xyRangeSteps.length > 0) {\n        return Math.min.apply(null, xyRangeSteps);\n    }\n    if (scaleConfig.rangeStep) {\n        return scaleConfig.rangeStep;\n    }\n    return 21; // FIXME: re-evaluate the default value here.\n}\n//# sourceMappingURL=data:application/json;base64,","import { X, Y } from '../../channel';\nimport * as log from '../../log';\nimport { channelScalePropertyIncompatability, hasContinuousDomain, isContinuousToContinuous, ScaleType, scaleTypeSupportProperty } from '../../scale';\nimport { contains, keys } from '../../util';\nimport * as util from '../../util';\nimport { isUnitModel } from '../model';\nimport { mergeValuesWithExplicit, tieBreakByComparing } from '../split';\nimport { parseScaleRange } from './range';\nexport function parseScaleProperty(model, property) {\n    if (isUnitModel(model)) {\n        parseUnitScaleProperty(model, property);\n    }\n    else {\n        parseNonUnitScaleProperty(model, property);\n    }\n}\nfunction parseUnitScaleProperty(model, property) {\n    var localScaleComponents = model.component.scales;\n    keys(localScaleComponents).forEach(function (channel) {\n        var specifiedScale = model.specifiedScales[channel];\n        var localScaleCmpt = localScaleComponents[channel];\n        var mergedScaleCmpt = model.getScaleComponent(channel);\n        var fieldDef = model.fieldDef(channel);\n        var sort = model.sort(channel);\n        var config = model.config;\n        var specifiedValue = specifiedScale[property];\n        var sType = mergedScaleCmpt.get('type');\n        var supportedByScaleType = scaleTypeSupportProperty(sType, property);\n        var channelIncompatability = channelScalePropertyIncompatability(channel, property);\n        if (specifiedValue !== undefined) {\n            // If there is a specified value, check if it is compatible with scale type and channel\n            if (!supportedByScaleType) {\n                log.warn(log.message.scalePropertyNotWorkWithScaleType(sType, property, channel));\n            }\n            else if (channelIncompatability) { // channel\n                log.warn(channelIncompatability);\n            }\n        }\n        if (supportedByScaleType && channelIncompatability === undefined) {\n            if (specifiedValue !== undefined) {\n                // copyKeyFromObject ensure type safety\n                localScaleCmpt.copyKeyFromObject(property, specifiedScale);\n            }\n            else {\n                var value = getDefaultValue(property, channel, fieldDef, sort, mergedScaleCmpt.get('type'), mergedScaleCmpt.get('padding'), mergedScaleCmpt.get('paddingInner'), specifiedScale.domain, model.markDef, config);\n                if (value !== undefined) {\n                    localScaleCmpt.set(property, value, false);\n                }\n            }\n        }\n    });\n}\n// Note: This method is used in Voyager.\nexport function getDefaultValue(property, channel, fieldDef, sort, scaleType, scalePadding, scalePaddingInner, specifiedDomain, markDef, config) {\n    var scaleConfig = config.scale;\n    // If we have default rule-base, determine default value first\n    switch (property) {\n        case 'nice':\n            return nice(scaleType, channel, fieldDef);\n        case 'padding':\n            return padding(channel, scaleType, scaleConfig, fieldDef, markDef, config.bar);\n        case 'paddingInner':\n            return paddingInner(scalePadding, channel, scaleConfig);\n        case 'paddingOuter':\n            return paddingOuter(scalePadding, channel, scaleType, scalePaddingInner, scaleConfig);\n        case 'reverse':\n            return reverse(scaleType, sort);\n        case 'zero':\n            return zero(channel, fieldDef, specifiedDomain, markDef);\n    }\n    // Otherwise, use scale config\n    return scaleConfig[property];\n}\nexport function parseNonUnitScaleProperty(model, property) {\n    var localScaleComponents = model.component.scales;\n    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        if (property === 'range') {\n            parseScaleRange(child);\n        }\n        else {\n            parseScaleProperty(child, property);\n        }\n    }\n    keys(localScaleComponents).forEach(function (channel) {\n        var valueWithExplicit;\n        for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            var childComponent = child.component.scales[channel];\n            if (childComponent) {\n                var childValueWithExplicit = childComponent.getWithExplicit(property);\n                valueWithExplicit = mergeValuesWithExplicit(valueWithExplicit, childValueWithExplicit, property, 'scale', tieBreakByComparing(function (v1, v2) {\n                    switch (property) {\n                        case 'range':\n                            // For range step, prefer larger step\n                            if (v1.step && v2.step) {\n                                return v1.step - v2.step;\n                            }\n                            return 0;\n                        // TODO: precedence rule for other properties\n                    }\n                    return 0;\n                }));\n            }\n        }\n        localScaleComponents[channel].setWithExplicit(property, valueWithExplicit);\n    });\n}\nexport function nice(scaleType, channel, fieldDef) {\n    if (fieldDef.bin || util.contains([ScaleType.TIME, ScaleType.UTC], scaleType)) {\n        return undefined;\n    }\n    return util.contains([X, Y], channel); // return true for quantitative X/Y unless binned\n}\nexport function padding(channel, scaleType, scaleConfig, fieldDef, markDef, barConfig) {\n    if (util.contains([X, Y], channel)) {\n        if (isContinuousToContinuous(scaleType)) {\n            if (scaleConfig.continuousPadding !== undefined) {\n                return scaleConfig.continuousPadding;\n            }\n            var type = markDef.type, orient = markDef.orient;\n            if (type === 'bar' && !fieldDef.bin) {\n                if ((orient === 'vertical' && channel === 'x') ||\n                    (orient === 'horizontal' && channel === 'y')) {\n                    return barConfig.continuousBandSize;\n                }\n            }\n        }\n        if (scaleType === ScaleType.POINT) {\n            return scaleConfig.pointPadding;\n        }\n    }\n    return undefined;\n}\nexport function paddingInner(paddingValue, channel, scaleConfig) {\n    if (paddingValue !== undefined) {\n        // If user has already manually specified \"padding\", no need to add default paddingInner.\n        return undefined;\n    }\n    if (util.contains([X, Y], channel)) {\n        // Padding is only set for X and Y by default.\n        // Basically it doesn't make sense to add padding for color and size.\n        // paddingOuter would only be called if it's a band scale, just return the default for bandScale.\n        return scaleConfig.bandPaddingInner;\n    }\n    return undefined;\n}\nexport function paddingOuter(paddingValue, channel, scaleType, paddingInnerValue, scaleConfig) {\n    if (paddingValue !== undefined) {\n        // If user has already manually specified \"padding\", no need to add default paddingOuter.\n        return undefined;\n    }\n    if (util.contains([X, Y], channel)) {\n        // Padding is only set for X and Y by default.\n        // Basically it doesn't make sense to add padding for color and size.\n        if (scaleType === ScaleType.BAND) {\n            if (scaleConfig.bandPaddingOuter !== undefined) {\n                return scaleConfig.bandPaddingOuter;\n            }\n            /* By default, paddingOuter is paddingInner / 2. The reason is that\n                size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).\n                and we want the width/height to be integer by default.\n                Note that step (by default) and cardinality are integers.) */\n            return paddingInnerValue / 2;\n        }\n    }\n    return undefined;\n}\nexport function reverse(scaleType, sort) {\n    if (hasContinuousDomain(scaleType) && sort === 'descending') {\n        // For continuous domain scales, Vega does not support domain sort.\n        // Thus, we reverse range instead if sort is descending\n        return true;\n    }\n    return undefined;\n}\nexport function zero(channel, fieldDef, specifiedScale, markDef) {\n    // If users explicitly provide a domain range, we should not augment zero as that will be unexpected.\n    var hasCustomDomain = !!specifiedScale && specifiedScale !== 'unaggregated';\n    if (hasCustomDomain) {\n        return false;\n    }\n    // If there is no custom domain, return true only for the following cases:\n    // 1) using quantitative field with size\n    // While this can be either ratio or interval fields, our assumption is that\n    // ratio are more common.\n    if (channel === 'size' && fieldDef.type === 'quantitative') {\n        return true;\n    }\n    // 2) non-binned, quantitative x-scale or y-scale\n    // (For binning, we should not include zero by default because binning are calculated without zero.)\n    if (!fieldDef.bin && util.contains([X, Y], channel)) {\n        var orient = markDef.orient, type = markDef.type;\n        if (contains(['bar', 'area', 'line', 'trail'], type)) {\n            if ((orient === 'horizontal' && channel === 'y') ||\n                (orient === 'vertical' && channel === 'x')) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=data:application/json;base64,","import { isColorChannel, isScaleChannel, rangeType } from '../../channel';\nimport * as log from '../../log';\nimport { channelSupportScaleType, ScaleType } from '../../scale';\nimport { hasDiscreteDomain } from '../../scale';\nimport { Type } from '../../type';\nimport * as util from '../../util';\nimport { contains } from '../../util';\n/**\n * Determine if there is a specified scale type and if it is appropriate,\n * or determine default type if type is unspecified or inappropriate.\n */\n// NOTE: CompassQL uses this method.\nexport function scaleType(specifiedType, channel, fieldDef, mark, scaleConfig) {\n    var defaultScaleType = defaultType(channel, fieldDef, mark, scaleConfig);\n    if (!isScaleChannel(channel)) {\n        // There is no scale for these channels\n        return null;\n    }\n    if (specifiedType !== undefined) {\n        // Check if explicitly specified scale type is supported by the channel\n        if (!channelSupportScaleType(channel, specifiedType)) {\n            log.warn(log.message.scaleTypeNotWorkWithChannel(channel, specifiedType, defaultScaleType));\n            return defaultScaleType;\n        }\n        // Check if explicitly specified scale type is supported by the data type\n        if (!fieldDefMatchScaleType(specifiedType, fieldDef)) {\n            log.warn(log.message.scaleTypeNotWorkWithFieldDef(specifiedType, defaultScaleType));\n            return defaultScaleType;\n        }\n        return specifiedType;\n    }\n    return defaultScaleType;\n}\n/**\n * Determine appropriate default scale type.\n */\n// NOTE: Voyager uses this method.\nfunction defaultType(channel, fieldDef, mark, scaleConfig) {\n    switch (fieldDef.type) {\n        case 'nominal':\n        case 'ordinal':\n            if (isColorChannel(channel) || rangeType(channel) === 'discrete') {\n                if (channel === 'shape' && fieldDef.type === 'ordinal') {\n                    log.warn(log.message.discreteChannelCannotEncode(channel, 'ordinal'));\n                }\n                return 'ordinal';\n            }\n            if (util.contains(['x', 'y'], channel)) {\n                if (util.contains(['rect', 'bar', 'rule'], mark)) {\n                    // The rect/bar mark should fit into a band.\n                    // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429\n                    return 'band';\n                }\n                if (mark === 'bar') {\n                    return 'band';\n                }\n            }\n            // Otherwise, use ordinal point scale so we can easily get center positions of the marks.\n            return 'point';\n        case 'temporal':\n            if (isColorChannel(channel)) {\n                return 'sequential';\n            }\n            else if (rangeType(channel) === 'discrete') {\n                log.warn(log.message.discreteChannelCannotEncode(channel, 'temporal'));\n                // TODO: consider using quantize (equivalent to binning) once we have it\n                return 'ordinal';\n            }\n            return 'time';\n        case 'quantitative':\n            if (isColorChannel(channel)) {\n                if (fieldDef.bin) {\n                    return 'bin-ordinal';\n                }\n                // Use `sequential` as the default color scale for continuous data\n                // since it supports both array range and scheme range.\n                return 'sequential';\n            }\n            else if (rangeType(channel) === 'discrete') {\n                log.warn(log.message.discreteChannelCannotEncode(channel, 'quantitative'));\n                // TODO: consider using quantize (equivalent to binning) once we have it\n                return 'ordinal';\n            }\n            // x and y use a linear scale because selections don't work with bin scales.\n            // Binned scales apply discretization but pan/zoom apply transformations to a [min, max] extent domain.\n            if (fieldDef.bin && channel !== 'x' && channel !== 'y') {\n                return 'bin-linear';\n            }\n            return 'linear';\n        case 'latitude':\n        case 'longitude':\n        case 'geojson':\n            return undefined;\n    }\n    /* istanbul ignore next: should never reach this */\n    throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\nexport function fieldDefMatchScaleType(specifiedType, fieldDef) {\n    var type = fieldDef.type;\n    if (contains([Type.ORDINAL, Type.NOMINAL], type)) {\n        return specifiedType === undefined || hasDiscreteDomain(specifiedType);\n    }\n    else if (type === Type.TEMPORAL) {\n        return contains([ScaleType.TIME, ScaleType.UTC, ScaleType.SEQUENTIAL, undefined], specifiedType);\n    }\n    else if (type === Type.QUANTITATIVE) {\n        if (fieldDef.bin) {\n            return contains([ScaleType.BIN_LINEAR, ScaleType.BIN_ORDINAL, ScaleType.LINEAR], specifiedType);\n        }\n        return contains([ScaleType.LOG, ScaleType.POW, ScaleType.SQRT, ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.LINEAR, ScaleType.SEQUENTIAL, undefined], specifiedType);\n    }\n    return true;\n}\n//# sourceMappingURL=data:application/json;base64,","import { SCALE_CHANNELS, SHAPE, X, Y } from '../../channel';\nimport { getFieldDef, hasConditionalFieldDef, isFieldDef } from '../../fielddef';\nimport { GEOSHAPE } from '../../mark';\nimport { NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES, scaleCompatible, scaleTypePrecedence, } from '../../scale';\nimport { GEOJSON } from '../../type';\nimport { keys } from '../../util';\nimport { isUnitModel } from '../model';\nimport { defaultScaleResolve } from '../resolve';\nimport { mergeValuesWithExplicit, tieBreakByComparing } from '../split';\nimport { ScaleComponent } from './component';\nimport { parseScaleDomain } from './domain';\nimport { parseScaleProperty } from './properties';\nimport { parseScaleRange } from './range';\nimport { scaleType } from './type';\nexport function parseScale(model) {\n    parseScaleCore(model);\n    parseScaleDomain(model);\n    for (var _i = 0, NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES_1 = NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES; _i < NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES_1.length; _i++) {\n        var prop = NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES_1[_i];\n        parseScaleProperty(model, prop);\n    }\n    // range depends on zero\n    parseScaleRange(model);\n}\nexport function parseScaleCore(model) {\n    if (isUnitModel(model)) {\n        model.component.scales = parseUnitScaleCore(model);\n    }\n    else {\n        model.component.scales = parseNonUnitScaleCore(model);\n    }\n}\n/**\n * Parse scales for all channels of a model.\n */\nfunction parseUnitScaleCore(model) {\n    var encoding = model.encoding, config = model.config, mark = model.mark;\n    return SCALE_CHANNELS.reduce(function (scaleComponents, channel) {\n        var fieldDef;\n        var specifiedScale = undefined;\n        var channelDef = encoding[channel];\n        // Don't generate scale for shape of geoshape\n        if (isFieldDef(channelDef) && mark === GEOSHAPE &&\n            channel === SHAPE && channelDef.type === GEOJSON) {\n            return scaleComponents;\n        }\n        if (isFieldDef(channelDef)) {\n            fieldDef = channelDef;\n            specifiedScale = channelDef.scale;\n        }\n        else if (hasConditionalFieldDef(channelDef)) {\n            fieldDef = channelDef.condition;\n            specifiedScale = channelDef.condition['scale']; // We use ['scale'] since we know that channel here has scale for sure\n        }\n        else if (channel === X) {\n            fieldDef = getFieldDef(encoding.x2);\n        }\n        else if (channel === Y) {\n            fieldDef = getFieldDef(encoding.y2);\n        }\n        if (fieldDef && specifiedScale !== null && specifiedScale !== false) {\n            specifiedScale = specifiedScale || {};\n            var specifiedScaleType = specifiedScale.type;\n            var sType = scaleType(specifiedScale.type, channel, fieldDef, mark, config.scale);\n            scaleComponents[channel] = new ScaleComponent(model.scaleName(channel + '', true), { value: sType, explicit: specifiedScaleType === sType });\n        }\n        return scaleComponents;\n    }, {});\n}\nvar scaleTypeTieBreaker = tieBreakByComparing(function (st1, st2) { return (scaleTypePrecedence(st1) - scaleTypePrecedence(st2)); });\nfunction parseNonUnitScaleCore(model) {\n    var scaleComponents = model.component.scales = {};\n    var scaleTypeWithExplicitIndex = {};\n    var resolve = model.component.resolve;\n    var _loop_1 = function (child) {\n        parseScaleCore(child);\n        // Instead of always merging right away -- check if it is compatible to merge first!\n        keys(child.component.scales).forEach(function (channel) {\n            // if resolve is undefined, set default first\n            resolve.scale[channel] = resolve.scale[channel] || defaultScaleResolve(channel, model);\n            if (resolve.scale[channel] === 'shared') {\n                var explicitScaleType = scaleTypeWithExplicitIndex[channel];\n                var childScaleType = child.component.scales[channel].getWithExplicit('type');\n                if (explicitScaleType) {\n                    if (scaleCompatible(explicitScaleType.value, childScaleType.value)) {\n                        // merge scale component if type are compatible\n                        scaleTypeWithExplicitIndex[channel] = mergeValuesWithExplicit(explicitScaleType, childScaleType, 'type', 'scale', scaleTypeTieBreaker);\n                    }\n                    else {\n                        // Otherwise, update conflicting channel to be independent\n                        resolve.scale[channel] = 'independent';\n                        // Remove from the index so they don't get merged\n                        delete scaleTypeWithExplicitIndex[channel];\n                    }\n                }\n                else {\n                    scaleTypeWithExplicitIndex[channel] = childScaleType;\n                }\n            }\n        });\n    };\n    // Parse each child scale and determine if a particular channel can be merged.\n    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        _loop_1(child);\n    }\n    // Merge each channel listed in the index\n    keys(scaleTypeWithExplicitIndex).forEach(function (channel) {\n        // Create new merged scale component\n        var name = model.scaleName(channel, true);\n        var typeWithExplicit = scaleTypeWithExplicitIndex[channel];\n        scaleComponents[channel] = new ScaleComponent(name, typeWithExplicit);\n        // rename each child and mark them as merged\n        for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            var childScale = child.component.scales[channel];\n            if (childScale) {\n                child.renameScale(childScale.get('name'), name);\n                childScale.merged = true;\n            }\n        }\n    });\n    return scaleComponents;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isString } from 'vega-util';\nimport { isChannel, isScaleChannel } from '../channel';\nimport { forEach, reduce } from '../encoding';\nimport { getFieldDef, vgField } from '../fielddef';\nimport * as log from '../log';\nimport { hasDiscreteDomain } from '../scale';\nimport { isFacetSpec } from '../spec';\nimport { extractTitleConfig } from '../title';\nimport { normalizeTransform } from '../transform';\nimport { contains, keys, varName } from '../util';\nimport { isVgRangeStep, } from '../vega.schema';\nimport { assembleAxes } from './axis/assemble';\nimport { getHeaderGroups, getTitleGroup, HEADER_CHANNELS } from './layout/header';\nimport { sizeExpr } from './layoutsize/assemble';\nimport { assembleLegends } from './legend/assemble';\nimport { parseLegend } from './legend/parse';\nimport { assembleProjections } from './projection/assemble';\nimport { parseProjection } from './projection/parse';\nimport { assembleScales } from './scale/assemble';\nimport { assembleDomain, getFieldFromDomain } from './scale/domain';\nimport { parseScale } from './scale/parse';\nimport { Split } from './split';\nvar NameMap = /** @class */ (function () {\n    function NameMap() {\n        this.nameMap = {};\n    }\n    NameMap.prototype.rename = function (oldName, newName) {\n        this.nameMap[oldName] = newName;\n    };\n    NameMap.prototype.has = function (name) {\n        return this.nameMap[name] !== undefined;\n    };\n    NameMap.prototype.get = function (name) {\n        // If the name appears in the _nameMap, we need to read its new name.\n        // We have to loop over the dict just in case the new name also gets renamed.\n        while (this.nameMap[name] && name !== this.nameMap[name]) {\n            name = this.nameMap[name];\n        }\n        return name;\n    };\n    return NameMap;\n}());\nexport { NameMap };\n/*\n  We use type guards instead of `instanceof` as `instanceof` makes\n  different parts of the compiler depend on the actual implementation of\n  the model classes, which in turn depend on different parts of the compiler.\n  Thus, `instanceof` leads to circular dependency problems.\n\n  On the other hand, type guards only make different parts of the compiler\n  depend on the type of the model classes, but not the actual implementation.\n*/\nexport function isUnitModel(model) {\n    return model && model.type === 'unit';\n}\nexport function isFacetModel(model) {\n    return model && model.type === 'facet';\n}\nexport function isRepeatModel(model) {\n    return model && model.type === 'repeat';\n}\nexport function isConcatModel(model) {\n    return model && model.type === 'concat';\n}\nexport function isLayerModel(model) {\n    return model && model.type === 'layer';\n}\nvar Model = /** @class */ (function () {\n    function Model(spec, parent, parentGivenName, config, repeater, resolve) {\n        var _this = this;\n        this.children = [];\n        /**\n         * Corrects the data references in marks after assemble.\n         */\n        this.correctDataNames = function (mark) {\n            // TODO: make this correct\n            // for normal data references\n            if (mark.from && mark.from.data) {\n                mark.from.data = _this.lookupDataSource(mark.from.data);\n            }\n            // for access to facet data\n            if (mark.from && mark.from.facet && mark.from.facet.data) {\n                mark.from.facet.data = _this.lookupDataSource(mark.from.facet.data);\n            }\n            return mark;\n        };\n        this.parent = parent;\n        this.config = config;\n        this.repeater = repeater;\n        // If name is not provided, always use parent's givenName to avoid name conflicts.\n        this.name = spec.name || parentGivenName;\n        this.title = isString(spec.title) ? { text: spec.title } : spec.title;\n        // Shared name maps\n        this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();\n        this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();\n        this.layoutSizeNameMap = parent ? parent.layoutSizeNameMap : new NameMap();\n        this.data = spec.data;\n        this.description = spec.description;\n        this.transforms = normalizeTransform(spec.transform || []);\n        this.component = {\n            data: {\n                sources: parent ? parent.component.data.sources : {},\n                outputNodes: parent ? parent.component.data.outputNodes : {},\n                outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},\n                ancestorParse: parent ? tslib_1.__assign({}, parent.component.data.ancestorParse) : {},\n                // data is faceted if the spec is a facet spec or the parent has faceted data and no data is defined\n                isFaceted: isFacetSpec(spec) || (parent && parent.component.data.isFaceted && !spec.data)\n            },\n            layoutSize: new Split(),\n            layoutHeaders: { row: {}, column: {} },\n            mark: null,\n            resolve: tslib_1.__assign({ scale: {}, axis: {}, legend: {} }, (resolve || {})),\n            selection: null,\n            scales: null,\n            projection: null,\n            axes: {},\n            legends: {},\n        };\n    }\n    Object.defineProperty(Model.prototype, \"width\", {\n        get: function () {\n            return this.getSizeSignalRef('width');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Model.prototype, \"height\", {\n        get: function () {\n            return this.getSizeSignalRef('height');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Model.prototype.initSize = function (size) {\n        var width = size.width, height = size.height;\n        if (width) {\n            this.component.layoutSize.set('width', width, true);\n        }\n        if (height) {\n            this.component.layoutSize.set('height', height, true);\n        }\n    };\n    Model.prototype.parse = function () {\n        this.parseScale();\n        this.parseLayoutSize(); // depends on scale\n        this.renameTopLevelLayoutSize();\n        this.parseSelection();\n        this.parseProjection();\n        this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.\n        this.parseAxisAndHeader(); // depends on scale and layout size\n        this.parseLegend(); // depends on scale, markDef\n        this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.\n    };\n    Model.prototype.parseScale = function () {\n        parseScale(this);\n    };\n    Model.prototype.parseProjection = function () {\n        parseProjection(this);\n    };\n    /**\n     * Rename top-level spec's size to be just width / height, ignoring model name.\n     * This essentially merges the top-level spec's width/height signals with the width/height signals\n     * to help us reduce redundant signals declaration.\n     */\n    Model.prototype.renameTopLevelLayoutSize = function () {\n        if (this.getName('width') !== 'width') {\n            this.renameLayoutSize(this.getName('width'), 'width');\n        }\n        if (this.getName('height') !== 'height') {\n            this.renameLayoutSize(this.getName('height'), 'height');\n        }\n    };\n    Model.prototype.parseLegend = function () {\n        parseLegend(this);\n    };\n    Model.prototype.assembleGroupStyle = function () {\n        if (this.type === 'unit' || this.type === 'layer') {\n            return 'cell';\n        }\n        return undefined;\n    };\n    Model.prototype.assembleLayoutSize = function () {\n        if (this.type === 'unit' || this.type === 'layer') {\n            return {\n                width: this.getSizeSignalRef('width'),\n                height: this.getSizeSignalRef('height')\n            };\n        }\n        return undefined;\n    };\n    Model.prototype.assembleHeaderMarks = function () {\n        var layoutHeaders = this.component.layoutHeaders;\n        var headerMarks = [];\n        for (var _i = 0, HEADER_CHANNELS_1 = HEADER_CHANNELS; _i < HEADER_CHANNELS_1.length; _i++) {\n            var channel = HEADER_CHANNELS_1[_i];\n            if (layoutHeaders[channel].title) {\n                headerMarks.push(getTitleGroup(this, channel));\n            }\n        }\n        for (var _a = 0, HEADER_CHANNELS_2 = HEADER_CHANNELS; _a < HEADER_CHANNELS_2.length; _a++) {\n            var channel = HEADER_CHANNELS_2[_a];\n            headerMarks = headerMarks.concat(getHeaderGroups(this, channel));\n        }\n        return headerMarks;\n    };\n    Model.prototype.assembleAxes = function () {\n        return assembleAxes(this.component.axes, this.config);\n    };\n    Model.prototype.assembleLegends = function () {\n        return assembleLegends(this);\n    };\n    Model.prototype.assembleProjections = function () {\n        return assembleProjections(this);\n    };\n    Model.prototype.assembleTitle = function () {\n        var title = tslib_1.__assign({}, extractTitleConfig(this.config.title).nonMark, this.title);\n        if (title.text) {\n            if (!contains(['unit', 'layer'], this.type)) {\n                // As described in https://github.com/vega/vega-lite/issues/2875:\n                // Due to vega/vega#960 (comment), we only support title's anchor for unit and layered spec for now.\n                if (title.anchor && title.anchor !== 'start') {\n                    log.warn(log.message.cannotSetTitleAnchor(this.type));\n                }\n                title.anchor = 'start';\n            }\n            return keys(title).length > 0 ? title : undefined;\n        }\n        return undefined;\n    };\n    /**\n     * Assemble the mark group for this model.  We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.\n     */\n    Model.prototype.assembleGroup = function (signals) {\n        if (signals === void 0) { signals = []; }\n        var group = {};\n        signals = signals.concat(this.assembleSelectionSignals());\n        if (signals.length > 0) {\n            group.signals = signals;\n        }\n        var layout = this.assembleLayout();\n        if (layout) {\n            group.layout = layout;\n        }\n        group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks());\n        // Only include scales if this spec is top-level or if parent is facet.\n        // (Otherwise, it will be merged with upper-level's scope.)\n        var scales = (!this.parent || isFacetModel(this.parent)) ? assembleScales(this) : [];\n        if (scales.length > 0) {\n            group.scales = scales;\n        }\n        var axes = this.assembleAxes();\n        if (axes.length > 0) {\n            group.axes = axes;\n        }\n        var legends = this.assembleLegends();\n        if (legends.length > 0) {\n            group.legends = legends;\n        }\n        return group;\n    };\n    Model.prototype.hasDescendantWithFieldOnChannel = function (channel) {\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            if (isUnitModel(child)) {\n                if (child.channelHasField(channel)) {\n                    return true;\n                }\n            }\n            else {\n                if (child.hasDescendantWithFieldOnChannel(channel)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    Model.prototype.getName = function (text) {\n        return varName((this.name ? this.name + '_' : '') + text);\n    };\n    /**\n     * Request a data source name for the given data source type and mark that data source as required. This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().\n     */\n    Model.prototype.requestDataName = function (name) {\n        var fullName = this.getName(name);\n        // Increase ref count. This is critical because otherwise we won't create a data source.\n        // We also increase the ref counts on OutputNode.getSource() calls.\n        var refCounts = this.component.data.outputNodeRefCounts;\n        refCounts[fullName] = (refCounts[fullName] || 0) + 1;\n        return fullName;\n    };\n    Model.prototype.getSizeSignalRef = function (sizeType) {\n        if (isFacetModel(this.parent)) {\n            var channel = sizeType === 'width' ? 'x' : 'y';\n            var scaleComponent = this.component.scales[channel];\n            if (scaleComponent && !scaleComponent.merged) { // independent scale\n                var type = scaleComponent.get('type');\n                var range = scaleComponent.get('range');\n                if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                    var scaleName = scaleComponent.get('name');\n                    var domain = assembleDomain(this, channel);\n                    var field = getFieldFromDomain(domain);\n                    if (field) {\n                        var fieldRef = vgField({ aggregate: 'distinct', field: field }, { expr: 'datum' });\n                        return {\n                            signal: sizeExpr(scaleName, scaleComponent, fieldRef)\n                        };\n                    }\n                    else {\n                        log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                        return null;\n                    }\n                }\n            }\n        }\n        return {\n            signal: this.layoutSizeNameMap.get(this.getName(sizeType))\n        };\n    };\n    /**\n     * Lookup the name of the datasource for an output node. You probably want to call this in assemble.\n     */\n    Model.prototype.lookupDataSource = function (name) {\n        var node = this.component.data.outputNodes[name];\n        if (!node) {\n            // Name not found in map so let's just return what we got.\n            // This can happen if we already have the correct name.\n            return name;\n        }\n        return node.getSource();\n    };\n    Model.prototype.getSizeName = function (oldSizeName) {\n        return this.layoutSizeNameMap.get(oldSizeName);\n    };\n    Model.prototype.renameLayoutSize = function (oldName, newName) {\n        this.layoutSizeNameMap.rename(oldName, newName);\n    };\n    Model.prototype.renameScale = function (oldName, newName) {\n        this.scaleNameMap.rename(oldName, newName);\n    };\n    Model.prototype.renameProjection = function (oldName, newName) {\n        this.projectionNameMap.rename(oldName, newName);\n    };\n    /**\n     * @return scale name for a given channel after the scale has been parsed and named.\n     */\n    Model.prototype.scaleName = function (originalScaleName, parse) {\n        if (parse) {\n            // During the parse phase always return a value\n            // No need to refer to rename map because a scale can't be renamed\n            // before it has the original name.\n            return this.getName(originalScaleName);\n        }\n        // If there is a scale for the channel, it should either\n        // be in the scale component or exist in the name map\n        if (\n        // If there is a scale for the channel, there should be a local scale component for it\n        (isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName]) ||\n            // in the scale name map (the scale get merged by its parent)\n            this.scaleNameMap.has(this.getName(originalScaleName))) {\n            return this.scaleNameMap.get(this.getName(originalScaleName));\n        }\n        return undefined;\n    };\n    /**\n     * @return projection name after the projection has been parsed and named.\n     */\n    Model.prototype.projectionName = function (parse) {\n        if (parse) {\n            // During the parse phase always return a value\n            // No need to refer to rename map because a projection can't be renamed\n            // before it has the original name.\n            return this.getName('projection');\n        }\n        if ((this.component.projection && !this.component.projection.merged) || this.projectionNameMap.has(this.getName('projection'))) {\n            return this.projectionNameMap.get(this.getName('projection'));\n        }\n        return undefined;\n    };\n    /**\n     * Traverse a model's hierarchy to get the scale component for a particular channel.\n     */\n    Model.prototype.getScaleComponent = function (channel) {\n        /* istanbul ignore next: This is warning for debugging test */\n        if (!this.component.scales) {\n            throw new Error('getScaleComponent cannot be called before parseScale().  Make sure you have called parseScale or use parseUnitModelWithScale().');\n        }\n        var localScaleComponent = this.component.scales[channel];\n        if (localScaleComponent && !localScaleComponent.merged) {\n            return localScaleComponent;\n        }\n        return (this.parent ? this.parent.getScaleComponent(channel) : undefined);\n    };\n    /**\n     * Traverse a model's hierarchy to get a particular selection component.\n     */\n    Model.prototype.getSelectionComponent = function (variableName, origName) {\n        var sel = this.component.selection[variableName];\n        if (!sel && this.parent) {\n            sel = this.parent.getSelectionComponent(variableName, origName);\n        }\n        if (!sel) {\n            throw new Error(log.message.selectionNotFound(origName));\n        }\n        return sel;\n    };\n    return Model;\n}());\nexport { Model };\n/** Abstract class for UnitModel and FacetModel.  Both of which can contain fieldDefs as a part of its own specification. */\nvar ModelWithField = /** @class */ (function (_super) {\n    tslib_1.__extends(ModelWithField, _super);\n    function ModelWithField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /** Get \"field\" reference for vega */\n    ModelWithField.prototype.vgField = function (channel, opt) {\n        if (opt === void 0) { opt = {}; }\n        var fieldDef = this.fieldDef(channel);\n        if (!fieldDef) {\n            return undefined;\n        }\n        return vgField(fieldDef, opt);\n    };\n    ModelWithField.prototype.reduceFieldDef = function (f, init, t) {\n        return reduce(this.getMapping(), function (acc, cd, c) {\n            var fieldDef = getFieldDef(cd);\n            if (fieldDef) {\n                return f(acc, fieldDef, c);\n            }\n            return acc;\n        }, init, t);\n    };\n    ModelWithField.prototype.forEachFieldDef = function (f, t) {\n        forEach(this.getMapping(), function (cd, c) {\n            var fieldDef = getFieldDef(cd);\n            if (fieldDef) {\n                f(fieldDef, c);\n            }\n        }, t);\n    };\n    return ModelWithField;\n}(Model));\nexport { ModelWithField };\n//# sourceMappingURL=data:application/json;base64,","import { stringValue } from 'vega-util';\nimport { X, Y } from '../../../channel';\nimport * as log from '../../../log';\nimport { hasContinuousDomain, isBinScale } from '../../../scale';\nimport { channelSignalName } from '../selection';\nvar scaleBindings = {\n    has: function (selCmpt) {\n        return selCmpt.type === 'interval' && selCmpt.resolve === 'global' &&\n            selCmpt.bind && selCmpt.bind === 'scales';\n    },\n    parse: function (model, selDef, selCmpt) {\n        var bound = selCmpt.scales = [];\n        selCmpt.project.forEach(function (p) {\n            var channel = p.channel;\n            var scale = model.getScaleComponent(channel);\n            var scaleType = scale ? scale.get('type') : undefined;\n            if (!scale || !hasContinuousDomain(scaleType) || isBinScale(scaleType)) {\n                log.warn(log.message.SCALE_BINDINGS_CONTINUOUS);\n                return;\n            }\n            scale.set('domainRaw', { signal: channelSignalName(selCmpt, channel, 'data') }, true);\n            bound.push(channel);\n            // Bind both x/y for diag plot of repeated views.\n            if (model.repeater && model.repeater.row === model.repeater.column) {\n                var scale2 = model.getScaleComponent(channel === X ? Y : X);\n                scale2.set('domainRaw', { signal: channelSignalName(selCmpt, channel, 'data') }, true);\n            }\n        });\n    },\n    topLevelSignals: function (model, selCmpt, signals) {\n        // Top-level signals are only needed when coordinating composed views.\n        if (!model.parent) {\n            return signals;\n        }\n        var channels = selCmpt.scales.filter(function (channel) {\n            return !(signals.filter(function (s) { return s.name === channelSignalName(selCmpt, channel, 'data'); }).length);\n        });\n        return signals.concat(channels.map(function (channel) {\n            return { name: channelSignalName(selCmpt, channel, 'data') };\n        }));\n    },\n    signals: function (model, selCmpt, signals) {\n        // Nested signals need only push to top-level signals when within composed views.\n        if (model.parent) {\n            selCmpt.scales.forEach(function (channel) {\n                var signal = signals.filter(function (s) { return s.name === channelSignalName(selCmpt, channel, 'data'); })[0];\n                signal.push = 'outer';\n                delete signal.value;\n                delete signal.update;\n            });\n        }\n        return signals;\n    }\n};\nexport default scaleBindings;\nexport function domain(model, channel) {\n    var scale = stringValue(model.scaleName(channel));\n    return \"domain(\" + scale + \")\";\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3RyYW5zZm9ybXMvc2NhbGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFVLENBQUMsRUFBRSxDQUFDLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEtBQUssR0FBRyxNQUFNLGNBQWMsQ0FBQztBQUNwQyxPQUFPLEVBQUMsbUJBQW1CLEVBQUUsVUFBVSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFL0QsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sY0FBYyxDQUFDO0FBSS9DLElBQU0sYUFBYSxHQUFxQjtJQUN0QyxHQUFHLEVBQUUsVUFBUyxPQUFPO1FBQ25CLE9BQU8sT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksT0FBTyxDQUFDLE9BQU8sS0FBSyxRQUFRO1lBQ2hFLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7SUFDOUMsQ0FBQztJQUVELEtBQUssRUFBRSxVQUFTLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTztRQUNwQyxJQUFNLEtBQUssR0FBYyxPQUFPLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUU3QyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFTLENBQUM7WUFDaEMsSUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUMxQixJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDL0MsSUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFFeEQsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDdEUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUM7Z0JBQ2hELE9BQU87YUFDUjtZQUVELEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUMsTUFBTSxFQUFFLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNwRixLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRXBCLGlEQUFpRDtZQUNqRCxJQUFJLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7Z0JBQ2xFLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM5RCxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxFQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDdEY7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxlQUFlLEVBQUUsVUFBUyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU87UUFDL0Msc0VBQXNFO1FBQ3RFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ2pCLE9BQU8sT0FBTyxDQUFDO1NBQ2hCO1FBRUQsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQyxPQUFPO1lBQzdDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsSUFBSSxLQUFLLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQXRELENBQXNELENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvRixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUMsT0FBTztZQUN6QyxPQUFPLEVBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVELE9BQU8sRUFBRSxVQUFTLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTztRQUN2QyxpRkFBaUY7UUFDakYsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ2hCLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsT0FBTztnQkFDNUIsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssaUJBQWlCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBdEQsQ0FBc0QsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUU5RixNQUFNLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztnQkFDdEIsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUNwQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDdkIsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Q0FDRixDQUFDO0FBRUYsZUFBZSxhQUFhLENBQUM7QUFFN0IsTUFBTSxpQkFBaUIsS0FBZ0IsRUFBRSxPQUFnQjtJQUN2RCxJQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3BELE9BQU8sWUFBVSxLQUFLLE1BQUcsQ0FBQztBQUM1QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzdHJpbmdWYWx1ZX0gZnJvbSAndmVnYS11dGlsJztcbmltcG9ydCB7Q2hhbm5lbCwgWCwgWX0gZnJvbSAnLi4vLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vLi4vLi4vbG9nJztcbmltcG9ydCB7aGFzQ29udGludW91c0RvbWFpbiwgaXNCaW5TY2FsZX0gZnJvbSAnLi4vLi4vLi4vc2NhbGUnO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uLy4uL3VuaXQnO1xuaW1wb3J0IHtjaGFubmVsU2lnbmFsTmFtZX0gZnJvbSAnLi4vc2VsZWN0aW9uJztcbmltcG9ydCB7VHJhbnNmb3JtQ29tcGlsZXJ9IGZyb20gJy4vdHJhbnNmb3Jtcyc7XG5cblxuY29uc3Qgc2NhbGVCaW5kaW5nczpUcmFuc2Zvcm1Db21waWxlciA9IHtcbiAgaGFzOiBmdW5jdGlvbihzZWxDbXB0KSB7XG4gICAgcmV0dXJuIHNlbENtcHQudHlwZSA9PT0gJ2ludGVydmFsJyAmJiBzZWxDbXB0LnJlc29sdmUgPT09ICdnbG9iYWwnICYmXG4gICAgICBzZWxDbXB0LmJpbmQgJiYgc2VsQ21wdC5iaW5kID09PSAnc2NhbGVzJztcbiAgfSxcblxuICBwYXJzZTogZnVuY3Rpb24obW9kZWwsIHNlbERlZiwgc2VsQ21wdCkge1xuICAgIGNvbnN0IGJvdW5kOiBDaGFubmVsW10gPSBzZWxDbXB0LnNjYWxlcyA9IFtdO1xuXG4gICAgc2VsQ21wdC5wcm9qZWN0LmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgY29uc3QgY2hhbm5lbCA9IHAuY2hhbm5lbDtcbiAgICAgIGNvbnN0IHNjYWxlID0gbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoY2hhbm5lbCk7XG4gICAgICBjb25zdCBzY2FsZVR5cGUgPSBzY2FsZSA/IHNjYWxlLmdldCgndHlwZScpIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoIXNjYWxlIHx8ICFoYXNDb250aW51b3VzRG9tYWluKHNjYWxlVHlwZSkgfHwgaXNCaW5TY2FsZShzY2FsZVR5cGUpKSB7XG4gICAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLlNDQUxFX0JJTkRJTkdTX0NPTlRJTlVPVVMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNjYWxlLnNldCgnZG9tYWluUmF3Jywge3NpZ25hbDogY2hhbm5lbFNpZ25hbE5hbWUoc2VsQ21wdCwgY2hhbm5lbCwgJ2RhdGEnKX0sIHRydWUpO1xuICAgICAgYm91bmQucHVzaChjaGFubmVsKTtcblxuICAgICAgLy8gQmluZCBib3RoIHgveSBmb3IgZGlhZyBwbG90IG9mIHJlcGVhdGVkIHZpZXdzLlxuICAgICAgaWYgKG1vZGVsLnJlcGVhdGVyICYmIG1vZGVsLnJlcGVhdGVyLnJvdyA9PT0gbW9kZWwucmVwZWF0ZXIuY29sdW1uKSB7XG4gICAgICAgIGNvbnN0IHNjYWxlMiA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KGNoYW5uZWwgPT09IFggPyBZIDogWCk7XG4gICAgICAgIHNjYWxlMi5zZXQoJ2RvbWFpblJhdycsIHtzaWduYWw6IGNoYW5uZWxTaWduYWxOYW1lKHNlbENtcHQsIGNoYW5uZWwsICdkYXRhJyl9LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICB0b3BMZXZlbFNpZ25hbHM6IGZ1bmN0aW9uKG1vZGVsLCBzZWxDbXB0LCBzaWduYWxzKSB7XG4gICAgLy8gVG9wLWxldmVsIHNpZ25hbHMgYXJlIG9ubHkgbmVlZGVkIHdoZW4gY29vcmRpbmF0aW5nIGNvbXBvc2VkIHZpZXdzLlxuICAgIGlmICghbW9kZWwucGFyZW50KSB7XG4gICAgICByZXR1cm4gc2lnbmFscztcbiAgICB9XG5cbiAgICBjb25zdCBjaGFubmVscyA9IHNlbENtcHQuc2NhbGVzLmZpbHRlcigoY2hhbm5lbCkgPT4ge1xuICAgICAgcmV0dXJuICEoc2lnbmFscy5maWx0ZXIocyA9PiBzLm5hbWUgPT09IGNoYW5uZWxTaWduYWxOYW1lKHNlbENtcHQsIGNoYW5uZWwsICdkYXRhJykpLmxlbmd0aCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2lnbmFscy5jb25jYXQoY2hhbm5lbHMubWFwKChjaGFubmVsKSA9PiB7XG4gICAgICByZXR1cm4ge25hbWU6IGNoYW5uZWxTaWduYWxOYW1lKHNlbENtcHQsIGNoYW5uZWwsICdkYXRhJyl9O1xuICAgIH0pKTtcbiAgfSxcblxuICBzaWduYWxzOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgc2lnbmFscykge1xuICAgIC8vIE5lc3RlZCBzaWduYWxzIG5lZWQgb25seSBwdXNoIHRvIHRvcC1sZXZlbCBzaWduYWxzIHdoZW4gd2l0aGluIGNvbXBvc2VkIHZpZXdzLlxuICAgIGlmIChtb2RlbC5wYXJlbnQpIHtcbiAgICAgIHNlbENtcHQuc2NhbGVzLmZvckVhY2goY2hhbm5lbCA9PiB7XG4gICAgICAgIGNvbnN0IHNpZ25hbCA9IHNpZ25hbHMuZmlsdGVyKHMgPT4gcy5uYW1lID09PSBjaGFubmVsU2lnbmFsTmFtZShzZWxDbXB0LCBjaGFubmVsLCAnZGF0YScpKVswXTtcblxuICAgICAgICBzaWduYWwucHVzaCA9ICdvdXRlcic7XG4gICAgICAgIGRlbGV0ZSBzaWduYWwudmFsdWU7XG4gICAgICAgIGRlbGV0ZSBzaWduYWwudXBkYXRlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpZ25hbHM7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNjYWxlQmluZGluZ3M7XG5cbmV4cG9ydCBmdW5jdGlvbiBkb21haW4obW9kZWw6IFVuaXRNb2RlbCwgY2hhbm5lbDogQ2hhbm5lbCkge1xuICBjb25zdCBzY2FsZSA9IHN0cmluZ1ZhbHVlKG1vZGVsLnNjYWxlTmFtZShjaGFubmVsKSk7XG4gIHJldHVybiBgZG9tYWluKCR7c2NhbGV9KWA7XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { stringValue } from 'vega-util';\nimport { X, Y } from '../../channel';\nimport { warn } from '../../log';\nimport { hasContinuousDomain, isBinScale } from '../../scale';\nimport { keys } from '../../util';\nimport { channelSignalName, positionalProjections, STORE, TUPLE, unitName, } from './selection';\nimport scales from './transforms/scales';\nexport var BRUSH = '_brush';\nexport var SCALE_TRIGGER = '_scale_trigger';\nvar interval = {\n    predicate: 'vlInterval',\n    scaleDomain: 'vlIntervalDomain',\n    signals: function (model, selCmpt) {\n        var name = selCmpt.name;\n        var hasScales = scales.has(selCmpt);\n        var signals = [];\n        var intervals = [];\n        var tupleTriggers = [];\n        var scaleTriggers = [];\n        if (selCmpt.translate && !hasScales) {\n            var filterExpr_1 = \"!event.item || event.item.mark.name !== \" + stringValue(name + BRUSH);\n            events(selCmpt, function (_, evt) {\n                var filters = evt.between[0].filter || (evt.between[0].filter = []);\n                if (filters.indexOf(filterExpr_1) < 0) {\n                    filters.push(filterExpr_1);\n                }\n            });\n        }\n        selCmpt.project.forEach(function (p) {\n            var channel = p.channel;\n            if (channel !== X && channel !== Y) {\n                warn('Interval selections only support x and y encoding channels.');\n                return;\n            }\n            var cs = channelSignals(model, selCmpt, channel);\n            var dname = channelSignalName(selCmpt, channel, 'data');\n            var vname = channelSignalName(selCmpt, channel, 'visual');\n            var scaleStr = stringValue(model.scaleName(channel));\n            var scaleType = model.getScaleComponent(channel).get('type');\n            var toNum = hasContinuousDomain(scaleType) ? '+' : '';\n            signals.push.apply(signals, cs);\n            tupleTriggers.push(dname);\n            intervals.push(\"{encoding: \" + stringValue(channel) + \", \" +\n                (\"field: \" + stringValue(p.field) + \", extent: \" + dname + \"}\"));\n            scaleTriggers.push({\n                scaleName: model.scaleName(channel),\n                expr: \"(!isArray(\" + dname + \") || \" +\n                    (\"(\" + toNum + \"invert(\" + scaleStr + \", \" + vname + \")[0] === \" + toNum + dname + \"[0] && \") +\n                    (toNum + \"invert(\" + scaleStr + \", \" + vname + \")[1] === \" + toNum + dname + \"[1]))\")\n            });\n        });\n        // Proxy scale reactions to ensure that an infinite loop doesn't occur\n        // when an interval selection filter touches the scale.\n        if (!hasScales) {\n            signals.push({\n                name: name + SCALE_TRIGGER,\n                update: scaleTriggers.map(function (t) { return t.expr; }).join(' && ') +\n                    (\" ? \" + (name + SCALE_TRIGGER) + \" : {}\")\n            });\n        }\n        // Only add an interval to the store if it has valid data extents. Data extents\n        // are set to null if pixel extents are equal to account for intervals over\n        // ordinal/nominal domains which, when inverted, will still produce a valid datum.\n        return signals.concat({\n            name: name + TUPLE,\n            on: [{\n                    events: tupleTriggers.map(function (t) { return ({ signal: t }); }),\n                    update: tupleTriggers.join(' && ') +\n                        (\" ? {unit: \" + unitName(model) + \", intervals: [\" + intervals.join(', ') + \"]} : null\")\n                }]\n        });\n    },\n    modifyExpr: function (model, selCmpt) {\n        var tpl = selCmpt.name + TUPLE;\n        return tpl + ', ' +\n            (selCmpt.resolve === 'global' ? 'true' : \"{unit: \" + unitName(model) + \"}\");\n    },\n    marks: function (model, selCmpt, marks) {\n        var name = selCmpt.name;\n        var _a = positionalProjections(selCmpt), xi = _a.xi, yi = _a.yi;\n        var store = \"data(\" + stringValue(selCmpt.name + STORE) + \")\";\n        // Do not add a brush if we're binding to scales.\n        if (scales.has(selCmpt)) {\n            return marks;\n        }\n        var update = {\n            x: xi !== null ? { signal: name + \"_x[0]\" } : { value: 0 },\n            y: yi !== null ? { signal: name + \"_y[0]\" } : { value: 0 },\n            x2: xi !== null ? { signal: name + \"_x[1]\" } : { field: { group: 'width' } },\n            y2: yi !== null ? { signal: name + \"_y[1]\" } : { field: { group: 'height' } }\n        };\n        // If the selection is resolved to global, only a single interval is in\n        // the store. Wrap brush mark's encodings with a production rule to test\n        // this based on the `unit` property. Hide the brush mark if it corresponds\n        // to a unit different from the one in the store.\n        if (selCmpt.resolve === 'global') {\n            for (var _i = 0, _b = keys(update); _i < _b.length; _i++) {\n                var key = _b[_i];\n                update[key] = [tslib_1.__assign({ test: store + \".length && \" + store + \"[0].unit === \" + unitName(model) }, update[key]), { value: 0 }];\n            }\n        }\n        // Two brush marks ensure that fill colors and other aesthetic choices do\n        // not interefere with the core marks, but that the brushed region can still\n        // be interacted with (e.g., dragging it around).\n        var _c = selCmpt.mark, fill = _c.fill, fillOpacity = _c.fillOpacity, stroke = tslib_1.__rest(_c, [\"fill\", \"fillOpacity\"]);\n        var vgStroke = keys(stroke).reduce(function (def, k) {\n            def[k] = [{\n                    test: [\n                        xi !== null && name + \"_x[0] !== \" + name + \"_x[1]\",\n                        yi != null && name + \"_y[0] !== \" + name + \"_y[1]\",\n                    ].filter(function (x) { return x; }).join(' && '),\n                    value: stroke[k]\n                }, { value: null }];\n            return def;\n        }, {});\n        return [{\n                name: name + BRUSH + '_bg',\n                type: 'rect',\n                clip: true,\n                encode: {\n                    enter: {\n                        fill: { value: fill },\n                        fillOpacity: { value: fillOpacity }\n                    },\n                    update: update\n                }\n            }].concat(marks, {\n            name: name + BRUSH,\n            type: 'rect',\n            clip: true,\n            encode: {\n                enter: {\n                    fill: { value: 'transparent' }\n                },\n                update: tslib_1.__assign({}, update, vgStroke)\n            }\n        });\n    }\n};\nexport default interval;\n/**\n * Returns the visual and data signals for an interval selection.\n */\nfunction channelSignals(model, selCmpt, channel) {\n    var vname = channelSignalName(selCmpt, channel, 'visual');\n    var dname = channelSignalName(selCmpt, channel, 'data');\n    var hasScales = scales.has(selCmpt);\n    var scaleName = model.scaleName(channel);\n    var scaleStr = stringValue(scaleName);\n    var scale = model.getScaleComponent(channel);\n    var scaleType = scale ? scale.get('type') : undefined;\n    var size = model.getSizeSignalRef(channel === X ? 'width' : 'height').signal;\n    var coord = channel + \"(unit)\";\n    var on = events(selCmpt, function (def, evt) {\n        return def.concat({ events: evt.between[0], update: \"[\" + coord + \", \" + coord + \"]\" }, // Brush Start\n        { events: evt, update: \"[\" + vname + \"[0], clamp(\" + coord + \", 0, \" + size + \")]\" } // Brush End\n        );\n    });\n    // React to pan/zooms of continuous scales. Non-continuous scales\n    // (bin-linear, band, point) cannot be pan/zoomed and any other changes\n    // to their domains (e.g., filtering) should clear the brushes.\n    on.push({\n        events: { signal: selCmpt.name + SCALE_TRIGGER },\n        update: hasContinuousDomain(scaleType) && !isBinScale(scaleType) ?\n            \"[scale(\" + scaleStr + \", \" + dname + \"[0]), scale(\" + scaleStr + \", \" + dname + \"[1])]\" : \"[0, 0]\"\n    });\n    return hasScales ? [{ name: dname, on: [] }] : [{\n            name: vname, value: [], on: on\n        }, {\n            name: dname,\n            on: [{ events: { signal: vname }, update: vname + \"[0] === \" + vname + \"[1] ? null : invert(\" + scaleStr + \", \" + vname + \")\" }]\n        }];\n}\nfunction events(selCmpt, cb) {\n    return selCmpt.events.reduce(function (on, evt) {\n        if (!evt.between) {\n            warn(evt + \" is not an ordered event stream for interval selections\");\n            return on;\n        }\n        return cb(on, evt);\n    }, []);\n}\n//# sourceMappingURL=data:application/json;base64,","import * as log from '../../../log';\nimport { isPathMark } from '../../../mark';\nimport { positionalProjections } from '../selection';\nvar VORONOI = 'voronoi';\nvar nearest = {\n    has: function (selCmpt) {\n        return selCmpt.type !== 'interval' && selCmpt.nearest;\n    },\n    marks: function (model, selCmpt, marks) {\n        var _a = positionalProjections(selCmpt), x = _a.x, y = _a.y;\n        var markType = model.mark;\n        if (isPathMark(markType)) {\n            log.warn(log.message.nearestNotSupportForContinuous(markType));\n            return marks;\n        }\n        var cellDef = {\n            name: model.getName(VORONOI),\n            type: 'path',\n            from: { data: model.getName('marks') },\n            encode: {\n                enter: {\n                    fill: { value: 'transparent' },\n                    strokeWidth: { value: 0.35 },\n                    stroke: { value: 'transparent' },\n                    isVoronoi: { value: true }\n                }\n            },\n            transform: [{\n                    type: 'voronoi',\n                    x: { expr: (x || (!x && !y)) ? 'datum.datum.x || 0' : '0' },\n                    y: { expr: (y || (!x && !y)) ? 'datum.datum.y || 0' : '0' },\n                    size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]\n                }]\n        };\n        var index = 0;\n        var exists = false;\n        marks.forEach(function (mark, i) {\n            var name = mark.name || '';\n            if (name === model.component.mark[0].name) {\n                index = i;\n            }\n            else if (name.indexOf(VORONOI) >= 0) {\n                exists = true;\n            }\n        });\n        if (!exists) {\n            marks.splice(index + 1, 0, cellDef);\n        }\n        return marks;\n    }\n};\nexport default nearest;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVhcmVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21waWxlL3NlbGVjdGlvbi90cmFuc2Zvcm1zL25lYXJlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEdBQUcsTUFBTSxjQUFjLENBQUM7QUFDcEMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFHbkQsSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDO0FBRTFCLElBQU0sT0FBTyxHQUFxQjtJQUNoQyxHQUFHLEVBQUUsVUFBUyxPQUFPO1FBQ25CLE9BQU8sT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUN4RCxDQUFDO0lBRUQsS0FBSyxFQUFFLFVBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLO1FBQzdCLElBQUEsbUNBQXVDLEVBQXRDLFFBQUMsRUFBRSxRQUFDLENBQW1DO1FBQzlDLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDNUIsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDeEIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLDhCQUE4QixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDL0QsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELElBQU0sT0FBTyxHQUFHO1lBQ2QsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1lBQzVCLElBQUksRUFBRSxNQUFNO1lBQ1osSUFBSSxFQUFFLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUM7WUFDcEMsTUFBTSxFQUFFO2dCQUNOLEtBQUssRUFBRTtvQkFDTCxJQUFJLEVBQUUsRUFBQyxLQUFLLEVBQUUsYUFBYSxFQUFDO29CQUM1QixXQUFXLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDO29CQUMxQixNQUFNLEVBQUUsRUFBQyxLQUFLLEVBQUUsYUFBYSxFQUFDO29CQUM5QixTQUFTLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDO2lCQUN6QjthQUNGO1lBQ0QsU0FBUyxFQUFFLENBQUM7b0JBQ1YsSUFBSSxFQUFFLFNBQVM7b0JBQ2YsQ0FBQyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFDO29CQUN6RCxDQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUM7b0JBQ3pELElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQzFFLENBQUM7U0FDSCxDQUFDO1FBRUYsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ25CLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUM3QixJQUFJLElBQUksS0FBSyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3pDLEtBQUssR0FBRyxDQUFDLENBQUM7YUFDWDtpQkFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNyQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2FBQ2Y7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0YsQ0FBQztBQUVGLGVBQWUsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uLy4uLy4uL2xvZyc7XG5pbXBvcnQge2lzUGF0aE1hcmt9IGZyb20gJy4uLy4uLy4uL21hcmsnO1xuaW1wb3J0IHtwb3NpdGlvbmFsUHJvamVjdGlvbnN9IGZyb20gJy4uL3NlbGVjdGlvbic7XG5pbXBvcnQge1RyYW5zZm9ybUNvbXBpbGVyfSBmcm9tICcuL3RyYW5zZm9ybXMnO1xuXG5jb25zdCBWT1JPTk9JID0gJ3Zvcm9ub2knO1xuXG5jb25zdCBuZWFyZXN0OlRyYW5zZm9ybUNvbXBpbGVyID0ge1xuICBoYXM6IGZ1bmN0aW9uKHNlbENtcHQpIHtcbiAgICByZXR1cm4gc2VsQ21wdC50eXBlICE9PSAnaW50ZXJ2YWwnICYmIHNlbENtcHQubmVhcmVzdDtcbiAgfSxcblxuICBtYXJrczogZnVuY3Rpb24obW9kZWwsIHNlbENtcHQsIG1hcmtzKSB7XG4gICAgY29uc3Qge3gsIHl9ID0gcG9zaXRpb25hbFByb2plY3Rpb25zKHNlbENtcHQpO1xuICAgIGNvbnN0IG1hcmtUeXBlID0gbW9kZWwubWFyaztcbiAgICBpZiAoaXNQYXRoTWFyayhtYXJrVHlwZSkpIHtcbiAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLm5lYXJlc3ROb3RTdXBwb3J0Rm9yQ29udGludW91cyhtYXJrVHlwZSkpO1xuICAgICAgcmV0dXJuIG1hcmtzO1xuICAgIH1cblxuICAgIGNvbnN0IGNlbGxEZWYgPSB7XG4gICAgICBuYW1lOiBtb2RlbC5nZXROYW1lKFZPUk9OT0kpLFxuICAgICAgdHlwZTogJ3BhdGgnLFxuICAgICAgZnJvbToge2RhdGE6IG1vZGVsLmdldE5hbWUoJ21hcmtzJyl9LFxuICAgICAgZW5jb2RlOiB7XG4gICAgICAgIGVudGVyOiB7XG4gICAgICAgICAgZmlsbDoge3ZhbHVlOiAndHJhbnNwYXJlbnQnfSxcbiAgICAgICAgICBzdHJva2VXaWR0aDoge3ZhbHVlOiAwLjM1fSxcbiAgICAgICAgICBzdHJva2U6IHt2YWx1ZTogJ3RyYW5zcGFyZW50J30sXG4gICAgICAgICAgaXNWb3Jvbm9pOiB7dmFsdWU6IHRydWV9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0cmFuc2Zvcm06IFt7XG4gICAgICAgIHR5cGU6ICd2b3Jvbm9pJyxcbiAgICAgICAgeDoge2V4cHI6ICh4IHx8ICgheCAmJiAheSkpID8gJ2RhdHVtLmRhdHVtLnggfHwgMCcgOiAnMCd9LFxuICAgICAgICB5OiB7ZXhwcjogKHkgfHwgKCF4ICYmICF5KSkgPyAnZGF0dW0uZGF0dW0ueSB8fCAwJyA6ICcwJ30sXG4gICAgICAgIHNpemU6IFttb2RlbC5nZXRTaXplU2lnbmFsUmVmKCd3aWR0aCcpLCBtb2RlbC5nZXRTaXplU2lnbmFsUmVmKCdoZWlnaHQnKV1cbiAgICAgIH1dXG4gICAgfTtcblxuICAgIGxldCBpbmRleCA9IDA7XG4gICAgbGV0IGV4aXN0cyA9IGZhbHNlO1xuICAgIG1hcmtzLmZvckVhY2goKG1hcmssIGkpID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBtYXJrLm5hbWUgfHwgJyc7XG4gICAgICBpZiAobmFtZSA9PT0gbW9kZWwuY29tcG9uZW50Lm1hcmtbMF0ubmFtZSkge1xuICAgICAgICBpbmRleCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUuaW5kZXhPZihWT1JPTk9JKSA+PSAwKSB7XG4gICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIWV4aXN0cykge1xuICAgICAgbWFya3Muc3BsaWNlKGluZGV4ICsgMSwgMCwgY2VsbERlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcmtzO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBuZWFyZXN0O1xuIl19","import { stringValue } from 'vega-util';\nimport { accessPathWithDatum } from '../../util';\nimport { TUPLE, unitName } from './selection';\nimport nearest from './transforms/nearest';\nexport function signals(model, selCmpt) {\n    var proj = selCmpt.project;\n    var datum = nearest.has(selCmpt) ?\n        '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n    var bins = [];\n    var encodings = proj.map(function (p) { return stringValue(p.channel); }).filter(function (e) { return e; }).join(', ');\n    var fields = proj.map(function (p) { return stringValue(p.field); }).join(', ');\n    var values = proj.map(function (p) {\n        var channel = p.channel;\n        var fieldDef = model.fieldDef(channel);\n        // Binned fields should capture extents, for a range test against the raw field.\n        return (fieldDef && fieldDef.bin) ? (bins.push(p.field),\n            \"[\" + accessPathWithDatum(model.vgField(channel, {}), datum) + \", \" +\n                (accessPathWithDatum(model.vgField(channel, { binSuffix: 'end' }), datum) + \"]\")) :\n            \"\" + accessPathWithDatum(p.field, datum);\n    }).join(', ');\n    // Only add a discrete selection to the store if a datum is present _and_\n    // the interaction isn't occurring on a group mark. This guards against\n    // polluting interactive state with invalid values in faceted displays\n    // as the group marks are also data-driven. We force the update to account\n    // for constant null states but varying toggles (e.g., shift-click in\n    // whitespace followed by a click in whitespace; the store should only\n    // be cleared on the second click).\n    return [{\n            name: selCmpt.name + TUPLE,\n            value: {},\n            on: [{\n                    events: selCmpt.events,\n                    update: \"datum && item().mark.marktype !== 'group' ? \" +\n                        (\"{unit: \" + unitName(model) + \", encodings: [\" + encodings + \"], \") +\n                        (\"fields: [\" + fields + \"], values: [\" + values + \"]\") +\n                        (bins.length ? ', ' + bins.map(function (b) { return stringValue('bin_' + b) + \": 1\"; }).join(', ') : '') +\n                        '} : null',\n                    force: true\n                }]\n        }];\n}\nvar multi = {\n    predicate: 'vlMulti',\n    scaleDomain: 'vlMultiDomain',\n    signals: signals,\n    modifyExpr: function (model, selCmpt) {\n        var tpl = selCmpt.name + TUPLE;\n        return tpl + ', ' +\n            (selCmpt.resolve === 'global' ? 'null' : \"{unit: \" + unitName(model) + \"}\");\n    }\n};\nexport default multi;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9zZWxlY3Rpb24vbXVsdGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUV0QyxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFL0MsT0FBTyxFQUF3QyxLQUFLLEVBQUUsUUFBUSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ25GLE9BQU8sT0FBTyxNQUFNLHNCQUFzQixDQUFDO0FBRTNDLE1BQU0sa0JBQWtCLEtBQWdCLEVBQUUsT0FBMkI7SUFDbkUsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUM3QixJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbEMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUN2RCxJQUFNLElBQUksR0FBYSxFQUFFLENBQUM7SUFDMUIsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQXRCLENBQXNCLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLEVBQUQsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RGLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFwQixDQUFvQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hFLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDO1FBQ3hCLElBQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDMUIsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxnRkFBZ0Y7UUFDaEYsT0FBTyxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQ3JELE1BQUksbUJBQW1CLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLE9BQUk7aUJBQ3ZELG1CQUFtQixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQUcsQ0FBQSxDQUFDLENBQUMsQ0FBQztZQUNuRixLQUFHLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFHLENBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWQseUVBQXlFO0lBQ3pFLHVFQUF1RTtJQUN2RSxzRUFBc0U7SUFDdEUsMEVBQTBFO0lBQzFFLHFFQUFxRTtJQUNyRSxzRUFBc0U7SUFDdEUsbUNBQW1DO0lBQ25DLE9BQU8sQ0FBQztZQUNOLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUs7WUFDMUIsS0FBSyxFQUFFLEVBQUU7WUFDVCxFQUFFLEVBQUUsQ0FBQztvQkFDSCxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07b0JBQ3RCLE1BQU0sRUFBRSw4Q0FBOEM7eUJBQ3BELFlBQVUsUUFBUSxDQUFDLEtBQUssQ0FBQyxzQkFBaUIsU0FBUyxRQUFLLENBQUE7eUJBQ3hELGNBQVksTUFBTSxvQkFBZSxNQUFNLE1BQUcsQ0FBQTt3QkFDMUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFHLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLFFBQUssRUFBL0IsQ0FBK0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO3dCQUN2RixVQUFVO29CQUNaLEtBQUssRUFBRSxJQUFJO2lCQUNaLENBQUM7U0FDSCxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsSUFBTSxLQUFLLEdBQXFCO0lBQzlCLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLFdBQVcsRUFBRSxlQUFlO0lBRTVCLE9BQU8sRUFBRSxPQUFPO0lBRWhCLFVBQVUsRUFBRSxVQUFTLEtBQUssRUFBRSxPQUFPO1FBQ2pDLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2pDLE9BQU8sR0FBRyxHQUFHLElBQUk7WUFDZixDQUFDLE9BQU8sQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVUsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFHLENBQUMsQ0FBQztJQUMzRSxDQUFDO0NBQ0YsQ0FBQztBQUVGLGVBQWUsS0FBSyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzdHJpbmdWYWx1ZX0gZnJvbSAndmVnYS11dGlsJztcblxuaW1wb3J0IHthY2Nlc3NQYXRoV2l0aERhdHVtfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VW5pdE1vZGVsfSBmcm9tICcuLi91bml0JztcbmltcG9ydCB7U2VsZWN0aW9uQ29tcGlsZXIsIFNlbGVjdGlvbkNvbXBvbmVudCwgVFVQTEUsIHVuaXROYW1lfSBmcm9tICcuL3NlbGVjdGlvbic7XG5pbXBvcnQgbmVhcmVzdCBmcm9tICcuL3RyYW5zZm9ybXMvbmVhcmVzdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaWduYWxzKG1vZGVsOiBVbml0TW9kZWwsIHNlbENtcHQ6IFNlbGVjdGlvbkNvbXBvbmVudCkge1xuICBjb25zdCBwcm9qID0gc2VsQ21wdC5wcm9qZWN0O1xuICBjb25zdCBkYXR1bSA9IG5lYXJlc3QuaGFzKHNlbENtcHQpID9cbiAgICAnKGl0ZW0oKS5pc1Zvcm9ub2kgPyBkYXR1bS5kYXR1bSA6IGRhdHVtKScgOiAnZGF0dW0nO1xuICBjb25zdCBiaW5zOiBzdHJpbmdbXSA9IFtdO1xuICBjb25zdCBlbmNvZGluZ3MgPSBwcm9qLm1hcCgocCkgPT4gc3RyaW5nVmFsdWUocC5jaGFubmVsKSkuZmlsdGVyKChlKSA9PiBlKS5qb2luKCcsICcpO1xuICBjb25zdCBmaWVsZHMgPSBwcm9qLm1hcCgocCkgPT4gc3RyaW5nVmFsdWUocC5maWVsZCkpLmpvaW4oJywgJyk7XG4gIGNvbnN0IHZhbHVlcyA9IHByb2oubWFwKChwKSA9PiB7XG4gICAgY29uc3QgY2hhbm5lbCA9IHAuY2hhbm5lbDtcbiAgICBjb25zdCBmaWVsZERlZiA9IG1vZGVsLmZpZWxkRGVmKGNoYW5uZWwpO1xuICAgIC8vIEJpbm5lZCBmaWVsZHMgc2hvdWxkIGNhcHR1cmUgZXh0ZW50cywgZm9yIGEgcmFuZ2UgdGVzdCBhZ2FpbnN0IHRoZSByYXcgZmllbGQuXG4gICAgcmV0dXJuIChmaWVsZERlZiAmJiBmaWVsZERlZi5iaW4pID8gKGJpbnMucHVzaChwLmZpZWxkKSxcbiAgICAgIGBbJHthY2Nlc3NQYXRoV2l0aERhdHVtKG1vZGVsLnZnRmllbGQoY2hhbm5lbCwge30pLCBkYXR1bSl9LCBgICtcbiAgICAgICAgICBgJHthY2Nlc3NQYXRoV2l0aERhdHVtKG1vZGVsLnZnRmllbGQoY2hhbm5lbCwge2JpblN1ZmZpeDogJ2VuZCd9KSwgZGF0dW0pfV1gKSA6XG4gICAgICBgJHthY2Nlc3NQYXRoV2l0aERhdHVtKHAuZmllbGQsIGRhdHVtKX1gO1xuICB9KS5qb2luKCcsICcpO1xuXG4gIC8vIE9ubHkgYWRkIGEgZGlzY3JldGUgc2VsZWN0aW9uIHRvIHRoZSBzdG9yZSBpZiBhIGRhdHVtIGlzIHByZXNlbnQgX2FuZF9cbiAgLy8gdGhlIGludGVyYWN0aW9uIGlzbid0IG9jY3VycmluZyBvbiBhIGdyb3VwIG1hcmsuIFRoaXMgZ3VhcmRzIGFnYWluc3RcbiAgLy8gcG9sbHV0aW5nIGludGVyYWN0aXZlIHN0YXRlIHdpdGggaW52YWxpZCB2YWx1ZXMgaW4gZmFjZXRlZCBkaXNwbGF5c1xuICAvLyBhcyB0aGUgZ3JvdXAgbWFya3MgYXJlIGFsc28gZGF0YS1kcml2ZW4uIFdlIGZvcmNlIHRoZSB1cGRhdGUgdG8gYWNjb3VudFxuICAvLyBmb3IgY29uc3RhbnQgbnVsbCBzdGF0ZXMgYnV0IHZhcnlpbmcgdG9nZ2xlcyAoZS5nLiwgc2hpZnQtY2xpY2sgaW5cbiAgLy8gd2hpdGVzcGFjZSBmb2xsb3dlZCBieSBhIGNsaWNrIGluIHdoaXRlc3BhY2U7IHRoZSBzdG9yZSBzaG91bGQgb25seVxuICAvLyBiZSBjbGVhcmVkIG9uIHRoZSBzZWNvbmQgY2xpY2spLlxuICByZXR1cm4gW3tcbiAgICBuYW1lOiBzZWxDbXB0Lm5hbWUgKyBUVVBMRSxcbiAgICB2YWx1ZToge30sXG4gICAgb246IFt7XG4gICAgICBldmVudHM6IHNlbENtcHQuZXZlbnRzLFxuICAgICAgdXBkYXRlOiBgZGF0dW0gJiYgaXRlbSgpLm1hcmsubWFya3R5cGUgIT09ICdncm91cCcgPyBgICtcbiAgICAgICAgYHt1bml0OiAke3VuaXROYW1lKG1vZGVsKX0sIGVuY29kaW5nczogWyR7ZW5jb2RpbmdzfV0sIGAgK1xuICAgICAgICBgZmllbGRzOiBbJHtmaWVsZHN9XSwgdmFsdWVzOiBbJHt2YWx1ZXN9XWAgK1xuICAgICAgICAoYmlucy5sZW5ndGggPyAnLCAnICsgYmlucy5tYXAoKGIpID0+IGAke3N0cmluZ1ZhbHVlKCdiaW5fJyArIGIpfTogMWApLmpvaW4oJywgJykgOiAnJykgK1xuICAgICAgICAnfSA6IG51bGwnLFxuICAgICAgZm9yY2U6IHRydWVcbiAgICB9XVxuICB9XTtcbn1cblxuY29uc3QgbXVsdGk6U2VsZWN0aW9uQ29tcGlsZXIgPSB7XG4gIHByZWRpY2F0ZTogJ3ZsTXVsdGknLFxuICBzY2FsZURvbWFpbjogJ3ZsTXVsdGlEb21haW4nLFxuXG4gIHNpZ25hbHM6IHNpZ25hbHMsXG5cbiAgbW9kaWZ5RXhwcjogZnVuY3Rpb24obW9kZWwsIHNlbENtcHQpIHtcbiAgICBjb25zdCB0cGwgPSBzZWxDbXB0Lm5hbWUgKyBUVVBMRTtcbiAgICByZXR1cm4gdHBsICsgJywgJyArXG4gICAgICAoc2VsQ21wdC5yZXNvbHZlID09PSAnZ2xvYmFsJyA/ICdudWxsJyA6IGB7dW5pdDogJHt1bml0TmFtZShtb2RlbCl9fWApO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtdWx0aTtcbiJdfQ==","import { stringValue } from 'vega-util';\nimport { signals as multiSignals } from './multi';\nimport { STORE, TUPLE, unitName } from './selection';\nvar single = {\n    predicate: 'vlSingle',\n    scaleDomain: 'vlSingleDomain',\n    signals: multiSignals,\n    topLevelSignals: function (model, selCmpt, signals) {\n        var hasSignal = signals.filter(function (s) { return s.name === selCmpt.name; });\n        var data = \"data(\" + stringValue(selCmpt.name + STORE) + \")\";\n        var values = data + \"[0].values\";\n        return hasSignal.length ? signals : signals.concat({\n            name: selCmpt.name,\n            update: data + \".length && {\" +\n                selCmpt.project.map(function (p, i) { return p.field + \": \" + values + \"[\" + i + \"]\"; }).join(', ') + '}'\n        });\n    },\n    modifyExpr: function (model, selCmpt) {\n        var tpl = selCmpt.name + TUPLE;\n        return tpl + ', ' +\n            (selCmpt.resolve === 'global' ? 'true' : \"{unit: \" + unitName(model) + \"}\");\n    }\n};\nexport default single;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3NpbmdsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRXRDLE9BQU8sRUFBQyxPQUFPLElBQUksWUFBWSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQ2hELE9BQU8sRUFBb0IsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFHdEUsSUFBTSxNQUFNLEdBQXFCO0lBQy9CLFNBQVMsRUFBRSxVQUFVO0lBQ3JCLFdBQVcsRUFBRSxnQkFBZ0I7SUFFN0IsT0FBTyxFQUFFLFlBQVk7SUFFckIsZUFBZSxFQUFFLFVBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPO1FBQy9DLElBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxJQUFJLEVBQXZCLENBQXVCLENBQUMsQ0FBQztRQUNqRSxJQUFNLElBQUksR0FBRyxVQUFRLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFHLENBQUM7UUFDMUQsSUFBTSxNQUFNLEdBQU0sSUFBSSxlQUFZLENBQUM7UUFDbkMsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDakQsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO1lBQ2xCLE1BQU0sRUFBSyxJQUFJLGlCQUFjO2dCQUMzQixPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBRyxDQUFDLENBQUMsS0FBSyxVQUFLLE1BQU0sU0FBSSxDQUFDLE1BQUcsRUFBN0IsQ0FBNkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHO1NBQ2hGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxVQUFVLEVBQUUsVUFBUyxLQUFLLEVBQUUsT0FBTztRQUNqQyxJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNqQyxPQUFPLEdBQUcsR0FBRyxJQUFJO1lBQ2YsQ0FBQyxPQUFPLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFVLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBRyxDQUFDLENBQUM7SUFDM0UsQ0FBQztDQUNGLENBQUM7QUFFRixlQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7c3RyaW5nVmFsdWV9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5cbmltcG9ydCB7c2lnbmFscyBhcyBtdWx0aVNpZ25hbHN9IGZyb20gJy4vbXVsdGknO1xuaW1wb3J0IHtTZWxlY3Rpb25Db21waWxlciwgU1RPUkUsIFRVUExFLCB1bml0TmFtZX0gZnJvbSAnLi9zZWxlY3Rpb24nO1xuXG5cbmNvbnN0IHNpbmdsZTpTZWxlY3Rpb25Db21waWxlciA9IHtcbiAgcHJlZGljYXRlOiAndmxTaW5nbGUnLFxuICBzY2FsZURvbWFpbjogJ3ZsU2luZ2xlRG9tYWluJyxcblxuICBzaWduYWxzOiBtdWx0aVNpZ25hbHMsXG5cbiAgdG9wTGV2ZWxTaWduYWxzOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgc2lnbmFscykge1xuICAgIGNvbnN0IGhhc1NpZ25hbCA9IHNpZ25hbHMuZmlsdGVyKChzKSA9PiBzLm5hbWUgPT09IHNlbENtcHQubmFtZSk7XG4gICAgY29uc3QgZGF0YSA9IGBkYXRhKCR7c3RyaW5nVmFsdWUoc2VsQ21wdC5uYW1lICsgU1RPUkUpfSlgO1xuICAgIGNvbnN0IHZhbHVlcyA9IGAke2RhdGF9WzBdLnZhbHVlc2A7XG4gICAgcmV0dXJuIGhhc1NpZ25hbC5sZW5ndGggPyBzaWduYWxzIDogc2lnbmFscy5jb25jYXQoe1xuICAgICAgbmFtZTogc2VsQ21wdC5uYW1lLFxuICAgICAgdXBkYXRlOiBgJHtkYXRhfS5sZW5ndGggJiYge2AgK1xuICAgICAgICBzZWxDbXB0LnByb2plY3QubWFwKChwLCBpKSA9PiBgJHtwLmZpZWxkfTogJHt2YWx1ZXN9WyR7aX1dYCkuam9pbignLCAnKSArICd9J1xuICAgIH0pO1xuICB9LFxuXG4gIG1vZGlmeUV4cHI6IGZ1bmN0aW9uKG1vZGVsLCBzZWxDbXB0KSB7XG4gICAgY29uc3QgdHBsID0gc2VsQ21wdC5uYW1lICsgVFVQTEU7XG4gICAgcmV0dXJuIHRwbCArICcsICcgK1xuICAgICAgKHNlbENtcHQucmVzb2x2ZSA9PT0gJ2dsb2JhbCcgPyAndHJ1ZScgOiBge3VuaXQ6ICR7dW5pdE5hbWUobW9kZWwpfX1gKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2luZ2xlO1xuIl19","/// <reference path=\"../../../../typings/vega-event-selector.d.ts\" />\nimport { selector as parseSelector } from 'vega-event-selector';\nimport { X, Y } from '../../../channel';\nimport { BRUSH as INTERVAL_BRUSH } from '../interval';\nimport { channelSignalName, positionalProjections } from '../selection';\nimport scalesCompiler, { domain } from './scales';\nvar ANCHOR = '_translate_anchor';\nvar DELTA = '_translate_delta';\nvar translate = {\n    has: function (selCmpt) {\n        return selCmpt.type === 'interval' && selCmpt.translate;\n    },\n    signals: function (model, selCmpt, signals) {\n        var name = selCmpt.name;\n        var hasScales = scalesCompiler.has(selCmpt);\n        var anchor = name + ANCHOR;\n        var _a = positionalProjections(selCmpt), x = _a.x, y = _a.y;\n        var events = parseSelector(selCmpt.translate, 'scope');\n        if (!hasScales) {\n            events = events.map(function (e) { return (e.between[0].markname = name + INTERVAL_BRUSH, e); });\n        }\n        signals.push({\n            name: anchor,\n            value: {},\n            on: [{\n                    events: events.map(function (e) { return e.between[0]; }),\n                    update: '{x: x(unit), y: y(unit)' +\n                        (x !== null ? ', extent_x: ' + (hasScales ? domain(model, X) :\n                            \"slice(\" + channelSignalName(selCmpt, 'x', 'visual') + \")\") : '') +\n                        (y !== null ? ', extent_y: ' + (hasScales ? domain(model, Y) :\n                            \"slice(\" + channelSignalName(selCmpt, 'y', 'visual') + \")\") : '') + '}'\n                }]\n        }, {\n            name: name + DELTA,\n            value: {},\n            on: [{\n                    events: events,\n                    update: \"{x: \" + anchor + \".x - x(unit), y: \" + anchor + \".y - y(unit)}\"\n                }]\n        });\n        if (x !== null) {\n            onDelta(model, selCmpt, X, 'width', signals);\n        }\n        if (y !== null) {\n            onDelta(model, selCmpt, Y, 'height', signals);\n        }\n        return signals;\n    }\n};\nexport default translate;\nfunction onDelta(model, selCmpt, channel, size, signals) {\n    var name = selCmpt.name;\n    var hasScales = scalesCompiler.has(selCmpt);\n    var signal = signals.filter(function (s) {\n        return s.name === channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');\n    })[0];\n    var anchor = name + ANCHOR;\n    var delta = name + DELTA;\n    var sizeSg = model.getSizeSignalRef(size).signal;\n    var scaleCmpt = model.getScaleComponent(channel);\n    var scaleType = scaleCmpt.get('type');\n    var sign = hasScales && channel === X ? '-' : ''; // Invert delta when panning x-scales.\n    var extent = anchor + \".extent_\" + channel;\n    var offset = \"\" + sign + delta + \".\" + channel + \" / \" + (hasScales ? \"\" + sizeSg : \"span(\" + extent + \")\");\n    var panFn = !hasScales ? 'panLinear' :\n        scaleType === 'log' ? 'panLog' :\n            scaleType === 'pow' ? 'panPow' : 'panLinear';\n    var update = panFn + \"(\" + extent + \", \" + offset +\n        (hasScales && scaleType === 'pow' ? \", \" + (scaleCmpt.get('exponent') || 1) : '') + ')';\n    signal.on.push({\n        events: { signal: delta },\n        update: hasScales ? update : \"clampRange(\" + update + \", 0, \" + sizeSg + \")\"\n    });\n}\n//# sourceMappingURL=data:application/json;base64,","/// <reference path=\"../../../../typings/vega-event-selector.d.ts\" />\nimport { selector as parseSelector } from 'vega-event-selector';\nimport { stringValue } from 'vega-util';\nimport { X, Y } from '../../../channel';\nimport { BRUSH as INTERVAL_BRUSH } from '../interval';\nimport { channelSignalName, positionalProjections } from '../selection';\nimport { default as scalesCompiler, domain } from './scales';\nvar ANCHOR = '_zoom_anchor';\nvar DELTA = '_zoom_delta';\nvar zoom = {\n    has: function (selCmpt) {\n        return selCmpt.type === 'interval' && selCmpt.zoom;\n    },\n    signals: function (model, selCmpt, signals) {\n        var name = selCmpt.name;\n        var hasScales = scalesCompiler.has(selCmpt);\n        var delta = name + DELTA;\n        var _a = positionalProjections(selCmpt), x = _a.x, y = _a.y;\n        var sx = stringValue(model.scaleName(X));\n        var sy = stringValue(model.scaleName(Y));\n        var events = parseSelector(selCmpt.zoom, 'scope');\n        if (!hasScales) {\n            events = events.map(function (e) { return (e.markname = name + INTERVAL_BRUSH, e); });\n        }\n        signals.push({\n            name: name + ANCHOR,\n            on: [{\n                    events: events,\n                    update: !hasScales ? \"{x: x(unit), y: y(unit)}\" :\n                        '{' + [\n                            (sx ? \"x: invert(\" + sx + \", x(unit))\" : ''),\n                            (sy ? \"y: invert(\" + sy + \", y(unit))\" : '')\n                        ].filter(function (expr) { return !!expr; }).join(', ') + '}'\n                }]\n        }, {\n            name: delta,\n            on: [{\n                    events: events,\n                    force: true,\n                    update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'\n                }]\n        });\n        if (x !== null) {\n            onDelta(model, selCmpt, 'x', 'width', signals);\n        }\n        if (y !== null) {\n            onDelta(model, selCmpt, 'y', 'height', signals);\n        }\n        return signals;\n    }\n};\nexport default zoom;\nfunction onDelta(model, selCmpt, channel, size, signals) {\n    var name = selCmpt.name;\n    var hasScales = scalesCompiler.has(selCmpt);\n    var signal = signals.filter(function (s) {\n        return s.name === channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');\n    })[0];\n    var sizeSg = model.getSizeSignalRef(size).signal;\n    var scaleCmpt = model.getScaleComponent(channel);\n    var scaleType = scaleCmpt.get('type');\n    var base = hasScales ? domain(model, channel) : signal.name;\n    var delta = name + DELTA;\n    var anchor = \"\" + name + ANCHOR + \".\" + channel;\n    var zoomFn = !hasScales ? 'zoomLinear' :\n        scaleType === 'log' ? 'zoomLog' :\n            scaleType === 'pow' ? 'zoomPow' : 'zoomLinear';\n    var update = zoomFn + \"(\" + base + \", \" + anchor + \", \" + delta +\n        (hasScales && scaleType === 'pow' ? \", \" + (scaleCmpt.get('exponent') || 1) : '') + ')';\n    signal.on.push({\n        events: { signal: delta },\n        update: hasScales ? update : \"clampRange(\" + update + \", 0, \" + sizeSg + \")\"\n    });\n}\n//# sourceMappingURL=data:application/json;base64,","import inputs from './inputs';\nimport nearest from './nearest';\nimport project from './project';\nimport scales from './scales';\nimport toggle from './toggle';\nimport translate from './translate';\nimport zoom from './zoom';\nvar compilers = { project: project, toggle: toggle, scales: scales,\n    translate: translate, zoom: zoom, inputs: inputs, nearest: nearest };\nexport function forEachTransform(selCmpt, cb) {\n    for (var t in compilers) {\n        if (compilers[t].has(selCmpt)) {\n            cb(compilers[t]);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3Jtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21waWxlL3NlbGVjdGlvbi90cmFuc2Zvcm1zL3RyYW5zZm9ybXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUM5QixPQUFPLE9BQU8sTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxPQUFPLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUM5QixPQUFPLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFDOUIsT0FBTyxTQUFTLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sSUFBSSxNQUFNLFFBQVEsQ0FBQztBQUMxQixJQUFNLFNBQVMsR0FBNEIsRUFBQyxPQUFPLFNBQUEsRUFBRSxNQUFNLFFBQUEsRUFBRSxNQUFNLFFBQUE7SUFDakUsU0FBUyxXQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUMsQ0FBQztBQUVwQyxNQUFNLDJCQUEyQixPQUEyQixFQUFFLEVBQW1DO0lBQy9GLEtBQUssSUFBTSxDQUFDLElBQUksU0FBUyxFQUFFO1FBQ3pCLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUM3QixFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1NlbGVjdGlvbkRlZn0gZnJvbSAnLi4vLi4vLi4vc2VsZWN0aW9uJztcbmltcG9ydCB7RGljdH0gZnJvbSAnLi4vLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnU2lnbmFsfSBmcm9tICcuLi8uLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge01vZGVsfSBmcm9tICcuLi8uLi9tb2RlbCc7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vLi4vdW5pdCc7XG5pbXBvcnQge1NlbGVjdGlvbkNvbXBvbmVudH0gZnJvbSAnLi4vc2VsZWN0aW9uJztcblxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zZm9ybUNvbXBpbGVyIHtcbiAgaGFzOiAoc2VsQ21wdDogU2VsZWN0aW9uQ29tcG9uZW50IHwgU2VsZWN0aW9uRGVmKSA9PiBib29sZWFuO1xuICBwYXJzZT86IChtb2RlbDogVW5pdE1vZGVsLCBkZWY6IFNlbGVjdGlvbkRlZiwgc2VsQ21wdDogU2VsZWN0aW9uQ29tcG9uZW50KSA9PiB2b2lkO1xuICBzaWduYWxzPzogKG1vZGVsOiBVbml0TW9kZWwsIHNlbENtcHQ6IFNlbGVjdGlvbkNvbXBvbmVudCwgc2lnbmFsczogVmdTaWduYWxbXSkgPT4gVmdTaWduYWxbXTtcbiAgdG9wTGV2ZWxTaWduYWxzPzogKG1vZGVsOiBNb2RlbCwgc2VsQ21wdDogU2VsZWN0aW9uQ29tcG9uZW50LCBzaWduYWxzOiBWZ1NpZ25hbFtdKSA9PiBWZ1NpZ25hbFtdO1xuICBtb2RpZnlFeHByPzogKG1vZGVsOiBVbml0TW9kZWwsIHNlbENtcHQ6IFNlbGVjdGlvbkNvbXBvbmVudCwgZXhwcjogc3RyaW5nKSA9PiBzdHJpbmc7XG4gIG1hcmtzPzogKG1vZGVsOiBVbml0TW9kZWwsIHNlbENtcHQ6U2VsZWN0aW9uQ29tcG9uZW50LCBtYXJrczogYW55W10pID0+IGFueVtdO1xufVxuXG5pbXBvcnQgaW5wdXRzIGZyb20gJy4vaW5wdXRzJztcbmltcG9ydCBuZWFyZXN0IGZyb20gJy4vbmVhcmVzdCc7XG5pbXBvcnQgcHJvamVjdCBmcm9tICcuL3Byb2plY3QnO1xuaW1wb3J0IHNjYWxlcyBmcm9tICcuL3NjYWxlcyc7XG5pbXBvcnQgdG9nZ2xlIGZyb20gJy4vdG9nZ2xlJztcbmltcG9ydCB0cmFuc2xhdGUgZnJvbSAnLi90cmFuc2xhdGUnO1xuaW1wb3J0IHpvb20gZnJvbSAnLi96b29tJztcbmNvbnN0IGNvbXBpbGVyczogRGljdDxUcmFuc2Zvcm1Db21waWxlcj4gPSB7cHJvamVjdCwgdG9nZ2xlLCBzY2FsZXMsXG4gIHRyYW5zbGF0ZSwgem9vbSwgaW5wdXRzLCBuZWFyZXN0fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZvckVhY2hUcmFuc2Zvcm0oc2VsQ21wdDogU2VsZWN0aW9uQ29tcG9uZW50LCBjYjogKHR4OiBUcmFuc2Zvcm1Db21waWxlcikgPT4gdm9pZCkge1xuICBmb3IgKGNvbnN0IHQgaW4gY29tcGlsZXJzKSB7XG4gICAgaWYgKGNvbXBpbGVyc1t0XS5oYXMoc2VsQ21wdCkpIHtcbiAgICAgIGNiKGNvbXBpbGVyc1t0XSk7XG4gICAgfVxuICB9XG59XG4iXX0=","import * as log from '../../../log';\nimport { keys } from '../../../util';\nimport { TimeUnitNode } from '../../data/timeunit';\nvar project = {\n    has: function (selDef) {\n        var def = selDef;\n        return def.fields !== undefined || def.encodings !== undefined;\n    },\n    parse: function (model, selDef, selCmpt) {\n        var channels = {};\n        var timeUnits = {};\n        // TODO: find a possible channel mapping for these fields.\n        (selDef.fields || []).forEach(function (field) { return channels[field] = null; });\n        (selDef.encodings || []).forEach(function (channel) {\n            var fieldDef = model.fieldDef(channel);\n            if (fieldDef) {\n                if (fieldDef.timeUnit) {\n                    var tuField = model.vgField(channel);\n                    channels[tuField] = channel;\n                    // Construct TimeUnitComponents which will be combined into a\n                    // TimeUnitNode. This node may need to be inserted into the\n                    // dataflow if the selection is used across views that do not\n                    // have these time units defined.\n                    timeUnits[tuField] = {\n                        as: tuField,\n                        field: fieldDef.field,\n                        timeUnit: fieldDef.timeUnit\n                    };\n                }\n                else {\n                    channels[fieldDef.field] = channel;\n                }\n            }\n            else {\n                log.warn(log.message.cannotProjectOnChannelWithoutField(channel));\n            }\n        });\n        var projection = selCmpt.project || (selCmpt.project = []);\n        for (var field in channels) {\n            if (channels.hasOwnProperty(field)) {\n                projection.push({ field: field, channel: channels[field] });\n            }\n        }\n        var fields = selCmpt.fields || (selCmpt.fields = {});\n        projection.filter(function (p) { return p.channel; }).forEach(function (p) { return fields[p.channel] = p.field; });\n        if (keys(timeUnits).length) {\n            selCmpt.timeUnit = new TimeUnitNode(null, timeUnits);\n        }\n    }\n};\nexport default project;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21waWxlL3NlbGVjdGlvbi90cmFuc2Zvcm1zL3Byb2plY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxLQUFLLEdBQUcsTUFBTSxjQUFjLENBQUM7QUFFcEMsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuQyxPQUFPLEVBQW9CLFlBQVksRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBSXBFLElBQU0sT0FBTyxHQUFzQjtJQUNqQyxHQUFHLEVBQUUsVUFBUyxNQUF5QztRQUNyRCxJQUFNLEdBQUcsR0FBRyxNQUFzQixDQUFDO1FBQ25DLE9BQU8sR0FBRyxDQUFDLE1BQU0sS0FBSyxTQUFTLElBQUksR0FBRyxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUM7SUFDakUsQ0FBQztJQUVELEtBQUssRUFBRSxVQUFTLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTztRQUNwQyxJQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBTSxTQUFTLEdBQXVDLEVBQUUsQ0FBQztRQUV6RCwwREFBMEQ7UUFDMUQsQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQUssSUFBSyxPQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLEVBQXRCLENBQXNCLENBQUMsQ0FBQztRQUVqRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBeUI7WUFDekQsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QyxJQUFJLFFBQVEsRUFBRTtnQkFDWixJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUU7b0JBQ3JCLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3ZDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUM7b0JBRTVCLDZEQUE2RDtvQkFDN0QsMkRBQTJEO29CQUMzRCw2REFBNkQ7b0JBQzdELGlDQUFpQztvQkFDakMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHO3dCQUNuQixFQUFFLEVBQUUsT0FBTzt3QkFDWCxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUs7d0JBQ3JCLFFBQVEsRUFBRSxRQUFRLENBQUMsUUFBUTtxQkFDNUIsQ0FBQztpQkFDSDtxQkFBTTtvQkFDTCxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQztpQkFDcEM7YUFDRjtpQkFBTTtnQkFDTCxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsa0NBQWtDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUNuRTtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDN0QsS0FBSyxJQUFNLEtBQUssSUFBSSxRQUFRLEVBQUU7WUFDNUIsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNsQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQzthQUMzRDtTQUNGO1FBRUQsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdkQsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxPQUFPLEVBQVQsQ0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUEzQixDQUEyQixDQUFDLENBQUM7UUFFaEYsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQzFCLE9BQU8sQ0FBQyxRQUFRLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3REO0lBQ0gsQ0FBQztDQUNGLENBQUM7QUFFRixlQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2luZ2xlRGVmQ2hhbm5lbH0gZnJvbSAnLi4vLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vLi4vLi4vbG9nJztcbmltcG9ydCB7U2VsZWN0aW9uRGVmfSBmcm9tICcuLi8uLi8uLi9zZWxlY3Rpb24nO1xuaW1wb3J0IHtrZXlzfSBmcm9tICcuLi8uLi8uLi91dGlsJztcbmltcG9ydCB7VGltZVVuaXRDb21wb25lbnQsIFRpbWVVbml0Tm9kZX0gZnJvbSAnLi4vLi4vZGF0YS90aW1ldW5pdCc7XG5pbXBvcnQge1NlbGVjdGlvbkNvbXBvbmVudH0gZnJvbSAnLi4vc2VsZWN0aW9uJztcbmltcG9ydCB7VHJhbnNmb3JtQ29tcGlsZXJ9IGZyb20gJy4vdHJhbnNmb3Jtcyc7XG5cbmNvbnN0IHByb2plY3Q6IFRyYW5zZm9ybUNvbXBpbGVyID0ge1xuICBoYXM6IGZ1bmN0aW9uKHNlbERlZjogU2VsZWN0aW9uQ29tcG9uZW50IHwgU2VsZWN0aW9uRGVmKSB7XG4gICAgY29uc3QgZGVmID0gc2VsRGVmIGFzIFNlbGVjdGlvbkRlZjtcbiAgICByZXR1cm4gZGVmLmZpZWxkcyAhPT0gdW5kZWZpbmVkIHx8IGRlZi5lbmNvZGluZ3MgIT09IHVuZGVmaW5lZDtcbiAgfSxcblxuICBwYXJzZTogZnVuY3Rpb24obW9kZWwsIHNlbERlZiwgc2VsQ21wdCkge1xuICAgIGNvbnN0IGNoYW5uZWxzID0ge307XG4gICAgY29uc3QgdGltZVVuaXRzOiB7W2tleTogc3RyaW5nXTogVGltZVVuaXRDb21wb25lbnR9ID0ge307XG5cbiAgICAvLyBUT0RPOiBmaW5kIGEgcG9zc2libGUgY2hhbm5lbCBtYXBwaW5nIGZvciB0aGVzZSBmaWVsZHMuXG4gICAgKHNlbERlZi5maWVsZHMgfHwgW10pLmZvckVhY2goKGZpZWxkKSA9PiBjaGFubmVsc1tmaWVsZF0gPSBudWxsKTtcblxuICAgIChzZWxEZWYuZW5jb2RpbmdzIHx8IFtdKS5mb3JFYWNoKChjaGFubmVsOiBTaW5nbGVEZWZDaGFubmVsKSA9PiB7XG4gICAgICBjb25zdCBmaWVsZERlZiA9IG1vZGVsLmZpZWxkRGVmKGNoYW5uZWwpO1xuICAgICAgaWYgKGZpZWxkRGVmKSB7XG4gICAgICAgIGlmIChmaWVsZERlZi50aW1lVW5pdCkge1xuICAgICAgICAgIGNvbnN0IHR1RmllbGQgPSBtb2RlbC52Z0ZpZWxkKGNoYW5uZWwpO1xuICAgICAgICAgIGNoYW5uZWxzW3R1RmllbGRdID0gY2hhbm5lbDtcblxuICAgICAgICAgIC8vIENvbnN0cnVjdCBUaW1lVW5pdENvbXBvbmVudHMgd2hpY2ggd2lsbCBiZSBjb21iaW5lZCBpbnRvIGFcbiAgICAgICAgICAvLyBUaW1lVW5pdE5vZGUuIFRoaXMgbm9kZSBtYXkgbmVlZCB0byBiZSBpbnNlcnRlZCBpbnRvIHRoZVxuICAgICAgICAgIC8vIGRhdGFmbG93IGlmIHRoZSBzZWxlY3Rpb24gaXMgdXNlZCBhY3Jvc3Mgdmlld3MgdGhhdCBkbyBub3RcbiAgICAgICAgICAvLyBoYXZlIHRoZXNlIHRpbWUgdW5pdHMgZGVmaW5lZC5cbiAgICAgICAgICB0aW1lVW5pdHNbdHVGaWVsZF0gPSB7XG4gICAgICAgICAgICBhczogdHVGaWVsZCxcbiAgICAgICAgICAgIGZpZWxkOiBmaWVsZERlZi5maWVsZCxcbiAgICAgICAgICAgIHRpbWVVbml0OiBmaWVsZERlZi50aW1lVW5pdFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbm5lbHNbZmllbGREZWYuZmllbGRdID0gY2hhbm5lbDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuY2Fubm90UHJvamVjdE9uQ2hhbm5lbFdpdGhvdXRGaWVsZChjaGFubmVsKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBwcm9qZWN0aW9uID0gc2VsQ21wdC5wcm9qZWN0IHx8IChzZWxDbXB0LnByb2plY3QgPSBbXSk7XG4gICAgZm9yIChjb25zdCBmaWVsZCBpbiBjaGFubmVscykge1xuICAgICAgaWYgKGNoYW5uZWxzLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuICAgICAgICBwcm9qZWN0aW9uLnB1c2goe2ZpZWxkOiBmaWVsZCwgY2hhbm5lbDogY2hhbm5lbHNbZmllbGRdfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZmllbGRzID0gc2VsQ21wdC5maWVsZHMgfHwgKHNlbENtcHQuZmllbGRzID0ge30pO1xuICAgIHByb2plY3Rpb24uZmlsdGVyKChwKSA9PiBwLmNoYW5uZWwpLmZvckVhY2goKHApID0+IGZpZWxkc1twLmNoYW5uZWxdID0gcC5maWVsZCk7XG5cbiAgICBpZiAoa2V5cyh0aW1lVW5pdHMpLmxlbmd0aCkge1xuICAgICAgc2VsQ21wdC50aW1lVW5pdCA9IG5ldyBUaW1lVW5pdE5vZGUobnVsbCwgdGltZVVuaXRzKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3Q7XG4iXX0=","import { TUPLE, unitName } from '../selection';\nvar TOGGLE = '_toggle';\nvar toggle = {\n    has: function (selCmpt) {\n        return selCmpt.type === 'multi' && selCmpt.toggle;\n    },\n    signals: function (model, selCmpt, signals) {\n        return signals.concat({\n            name: selCmpt.name + TOGGLE,\n            value: false,\n            on: [{ events: selCmpt.events, update: selCmpt.toggle }]\n        });\n    },\n    modifyExpr: function (model, selCmpt, expr) {\n        var tpl = selCmpt.name + TUPLE;\n        var signal = selCmpt.name + TOGGLE;\n        return signal + \" ? null : \" + tpl + \", \" +\n            (selCmpt.resolve === 'global' ?\n                signal + \" ? null : true, \" :\n                signal + \" ? null : {unit: \" + unitName(model) + \"}, \") +\n            (signal + \" ? \" + tpl + \" : null\");\n    }\n};\nexport default toggle;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3RyYW5zZm9ybXMvdG9nZ2xlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBSTdDLElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQztBQUV6QixJQUFNLE1BQU0sR0FBcUI7SUFDL0IsR0FBRyxFQUFFLFVBQVMsT0FBTztRQUNuQixPQUFPLE9BQU8sQ0FBQyxJQUFJLEtBQUssT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDcEQsQ0FBQztJQUVELE9BQU8sRUFBRSxVQUFTLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTztRQUN2QyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDcEIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEdBQUcsTUFBTTtZQUMzQixLQUFLLEVBQUUsS0FBSztZQUNaLEVBQUUsRUFBRSxDQUFDLEVBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUMsQ0FBQztTQUN2RCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsVUFBVSxFQUFFLFVBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJO1FBQ3ZDLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2pDLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO1FBRXJDLE9BQVUsTUFBTSxrQkFBYSxHQUFHLE9BQUk7WUFDbEMsQ0FBQyxPQUFPLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDO2dCQUMxQixNQUFNLHFCQUFrQixDQUFDLENBQUM7Z0JBQzFCLE1BQU0seUJBQW9CLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBSyxDQUFDO2FBQ2pELE1BQU0sV0FBTSxHQUFHLFlBQVMsQ0FBQSxDQUFDO0lBQ2hDLENBQUM7Q0FDRixDQUFDO0FBRUYsZUFBZSxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7VFVQTEUsIHVuaXROYW1lfSBmcm9tICcuLi9zZWxlY3Rpb24nO1xuaW1wb3J0IHtUcmFuc2Zvcm1Db21waWxlcn0gZnJvbSAnLi90cmFuc2Zvcm1zJztcblxuXG5jb25zdCBUT0dHTEUgPSAnX3RvZ2dsZSc7XG5cbmNvbnN0IHRvZ2dsZTpUcmFuc2Zvcm1Db21waWxlciA9IHtcbiAgaGFzOiBmdW5jdGlvbihzZWxDbXB0KSB7XG4gICAgcmV0dXJuIHNlbENtcHQudHlwZSA9PT0gJ211bHRpJyAmJiBzZWxDbXB0LnRvZ2dsZTtcbiAgfSxcblxuICBzaWduYWxzOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgc2lnbmFscykge1xuICAgIHJldHVybiBzaWduYWxzLmNvbmNhdCh7XG4gICAgICBuYW1lOiBzZWxDbXB0Lm5hbWUgKyBUT0dHTEUsXG4gICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICBvbjogW3tldmVudHM6IHNlbENtcHQuZXZlbnRzLCB1cGRhdGU6IHNlbENtcHQudG9nZ2xlfV1cbiAgICB9KTtcbiAgfSxcblxuICBtb2RpZnlFeHByOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgZXhwcikge1xuICAgIGNvbnN0IHRwbCA9IHNlbENtcHQubmFtZSArIFRVUExFO1xuICAgIGNvbnN0IHNpZ25hbCA9IHNlbENtcHQubmFtZSArIFRPR0dMRTtcblxuICAgIHJldHVybiBgJHtzaWduYWx9ID8gbnVsbCA6ICR7dHBsfSwgYCArXG4gICAgICAoc2VsQ21wdC5yZXNvbHZlID09PSAnZ2xvYmFsJyA/XG4gICAgICAgIGAke3NpZ25hbH0gPyBudWxsIDogdHJ1ZSwgYCA6XG4gICAgICAgIGAke3NpZ25hbH0gPyBudWxsIDoge3VuaXQ6ICR7dW5pdE5hbWUobW9kZWwpfX0sIGApICtcbiAgICAgIGAke3NpZ25hbH0gPyAke3RwbH0gOiBudWxsYDtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdG9nZ2xlO1xuIl19","import { stringValue } from 'vega-util';\nimport { accessPathWithDatum, varName } from '../../../util';\nimport { TUPLE } from '../selection';\nimport nearest from './nearest';\nvar inputBindings = {\n    has: function (selCmpt) {\n        return selCmpt.type === 'single' && selCmpt.resolve === 'global' &&\n            selCmpt.bind && selCmpt.bind !== 'scales';\n    },\n    topLevelSignals: function (model, selCmpt, signals) {\n        var name = selCmpt.name;\n        var proj = selCmpt.project;\n        var bind = selCmpt.bind;\n        var datum = nearest.has(selCmpt) ?\n            '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n        proj.forEach(function (p) {\n            var sgname = varName(name + \"_\" + p.field);\n            var hasSignal = signals.filter(function (s) { return s.name === sgname; });\n            if (!hasSignal.length) {\n                signals.unshift({\n                    name: sgname,\n                    value: '',\n                    on: [{\n                            events: selCmpt.events,\n                            update: \"datum && item().mark.marktype !== 'group' ? \" + accessPathWithDatum(p.field, datum) + \" : null\"\n                        }],\n                    bind: bind[p.field] || bind[p.channel] || bind\n                });\n            }\n        });\n        return signals;\n    },\n    signals: function (model, selCmpt, signals) {\n        var name = selCmpt.name;\n        var proj = selCmpt.project;\n        var signal = signals.filter(function (s) { return s.name === name + TUPLE; })[0];\n        var fields = proj.map(function (p) { return stringValue(p.field); }).join(', ');\n        var values = proj.map(function (p) { return varName(name + \"_\" + p.field); });\n        if (values.length) {\n            signal.update = values.join(' && ') + \" ? {fields: [\" + fields + \"], values: [\" + values.join(', ') + \"]} : null\";\n        }\n        delete signal.value;\n        delete signal.on;\n        return signals;\n    }\n};\nexport default inputBindings;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3RyYW5zZm9ybXMvaW5wdXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFDLG1CQUFtQixFQUFFLE9BQU8sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ25DLE9BQU8sT0FBTyxNQUFNLFdBQVcsQ0FBQztBQUloQyxJQUFNLGFBQWEsR0FBcUI7SUFDdEMsR0FBRyxFQUFFLFVBQVMsT0FBTztRQUNuQixPQUFPLE9BQU8sQ0FBQyxJQUFJLEtBQUssUUFBUSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEtBQUssUUFBUTtZQUM5RCxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO0lBQzlDLENBQUM7SUFFRCxlQUFlLEVBQUUsVUFBUyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU87UUFDL0MsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUMxQixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQzdCLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDMUIsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFFdkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFTLENBQUM7WUFDckIsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFJLElBQUksU0FBSSxDQUFDLENBQUMsS0FBTyxDQUFDLENBQUM7WUFDN0MsSUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFqQixDQUFpQixDQUFDLENBQUM7WUFDM0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3JCLE9BQU8sQ0FBQyxPQUFPLENBQUM7b0JBQ2QsSUFBSSxFQUFFLE1BQU07b0JBQ1osS0FBSyxFQUFFLEVBQUU7b0JBQ1QsRUFBRSxFQUFFLENBQUM7NEJBQ0gsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNOzRCQUN0QixNQUFNLEVBQUUsaURBQStDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLFlBQVM7eUJBQ3BHLENBQUM7b0JBQ0YsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJO2lCQUMvQyxDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVELE9BQU8sRUFBRSxVQUFTLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTztRQUN2QyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzFCLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxHQUFHLEtBQUssRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFwQixDQUFvQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hFLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxPQUFPLENBQUksSUFBSSxTQUFJLENBQUMsQ0FBQyxLQUFPLENBQUMsRUFBN0IsQ0FBNkIsQ0FBQyxDQUFDO1FBRTlELElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNqQixNQUFNLENBQUMsTUFBTSxHQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFnQixNQUFNLG9CQUFlLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQVcsQ0FBQztTQUN6RztRQUVELE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNwQixPQUFPLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFFakIsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztDQUNGLENBQUM7QUFFRixlQUFlLGFBQWEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7c3RyaW5nVmFsdWV9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5pbXBvcnQge2FjY2Vzc1BhdGhXaXRoRGF0dW0sIHZhck5hbWV9IGZyb20gJy4uLy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtUVVBMRX0gZnJvbSAnLi4vc2VsZWN0aW9uJztcbmltcG9ydCBuZWFyZXN0IGZyb20gJy4vbmVhcmVzdCc7XG5pbXBvcnQge1RyYW5zZm9ybUNvbXBpbGVyfSBmcm9tICcuL3RyYW5zZm9ybXMnO1xuXG5cbmNvbnN0IGlucHV0QmluZGluZ3M6VHJhbnNmb3JtQ29tcGlsZXIgPSB7XG4gIGhhczogZnVuY3Rpb24oc2VsQ21wdCkge1xuICAgIHJldHVybiBzZWxDbXB0LnR5cGUgPT09ICdzaW5nbGUnICYmIHNlbENtcHQucmVzb2x2ZSA9PT0gJ2dsb2JhbCcgJiZcbiAgICAgIHNlbENtcHQuYmluZCAmJiBzZWxDbXB0LmJpbmQgIT09ICdzY2FsZXMnO1xuICB9LFxuXG4gIHRvcExldmVsU2lnbmFsczogZnVuY3Rpb24obW9kZWwsIHNlbENtcHQsIHNpZ25hbHMpIHtcbiAgICBjb25zdCBuYW1lID0gc2VsQ21wdC5uYW1lO1xuICAgIGNvbnN0IHByb2ogPSBzZWxDbXB0LnByb2plY3Q7XG4gICAgY29uc3QgYmluZCA9IHNlbENtcHQuYmluZDtcbiAgICBjb25zdCBkYXR1bSA9IG5lYXJlc3QuaGFzKHNlbENtcHQpID9cbiAgICAgICcoaXRlbSgpLmlzVm9yb25vaSA/IGRhdHVtLmRhdHVtIDogZGF0dW0pJyA6ICdkYXR1bSc7XG5cbiAgICBwcm9qLmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgY29uc3Qgc2duYW1lID0gdmFyTmFtZShgJHtuYW1lfV8ke3AuZmllbGR9YCk7XG4gICAgICBjb25zdCBoYXNTaWduYWwgPSBzaWduYWxzLmZpbHRlcigocykgPT4gcy5uYW1lID09PSBzZ25hbWUpO1xuICAgICAgaWYgKCFoYXNTaWduYWwubGVuZ3RoKSB7XG4gICAgICAgIHNpZ25hbHMudW5zaGlmdCh7XG4gICAgICAgICAgbmFtZTogc2duYW1lLFxuICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICBvbjogW3tcbiAgICAgICAgICAgIGV2ZW50czogc2VsQ21wdC5ldmVudHMsXG4gICAgICAgICAgICB1cGRhdGU6IGBkYXR1bSAmJiBpdGVtKCkubWFyay5tYXJrdHlwZSAhPT0gJ2dyb3VwJyA/ICR7YWNjZXNzUGF0aFdpdGhEYXR1bShwLmZpZWxkLCBkYXR1bSl9IDogbnVsbGBcbiAgICAgICAgICB9XSxcbiAgICAgICAgICBiaW5kOiBiaW5kW3AuZmllbGRdIHx8IGJpbmRbcC5jaGFubmVsXSB8fCBiaW5kXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNpZ25hbHM7XG4gIH0sXG5cbiAgc2lnbmFsczogZnVuY3Rpb24obW9kZWwsIHNlbENtcHQsIHNpZ25hbHMpIHtcbiAgICBjb25zdCBuYW1lID0gc2VsQ21wdC5uYW1lO1xuICAgIGNvbnN0IHByb2ogPSBzZWxDbXB0LnByb2plY3Q7XG4gICAgY29uc3Qgc2lnbmFsID0gc2lnbmFscy5maWx0ZXIoKHMpID0+IHMubmFtZSA9PT0gbmFtZSArIFRVUExFKVswXTtcbiAgICBjb25zdCBmaWVsZHMgPSBwcm9qLm1hcCgocCkgPT4gc3RyaW5nVmFsdWUocC5maWVsZCkpLmpvaW4oJywgJyk7XG4gICAgY29uc3QgdmFsdWVzID0gcHJvai5tYXAoKHApID0+IHZhck5hbWUoYCR7bmFtZX1fJHtwLmZpZWxkfWApKTtcblxuICAgIGlmICh2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICBzaWduYWwudXBkYXRlID0gYCR7dmFsdWVzLmpvaW4oJyAmJiAnKX0gPyB7ZmllbGRzOiBbJHtmaWVsZHN9XSwgdmFsdWVzOiBbJHt2YWx1ZXMuam9pbignLCAnKX1dfSA6IG51bGxgO1xuICAgIH1cblxuICAgIGRlbGV0ZSBzaWduYWwudmFsdWU7XG4gICAgZGVsZXRlIHNpZ25hbC5vbjtcblxuICAgIHJldHVybiBzaWduYWxzO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbnB1dEJpbmRpbmdzO1xuIl19","import * as tslib_1 from \"tslib\";\nimport { isArray, isString } from 'vega-util';\nimport { selectionPredicate } from './compile/selection/selection';\nimport { dateTimeExpr, isDateTime } from './datetime';\nimport { vgField } from './fielddef';\nimport { fieldExpr as timeUnitFieldExpr, getLocalTimeUnit, isLocalSingleTimeUnit, isUtcSingleTimeUnit, normalizeTimeUnit } from './timeunit';\nimport { logicalExpr } from './util';\nexport function isSelectionPredicate(predicate) {\n    return predicate && predicate['selection'];\n}\nexport function isFieldEqualPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.equal !== undefined;\n}\nexport function isFieldRangePredicate(predicate) {\n    if (predicate && predicate.field) {\n        if (isArray(predicate.range) && predicate.range.length === 2) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function isFieldOneOfPredicate(predicate) {\n    return predicate && !!predicate.field && (isArray(predicate.oneOf) ||\n        isArray(predicate.in) // backward compatibility\n    );\n}\nexport function isFieldPredicate(predicate) {\n    return isFieldOneOfPredicate(predicate) || isFieldEqualPredicate(predicate) || isFieldRangePredicate(predicate);\n}\n/**\n * Converts a predicate into an expression.\n */\n// model is only used for selection filters.\nexport function expression(model, filterOp, node) {\n    return logicalExpr(filterOp, function (predicate) {\n        if (isString(predicate)) {\n            return predicate;\n        }\n        else if (isSelectionPredicate(predicate)) {\n            return selectionPredicate(model, predicate.selection, node);\n        }\n        else { // Filter Object\n            return fieldFilterExpression(predicate);\n        }\n    });\n}\n// This method is used by Voyager.  Do not change its behavior without changing Voyager.\nexport function fieldFilterExpression(predicate, useInRange) {\n    if (useInRange === void 0) { useInRange = true; }\n    var fieldExpr = predicate.timeUnit ?\n        // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.\n        // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline\n        // TODO: support utc\n        ('time(' + timeUnitFieldExpr(predicate.timeUnit, predicate.field) + ')') :\n        vgField(predicate, { expr: 'datum' });\n    if (isFieldEqualPredicate(predicate)) {\n        return fieldExpr + '===' + valueExpr(predicate.equal, predicate.timeUnit);\n    }\n    else if (isFieldOneOfPredicate(predicate)) {\n        // \"oneOf\" was formerly \"in\" -- so we need to add backward compatibility\n        var oneOf = predicate.oneOf || predicate['in'];\n        return 'indexof([' +\n            oneOf.map(function (v) { return valueExpr(v, predicate.timeUnit); }).join(',') +\n            '], ' + fieldExpr + ') !== -1';\n    }\n    else if (isFieldRangePredicate(predicate)) {\n        var lower = predicate.range[0];\n        var upper = predicate.range[1];\n        if (lower !== null && upper !== null && useInRange) {\n            return 'inrange(' + fieldExpr + ', [' +\n                valueExpr(lower, predicate.timeUnit) + ', ' +\n                valueExpr(upper, predicate.timeUnit) + '])';\n        }\n        var exprs = [];\n        if (lower !== null) {\n            exprs.push(fieldExpr + \" >= \" + valueExpr(lower, predicate.timeUnit));\n        }\n        if (upper !== null) {\n            exprs.push(fieldExpr + \" <= \" + valueExpr(upper, predicate.timeUnit));\n        }\n        return exprs.length > 0 ? exprs.join(' && ') : 'true';\n    }\n    /* istanbul ignore next: it should never reach here */\n    throw new Error(\"Invalid field predicate: \" + JSON.stringify(predicate));\n}\nfunction valueExpr(v, timeUnit) {\n    if (isDateTime(v)) {\n        var expr = dateTimeExpr(v, true);\n        return 'time(' + expr + ')';\n    }\n    if (isLocalSingleTimeUnit(timeUnit)) {\n        var datetime = {};\n        datetime[timeUnit] = v;\n        var expr = dateTimeExpr(datetime, true);\n        return 'time(' + expr + ')';\n    }\n    else if (isUtcSingleTimeUnit(timeUnit)) {\n        return valueExpr(v, getLocalTimeUnit(timeUnit));\n    }\n    return JSON.stringify(v);\n}\nexport function normalizePredicate(f) {\n    if (isFieldPredicate(f) && f.timeUnit) {\n        return tslib_1.__assign({}, f, { timeUnit: normalizeTimeUnit(f.timeUnit) });\n    }\n    return f;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { binToString } from '../../bin';\nimport { normalizeBin, vgField } from '../../fielddef';\nimport { duplicate, flatten, keys, vals } from '../../util';\nimport { binFormatExpression, binRequiresRange } from '../common';\nimport { isUnitModel } from '../model';\nimport { DataFlowNode } from './dataflow';\nfunction rangeFormula(model, fieldDef, channel, config) {\n    if (binRequiresRange(fieldDef, channel)) {\n        // read format from axis or legend, if there is no format then use config.numberFormat\n        var guide = isUnitModel(model) ? (model.axis(channel) || model.legend(channel) || {}) : {};\n        var startField = vgField(fieldDef, { expr: 'datum', });\n        var endField = vgField(fieldDef, { expr: 'datum', binSuffix: 'end' });\n        return {\n            formulaAs: vgField(fieldDef, { binSuffix: 'range' }),\n            formula: binFormatExpression(startField, endField, guide.format, config)\n        };\n    }\n    return {};\n}\nfunction binKey(bin, field) {\n    return binToString(bin) + \"_\" + field;\n}\nfunction getSignalsFromModel(model, key) {\n    return {\n        signal: model.getName(key + \"_bins\"),\n        extentSignal: model.getName(key + \"_extent\")\n    };\n}\nfunction isBinTransform(t) {\n    return 'as' in t;\n}\nfunction createBinComponent(t, model) {\n    var as;\n    if (isBinTransform(t)) {\n        as = [t.as, t.as + \"_end\"];\n    }\n    else {\n        as = [vgField(t, {}), vgField(t, { binSuffix: 'end' })];\n    }\n    var bin = normalizeBin(t.bin, undefined) || {};\n    var key = binKey(bin, t.field);\n    var _a = getSignalsFromModel(model, key), signal = _a.signal, extentSignal = _a.extentSignal;\n    var binComponent = tslib_1.__assign({ bin: bin, field: t.field, as: as }, signal ? { signal: signal } : {}, extentSignal ? { extentSignal: extentSignal } : {});\n    return { key: key, binComponent: binComponent };\n}\nvar BinNode = /** @class */ (function (_super) {\n    tslib_1.__extends(BinNode, _super);\n    function BinNode(parent, bins) {\n        var _this = _super.call(this, parent) || this;\n        _this.bins = bins;\n        return _this;\n    }\n    BinNode.prototype.clone = function () {\n        return new BinNode(null, duplicate(this.bins));\n    };\n    BinNode.makeFromEncoding = function (parent, model) {\n        var bins = model.reduceFieldDef(function (binComponentIndex, fieldDef, channel) {\n            if (fieldDef.bin) {\n                var _a = createBinComponent(fieldDef, model), key = _a.key, binComponent = _a.binComponent;\n                binComponentIndex[key] = tslib_1.__assign({}, binComponent, binComponentIndex[key], rangeFormula(model, fieldDef, channel, model.config));\n            }\n            return binComponentIndex;\n        }, {});\n        if (keys(bins).length === 0) {\n            return null;\n        }\n        return new BinNode(parent, bins);\n    };\n    /**\n     * Creates a bin node from BinTransform.\n     * The optional parameter should provide\n     */\n    BinNode.makeFromTransform = function (parent, t, model) {\n        var _a = createBinComponent(t, model), key = _a.key, binComponent = _a.binComponent;\n        return new BinNode(parent, (_b = {},\n            _b[key] = binComponent,\n            _b));\n        var _b;\n    };\n    BinNode.prototype.merge = function (other) {\n        this.bins = tslib_1.__assign({}, this.bins, other.bins);\n        other.remove();\n    };\n    BinNode.prototype.producedFields = function () {\n        var out = {};\n        vals(this.bins).forEach(function (c) {\n            c.as.forEach(function (f) { return out[f] = true; });\n        });\n        return out;\n    };\n    BinNode.prototype.dependentFields = function () {\n        var out = {};\n        vals(this.bins).forEach(function (c) {\n            out[c.field] = true;\n        });\n        return out;\n    };\n    BinNode.prototype.assemble = function () {\n        return flatten(vals(this.bins).map(function (bin) {\n            var transform = [];\n            var binTrans = tslib_1.__assign({ type: 'bin', field: bin.field, as: bin.as, signal: bin.signal }, bin.bin);\n            if (!bin.bin.extent && bin.extentSignal) {\n                transform.push({\n                    type: 'extent',\n                    field: bin.field,\n                    signal: bin.extentSignal\n                });\n                binTrans.extent = { signal: bin.extentSignal };\n            }\n            transform.push(binTrans);\n            if (bin.formula) {\n                transform.push({\n                    type: 'formula',\n                    expr: bin.formula,\n                    as: bin.formulaAs\n                });\n            }\n            return transform;\n        }));\n    };\n    return BinNode;\n}(DataFlowNode));\nexport { BinNode };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { expression } from '../../predicate';\nimport { duplicate } from '../../util';\nimport { DataFlowNode } from './dataflow';\nvar FilterNode = /** @class */ (function (_super) {\n    tslib_1.__extends(FilterNode, _super);\n    function FilterNode(parent, model, filter) {\n        var _this = _super.call(this, parent) || this;\n        _this.model = model;\n        _this.filter = filter;\n        _this.expr = expression(_this.model, _this.filter, _this);\n        return _this;\n    }\n    FilterNode.prototype.clone = function () {\n        return new FilterNode(null, this.model, duplicate(this.filter));\n    };\n    FilterNode.prototype.assemble = function () {\n        return {\n            type: 'filter',\n            expr: this.expr\n        };\n    };\n    return FilterNode;\n}(DataFlowNode));\nexport { FilterNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS9maWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBQyxVQUFVLEVBQVksTUFBTSxpQkFBaUIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBR3JDLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFeEM7SUFBZ0Msc0NBQVk7SUFNMUMsb0JBQVksTUFBb0IsRUFBbUIsS0FBWSxFQUFVLE1BQWlDO1FBQTFHLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBRWQ7UUFIa0QsV0FBSyxHQUFMLEtBQUssQ0FBTztRQUFVLFlBQU0sR0FBTixNQUFNLENBQTJCO1FBRXhHLEtBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLEtBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSSxDQUFDLE1BQU0sRUFBRSxLQUFJLENBQUMsQ0FBQzs7SUFDeEQsQ0FBQztJQVBNLDBCQUFLLEdBQVo7UUFDRSxPQUFPLElBQUksVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBT00sNkJBQVEsR0FBZjtRQUNFLE9BQU87WUFDTCxJQUFJLEVBQUUsUUFBUTtZQUNkLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtTQUNoQixDQUFDO0lBQ0osQ0FBQztJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQWpCRCxDQUFnQyxZQUFZLEdBaUIzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TG9naWNhbE9wZXJhbmR9IGZyb20gJy4uLy4uL2xvZ2ljYWwnO1xuaW1wb3J0IHtleHByZXNzaW9uLCBQcmVkaWNhdGV9IGZyb20gJy4uLy4uL3ByZWRpY2F0ZSc7XG5pbXBvcnQge2R1cGxpY2F0ZX0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnRmlsdGVyVHJhbnNmb3JtfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge01vZGVsfSBmcm9tICcuLi9tb2RlbCc7XG5pbXBvcnQge0RhdGFGbG93Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5cbmV4cG9ydCBjbGFzcyBGaWx0ZXJOb2RlIGV4dGVuZHMgRGF0YUZsb3dOb2RlIHtcbiAgcHJpdmF0ZSBleHByOiBzdHJpbmc7XG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IEZpbHRlck5vZGUobnVsbCwgdGhpcy5tb2RlbCwgZHVwbGljYXRlKHRoaXMuZmlsdGVyKSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IERhdGFGbG93Tm9kZSwgcHJpdmF0ZSByZWFkb25seSBtb2RlbDogTW9kZWwsIHByaXZhdGUgZmlsdGVyOiBMb2dpY2FsT3BlcmFuZDxQcmVkaWNhdGU+KSB7XG4gICAgc3VwZXIocGFyZW50KTtcbiAgICB0aGlzLmV4cHIgPSBleHByZXNzaW9uKHRoaXMubW9kZWwsIHRoaXMuZmlsdGVyLCB0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZSgpOiBWZ0ZpbHRlclRyYW5zZm9ybSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdmaWx0ZXInLFxuICAgICAgZXhwcjogdGhpcy5leHByXG4gICAgfTtcbiAgfVxufVxuIl19","import * as tslib_1 from \"tslib\";\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { GEOJSON } from '../../type';\nimport { duplicate } from '../../util';\nimport { DataFlowNode } from './dataflow';\nvar GeoJSONNode = /** @class */ (function (_super) {\n    tslib_1.__extends(GeoJSONNode, _super);\n    function GeoJSONNode(parent, fields, geojson, signal) {\n        var _this = _super.call(this, parent) || this;\n        _this.fields = fields;\n        _this.geojson = geojson;\n        _this.signal = signal;\n        return _this;\n    }\n    GeoJSONNode.prototype.clone = function () {\n        return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);\n    };\n    GeoJSONNode.parseAll = function (parent, model) {\n        var geoJsonCounter = 0;\n        [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach(function (coordinates) {\n            var pair = coordinates.map(function (channel) { return model.channelHasField(channel) ? model.fieldDef(channel).field : undefined; });\n            if (pair[0] || pair[1]) {\n                parent = new GeoJSONNode(parent, pair, null, model.getName(\"geojson_\" + geoJsonCounter++));\n            }\n        });\n        if (model.channelHasField(SHAPE)) {\n            var fieldDef = model.fieldDef(SHAPE);\n            if (fieldDef.type === GEOJSON) {\n                parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(\"geojson_\" + geoJsonCounter++));\n            }\n        }\n        return parent;\n    };\n    GeoJSONNode.prototype.assemble = function () {\n        return tslib_1.__assign({ type: 'geojson' }, (this.fields ? { fields: this.fields } : {}), (this.geojson ? { geojson: this.geojson } : {}), { signal: this.signal });\n    };\n    return GeoJSONNode;\n}(DataFlowNode));\nexport { GeoJSONNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvanNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL2RhdGEvZ2VvanNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFxQixRQUFRLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3BHLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDbkMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUdyQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRXhDO0lBQWlDLHVDQUFZO0lBNEIzQyxxQkFBWSxNQUFvQixFQUFVLE1BQWlCLEVBQVUsT0FBZ0IsRUFBVSxNQUFlO1FBQTlHLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBQ2Q7UUFGeUMsWUFBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLGFBQU8sR0FBUCxPQUFPLENBQVM7UUFBVSxZQUFNLEdBQU4sTUFBTSxDQUFTOztJQUU5RyxDQUFDO0lBN0JNLDJCQUFLLEdBQVo7UUFDRSxPQUFPLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFYSxvQkFBUSxHQUF0QixVQUF1QixNQUFvQixFQUFFLEtBQWdCO1FBQzNELElBQUksY0FBYyxHQUFHLENBQUMsQ0FBQztRQUV2QixDQUFDLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsV0FBaUM7WUFDekYsSUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FDMUIsVUFBQSxPQUFPLElBQUksT0FBQSxLQUFLLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUExRSxDQUEwRSxDQUN0RixDQUFDO1lBRUYsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN0QixNQUFNLEdBQUcsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFXLGNBQWMsRUFBSSxDQUFDLENBQUMsQ0FBQzthQUM1RjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2hDLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkMsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtnQkFDN0IsTUFBTSxHQUFHLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQVcsY0FBYyxFQUFJLENBQUMsQ0FBQyxDQUFDO2FBQ3RHO1NBQ0Y7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBTU0sOEJBQVEsR0FBZjtRQUNFLDBCQUNFLElBQUksRUFBRSxTQUFTLElBQ1osQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUMxQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQ2hELE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxJQUNuQjtJQUNKLENBQUM7SUFDSCxrQkFBQztBQUFELENBQUMsQUF4Q0QsQ0FBaUMsWUFBWSxHQXdDNUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0dlb1Bvc2l0aW9uQ2hhbm5lbCwgTEFUSVRVREUsIExBVElUVURFMiwgTE9OR0lUVURFLCBMT05HSVRVREUyLCBTSEFQRX0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge0dFT0pTT059IGZyb20gJy4uLy4uL3R5cGUnO1xuaW1wb3J0IHtkdXBsaWNhdGV9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0dlb0pTT05UcmFuc2Zvcm19IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7VW5pdE1vZGVsfSBmcm9tICcuLi91bml0JztcbmltcG9ydCB7RGF0YUZsb3dOb2RlfSBmcm9tICcuL2RhdGFmbG93JztcblxuZXhwb3J0IGNsYXNzIEdlb0pTT05Ob2RlIGV4dGVuZHMgRGF0YUZsb3dOb2RlIHtcbiAgcHVibGljIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgR2VvSlNPTk5vZGUobnVsbCwgZHVwbGljYXRlKHRoaXMuZmllbGRzKSwgdGhpcy5nZW9qc29uLCB0aGlzLnNpZ25hbCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHBhcnNlQWxsKHBhcmVudDogRGF0YUZsb3dOb2RlLCBtb2RlbDogVW5pdE1vZGVsKTogRGF0YUZsb3dOb2RlIHtcbiAgICBsZXQgZ2VvSnNvbkNvdW50ZXIgPSAwO1xuXG4gICAgW1tMT05HSVRVREUsIExBVElUVURFXSwgW0xPTkdJVFVERTIsIExBVElUVURFMl1dLmZvckVhY2goKGNvb3JkaW5hdGVzOiBHZW9Qb3NpdGlvbkNoYW5uZWxbXSkgPT4ge1xuICAgICAgY29uc3QgcGFpciA9IGNvb3JkaW5hdGVzLm1hcChcbiAgICAgICAgY2hhbm5lbCA9PiBtb2RlbC5jaGFubmVsSGFzRmllbGQoY2hhbm5lbCkgPyBtb2RlbC5maWVsZERlZihjaGFubmVsKS5maWVsZCA6IHVuZGVmaW5lZFxuICAgICAgKTtcblxuICAgICAgaWYgKHBhaXJbMF0gfHwgcGFpclsxXSkge1xuICAgICAgICBwYXJlbnQgPSBuZXcgR2VvSlNPTk5vZGUocGFyZW50LCBwYWlyLCBudWxsLCBtb2RlbC5nZXROYW1lKGBnZW9qc29uXyR7Z2VvSnNvbkNvdW50ZXIrK31gKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAobW9kZWwuY2hhbm5lbEhhc0ZpZWxkKFNIQVBFKSkge1xuICAgICAgY29uc3QgZmllbGREZWYgPSBtb2RlbC5maWVsZERlZihTSEFQRSk7XG4gICAgICBpZiAoZmllbGREZWYudHlwZSA9PT0gR0VPSlNPTikge1xuICAgICAgICBwYXJlbnQgPSBuZXcgR2VvSlNPTk5vZGUocGFyZW50LCBudWxsLCBmaWVsZERlZi5maWVsZCwgbW9kZWwuZ2V0TmFtZShgZ2VvanNvbl8ke2dlb0pzb25Db3VudGVyKyt9YCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwYXJlbnQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IERhdGFGbG93Tm9kZSwgcHJpdmF0ZSBmaWVsZHM/OiBzdHJpbmdbXSwgcHJpdmF0ZSBnZW9qc29uPzogc3RyaW5nLCBwcml2YXRlIHNpZ25hbD86IHN0cmluZykge1xuICAgIHN1cGVyKHBhcmVudCk7XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGUoKTogVmdHZW9KU09OVHJhbnNmb3JtIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2dlb2pzb24nLFxuICAgICAgLi4uKHRoaXMuZmllbGRzID8ge2ZpZWxkczogdGhpcy5maWVsZHN9IDoge30pLFxuICAgICAgLi4uKHRoaXMuZ2VvanNvbiA/IHtnZW9qc29uOiB0aGlzLmdlb2pzb259IDoge30pLFxuICAgICAgc2lnbmFsOiB0aGlzLnNpZ25hbFxuICAgIH07XG4gIH1cbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2 } from '../../channel';\nimport { duplicate } from '../../util';\nimport { DataFlowNode } from './dataflow';\nvar GeoPointNode = /** @class */ (function (_super) {\n    tslib_1.__extends(GeoPointNode, _super);\n    function GeoPointNode(parent, projection, fields, as) {\n        var _this = _super.call(this, parent) || this;\n        _this.projection = projection;\n        _this.fields = fields;\n        _this.as = as;\n        return _this;\n    }\n    GeoPointNode.prototype.clone = function () {\n        return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));\n    };\n    GeoPointNode.parseAll = function (parent, model) {\n        if (!model.projectionName()) {\n            return parent;\n        }\n        [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach(function (coordinates) {\n            var pair = coordinates.map(function (channel) { return model.channelHasField(channel) ? model.fieldDef(channel).field : undefined; });\n            var suffix = coordinates[0] === LONGITUDE2 ? '2' : '';\n            if (pair[0] || pair[1]) {\n                parent = new GeoPointNode(parent, model.projectionName(), pair, [model.getName('x' + suffix), model.getName('y' + suffix)]);\n            }\n        });\n        return parent;\n    };\n    GeoPointNode.prototype.assemble = function () {\n        return {\n            type: 'geopoint',\n            projection: this.projection,\n            fields: this.fields,\n            as: this.as\n        };\n    };\n    return GeoPointNode;\n}(DataFlowNode));\nexport { GeoPointNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvcG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL2dlb3BvaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQXFCLFFBQVEsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM3RixPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBR3JDLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFHeEM7SUFBa0Msd0NBQVk7SUFLNUMsc0JBQVksTUFBb0IsRUFBVSxVQUFrQixFQUFVLE1BQWdCLEVBQVUsRUFBWTtRQUE1RyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQUNkO1FBRnlDLGdCQUFVLEdBQVYsVUFBVSxDQUFRO1FBQVUsWUFBTSxHQUFOLE1BQU0sQ0FBVTtRQUFVLFFBQUUsR0FBRixFQUFFLENBQVU7O0lBRTVHLENBQUM7SUFOTSw0QkFBSyxHQUFaO1FBQ0UsT0FBTyxJQUFJLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3RixDQUFDO0lBTWEscUJBQVEsR0FBdEIsVUFBdUIsTUFBb0IsRUFBRSxLQUFnQjtRQUMzRCxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxFQUFFO1lBQzNCLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFFRCxDQUFDLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsV0FBaUM7WUFDekYsSUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FDMUIsVUFBQSxPQUFPLElBQUksT0FBQSxLQUFLLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUExRSxDQUEwRSxDQUN0RixDQUFDO1lBRUYsSUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFFeEQsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN0QixNQUFNLEdBQUcsSUFBSSxZQUFZLENBQ3ZCLE1BQU0sRUFDTixLQUFLLENBQUMsY0FBYyxFQUFFLEVBQ3RCLElBQUksRUFDSixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQzNELENBQUM7YUFDSDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVNLCtCQUFRLEdBQWY7UUFDRSxPQUFPO1lBQ0wsSUFBSSxFQUFFLFVBQVU7WUFDaEIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7U0FDWixDQUFDO0lBQ0osQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQyxBQTFDRCxDQUFrQyxZQUFZLEdBMEM3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7R2VvUG9zaXRpb25DaGFubmVsLCBMQVRJVFVERSwgTEFUSVRVREUyLCBMT05HSVRVREUsIExPTkdJVFVERTJ9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtkdXBsaWNhdGV9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0dlb1BvaW50VHJhbnNmb3JtfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQge0RhdGFGbG93Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5cblxuZXhwb3J0IGNsYXNzIEdlb1BvaW50Tm9kZSBleHRlbmRzIERhdGFGbG93Tm9kZSB7XG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IEdlb1BvaW50Tm9kZShudWxsLCB0aGlzLnByb2plY3Rpb24sIGR1cGxpY2F0ZSh0aGlzLmZpZWxkcyksIGR1cGxpY2F0ZSh0aGlzLmFzKSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IERhdGFGbG93Tm9kZSwgcHJpdmF0ZSBwcm9qZWN0aW9uOiBzdHJpbmcsIHByaXZhdGUgZmllbGRzOiBzdHJpbmdbXSwgcHJpdmF0ZSBhczogc3RyaW5nW10pIHtcbiAgICBzdXBlcihwYXJlbnQpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBwYXJzZUFsbChwYXJlbnQ6IERhdGFGbG93Tm9kZSwgbW9kZWw6IFVuaXRNb2RlbCk6IERhdGFGbG93Tm9kZSB7XG4gICAgaWYgKCFtb2RlbC5wcm9qZWN0aW9uTmFtZSgpKSB7XG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH1cblxuICAgIFtbTE9OR0lUVURFLCBMQVRJVFVERV0sIFtMT05HSVRVREUyLCBMQVRJVFVERTJdXS5mb3JFYWNoKChjb29yZGluYXRlczogR2VvUG9zaXRpb25DaGFubmVsW10pID0+IHtcbiAgICAgIGNvbnN0IHBhaXIgPSBjb29yZGluYXRlcy5tYXAoXG4gICAgICAgIGNoYW5uZWwgPT4gbW9kZWwuY2hhbm5lbEhhc0ZpZWxkKGNoYW5uZWwpID8gbW9kZWwuZmllbGREZWYoY2hhbm5lbCkuZmllbGQgOiB1bmRlZmluZWRcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHN1ZmZpeCA9IGNvb3JkaW5hdGVzWzBdID09PSBMT05HSVRVREUyID8gJzInIDogJyc7XG5cbiAgICAgIGlmIChwYWlyWzBdIHx8IHBhaXJbMV0pIHtcbiAgICAgICAgcGFyZW50ID0gbmV3IEdlb1BvaW50Tm9kZShcbiAgICAgICAgICBwYXJlbnQsXG4gICAgICAgICAgbW9kZWwucHJvamVjdGlvbk5hbWUoKSxcbiAgICAgICAgICBwYWlyLFxuICAgICAgICAgIFttb2RlbC5nZXROYW1lKCd4JyArIHN1ZmZpeCksIG1vZGVsLmdldE5hbWUoJ3knICsgc3VmZml4KV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBwYXJlbnQ7XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGUoKTogVmdHZW9Qb2ludFRyYW5zZm9ybSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdnZW9wb2ludCcsXG4gICAgICBwcm9qZWN0aW9uOiB0aGlzLnByb2plY3Rpb24sXG4gICAgICBmaWVsZHM6IHRoaXMuZmllbGRzLFxuICAgICAgYXM6IHRoaXMuYXNcbiAgICB9O1xuICB9XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { SELECTION_ID } from '../../selection';\nimport { DataFlowNode } from './dataflow';\nvar IdentifierNode = /** @class */ (function (_super) {\n    tslib_1.__extends(IdentifierNode, _super);\n    function IdentifierNode(parent) {\n        return _super.call(this, parent) || this;\n    }\n    IdentifierNode.prototype.clone = function () {\n        return new IdentifierNode(null);\n    };\n    IdentifierNode.prototype.producedFields = function () {\n        return _a = {}, _a[SELECTION_ID] = true, _a;\n        var _a;\n    };\n    IdentifierNode.prototype.assemble = function () {\n        return { type: 'identifier', as: SELECTION_ID };\n    };\n    return IdentifierNode;\n}(DataFlowNode));\nexport { IdentifierNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZW50aWZpZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL2luZGVudGlmaWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFHN0MsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFlBQVksQ0FBQztBQUV4QztJQUFvQywwQ0FBWTtJQUs5Qyx3QkFBWSxNQUFvQjtlQUM5QixrQkFBTSxNQUFNLENBQUM7SUFDZixDQUFDO0lBTk0sOEJBQUssR0FBWjtRQUNFLE9BQU8sSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQU1NLHVDQUFjLEdBQXJCO1FBQ0UsZ0JBQVEsR0FBQyxZQUFZLElBQUcsSUFBSSxLQUFFOztJQUNoQyxDQUFDO0lBRU0saUNBQVEsR0FBZjtRQUNFLE9BQU8sRUFBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUMsQ0FBQztJQUNoRCxDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQUFDLEFBaEJELENBQW9DLFlBQVksR0FnQi9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTRUxFQ1RJT05fSUR9IGZyb20gJy4uLy4uL3NlbGVjdGlvbic7XG5pbXBvcnQge1N0cmluZ1NldH0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnSWRlbnRpZmllclRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtEYXRhRmxvd05vZGV9IGZyb20gJy4vZGF0YWZsb3cnO1xuXG5leHBvcnQgY2xhc3MgSWRlbnRpZmllck5vZGUgZXh0ZW5kcyBEYXRhRmxvd05vZGUge1xuICBwdWJsaWMgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBJZGVudGlmaWVyTm9kZShudWxsKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogRGF0YUZsb3dOb2RlKSB7XG4gICAgc3VwZXIocGFyZW50KTtcbiAgfVxuXG4gIHB1YmxpYyBwcm9kdWNlZEZpZWxkcygpOiBTdHJpbmdTZXQge1xuICAgIHJldHVybiB7W1NFTEVDVElPTl9JRF06IHRydWV9O1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlKCk6IFZnSWRlbnRpZmllclRyYW5zZm9ybSB7XG4gICAgcmV0dXJuIHt0eXBlOiAnaWRlbnRpZmllcicsIGFzOiBTRUxFQ1RJT05fSUR9O1xuICB9XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { isString, toSet } from 'vega-util';\nimport * as log from '../../log';\nimport { DataFlowNode, OutputNode } from './dataflow';\nimport { SourceNode } from './source';\nvar LookupNode = /** @class */ (function (_super) {\n    tslib_1.__extends(LookupNode, _super);\n    function LookupNode(parent, transform, secondary) {\n        var _this = _super.call(this, parent) || this;\n        _this.transform = transform;\n        _this.secondary = secondary;\n        return _this;\n    }\n    LookupNode.make = function (parent, model, transform, counter) {\n        var sources = model.component.data.sources;\n        var s = new SourceNode(transform.from.data);\n        var fromSource = sources[s.hash()];\n        if (!fromSource) {\n            sources[s.hash()] = s;\n            fromSource = s;\n        }\n        var fromOutputName = model.getName(\"lookup_\" + counter);\n        var fromOutputNode = new OutputNode(fromSource, fromOutputName, 'lookup', model.component.data.outputNodeRefCounts);\n        model.component.data.outputNodes[fromOutputName] = fromOutputNode;\n        return new LookupNode(parent, transform, fromOutputNode.getSource());\n    };\n    LookupNode.prototype.producedFields = function () {\n        return toSet(this.transform.from.fields || ((this.transform.as instanceof Array) ? this.transform.as : [this.transform.as]));\n    };\n    LookupNode.prototype.assemble = function () {\n        var foreign;\n        if (this.transform.from.fields) {\n            // lookup a few fields and add create a flat output\n            foreign = tslib_1.__assign({ values: this.transform.from.fields }, this.transform.as ? { as: ((this.transform.as instanceof Array) ? this.transform.as : [this.transform.as]) } : {});\n        }\n        else {\n            // lookup full record and nest it\n            var asName = this.transform.as;\n            if (!isString(asName)) {\n                log.warn(log.message.NO_FIELDS_NEEDS_AS);\n                asName = '_lookup';\n            }\n            foreign = {\n                as: [asName]\n            };\n        }\n        return tslib_1.__assign({ type: 'lookup', from: this.secondary, key: this.transform.from.key, fields: [this.transform.lookup] }, foreign, (this.transform.default ? { default: this.transform.default } : {}));\n    };\n    return LookupNode;\n}(DataFlowNode));\nexport { LookupNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS9sb29rdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUUsS0FBSyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQzFDLE9BQU8sS0FBSyxHQUFHLE1BQU0sV0FBVyxDQUFDO0FBS2pDLE9BQU8sRUFBQyxZQUFZLEVBQUUsVUFBVSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ3BELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFcEM7SUFBZ0Msc0NBQVk7SUFDMUMsb0JBQVksTUFBb0IsRUFBa0IsU0FBMEIsRUFBa0IsU0FBaUI7UUFBL0csWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FDZDtRQUZpRCxlQUFTLEdBQVQsU0FBUyxDQUFpQjtRQUFrQixlQUFTLEdBQVQsU0FBUyxDQUFROztJQUUvRyxDQUFDO0lBRWEsZUFBSSxHQUFsQixVQUFtQixNQUFvQixFQUFFLEtBQVksRUFBRSxTQUEwQixFQUFFLE9BQWU7UUFDaEcsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzdDLElBQU0sQ0FBQyxHQUFHLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUMsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDZixPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLFVBQVUsR0FBRyxDQUFDLENBQUM7U0FDaEI7UUFFRCxJQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVUsT0FBUyxDQUFDLENBQUM7UUFDMUQsSUFBTSxjQUFjLEdBQUcsSUFBSSxVQUFVLENBQUMsVUFBVSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUV0SCxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLEdBQUcsY0FBYyxDQUFDO1FBRWxFLE9BQU8sSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxjQUFjLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRU0sbUNBQWMsR0FBckI7UUFDRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvSCxDQUFDO0lBRU0sNkJBQVEsR0FBZjtRQUNFLElBQUksT0FBbUMsQ0FBQztRQUV4QyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUM5QixtREFBbUQ7WUFDbkQsT0FBTyxzQkFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUNwSCxDQUFDO1NBQ0g7YUFBTTtZQUNMLGlDQUFpQztZQUNqQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztnQkFDekMsTUFBTSxHQUFHLFNBQVMsQ0FBQzthQUNwQjtZQUVELE9BQU8sR0FBRztnQkFDUixFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUM7YUFDYixDQUFDO1NBQ0g7UUFFRCwwQkFDRSxJQUFJLEVBQUUsUUFBUSxFQUNkLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxFQUNwQixHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUM1QixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUM1QixPQUFPLEVBQ1AsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ3BFO0lBQ0osQ0FBQztJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQXpERCxDQUFnQyxZQUFZLEdBeUQzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNTdHJpbmcsIHRvU2V0fSBmcm9tICd2ZWdhLXV0aWwnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uLy4uL2xvZyc7XG5pbXBvcnQge0xvb2t1cFRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdHJhbnNmb3JtJztcbmltcG9ydCB7U3RyaW5nU2V0fSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VmdMb29rdXBUcmFuc2Zvcm19IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7TW9kZWx9IGZyb20gJy4uL21vZGVsJztcbmltcG9ydCB7RGF0YUZsb3dOb2RlLCBPdXRwdXROb2RlfSBmcm9tICcuL2RhdGFmbG93JztcbmltcG9ydCB7U291cmNlTm9kZX0gZnJvbSAnLi9zb3VyY2UnO1xuXG5leHBvcnQgY2xhc3MgTG9va3VwTm9kZSBleHRlbmRzIERhdGFGbG93Tm9kZSB7XG4gIGNvbnN0cnVjdG9yKHBhcmVudDogRGF0YUZsb3dOb2RlLCBwdWJsaWMgcmVhZG9ubHkgdHJhbnNmb3JtOiBMb29rdXBUcmFuc2Zvcm0sIHB1YmxpYyByZWFkb25seSBzZWNvbmRhcnk6IHN0cmluZykge1xuICAgIHN1cGVyKHBhcmVudCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIG1ha2UocGFyZW50OiBEYXRhRmxvd05vZGUsIG1vZGVsOiBNb2RlbCwgdHJhbnNmb3JtOiBMb29rdXBUcmFuc2Zvcm0sIGNvdW50ZXI6IG51bWJlcikge1xuICAgIGNvbnN0IHNvdXJjZXMgPSBtb2RlbC5jb21wb25lbnQuZGF0YS5zb3VyY2VzO1xuICAgIGNvbnN0IHMgPSBuZXcgU291cmNlTm9kZSh0cmFuc2Zvcm0uZnJvbS5kYXRhKTtcbiAgICBsZXQgZnJvbVNvdXJjZSA9IHNvdXJjZXNbcy5oYXNoKCldO1xuICAgIGlmICghZnJvbVNvdXJjZSkge1xuICAgICAgc291cmNlc1tzLmhhc2goKV0gPSBzO1xuICAgICAgZnJvbVNvdXJjZSA9IHM7XG4gICAgfVxuXG4gICAgY29uc3QgZnJvbU91dHB1dE5hbWUgPSBtb2RlbC5nZXROYW1lKGBsb29rdXBfJHtjb3VudGVyfWApO1xuICAgIGNvbnN0IGZyb21PdXRwdXROb2RlID0gbmV3IE91dHB1dE5vZGUoZnJvbVNvdXJjZSwgZnJvbU91dHB1dE5hbWUsICdsb29rdXAnLCBtb2RlbC5jb21wb25lbnQuZGF0YS5vdXRwdXROb2RlUmVmQ291bnRzKTtcblxuICAgIG1vZGVsLmNvbXBvbmVudC5kYXRhLm91dHB1dE5vZGVzW2Zyb21PdXRwdXROYW1lXSA9IGZyb21PdXRwdXROb2RlO1xuXG4gICAgcmV0dXJuIG5ldyBMb29rdXBOb2RlKHBhcmVudCwgdHJhbnNmb3JtLCBmcm9tT3V0cHV0Tm9kZS5nZXRTb3VyY2UoKSk7XG4gIH1cblxuICBwdWJsaWMgcHJvZHVjZWRGaWVsZHMoKTogU3RyaW5nU2V0IHtcbiAgICByZXR1cm4gdG9TZXQodGhpcy50cmFuc2Zvcm0uZnJvbS5maWVsZHMgfHwgKCh0aGlzLnRyYW5zZm9ybS5hcyBpbnN0YW5jZW9mIEFycmF5KSA/IHRoaXMudHJhbnNmb3JtLmFzIDogW3RoaXMudHJhbnNmb3JtLmFzXSkpO1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlKCk6IFZnTG9va3VwVHJhbnNmb3JtIHtcbiAgICBsZXQgZm9yZWlnbjogUGFydGlhbDxWZ0xvb2t1cFRyYW5zZm9ybT47XG5cbiAgICBpZiAodGhpcy50cmFuc2Zvcm0uZnJvbS5maWVsZHMpIHtcbiAgICAgIC8vIGxvb2t1cCBhIGZldyBmaWVsZHMgYW5kIGFkZCBjcmVhdGUgYSBmbGF0IG91dHB1dFxuICAgICAgZm9yZWlnbiA9IHtcbiAgICAgICAgdmFsdWVzOiB0aGlzLnRyYW5zZm9ybS5mcm9tLmZpZWxkcyxcbiAgICAgICAgLi4uIHRoaXMudHJhbnNmb3JtLmFzID8ge2FzOiAoKHRoaXMudHJhbnNmb3JtLmFzIGluc3RhbmNlb2YgQXJyYXkpID8gdGhpcy50cmFuc2Zvcm0uYXMgOiBbdGhpcy50cmFuc2Zvcm0uYXNdKX0gOiB7fVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbG9va3VwIGZ1bGwgcmVjb3JkIGFuZCBuZXN0IGl0XG4gICAgICBsZXQgYXNOYW1lID0gdGhpcy50cmFuc2Zvcm0uYXM7XG4gICAgICBpZiAoIWlzU3RyaW5nKGFzTmFtZSkpIHtcbiAgICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuTk9fRklFTERTX05FRURTX0FTKTtcbiAgICAgICAgYXNOYW1lID0gJ19sb29rdXAnO1xuICAgICAgfVxuXG4gICAgICBmb3JlaWduID0ge1xuICAgICAgICBhczogW2FzTmFtZV1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdsb29rdXAnLFxuICAgICAgZnJvbTogdGhpcy5zZWNvbmRhcnksXG4gICAgICBrZXk6IHRoaXMudHJhbnNmb3JtLmZyb20ua2V5LFxuICAgICAgZmllbGRzOiBbdGhpcy50cmFuc2Zvcm0ubG9va3VwXSxcbiAgICAgIC4uLmZvcmVpZ24sXG4gICAgICAuLi4odGhpcy50cmFuc2Zvcm0uZGVmYXVsdCA/IHtkZWZhdWx0OiB0aGlzLnRyYW5zZm9ybS5kZWZhdWx0fSA6IHt9KVxuICAgIH07XG4gIH1cbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { duplicate } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the window transform nodes\n */\nvar WindowTransformNode = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowTransformNode, _super);\n    function WindowTransformNode(parent, transform) {\n        var _this = _super.call(this, parent) || this;\n        _this.transform = transform;\n        return _this;\n    }\n    WindowTransformNode.prototype.clone = function () {\n        return new WindowTransformNode(this.parent, duplicate(this.transform));\n    };\n    WindowTransformNode.prototype.producedFields = function () {\n        var _this = this;\n        var out = {};\n        this.transform.window.forEach(function (windowFieldDef) {\n            out[_this.getDefaultName(windowFieldDef)] = true;\n        });\n        return out;\n    };\n    WindowTransformNode.prototype.getDefaultName = function (windowFieldDef) {\n        return windowFieldDef.as === undefined ? String(windowFieldDef.op) + '_field' : windowFieldDef.as;\n    };\n    WindowTransformNode.prototype.assemble = function () {\n        var fields = [];\n        var ops = [];\n        var as = [];\n        var params = [];\n        for (var _i = 0, _a = this.transform.window; _i < _a.length; _i++) {\n            var window_1 = _a[_i];\n            ops.push(window_1.op);\n            as.push(this.getDefaultName(window_1));\n            params.push(window_1.param === undefined ? null : window_1.param);\n            fields.push(window_1.field === undefined ? null : window_1.field);\n        }\n        var frame = this.transform.frame;\n        var groupby = this.transform.groupby;\n        var sortFields = [];\n        var sortOrder = [];\n        if (this.transform.sort !== undefined) {\n            for (var _b = 0, _c = this.transform.sort; _b < _c.length; _b++) {\n                var sortField = _c[_b];\n                sortFields.push(sortField.field);\n                sortOrder.push(sortField.order === undefined ? null : sortField.order);\n            }\n        }\n        var sort = {\n            field: sortFields,\n            order: sortOrder,\n        };\n        var ignorePeers = this.transform.ignorePeers;\n        var result = {\n            type: 'window',\n            params: params,\n            as: as,\n            ops: ops,\n            fields: fields,\n            sort: sort,\n        };\n        if (ignorePeers !== undefined) {\n            result.ignorePeers = ignorePeers;\n        }\n        if (groupby !== undefined) {\n            result.groupby = groupby;\n        }\n        if (frame !== undefined) {\n            result.frame = frame;\n        }\n        return result;\n    };\n    return WindowTransformNode;\n}(DataFlowNode));\nexport { WindowTransformNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS93aW5kb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFckMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFlBQVksQ0FBQztBQUV4Qzs7R0FFRztBQUNIO0lBQXlDLCtDQUFZO0lBS25ELDZCQUFZLE1BQW9CLEVBQVUsU0FBMEI7UUFBcEUsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FDZDtRQUZ5QyxlQUFTLEdBQVQsU0FBUyxDQUFpQjs7SUFFcEUsQ0FBQztJQU5NLG1DQUFLLEdBQVo7UUFDSSxPQUFPLElBQUksbUJBQW1CLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQU1NLDRDQUFjLEdBQXJCO1FBQUEsaUJBT0M7UUFOQyxJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQSxjQUFjO1lBQzFDLEdBQUcsQ0FBQyxLQUFJLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2xELENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRU8sNENBQWMsR0FBdEIsVUFBdUIsY0FBOEI7UUFDbkQsT0FBTyxjQUFjLENBQUMsRUFBRSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7SUFDcEcsQ0FBQztJQUVNLHNDQUFRLEdBQWY7UUFDRSxJQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7UUFDNUIsSUFBTSxHQUFHLEdBQW1DLEVBQUUsQ0FBQztRQUMvQyxJQUFNLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDbEIsS0FBcUIsVUFBcUIsRUFBckIsS0FBQSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBckIsY0FBcUIsRUFBckIsSUFBcUI7WUFBckMsSUFBTSxRQUFNLFNBQUE7WUFDZixHQUFHLENBQUMsSUFBSSxDQUFDLFFBQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwQixFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBTSxDQUFDLENBQUMsQ0FBQztZQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQU0sQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5RCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQU0sQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvRDtRQUVELElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQ25DLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO1FBQ3ZDLElBQU0sVUFBVSxHQUFhLEVBQUUsQ0FBQztRQUNoQyxJQUFNLFNBQVMsR0FBd0IsRUFBRSxDQUFDO1FBQzFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQ3JDLEtBQXdCLFVBQW1CLEVBQW5CLEtBQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQW5CLGNBQW1CLEVBQW5CLElBQW1CO2dCQUF0QyxJQUFNLFNBQVMsU0FBQTtnQkFDbEIsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2pDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQTBCLENBQUMsQ0FBQzthQUM3RjtTQUNGO1FBQ0QsSUFBTSxJQUFJLEdBQWlCO1lBQ3pCLEtBQUssRUFBRSxVQUFVO1lBQ2pCLEtBQUssRUFBRSxTQUFTO1NBQ2pCLENBQUM7UUFDRixJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQztRQUUvQyxJQUFNLE1BQU0sR0FBc0I7WUFDaEMsSUFBSSxFQUFFLFFBQVE7WUFDZCxNQUFNLFFBQUE7WUFDTixFQUFFLElBQUE7WUFDRixHQUFHLEtBQUE7WUFDSCxNQUFNLFFBQUE7WUFDTixJQUFJLE1BQUE7U0FDTCxDQUFDO1FBRUYsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQzdCLE1BQU0sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1NBQ2xDO1FBRUQsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQ3pCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1NBQzFCO1FBRUQsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3ZCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ3RCO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUNILDBCQUFDO0FBQUQsQ0FBQyxBQXpFRCxDQUF5QyxZQUFZLEdBeUVwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWdncmVnYXRlT3B9IGZyb20gJ3ZlZ2EnO1xuaW1wb3J0IHtXaW5kb3dGaWVsZERlZiwgV2luZG93T25seU9wLCBXaW5kb3dUcmFuc2Zvcm19IGZyb20gJy4uLy4uL3RyYW5zZm9ybSc7XG5pbXBvcnQge2R1cGxpY2F0ZX0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnQ29tcGFyYXRvciwgVmdDb21wYXJhdG9yT3JkZXIsIFZnV2luZG93VHJhbnNmb3JtfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge0RhdGFGbG93Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5cbi8qKlxuICogQSBjbGFzcyBmb3IgdGhlIHdpbmRvdyB0cmFuc2Zvcm0gbm9kZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFdpbmRvd1RyYW5zZm9ybU5vZGUgZXh0ZW5kcyBEYXRhRmxvd05vZGUge1xuICBwdWJsaWMgY2xvbmUoKSB7XG4gICAgICByZXR1cm4gbmV3IFdpbmRvd1RyYW5zZm9ybU5vZGUodGhpcy5wYXJlbnQsIGR1cGxpY2F0ZSh0aGlzLnRyYW5zZm9ybSkpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBEYXRhRmxvd05vZGUsIHByaXZhdGUgdHJhbnNmb3JtOiBXaW5kb3dUcmFuc2Zvcm0pIHtcbiAgICBzdXBlcihwYXJlbnQpO1xuICB9XG5cbiAgcHVibGljIHByb2R1Y2VkRmllbGRzKCkge1xuICAgIGNvbnN0IG91dCA9IHt9O1xuICAgIHRoaXMudHJhbnNmb3JtLndpbmRvdy5mb3JFYWNoKHdpbmRvd0ZpZWxkRGVmID0+IHtcbiAgICAgIG91dFt0aGlzLmdldERlZmF1bHROYW1lKHdpbmRvd0ZpZWxkRGVmKV0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RGVmYXVsdE5hbWUod2luZG93RmllbGREZWY6IFdpbmRvd0ZpZWxkRGVmKTogc3RyaW5nIHtcbiAgICByZXR1cm4gd2luZG93RmllbGREZWYuYXMgPT09IHVuZGVmaW5lZCA/IFN0cmluZyh3aW5kb3dGaWVsZERlZi5vcCkgKyAnX2ZpZWxkJyA6IHdpbmRvd0ZpZWxkRGVmLmFzO1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlKCk6IFZnV2luZG93VHJhbnNmb3JtIHtcbiAgICBjb25zdCBmaWVsZHM6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3Qgb3BzOiAoQWdncmVnYXRlT3AgfCBXaW5kb3dPbmx5T3ApW10gPSBbXTtcbiAgICBjb25zdCBhcyA9IFtdO1xuICAgIGNvbnN0IHBhcmFtcyA9IFtdO1xuICAgIGZvciAoY29uc3Qgd2luZG93IG9mIHRoaXMudHJhbnNmb3JtLndpbmRvdykge1xuICAgICAgb3BzLnB1c2god2luZG93Lm9wKTtcbiAgICAgIGFzLnB1c2godGhpcy5nZXREZWZhdWx0TmFtZSh3aW5kb3cpKTtcbiAgICAgIHBhcmFtcy5wdXNoKHdpbmRvdy5wYXJhbSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHdpbmRvdy5wYXJhbSk7XG4gICAgICBmaWVsZHMucHVzaCh3aW5kb3cuZmllbGQgPT09IHVuZGVmaW5lZCA/IG51bGwgOiB3aW5kb3cuZmllbGQpO1xuICAgIH1cblxuICAgIGNvbnN0IGZyYW1lID0gdGhpcy50cmFuc2Zvcm0uZnJhbWU7XG4gICAgY29uc3QgZ3JvdXBieSA9IHRoaXMudHJhbnNmb3JtLmdyb3VwYnk7XG4gICAgY29uc3Qgc29ydEZpZWxkczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBzb3J0T3JkZXI6IFZnQ29tcGFyYXRvck9yZGVyW10gPSBbXTtcbiAgICBpZiAodGhpcy50cmFuc2Zvcm0uc29ydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGNvbnN0IHNvcnRGaWVsZCBvZiB0aGlzLnRyYW5zZm9ybS5zb3J0KSB7XG4gICAgICAgIHNvcnRGaWVsZHMucHVzaChzb3J0RmllbGQuZmllbGQpO1xuICAgICAgICBzb3J0T3JkZXIucHVzaChzb3J0RmllbGQub3JkZXIgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBzb3J0RmllbGQub3JkZXIgYXMgVmdDb21wYXJhdG9yT3JkZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBzb3J0OiBWZ0NvbXBhcmF0b3IgPSB7XG4gICAgICBmaWVsZDogc29ydEZpZWxkcyxcbiAgICAgIG9yZGVyOiBzb3J0T3JkZXIsXG4gICAgfTtcbiAgICBjb25zdCBpZ25vcmVQZWVycyA9IHRoaXMudHJhbnNmb3JtLmlnbm9yZVBlZXJzO1xuXG4gICAgY29uc3QgcmVzdWx0OiBWZ1dpbmRvd1RyYW5zZm9ybSA9IHtcbiAgICAgIHR5cGU6ICd3aW5kb3cnLFxuICAgICAgcGFyYW1zLFxuICAgICAgYXMsXG4gICAgICBvcHMsXG4gICAgICBmaWVsZHMsXG4gICAgICBzb3J0LFxuICAgIH07XG5cbiAgICBpZiAoaWdub3JlUGVlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzdWx0Lmlnbm9yZVBlZXJzID0gaWdub3JlUGVlcnM7XG4gICAgfVxuXG4gICAgaWYgKGdyb3VwYnkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzdWx0Lmdyb3VwYnkgPSBncm91cGJ5O1xuICAgIH1cblxuICAgIGlmIChmcmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHQuZnJhbWUgPSBmcmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { isNumber, isString } from 'vega-util';\nimport { MAIN, RAW } from '../../data';\nimport { isDateTime } from '../../datetime';\nimport * as log from '../../log';\nimport { isFieldEqualPredicate, isFieldOneOfPredicate, isFieldRangePredicate } from '../../predicate';\nimport { isAggregate, isBin, isCalculate, isFilter, isLookup, isTimeUnit, isWindow } from '../../transform';\nimport { keys } from '../../util';\nimport { isFacetModel, isLayerModel, isUnitModel } from '../model';\nimport { requiresSelectionId } from '../selection/selection';\nimport { AggregateNode } from './aggregate';\nimport { BinNode } from './bin';\nimport { CalculateNode } from './calculate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { FilterNode } from './filter';\nimport { FilterInvalidNode } from './filterinvalid';\nimport { ParseNode } from './formatparse';\nimport { GeoJSONNode } from './geojson';\nimport { GeoPointNode } from './geopoint';\nimport { IdentifierNode } from './indentifier';\nimport { LookupNode } from './lookup';\nimport { SourceNode } from './source';\nimport { StackNode } from './stack';\nimport { TimeUnitNode } from './timeunit';\nimport { WindowTransformNode } from './window';\nfunction parseRoot(model, sources) {\n    if (model.data || !model.parent) {\n        // if the model defines a data source or is the root, create a source node\n        var source = new SourceNode(model.data);\n        var hash = source.hash();\n        if (hash in sources) {\n            // use a reference if we already have a source\n            return sources[hash];\n        }\n        else {\n            // otherwise add a new one\n            sources[hash] = source;\n            return source;\n        }\n    }\n    else {\n        // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.\n        return model.parent.component.data.facetRoot ? model.parent.component.data.facetRoot : model.parent.component.data.main;\n    }\n}\n/**\n * Parses a transforms array into a chain of connected dataflow nodes.\n */\nexport function parseTransformArray(parent, model) {\n    var lookupCounter = 0;\n    model.transforms.forEach(function (t) {\n        if (isCalculate(t)) {\n            parent = new CalculateNode(parent, t);\n        }\n        else if (isFilter(t)) {\n            // Automatically add a parse node for filters with filter objects\n            var parse = {};\n            var filter = t.filter;\n            var val = null;\n            // For EqualFilter, just use the equal property.\n            // For RangeFilter and OneOfFilter, all array members should have\n            // the same type, so we only use the first one.\n            if (isFieldEqualPredicate(filter)) {\n                val = filter.equal;\n            }\n            else if (isFieldRangePredicate(filter)) {\n                val = filter.range[0];\n            }\n            else if (isFieldOneOfPredicate(filter)) {\n                val = (filter.oneOf || filter['in'])[0];\n            } // else -- for filter expression, we can't infer anything\n            if (val) {\n                if (isDateTime(val)) {\n                    parse[filter['field']] = 'date';\n                }\n                else if (isNumber(val)) {\n                    parse[filter['field']] = 'number';\n                }\n                else if (isString(val)) {\n                    parse[filter['field']] = 'string';\n                }\n            }\n            if (keys(parse).length > 0) {\n                parent = new ParseNode(parent, parse);\n            }\n            parent = new FilterNode(parent, model, t.filter);\n        }\n        else if (isBin(t)) {\n            parent = BinNode.makeFromTransform(parent, t, model);\n        }\n        else if (isTimeUnit(t)) {\n            parent = TimeUnitNode.makeFromTransform(parent, t);\n        }\n        else if (isAggregate(t)) {\n            parent = AggregateNode.makeFromTransform(parent, t);\n            if (requiresSelectionId(model)) {\n                parent = new IdentifierNode(parent);\n            }\n        }\n        else if (isLookup(t)) {\n            parent = LookupNode.make(parent, model, t, lookupCounter++);\n        }\n        else if (isWindow(t)) {\n            parent = new WindowTransformNode(parent, t);\n        }\n        else {\n            log.warn(log.message.invalidTransformIgnored(t));\n            return;\n        }\n    });\n    return parent;\n}\n/*\nDescription of the dataflow (http://asciiflow.com/):\n     +--------+\n     | Source |\n     +---+----+\n         |\n         v\n     Transforms\n(Filter, Calculate, ...)\n         |\n         v\n     FormatParse\n         |\n         v\n      Binning\n         |\n         v\n      Timeunit\n         |\n         v\nFormula From Sort Array\n         |\n         v\n      +--+--+\n      | Raw |\n      +-----+\n         |\n         v\n     Aggregate\n         |\n         v\n       Stack\n         |\n         v\n  Invalid Filter\n         |\n         v\n   +----------+\n   |   Main   |\n   +----------+\n         |\n         v\n     +-------+\n     | Facet |----> \"column\", \"column-layout\", and \"row\"\n     +-------+\n         |\n         v\n  ...Child data...\n*/\nexport function parseData(model) {\n    var head = parseRoot(model, model.component.data.sources);\n    var outputNodes = model.component.data.outputNodes;\n    var outputNodeRefCounts = model.component.data.outputNodeRefCounts;\n    // Default discrete selections require an identifier transform to\n    // uniquely identify data points as the _id field is volatile. Add\n    // this transform at the head of our pipeline such that the identifier\n    // field is available for all subsequent datasets. Additional identifier\n    // transforms will be necessary when new tuples are constructed\n    // (e.g., post-aggregation).\n    if (requiresSelectionId(model) && (isUnitModel(model) || isLayerModel(model))) {\n        head = new IdentifierNode(head);\n    }\n    // HACK: This is equivalent for merging bin extent for union scale.\n    // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale\n    var parentIsLayer = model.parent && isLayerModel(model.parent);\n    if (isUnitModel(model) || isFacetModel(model)) {\n        if (parentIsLayer) {\n            head = BinNode.makeFromEncoding(head, model) || head;\n        }\n    }\n    if (model.transforms.length > 0) {\n        head = parseTransformArray(head, model);\n    }\n    var parse = ParseNode.make(head, model);\n    if (parse) {\n        head = parse;\n    }\n    if (isUnitModel(model)) {\n        head = GeoJSONNode.parseAll(head, model);\n        head = GeoPointNode.parseAll(head, model);\n    }\n    if (isUnitModel(model) || isFacetModel(model)) {\n        if (!parentIsLayer) {\n            head = BinNode.makeFromEncoding(head, model) || head;\n        }\n        head = TimeUnitNode.makeFromEncoding(head, model) || head;\n        head = CalculateNode.parseAllForSortIndex(head, model);\n    }\n    // add an output node pre aggregation\n    var rawName = model.getName(RAW);\n    var raw = new OutputNode(head, rawName, RAW, outputNodeRefCounts);\n    outputNodes[rawName] = raw;\n    head = raw;\n    if (isUnitModel(model)) {\n        var agg = AggregateNode.makeFromEncoding(head, model);\n        if (agg) {\n            head = agg;\n            if (requiresSelectionId(model)) {\n                head = new IdentifierNode(head);\n            }\n        }\n        head = StackNode.make(head, model) || head;\n    }\n    if (isUnitModel(model)) {\n        head = FilterInvalidNode.make(head, model) || head;\n    }\n    // output node for marks\n    var mainName = model.getName(MAIN);\n    var main = new OutputNode(head, mainName, MAIN, outputNodeRefCounts);\n    outputNodes[mainName] = main;\n    head = main;\n    // add facet marker\n    var facetRoot = null;\n    if (isFacetModel(model)) {\n        var facetName = model.getName('facet');\n        facetRoot = new FacetNode(head, model, facetName, main.getSource());\n        outputNodes[facetName] = facetRoot;\n        head = facetRoot;\n    }\n    // add the format parse from this model so that children don't parse the same field again\n    var ancestorParse = tslib_1.__assign({}, model.component.data.ancestorParse, (parse ? parse.parse : {}));\n    return tslib_1.__assign({}, model.component.data, { outputNodes: outputNodes,\n        outputNodeRefCounts: outputNodeRefCounts,\n        raw: raw,\n        main: main,\n        facetRoot: facetRoot,\n        ancestorParse: ancestorParse });\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { keys } from '../util';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { Model } from './model';\nvar BaseConcatModel = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseConcatModel, _super);\n    function BaseConcatModel(spec, parent, parentGivenName, config, repeater, resolve) {\n        return _super.call(this, spec, parent, parentGivenName, config, repeater, resolve) || this;\n    }\n    BaseConcatModel.prototype.parseData = function () {\n        this.component.data = parseData(this);\n        this.children.forEach(function (child) {\n            child.parseData();\n        });\n    };\n    BaseConcatModel.prototype.parseSelection = function () {\n        var _this = this;\n        // Merge selections up the hierarchy so that they may be referenced\n        // across unit specs. Persist their definitions within each child\n        // to assemble signals which remain within output Vega unit groups.\n        this.component.selection = {};\n        var _loop_1 = function (child) {\n            child.parseSelection();\n            keys(child.component.selection).forEach(function (key) {\n                _this.component.selection[key] = child.component.selection[key];\n            });\n        };\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            _loop_1(child);\n        }\n    };\n    BaseConcatModel.prototype.parseMarkGroup = function () {\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            child.parseMarkGroup();\n        }\n    };\n    BaseConcatModel.prototype.parseAxisAndHeader = function () {\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            child.parseAxisAndHeader();\n        }\n        // TODO(#2415): support shared axes\n    };\n    BaseConcatModel.prototype.assembleSelectionTopLevelSignals = function (signals) {\n        return this.children.reduce(function (sg, child) { return child.assembleSelectionTopLevelSignals(sg); }, signals);\n    };\n    BaseConcatModel.prototype.assembleSelectionSignals = function () {\n        this.children.forEach(function (child) { return child.assembleSelectionSignals(); });\n        return [];\n    };\n    BaseConcatModel.prototype.assembleLayoutSignals = function () {\n        return this.children.reduce(function (signals, child) {\n            return signals.concat(child.assembleLayoutSignals());\n        }, assembleLayoutSignals(this));\n    };\n    BaseConcatModel.prototype.assembleSelectionData = function (data) {\n        return this.children.reduce(function (db, child) { return child.assembleSelectionData(db); }, data);\n    };\n    BaseConcatModel.prototype.assembleMarks = function () {\n        // only children have marks\n        return this.children.map(function (child) {\n            var title = child.assembleTitle();\n            var style = child.assembleGroupStyle();\n            var layoutSizeEncodeEntry = child.assembleLayoutSize();\n            return tslib_1.__assign({ type: 'group', name: child.getName('group') }, (title ? { title: title } : {}), (style ? { style: style } : {}), (layoutSizeEncodeEntry ? {\n                encode: {\n                    update: layoutSizeEncodeEntry\n                }\n            } : {}), child.assembleGroup());\n        });\n    };\n    return BaseConcatModel;\n}(Model));\nexport { BaseConcatModel };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZWNvbmNhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlL2Jhc2Vjb25jYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUdBLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFN0IsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRzlCO0lBQThDLDJDQUFLO0lBQ2pELHlCQUFZLElBQWMsRUFBRSxNQUFhLEVBQUUsZUFBdUIsRUFBRSxNQUFjLEVBQUUsUUFBdUIsRUFBRSxPQUFnQjtlQUMzSCxrQkFBTSxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQztJQUNqRSxDQUFDO0lBRU0sbUNBQVMsR0FBaEI7UUFDRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLO1lBQzFCLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDTSx3Q0FBYyxHQUFyQjtRQUFBLGlCQVdDO1FBVkMsbUVBQW1FO1FBQ25FLGlFQUFpRTtRQUNqRSxtRUFBbUU7UUFDbkUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO2dDQUNuQixLQUFLO1lBQ2QsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQUc7Z0JBQzFDLEtBQUksQ0FBQyxTQUFTLENBQUMs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QjtRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQTdFRCxDQUE4QyxLQUFLLEdBNkVsRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29uZmlnfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHtSZXNvbHZlfSBmcm9tICcuLi9yZXNvbHZlJztcbmltcG9ydCB7QmFzZVNwZWN9IGZyb20gJy4uL3NwZWMnO1xuaW1wb3J0IHtrZXlzfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7VmdEYXRhLCBWZ1NpZ25hbH0gZnJvbSAnLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtwYXJzZURhdGF9IGZyb20gJy4vZGF0YS9wYXJzZSc7XG5pbXBvcnQge2Fzc2VtYmxlTGF5b3V0U2lnbmFsc30gZnJvbSAnLi9sYXlvdXRzaXplL2Fzc2VtYmxlJztcbmltcG9ydCB7TW9kZWx9IGZyb20gJy4vbW9kZWwnO1xuaW1wb3J0IHtSZXBlYXRlclZhbHVlfSBmcm9tICcuL3JlcGVhdGVyJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VDb25jYXRNb2RlbCBleHRlbmRzIE1vZGVsIHtcbiAgY29uc3RydWN0b3Ioc3BlYzogQmFzZVNwZWMsIHBhcmVudDogTW9kZWwsIHBhcmVudEdpdmVuTmFtZTogc3RyaW5nLCBjb25maWc6IENvbmZpZywgcmVwZWF0ZXI6IFJlcGVhdGVyVmFsdWUsIHJlc29sdmU6IFJlc29sdmUpIHtcbiAgICBzdXBlcihzcGVjLCBwYXJlbnQsIHBhcmVudEdpdmVuTmFtZSwgY29uZmlnLCByZXBlYXRlciwgcmVzb2x2ZSk7XG4gIH1cblxuICBwdWJsaWMgcGFyc2VEYXRhKCkge1xuICAgIHRoaXMuY29tcG9uZW50LmRhdGEgPSBwYXJzZURhdGEodGhpcyk7XG4gICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgY2hpbGQucGFyc2VEYXRhKCk7XG4gICAgfSk7XG4gIH1cbiAgcHVibGljIHBhcnNlU2VsZWN0aW9uKCkge1xuICAgIC8vIE1lcmdlIHNlbGVjdGlvbnMgdXAgdGhlIGhpZXJhcmNoeSBzbyB0aGF0IHRoZXkgbWF5IGJlIHJlZmVyZW5jZWRcbiAgICAvLyBhY3Jvc3MgdW5pdCBzcGVjcy4gUGVyc2lzdCB0aGVpciBkZWZpbml0aW9ucyB3aXRoaW4gZWFjaCBjaGlsZFxuICAgIC8vIHRvIGFzc2VtYmxlIHNpZ25hbHMgd2hpY2ggcmVtYWluIHdpdGhpbiBvdXRwdXQgVmVnYSB1bml0IGdyb3Vwcy5cbiAgICB0aGlzLmNvbXBvbmVudC5zZWxlY3Rpb24gPSB7fTtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgIGNoaWxkLnBhcnNlU2VsZWN0aW9uKCk7XG4gICAgICBrZXlzKGNoaWxkLmNvbXBvbmVudC5zZWxlY3Rpb24pLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5zZWxlY3Rpb25ba2V5XSA9IGNoaWxkLmNvbXBvbmVudC5zZWxlY3Rpb25ba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBwYXJzZU1hcmtHcm91cCgpIHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgIGNoaWxkLnBhcnNlTWFya0dyb3VwKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHBhcnNlQXhpc0FuZEhlYWRlcigpIHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgIGNoaWxkLnBhcnNlQXhpc0FuZEhlYWRlcigpO1xuICAgIH1cblxuICAgIC8vIFRPRE8oIzI0MTUpOiBzdXBwb3J0IHNoYXJlZCBheGVzXG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGVTZWxlY3Rpb25Ub3BMZXZlbFNpZ25hbHMoc2lnbmFsczogYW55W10pOiBWZ1NpZ25hbFtdIHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5yZWR1Y2UoKHNnLCBjaGlsZCkgPT4gY2hpbGQuYXNzZW1ibGVTZWxlY3Rpb25Ub3BMZXZlbFNpZ25hbHMoc2cpLCBzaWduYWxzKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZVNlbGVjdGlvblNpZ25hbHMoKTogVmdTaWduYWxbXSB7XG4gICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4gY2hpbGQuYXNzZW1ibGVTZWxlY3Rpb25TaWduYWxzKCkpO1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZUxheW91dFNpZ25hbHMoKTogVmdTaWduYWxbXSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ucmVkdWNlKChzaWduYWxzLCBjaGlsZCkgPT4ge1xuICAgICAgcmV0dXJuIHNpZ25hbHMuY29uY2F0KGNoaWxkLmFzc2VtYmxlTGF5b3V0U2lnbmFscygpKTtcbiAgICB9LCBhc3NlbWJsZUxheW91dFNpZ25hbHModGhpcykpO1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlU2VsZWN0aW9uRGF0YShkYXRhOiBWZ0RhdGFbXSk6IFZnRGF0YVtdIHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5yZWR1Y2UoKGRiLCBjaGlsZCkgPT4gY2hpbGQuYXNzZW1ibGVTZWxlY3Rpb25EYXRhKGRiKSwgZGF0YSk7XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGVNYXJrcygpOiBhbnlbXSB7XG4gICAgLy8gb25seSBjaGlsZHJlbiBoYXZlIG1hcmtzXG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ubWFwKGNoaWxkID0+IHtcbiAgICAgIGNvbnN0IHRpdGxlID0gY2hpbGQuYXNzZW1ibGVUaXRsZSgpO1xuICAgICAgY29uc3Qgc3R5bGUgPSBjaGlsZC5hc3NlbWJsZUdyb3VwU3R5bGUoKTtcbiAgICAgIGNvbnN0IGxheW91dFNpemVFbmNvZGVFbnRyeSA9IGNoaWxkLmFzc2VtYmxlTGF5b3V0U2l6ZSgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2dyb3VwJyxcbiAgICAgICAgbmFtZTogY2hpbGQuZ2V0TmFtZSgnZ3JvdXAnKSxcbiAgICAgICAgLi4uKHRpdGxlID8ge3RpdGxlfSA6IHt9KSxcbiAgICAgICAgLi4uKHN0eWxlID8ge3N0eWxlfSA6IHt9KSxcbiAgICAgICAgLi4uKGxheW91dFNpemVFbmNvZGVFbnRyeSA/IHtcbiAgICAgICAgICBlbmNvZGU6IHtcbiAgICAgICAgICAgIHVwZGF0ZTogbGF5b3V0U2l6ZUVuY29kZUVudHJ5XG4gICAgICAgICAgfVxuICAgICAgICB9IDoge30pLFxuICAgICAgICAuLi5jaGlsZC5hc3NlbWJsZUdyb3VwKClcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==","import { defaultScaleConfig, hasDiscreteDomain } from '../../scale';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { mergeValuesWithExplicit } from '../split';\nexport function parseLayerLayoutSize(model) {\n    parseChildrenLayoutSize(model);\n    var layoutSizeCmpt = model.component.layoutSize;\n    layoutSizeCmpt.setWithExplicit('width', parseNonUnitLayoutSizeForChannel(model, 'width'));\n    layoutSizeCmpt.setWithExplicit('height', parseNonUnitLayoutSizeForChannel(model, 'height'));\n}\nexport var parseRepeatLayoutSize = parseLayerLayoutSize;\nexport function parseConcatLayoutSize(model) {\n    parseChildrenLayoutSize(model);\n    var layoutSizeCmpt = model.component.layoutSize;\n    var sizeTypeToMerge = model.isVConcat ? 'width' : 'height';\n    layoutSizeCmpt.setWithExplicit(sizeTypeToMerge, parseNonUnitLayoutSizeForChannel(model, sizeTypeToMerge));\n}\nexport function parseChildrenLayoutSize(model) {\n    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        child.parseLayoutSize();\n    }\n}\nfunction parseNonUnitLayoutSizeForChannel(model, sizeType) {\n    var channel = sizeType === 'width' ? 'x' : 'y';\n    var resolve = model.component.resolve;\n    var mergedSize;\n    // Try to merge layout size\n    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        var childSize = child.component.layoutSize.getWithExplicit(sizeType);\n        var scaleResolve = resolve.scale[channel];\n        if (scaleResolve === 'independent' && childSize.value === 'range-step') {\n            // Do not merge independent scales with range-step as their size depends\n            // on the scale domains, which can be different between scales.\n            mergedSize = undefined;\n            break;\n        }\n        if (mergedSize) {\n            if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\n                // For independent scale, only merge if all the sizes are the same.\n                // If the values are different, abandon the merge!\n                mergedSize = undefined;\n                break;\n            }\n            mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');\n        }\n        else {\n            mergedSize = childSize;\n        }\n    }\n    if (mergedSize) {\n        // If merged, rename size and set size of all children.\n        for (var _b = 0, _c = model.children; _b < _c.length; _b++) {\n            var child = _c[_b];\n            model.renameLayoutSize(child.getName(sizeType), model.getName(sizeType));\n            child.component.layoutSize.set(sizeType, 'merged', false);\n        }\n        return mergedSize;\n    }\n    else {\n        // Otherwise, there is no merged size.\n        return {\n            explicit: false,\n            value: undefined\n        };\n    }\n}\nexport function parseUnitLayoutSize(model) {\n    var layoutSizeComponent = model.component.layoutSize;\n    if (!layoutSizeComponent.explicit.width) {\n        var width = defaultUnitSize(model, 'width');\n        layoutSizeComponent.set('width', width, false);\n    }\n    if (!layoutSizeComponent.explicit.height) {\n        var height = defaultUnitSize(model, 'height');\n        layoutSizeComponent.set('height', height, false);\n    }\n}\nfunction defaultUnitSize(model, sizeType) {\n    var channel = sizeType === 'width' ? 'x' : 'y';\n    var config = model.config;\n    var scaleComponent = model.getScaleComponent(channel);\n    if (scaleComponent) {\n        var scaleType = scaleComponent.get('type');\n        var range = scaleComponent.get('range');\n        if (hasDiscreteDomain(scaleType) && isVgRangeStep(range)) {\n            // For discrete domain with range.step, use dynamic width/height\n            return 'range-step';\n        }\n        else {\n            return config.view[sizeType];\n        }\n    }\n    else {\n        // No scale - set default size\n        if (sizeType === 'width' && model.mark === 'text') {\n            // width for text mark without x-field is a bit wider than typical range step\n            return config.scale.textXRangeStep;\n        }\n        // Set width/height equal to rangeStep config or if rangeStep is null, use value from default scale config.\n        return config.scale.rangeStep || defaultScaleConfig.rangeStep;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport * as log from '../log';\nimport { isVConcatSpec } from '../spec';\nimport { BaseConcatModel } from './baseconcat';\nimport { buildModel } from './buildmodel';\nimport { parseConcatLayoutSize } from './layoutsize/parse';\nvar ConcatModel = /** @class */ (function (_super) {\n    tslib_1.__extends(ConcatModel, _super);\n    function ConcatModel(spec, parent, parentGivenName, repeater, config) {\n        var _this = _super.call(this, spec, parent, parentGivenName, config, repeater, spec.resolve) || this;\n        _this.type = 'concat';\n        if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n            log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n        }\n        _this.isVConcat = isVConcatSpec(spec);\n        _this.children = (isVConcatSpec(spec) ? spec.vconcat : spec.hconcat).map(function (child, i) {\n            return buildModel(child, _this, _this.getName('concat_' + i), undefined, repeater, config, false);\n        });\n        return _this;\n    }\n    ConcatModel.prototype.parseLayoutSize = function () {\n        parseConcatLayoutSize(this);\n    };\n    ConcatModel.prototype.parseAxisGroup = function () {\n        return null;\n    };\n    ConcatModel.prototype.assembleLayout = function () {\n        // TODO: allow customization\n        return tslib_1.__assign({ padding: { row: 10, column: 10 }, offset: 10 }, (this.isVConcat ? { columns: 1 } : {}), { bounds: 'full', \n            // Use align each so it can work with multiple plots with different size\n            align: 'each' });\n    };\n    return ConcatModel;\n}(BaseConcatModel));\nexport { ConcatModel };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uY2F0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBpbGUvY29uY2F0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEtBQUssR0FBRyxNQUFNLFFBQVEsQ0FBQztBQUM5QixPQUFPLEVBQUMsYUFBYSxFQUF1QixNQUFNLFNBQVMsQ0FBQztBQUU1RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDeEMsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFJekQ7SUFBaUMsdUNBQWU7SUFPOUMscUJBQVksSUFBMEIsRUFBRSxNQUFhLEVBQUUsZUFBdUIsRUFBRSxRQUF1QixFQUFFLE1BQWM7UUFBdkgsWUFDRSxrQkFBTSxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FXckU7UUFsQmUsVUFBSSxHQUFhLFFBQVEsQ0FBQztRQVN4QyxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsRUFBRTtZQUMvRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztTQUNoRDtRQUVELEtBQUksQ0FBQyxTQUFTLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJDLEtBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxLQUFLLEVBQUUsQ0FBQztZQUMvRSxPQUFPLFVBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSSxFQUFFLEtBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xHLENBQUMsQ0FBQyxDQUFDOztJQUNMLENBQUM7SUFFTSxxQ0FBZSxHQUF0QjtRQUNFLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFHTSxvQ0FBYyxHQUFyQjtRQUNFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLG9DQUFjLEdBQXJCO1FBQ0UsNEJBQTRCO1FBQzVCLDBCQUNFLE9BQU8sRUFBRSxFQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBQyxFQUM5QixNQUFNLEVBQUUsRUFBRSxJQUNQLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUN2QyxNQUFNLEVBQUUsTUFBTTtZQUNkLHdFQUF3RTtZQUN4RSxLQUFLLEVBQUUsTUFBTSxJQUNiO0lBQ0osQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxBQXpDRCxDQUFpQyxlQUFlLEdBeUMvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29uZmlnfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uL2xvZyc7XG5pbXBvcnQge2lzVkNvbmNhdFNwZWMsIE5vcm1hbGl6ZWRDb25jYXRTcGVjfSBmcm9tICcuLi9zcGVjJztcbmltcG9ydCB7VmdMYXlvdXR9IGZyb20gJy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7QmFzZUNvbmNhdE1vZGVsfSBmcm9tICcuL2Jhc2Vjb25jYXQnO1xuaW1wb3J0IHtidWlsZE1vZGVsfSBmcm9tICcuL2J1aWxkbW9kZWwnO1xuaW1wb3J0IHtwYXJzZUNvbmNhdExheW91dFNpemV9IGZyb20gJy4vbGF5b3V0c2l6ZS9wYXJzZSc7XG5pbXBvcnQge01vZGVsfSBmcm9tICcuL21vZGVsJztcbmltcG9ydCB7UmVwZWF0ZXJWYWx1ZX0gZnJvbSAnLi9yZXBlYXRlcic7XG5cbmV4cG9ydCBjbGFzcyBDb25jYXRNb2RlbCBleHRlbmRzIEJhc2VDb25jYXRNb2RlbCB7XG4gIHB1YmxpYyByZWFkb25seSB0eXBlOiAnY29uY2F0JyA9ICdjb25jYXQnO1xuXG4gIHB1YmxpYyByZWFkb25seSBjaGlsZHJlbjogTW9kZWxbXTtcblxuICBwdWJsaWMgcmVhZG9ubHkgaXNWQ29uY2F0OiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHNwZWM6IE5vcm1hbGl6ZWRDb25jYXRTcGVjLCBwYXJlbnQ6IE1vZGVsLCBwYXJlbnRHaXZlbk5hbWU6IHN0cmluZywgcmVwZWF0ZXI6IFJlcGVhdGVyVmFsdWUsIGNvbmZpZzogQ29uZmlnKSB7XG4gICAgc3VwZXIoc3BlYywgcGFyZW50LCBwYXJlbnRHaXZlbk5hbWUsIGNvbmZpZywgcmVwZWF0ZXIsIHNwZWMucmVzb2x2ZSk7XG5cbiAgICBpZiAoc3BlYy5yZXNvbHZlICYmIHNwZWMucmVzb2x2ZS5heGlzICYmIChzcGVjLnJlc29sdmUuYXhpcy54ID09PSAnc2hhcmVkJyB8fCBzcGVjLnJlc29sdmUuYXhpcy55ID09PSAnc2hhcmVkJykpIHtcbiAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLkNPTkNBVF9DQU5OT1RfU0hBUkVfQVhJUyk7XG4gICAgfVxuXG4gICAgdGhpcy5pc1ZDb25jYXQgPSBpc1ZDb25jYXRTcGVjKHNwZWMpO1xuXG4gICAgdGhpcy5jaGlsZHJlbiA9IChpc1ZDb25jYXRTcGVjKHNwZWMpID8gc3BlYy52Y29uY2F0IDogc3BlYy5oY29uY2F0KS5tYXAoKGNoaWxkLCBpKSA9PiB7XG4gICAgICByZXR1cm4gYnVpbGRNb2RlbChjaGlsZCwgdGhpcywgdGhpcy5nZXROYW1lKCdjb25jYXRfJyArIGkpLCB1bmRlZmluZWQsIHJlcGVhdGVyLCBjb25maWcsIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBwYXJzZUxheW91dFNpemUoKSB7XG4gICAgcGFyc2VDb25jYXRMYXlvdXRTaXplKHRoaXMpO1xuICB9XG5cblxuICBwdWJsaWMgcGFyc2VBeGlzR3JvdXAoKTogdm9pZCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGVMYXlvdXQoKTogVmdMYXlvdXQge1xuICAgIC8vIFRPRE86IGFsbG93IGN1c3RvbWl6YXRpb25cbiAgICByZXR1cm4ge1xuICAgICAgcGFkZGluZzoge3JvdzogMTAsIGNvbHVtbjogMTB9LFxuICAgICAgb2Zmc2V0OiAxMCxcbiAgICAgIC4uLih0aGlzLmlzVkNvbmNhdCA/IHtjb2x1bW5zOiAxfSA6IHt9KSxcbiAgICAgIGJvdW5kczogJ2Z1bGwnLFxuICAgICAgLy8gVXNlIGFsaWduIGVhY2ggc28gaXQgY2FuIHdvcmsgd2l0aCBtdWx0aXBsZSBwbG90cyB3aXRoIGRpZmZlcmVudCBzaXplXG4gICAgICBhbGlnbjogJ2VhY2gnXG4gICAgfTtcbiAgfVxufVxuIl19","import * as tslib_1 from \"tslib\";\nimport { isUrlData } from '../../data';\nimport { vals } from '../../util';\nimport { AggregateNode } from './aggregate';\nimport { BinNode } from './bin';\nimport { CalculateNode } from './calculate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { FilterNode } from './filter';\nimport { FilterInvalidNode } from './filterinvalid';\nimport { ParseNode } from './formatparse';\nimport { GeoJSONNode } from './geojson';\nimport { GeoPointNode } from './geopoint';\nimport { IdentifierNode } from './indentifier';\nimport { LookupNode } from './lookup';\nimport { SourceNode } from './source';\nimport { StackNode } from './stack';\nimport { TimeUnitNode } from './timeunit';\nimport { WindowTransformNode } from './window';\n/**\n * Print debug information for dataflow tree.\n */\n// tslint:disable-next-line\nfunction debug(node) {\n    console.log(\"\" + node.constructor.name + (node.debugName ? \" (\" + node.debugName + \")\" : '') + \" -> \" + (node.children.map(function (c) {\n        return \"\" + c.constructor.name + (c.debugName ? \" (\" + c.debugName + \")\" : '');\n    })));\n    console.log(node);\n    node.children.forEach(debug);\n}\nfunction makeWalkTree(data) {\n    // to name datasources\n    var datasetIndex = 0;\n    /**\n     * Recursively walk down the tree.\n     */\n    function walkTree(node, dataSource) {\n        if (node instanceof SourceNode) {\n            // If the source is a named data source or a data source with values, we need\n            // to put it in a different data source. Otherwise, Vega may override the data.\n            if (!isUrlData(node.data)) {\n                data.push(dataSource);\n                var newData = {\n                    name: null,\n                    source: dataSource.name,\n                    transform: []\n                };\n                dataSource = newData;\n            }\n        }\n        if (node instanceof ParseNode) {\n            if (node.parent instanceof SourceNode && !dataSource.source) {\n                // If node's parent is a root source and the data source does not refer to another data source, use normal format parse\n                dataSource.format = tslib_1.__assign({}, dataSource.format || {}, { parse: node.assembleFormatParse() });\n                // add calculates for all nested fields\n                dataSource.transform = dataSource.transform.concat(node.assembleTransforms(true));\n            }\n            else {\n                // Otherwise use Vega expression to parse\n                dataSource.transform = dataSource.transform.concat(node.assembleTransforms());\n            }\n        }\n        if (node instanceof FacetNode) {\n            if (!dataSource.name) {\n                dataSource.name = \"data_\" + datasetIndex++;\n            }\n            if (!dataSource.source || dataSource.transform.length > 0) {\n                data.push(dataSource);\n                node.data = dataSource.name;\n            }\n            else {\n                node.data = dataSource.source;\n            }\n            node.assemble().forEach(function (d) { return data.push(d); });\n            // break here because the rest of the tree has to be taken care of by the facet.\n            return;\n        }\n        if (node instanceof FilterNode ||\n            node instanceof CalculateNode ||\n            node instanceof GeoPointNode ||\n            node instanceof GeoJSONNode ||\n            node instanceof AggregateNode ||\n            node instanceof LookupNode ||\n            node instanceof WindowTransformNode ||\n            node instanceof IdentifierNode) {\n            dataSource.transform.push(node.assemble());\n        }\n        if (node instanceof FilterInvalidNode ||\n            node instanceof BinNode ||\n            node instanceof TimeUnitNode ||\n            node instanceof StackNode) {\n            dataSource.transform = dataSource.transform.concat(node.assemble());\n        }\n        if (node instanceof AggregateNode) {\n            if (!dataSource.name) {\n                dataSource.name = \"data_\" + datasetIndex++;\n            }\n        }\n        if (node instanceof OutputNode) {\n            if (dataSource.source && dataSource.transform.length === 0) {\n                node.setSource(dataSource.source);\n            }\n            else if (node.parent instanceof OutputNode) {\n                // Note that an output node may be required but we still do not assemble a\n                // separate data source for it.\n                node.setSource(dataSource.name);\n            }\n            else {\n                if (!dataSource.name) {\n                    dataSource.name = \"data_\" + datasetIndex++;\n                }\n                // Here we set the name of the datasource we generated. From now on\n                // other assemblers can use it.\n                node.setSource(dataSource.name);\n                // if this node has more than one child, we will add a datasource automatically\n                if (node.numChildren() === 1) {\n                    data.push(dataSource);\n                    var newData = {\n                        name: null,\n                        source: dataSource.name,\n                        transform: []\n                    };\n                    dataSource = newData;\n                }\n            }\n        }\n        switch (node.numChildren()) {\n            case 0:\n                // done\n                if (node instanceof OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {\n                    // do not push empty datasources that are simply references\n                    data.push(dataSource);\n                }\n                break;\n            case 1:\n                walkTree(node.children[0], dataSource);\n                break;\n            default:\n                if (!dataSource.name) {\n                    dataSource.name = \"data_\" + datasetIndex++;\n                }\n                var source_1 = dataSource.name;\n                if (!dataSource.source || dataSource.transform.length > 0) {\n                    data.push(dataSource);\n                }\n                else {\n                    source_1 = dataSource.source;\n                }\n                node.children.forEach(function (child) {\n                    var newData = {\n                        name: null,\n                        source: source_1,\n                        transform: []\n                    };\n                    walkTree(child, newData);\n                });\n                break;\n        }\n    }\n    return walkTree;\n}\n/**\n * Assemble data sources that are derived from faceted data.\n */\nexport function assembleFacetData(root) {\n    var data = [];\n    var walkTree = makeWalkTree(data);\n    root.children.forEach(function (child) { return walkTree(child, {\n        source: root.name,\n        name: null,\n        transform: []\n    }); });\n    return data;\n}\n/**\n * Create Vega Data array from a given compiled model and append all of them to the given array\n *\n * @param  model\n * @param  data array\n * @return modified data array\n */\nexport function assembleRootData(dataComponent, datasets) {\n    var roots = vals(dataComponent.sources);\n    var data = [];\n    // roots.forEach(debug);\n    var walkTree = makeWalkTree(data);\n    var sourceIndex = 0;\n    roots.forEach(function (root) {\n        // assign a name if the source does not have a name yet\n        if (!root.hasName()) {\n            root.dataName = \"source_\" + sourceIndex++;\n        }\n        var newData = root.assemble();\n        walkTree(root, newData);\n    });\n    // remove empty transform arrays for cleaner output\n    data.forEach(function (d) {\n        if (d.transform.length === 0) {\n            delete d.transform;\n        }\n    });\n    // move sources without transforms (the ones that are potentially used in lookups) to the beginning\n    var whereTo = 0;\n    for (var i = 0; i < data.length; i++) {\n        var d = data[i];\n        if ((d.transform || []).length === 0 && !d.source) {\n            data.splice(whereTo++, 0, data.splice(i, 1)[0]);\n        }\n    }\n    // now fix the from references in lookup transforms\n    for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n        var d = data_1[_i];\n        for (var _a = 0, _b = d.transform || []; _a < _b.length; _a++) {\n            var t = _b[_a];\n            if (t.type === 'lookup') {\n                t.from = dataComponent.outputNodes[t.from].getSource();\n            }\n        }\n    }\n    // inline values for datasets that are in the datastore\n    for (var _c = 0, data_2 = data; _c < data_2.length; _c++) {\n        var d = data_2[_c];\n        if (d.name in datasets) {\n            d.values = datasets[d.name];\n        }\n    }\n    return data;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL2Fzc2VtYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWdCLFNBQVMsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUNwRCxPQUFPLEVBQU8sSUFBSSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBR3RDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDMUMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE9BQU8sQ0FBQztBQUM5QixPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQzFDLE9BQU8sRUFBZSxVQUFVLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDcEQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUNsQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ3BDLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ3hDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUNwQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ3BDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFDbEMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFlBQVksQ0FBQztBQUN4QyxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFN0M7O0dBRUc7QUFDSCwyQkFBMkI7QUFD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QUFDLGFBQUE7UUFDVixLQUFnQixVQUFpQixFQUFqQixLQUFBLENBQUMsQ0FBQyxTQUFTLElBQUksRUFBRSxFQUFqQixjQUFpQixFQUFqQixJQUFpQjtZQUE1QixJQUFNLENBQUMsU0FBQTtZQUNWLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQ3ZCLENBQUMsQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDeEQ7U0FDRjtLQUNGO0lBRUQsdURBQXVEO0lBQ3ZELEtBQWdCLFVBQUksRUFBSixhQUFJLEVBQUosa0JBQUksRUFBSixJQUFJO1FBQWYsSUFBTSxDQUFDLGFBQUE7UUFDVixJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksUUFBUSxFQUFFO1lBQ3RCLENBQUMsQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QjtLQUNGO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmxpbmVEYXRhc2V0LCBpc1VybERhdGF9IGZyb20gJy4uLy4uL2RhdGEnO1xuaW1wb3J0IHtEaWN0LCB2YWxzfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VmdEYXRhfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge0RhdGFDb21wb25lbnR9IGZyb20gJy4vJztcbmltcG9ydCB7QWdncmVnYXRlTm9kZX0gZnJvbSAnLi9hZ2dyZWdhdGUnO1xuaW1wb3J0IHtCaW5Ob2RlfSBmcm9tICcuL2Jpbic7XG5pbXBvcnQge0NhbGN1bGF0ZU5vZGV9IGZyb20gJy4vY2FsY3VsYXRlJztcbmltcG9ydCB7RGF0YUZsb3dOb2RlLCBPdXRwdXROb2RlfSBmcm9tICcuL2RhdGFmbG93JztcbmltcG9ydCB7RmFjZXROb2RlfSBmcm9tICcuL2ZhY2V0JztcbmltcG9ydCB7RmlsdGVyTm9kZX0gZnJvbSAnLi9maWx0ZXInO1xuaW1wb3J0IHtGaWx0ZXJJbnZhbGlkTm9kZX0gZnJvbSAnLi9maWx0ZXJpbnZhbGlkJztcbmltcG9ydCB7UGFyc2VOb2RlfSBmcm9tICcuL2Zvcm1hdHBhcnNlJztcbmltcG9ydCB7R2VvSlNPTk5vZGV9IGZyb20gJy4vZ2VvanNvbic7XG5pbXBvcnQge0dlb1BvaW50Tm9kZX0gZnJvbSAnLi9nZW9wb2ludCc7XG5pbXBvcnQge0lkZW50aWZpZXJOb2RlfSBmcm9tICcuL2luZGVudGlmaWVyJztcbmltcG9ydCB7TG9va3VwTm9kZX0gZnJvbSAnLi9sb29rdXAnO1xuaW1wb3J0IHtTb3VyY2VOb2RlfSBmcm9tICcuL3NvdXJjZSc7XG5pbXBvcnQge1N0YWNrTm9kZX0gZnJvbSAnLi9zdGFjayc7XG5pbXBvcnQge1RpbWVVbml0Tm9kZX0gZnJvbSAnLi90aW1ldW5pdCc7XG5pbXBvcnQge1dpbmRvd1RyYW5zZm9ybU5vZGV9IGZyb20gJy4vd2luZG93JztcblxuLyoqXG4gKiBQcmludCBkZWJ1ZyBpbmZvcm1hdGlvbiBmb3IgZGF0YWZsb3cgdHJlZS5cbiAqL1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG5mdW5jdGlvbiBkZWJ1Zyhub2RlOiBEYXRhRmxvd05vZGUpIHtcbiAgY29uc29sZS5sb2coYCR7KG5vZGUuY29uc3RydWN0b3IgYXMgYW55KS5uYW1lfSR7bm9kZS5kZWJ1Z05hbWUgPyBgICgke25vZGUuZGVidWdOYW1lfSlgIDogJyd9IC0+ICR7XG4gICAgKG5vZGUuY2hpbGRyZW4ubWFwKGMgPT4ge1xuICAgICAgcmV0dXJuIGAkeyhjLmNvbnN0cnVjdG9yIGFzIGFueSkubmFtZX0ke2MuZGVidWdOYW1lID8gYCAoJHtjLmRlYnVnTmFtZX0pYCA6ICcnfWA7XG4gICAgfSkpXG4gIH1gKTtcbiAgY29uc29sZS5sb2cobm9kZSk7XG4gIG5vZGUuY2hpbGRyZW4uZm9yRWFjaChkZWJ1Zyk7XG59XG5cbmZ1bmN0aW9uIG1ha2VXYWxrVHJlZShkYXRhOiBWZ0RhdGFbXSkge1xuICAvLyB0byBuYW1lIGRhdGFzb3VyY2VzXG4gIGxldCBkYXRhc2V0SW5kZXggPSAwO1xuXG4gIC8qKlxuICAgKiBSZWN1cnNpdmVseSB3YWxrIGRvd24gdGhlIHRyZWUuXG4gICAqL1xuICBmdW5jdGlvbiB3YWxrVHJlZShub2RlOiBEYXRhRmxvd05vZGUsIGRhdGFTb3VyY2U6IFZnRGF0YSkge1xuICAgIGlmIChub2RlIGluc3RhbmNlb2YgU291cmNlTm9kZSkge1xuICAgICAgLy8gSWYgdGhlIHNvdXJjZSBpcyBhIG5hbWVkIGRhdGEgc291cmNlIG9yIGEgZGF0YSBzb3VyY2Ugd2l0aCB2YWx1ZXMsIHdlIG5lZWRcbiAgICAgIC8vIHRvIHB1dCBpdCBpbiBhIGRpZmZlcmVudCBkYXRhIHNvdXJjZS4gT3RoZXJ3aXNlLCBWZWdhIG1heSBvdmVycmlkZSB0aGUgZGF0YS5cbiAgICAgIGlmICghaXNVcmxEYXRhKG5vZGUuZGF0YSkpIHtcbiAgICAgICAgZGF0YS5wdXNoKGRhdGFTb3VyY2UpO1xuICAgICAgICBjb25zdCBuZXdEYXRhOiBWZ0RhdGEgPSB7XG4gICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICBzb3VyY2U6IGRhdGFTb3VyY2UubmFtZSxcbiAgICAgICAgICB0cmFuc2Zvcm06IFtdXG4gICAgICAgIH07XG4gICAgICAgIGRhdGFTb3VyY2UgPSBuZXdEYXRhO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub2RlIGluc3RhbmNlb2YgUGFyc2VOb2RlKSB7XG4gICAgICBpZiAobm9kZS5wYXJlbnQgaW5zdGFuY2VvZiBTb3VyY2VOb2RlICYmICFkYXRhU291cmNlLnNvdXJjZSkge1xuICAgICAgICAvLyBJZiBub2RlJ3MgcGFyZW50IGlzIGEgcm9vdCBzb3VyY2UgYW5kIHRoZSBkYXRhIHNvdXJjZSBkb2VzIG5vdCByZWZlciB0byBhbm90aGVyIGRhdGEgc291cmNlLCB1c2Ugbm9ybWFsIGZvcm1hdCBwYXJzZVxuICAgICAgICBkYXRhU291cmNlLmZvcm1hdCA9IHtcbiAgICAgICAgICAuLi5kYXRhU291cmNlLmZvcm1hdCB8fCB7fSxcbiAgICAgICAgICBwYXJzZTogbm9kZS5hc3NlbWJsZUZvcm1hdFBhcnNlKClcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBhZGQgY2FsY3VsYXRlcyBmb3IgYWxsIG5lc3RlZCBmaWVsZHNcbiAgICAgICAgZGF0YVNvdXJjZS50cmFuc2Zvcm0gPSBkYXRhU291cmNlLnRyYW5zZm9ybS5jb25jYXQobm9kZS5hc3NlbWJsZVRyYW5zZm9ybXModHJ1ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIHVzZSBWZWdhIGV4cHJlc3Npb24gdG8gcGFyc2VcbiAgICAgICAgZGF0YVNvdXJjZS50cmFuc2Zvcm0gPSBkYXRhU291cmNlLnRyYW5zZm9ybS5jb25jYXQobm9kZS5hc3NlbWJsZVRyYW5zZm9ybXMoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBGYWNldE5vZGUpIHtcbiAgICAgIGlmICghZGF0YVNvdXJjZS5uYW1lKSB7XG4gICAgICAgIGRhdGFTb3VyY2UubmFtZSA9IGBkYXRhXyR7ZGF0YXNldEluZGV4Kyt9YDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkYXRhU291cmNlLnNvdXJjZSB8fCBkYXRhU291cmNlLnRyYW5zZm9ybS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGRhdGEucHVzaChkYXRhU291cmNlKTtcbiAgICAgICAgbm9kZS5kYXRhID0gZGF0YVNvdXJjZS5uYW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5kYXRhID0gZGF0YVNvdXJjZS5zb3VyY2U7XG4gICAgICB9XG5cbiAgICAgIG5vZGUuYXNzZW1ibGUoKS5mb3JFYWNoKGQgPT4gZGF0YS5wdXNoKGQpKTtcblxuICAgICAgLy8gYnJlYWsgaGVyZSBiZWNhdXNlIHRoZSByZXN0IG9mIHRoZSB0cmVlIGhhcyB0byBiZSB0YWtlbiBjYXJlIG9mIGJ5IHRoZSBmYWNldC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEZpbHRlck5vZGUgfHxcbiAgICAgIG5vZGUgaW5zdGFuY2VvZiBDYWxjdWxhdGVOb2RlIHx8XG4gICAgICBub2RlIGluc3RhbmNlb2YgR2VvUG9pbnROb2RlIHx8XG4gICAgICBub2RlIGluc3RhbmNlb2YgR2VvSlNPTk5vZGUgfHxcbiAgICAgIG5vZGUgaW5zdGFuY2VvZiBBZ2dyZWdhdGVOb2RlIHx8XG4gICAgICBub2RlIGluc3RhbmNlb2YgTG9va3VwTm9kZSB8fFxuICAgICAgbm9kZSBpbnN0YW5jZW9mIFdpbmRvd1RyYW5zZm9ybU5vZGUgfHxcbiAgICAgIG5vZGUgaW5zdGFuY2VvZiBJZGVudGlmaWVyTm9kZSkge1xuICAgICAgZGF0YVNvdXJjZS50cmFuc2Zvcm0ucHVzaChub2RlLmFzc2VtYmxlKCkpO1xuICAgIH1cblxuICAgIGlmIChub2RlIGluc3RhbmNlb2YgRmlsdGVySW52YWxpZE5vZGUgfHxcbiAgICAgIG5vZGUgaW5zdGFuY2VvZiBCaW5Ob2RlIHx8XG4gICAgICBub2RlIGluc3RhbmNlb2YgVGltZVVuaXROb2RlIHx8XG4gICAgICBub2RlIGluc3RhbmNlb2YgU3RhY2tOb2RlKSB7XG4gICAgICBkYXRhU291cmNlLnRyYW5zZm9ybSA9IGRhdGFTb3VyY2UudHJhbnNmb3JtLmNvbmNhdChub2RlLmFzc2VtYmxlKCkpO1xuICAgIH1cblxuICAgIGlmIChub2RlIGluc3RhbmNlb2YgQWdncmVnYXRlTm9kZSkge1xuICAgICAgaWYgKCFkYXRhU291cmNlLm5hbWUpIHtcbiAgICAgICAgZGF0YVNvdXJjZS5uYW1lID0gYGRhdGFfJHtkYXRhc2V0SW5kZXgrK31gO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub2RlIGluc3RhbmNlb2YgT3V0cHV0Tm9kZSkge1xuICAgICAgaWYgKGRhdGFTb3VyY2Uuc291cmNlICYmIGRhdGFTb3VyY2UudHJhbnNmb3JtLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBub2RlLnNldFNvdXJjZShkYXRhU291cmNlLnNvdXJjZSk7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUucGFyZW50IGluc3RhbmNlb2YgT3V0cHV0Tm9kZSkge1xuICAgICAgICAvLyBOb3RlIHRoYXQgYW4gb3V0cHV0IG5vZGUgbWF5IGJlIHJlcXVpcmVkIGJ1dCB3ZSBzdGlsbCBkbyBub3QgYXNzZW1ibGUgYVxuICAgICAgICAvLyBzZXBhcmF0ZSBkYXRhIHNvdXJjZSBmb3IgaXQuXG4gICAgICAgIG5vZGUuc2V0U291cmNlKGRhdGFTb3VyY2UubmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWRhdGFTb3VyY2UubmFtZSkge1xuICAgICAgICAgIGRhdGFTb3VyY2UubmFtZSA9IGBkYXRhXyR7ZGF0YXNldEluZGV4Kyt9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhlcmUgd2Ugc2V0IHRoZSBuYW1lIG9mIHRoZSBkYXRhc291cmNlIHdlIGdlbmVyYXRlZC4gRnJvbSBub3cgb25cbiAgICAgICAgLy8gb3RoZXIgYXNzZW1ibGVycyBjYW4gdXNlIGl0LlxuICAgICAgICBub2RlLnNldFNvdXJjZShkYXRhU291cmNlLm5hbWUpO1xuXG4gICAgICAgIC8vIGlmIHRoaXMgbm9kZSBoYXMgbW9yZSB0aGFuIG9uZSBjaGlsZCwgd2Ugd2lsbCBhZGQgYSBkYXRhc291cmNlIGF1dG9tYXRpY2FsbHlcbiAgICAgICAgaWYgKG5vZGUubnVtQ2hpbGRyZW4oKSA9PT0gMSkge1xuICAgICAgICAgIGRhdGEucHVzaChkYXRhU291cmNlKTtcbiAgICAgICAgICBjb25zdCBuZXdEYXRhOiBWZ0RhdGEgPSB7XG4gICAgICAgICAgICBuYW1lOiBudWxsLFxuICAgICAgICAgICAgc291cmNlOiBkYXRhU291cmNlLm5hbWUsXG4gICAgICAgICAgICB0cmFuc2Zvcm06IFtdXG4gICAgICAgICAgfTtcbiAgICAgICAgICBkYXRhU291cmNlID0gbmV3RGF0YTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAobm9kZS5udW1DaGlsZHJlbigpKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIC8vIGRvbmVcbiAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBPdXRwdXROb2RlICYmICghZGF0YVNvdXJjZS5zb3VyY2UgfHwgZGF0YVNvdXJjZS50cmFuc2Zvcm0ubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAvLyBkbyBub3QgcHVzaCBlbXB0eSBkYXRhc291cmNlcyB0aGF0IGFyZSBzaW1wbHkgcmVmZXJlbmNlc1xuICAgICAgICAgIGRhdGEucHVzaChkYXRhU291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgd2Fsa1RyZWUobm9kZS5jaGlsZHJlblswXSwgZGF0YVNvdXJjZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKCFkYXRhU291cmNlLm5hbWUpIHtcbiAgICAgICAgICBkYXRhU291cmNlLm5hbWUgPSBgZGF0YV8ke2RhdGFzZXRJbmRleCsrfWA7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc291cmNlID0gZGF0YVNvdXJjZS5uYW1lO1xuICAgICAgICBpZiAoIWRhdGFTb3VyY2Uuc291cmNlIHx8IGRhdGFTb3VyY2UudHJhbnNmb3JtLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBkYXRhLnB1c2goZGF0YVNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc291cmNlID0gZGF0YVNvdXJjZS5zb3VyY2U7XG4gICAgICAgIH1cblxuICAgICAgICBub2RlLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld0RhdGE6IFZnRGF0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogW11cbiAgICAgICAgICB9O1xuICAgICAgICAgIHdhbGtUcmVlKGNoaWxkLCBuZXdEYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB3YWxrVHJlZTtcbn1cblxuLyoqXG4gKiBBc3NlbWJsZSBkYXRhIHNvdXJjZXMgdGhhdCBhcmUgZGVyaXZlZCBmcm9tIGZhY2V0ZWQgZGF0YS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlRmFjZXREYXRhKHJvb3Q6IEZhY2V0Tm9kZSk6IFZnRGF0YVtdIHtcbiAgY29uc3QgZGF0YTogVmdEYXRhW10gPSBbXTtcbiAgY29uc3Qgd2Fsa1RyZWUgPSBtYWtlV2Fsa1RyZWUoZGF0YSk7XG5cbiAgcm9vdC5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHdhbGtUcmVlKGNoaWxkLCB7XG4gICAgc291cmNlOiByb290Lm5hbWUsXG4gICAgbmFtZTogbnVsbCxcbiAgICB0cmFuc2Zvcm06IFtdXG4gIH0pKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgVmVnYSBEYXRhIGFycmF5IGZyb20gYSBnaXZlbiBjb21waWxlZCBtb2RlbCBhbmQgYXBwZW5kIGFsbCBvZiB0aGVtIHRvIHRoZSBnaXZlbiBhcnJheVxuICpcbiAqIEBwYXJhbSAgbW9kZWxcbiAqIEBwYXJhbSAgZGF0YSBhcnJheVxuICogQHJldHVybiBtb2RpZmllZCBkYXRhIGFycmF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlbWJsZVJvb3REYXRhKGRhdGFDb21wb25lbnQ6IERhdGFDb21wb25lbnQsIGRhdGFzZXRzOiBEaWN0PElubGluZURhdGFzZXQ+KTogVmdEYXRhW10ge1xuICBjb25zdCByb290czogU291cmNlTm9kZVtdID0gdmFscyhkYXRhQ29tcG9uZW50LnNvdXJjZXMpO1xuICBjb25zdCBkYXRhOiBWZ0RhdGFbXSA9IFtdO1xuXG4gIC8vIHJvb3RzLmZvckVhY2goZGVidWcpO1xuXG4gIGNvbnN0IHdhbGtUcmVlID0gbWFrZVdhbGtUcmVlKGRhdGEpO1xuXG4gIGxldCBzb3VyY2VJbmRleCA9IDA7XG5cbiAgcm9vdHMuZm9yRWFjaChyb290ID0+IHtcbiAgICAvLyBhc3NpZ24gYSBuYW1lIGlmIHRoZSBzb3VyY2UgZG9lcyBub3QgaGF2ZSBhIG5hbWUgeWV0XG4gICAgaWYgKCFyb290Lmhhc05hbWUoKSkge1xuICAgICAgcm9vdC5kYXRhTmFtZSA9IGBzb3VyY2VfJHtzb3VyY2VJbmRleCsrfWA7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3RGF0YTogVmdEYXRhID0gcm9vdC5hc3NlbWJsZSgpO1xuXG4gICAgd2Fsa1RyZWUocm9vdCwgbmV3RGF0YSk7XG4gIH0pO1xuXG4gIC8vIHJlbW92ZSBlbXB0eSB0cmFuc2Zvcm0gYXJyYXlzIGZvciBjbGVhbmVyIG91dHB1dFxuICBkYXRhLmZvckVhY2goZCA9PiB7XG4gICAgaWYgKGQudHJhbnNmb3JtLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGVsZXRlIGQudHJhbnNmb3JtO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gbW92ZSBzb3VyY2VzIHdpdGhvdXQgdHJhbnNmb3JtcyAodGhlIG9uZXMgdGhhdCBhcmUgcG90ZW50aWFsbHkgdXNlZCBpbiBsb29rdXBzKSB0byB0aGUgYmVnaW5uaW5nXG4gIGxldCB3aGVyZVRvID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZCA9IGRhdGFbaV07XG4gICAgaWYgKChkLnRyYW5zZm9ybSB8fCBbXSkubGVuZ3RoID09PSAwICYmICFkLnNvdXJjZSkge1xuICAgICAgZGF0YS5zcGxpY2Uod2hlcmVUbysrLCAwLCBkYXRhLnNwbGljZShpLCAxKVswXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gbm93IGZpeCB0aGUgZnJvbSByZWZlcmVuY2VzIGluIGxvb2t1cCB0cmFuc2Zvcm1zXG4gIGZvciAoY29uc3QgZCBvZiBkYXRhKSB7XG4gICAgZm9yIChjb25zdCB0IG9mIGQudHJhbnNmb3JtIHx8IFtdKSB7XG4gICAgICBpZiAodC50eXBlID09PSAnbG9va3VwJykge1xuICAgICAgICB0LmZyb20gPSBkYXRhQ29tcG9uZW50Lm91dHB1dE5vZGVzW3QuZnJvbV0uZ2V0U291cmNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gaW5saW5lIHZhbHVlcyBmb3IgZGF0YXNldHMgdGhhdCBhcmUgaW4gdGhlIGRhdGFzdG9yZVxuICBmb3IgKGNvbnN0IGQgb2YgZGF0YSkge1xuICAgIGlmIChkLm5hbWUgaW4gZGF0YXNldHMpIHtcbiAgICAgIGQudmFsdWVzID0gZGF0YXNldHNbZC5uYW1lXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { hasConditionalFieldDef, isConditionalDef, isFieldDef, isRepeatRef } from '../fielddef';\nimport * as log from '../log';\nimport { isSortField } from '../sort';\nexport function replaceRepeaterInFacet(facet, repeater) {\n    return replaceRepeater(facet, repeater);\n}\nexport function replaceRepeaterInEncoding(encoding, repeater) {\n    return replaceRepeater(encoding, repeater);\n}\n/**\n * Replaces repeated value and returns if the repeated value is valid.\n */\nfunction replaceRepeat(o, repeater) {\n    if (isRepeatRef(o.field)) {\n        if (o.field.repeat in repeater) {\n            // any needed to calm down ts compiler\n            return tslib_1.__assign({}, o, { field: repeater[o.field.repeat] });\n        }\n        else {\n            log.warn(log.message.noSuchRepeatedValue(o.field.repeat));\n            return undefined;\n        }\n    }\n    return o;\n}\n/**\n * Replace repeater values in a field def with the concrete field name.\n */\nfunction replaceRepeaterInFieldDef(fieldDef, repeater) {\n    fieldDef = replaceRepeat(fieldDef, repeater);\n    if (fieldDef === undefined) {\n        // the field def should be ignored\n        return undefined;\n    }\n    if (fieldDef.sort && isSortField(fieldDef.sort)) {\n        var sort = replaceRepeat(fieldDef.sort, repeater);\n        fieldDef = tslib_1.__assign({}, fieldDef, (sort ? { sort: sort } : {}));\n    }\n    return fieldDef;\n}\nfunction replaceRepeaterInChannelDef(channelDef, repeater) {\n    if (isFieldDef(channelDef)) {\n        var fd = replaceRepeaterInFieldDef(channelDef, repeater);\n        if (fd) {\n            return fd;\n        }\n        else if (isConditionalDef(channelDef)) {\n            return { condition: channelDef.condition };\n        }\n    }\n    else {\n        if (hasConditionalFieldDef(channelDef)) {\n            var fd = replaceRepeaterInFieldDef(channelDef.condition, repeater);\n            if (fd) {\n                return tslib_1.__assign({}, channelDef, { condition: fd });\n            }\n            else {\n                var condition = channelDef.condition, channelDefWithoutCondition = tslib_1.__rest(channelDef, [\"condition\"]);\n                return channelDefWithoutCondition;\n            }\n        }\n        return channelDef;\n    }\n    return undefined;\n}\nfunction replaceRepeater(mapping, repeater) {\n    var out = {};\n    for (var channel in mapping) {\n        if (mapping.hasOwnProperty(channel)) {\n            var channelDef = mapping[channel];\n            if (isArray(channelDef)) {\n                // array cannot have condition\n                out[channel] = channelDef.map(function (cd) { return replaceRepeaterInChannelDef(cd, repeater); })\n                    .filter(function (cd) { return cd; });\n            }\n            else {\n                var cd = replaceRepeaterInChannelDef(channelDef, repeater);\n                if (cd) {\n                    out[channel] = cd;\n                }\n            }\n        }\n    }\n    return out;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { COLUMN, ROW } from '../channel';\nimport { reduce } from '../encoding';\nimport { normalize, title as fieldDefTitle, vgField } from '../fielddef';\nimport * as log from '../log';\nimport { hasDiscreteDomain } from '../scale';\nimport { contains } from '../util';\nimport { isVgRangeStep } from '../vega.schema';\nimport { assembleAxis } from './axis/assemble';\nimport { buildModel } from './buildmodel';\nimport { assembleFacetData } from './data/assemble';\nimport { parseData } from './data/parse';\nimport { getHeaderType } from './layout/header';\nimport { parseChildrenLayoutSize } from './layoutsize/parse';\nimport { ModelWithField } from './model';\nimport { replaceRepeaterInFacet } from './repeater';\nimport { parseGuideResolve } from './resolve';\nimport { assembleDomain, getFieldFromDomain } from './scale/domain';\nvar FacetModel = /** @class */ (function (_super) {\n    tslib_1.__extends(FacetModel, _super);\n    function FacetModel(spec, parent, parentGivenName, repeater, config) {\n        var _this = _super.call(this, spec, parent, parentGivenName, config, repeater, spec.resolve) || this;\n        _this.type = 'facet';\n        _this.child = buildModel(spec.spec, _this, _this.getName('child'), undefined, repeater, config, false);\n        _this.children = [_this.child];\n        var facet = replaceRepeaterInFacet(spec.facet, repeater);\n        _this.facet = _this.initFacet(facet);\n        return _this;\n    }\n    FacetModel.prototype.initFacet = function (facet) {\n        // clone to prevent side effect to the original spec\n        return reduce(facet, function (normalizedFacet, fieldDef, channel) {\n            if (!contains([ROW, COLUMN], channel)) {\n                // Drop unsupported channel\n                log.warn(log.message.incompatibleChannel(channel, 'facet'));\n                return normalizedFacet;\n            }\n            if (fieldDef.field === undefined) {\n                log.warn(log.message.emptyFieldDef(fieldDef, channel));\n                return normalizedFacet;\n            }\n            // Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n            normalizedFacet[channel] = normalize(fieldDef, channel);\n            return normalizedFacet;\n        }, {});\n    };\n    FacetModel.prototype.channelHasField = function (channel) {\n        return !!this.facet[channel];\n    };\n    FacetModel.prototype.fieldDef = function (channel) {\n        return this.facet[channel];\n    };\n    FacetModel.prototype.parseData = function () {\n        this.component.data = parseData(this);\n        this.child.parseData();\n    };\n    FacetModel.prototype.parseLayoutSize = function () {\n        parseChildrenLayoutSize(this);\n    };\n    FacetModel.prototype.parseSelection = function () {\n        // As a facet has a single child, the selection components are the same.\n        // The child maintains its selections to assemble signals, which remain\n        // within its unit.\n        this.child.parseSelection();\n        this.component.selection = this.child.component.selection;\n    };\n    FacetModel.prototype.parseMarkGroup = function () {\n        this.child.parseMarkGroup();\n    };\n    FacetModel.prototype.parseAxisAndHeader = function () {\n        this.child.parseAxisAndHeader();\n        this.parseHeader('column');\n        this.parseHeader('row');\n        this.mergeChildAxis('x');\n        this.mergeChildAxis('y');\n    };\n    FacetModel.prototype.parseHeader = function (channel) {\n        if (this.channelHasField(channel)) {\n            var fieldDef = this.facet[channel];\n            var header = fieldDef.header || {};\n            var title = fieldDef.title !== undefined ? fieldDef.title :\n                header.title !== undefined ? header.title : fieldDefTitle(fieldDef, this.config);\n            if (this.child.component.layoutHeaders[channel].title) {\n                // merge title with child to produce \"Title / Subtitle / Sub-subtitle\"\n                title += ' / ' + this.child.component.layoutHeaders[channel].title;\n                this.child.component.layoutHeaders[channel].title = null;\n            }\n            this.component.layoutHeaders[channel] = {\n                title: title,\n                facetFieldDef: fieldDef,\n                // TODO: support adding label to footer as well\n                header: [this.makeHeaderComponent(channel, true)]\n            };\n        }\n    };\n    FacetModel.prototype.makeHeaderComponent = function (channel, labels) {\n        var sizeType = channel === 'row' ? 'height' : 'width';\n        return {\n            labels: labels,\n            sizeSignal: this.child.component.layoutSize.get(sizeType) ? this.child.getSizeSignalRef(sizeType) : undefined,\n            axes: []\n        };\n    };\n    FacetModel.prototype.mergeChildAxis = function (channel) {\n        var child = this.child;\n        if (child.component.axes[channel]) {\n            var _a = this.component, layoutHeaders = _a.layoutHeaders, resolve = _a.resolve;\n            resolve.axis[channel] = parseGuideResolve(resolve, channel);\n            if (resolve.axis[channel] === 'shared') {\n                // For shared axis, move the axes to facet's header or footer\n                var headerChannel = channel === 'x' ? 'column' : 'row';\n                var layoutHeader = layoutHeaders[headerChannel];\n                for (var _i = 0, _b = child.component.axes[channel]; _i < _b.length; _i++) {\n                    var axisComponent = _b[_i];\n                    var headerType = getHeaderType(axisComponent.get('orient'));\n                    layoutHeader[headerType] = layoutHeader[headerType] ||\n                        [this.makeHeaderComponent(headerChannel, false)];\n                    var mainAxis = assembleAxis(axisComponent, 'main', this.config, { header: true });\n                    // LayoutHeader no longer keep track of property precedence, thus let's combine.\n                    layoutHeader[headerType][0].axes.push(mainAxis);\n                    axisComponent.mainExtracted = true;\n                }\n            }\n            else {\n                // Otherwise do nothing for independent axes\n            }\n        }\n    };\n    FacetModel.prototype.assembleSelectionTopLevelSignals = function (signals) {\n        return this.child.assembleSelectionTopLevelSignals(signals);\n    };\n    FacetModel.prototype.assembleSelectionSignals = function () {\n        this.child.assembleSelectionSignals();\n        return [];\n    };\n    FacetModel.prototype.assembleSelectionData = function (data) {\n        return this.child.assembleSelectionData(data);\n    };\n    FacetModel.prototype.getLayoutBandMixins = function (headerType) {\n        var bandMixins = {};\n        var bandType = headerType === 'header' ? 'headerBand' : 'footerBand';\n        for (var _i = 0, _a = ['row', 'column']; _i < _a.length; _i++) {\n            var channel = _a[_i];\n            var layoutHeaderComponent = this.component.layoutHeaders[channel];\n            var headerComponent = layoutHeaderComponent[headerType];\n            if (headerComponent && headerComponent[0]) {\n                var sizeType = channel === 'row' ? 'height' : 'width';\n                if (!this.child.component.layoutSize.get(sizeType)) {\n                    // If facet child does not have size signal, then apply headerBand\n                    bandMixins[bandType] = bandMixins[bandType] || {};\n                    bandMixins[bandType][channel] = 0.5;\n                }\n            }\n        }\n        return bandMixins;\n    };\n    FacetModel.prototype.assembleLayout = function () {\n        var columns = this.channelHasField('column') ? this.columnDistinctSignal() : 1;\n        // TODO: determine default align based on shared / independent scales\n        return tslib_1.__assign({ padding: { row: 10, column: 10 } }, this.getLayoutBandMixins('header'), this.getLayoutBandMixins('footer'), { \n            // TODO: support offset for rowHeader/rowFooter/rowTitle/columnHeader/columnFooter/columnTitle\n            offset: 10, columns: columns, bounds: 'full', align: 'all' });\n    };\n    FacetModel.prototype.assembleLayoutSignals = function () {\n        // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.\n        return this.child.assembleLayoutSignals();\n    };\n    FacetModel.prototype.columnDistinctSignal = function () {\n        if (this.parent && (this.parent instanceof FacetModel)) {\n            // For nested facet, we will add columns to group mark instead\n            // See discussion in https://github.com/vega/vega/issues/952\n            // and https://github.com/vega/vega-view/releases/tag/v1.2.6\n            return undefined;\n        }\n        else {\n            // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.\n            var facetLayoutDataName = this.getName('column_domain');\n            return { signal: \"length(data('\" + facetLayoutDataName + \"'))\" };\n        }\n    };\n    FacetModel.prototype.assembleGroup = function (signals) {\n        if (this.parent && (this.parent instanceof FacetModel)) {\n            // Provide number of columns for layout.\n            // See discussion in https://github.com/vega/vega/issues/952\n            // and https://github.com/vega/vega-view/releases/tag/v1.2.6\n            return tslib_1.__assign({}, (this.channelHasField('column') ? {\n                encode: {\n                    update: {\n                        // TODO(https://github.com/vega/vega-lite/issues/2759):\n                        // Correct the signal for facet of concat of facet_column\n                        columns: { field: vgField(this.facet.column, { prefix: 'distinct' }) }\n                    }\n                }\n            } : {}), _super.prototype.assembleGroup.call(this, signals));\n        }\n        return _super.prototype.assembleGroup.call(this, signals);\n    };\n    /**\n     * Aggregate cardinality for calculating size\n     */\n    FacetModel.prototype.getCardinalityAggregateForChild = function () {\n        var fields = [];\n        var ops = [];\n        if (this.child instanceof FacetModel) {\n            if (this.child.channelHasField('column')) {\n                fields.push(vgField(this.child.facet.column));\n                ops.push('distinct');\n            }\n        }\n        else {\n            for (var _i = 0, _a = ['x', 'y']; _i < _a.length; _i++) {\n                var channel = _a[_i];\n                var childScaleComponent = this.child.component.scales[channel];\n                if (childScaleComponent && !childScaleComponent.merged) {\n                    var type = childScaleComponent.get('type');\n                    var range = childScaleComponent.get('range');\n                    if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                        var domain = assembleDomain(this.child, channel);\n                        var field = getFieldFromDomain(domain);\n                        if (field) {\n                            fields.push(field);\n                            ops.push('distinct');\n                        }\n                        else {\n                            log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                        }\n                    }\n                }\n            }\n        }\n        return fields.length ? { fields: fields, ops: ops } : undefined;\n    };\n    FacetModel.prototype.assembleMarks = function () {\n        var _a = this, child = _a.child, facet = _a.facet;\n        var facetRoot = this.component.data.facetRoot;\n        var data = assembleFacetData(facetRoot);\n        // If we facet by two dimensions, we need to add a cross operator to the aggregation\n        // so that we create all groups\n        var hasRow = this.channelHasField(ROW);\n        var hasColumn = this.channelHasField(COLUMN);\n        var layoutSizeEncodeEntry = child.assembleLayoutSize();\n        var aggregateMixins = {};\n        if (hasRow && hasColumn) {\n            aggregateMixins.aggregate = { cross: true };\n        }\n        var cardinalityAggregateForChild = this.getCardinalityAggregateForChild();\n        if (cardinalityAggregateForChild) {\n            aggregateMixins.aggregate = tslib_1.__assign({}, aggregateMixins.aggregate, cardinalityAggregateForChild);\n        }\n        var title = child.assembleTitle();\n        var style = child.assembleGroupStyle();\n        var markGroup = tslib_1.__assign({ name: this.getName('cell'), type: 'group' }, (title ? { title: title } : {}), (style ? { style: style } : {}), { from: {\n                facet: tslib_1.__assign({ name: facetRoot.name, data: facetRoot.data, groupby: [].concat(hasRow ? [this.vgField(ROW)] : [], hasColumn ? [this.vgField(COLUMN)] : []) }, aggregateMixins)\n            }, sort: {\n                field: [].concat(hasRow ? [this.vgField(ROW, { expr: 'datum', })] : [], hasColumn ? [this.vgField(COLUMN, { expr: 'datum' })] : []),\n                order: [].concat(hasRow ? [(facet.row.sort) || 'ascending'] : [], hasColumn ? [(facet.column.sort) || 'ascending'] : [])\n            } }, (data.length > 0 ? { data: data } : {}), (layoutSizeEncodeEntry ? { encode: { update: layoutSizeEncodeEntry } } : {}), child.assembleGroup());\n        return [markGroup];\n    };\n    FacetModel.prototype.getMapping = function () {\n        return this.facet;\n    };\n    return FacetModel;\n}(ModelWithField));\nexport { FacetModel };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { duplicate } from '../../util';\nimport { Split } from '../split';\nfunction isFalseOrNull(v) {\n    return v === false || v === null;\n}\nvar AxisComponent = /** @class */ (function (_super) {\n    tslib_1.__extends(AxisComponent, _super);\n    function AxisComponent(explicit, implicit, mainExtracted) {\n        if (explicit === void 0) { explicit = {}; }\n        if (implicit === void 0) { implicit = {}; }\n        if (mainExtracted === void 0) { mainExtracted = false; }\n        var _this = _super.call(this) || this;\n        _this.explicit = explicit;\n        _this.implicit = implicit;\n        _this.mainExtracted = mainExtracted;\n        return _this;\n    }\n    AxisComponent.prototype.clone = function () {\n        return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);\n    };\n    AxisComponent.prototype.hasAxisPart = function (part) {\n        // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.\n        if (part === 'axis') { // always has the axis container part\n            return true;\n        }\n        if (part === 'grid' || part === 'title') {\n            return !!this.get(part);\n        }\n        // Other parts are enabled by default, so they should not be false or null.\n        return !isFalseOrNull(this.get(part));\n    };\n    return AxisComponent;\n}(Split));\nexport { AxisComponent };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvYXhpcy9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFBQyxTQUFTLEVBQU8sTUFBTSxZQUFZLENBQUM7QUFFM0MsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUcvQix1QkFBdUIsQ0FBaUI7SUFDdEMsT0FBTyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUM7QUFDbkMsQ0FBQztBQU9EO0lBQW1DLHlDQUF5QjtJQUMxRCx1QkFDa0IsUUFBMEMsRUFDMUMsUUFBMEMsRUFDbkQsYUFBcUI7UUFGWix5QkFBQSxFQUFBLGFBQTBDO1FBQzFDLHlCQUFBLEVBQUEsYUFBMEM7UUFDbkQsOEJBQUEsRUFBQSxxQkFBcUI7UUFIOUIsWUFLRSxpQkFBTyxTQUNSO1FBTGlCLGNBQVEsR0FBUixRQUFRLENBQWtDO1FBQzFDLGNBQVEsR0FBUixRQUFRLENBQWtDO1FBQ25ELG1CQUFhLEdBQWIsYUFBYSxDQUFROztJQUc5QixDQUFDO0lBRU0sNkJBQUssR0FBWjtRQUNFLE9BQU8sSUFBSSxhQUFhLENBQ3RCLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQ3hCLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FDN0MsQ0FBQztJQUNKLENBQUM7SUFFTSxtQ0FBVyxHQUFsQixVQUFtQixJQUFjO1FBQy9CLDJHQUEyRztRQUUzRyxJQUFJLElBQUksS0FBSyxNQUFNLEVBQUUsRUFBRSxxQ0FBcUM7WUFDMUQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksSUFBSSxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssT0FBTyxFQUFFO1lBQ3ZDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDekI7UUFDRCwyRUFBMkU7UUFDM0UsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQTdCRCxDQUFtQyxLQUFLLEdBNkJ2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXhpcywgQXhpc1BhcnR9IGZyb20gJy4uLy4uL2F4aXMnO1xuaW1wb3J0IHtGaWVsZERlZkJhc2V9IGZyb20gJy4uLy4uL2ZpZWxkZGVmJztcbmltcG9ydCB7ZHVwbGljYXRlLCBPbWl0fSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VmdBeGlzfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge1NwbGl0fSBmcm9tICcuLi9zcGxpdCc7XG5cblxuZnVuY3Rpb24gaXNGYWxzZU9yTnVsbCh2OiBib29sZWFuIHwgbnVsbCkge1xuICByZXR1cm4gdiA9PT0gZmFsc2UgfHwgdiA9PT0gbnVsbDtcbn1cblxuZXhwb3J0IHR5cGUgQXhpc0NvbXBvbmVudFByb3BzID0gT21pdDxWZ0F4aXMsICd0aXRsZSc+ICYge1xuXG4gIHRpdGxlOiBzdHJpbmcgfCBGaWVsZERlZkJhc2U8c3RyaW5nPltdO1xufTtcblxuZXhwb3J0IGNsYXNzIEF4aXNDb21wb25lbnQgZXh0ZW5kcyBTcGxpdDxBeGlzQ29tcG9uZW50UHJvcHM+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGV4cGxpY2l0OiBQYXJ0aWFsPEF4aXNDb21wb25lbnRQcm9wcz4gPSB7fSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgaW1wbGljaXQ6IFBhcnRpYWw8QXhpc0NvbXBvbmVudFByb3BzPiA9IHt9LFxuICAgIHB1YmxpYyBtYWluRXh0cmFjdGVkID0gZmFsc2VcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IEF4aXNDb21wb25lbnQoXG4gICAgICBkdXBsaWNhdGUodGhpcy5leHBsaWNpdCksXG4gICAgICBkdXBsaWNhdGUodGhpcy5pbXBsaWNpdCksIHRoaXMubWFpbkV4dHJhY3RlZFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgaGFzQXhpc1BhcnQocGFydDogQXhpc1BhcnQpIHtcbiAgICAvLyBGSVhNRShodHRwczovL2dpdGh1Yi5jb20vdmVnYS92ZWdhLWxpdGUvaXNzdWVzLzI1NTIpIHRoaXMgbWV0aG9kIGNhbiBiZSB3cm9uZyBpZiB1c2VycyB1c2UgYSBWZWdhIHRoZW1lLlxuXG4gICAgaWYgKHBhcnQgPT09ICdheGlzJykgeyAvLyBhbHdheXMgaGFzIHRoZSBheGlzIGNvbnRhaW5lciBwYXJ0XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocGFydCA9PT0gJ2dyaWQnIHx8IHBhcnQgPT09ICd0aXRsZScpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuZ2V0KHBhcnQpO1xuICAgIH1cbiAgICAvLyBPdGhlciBwYXJ0cyBhcmUgZW5hYmxlZCBieSBkZWZhdWx0LCBzbyB0aGV5IHNob3VsZCBub3QgYmUgZmFsc2Ugb3IgbnVsbC5cbiAgICByZXR1cm4gIWlzRmFsc2VPck51bGwodGhpcy5nZXQocGFydCkpO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXhpc0NvbXBvbmVudEluZGV4IHtcbiAgeD86IEF4aXNDb21wb25lbnRbXTtcbiAgeT86IEF4aXNDb21wb25lbnRbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBeGlzSW5kZXgge1xuICB4PzogQXhpcztcbiAgeT86IEF4aXM7XG59XG4iXX0=","export function getAxisConfig(property, config, channel, orient, scaleType) {\n    if (orient === void 0) { orient = ''; }\n    // configTypes to loop, starting from higher precedence\n    var configTypes = (scaleType === 'band' ? ['axisBand'] : []).concat([\n        channel === 'x' ? 'axisX' : 'axisY',\n        'axis' + orient.substr(0, 1).toUpperCase() + orient.substr(1),\n        'axis'\n    ]);\n    for (var _i = 0, configTypes_1 = configTypes; _i < configTypes_1.length; _i++) {\n        var configType = configTypes_1[_i];\n        if (config[configType] && config[configType][property] !== undefined) {\n            return config[configType][property];\n        }\n    }\n    return undefined;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvYXhpcy9jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSx3QkFBd0IsUUFBZ0IsRUFBRSxNQUFjLEVBQUUsT0FBNkIsRUFBRSxNQUFtQixFQUFFLFNBQW9CO0lBQXpDLHVCQUFBLEVBQUEsV0FBbUI7SUFDaEgsdURBQXVEO0lBQ3ZELElBQU0sV0FBVyxHQUFHLENBQUMsU0FBUyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3BFLE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTztRQUNuQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDNUQsTUFBTTtLQUNQLENBQUMsQ0FBQztJQUNILEtBQXlCLFVBQVcsRUFBWCwyQkFBVyxFQUFYLHlCQUFXLEVBQVgsSUFBVztRQUEvQixJQUFNLFVBQVUsb0JBQUE7UUFDbkIsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNwRSxPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNyQztLQUNGO0lBRUQsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UG9zaXRpb25TY2FsZUNoYW5uZWx9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtDb25maWd9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQge1NjYWxlVHlwZX0gZnJvbSAnLi4vLi4vc2NhbGUnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXhpc0NvbmZpZyhwcm9wZXJ0eTogc3RyaW5nLCBjb25maWc6IENvbmZpZywgY2hhbm5lbDogUG9zaXRpb25TY2FsZUNoYW5uZWwsIG9yaWVudDogc3RyaW5nID0gJycsIHNjYWxlVHlwZTogU2NhbGVUeXBlKSB7XG4gIC8vIGNvbmZpZ1R5cGVzIHRvIGxvb3AsIHN0YXJ0aW5nIGZyb20gaGlnaGVyIHByZWNlZGVuY2VcbiAgY29uc3QgY29uZmlnVHlwZXMgPSAoc2NhbGVUeXBlID09PSAnYmFuZCcgPyBbJ2F4aXNCYW5kJ10gOiBbXSkuY29uY2F0KFtcbiAgICBjaGFubmVsID09PSAneCcgPyAnYXhpc1gnIDogJ2F4aXNZJyxcbiAgICAnYXhpcycgKyBvcmllbnQuc3Vic3RyKDAsMSkudG9VcHBlckNhc2UoKSArIG9yaWVudC5zdWJzdHIoMSksIC8vIGF4aXNUb3AsIGF4aXNCb3R0b20sIC4uLlxuICAgICdheGlzJ1xuICBdKTtcbiAgZm9yIChjb25zdCBjb25maWdUeXBlIG9mIGNvbmZpZ1R5cGVzKSB7XG4gICAgaWYgKGNvbmZpZ1tjb25maWdUeXBlXSAmJiBjb25maWdbY29uZmlnVHlwZV1bcHJvcGVydHldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBjb25maWdbY29uZmlnVHlwZV1bcHJvcGVydHldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { X } from '../../channel';\nimport { isTimeFieldDef } from '../../fielddef';\nimport { ScaleType } from '../../scale';\nimport { NOMINAL, ORDINAL } from '../../type';\nimport { contains, keys } from '../../util';\nimport { timeFormatExpression } from '../common';\nimport { getAxisConfig } from './config';\nexport function labels(model, channel, specifiedLabelsSpec, orient) {\n    var fieldDef = model.fieldDef(channel) ||\n        (channel === 'x' ? model.fieldDef('x2') :\n            channel === 'y' ? model.fieldDef('y2') :\n                undefined);\n    var axis = model.axis(channel);\n    var config = model.config;\n    var labelsSpec = {};\n    // Text\n    if (isTimeFieldDef(fieldDef)) {\n        var isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;\n        labelsSpec.text = {\n            signal: timeFormatExpression('datum.value', fieldDef.timeUnit, axis.format, config.axis.shortTimeLabels, config.timeFormat, isUTCScale)\n        };\n    }\n    // Label Angle\n    var angle = getAxisConfig('labelAngle', model.config, channel, orient, model.getScaleComponent(channel).get('type'));\n    if (angle === undefined) {\n        angle = labelAngle(axis, channel, fieldDef);\n        if (angle) {\n            labelsSpec.angle = { value: angle };\n        }\n    }\n    if (angle !== undefined) {\n        var align = labelAlign(angle, orient);\n        if (align) {\n            labelsSpec.align = { value: align };\n        }\n        labelsSpec.baseline = labelBaseline(angle, orient);\n    }\n    labelsSpec = tslib_1.__assign({}, labelsSpec, specifiedLabelsSpec);\n    return keys(labelsSpec).length === 0 ? undefined : labelsSpec;\n}\nexport function labelBaseline(angle, orient) {\n    if (orient === 'top' || orient === 'bottom') {\n        if (angle <= 45 || 315 <= angle) {\n            return { value: orient === 'top' ? 'bottom' : 'top' };\n        }\n        else if (135 <= angle && angle <= 225) {\n            return { value: orient === 'top' ? 'top' : 'bottom' };\n        }\n        else {\n            return { value: 'middle' };\n        }\n    }\n    else {\n        if ((angle <= 45 || 315 <= angle) || (135 <= angle && angle <= 225)) {\n            return { value: 'middle' };\n        }\n        else if (45 <= angle && angle <= 135) {\n            return { value: orient === 'left' ? 'top' : 'bottom' };\n        }\n        else {\n            return { value: orient === 'left' ? 'bottom' : 'top' };\n        }\n    }\n}\nexport function labelAngle(axis, channel, fieldDef) {\n    if (axis.labelAngle !== undefined) {\n        // Make angle within [0,360)\n        return ((axis.labelAngle % 360) + 360) % 360;\n    }\n    else {\n        if (channel === X && contains([NOMINAL, ORDINAL], fieldDef.type)) {\n            return 270;\n        }\n    }\n    return undefined;\n}\nexport function labelAlign(angle, orient) {\n    angle = ((angle % 360) + 360) % 360;\n    if (orient === 'top' || orient === 'bottom') {\n        if (angle % 180 === 0) {\n            return 'center';\n        }\n        else if (0 < angle && angle < 180) {\n            return orient === 'top' ? 'right' : 'left';\n        }\n        else {\n            return orient === 'top' ? 'left' : 'right';\n        }\n    }\n    else {\n        if ((angle + 90) % 180 === 0) {\n            return 'center';\n        }\n        else if (90 <= angle && angle < 270) {\n            return orient === 'left' ? 'left' : 'right';\n        }\n        else {\n            return orient === 'left' ? 'right' : 'left';\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { AXIS_PARTS, isAxisProperty, VG_AXIS_PROPERTIES } from '../../axis';\nimport { POSITION_SCALE_CHANNELS, X, Y } from '../../channel';\nimport { toFieldDefBase } from '../../fielddef';\nimport { keys } from '../../util';\nimport { getSpecifiedOrDefaultValue, mergeTitleFieldDefs, numberFormat, titleMerger } from '../common';\nimport { parseGuideResolve } from '../resolve';\nimport { defaultTieBreaker, mergeValuesWithExplicit } from '../split';\nimport { AxisComponent } from './component';\nimport { getAxisConfig } from './config';\nimport * as encode from './encode';\nimport * as properties from './properties';\nexport function parseUnitAxis(model) {\n    return POSITION_SCALE_CHANNELS.reduce(function (axis, channel) {\n        if (model.component.scales[channel] && model.axis(channel)) {\n            axis[channel] = [parseAxis(channel, model)];\n        }\n        return axis;\n    }, {});\n}\nvar OPPOSITE_ORIENT = {\n    bottom: 'top',\n    top: 'bottom',\n    left: 'right',\n    right: 'left'\n};\nexport function parseLayerAxis(model) {\n    var _a = model.component, axes = _a.axes, resolve = _a.resolve;\n    var axisCount = { top: 0, bottom: 0, right: 0, left: 0 };\n    for (var _i = 0, _b = model.children; _i < _b.length; _i++) {\n        var child = _b[_i];\n        child.parseAxisAndHeader();\n        for (var _c = 0, _d = keys(child.component.axes); _c < _d.length; _c++) {\n            var channel = _d[_c];\n            resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);\n            if (resolve.axis[channel] === 'shared') {\n                // If the resolve says shared (and has not been overridden)\n                // We will try to merge and see if there is a conflict\n                axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);\n                if (!axes[channel]) {\n                    // If merge returns nothing, there is a conflict so we cannot make the axis shared.\n                    // Thus, mark axis as independent and remove the axis component.\n                    resolve.axis[channel] = 'independent';\n                    delete axes[channel];\n                }\n            }\n        }\n    }\n    // Move axes to layer's axis component and merge shared axes\n    for (var _e = 0, _f = [X, Y]; _e < _f.length; _e++) {\n        var channel = _f[_e];\n        for (var _g = 0, _h = model.children; _g < _h.length; _g++) {\n            var child = _h[_g];\n            if (!child.component.axes[channel]) {\n                // skip if the child does not have a particular axis\n                continue;\n            }\n            if (resolve.axis[channel] === 'independent') {\n                // If axes are independent, concat the axisComponent array.\n                axes[channel] = (axes[channel] || []).concat(child.component.axes[channel]);\n                // Automatically adjust orient\n                for (var _j = 0, _k = child.component.axes[channel]; _j < _k.length; _j++) {\n                    var axisComponent = _k[_j];\n                    var _l = axisComponent.getWithExplicit('orient'), orient = _l.value, explicit = _l.explicit;\n                    if (axisCount[orient] > 0 && !explicit) {\n                        // Change axis orient if the number do not match\n                        var oppositeOrient = OPPOSITE_ORIENT[orient];\n                        if (axisCount[orient] > axisCount[oppositeOrient]) {\n                            axisComponent.set('orient', oppositeOrient, false);\n                        }\n                    }\n                    axisCount[orient]++;\n                }\n            }\n            // After merging, make sure to remove axes from child\n            delete child.component.axes[channel];\n        }\n    }\n}\nfunction mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {\n    if (mergedAxisCmpts) {\n        // FIXME: this is a bit wrong once we support multiple axes\n        if (mergedAxisCmpts.length !== childAxisCmpts.length) {\n            return undefined; // Cannot merge axis component with different number of axes.\n        }\n        var length_1 = mergedAxisCmpts.length;\n        for (var i = 0; i < length_1; i++) {\n            var merged = mergedAxisCmpts[i];\n            var child = childAxisCmpts[i];\n            if ((!!merged) !== (!!child)) {\n                return undefined;\n            }\n            else if (merged && child) {\n                var mergedOrient = merged.getWithExplicit('orient');\n                var childOrient = child.getWithExplicit('orient');\n                if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n                    // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n                    // Cannot merge due to inconsistent orient\n                    return undefined;\n                }\n                else {\n                    mergedAxisCmpts[i] = mergeAxisComponent(merged, child);\n                }\n            }\n        }\n    }\n    else {\n        // For first one, return a copy of the child\n        return childAxisCmpts.map(function (axisComponent) { return axisComponent.clone(); });\n    }\n    return mergedAxisCmpts;\n}\nfunction mergeAxisComponent(merged, child) {\n    var _loop_1 = function (prop) {\n        var mergedValueWithExplicit = mergeValuesWithExplicit(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', \n        // Tie breaker function\n        function (v1, v2) {\n            switch (prop) {\n                case 'title':\n                    return titleMerger(v1, v2);\n                case 'gridScale':\n                    return {\n                        explicit: v1.explicit,\n                        value: v1.value || v2.value\n                    };\n            }\n            return defaultTieBreaker(v1, v2, prop, 'axis');\n        });\n        merged.setWithExplicit(prop, mergedValueWithExplicit);\n    };\n    for (var _i = 0, VG_AXIS_PROPERTIES_1 = VG_AXIS_PROPERTIES; _i < VG_AXIS_PROPERTIES_1.length; _i++) {\n        var prop = VG_AXIS_PROPERTIES_1[_i];\n        _loop_1(prop);\n    }\n    return merged;\n}\nfunction parseAxis(channel, model) {\n    var axis = model.axis(channel);\n    var axisComponent = new AxisComponent();\n    // 1.2. Add properties\n    VG_AXIS_PROPERTIES.forEach(function (property) {\n        var value = getProperty(property, axis, channel, model);\n        if (value !== undefined) {\n            var explicit = \n            // specified axis.values is already respected, but may get transformed.\n            property === 'values' ? !!axis.values :\n                // both VL axis.encoding and axis.labelAngle affect VG axis.encode\n                property === 'encode' ? !!axis.encoding || !!axis.labelAngle :\n                    value === axis[property];\n            var configValue = getAxisConfig(property, model.config, channel, axisComponent.get('orient'), model.getScaleComponent(channel).get('type'));\n            // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)\n            if (explicit || configValue === undefined) {\n                // Do not apply implicit rule if there is a config value\n                axisComponent.set(property, value, explicit);\n            }\n        }\n    });\n    // 2) Add guide encode definition groups\n    var axisEncoding = axis.encoding || {};\n    var axisEncode = AXIS_PARTS.reduce(function (e, part) {\n        if (!axisComponent.hasAxisPart(part)) {\n            // No need to create encode for a disabled part.\n            return e;\n        }\n        var value = part === 'labels' ?\n            encode.labels(model, channel, axisEncoding.labels || {}, axisComponent.get('orient')) :\n            axisEncoding[part] || {};\n        if (value !== undefined && keys(value).length > 0) {\n            e[part] = { update: value };\n        }\n        return e;\n    }, {});\n    // FIXME: By having encode as one property, we won't have fine grained encode merging.\n    if (keys(axisEncode).length > 0) {\n        axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);\n    }\n    return axisComponent;\n}\nfunction getProperty(property, specifiedAxis, channel, model) {\n    var fieldDef = model.fieldDef(channel);\n    switch (property) {\n        case 'scale':\n            return model.scaleName(channel);\n        case 'gridScale':\n            return properties.gridScale(model, channel);\n        case 'format':\n            // We don't include temporal field here as we apply format in encode block\n            return numberFormat(fieldDef, specifiedAxis.format, model.config);\n        case 'grid': {\n            var scaleType = model.getScaleComponent(channel).get('type');\n            return getSpecifiedOrDefaultValue(specifiedAxis.grid, properties.grid(scaleType, fieldDef));\n        }\n        case 'labelFlush':\n            return properties.labelFlush(fieldDef, channel, specifiedAxis);\n        case 'labelOverlap': {\n            var scaleType = model.getScaleComponent(channel).get('type');\n            return properties.labelOverlap(fieldDef, specifiedAxis, channel, scaleType);\n        }\n        case 'orient':\n            return getSpecifiedOrDefaultValue(specifiedAxis.orient, properties.orient(channel));\n        case 'tickCount': {\n            var scaleType = model.getScaleComponent(channel).get('type');\n            var sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n            var size = sizeType ? model.getSizeSignalRef(sizeType)\n                : undefined;\n            return getSpecifiedOrDefaultValue(specifiedAxis.tickCount, properties.tickCount(channel, fieldDef, scaleType, size));\n        }\n        case 'title':\n            var channel2 = channel === 'x' ? 'x2' : 'y2';\n            var fieldDef2 = model.fieldDef(channel2);\n            // Keep undefined so we use default if title is unspecified.\n            // For other falsy value, keep them so we will hide the title.\n            var specifiedTitle = fieldDef.title !== undefined ? fieldDef.title :\n                specifiedAxis.title === undefined ? undefined : specifiedAxis.title;\n            return getSpecifiedOrDefaultValue(specifiedTitle, \n            // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)\n            mergeTitleFieldDefs([toFieldDefBase(fieldDef)], fieldDef2 ? [toFieldDefBase(fieldDef2)] : []));\n        case 'values':\n            return properties.values(specifiedAxis, model, fieldDef, channel);\n    }\n    // Otherwise, return specified property.\n    return isAxisProperty(property) ? specifiedAxis[property] : undefined;\n}\n//# sourceMappingURL=data:application/json;base64,","import { truncate } from 'vega-util';\nimport { binToString } from '../../bin';\nimport { X, Y } from '../../channel';\nimport { dateTimeExpr, isDateTime } from '../../datetime';\nimport { title as fieldDefTitle } from '../../fielddef';\nimport * as log from '../../log';\nimport { hasDiscreteDomain, isSelectionDomain } from '../../scale';\nimport { QUANTITATIVE } from '../../type';\nimport { contains } from '../../util';\n// TODO: we need to refactor this method after we take care of config refactoring\n/**\n * Default rules for whether to show a grid should be shown for a channel.\n * If `grid` is unspecified, the default value is `true` for ordinal scales that are not binned\n */\nexport function grid(scaleType, fieldDef) {\n    return !hasDiscreteDomain(scaleType) && !fieldDef.bin;\n}\nexport function gridScale(model, channel) {\n    var gridChannel = channel === 'x' ? 'y' : 'x';\n    if (model.getScaleComponent(gridChannel)) {\n        return model.scaleName(gridChannel);\n    }\n    return undefined;\n}\nexport function labelFlush(fieldDef, channel, specifiedAxis) {\n    if (specifiedAxis.labelFlush !== undefined) {\n        return specifiedAxis.labelFlush;\n    }\n    if (channel === 'x' && contains(['quantitative', 'temporal'], fieldDef.type)) {\n        return true;\n    }\n    return undefined;\n}\nexport function labelOverlap(fieldDef, specifiedAxis, channel, scaleType) {\n    if (specifiedAxis.labelOverlap !== undefined) {\n        return specifiedAxis.labelOverlap;\n    }\n    // do not prevent overlap for nominal data because there is no way to infer what the missing labels are\n    if (fieldDef.type !== 'nominal') {\n        if (scaleType === 'log') {\n            return 'greedy';\n        }\n        return true;\n    }\n    return undefined;\n}\nexport function orient(channel) {\n    switch (channel) {\n        case X:\n            return 'bottom';\n        case Y:\n            return 'left';\n    }\n    /* istanbul ignore next: This should never happen. */\n    throw new Error(log.message.INVALID_CHANNEL_FOR_AXIS);\n}\nexport function tickCount(channel, fieldDef, scaleType, size) {\n    if (!hasDiscreteDomain(scaleType) && scaleType !== 'log' && !contains(['month', 'hours', 'day', 'quarter'], fieldDef.timeUnit)) {\n        if (fieldDef.bin) {\n            // for binned data, we don't want more ticks than maxbins\n            return { signal: \"ceil(\" + size.signal + \"/20)\" };\n        }\n        return { signal: \"ceil(\" + size.signal + \"/40)\" };\n    }\n    return undefined;\n}\nexport function title(maxLength, fieldDef, config) {\n    // if not defined, automatically determine axis title from field def\n    var fieldTitle = fieldDefTitle(fieldDef, config);\n    return maxLength ? truncate(fieldTitle, maxLength) : fieldTitle;\n}\nexport function values(specifiedAxis, model, fieldDef, channel) {\n    var vals = specifiedAxis.values;\n    if (specifiedAxis.values && isDateTime(vals[0])) {\n        return vals.map(function (dt) {\n            // normalize = true as end user won't put 0 = January\n            return { signal: dateTimeExpr(dt, true) };\n        });\n    }\n    if (!vals && fieldDef.bin && fieldDef.type === QUANTITATIVE) {\n        var domain = model.scaleDomain(channel);\n        if (domain && domain !== 'unaggregated' && !isSelectionDomain(domain)) { // explicit value\n            return vals;\n        }\n        var signal = model.getName(binToString(fieldDef.bin) + \"_\" + fieldDef.field + \"_bins\");\n        return { signal: \"sequence(\" + signal + \".start, \" + signal + \".stop + \" + signal + \".step, \" + signal + \".step)\" };\n    }\n    return vals;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isAggregate } from '../../encoding';\nimport { isContinuous, isFieldDef } from '../../fielddef';\nimport * as log from '../../log';\nimport { AREA, BAR, CIRCLE, isMarkDef, LINE, POINT, RECT, RULE, SQUARE, TEXT, TICK } from '../../mark';\nimport { TEMPORAL } from '../../type';\nimport { contains } from '../../util';\nimport { getMarkConfig } from '../common';\nexport function normalizeMarkDef(mark, encoding, config) {\n    var markDef = isMarkDef(mark) ? tslib_1.__assign({}, mark) : { type: mark };\n    // set orient, which can be overridden by rules as sometimes the specified orient is invalid.\n    var specifiedOrient = markDef.orient || getMarkConfig('orient', markDef, config);\n    markDef.orient = orient(markDef.type, encoding, specifiedOrient);\n    if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) {\n        log.warn(log.message.orientOverridden(markDef.orient, specifiedOrient));\n    }\n    // set opacity and filled if not specified in mark config\n    var specifiedOpacity = markDef.opacity !== undefined ? markDef.opacity : getMarkConfig('opacity', markDef, config);\n    if (specifiedOpacity === undefined) {\n        markDef.opacity = defaultOpacity(markDef.type, encoding);\n    }\n    var specifiedFilled = markDef.filled;\n    if (specifiedFilled === undefined) {\n        markDef.filled = filled(markDef, config);\n    }\n    return markDef;\n}\nfunction defaultOpacity(mark, encoding) {\n    if (contains([POINT, TICK, CIRCLE, SQUARE], mark)) {\n        // point-based marks\n        if (!isAggregate(encoding)) {\n            return 0.7;\n        }\n    }\n    return undefined;\n}\nfunction filled(markDef, config) {\n    var filledConfig = getMarkConfig('filled', markDef, config);\n    var mark = markDef.type;\n    return filledConfig !== undefined ? filledConfig : mark !== POINT && mark !== LINE && mark !== RULE;\n}\nfunction orient(mark, encoding, specifiedOrient) {\n    switch (mark) {\n        case POINT:\n        case CIRCLE:\n        case SQUARE:\n        case TEXT:\n        case RECT:\n            // orient is meaningless for these marks.\n            return undefined;\n    }\n    var yIsRange = encoding.y2;\n    var xIsRange = encoding.x2;\n    switch (mark) {\n        case RULE:\n            // return undefined for line segment rule\n            if (xIsRange && yIsRange) {\n                return undefined;\n            }\n        /* tslint:disable */\n        // intentional fall through\n        case BAR:\n        case AREA:\n            // If there are range for both x and y, y (vertical) has higher precedence.\n            if (yIsRange) {\n                return 'vertical';\n            }\n            else if (xIsRange) {\n                return 'horizontal';\n            }\n            else if (mark === RULE) {\n                if (encoding.x && !encoding.y) {\n                    return 'vertical';\n                }\n                else if (encoding.y && !encoding.x) {\n                    return 'horizontal';\n                }\n            }\n        case LINE: // intentional fall through\n        case TICK: // Tick is opposite to bar, line, area and never have ranged mark.\n            /* tslint:enable */\n            var xIsContinuous = isFieldDef(encoding.x) && isContinuous(encoding.x);\n            var yIsContinuous = isFieldDef(encoding.y) && isContinuous(encoding.y);\n            if (xIsContinuous && !yIsContinuous) {\n                return mark !== 'tick' ? 'horizontal' : 'vertical';\n            }\n            else if (!xIsContinuous && yIsContinuous) {\n                return mark !== 'tick' ? 'vertical' : 'horizontal';\n            }\n            else if (xIsContinuous && yIsContinuous) {\n                var xDef = encoding.x; // we can cast here since they are surely fieldDef\n                var yDef = encoding.y;\n                var xIsTemporal = xDef.type === TEMPORAL;\n                var yIsTemporal = yDef.type === TEMPORAL;\n                // temporal without timeUnit is considered continuous, but better serves as dimension\n                if (xIsTemporal && !yIsTemporal) {\n                    return mark !== 'tick' ? 'vertical' : 'horizontal';\n                }\n                else if (!xIsTemporal && yIsTemporal) {\n                    return mark !== 'tick' ? 'horizontal' : 'vertical';\n                }\n                if (!xDef.aggregate && yDef.aggregate) {\n                    return mark !== 'tick' ? 'vertical' : 'horizontal';\n                }\n                else if (xDef.aggregate && !yDef.aggregate) {\n                    return mark !== 'tick' ? 'horizontal' : 'vertical';\n                }\n                if (specifiedOrient) {\n                    // When ambiguous, use user specified one.\n                    return specifiedOrient;\n                }\n                if (!(mark === LINE && encoding.order)) {\n                    // Except for connected scatterplot, we should log warning for unclear orientation of QxQ plots.\n                    log.warn(log.message.unclearOrientContinuous(mark));\n                }\n                return 'vertical';\n            }\n            else {\n                // For Discrete x Discrete case, return undefined.\n                log.warn(log.message.unclearOrientDiscreteOrEmpty(mark));\n                return undefined;\n            }\n    }\n    return 'vertical';\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isNumber } from 'vega-util';\nimport { X, Y } from '../../channel';\nimport { isFieldDef } from '../../fielddef';\nimport * as log from '../../log';\nimport { hasDiscreteDomain, ScaleType } from '../../scale';\nimport { isVgRangeStep } from '../../vega.schema';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport var bar = {\n    vgMark: 'rect',\n    encodeEntry: function (model) {\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), x(model), y(model));\n    }\n};\nfunction x(model) {\n    var config = model.config, encoding = model.encoding, markDef = model.markDef, width = model.width;\n    var orient = markDef.orient;\n    var sizeDef = encoding.size;\n    var xDef = encoding.x;\n    var xScaleName = model.scaleName(X);\n    var xScale = model.getScaleComponent(X);\n    // x, x2, and width -- we must specify two of these in all conditions\n    if (orient === 'horizontal') {\n        return tslib_1.__assign({}, mixins.pointPosition('x', model, 'zeroOrMin'), mixins.pointPosition2(model, 'zeroOrMin'));\n    }\n    else { // vertical\n        if (isFieldDef(xDef)) {\n            var xScaleType = xScale.get('type');\n            if (xDef.bin && !sizeDef && !hasDiscreteDomain(xScaleType)) {\n                return mixins.binnedPosition(xDef, 'x', model.scaleName('x'), markDef.binSpacing === undefined ? config.bar.binSpacing : markDef.binSpacing, xScale.get('reverse'));\n            }\n            else {\n                if (xScaleType === ScaleType.BAND) {\n                    return mixins.bandPosition(xDef, 'x', model);\n                }\n            }\n        }\n        // sized bin, normal point-ordinal axis, quantitative x-axis, or no x\n        return mixins.centeredBandPosition('x', model, tslib_1.__assign({}, ref.mid(width)), defaultSizeRef(markDef, xScaleName, xScale, config));\n    }\n}\nfunction y(model) {\n    var config = model.config, encoding = model.encoding, height = model.height, markDef = model.markDef;\n    var orient = markDef.orient;\n    var sizeDef = encoding.size;\n    var yDef = encoding.y;\n    var yScaleName = model.scaleName(Y);\n    var yScale = model.getScaleComponent(Y);\n    // y, y2 & height -- we must specify two of these in all conditions\n    if (orient === 'vertical') {\n        return tslib_1.__assign({}, mixins.pointPosition('y', model, 'zeroOrMin'), mixins.pointPosition2(model, 'zeroOrMin'));\n    }\n    else {\n        if (isFieldDef(yDef)) {\n            var yScaleType = yScale.get('type');\n            if (yDef.bin && !sizeDef && !hasDiscreteDomain(yScaleType)) {\n                return mixins.binnedPosition(yDef, 'y', model.scaleName('y'), markDef.binSpacing === undefined ? config.bar.binSpacing : markDef.binSpacing, yScale.get('reverse'));\n            }\n            else if (yScaleType === ScaleType.BAND) {\n                return mixins.bandPosition(yDef, 'y', model);\n            }\n        }\n        return mixins.centeredBandPosition('y', model, ref.mid(height), defaultSizeRef(markDef, yScaleName, yScale, config));\n    }\n}\nfunction defaultSizeRef(markDef, scaleName, scale, config) {\n    if (markDef.size !== undefined) {\n        return { value: markDef.size };\n    }\n    else if (config.bar.discreteBandSize) {\n        return { value: config.bar.discreteBandSize };\n    }\n    else if (scale) {\n        var scaleType = scale.get('type');\n        if (scaleType === ScaleType.POINT) {\n            var scaleRange = scale.get('range');\n            if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\n                return { value: scaleRange.step - 1 };\n            }\n            log.warn(log.message.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL);\n        }\n        else if (scaleType === ScaleType.BAND) {\n            return ref.bandRef(scaleName);\n        }\n        else { // non-ordinal scale\n            return { value: config.bar.continuousBandSize };\n        }\n    }\n    else if (config.scale.rangeStep && config.scale.rangeStep !== null) {\n        return { value: config.scale.rangeStep - 1 };\n    }\n    return { value: 20 };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvbWFyay9iYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFbkMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sS0FBSyxHQUFHLE1BQU0sV0FBVyxDQUFDO0FBRWpDLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxTQUFTLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDekQsT0FBTyxFQUFDLGFBQWEsRUFBZ0IsTUFBTSxtQkFBbUIsQ0FBQztBQUsvRCxPQUFPLEtBQUssTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUNuQyxPQUFPLEtBQUssR0FBRyxNQUFNLFlBQVksQ0FBQztBQUdsQyxNQUFNLENBQUMsSUFBTSxHQUFHLEdBQWlCO0lBQy9CLE1BQU0sRUFBRSxNQUFNO0lBQ2QsV0FBVyxFQUFFLFVBQUMsS0FBZ0I7UUFDNUIsNEJBQ0ssTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsQ0FBQyxFQUNqRSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQ1IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUNYO0lBQ0osQ0FBQztDQUNGLENBQUM7QUFFRixXQUFXLEtBQWdCO0lBQ2xCLElBQUEscUJBQU0sRUFBRSx5QkFBUSxFQUFFLHVCQUFPLEVBQUUsbUJBQUssQ0FBVTtJQUNqRCxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQzlCLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFFOUIsSUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztJ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VUFBVSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUMsQ0FBQzthQUNyQztZQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1NBQy9EO2FBQU0sSUFBSSxTQUFTLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRTtZQUN2QyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDL0I7YUFBTSxFQUFFLG9CQUFvQjtZQUMzQixPQUFPLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUMsQ0FBQztTQUMvQztLQUNGO1NBQU0sSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsS0FBSyxJQUFJLEVBQUU7UUFDcEUsT0FBTyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLEVBQUMsQ0FBQztLQUM1QztJQUNELE9BQU8sRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFDLENBQUM7QUFDckIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNOdW1iZXJ9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5pbXBvcnQge1gsIFl9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtDb25maWd9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQge2lzRmllbGREZWZ9IGZyb20gJy4uLy4uL2ZpZWxkZGVmJztcbmltcG9ydCAqIGFzIGxvZyBmcm9tICcuLi8uLi9sb2cnO1xuaW1wb3J0IHtNYXJrRGVmfSBmcm9tICcuLi8uLi9tYXJrJztcbmltcG9ydCB7aGFzRGlzY3JldGVEb21haW4sIFNjYWxlVHlwZX0gZnJvbSAnLi4vLi4vc2NhbGUnO1xuaW1wb3J0IHtpc1ZnUmFuZ2VTdGVwLCBWZ0VuY29kZUVudHJ5fSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge1ZnVmFsdWVSZWZ9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7U2NhbGVDb21wb25lbnR9IGZyb20gJy4uL3NjYWxlL2NvbXBvbmVudCc7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQge01hcmtDb21waWxlcn0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCAqIGFzIG1peGlucyBmcm9tICcuL21peGlucyc7XG5pbXBvcnQgKiBhcyByZWYgZnJvbSAnLi92YWx1ZXJlZic7XG5cblxuZXhwb3J0IGNvbnN0IGJhcjogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdyZWN0JyxcbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm1peGlucy5iYXNlRW5jb2RlRW50cnkobW9kZWwsIHtzaXplOiAnaWdub3JlJywgb3JpZW50OiAnaWdub3JlJ30pLFxuICAgICAgLi4ueChtb2RlbCksXG4gICAgICAuLi55KG1vZGVsKSxcbiAgICB9O1xuICB9XG59O1xuXG5mdW5jdGlvbiB4KG1vZGVsOiBVbml0TW9kZWwpOiBWZ0VuY29kZUVudHJ5IHtcbiAgY29uc3Qge2NvbmZpZywgZW5jb2RpbmcsIG1hcmtEZWYsIHdpZHRofSA9IG1vZGVsO1xuICBjb25zdCBvcmllbnQgPSBtYXJrRGVmLm9yaWVudDtcbiAgY29uc3Qgc2l6ZURlZiA9IGVuY29kaW5nLnNpemU7XG5cbiAgY29uc3QgeERlZiA9IGVuY29kaW5nLng7XG4gIGNvbnN0IHhTY2FsZU5hbWUgPSBtb2RlbC5zY2FsZU5hbWUoWCk7XG4gIGNvbnN0IHhTY2FsZSA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KFgpO1xuICAvLyB4LCB4MiwgYW5kIHdpZHRoIC0tIHdlIG11c3Qgc3BlY2lmeSB0d28gb2YgdGhlc2UgaW4gYWxsIGNvbmRpdGlvbnNcbiAgaWYgKG9yaWVudCA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd4JywgbW9kZWwsICd6ZXJvT3JNaW4nKSxcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uMihtb2RlbCwgJ3plcm9Pck1pbicpLFxuICAgIH07XG4gIH0gZWxzZSB7IC8vIHZlcnRpY2FsXG4gICAgaWYgKGlzRmllbGREZWYoeERlZikpIHtcbiAgICAgIGNvbnN0IHhTY2FsZVR5cGUgPSB4U2NhbGUuZ2V0KCd0eXBlJyk7XG4gICAgICBpZiAoeERlZi5iaW4gJiYgIXNpemVEZWYgJiYgIWhhc0Rpc2NyZXRlRG9tYWluKHhTY2FsZVR5cGUpKSB7XG4gICAgICAgIHJldHVybiBtaXhpbnMuYmlubmVkUG9zaXRpb24oXG4gICAgICAgICAgeERlZiwgJ3gnLCBtb2RlbC5zY2FsZU5hbWUoJ3gnKSwgbWFya0RlZi5iaW5TcGFjaW5nID09PSB1bmRlZmluZWQgPyBjb25maWcuYmFyLmJpblNwYWNpbmcgOiBtYXJrRGVmLmJpblNwYWNpbmcsXG4gICAgICAgICAgeFNjYWxlLmdldCgncmV2ZXJzZScpXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoeFNjYWxlVHlwZSA9PT0gU2NhbGVUeXBlLkJBTkQpIHtcbiAgICAgICAgICByZXR1cm4gbWl4aW5zLmJhbmRQb3NpdGlvbih4RGVmLCAneCcsIG1vZGVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBzaXplZCBiaW4sIG5vcm1hbCBwb2ludC1vcmRpbmFsIGF4aXMsIHF1YW50aXRhdGl2ZSB4LWF4aXMsIG9yIG5vIHhcblxuICAgIHJldHVybiBtaXhpbnMuY2VudGVyZWRCYW5kUG9zaXRpb24oJ3gnLCBtb2RlbCxcbiAgICAgIHsuLi5yZWYubWlkKHdpZHRoKX0sXG4gICAgICBkZWZhdWx0U2l6ZVJlZihtYXJrRGVmLCB4U2NhbGVOYW1lLCB4U2NhbGUsIGNvbmZpZylcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHkobW9kZWw6IFVuaXRNb2RlbCkge1xuICBjb25zdCB7Y29uZmlnLCBlbmNvZGluZywgaGVpZ2h0LCBtYXJrRGVmfSA9IG1vZGVsO1xuICBjb25zdCBvcmllbnQgPSBtYXJrRGVmLm9yaWVudDtcbiAgY29uc3Qgc2l6ZURlZiA9IGVuY29kaW5nLnNpemU7XG5cbiAgY29uc3QgeURlZiA9IGVuY29kaW5nLnk7XG4gIGNvbnN0IHlTY2FsZU5hbWUgPSBtb2RlbC5zY2FsZU5hbWUoWSk7XG4gIGNvbnN0IHlTY2FsZSA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KFkpO1xuICAvLyB5LCB5MiAmIGhlaWdodCAtLSB3ZSBtdXN0IHNwZWNpZnkgdHdvIG9mIHRoZXNlIGluIGFsbCBjb25kaXRpb25zXG4gIGlmIChvcmllbnQgPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3knLCBtb2RlbCwgJ3plcm9Pck1pbicpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24yKG1vZGVsLCAnemVyb09yTWluJyksXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNGaWVsZERlZih5RGVmKSkge1xuICAgICAgY29uc3QgeVNjYWxlVHlwZSA9IHlTY2FsZS5nZXQoJ3R5cGUnKTtcbiAgICAgIGlmICh5RGVmLmJpbiAmJiAhc2l6ZURlZiAmJiAhaGFzRGlzY3JldGVEb21haW4oeVNjYWxlVHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIG1peGlucy5iaW5uZWRQb3NpdGlvbihcbiAgICAgICAgICB5RGVmLCAneScsIG1vZGVsLnNjYWxlTmFtZSgneScpLFxuICAgICAgICAgIG1hcmtEZWYuYmluU3BhY2luZyA9PT0gdW5kZWZpbmVkID8gY29uZmlnLmJhci5iaW5TcGFjaW5nIDogbWFya0RlZi5iaW5TcGFjaW5nLFxuICAgICAgICAgIHlTY2FsZS5nZXQoJ3JldmVyc2UnKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmICh5U2NhbGVUeXBlID09PSBTY2FsZVR5cGUuQkFORCkge1xuICAgICAgICByZXR1cm4gbWl4aW5zLmJhbmRQb3NpdGlvbih5RGVmLCAneScsIG1vZGVsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1peGlucy5jZW50ZXJlZEJhbmRQb3NpdGlvbigneScsIG1vZGVsLCByZWYubWlkKGhlaWdodCksXG4gICAgICBkZWZhdWx0U2l6ZVJlZihtYXJrRGVmLCB5U2NhbGVOYW1lLCB5U2NhbGUsIGNvbmZpZylcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRTaXplUmVmKG1hcmtEZWY6IE1hcmtEZWYsIHNjYWxlTmFtZTogc3RyaW5nLCBzY2FsZTogU2NhbGVDb21wb25lbnQsIGNvbmZpZzogQ29uZmlnKTogVmdWYWx1ZVJlZiB7XG4gIGlmIChtYXJrRGVmLnNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7dmFsdWU6IG1hcmtEZWYuc2l6ZX07XG4gIH0gZWxzZSBpZiAoY29uZmlnLmJhci5kaXNjcmV0ZUJhbmRTaXplKSB7XG4gICAgcmV0dXJuIHt2YWx1ZTogY29uZmlnLmJhci5kaXNjcmV0ZUJhbmRTaXplfTtcbiAgfSBlbHNlIGlmIChzY2FsZSkge1xuICAgIGNvbnN0IHNjYWxlVHlwZSA9IHNjYWxlLmdldCgndHlwZScpO1xuICAgIGlmIChzY2FsZVR5cGUgPT09IFNjYWxlVHlwZS5QT0lOVCkge1xuICAgICAgY29uc3Qgc2NhbGVSYW5nZSA9IHNjYWxlLmdldCgncmFuZ2UnKTtcbiAgICAgIGlmIChpc1ZnUmFuZ2VTdGVwKHNjYWxlUmFuZ2UpICYmIGlzTnVtYmVyKHNjYWxlUmFuZ2Uuc3RlcCkpIHtcbiAgICAgICAgcmV0dXJuIHt2YWx1ZTogc2NhbGVSYW5nZS5zdGVwIC0gMX07XG4gICAgICB9XG4gICAgICBsb2cud2Fybihsb2cubWVzc2FnZS5CQVJfV0lUSF9QT0lOVF9TQ0FMRV9BTkRfUkFOR0VTVEVQX05VTEwpO1xuICAgIH0gZWxzZSBpZiAoc2NhbGVUeXBlID09PSBTY2FsZVR5cGUuQkFORCkge1xuICAgICAgcmV0dXJuIHJlZi5iYW5kUmVmKHNjYWxlTmFtZSk7XG4gICAgfSBlbHNlIHsgLy8gbm9uLW9yZGluYWwgc2NhbGVcbiAgICAgIHJldHVybiB7dmFsdWU6IGNvbmZpZy5iYXIuY29udGludW91c0JhbmRTaXplfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY29uZmlnLnNjYWxlLnJhbmdlU3RlcCAmJiBjb25maWcuc2NhbGUucmFuZ2VTdGVwICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHt2YWx1ZTogY29uZmlnLnNjYWxlLnJhbmdlU3RlcCAtIDF9O1xuICB9XG4gIHJldHVybiB7dmFsdWU6IDIwfTtcbn1cblxuIl19","import * as tslib_1 from \"tslib\";\nimport { getMarkConfig } from '../common';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nfunction encodeEntry(model, fixedShape) {\n    var config = model.config, width = model.width, height = model.height;\n    return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'include', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model), shapeMixins(model, config, fixedShape));\n}\nexport function shapeMixins(model, config, fixedShape) {\n    if (fixedShape) {\n        return { shape: { value: fixedShape } };\n    }\n    return mixins.nonPosition('shape', model, { defaultValue: getMarkConfig('shape', model.markDef, config) });\n}\nexport var point = {\n    vgMark: 'symbol',\n    encodeEntry: function (model) {\n        return encodeEntry(model);\n    }\n};\nexport var circle = {\n    vgMark: 'symbol',\n    encodeEntry: function (model) {\n        return encodeEntry(model, 'circle');\n    }\n};\nexport var square = {\n    vgMark: 'symbol',\n    encodeEntry: function (model) {\n        return encodeEntry(model, 'square');\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9tYXJrL3BvaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBR3hDLE9BQU8sS0FBSyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBQ25DLE9BQU8sS0FBSyxHQUFHLE1BQU0sWUFBWSxDQUFDO0FBR2xDLHFCQUFxQixLQUFnQixFQUFFLFVBQWdDO0lBQzlELElBQUEscUJBQU0sRUFBRSxtQkFBSyxFQUFFLHFCQUFNLENBQVU7SUFFdEMsNEJBQ0ssTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsQ0FBQyxFQUNsRSxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUNoRCxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUNqRCxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFDakMsV0FBVyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDLEVBQ3pDO0FBQ0osQ0FBQztBQUVELE1BQU0sc0JBQXNCLEtBQWdCLEVBQUUsTUFBYyxFQUFFLFVBQWdDO0lBQzVGLElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxFQUFDLEtBQUssRUFBRSxFQUFDLEtBQUssRUFBRSxVQUFVLEVBQUMsRUFBQyxDQUFDO0tBQ3JDO0lBQ0QsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBVyxFQUFDLENBQUMsQ0FBQztBQUNySCxDQUFDO0FBRUQsTUFBTSxDQUFDLElBQU0sS0FBSyxHQUFpQjtJQUNqQyxNQUFNLEVBQUUsUUFBUTtJQUNoQixXQUFXLEVBQUUsVUFBQyxLQUFnQjtRQUM1QixPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0NBQ0YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLE1BQU0sR0FBaUI7SUFDbEMsTUFBTSxFQUFFLFFBQVE7SUFDaEIsV0FBVyxFQUFFLFVBQUMsS0FBZ0I7UUFDNUIsT0FBTyxXQUFXLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sTUFBTSxHQUFpQjtJQUNsQyxNQUFNLEVBQUUsUUFBUTtJQUNoQixXQUFXLEVBQUUsVUFBQyxLQUFnQjtRQUM1QixPQUFPLFdBQVcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbmZpZ30gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7VmdFbmNvZGVFbnRyeX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtnZXRNYXJrQ29uZmlnfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0IHtNYXJrQ29tcGlsZXJ9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgKiBhcyBtaXhpbnMgZnJvbSAnLi9taXhpbnMnO1xuaW1wb3J0ICogYXMgcmVmIGZyb20gJy4vdmFsdWVyZWYnO1xuXG5cbmZ1bmN0aW9uIGVuY29kZUVudHJ5KG1vZGVsOiBVbml0TW9kZWwsIGZpeGVkU2hhcGU/OiAnY2lyY2xlJyB8ICdzcXVhcmUnKSB7XG4gIGNvbnN0IHtjb25maWcsIHdpZHRoLCBoZWlnaHR9ID0gbW9kZWw7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5taXhpbnMuYmFzZUVuY29kZUVudHJ5KG1vZGVsLCB7c2l6ZTogJ2luY2x1ZGUnLCBvcmllbnQ6ICdpZ25vcmUnfSksXG4gICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3gnLCBtb2RlbCwgcmVmLm1pZCh3aWR0aCkpLFxuICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd5JywgbW9kZWwsIHJlZi5taWQoaGVpZ2h0KSksXG4gICAgLi4ubWl4aW5zLm5vblBvc2l0aW9uKCdzaXplJywgbW9kZWwpLFxuICAgIC4uLnNoYXBlTWl4aW5zKG1vZGVsLCBjb25maWcsIGZpeGVkU2hhcGUpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hhcGVNaXhpbnMobW9kZWw6IFVuaXRNb2RlbCwgY29uZmlnOiBDb25maWcsIGZpeGVkU2hhcGU/OiAnY2lyY2xlJyB8ICdzcXVhcmUnKTogVmdFbmNvZGVFbnRyeSB7XG4gIGlmIChmaXhlZFNoYXBlKSB7XG4gICAgcmV0dXJuIHtzaGFwZToge3ZhbHVlOiBmaXhlZFNoYXBlfX07XG4gIH1cbiAgcmV0dXJuIG1peGlucy5ub25Qb3NpdGlvbignc2hhcGUnLCBtb2RlbCwge2RlZmF1bHRWYWx1ZTogZ2V0TWFya0NvbmZpZygnc2hhcGUnLCBtb2RlbC5tYXJrRGVmLCBjb25maWcpIGFzIHN0cmluZ30pO1xufVxuXG5leHBvcnQgY29uc3QgcG9pbnQ6IE1hcmtDb21waWxlciA9IHtcbiAgdmdNYXJrOiAnc3ltYm9sJyxcbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgcmV0dXJuIGVuY29kZUVudHJ5KG1vZGVsKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNpcmNsZTogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdzeW1ib2wnLFxuICBlbmNvZGVFbnRyeTogKG1vZGVsOiBVbml0TW9kZWwpID0+IHtcbiAgICByZXR1cm4gZW5jb2RlRW50cnkobW9kZWwsICdjaXJjbGUnKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHNxdWFyZTogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdzeW1ib2wnLFxuICBlbmNvZGVFbnRyeTogKG1vZGVsOiBVbml0TW9kZWwpID0+IHtcbiAgICByZXR1cm4gZW5jb2RlRW50cnkobW9kZWwsICdzcXVhcmUnKTtcbiAgfVxufTtcbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { MAIN } from '../../data';\nimport { isAggregate } from '../../encoding';\nimport { getFieldDef, isFieldDef, isValueDef, vgField } from '../../fielddef';\nimport { AREA, isPathMark, LINE, TRAIL } from '../../mark';\nimport { isSortField } from '../../sort';\nimport { contains, keys } from '../../util';\nimport { getStyles, sortParams } from '../common';\nimport { area } from './area';\nimport { bar } from './bar';\nimport { geoshape } from './geoshape';\nimport { line, trail } from './line';\nimport { circle, point, square } from './point';\nimport { rect } from './rect';\nimport { rule } from './rule';\nimport { text } from './text';\nimport { tick } from './tick';\nvar markCompiler = {\n    area: area,\n    bar: bar,\n    circle: circle,\n    geoshape: geoshape,\n    line: line,\n    point: point,\n    rect: rect,\n    rule: rule,\n    square: square,\n    text: text,\n    tick: tick,\n    trail: trail\n};\nexport function parseMarkGroup(model) {\n    if (contains([LINE, AREA, TRAIL], model.mark)) {\n        return parsePathMark(model);\n    }\n    else {\n        return getMarkGroups(model);\n    }\n}\nvar FACETED_PATH_PREFIX = 'faceted_path_';\nfunction parsePathMark(model) {\n    var details = pathGroupingFields(model.mark, model.encoding);\n    var pathMarks = getMarkGroups(model, {\n        // If has subfacet for line/area group, need to use faceted data from below.\n        fromPrefix: (details.length > 0 ? FACETED_PATH_PREFIX : '')\n    });\n    if (details.length > 0) { // have level of details - need to facet line into subgroups\n        // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)\n        return [{\n                name: model.getName('pathgroup'),\n                type: 'group',\n                from: {\n                    facet: {\n                        name: FACETED_PATH_PREFIX + model.requestDataName(MAIN),\n                        data: model.requestDataName(MAIN),\n                        groupby: details,\n                    }\n                },\n                encode: {\n                    update: {\n                        width: { field: { group: 'width' } },\n                        height: { field: { group: 'height' } }\n                    }\n                },\n                marks: pathMarks\n            }];\n    }\n    else {\n        return pathMarks;\n    }\n}\nexport function getSort(model) {\n    var order = model.encoding.order;\n    if (!isArray(order) && isValueDef(order)) {\n        return undefined;\n    }\n    else if ((isArray(order) || isFieldDef(order)) && !model.stack) {\n        // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)\n        return sortParams(order, { expr: 'datum' });\n    }\n    else if (isPathMark(model.mark)) {\n        // For both line and area, we sort values based on dimension by default\n        var dimensionChannel = model.markDef.orient === 'horizontal' ? 'y' : 'x';\n        var s = model.sort(dimensionChannel);\n        var sortField = isSortField(s) ?\n            vgField({\n                // FIXME: this op might not already exist?\n                // FIXME: what if dimensionChannel (x or y) contains custom domain?\n                aggregate: isAggregate(model.encoding) ? s.op : undefined,\n                field: s.field\n            }, { expr: 'datum' }) :\n            model.vgField(dimensionChannel, {\n                // For stack with imputation, we only have bin_mid\n                binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,\n                expr: 'datum'\n            });\n        return sortField ?\n            {\n                field: sortField,\n                order: 'descending'\n            } :\n            undefined;\n    }\n    return undefined;\n}\nfunction getMarkGroups(model, opt) {\n    if (opt === void 0) { opt = { fromPrefix: '' }; }\n    var mark = model.mark;\n    var clip = model.markDef.clip !== undefined ?\n        !!model.markDef.clip : scaleClip(model);\n    var style = getStyles(model.markDef);\n    var key = model.encoding.key;\n    var sort = getSort(model);\n    var postEncodingTransform = markCompiler[mark].postEncodingTransform ? markCompiler[mark].postEncodingTransform(model) : null;\n    return [tslib_1.__assign({ name: model.getName('marks'), type: markCompiler[mark].vgMark }, (clip ? { clip: true } : {}), (style ? { style: style } : {}), (key ? { key: { field: key.field } } : {}), (sort ? { sort: sort } : {}), { from: { data: opt.fromPrefix + model.requestDataName(MAIN) }, encode: {\n                update: markCompiler[mark].encodeEntry(model)\n            } }, (postEncodingTransform ? {\n            transform: postEncodingTransform\n        } : {}))];\n}\n/**\n * Returns list of path grouping fields\n * that the model's spec contains.\n */\nexport function pathGroupingFields(mark, encoding) {\n    return keys(encoding).reduce(function (details, channel) {\n        switch (channel) {\n            // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, cursor should not cause lines to group\n            case 'x':\n            case 'y':\n            case 'order':\n            case 'tooltip':\n            case 'href':\n            case 'x2':\n            case 'y2':\n            case 'latitude':\n            case 'longitude':\n            case 'latitude2':\n            case 'longitude2':\n            // TODO: case 'cursor':\n            // text, shape, shouldn't be a part of line/trail/area\n            case 'text':\n            case 'shape':\n                return details;\n            case 'detail':\n            case 'key':\n                var channelDef = encoding[channel];\n                if (channelDef) {\n                    (isArray(channelDef) ? channelDef : [channelDef]).forEach(function (fieldDef) {\n                        if (!fieldDef.aggregate) {\n                            details.push(vgField(fieldDef, {}));\n                        }\n                    });\n                }\n                return details;\n            case 'size':\n                if (mark === 'trail') {\n                    // For trail, size should not group trail lines.\n                    return details;\n                }\n            // For line, it should group lines.\n            /* tslint:disable */\n            // intentional fall through\n            case 'color':\n            case 'fill':\n            case 'stroke':\n            case 'opacity':\n                // TODO strokeDashOffset:\n                /* tslint:enable */\n                var fieldDef = getFieldDef(encoding[channel]);\n                if (fieldDef && !fieldDef.aggregate) {\n                    details.push(vgField(fieldDef, {}));\n                }\n                return details;\n            default:\n                throw new Error(\"Bug: Channel \" + channel + \" unimplemented for line mark\");\n        }\n    }, []);\n}\n/**\n * If scales are bound to interval selections, we want to automatically clip\n * marks to account for panning/zooming interactions. We identify bound scales\n * by the domainRaw property, which gets added during scale parsing.\n */\nfunction scaleClip(model) {\n    var xScale = model.getScaleComponent('x');\n    var yScale = model.getScaleComponent('y');\n    return (xScale && xScale.get('domainRaw')) ||\n        (yScale && yScale.get('domainRaw')) ? true : false;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport * as mixins from './mixins';\nexport var area = {\n    vgMark: 'area',\n    encodeEntry: function (model) {\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'include' }), mixins.pointPosition('x', model, 'zeroOrMin'), mixins.pointPosition('y', model, 'zeroOrMin'), mixins.pointPosition2(model, 'zeroOrMin'), mixins.defined(model));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJlYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvYXJlYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxLQUFLLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFHbkMsTUFBTSxDQUFDLElBQU0sSUFBSSxHQUFpQjtJQUNoQyxNQUFNLEVBQUUsTUFBTTtJQUNkLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQzVCLDRCQUNLLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFDLENBQUMsRUFDbEUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUM3QyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQzdDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUN6QyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN4QjtJQUNKLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0IHtNYXJrQ29tcGlsZXJ9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgKiBhcyBtaXhpbnMgZnJvbSAnLi9taXhpbnMnO1xuXG5cbmV4cG9ydCBjb25zdCBhcmVhOiBNYXJrQ29tcGlsZXIgPSB7XG4gIHZnTWFyazogJ2FyZWEnLFxuICBlbmNvZGVFbnRyeTogKG1vZGVsOiBVbml0TW9kZWwpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ubWl4aW5zLmJhc2VFbmNvZGVFbnRyeShtb2RlbCwge3NpemU6ICdpZ25vcmUnLCBvcmllbnQ6ICdpbmNsdWRlJ30pLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3gnLCBtb2RlbCwgJ3plcm9Pck1pbicpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3knLCBtb2RlbCwgJ3plcm9Pck1pbicpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24yKG1vZGVsLCAnemVyb09yTWluJyksXG4gICAgICAuLi5taXhpbnMuZGVmaW5lZChtb2RlbClcbiAgICB9O1xuICB9XG59O1xuIl19","import * as tslib_1 from \"tslib\";\nimport * as mixins from './mixins';\nimport { isFieldDef, vgField } from '../../fielddef';\nimport { GEOJSON } from '../../type';\nexport var geoshape = {\n    vgMark: 'shape',\n    encodeEntry: function (model) {\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }));\n    },\n    postEncodingTransform: function (model) {\n        var encoding = model.encoding;\n        var shapeDef = encoding.shape;\n        var transform = tslib_1.__assign({ type: 'geoshape', projection: model.projectionName() }, (shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON ? { field: vgField(shapeDef, { expr: 'datum' }) } : {}));\n        return [transform];\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2Vvc2hhcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9tYXJrL2dlb3NoYXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEtBQUssTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUVuQyxPQUFPLEVBQUMsVUFBVSxFQUFFLE9BQU8sRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ25ELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFJbkMsTUFBTSxDQUFDLElBQU0sUUFBUSxHQUFpQjtJQUNwQyxNQUFNLEVBQUUsT0FBTztJQUNmLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQzVCLDRCQUNLLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLENBQUMsRUFDcEU7SUFDSixDQUFDO0lBQ0QscUJBQXFCLEVBQUUsVUFBQyxLQUFnQjtRQUMvQixJQUFBLHlCQUFRLENBQVU7UUFDekIsSUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUVoQyxJQUFNLFNBQVMsc0JBQ2IsSUFBSSxFQUFFLFVBQVUsRUFDaEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxjQUFjLEVBQUUsSUFFL0IsQ0FBQyxRQUFRLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQ3RILENBQUM7UUFDRixPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckIsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQgKiBhcyBtaXhpbnMgZnJvbSAnLi9taXhpbnMnO1xuXG5pbXBvcnQge2lzRmllbGREZWYsIHZnRmllbGR9IGZyb20gJy4uLy4uL2ZpZWxkZGVmJztcbmltcG9ydCB7R0VPSlNPTn0gZnJvbSAnLi4vLi4vdHlwZSc7XG5pbXBvcnQge1ZnR2VvU2hhcGVUcmFuc2Zvcm0sIFZnUG9zdEVuY29kaW5nVHJhbnNmb3JtfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge01hcmtDb21waWxlcn0gZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGNvbnN0IGdlb3NoYXBlOiBNYXJrQ29tcGlsZXIgPSB7XG4gIHZnTWFyazogJ3NoYXBlJyxcbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm1peGlucy5iYXNlRW5jb2RlRW50cnkobW9kZWwsIHtzaXplOiAnaWdub3JlJywgb3JpZW50OiAnaWdub3JlJ30pXG4gICAgfTtcbiAgfSxcbiAgcG9zdEVuY29kaW5nVHJhbnNmb3JtOiAobW9kZWw6IFVuaXRNb2RlbCk6IFZnUG9zdEVuY29kaW5nVHJhbnNmb3JtW10gPT4ge1xuICAgIGNvbnN0IHtlbmNvZGluZ30gPSBtb2RlbDtcbiAgICBjb25zdCBzaGFwZURlZiA9IGVuY29kaW5nLnNoYXBlO1xuXG4gICAgY29uc3QgdHJhbnNmb3JtOiBWZ0dlb1NoYXBlVHJhbnNmb3JtID0ge1xuICAgICAgdHlwZTogJ2dlb3NoYXBlJyxcbiAgICAgIHByb2plY3Rpb246IG1vZGVsLnByb2plY3Rpb25OYW1lKCksXG4gICAgICAvLyBhczogJ3NoYXBlJyxcbiAgICAgIC4uLihzaGFwZURlZiAmJiBpc0ZpZWxkRGVmKHNoYXBlRGVmKSAmJiBzaGFwZURlZi50eXBlID09PSBHRU9KU09OID8ge2ZpZWxkOiB2Z0ZpZWxkKHNoYXBlRGVmLCB7ZXhwcjogJ2RhdHVtJ30pfSA6IHt9KVxuICAgIH07XG4gICAgcmV0dXJuIFt0cmFuc2Zvcm1dO1xuICB9XG59O1xuIl19","import * as tslib_1 from \"tslib\";\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport var line = {\n    vgMark: 'line',\n    encodeEntry: function (model) {\n        var width = model.width, height = model.height;\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model, {\n            vgChannel: 'strokeWidth' // VL's line size is strokeWidth\n        }), mixins.defined(model));\n    }\n};\nexport var trail = {\n    vgMark: 'trail',\n    encodeEntry: function (model) {\n        var width = model.width, height = model.height;\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'include', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model), mixins.defined(model));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvbGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxLQUFLLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFDbkMsT0FBTyxLQUFLLEdBQUcsTUFBTSxZQUFZLENBQUM7QUFFbEMsTUFBTSxDQUFDLElBQU0sSUFBSSxHQUFpQjtJQUNoQyxNQUFNLEVBQUUsTUFBTTtJQUNkLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQ3JCLElBQUEsbUJBQUssRUFBRSxxQkFBTSxDQUFVO1FBRTlCLDRCQUNLLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLENBQUMsRUFDakUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDaEQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDakQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFO1lBQ25DLFNBQVMsRUFBRSxhQUFhLENBQUUsZ0NBQWdDO1NBQzNELENBQUMsRUFDQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN4QjtJQUNKLENBQUM7Q0FDRixDQUFDO0FBR0YsTUFBTSxDQUFDLElBQU0sS0FBSyxHQUFpQjtJQUNqQyxNQUFNLEVBQUUsT0FBTztJQUNmLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQ3JCLElBQUEsbUJBQUssRUFBRSxxQkFBTSxDQUFVO1FBRTlCLDRCQUNLLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLENBQUMsRUFDbEUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDaEQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDakQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQ2pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3hCO0lBQ0osQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQge01hcmtDb21waWxlcn0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCAqIGFzIG1peGlucyBmcm9tICcuL21peGlucyc7XG5pbXBvcnQgKiBhcyByZWYgZnJvbSAnLi92YWx1ZXJlZic7XG5cbmV4cG9ydCBjb25zdCBsaW5lOiBNYXJrQ29tcGlsZXIgPSB7XG4gIHZnTWFyazogJ2xpbmUnLFxuICBlbmNvZGVFbnRyeTogKG1vZGVsOiBVbml0TW9kZWwpID0+IHtcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSBtb2RlbDtcblxuICAgIHJldHVybiB7XG4gICAgICAuLi5taXhpbnMuYmFzZUVuY29kZUVudHJ5KG1vZGVsLCB7c2l6ZTogJ2lnbm9yZScsIG9yaWVudDogJ2lnbm9yZSd9KSxcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd4JywgbW9kZWwsIHJlZi5taWQod2lkdGgpKSxcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd5JywgbW9kZWwsIHJlZi5taWQoaGVpZ2h0KSksXG4gICAgICAuLi5taXhpbnMubm9uUG9zaXRpb24oJ3NpemUnLCBtb2RlbCwge1xuICAgICAgICB2Z0NoYW5uZWw6ICdzdHJva2VXaWR0aCcgIC8vIFZMJ3MgbGluZSBzaXplIGlzIHN0cm9rZVdpZHRoXG4gICAgICB9KSxcbiAgICAgIC4uLm1peGlucy5kZWZpbmVkKG1vZGVsKVxuICAgIH07XG4gIH1cbn07XG5cblxuZXhwb3J0IGNvbnN0IHRyYWlsOiBNYXJrQ29tcGlsZXIgPSB7XG4gIHZnTWFyazogJ3RyYWlsJyxcbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gbW9kZWw7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4ubWl4aW5zLmJhc2VFbmNvZGVFbnRyeShtb2RlbCwge3NpemU6ICdpbmNsdWRlJywgb3JpZW50OiAnaWdub3JlJ30pLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3gnLCBtb2RlbCwgcmVmLm1pZCh3aWR0aCkpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3knLCBtb2RlbCwgcmVmLm1pZChoZWlnaHQpKSxcbiAgICAgIC4uLm1peGlucy5ub25Qb3NpdGlvbignc2l6ZScsIG1vZGVsKSxcbiAgICAgIC4uLm1peGlucy5kZWZpbmVkKG1vZGVsKVxuICAgIH07XG4gIH1cbn07XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { X, Y } from '../../channel';\nimport { isFieldDef } from '../../fielddef';\nimport * as log from '../../log';\nimport { RECT } from '../../mark';\nimport { hasDiscreteDomain, ScaleType } from '../../scale';\nimport * as mixins from './mixins';\nexport var rect = {\n    vgMark: 'rect',\n    encodeEntry: function (model) {\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), x(model), y(model));\n    }\n};\nfunction x(model) {\n    var xDef = model.encoding.x;\n    var x2Def = model.encoding.x2;\n    var xScale = model.getScaleComponent(X);\n    var xScaleType = xScale ? xScale.get('type') : undefined;\n    if (isFieldDef(xDef) && xDef.bin && !x2Def) {\n        return mixins.binnedPosition(xDef, 'x', model.scaleName('x'), 0, xScale.get('reverse'));\n    }\n    else if (isFieldDef(xDef) && xScale && hasDiscreteDomain(xScaleType)) {\n        /* istanbul ignore else */\n        if (xScaleType === ScaleType.BAND) {\n            return mixins.bandPosition(xDef, 'x', model);\n        }\n        else {\n            // We don't support rect mark with point/ordinal scale\n            throw new Error(log.message.scaleTypeNotWorkWithMark(RECT, xScaleType));\n        }\n    }\n    else { // continuous scale or no scale\n        return tslib_1.__assign({}, mixins.pointPosition('x', model, 'zeroOrMax'), mixins.pointPosition2(model, 'zeroOrMin', 'x2'));\n    }\n}\nfunction y(model) {\n    var yDef = model.encoding.y;\n    var y2Def = model.encoding.y2;\n    var yScale = model.getScaleComponent(Y);\n    var yScaleType = yScale ? yScale.get('type') : undefined;\n    if (isFieldDef(yDef) && yDef.bin && !y2Def) {\n        return mixins.binnedPosition(yDef, 'y', model.scaleName('y'), 0, yScale.get('reverse'));\n    }\n    else if (isFieldDef(yDef) && yScale && hasDiscreteDomain(yScaleType)) {\n        /* istanbul ignore else */\n        if (yScaleType === ScaleType.BAND) {\n            return mixins.bandPosition(yDef, 'y', model);\n        }\n        else {\n            // We don't support rect mark with point/ordinal scale\n            throw new Error(log.message.scaleTypeNotWorkWithMark(RECT, yScaleType));\n        }\n    }\n    else { // continuous scale or no scale\n        return tslib_1.__assign({}, mixins.pointPosition('y', model, 'zeroOrMax'), mixins.pointPosition2(model, 'zeroOrMin', 'y2'));\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvcmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sS0FBSyxHQUFHLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDaEMsT0FBTyxFQUFDLGlCQUFpQixFQUFFLFNBQVMsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUd6RCxPQUFPLEtBQUssTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUVuQyxNQUFNLENBQUMsSUFBTSxJQUFJLEdBQWlCO0lBQ2hDLE1BQU0sRUFBRSxNQUFNO0lBQ2QsV0FBVyxFQUFFLFVBQUMsS0FBZ0I7UUFDNUIsNEJBQ0ssTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsQ0FBQyxFQUNqRSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQ1IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUNYO0lBQ0osQ0FBQztDQUNGLENBQUM7QUFFRixXQUFXLEtBQWdCO0lBQ3pCLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0lBQ2hDLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxJQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUUzRCxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQzFDLE9BQU8sTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztLQUN6RjtTQUFNLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sSUFBSSxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUN0RSwwQkFBMEI7UUFDMUIsSUFBSSxVQUFVLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRTtZQUNqQyxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM5QzthQUFNO1lBQ0wsc0RBQXNEO1lBQ3RELE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztTQUN6RTtLQUNGO1NBQU0sRUFBRSwrQkFBK0I7UUFDdEMsNEJBQ0ssTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUM3QyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQ2xEO0tBQ0g7QUFDSCxDQUFDO0FBRUQsV0FBVyxLQUFnQjtJQUN6QixJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM5QixJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztJQUNoQyxJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUMsSUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFFM0QsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUMxQyxPQUFPLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7S0FDekY7U0FBTSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLElBQUksaUJBQWlCLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDdEUsMEJBQTBCO1FBQzFCLElBQUksVUFBVSxLQUFLLFNBQVMsQ0FBQyxJQUFJLEVBQUU7WUFDakMsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDOUM7YUFBTTtZQUNMLHNEQUFzRDtZQUN0RCxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7U0FDekU7S0FDRjtTQUFNLEVBQUUsK0JBQStCO1FBQ3RDLDRCQUNLLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxXQUFXLENBQUMsRUFDN0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUNsRDtLQUNIO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7WCwgWX0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge2lzRmllbGREZWZ9IGZyb20gJy4uLy4uL2ZpZWxkZGVmJztcbmltcG9ydCAqIGFzIGxvZyBmcm9tICcuLi8uLi9sb2cnO1xuaW1wb3J0IHtSRUNUfSBmcm9tICcuLi8uLi9tYXJrJztcbmltcG9ydCB7aGFzRGlzY3JldGVEb21haW4sIFNjYWxlVHlwZX0gZnJvbSAnLi4vLi4vc2NhbGUnO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0IHtNYXJrQ29tcGlsZXJ9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgKiBhcyBtaXhpbnMgZnJvbSAnLi9taXhpbnMnO1xuXG5leHBvcnQgY29uc3QgcmVjdDogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdyZWN0JyxcbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm1peGlucy5iYXNlRW5jb2RlRW50cnkobW9kZWwsIHtzaXplOiAnaWdub3JlJywgb3JpZW50OiAnaWdub3JlJ30pLFxuICAgICAgLi4ueChtb2RlbCksXG4gICAgICAuLi55KG1vZGVsKSxcbiAgICB9O1xuICB9XG59O1xuXG5mdW5jdGlvbiB4KG1vZGVsOiBVbml0TW9kZWwpIHtcbiAgY29uc3QgeERlZiA9IG1vZGVsLmVuY29kaW5nLng7XG4gIGNvbnN0IHgyRGVmID0gbW9kZWwuZW5jb2RpbmcueDI7XG4gIGNvbnN0IHhTY2FsZSA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KFgpO1xuICBjb25zdCB4U2NhbGVUeXBlID0geFNjYWxlID8geFNjYWxlLmdldCgndHlwZScpIDogdW5kZWZpbmVkO1xuXG4gIGlmIChpc0ZpZWxkRGVmKHhEZWYpICYmIHhEZWYuYmluICYmICF4MkRlZikge1xuICAgIHJldHVybiBtaXhpbnMuYmlubmVkUG9zaXRpb24oeERlZiwgJ3gnLCBtb2RlbC5zY2FsZU5hbWUoJ3gnKSwgMCwgeFNjYWxlLmdldCgncmV2ZXJzZScpKTtcbiAgfSBlbHNlIGlmIChpc0ZpZWxkRGVmKHhEZWYpICYmIHhTY2FsZSAmJiBoYXNEaXNjcmV0ZURvbWFpbih4U2NhbGVUeXBlKSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHhTY2FsZVR5cGUgPT09IFNjYWxlVHlwZS5CQU5EKSB7XG4gICAgICByZXR1cm4gbWl4aW5zLmJhbmRQb3NpdGlvbih4RGVmLCAneCcsIG1vZGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCByZWN0IG1hcmsgd2l0aCBwb2ludC9vcmRpbmFsIHNjYWxlXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobG9nLm1lc3NhZ2Uuc2NhbGVUeXBlTm90V29ya1dpdGhNYXJrKFJFQ1QsIHhTY2FsZVR5cGUpKTtcbiAgICB9XG4gIH0gZWxzZSB7IC8vIGNvbnRpbnVvdXMgc2NhbGUgb3Igbm8gc2NhbGVcbiAgICByZXR1cm4ge1xuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3gnLCBtb2RlbCwgJ3plcm9Pck1heCcpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24yKG1vZGVsLCAnemVyb09yTWluJywgJ3gyJylcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIHkobW9kZWw6IFVuaXRNb2RlbCkge1xuICBjb25zdCB5RGVmID0gbW9kZWwuZW5jb2RpbmcueTtcbiAgY29uc3QgeTJEZWYgPSBtb2RlbC5lbmNvZGluZy55MjtcbiAgY29uc3QgeVNjYWxlID0gbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoWSk7XG4gIGNvbnN0IHlTY2FsZVR5cGUgPSB5U2NhbGUgPyB5U2NhbGUuZ2V0KCd0eXBlJykgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKGlzRmllbGREZWYoeURlZikgJiYgeURlZi5iaW4gJiYgIXkyRGVmKSB7XG4gICAgcmV0dXJuIG1peGlucy5iaW5uZWRQb3NpdGlvbih5RGVmLCAneScsIG1vZGVsLnNjYWxlTmFtZSgneScpLCAwLCB5U2NhbGUuZ2V0KCdyZXZlcnNlJykpO1xuICB9IGVsc2UgaWYgKGlzRmllbGREZWYoeURlZikgJiYgeVNjYWxlICYmIGhhc0Rpc2NyZXRlRG9tYWluKHlTY2FsZVR5cGUpKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoeVNjYWxlVHlwZSA9PT0gU2NhbGVUeXBlLkJBTkQpIHtcbiAgICAgIHJldHVybiBtaXhpbnMuYmFuZFBvc2l0aW9uKHlEZWYsICd5JywgbW9kZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSBkb24ndCBzdXBwb3J0IHJlY3QgbWFyayB3aXRoIHBvaW50L29yZGluYWwgc2NhbGVcbiAgICAgIHRocm93IG5ldyBFcnJvcihsb2cubWVzc2FnZS5zY2FsZVR5cGVOb3RXb3JrV2l0aE1hcmsoUkVDVCwgeVNjYWxlVHlwZSkpO1xuICAgIH1cbiAgfSBlbHNlIHsgLy8gY29udGludW91cyBzY2FsZSBvciBubyBzY2FsZVxuICAgIHJldHVybiB7XG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbigneScsIG1vZGVsLCAnemVyb09yTWF4JyksXG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbjIobW9kZWwsICd6ZXJvT3JNaW4nLCAneTInKVxuICAgIH07XG4gIH1cbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport var rule = {\n    vgMark: 'rule',\n    encodeEntry: function (model) {\n        var _config = model.config, markDef = model.markDef, width = model.width, height = model.height;\n        var orient = markDef.orient;\n        if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {\n            // Show nothing if we have none of x, y, lat, and long.\n            return {};\n        }\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), mixins.pointPosition('x', model, orient === 'horizontal' ? 'zeroOrMin' : ref.mid(width)), mixins.pointPosition('y', model, orient === 'vertical' ? 'zeroOrMin' : ref.mid(height)), (orient !== 'vertical' ? mixins.pointPosition2(model, 'zeroOrMax', 'x2') : {}), (orient !== 'horizontal' ? mixins.pointPosition2(model, 'zeroOrMax', 'y2') : {}), mixins.nonPosition('size', model, {\n            vgChannel: 'strokeWidth',\n            defaultValue: markDef.size\n        }));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvcnVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxLQUFLLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFDbkMsT0FBTyxLQUFLLEdBQUcsTUFBTSxZQUFZLENBQUM7QUFFbEMsTUFBTSxDQUFDLElBQU0sSUFBSSxHQUFpQjtJQUNoQyxNQUFNLEVBQUUsTUFBTTtJQUNkLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQ3JCLElBQUEsc0JBQWUsRUFBRSx1QkFBTyxFQUFFLG1CQUFLLEVBQUUscUJBQU0sQ0FBVTtRQUN4RCxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBRTlCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtZQUNuRyx1REFBdUQ7WUFDdkQsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUVELDRCQUNLLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLENBQUMsRUFDakUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUN4RixNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBR3ZGLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFHOUUsQ0FBQyxNQUFNLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUVoRixNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUU7WUFDbkMsU0FBUyxFQUFFLGFBQWE7WUFDeEIsWUFBWSxFQUFFLE9BQU8sQ0FBQyxJQUFJO1NBQzNCLENBQUMsRUFDRjtJQUNKLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0IHtNYXJrQ29tcGlsZXJ9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgKiBhcyBtaXhpbnMgZnJvbSAnLi9taXhpbnMnO1xuaW1wb3J0ICogYXMgcmVmIGZyb20gJy4vdmFsdWVyZWYnO1xuXG5leHBvcnQgY29uc3QgcnVsZTogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdydWxlJyxcbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgY29uc3Qge2NvbmZpZzogX2NvbmZpZywgbWFya0RlZiwgd2lkdGgsIGhlaWdodH0gPSBtb2RlbDtcbiAgICBjb25zdCBvcmllbnQgPSBtYXJrRGVmLm9yaWVudDtcblxuICAgIGlmICghbW9kZWwuZW5jb2RpbmcueCAmJiAhbW9kZWwuZW5jb2RpbmcueSAmJiAhbW9kZWwuZW5jb2RpbmcubGF0aXR1ZGUgJiYgIW1vZGVsLmVuY29kaW5nLmxvbmdpdHVkZSkge1xuICAgICAgLy8gU2hvdyBub3RoaW5nIGlmIHdlIGhhdmUgbm9uZSBvZiB4LCB5LCBsYXQsIGFuZCBsb25nLlxuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAuLi5taXhpbnMuYmFzZUVuY29kZUVudHJ5KG1vZGVsLCB7c2l6ZTogJ2lnbm9yZScsIG9yaWVudDogJ2lnbm9yZSd9KSxcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd4JywgbW9kZWwsIG9yaWVudCA9PT0gJ2hvcml6b250YWwnID8gJ3plcm9Pck1pbicgOiByZWYubWlkKHdpZHRoKSksXG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbigneScsIG1vZGVsLCBvcmllbnQgPT09ICd2ZXJ0aWNhbCcgPyAnemVyb09yTWluJyA6IHJlZi5taWQoaGVpZ2h0KSksXG5cbiAgICAgIC8vIGluY2x1ZGUgeDIgZm9yIGhvcml6b250YWwgb3IgbGluZSBzZWdtZW50IHJ1bGVcbiAgICAgIC4uLihvcmllbnQgIT09ICd2ZXJ0aWNhbCcgPyBtaXhpbnMucG9pbnRQb3NpdGlvbjIobW9kZWwsICd6ZXJvT3JNYXgnLCAneDInKSA6IHt9KSxcblxuICAgICAgLy8gaW5jbHVkZSB5MiBmb3IgdmVydGljYWwgb3IgbGluZSBzZWdtZW50IHJ1bGVcbiAgICAgIC4uLihvcmllbnQgIT09ICdob3Jpem9udGFsJyA/IG1peGlucy5wb2ludFBvc2l0aW9uMihtb2RlbCwgJ3plcm9Pck1heCcsICd5MicpIDoge30pLFxuXG4gICAgICAuLi5taXhpbnMubm9uUG9zaXRpb24oJ3NpemUnLCBtb2RlbCwge1xuICAgICAgICB2Z0NoYW5uZWw6ICdzdHJva2VXaWR0aCcsICAvLyBWTCdzIHJ1bGUgc2l6ZSBpcyBzdHJva2VXaWR0aFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG1hcmtEZWYuc2l6ZVxuICAgICAgfSlcbiAgICB9O1xuICB9XG59O1xuIl19","import * as tslib_1 from \"tslib\";\nimport { LONGITUDE, X } from '../../channel';\nimport { channelHasField } from '../../encoding';\nimport { isFieldDef } from '../../fielddef';\nimport { QUANTITATIVE } from '../../type';\nimport { getMarkConfig } from '../common';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport var text = {\n    vgMark: 'text',\n    encodeEntry: function (model) {\n        var config = model.config, encoding = model.encoding, height = model.height, markDef = model.markDef;\n        var textDef = encoding.text;\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), mixins.pointPosition('x', model, xDefault(config, textDef)), mixins.pointPosition('y', model, ref.mid(height)), mixins.text(model), mixins.nonPosition('size', model, tslib_1.__assign({}, (markDef.size ? { defaultValue: markDef.size } : {}), { vgChannel: 'fontSize' // VL's text size is fontSize\n         })), mixins.valueIfDefined('align', align(model.markDef, encoding, config)));\n    }\n};\nfunction xDefault(config, textDef) {\n    if (isFieldDef(textDef) && textDef.type === QUANTITATIVE) {\n        return { field: { group: 'width' }, offset: -5 };\n    }\n    // TODO: allow this to fit (Be consistent with ref.midX())\n    return { value: config.scale.textXRangeStep / 2 };\n}\nfunction align(markDef, encoding, config) {\n    var a = markDef.align || getMarkConfig('align', markDef, config);\n    if (a === undefined) {\n        return channelHasField(encoding, X) || channelHasField(encoding, LONGITUDE) ? 'center' : 'right';\n    }\n    // If there is a config, Vega-parser will process this already.\n    return undefined;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvdGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFDLGVBQWUsRUFBVyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pELE9BQU8sRUFBYSxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRXhDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFHeEMsT0FBTyxLQUFLLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFDbkMsT0FBTyxLQUFLLEdBQUcsTUFBTSxZQUFZLENBQUM7QUFHbEMsTUFBTSxDQUFDLElBQU0sSUFBSSxHQUFpQjtJQUNoQyxNQUFNLEVBQUUsTUFBTTtJQUVkLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQ3JCLElBQUEscUJBQU0sRUFBRSx5QkFBUSxFQUFFLHFCQUFNLEVBQUUsdUJBQU8sQ0FBVTtRQUNsRCxJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBRTlCLDRCQUNLLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLENBQUMsRUFDakUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsRUFDM0QsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDakQsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFDbEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyx1QkFDOUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUNyRCxTQUFTLEVBQUUsVUFBVSxDQUFFLDZCQUE2QjtZQUNwRCxFQUNDLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUN6RTtJQUNKLENBQUM7Q0FDRixDQUFDO0FBRUYsa0JBQWtCLE1BQWMsRUFBRSxPQUEyQjtJQUMzRCxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLFlBQVksRUFBRTtRQUN4RCxPQUFPLEVBQUMsS0FBSyxFQUFFLEVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDO0tBQzlDO0lBQ0QsMERBQTBEO0lBQzFELE9BQU8sRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLEdBQUcsQ0FBQyxFQUFDLENBQUM7QUFDbEQsQ0FBQztBQUVELGVBQWUsT0FBZ0IsRUFBRSxRQUEwQixFQUFFLE1BQWM7SUFDekUsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxhQUFhLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuRSxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7UUFDbkIsT0FBTyxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0tBQ2xHO0lBQ0QsK0RBQStEO0lBQy9ELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xPTkdJVFVERSwgWH0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge0NvbmZpZ30gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7Y2hhbm5lbEhhc0ZpZWxkLCBFbmNvZGluZ30gZnJvbSAnLi4vLi4vZW5jb2RpbmcnO1xuaW1wb3J0IHtDaGFubmVsRGVmLCBpc0ZpZWxkRGVmfSBmcm9tICcuLi8uLi9maWVsZGRlZic7XG5pbXBvcnQge01hcmtEZWZ9IGZyb20gJy4uLy4uL21hcmsnO1xuaW1wb3J0IHtRVUFOVElUQVRJVkV9IGZyb20gJy4uLy4uL3R5cGUnO1xuaW1wb3J0IHtWZ1ZhbHVlUmVmfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge2dldE1hcmtDb25maWd9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQge01hcmtDb21waWxlcn0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCAqIGFzIG1peGlucyBmcm9tICcuL21peGlucyc7XG5pbXBvcnQgKiBhcyByZWYgZnJvbSAnLi92YWx1ZXJlZic7XG5cblxuZXhwb3J0IGNvbnN0IHRleHQ6IE1hcmtDb21waWxlciA9IHtcbiAgdmdNYXJrOiAndGV4dCcsXG5cbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgY29uc3Qge2NvbmZpZywgZW5jb2RpbmcsIGhlaWdodCwgbWFya0RlZn0gPSBtb2RlbDtcbiAgICBjb25zdCB0ZXh0RGVmID0gZW5jb2RpbmcudGV4dDtcblxuICAgIHJldHVybiB7XG4gICAgICAuLi5taXhpbnMuYmFzZUVuY29kZUVudHJ5KG1vZGVsLCB7c2l6ZTogJ2lnbm9yZScsIG9yaWVudDogJ2lnbm9yZSd9KSxcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd4JywgbW9kZWwsIHhEZWZhdWx0KGNvbmZpZywgdGV4dERlZikpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3knLCBtb2RlbCwgcmVmLm1pZChoZWlnaHQpKSxcbiAgICAgIC4uLm1peGlucy50ZXh0KG1vZGVsKSxcbiAgICAgIC4uLm1peGlucy5ub25Qb3NpdGlvbignc2l6ZScsIG1vZGVsLCB7XG4gICAgICAgIC4uLihtYXJrRGVmLnNpemUgPyB7ZGVmYXVsdFZhbHVlOiBtYXJrRGVmLnNpemV9IDoge30pLFxuICAgICAgICB2Z0NoYW5uZWw6ICdmb250U2l6ZScgIC8vIFZMJ3MgdGV4dCBzaXplIGlzIGZvbnRTaXplXG4gICAgICB9KSxcbiAgICAgIC4uLm1peGlucy52YWx1ZUlmRGVmaW5lZCgnYWxpZ24nLCBhbGlnbihtb2RlbC5tYXJrRGVmLCBlbmNvZGluZywgY29uZmlnKSlcbiAgICB9O1xuICB9XG59O1xuXG5mdW5jdGlvbiB4RGVmYXVsdChjb25maWc6IENvbmZpZywgdGV4dERlZjogQ2hhbm5lbERlZjxzdHJpbmc+KTogVmdWYWx1ZVJlZiB7XG4gIGlmIChpc0ZpZWxkRGVmKHRleHREZWYpICYmIHRleHREZWYudHlwZSA9PT0gUVVBTlRJVEFUSVZFKSB7XG4gICAgcmV0dXJuIHtmaWVsZDoge2dyb3VwOiAnd2lkdGgnfSwgb2Zmc2V0OiAtNX07XG4gIH1cbiAgLy8gVE9ETzogYWxsb3cgdGhpcyB0byBmaXQgKEJlIGNvbnNpc3RlbnQgd2l0aCByZWYubWlkWCgpKVxuICByZXR1cm4ge3ZhbHVlOiBjb25maWcuc2NhbGUudGV4dFhSYW5nZVN0ZXAgLyAyfTtcbn1cblxuZnVuY3Rpb24gYWxpZ24obWFya0RlZjogTWFya0RlZiwgZW5jb2Rpbmc6IEVuY29kaW5nPHN0cmluZz4sIGNvbmZpZzogQ29uZmlnKSB7XG4gIGNvbnN0IGEgPSBtYXJrRGVmLmFsaWduIHx8IGdldE1hcmtDb25maWcoJ2FsaWduJywgbWFya0RlZiwgY29uZmlnKTtcbiAgaWYgKGEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjaGFubmVsSGFzRmllbGQoZW5jb2RpbmcsIFgpIHx8IGNoYW5uZWxIYXNGaWVsZChlbmNvZGluZywgTE9OR0lUVURFKSA/ICdjZW50ZXInIDogJ3JpZ2h0JztcbiAgfVxuICAvLyBJZiB0aGVyZSBpcyBhIGNvbmZpZywgVmVnYS1wYXJzZXIgd2lsbCBwcm9jZXNzIHRoaXMgYWxyZWFkeS5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { isVgRangeStep } from '../../vega.schema';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport var tick = {\n    vgMark: 'rect',\n    encodeEntry: function (model) {\n        var config = model.config, markDef = model.markDef, width = model.width, height = model.height;\n        var orient = markDef.orient;\n        var vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';\n        var vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width), 'xc'), mixins.pointPosition('y', model, ref.mid(height), 'yc'), mixins.nonPosition('size', model, {\n            defaultValue: defaultSize(model),\n            vgChannel: vgSizeChannel\n        }), (_a = {}, _a[vgThicknessChannel] = { value: config.tick.thickness }, _a));\n        var _a;\n    }\n};\nfunction defaultSize(model) {\n    var config = model.config, markDef = model.markDef;\n    var orient = markDef.orient;\n    var scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');\n    if (markDef.size !== undefined) {\n        return markDef.size;\n    }\n    else if (config.tick.bandSize !== undefined) {\n        return config.tick.bandSize;\n    }\n    else {\n        var scaleRange = scale ? scale.get('range') : undefined;\n        var rangeStep = scaleRange && isVgRangeStep(scaleRange) ?\n            scaleRange.step :\n            config.scale.rangeStep;\n        if (typeof rangeStep !== 'number') {\n            // FIXME consolidate this log\n            throw new Error('Function does not handle non-numeric rangeStep');\n        }\n        return rangeStep / 1.5;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGljay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvdGljay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBR2hELE9BQU8sS0FBSyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBQ25DLE9BQU8sS0FBSyxHQUFHLE1BQU0sWUFBWSxDQUFDO0FBR2xDLE1BQU0sQ0FBQyxJQUFNLElBQUksR0FBaUI7SUFDaEMsTUFBTSxFQUFFLE1BQU07SUFFZCxXQUFXLEVBQUUsVUFBQyxLQUFnQjtRQUNyQixJQUFBLHFCQUFNLEVBQUUsdUJBQU8sRUFBRSxtQkFBSyxFQUFFLHFCQUFNLENBQVU7UUFDL0MsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUU5QixJQUFNLGFBQWEsR0FBRyxNQUFNLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUNuRSxJQUFNLGtCQUFrQixHQUFHLE1BQU0sS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBRXhFLDRCQUNLLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLENBQUMsRUFFakUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQ3RELE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUd2RCxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUU7WUFDbkMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUM7WUFDaEMsU0FBUyxFQUFFLGFBQWE7U0FDekIsQ0FBQyxlQUNELGtCQUFrQixJQUFHLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDLE9BQ3BEOztJQUNKLENBQUM7Q0FDRixDQUFDO0FBRUYscUJBQXFCLEtBQWdCO0lBQzVCLElBQUEscUJBQU0sRUFBRSx1QkFBTyxDQUFVO0lBQ2hDLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDOUIsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFM0UsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtRQUM5QixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUM7S0FDckI7U0FBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtRQUM3QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0tBQzdCO1NBQU07UUFDTCxJQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUMxRCxJQUFNLFNBQVMsR0FBRyxVQUFVLElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDekQsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pCLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ3pCLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1lBQ2pDLDZCQUE2QjtZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUM7U0FDbkU7UUFDRCxPQUFPLFNBQVMsR0FBRyxHQUFHLENBQUM7S0FDeEI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpc1ZnUmFuZ2VTdGVwfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQge01hcmtDb21waWxlcn0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCAqIGFzIG1peGlucyBmcm9tICcuL21peGlucyc7XG5pbXBvcnQgKiBhcyByZWYgZnJvbSAnLi92YWx1ZXJlZic7XG5cblxuZXhwb3J0IGNvbnN0IHRpY2s6IE1hcmtDb21waWxlciA9IHtcbiAgdmdNYXJrOiAncmVjdCcsXG5cbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgY29uc3Qge2NvbmZpZywgbWFya0RlZiwgd2lkdGgsIGhlaWdodH0gPSBtb2RlbDtcbiAgICBjb25zdCBvcmllbnQgPSBtYXJrRGVmLm9yaWVudDtcblxuICAgIGNvbnN0IHZnU2l6ZUNoYW5uZWwgPSBvcmllbnQgPT09ICdob3Jpem9udGFsJyA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICBjb25zdCB2Z1RoaWNrbmVzc0NoYW5uZWwgPSBvcmllbnQgPT09ICdob3Jpem9udGFsJyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHJldHVybiB7XG4gICAgICAuLi5taXhpbnMuYmFzZUVuY29kZUVudHJ5KG1vZGVsLCB7c2l6ZTogJ2lnbm9yZScsIG9yaWVudDogJ2lnbm9yZSd9KSxcblxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3gnLCBtb2RlbCwgcmVmLm1pZCh3aWR0aCksICd4YycpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3knLCBtb2RlbCwgcmVmLm1pZChoZWlnaHQpLCAneWMnKSxcblxuICAgICAgLy8gc2l6ZSAvIHRoaWNrbmVzcyA9PiB3aWR0aCAvIGhlaWdodFxuICAgICAgLi4ubWl4aW5zLm5vblBvc2l0aW9uKCdzaXplJywgbW9kZWwsIHtcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0U2l6ZShtb2RlbCksXG4gICAgICAgIHZnQ2hhbm5lbDogdmdTaXplQ2hhbm5lbFxuICAgICAgfSksXG4gICAgICBbdmdUaGlja25lc3NDaGFubmVsXToge3ZhbHVlOiBjb25maWcudGljay50aGlja25lc3N9LFxuICAgIH07XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGRlZmF1bHRTaXplKG1vZGVsOiBVbml0TW9kZWwpOiBudW1iZXIge1xuICBjb25zdCB7Y29uZmlnLCBtYXJrRGVmfSA9IG1vZGVsO1xuICBjb25zdCBvcmllbnQgPSBtYXJrRGVmLm9yaWVudDtcbiAgY29uc3Qgc2NhbGUgPSBtb2RlbC5nZXRTY2FsZUNvbXBvbmVudChvcmllbnQgPT09ICdob3Jpem9udGFsJyA/ICd4JyA6ICd5Jyk7XG5cbiAgaWYgKG1hcmtEZWYuc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG1hcmtEZWYuc2l6ZTtcbiAgfSBlbHNlIGlmIChjb25maWcudGljay5iYW5kU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNvbmZpZy50aWNrLmJhbmRTaXplO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNjYWxlUmFuZ2UgPSBzY2FsZSA/IHNjYWxlLmdldCgncmFuZ2UnKSA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCByYW5nZVN0ZXAgPSBzY2FsZVJhbmdlICYmIGlzVmdSYW5nZVN0ZXAoc2NhbGVSYW5nZSkgP1xuICAgICAgc2NhbGVSYW5nZS5zdGVwIDpcbiAgICAgIGNvbmZpZy5zY2FsZS5yYW5nZVN0ZXA7XG4gICAgaWYgKHR5cGVvZiByYW5nZVN0ZXAgIT09ICdudW1iZXInKSB7XG4gICAgICAvLyBGSVhNRSBjb25zb2xpZGF0ZSB0aGlzIGxvZ1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGdW5jdGlvbiBkb2VzIG5vdCBoYW5kbGUgbm9uLW51bWVyaWMgcmFuZ2VTdGVwJyk7XG4gICAgfVxuICAgIHJldHVybiByYW5nZVN0ZXAgLyAxLjU7XG4gIH1cbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { NONPOSITION_SCALE_CHANNELS, SCALE_CHANNELS, X, Y } from '../channel';\nimport * as vlEncoding from '../encoding';\nimport { normalizeEncoding } from '../encoding';\nimport { getFieldDef, hasConditionalFieldDef, isFieldDef } from '../fielddef';\nimport { isMarkDef } from '../mark';\nimport { stack } from '../stack';\nimport { duplicate } from '../util';\nimport { parseUnitAxis } from './axis/parse';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { parseUnitLayoutSize } from './layoutsize/parse';\nimport { normalizeMarkDef } from './mark/init';\nimport { parseMarkGroup } from './mark/mark';\nimport { isLayerModel, ModelWithField } from './model';\nimport { replaceRepeaterInEncoding } from './repeater';\nimport { assembleTopLevelSignals, assembleUnitSelectionData, assembleUnitSelectionMarks, assembleUnitSelectionSignals, parseUnitSelection, } from './selection/selection';\n/**\n * Internal model of Vega-Lite specification for the compiler.\n */\nvar UnitModel = /** @class */ (function (_super) {\n    tslib_1.__extends(UnitModel, _super);\n    function UnitModel(spec, parent, parentGivenName, parentGivenSize, repeater, config, fit) {\n        if (parentGivenSize === void 0) { parentGivenSize = {}; }\n        var _this = _super.call(this, spec, parent, parentGivenName, config, repeater, undefined) || this;\n        _this.fit = fit;\n        _this.type = 'unit';\n        _this.specifiedScales = {};\n        _this.specifiedAxes = {};\n        _this.specifiedLegends = {};\n        _this.specifiedProjection = {};\n        _this.selection = {};\n        _this.children = [];\n        _this.initSize(tslib_1.__assign({}, parentGivenSize, (spec.width ? { width: spec.width } : {}), (spec.height ? { height: spec.height } : {})));\n        var mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n        var encoding = _this.encoding = normalizeEncoding(replaceRepeaterInEncoding(spec.encoding || {}, repeater), mark);\n        _this.markDef = normalizeMarkDef(spec.mark, encoding, config);\n        // calculate stack properties\n        _this.stack = stack(mark, encoding, _this.config.stack);\n        _this.specifiedScales = _this.initScales(mark, encoding);\n        _this.specifiedAxes = _this.initAxes(encoding);\n        _this.specifiedLegends = _this.initLegend(encoding);\n        _this.specifiedProjection = spec.projection;\n        // Selections will be initialized upon parse.\n        _this.selection = spec.selection;\n        return _this;\n    }\n    /**\n     * Return specified Vega-lite scale domain for a particular channel\n     * @param channel\n     */\n    UnitModel.prototype.scaleDomain = function (channel) {\n        var scale = this.specifiedScales[channel];\n        return scale ? scale.domain : undefined;\n    };\n    UnitModel.prototype.sort = function (channel) {\n        return (this.getMapping()[channel] || {}).sort;\n    };\n    UnitModel.prototype.axis = function (channel) {\n        return this.specifiedAxes[channel];\n    };\n    UnitModel.prototype.legend = function (channel) {\n        return this.specifiedLegends[channel];\n    };\n    UnitModel.prototype.initScales = function (mark, encoding) {\n        return SCALE_CHANNELS.reduce(function (scales, channel) {\n            var fieldDef;\n            var specifiedScale;\n            var channelDef = encoding[channel];\n            if (isFieldDef(channelDef)) {\n                fieldDef = channelDef;\n                specifiedScale = channelDef.scale;\n            }\n            else if (hasConditionalFieldDef(channelDef)) {\n                fieldDef = channelDef.condition;\n                specifiedScale = channelDef.condition['scale'];\n            }\n            else if (channel === 'x') {\n                fieldDef = getFieldDef(encoding.x2);\n            }\n            else if (channel === 'y') {\n                fieldDef = getFieldDef(encoding.y2);\n            }\n            if (fieldDef) {\n                scales[channel] = specifiedScale || {};\n            }\n            return scales;\n        }, {});\n    };\n    UnitModel.prototype.initAxes = function (encoding) {\n        return [X, Y].reduce(function (_axis, channel) {\n            // Position Axis\n            // TODO: handle ConditionFieldDef\n            var channelDef = encoding[channel];\n            if (isFieldDef(channelDef) ||\n                (channel === X && isFieldDef(encoding.x2)) ||\n                (channel === Y && isFieldDef(encoding.y2))) {\n                var axisSpec = isFieldDef(channelDef) ? channelDef.axis : null;\n                // We no longer support false in the schema, but we keep false here for backward compatibility.\n                if (axisSpec !== null && axisSpec !== false) {\n                    _axis[channel] = tslib_1.__assign({}, axisSpec);\n                }\n            }\n            return _axis;\n        }, {});\n    };\n    UnitModel.prototype.initLegend = function (encoding) {\n        return NONPOSITION_SCALE_CHANNELS.reduce(function (_legend, channel) {\n            var channelDef = encoding[channel];\n            if (channelDef) {\n                var legend = isFieldDef(channelDef) ? channelDef.legend :\n                    (hasConditionalFieldDef(channelDef)) ? channelDef.condition['legend'] : null;\n                if (legend !== null && legend !== false) {\n                    _legend[channel] = tslib_1.__assign({}, legend);\n                }\n            }\n            return _legend;\n        }, {});\n    };\n    UnitModel.prototype.parseData = function () {\n        this.component.data = parseData(this);\n    };\n    UnitModel.prototype.parseLayoutSize = function () {\n        parseUnitLayoutSize(this);\n    };\n    UnitModel.prototype.parseSelection = function () {\n        this.component.selection = parseUnitSelection(this, this.selection);\n    };\n    UnitModel.prototype.parseMarkGroup = function () {\n        this.component.mark = parseMarkGroup(this);\n    };\n    UnitModel.prototype.parseAxisAndHeader = function () {\n        this.component.axes = parseUnitAxis(this);\n    };\n    UnitModel.prototype.assembleSelectionTopLevelSignals = function (signals) {\n        return assembleTopLevelSignals(this, signals);\n    };\n    UnitModel.prototype.assembleSelectionSignals = function () {\n        return assembleUnitSelectionSignals(this, []);\n    };\n    UnitModel.prototype.assembleSelectionData = function (data) {\n        return assembleUnitSelectionData(this, data);\n    };\n    UnitModel.prototype.assembleLayout = function () {\n        return null;\n    };\n    UnitModel.prototype.assembleLayoutSignals = function () {\n        return assembleLayoutSignals(this);\n    };\n    UnitModel.prototype.assembleMarks = function () {\n        var marks = this.component.mark || [];\n        // If this unit is part of a layer, selections should augment\n        // all in concert rather than each unit individually. This\n        // ensures correct interleaving of clipping and brushed marks.\n        if (!this.parent || !isLayerModel(this.parent)) {\n            marks = assembleUnitSelectionMarks(this, marks);\n        }\n        return marks.map(this.correctDataNames);\n    };\n    UnitModel.prototype.assembleLayoutSize = function () {\n        return {\n            width: this.getSizeSignalRef('width'),\n            height: this.getSizeSignalRef('height')\n        };\n    };\n    UnitModel.prototype.getMapping = function () {\n        return this.encoding;\n    };\n    UnitModel.prototype.toSpec = function (excludeConfig, excludeData) {\n        var encoding = duplicate(this.encoding);\n        var spec;\n        spec = {\n            mark: this.markDef,\n            encoding: encoding\n        };\n        if (!excludeConfig) {\n            spec.config = duplicate(this.config);\n        }\n        if (!excludeData) {\n            spec.data = duplicate(this.data);\n        }\n        // remove defaults\n        return spec;\n    };\n    Object.defineProperty(UnitModel.prototype, \"mark\", {\n        get: function () {\n            return this.markDef.type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UnitModel.prototype.channelHasField = function (channel) {\n        return vlEncoding.channelHasField(this.encoding, channel);\n    };\n    UnitModel.prototype.fieldDef = function (channel) {\n        var channelDef = this.encoding[channel];\n        return getFieldDef(channelDef);\n    };\n    return UnitModel;\n}(ModelWithField));\nexport { UnitModel };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport * as log from '../log';\nimport { isLayerSpec, isUnitSpec } from '../spec';\nimport { flatten, keys } from '../util';\nimport { parseLayerAxis } from './axis/parse';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { parseLayerLayoutSize } from './layoutsize/parse';\nimport { assembleLegends } from './legend/assemble';\nimport { Model } from './model';\nimport { assembleLayerSelectionMarks } from './selection/selection';\nimport { UnitModel } from './unit';\nvar LayerModel = /** @class */ (function (_super) {\n    tslib_1.__extends(LayerModel, _super);\n    function LayerModel(spec, parent, parentGivenName, parentGivenSize, repeater, config, fit) {\n        var _this = _super.call(this, spec, parent, parentGivenName, config, repeater, spec.resolve) || this;\n        _this.type = 'layer';\n        var layoutSize = tslib_1.__assign({}, parentGivenSize, (spec.width ? { width: spec.width } : {}), (spec.height ? { height: spec.height } : {}));\n        _this.initSize(layoutSize);\n        _this.children = spec.layer.map(function (layer, i) {\n            if (isLayerSpec(layer)) {\n                return new LayerModel(layer, _this, _this.getName('layer_' + i), layoutSize, repeater, config, fit);\n            }\n            if (isUnitSpec(layer)) {\n                return new UnitModel(layer, _this, _this.getName('layer_' + i), layoutSize, repeater, config, fit);\n            }\n            throw new Error(log.message.INVALID_SPEC);\n        });\n        return _this;\n    }\n    LayerModel.prototype.parseData = function () {\n        this.component.data = parseData(this);\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            child.parseData();\n        }\n    };\n    LayerModel.prototype.parseLayoutSize = function () {\n        parseLayerLayoutSize(this);\n    };\n    LayerModel.prototype.parseSelection = function () {\n        var _this = this;\n        // Merge selections up the hierarchy so that they may be referenced\n        // across unit specs. Persist their definitions within each child\n        // to assemble signals which remain within output Vega unit groups.\n        this.component.selection = {};\n        var _loop_1 = function (child) {\n            child.parseSelection();\n            keys(child.component.selection).forEach(function (key) {\n                _this.component.selection[key] = child.component.selection[key];\n            });\n        };\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            _loop_1(child);\n        }\n    };\n    LayerModel.prototype.parseMarkGroup = function () {\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            child.parseMarkGroup();\n        }\n    };\n    LayerModel.prototype.parseAxisAndHeader = function () {\n        parseLayerAxis(this);\n    };\n    LayerModel.prototype.assembleSelectionTopLevelSignals = function (signals) {\n        return this.children.reduce(function (sg, child) { return child.assembleSelectionTopLevelSignals(sg); }, signals);\n    };\n    // TODO: Support same named selections across children.\n    LayerModel.prototype.assembleSelectionSignals = function () {\n        return this.children.reduce(function (signals, child) {\n            return signals.concat(child.assembleSelectionSignals());\n        }, []);\n    };\n    LayerModel.prototype.assembleLayoutSignals = function () {\n        return this.children.reduce(function (signals, child) {\n            return signals.concat(child.assembleLayoutSignals());\n        }, assembleLayoutSignals(this));\n    };\n    LayerModel.prototype.assembleSelectionData = function (data) {\n        return this.children.reduce(function (db, child) { return child.assembleSelectionData(db); }, data);\n    };\n    LayerModel.prototype.assembleTitle = function () {\n        var title = _super.prototype.assembleTitle.call(this);\n        if (title) {\n            return title;\n        }\n        // If title does not provide layer, look into children\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            title = child.assembleTitle();\n            if (title) {\n                return title;\n            }\n        }\n        return undefined;\n    };\n    LayerModel.prototype.assembleLayout = function () {\n        return null;\n    };\n    LayerModel.prototype.assembleMarks = function () {\n        return assembleLayerSelectionMarks(this, flatten(this.children.map(function (child) {\n            return child.assembleMarks();\n        })));\n    };\n    LayerModel.prototype.assembleLegends = function () {\n        return this.children.reduce(function (legends, child) {\n            return legends.concat(child.assembleLegends());\n        }, assembleLegends(this));\n    };\n    return LayerModel;\n}(Model));\nexport { LayerModel };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport * as log from '../log';\nimport { BaseConcatModel } from './baseconcat';\nimport { buildModel } from './buildmodel';\nimport { parseRepeatLayoutSize } from './layoutsize/parse';\nvar RepeatModel = /** @class */ (function (_super) {\n    tslib_1.__extends(RepeatModel, _super);\n    function RepeatModel(spec, parent, parentGivenName, repeatValues, config) {\n        var _this = _super.call(this, spec, parent, parentGivenName, config, repeatValues, spec.resolve) || this;\n        _this.type = 'repeat';\n        if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n            log.warn(log.message.REPEAT_CANNOT_SHARE_AXIS);\n        }\n        _this.repeat = spec.repeat;\n        _this.children = _this._initChildren(spec, _this.repeat, repeatValues, config);\n        return _this;\n    }\n    RepeatModel.prototype._initChildren = function (spec, repeat, repeater, config) {\n        var children = [];\n        var row = repeat.row || [repeater ? repeater.row : null];\n        var column = repeat.column || [repeater ? repeater.column : null];\n        // cross product\n        for (var _i = 0, row_1 = row; _i < row_1.length; _i++) {\n            var rowField = row_1[_i];\n            for (var _a = 0, column_1 = column; _a < column_1.length; _a++) {\n                var columnField = column_1[_a];\n                var name_1 = (rowField ? '_' + rowField : '') + (columnField ? '_' + columnField : '');\n                var childRepeat = {\n                    row: rowField,\n                    column: columnField\n                };\n                children.push(buildModel(spec.spec, this, this.getName('child' + name_1), undefined, childRepeat, config, false));\n            }\n        }\n        return children;\n    };\n    RepeatModel.prototype.parseLayoutSize = function () {\n        parseRepeatLayoutSize(this);\n    };\n    RepeatModel.prototype.assembleLayout = function () {\n        // TODO: allow customization\n        return {\n            padding: { row: 10, column: 10 },\n            offset: 10,\n            columns: this.repeat && this.repeat.column ? this.repeat.column.length : 1,\n            bounds: 'full',\n            align: 'all'\n        };\n    };\n    return RepeatModel;\n}(BaseConcatModel));\nexport { RepeatModel };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBpbGUvcmVwZWF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEtBQUssR0FBRyxNQUFNLFFBQVEsQ0FBQztBQUk5QixPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDeEMsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFJekQ7SUFBaUMsdUNBQWU7SUFNOUMscUJBQVksSUFBMEIsRUFBRSxNQUFhLEVBQUUsZUFBdUIsRUFBRSxZQUEyQixFQUFFLE1BQWM7UUFBM0gsWUFDRSxrQkFBTSxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FRekU7UUFkZSxVQUFJLEdBQWEsUUFBUSxDQUFDO1FBUXhDLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxFQUFFO1lBQy9HLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsS0FBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFCLEtBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsS0FBSSxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7O0lBQzlFLENBQUM7SUFFTyxtQ0FBYSxHQUFyQixVQUFzQixJQUEwQixFQUFFLE1BQWMsRUFBRSxRQUF1QixFQUFFLE1BQWM7UUFDdkcsSUFBTSxRQUFRLEdBQVksRUFBRSxDQUFDO1FBQzdCLElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNELElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXBFLGdCQUFnQjtRQUNoQixLQUF1QixVQUFHLEVBQUgsV0FBRyxFQUFILGlCQUFHLEVBQUgsSUFBRztZQUFyQixJQUFNLFFBQVEsWUFBQTtZQUNqQixLQUEwQixVQUFNLEVBQU4saUJBQU0sRUFBTixvQkFBTSxFQUFOLElBQU07Z0JBQTNCLElBQU0sV0FBVyxlQUFBO2dCQUNwQixJQUFNLE1BQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUV2RixJQUFNLFdBQVcsR0FBRztvQkFDbEIsR0FBRyxFQUFFLFFBQVE7b0JBQ2IsTUFBTSxFQUFFLFdBQVc7aUJBQ3BCLENBQUM7Z0JBRUYsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsTUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUNqSDtTQUNGO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVNLHFDQUFlLEdBQXRCO1FBQ0UscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVNLG9DQUFjLEdBQXJCO1FBQ0UsNEJBQTRCO1FBQzVCLE9BQU87WUFDTCxPQUFPLEVBQUUsRUFBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUM7WUFDOUIsTUFBTSxFQUFFLEVBQUU7WUFDVixPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFFLE1BQU0sRUFBRSxNQUFNO1lBQ2QsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDO0lBQ0osQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxBQXJERCxDQUFpQyxlQUFlLEdBcUQvQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHtDb25maWd9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vbG9nJztcbmltcG9ydCB7UmVwZWF0fSBmcm9tICcuLi9yZXBlYXQnO1xuaW1wb3J0IHtOb3JtYWxpemVkUmVwZWF0U3BlY30gZnJvbSAnLi4vc3BlYyc7XG5pbXBvcnQge1ZnTGF5b3V0fSBmcm9tICcuLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge0Jhc2VDb25jYXRNb2RlbH0gZnJvbSAnLi9iYXNlY29uY2F0JztcbmltcG9ydCB7YnVpbGRNb2RlbH0gZnJvbSAnLi9idWlsZG1vZGVsJztcbmltcG9ydCB7cGFyc2VSZXBlYXRMYXlvdXRTaXplfSBmcm9tICcuL2xheW91dHNpemUvcGFyc2UnO1xuaW1wb3J0IHtNb2RlbH0gZnJvbSAnLi9tb2RlbCc7XG5pbXBvcnQge1JlcGVhdGVyVmFsdWV9IGZyb20gJy4vcmVwZWF0ZXInO1xuXG5leHBvcnQgY2xhc3MgUmVwZWF0TW9kZWwgZXh0ZW5kcyBCYXNlQ29uY2F0TW9kZWwge1xuICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogJ3JlcGVhdCcgPSAncmVwZWF0JztcbiAgcHVibGljIHJlYWRvbmx5IHJlcGVhdDogUmVwZWF0O1xuXG4gIHB1YmxpYyByZWFkb25seSBjaGlsZHJlbjogTW9kZWxbXTtcblxuICBjb25zdHJ1Y3RvcihzcGVjOiBOb3JtYWxpemVkUmVwZWF0U3BlYywgcGFyZW50OiBNb2RlbCwgcGFyZW50R2l2ZW5OYW1lOiBzdHJpbmcsIHJlcGVhdFZhbHVlczogUmVwZWF0ZXJWYWx1ZSwgY29uZmlnOiBDb25maWcpIHtcbiAgICBzdXBlcihzcGVjLCBwYXJlbnQsIHBhcmVudEdpdmVuTmFtZSwgY29uZmlnLCByZXBlYXRWYWx1ZXMsIHNwZWMucmVzb2x2ZSk7XG5cbiAgICBpZiAoc3BlYy5yZXNvbHZlICYmIHNwZWMucmVzb2x2ZS5heGlzICYmIChzcGVjLnJlc29sdmUuYXhpcy54ID09PSAnc2hhcmVkJyB8fCBzcGVjLnJlc29sdmUuYXhpcy55ID09PSAnc2hhcmVkJykpIHtcbiAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLlJFUEVBVF9DQU5OT1RfU0hBUkVfQVhJUyk7XG4gICAgfVxuXG4gICAgdGhpcy5yZXBlYXQgPSBzcGVjLnJlcGVhdDtcbiAgICB0aGlzLmNoaWxkcmVuID0gdGhpcy5faW5pdENoaWxkcmVuKHNwZWMsIHRoaXMucmVwZWF0LCByZXBlYXRWYWx1ZXMsIGNvbmZpZyk7XG4gIH1cblxuICBwcml2YXRlIF9pbml0Q2hpbGRyZW4oc3BlYzogTm9ybWFsaXplZFJlcGVhdFNwZWMsIHJlcGVhdDogUmVwZWF0LCByZXBlYXRlcjogUmVwZWF0ZXJWYWx1ZSwgY29uZmlnOiBDb25maWcpOiBNb2RlbFtdIHtcbiAgICBjb25zdCBjaGlsZHJlbjogTW9kZWxbXSA9IFtdO1xuICAgIGNvbnN0IHJvdyA9IHJlcGVhdC5yb3cgfHwgW3JlcGVhdGVyID8gcmVwZWF0ZXIucm93IDogbnVsbF07XG4gICAgY29uc3QgY29sdW1uID0gcmVwZWF0LmNvbHVtbiB8fCBbcmVwZWF0ZXIgPyByZXBlYXRlci5jb2x1bW4gOiBudWxsXTtcblxuICAgIC8vIGNyb3NzIHByb2R1Y3RcbiAgICBmb3IgKGNvbnN0IHJvd0ZpZWxkIG9mIHJvdykge1xuICAgICAgZm9yIChjb25zdCBjb2x1bW5GaWVsZCBvZiBjb2x1bW4pIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IChyb3dGaWVsZCA/ICdfJyArIHJvd0ZpZWxkIDogJycpICsgKGNvbHVtbkZpZWxkID8gJ18nICsgY29sdW1uRmllbGQgOiAnJyk7XG5cbiAgICAgICAgY29uc3QgY2hpbGRSZXBlYXQgPSB7XG4gICAgICAgICAgcm93OiByb3dGaWVsZCxcbiAgICAgICAgICBjb2x1bW46IGNvbHVtbkZpZWxkXG4gICAgICAgIH07XG5cbiAgICAgICAgY2hpbGRyZW4ucHVzaChidWlsZE1vZGVsKHNwZWMuc3BlYywgdGhpcywgdGhpcy5nZXROYW1lKCdjaGlsZCcgKyBuYW1lKSwgdW5kZWZpbmVkLCBjaGlsZFJlcGVhdCwgY29uZmlnLCBmYWxzZSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIHB1YmxpYyBwYXJzZUxheW91dFNpemUoKSB7XG4gICAgcGFyc2VSZXBlYXRMYXlvdXRTaXplKHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlTGF5b3V0KCk6IFZnTGF5b3V0IHtcbiAgICAvLyBUT0RPOiBhbGxvdyBjdXN0b21pemF0aW9uXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhZGRpbmc6IHtyb3c6IDEwLCBjb2x1bW46IDEwfSxcbiAgICAgIG9mZnNldDogMTAsXG4gICAgICBjb2x1bW5zOiB0aGlzLnJlcGVhdCAmJiB0aGlzLnJlcGVhdC5jb2x1bW4gPyB0aGlzLnJlcGVhdC5jb2x1bW4ubGVuZ3RoIDogMSxcbiAgICAgIGJvdW5kczogJ2Z1bGwnLFxuICAgICAgYWxpZ246ICdhbGwnXG4gICAgfTtcbiAgfVxufVxuIl19","import * as log from '../log';\nimport { isConcatSpec, isFacetSpec, isLayerSpec, isRepeatSpec, isUnitSpec } from '../spec';\nimport { ConcatModel } from './concat';\nimport { FacetModel } from './facet';\nimport { LayerModel } from './layer';\nimport { RepeatModel } from './repeat';\nimport { UnitModel } from './unit';\nexport function buildModel(spec, parent, parentGivenName, unitSize, repeater, config, fit) {\n    if (isFacetSpec(spec)) {\n        return new FacetModel(spec, parent, parentGivenName, repeater, config);\n    }\n    if (isLayerSpec(spec)) {\n        return new LayerModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);\n    }\n    if (isUnitSpec(spec)) {\n        return new UnitModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);\n    }\n    if (isRepeatSpec(spec)) {\n        return new RepeatModel(spec, parent, parentGivenName, repeater, config);\n    }\n    if (isConcatSpec(spec)) {\n        return new ConcatModel(spec, parent, parentGivenName, repeater, config);\n    }\n    throw new Error(log.message.INVALID_SPEC);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRtb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlL2J1aWxkbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxLQUFLLEdBQUcsTUFBTSxRQUFRLENBQUM7QUFDOUIsT0FBTyxFQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQW1DLE1BQU0sU0FBUyxDQUFDO0FBQzNILE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDckMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRW5DLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFckMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUVqQyxNQUFNLHFCQUFxQixJQUFvQixFQUFFLE1BQWEsRUFBRSxlQUF1QixFQUNyRixRQUEwQixFQUFFLFFBQXVCLEVBQUUsTUFBYyxFQUFFLEdBQVk7SUFDakYsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDckIsT0FBTyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDeEU7SUFFRCxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNyQixPQUFPLElBQUksVUFBVSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ3ZGO0lBRUQsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDcEIsT0FBTyxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztLQUN0RjtJQUVELElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3RCLE9BQU8sSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ3pFO0lBRUQsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDdEIsT0FBTyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDekU7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDNUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29uZmlnfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uL2xvZyc7XG5pbXBvcnQge2lzQ29uY2F0U3BlYywgaXNGYWNldFNwZWMsIGlzTGF5ZXJTcGVjLCBpc1JlcGVhdFNwZWMsIGlzVW5pdFNwZWMsIExheW91dFNpemVNaXhpbnMsIE5vcm1hbGl6ZWRTcGVjfSBmcm9tICcuLi9zcGVjJztcbmltcG9ydCB7Q29uY2F0TW9kZWx9IGZyb20gJy4vY29uY2F0JztcbmltcG9ydCB7RmFjZXRNb2RlbH0gZnJvbSAnLi9mYWNldCc7XG5pbXBvcnQge0xheWVyTW9kZWx9IGZyb20gJy4vbGF5ZXInO1xuaW1wb3J0IHtNb2RlbH0gZnJvbSAnLi9tb2RlbCc7XG5pbXBvcnQge1JlcGVhdE1vZGVsfSBmcm9tICcuL3JlcGVhdCc7XG5pbXBvcnQge1JlcGVhdGVyVmFsdWV9IGZyb20gJy4vcmVwZWF0ZXInO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4vdW5pdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZE1vZGVsKHNwZWM6IE5vcm1hbGl6ZWRTcGVjLCBwYXJlbnQ6IE1vZGVsLCBwYXJlbnRHaXZlbk5hbWU6IHN0cmluZyxcbiAgdW5pdFNpemU6IExheW91dFNpemVNaXhpbnMsIHJlcGVhdGVyOiBSZXBlYXRlclZhbHVlLCBjb25maWc6IENvbmZpZywgZml0OiBib29sZWFuKTogTW9kZWwge1xuICBpZiAoaXNGYWNldFNwZWMoc3BlYykpIHtcbiAgICByZXR1cm4gbmV3IEZhY2V0TW9kZWwoc3BlYywgcGFyZW50LCBwYXJlbnRHaXZlbk5hbWUsIHJlcGVhdGVyLCBjb25maWcpO1xuICB9XG5cbiAgaWYgKGlzTGF5ZXJTcGVjKHNwZWMpKSB7XG4gICAgcmV0dXJuIG5ldyBMYXllck1vZGVsKHNwZWMsIHBhcmVudCwgcGFyZW50R2l2ZW5OYW1lLCB1bml0U2l6ZSwgcmVwZWF0ZXIsIGNvbmZpZywgZml0KTtcbiAgfVxuXG4gIGlmIChpc1VuaXRTcGVjKHNwZWMpKSB7XG4gICAgcmV0dXJuIG5ldyBVbml0TW9kZWwoc3BlYywgcGFyZW50LCBwYXJlbnRHaXZlbk5hbWUsIHVuaXRTaXplLCByZXBlYXRlciwgY29uZmlnLCBmaXQpO1xuICB9XG5cbiAgaWYgKGlzUmVwZWF0U3BlYyhzcGVjKSkge1xuICAgIHJldHVybiBuZXcgUmVwZWF0TW9kZWwoc3BlYywgcGFyZW50LCBwYXJlbnRHaXZlbk5hbWUsIHJlcGVhdGVyLCBjb25maWcpO1xuICB9XG5cbiAgaWYgKGlzQ29uY2F0U3BlYyhzcGVjKSkge1xuICAgIHJldHVybiBuZXcgQ29uY2F0TW9kZWwoc3BlYywgcGFyZW50LCBwYXJlbnRHaXZlbk5hbWUsIHJlcGVhdGVyLCBjb25maWcpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGxvZy5tZXNzYWdlLklOVkFMSURfU1BFQyk7XG59XG4iXX0=","import { toSet } from 'vega-util';\nimport { isMarkDef } from './mark';\nimport { BAR } from './mark';\n/**\n * Required Encoding Channels for each mark type\n */\nexport var DEFAULT_REQUIRED_CHANNEL_MAP = {\n    text: ['text'],\n    line: ['x', 'y'],\n    trail: ['x', 'y'],\n    area: ['x', 'y']\n};\n/**\n * Supported Encoding Channel for each mark type\n */\nexport var DEFAULT_SUPPORTED_CHANNEL_TYPE = {\n    bar: toSet(['row', 'column', 'x', 'y', 'size', 'color', 'fill', 'stroke', 'detail']),\n    line: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'color', 'detail']),\n    trail: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'color', 'detail', 'size']),\n    area: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'detail']),\n    tick: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'detail']),\n    circle: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'size', 'detail']),\n    square: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'size', 'detail']),\n    point: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'size', 'detail', 'shape']),\n    geoshape: toSet(['row', 'column', 'color', 'fill', 'stroke', 'detail', 'shape']),\n    text: toSet(['row', 'column', 'size', 'color', 'fill', 'stroke', 'text']) // TODO(#724) revise\n};\n// TODO: consider if we should add validate method and\n// requires ZSchema in the main vega-lite repo\n/**\n * Further check if encoding mapping of a spec is invalid and\n * return error if it is invalid.\n *\n * This checks if\n * (1) all the required encoding channels for the mark type are specified\n * (2) all the specified encoding channels are supported by the mark type\n * @param  {[type]} spec [description]\n * @param  {RequiredChannelMap = DefaultRequiredChannelMap}  requiredChannelMap\n * @param  {SupportedChannelMap = DefaultSupportedChannelMap} supportedChannelMap\n * @return {String} Return one reason why the encoding is invalid,\n *                  or null if the encoding is valid.\n */\nexport function getEncodingMappingError(spec, requiredChannelMap, supportedChannelMap) {\n    if (requiredChannelMap === void 0) { requiredChannelMap = DEFAULT_REQUIRED_CHANNEL_MAP; }\n    if (supportedChannelMap === void 0) { supportedChannelMap = DEFAULT_SUPPORTED_CHANNEL_TYPE; }\n    var mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n    var encoding = spec.encoding;\n    var requiredChannels = requiredChannelMap[mark];\n    var supportedChannels = supportedChannelMap[mark];\n    for (var i in requiredChannels) { // all required channels are in encoding`\n        if (!(requiredChannels[i] in encoding)) {\n            return 'Missing encoding channel \\\"' + requiredChannels[i] +\n                '\\\" for mark \\\"' + mark + '\\\"';\n        }\n    }\n    for (var channel in encoding) { // all channels in encoding are supported\n        if (!supportedChannels[channel]) {\n            return 'Encoding channel \\\"' + channel +\n                '\\\" is not supported by mark type \\\"' + mark + '\\\"';\n        }\n    }\n    if (mark === BAR && !encoding.x && !encoding.y) {\n        return 'Missing both x and y for bar';\n    }\n    return null;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { initConfig, stripAndRedirectConfig } from '../config';\nimport * as vlFieldDef from '../fielddef';\nimport * as log from '../log';\nimport { isLayerSpec, isUnitSpec, normalize } from '../spec';\nimport { extractTopLevelProperties, normalizeAutoSize } from '../toplevelprops';\nimport { keys, mergeDeep } from '../util';\nimport { buildModel } from './buildmodel';\nimport { assembleRootData } from './data/assemble';\nimport { optimizeDataflow } from './data/optimize';\n/**\n * Vega-Lite's main function, for compiling Vega-lite spec into Vega spec.\n *\n * At a high-level, we make the following transformations in different phases:\n *\n * Input spec\n *     |\n *     |  (Normalization)\n *     v\n * Normalized Spec\n *     |\n *     |  (Build Model)\n *     v\n * A model tree of the spec\n *     |\n *     |  (Parse)\n *     v\n * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\n *     |\n *     | (Optimize)\n *     v\n * A model tree with parsed components with the data component optimized\n *     |\n *     | (Assemble)\n *     v\n * Vega spec\n */\nexport function compile(inputSpec, opt) {\n    if (opt === void 0) { opt = {}; }\n    // 0. Augment opt with default opts\n    if (opt.logger) {\n        // set the singleton logger to the provided logger\n        log.set(opt.logger);\n    }\n    if (opt.fieldTitle) {\n        // set the singleton field title formatter\n        vlFieldDef.setTitleFormatter(opt.fieldTitle);\n    }\n    try {\n        // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\n        var config = initConfig(mergeDeep({}, opt.config, inputSpec.config));\n        // 2. Normalize: Convert input spec -> normalized spec\n        // - Decompose all extended unit specs into composition of unit spec.  For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\n        var spec = normalize(inputSpec, config);\n        // - Normalize autosize to be a autosize properties object.\n        var autosize = normalizeAutoSize(inputSpec.autosize, config.autosize, isLayerSpec(spec) || isUnitSpec(spec));\n        // 3. Build Model: normalized spec -> Model (a tree structure)\n        // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\n        // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, RepeatModel, ConcatModel) for different types of models.\n        var model = buildModel(spec, null, '', undefined, undefined, config, autosize.type === 'fit');\n        // 4 Parse: Model --> Model with components (components = intermediate that can be merged\n        // and assembled easily)\n        // In this phase, we do a bottom-up traversal over the whole tree to\n        // parse for each type of components once (e.g., data, layout, mark, scale).\n        // By doing bottom-up traversal, we start parsing components of unit specs and\n        // then merge child components of parent composite specs.\n        //\n        // Please see inside model.parse() for order of different components parsed.\n        model.parse();\n        // 5. Optimize the dataflow.  This will modify the data component of the model.\n        optimizeDataflow(model.component.data);\n        // 6. Assemble: convert model and components --> Vega Spec.\n        return assembleTopLevelModel(model, getTopLevelProperties(inputSpec, config, autosize));\n    }\n    finally {\n        // Reset the singleton logger if a logger is provided\n        if (opt.logger) {\n            log.reset();\n        }\n        // Reset the singleton field title formatter if provided\n        if (opt.fieldTitle) {\n            vlFieldDef.resetTitleFormatter();\n        }\n    }\n}\nfunction getTopLevelProperties(topLevelSpec, config, autosize) {\n    return tslib_1.__assign({ autosize: keys(autosize).length === 1 && autosize.type ? autosize.type : autosize }, extractTopLevelProperties(config), extractTopLevelProperties(topLevelSpec));\n}\n/*\n * Assemble the top-level model.\n *\n * Note: this couldn't be `model.assemble()` since the top-level model\n * needs some special treatment to generate top-level properties.\n */\nfunction assembleTopLevelModel(model, topLevelProperties) {\n    // TODO: change type to become VgSpec\n    // Config with Vega-Lite only config removed.\n    var vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\n    var data = [].concat(model.assembleSelectionData([]), \n    // only assemble data in the root\n    assembleRootData(model.component.data, topLevelProperties.datasets || {}));\n    delete topLevelProperties.datasets;\n    var projections = model.assembleProjections();\n    var title = model.assembleTitle();\n    var style = model.assembleGroupStyle();\n    var layoutSignals = model.assembleLayoutSignals();\n    // move width and height signals with values to top level\n    layoutSignals = layoutSignals.filter(function (signal) {\n        if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\n            topLevelProperties[signal.name] = +signal.value;\n            return false;\n        }\n        return true;\n    });\n    var output = tslib_1.__assign({ $schema: 'https://vega.github.io/schema/vega/v3.0.json' }, (model.description ? { description: model.description } : {}), topLevelProperties, (title ? { title: title } : {}), (style ? { style: style } : {}), { data: data }, (projections.length > 0 ? { projections: projections } : {}), model.assembleGroup(layoutSignals.concat(model.assembleSelectionTopLevelSignals([]))), (vgConfig ? { config: vgConfig } : {}));\n    return {\n        spec: output\n        // TODO: add warning / errors here\n    };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlL2NvbXBpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBUyxVQUFVLEVBQUUsc0JBQXNCLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDckUsT0FBTyxLQUFLLFVBQVUsTUFBTSxhQUFhLENBQUM7QUFDMUMsT0FBTyxLQUFLLEdBQUcsTUFBTSxRQUFRLENBQUM7QUFDOUIsT0FBTyxFQUFDLFdBQVcsRUFBRSxVQUFVLEVBQW9CLFNBQVMsRUFBeUIsTUFBTSxTQUFTLENBQUM7QUFDckcsT0FBTyxFQUFpQix5QkFBeUIsRUFBRSxpQkFBaUIsRUFBcUIsTUFBTSxrQkFBa0IsQ0FBQztBQUNsSCxPQUFPLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUN4QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ3hDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBVWpEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTBCRztBQUNILE1BQU0sa0JBQWtCLFNBQXVCLEVBQUUsR0FBd0I7SUFBeEIsb0JBQUEsRUFBQSxRQUF3QjtJQUN2RSxtQ0FBbUM7SUFDbkMsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFO1FBQ2Qsa0RBQWtEO1FBQ2xELEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3JCO0lBRUQsSUFBSSxHQUFHLENBQUMsVUFBVSxFQUFFO1FBQ2xCLDBDQUEwQztRQUMxQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQzlDO0lBRUQsSUFBSTtRQUNGLDhHQUE4RztRQUM5RyxJQUFNLE1BQU0sR0FBRyxV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QUFrQztLQUNuQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29uZmlnLCBpbml0Q29uZmlnLCBzdHJpcEFuZFJlZGlyZWN0Q29uZmlnfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0ICogYXMgdmxGaWVsZERlZiBmcm9tICcuLi9maWVsZGRlZic7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vbG9nJztcbmltcG9ydCB7aXNMYXllclNwZWMsIGlzVW5pdFNwZWMsIExheW91dFNpemVNaXhpbnMsIG5vcm1hbGl6ZSwgVG9wTGV2ZWwsIFRvcExldmVsU3BlY30gZnJvbSAnLi4vc3BlYyc7XG5pbXBvcnQge0F1dG9TaXplUGFyYW1zLCBleHRyYWN0VG9wTGV2ZWxQcm9wZXJ0aWVzLCBub3JtYWxpemVBdXRvU2l6ZSwgVG9wTGV2ZWxQcm9wZXJ0aWVzfSBmcm9tICcuLi90b3BsZXZlbHByb3BzJztcbmltcG9ydCB7a2V5cywgbWVyZ2VEZWVwfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7YnVpbGRNb2RlbH0gZnJvbSAnLi9idWlsZG1vZGVsJztcbmltcG9ydCB7YXNzZW1ibGVSb290RGF0YX0gZnJvbSAnLi9kYXRhL2Fzc2VtYmxlJztcbmltcG9ydCB7b3B0aW1pemVEYXRhZmxvd30gZnJvbSAnLi9kYXRhL29wdGltaXplJztcbmltcG9ydCB7TW9kZWx9IGZyb20gJy4vbW9kZWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVPcHRpb25zIHtcbiAgY29uZmlnPzogQ29uZmlnO1xuICBsb2dnZXI/OiBsb2cuTG9nZ2VySW50ZXJmYWNlO1xuXG4gIGZpZWxkVGl0bGU/OiB2bEZpZWxkRGVmLkZpZWxkVGl0bGVGb3JtYXR0ZXI7XG59XG5cbi8qKlxuICogVmVnYS1MaXRlJ3MgbWFpbiBmdW5jdGlvbiwgZm9yIGNvbXBpbGluZyBWZWdhLWxpdGUgc3BlYyBpbnRvIFZlZ2Egc3BlYy5cbiAqXG4gKiBBdCBhIGhpZ2gtbGV2ZWwsIHdlIG1ha2UgdGhlIGZvbGxvd2luZyB0cmFuc2Zvcm1hdGlvbnMgaW4gZGlmZmVyZW50IHBoYXNlczpcbiAqXG4gKiBJbnB1dCBzcGVjXG4gKiAgICAgfFxuICogICAgIHwgIChOb3JtYWxpemF0aW9uKVxuICogICAgIHZcbiAqIE5vcm1hbGl6ZWQgU3BlY1xuICogICAgIHxcbiAqICAgICB8ICAoQnVpbGQgTW9kZWwpXG4gKiAgICAgdlxuICogQSBtb2RlbCB0cmVlIG9mIHRoZSBzcGVjXG4gKiAgICAgfFxuICogICAgIHwgIChQYXJzZSlcbiAqICAgICB2XG4gKiBBIG1vZGVsIHRyZWUgd2l0aCBwYXJzZWQgY29tcG9uZW50cyAoaW50ZXJtZWRpYXRlIHN0cnVjdHVyZSBvZiB2aXN1YWxpemF0aW9uIHByaW1pdGl2ZXMgaW4gYSBmb3JtYXQgdGhhdCBjYW4gYmUgZWFzaWx5IG1lcmdlZClcbiAqICAgICB8XG4gKiAgICAgfCAoT3B0aW1pemUpXG4gKiAgICAgdlxuICogQSBtb2RlbCB0cmVlIHdpdGggcGFyc2VkIGNvbXBvbmVudHMgd2l0aCB0aGUgZGF0YSBjb21wb25lbnQgb3B0aW1pemVkXG4gKiAgICAgfFxuICogICAgIHwgKEFzc2VtYmxlKVxuICogICAgIHZcbiAqIFZlZ2Egc3BlY1xuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZShpbnB1dFNwZWM6IFRvcExldmVsU3BlYywgb3B0OiBDb21waWxlT3B0aW9ucyA9IHt9KSB7XG4gIC8vIDAuIEF1Z21lbnQgb3B0IHdpdGggZGVmYXVsdCBvcHRzXG4gIGlmIChvcHQubG9nZ2VyKSB7XG4gICAgLy8gc2V0IHRoZSBzaW5nbGV0b24gbG9nZ2VyIHRvIHRoZSBwcm92aWRlZCBsb2dnZXJcbiAgICBsb2cuc2V0KG9wdC5sb2dnZXIpO1xuICB9XG5cbiAgaWYgKG9wdC5maWVsZFRpdGxlKSB7XG4gICAgLy8gc2V0IHRoZSBzaW5nbGV0b24gZmllbGQgdGl0bGUgZm9ybWF0dGVyXG4gICAgdmxGaWVsZERlZi5zZXRUaXRsZUZvcm1hdHRlcihvcHQuZmllbGRUaXRsZSk7XG4gIH1cblxuICB0cnkge1xuICAgIC8vIDEuIEluaXRpYWxpemUgY29uZmlnIGJ5IGRlZXAgbWVyZ2luZyBkZWZhdWx0IGNvbmZpZyB3aXRoIHRoZSBjb25maWcgcHJvdmlkZWQgdmlhIG9wdGlvbiBhbmQgdGhlIGlucHV0IHNwZWMuXG4gICAgY29uc3QgY29uZmlnID0gaW5pdENvbmZpZyhtZXJnZURlZXAoe30sIG9wdC5jb25maWcsIGlucHV0U3BlYy5jb25maWcpKTtcblxuICAgIC8vIDIuIE5vcm1hbGl6ZTogQ29udmVydCBpbnB1dCBzcGVjIC0+IG5vcm1hbGl6ZWQgc3BlY1xuXG4gICAgLy8gLSBEZWNvbXBvc2UgYWxsIGV4dGVuZGVkIHVuaXQgc3BlY3MgaW50byBjb21wb3NpdGlvbiBvZiB1bml0IHNwZWMuICBGb3IgZXhhbXBsZSwgYSBib3ggcGxvdCBnZXQgZXhwYW5kZWQgaW50byBtdWx0aXBsZSBsYXllcnMgb2YgYmFycywgdGlja3MsIGFuZCBydWxlcy4gVGhlIHNob3J0aGFuZCByb3cvY29sdW1uIGNoYW5uZWwgaXMgYWxzbyBleHBhbmRlZCB0byBhIGZhY2V0IHNwZWMuXG4gICAgY29uc3Qgc3BlYyA9IG5vcm1hbGl6ZShpbnB1dFNwZWMsIGNvbmZpZyk7XG4gICAgLy8gLSBOb3JtYWxpemUgYXV0b3NpemUgdG8gYmUgYSBhdXRvc2l6ZSBwcm9wZXJ0aWVzIG9iamVjdC5cbiAgICBjb25zdCBhdXRvc2l6ZSA9IG5vcm1hbGl6ZUF1dG9TaXplKGlucHV0U3BlYy5hdXRvc2l6ZSwgY29uZmlnLmF1dG9zaXplLCBpc0xheWVyU3BlYyhzcGVjKSB8fCBpc1VuaXRTcGVjKHNwZWMpKTtcblxuICAgIC8vIDMuIEJ1aWxkIE1vZGVsOiBub3JtYWxpemVkIHNwZWMgLT4gTW9kZWwgKGEgdHJlZSBzdHJ1Y3R1cmUpXG5cbiAgICAvLyBUaGlzIHBoYXNlcyBpbnN0YW50aWF0ZXMgdGhlIG1vZGVscyB3aXRoIGRlZmF1bHQgY29uZmlnIGJ5IGRvaW5nIGEgdG9wLWRvd24gdHJhdmVyc2FsLiBUaGlzIGFsbG93cyB1cyB0byBwYXNzIHByb3BlcnRpZXMgdGhhdCBjaGlsZCBtb2RlbHMgZGVyaXZlIGZyb20gdGhlaXIgcGFyZW50cyB2aWEgdGhlaXIgY29uc3RydWN0b3JzLlxuICAgIC8vIFNlZSB0aGUgYWJzdHJhY3QgYE1vZGVsYCBjbGFzcyBhbmQgaXRzIGNoaWxkcmVuIChVbml0TW9kZWwsIExheWVyTW9kZWwsIEZhY2V0TW9kZWwsIFJlcGVhdE1vZGVsLCBDb25jYXRNb2RlbCkgZm9yIGRpZmZlcmVudCB0eXBlcyBvZiBtb2RlbHMuXG4gICAgY29uc3QgbW9kZWw6IE1vZGVsID0gYnVpbGRNb2RlbChzcGVjLCBudWxsLCAnJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbmZpZywgYXV0b3NpemUudHlwZSA9PT0gJ2ZpdCcpO1xuXG4gICAgLy8gNCBQYXJzZTogTW9kZWwgLS0+IE1vZGVsIHdpdGggY29tcG9uZW50cyAoY29tcG9uZW50cyA9IGludGVybWVkaWF0ZSB0aGF0IGNhbiBiZSBtZXJnZWRcbiAgICAvLyBhbmQgYXNzZW1ibGVkIGVhc2lseSlcblxuICAgIC8vIEluIHRoaXMgcGhhc2UsIHdlIGRvIGEgYm90dG9tLXVwIHRyYXZlcnNhbCBvdmVyIHRoZSB3aG9sZSB0cmVlIHRvXG4gICAgLy8gcGFyc2UgZm9yIGVhY2ggdHlwZSBvZiBjb21wb25lbnRzIG9uY2UgKGUuZy4sIGRhdGEsIGxheW91dCwgbWFyaywgc2NhbGUpLlxuICAgIC8vIEJ5IGRvaW5nIGJvdHRvbS11cCB0cmF2ZXJzYWwsIHdlIHN0YXJ0IHBhcnNpbmcgY29tcG9uZW50cyBvZiB1bml0IHNwZWNzIGFuZFxuICAgIC8vIHRoZW4gbWVyZ2UgY2hpbGQgY29tcG9uZW50cyBvZiBwYXJlbnQgY29tcG9zaXRlIHNwZWNzLlxuICAgIC8vXG4gICAgLy8gUGxlYXNlIHNlZSBpbnNpZGUgbW9kZWwucGFyc2UoKSBmb3Igb3JkZXIgb2YgZGlmZmVyZW50IGNvbXBvbmVudHMgcGFyc2VkLlxuICAgIG1vZGVsLnBhcnNlKCk7XG5cbiAgICAvLyA1LiBPcHRpbWl6ZSB0aGUgZGF0YWZsb3cuICBUaGlzIHdpbGwgbW9kaWZ5IHRoZSBkYXRhIGNvbXBvbmVudCBvZiB0aGUgbW9kZWwuXG4gICAgb3B0aW1pemVEYXRhZmxvdyhtb2RlbC5jb21wb25lbnQuZGF0YSk7XG5cbiAgICAvLyA2LiBBc3NlbWJsZTogY29udmVydCBtb2RlbCBhbmQgY29tcG9uZW50cyAtLT4gVmVnYSBTcGVjLlxuICAgIHJldHVybiBhc3NlbWJsZVRvcExldmVsTW9kZWwobW9kZWwsIGdldFRvcExldmVsUHJvcGVydGllcyhpbnB1dFNwZWMsIGNvbmZpZywgYXV0b3NpemUpKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBSZXNldCB0aGUgc2luZ2xldG9uIGxvZ2dlciBpZiBhIGxvZ2dlciBpcyBwcm92aWRlZFxuICAgIGlmIChvcHQubG9nZ2VyKSB7XG4gICAgICBsb2cucmVzZXQoKTtcbiAgICB9XG4gICAgLy8gUmVzZXQgdGhlIHNpbmdsZXRvbiBmaWVsZCB0aXRsZSBmb3JtYXR0ZXIgaWYgcHJvdmlkZWRcbiAgICBpZiAob3B0LmZpZWxkVGl0bGUpIHtcbiAgICAgIHZsRmllbGREZWYucmVzZXRUaXRsZUZvcm1hdHRlcigpO1xuICAgIH1cbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGdldFRvcExldmVsUHJvcGVydGllcyh0b3BMZXZlbFNwZWM6IFRvcExldmVsPGFueT4sIGNvbmZpZzogQ29uZmlnLCBhdXRvc2l6ZTogQXV0b1NpemVQYXJhbXMpIHtcbiAgcmV0dXJuIHtcbiAgICBhdXRvc2l6ZToga2V5cyhhdXRvc2l6ZSkubGVuZ3RoID09PSAxICYmIGF1dG9zaXplLnR5cGUgPyBhdXRvc2l6ZS50eXBlIDogYXV0b3NpemUsXG4gICAgLi4uZXh0cmFjdFRvcExldmVsUHJvcGVydGllcyhjb25maWcpLFxuICAgIC4uLmV4dHJhY3RUb3BMZXZlbFByb3BlcnRpZXModG9wTGV2ZWxTcGVjKVxuICB9O1xufVxuXG4vKlxuICogQXNzZW1ibGUgdGhlIHRvcC1sZXZlbCBtb2RlbC5cbiAqXG4gKiBOb3RlOiB0aGlzIGNvdWxkbid0IGJlIGBtb2RlbC5hc3NlbWJsZSgpYCBzaW5jZSB0aGUgdG9wLWxldmVsIG1vZGVsXG4gKiBuZWVkcyBzb21lIHNwZWNpYWwgdHJlYXRtZW50IHRvIGdlbmVyYXRlIHRvcC1sZXZlbCBwcm9wZXJ0aWVzLlxuICovXG5mdW5jdGlvbiBhc3NlbWJsZVRvcExldmVsTW9kZWwobW9kZWw6IE1vZGVsLCB0b3BMZXZlbFByb3BlcnRpZXM6IFRvcExldmVsUHJvcGVydGllcyAmIExheW91dFNpemVNaXhpbnMpIHtcbiAgLy8gVE9ETzogY2hhbmdlIHR5cGUgdG8gYmVjb21lIFZnU3BlY1xuXG4gIC8vIENvbmZpZyB3aXRoIFZlZ2EtTGl0ZSBvbmx5IGNvbmZpZyByZW1vdmVkLlxuICBjb25zdCB2Z0NvbmZpZyA9IG1vZGVsLmNvbmZpZyA/IHN0cmlwQW5kUmVkaXJlY3RDb25maWcobW9kZWwuY29uZmlnKSA6IHVuZGVmaW5lZDtcblxuICBjb25zdCBkYXRhID0gW10uY29uY2F0KFxuICAgIG1vZGVsLmFzc2VtYmxlU2VsZWN0aW9uRGF0YShbXSksXG4gICAgLy8gb25seSBhc3NlbWJsZSBkYXRhIGluIHRoZSByb290XG4gICAgYXNzZW1ibGVSb290RGF0YShtb2RlbC5jb21wb25lbnQuZGF0YSwgdG9wTGV2ZWxQcm9wZXJ0aWVzLmRhdGFzZXRzIHx8IHt9KVxuICApO1xuXG4gIGRlbGV0ZSB0b3BMZXZlbFByb3BlcnRpZXMuZGF0YXNldHM7XG5cbiAgY29uc3QgcHJvamVjdGlvbnMgPSBtb2RlbC5hc3NlbWJsZVByb2plY3Rpb25zKCk7XG4gIGNvbnN0IHRpdGxlID0gbW9kZWwuYXNzZW1ibGVUaXRsZSgpO1xuICBjb25zdCBzdHlsZSA9IG1vZGVsLmFzc2VtYmxlR3JvdXBTdHlsZSgpO1xuXG4gIGxldCBsYXlvdXRTaWduYWxzID0gbW9kZWwuYXNzZW1ibGVMYXlvdXRTaWduYWxzKCk7XG5cbiAgLy8gbW92ZSB3aWR0aCBhbmQgaGVpZ2h0IHNpZ25hbHMgd2l0aCB2YWx1ZXMgdG8gdG9wIGxldmVsXG4gIGxheW91dFNpZ25hbHMgPSBsYXlvdXRTaWduYWxzLmZpbHRlcihzaWduYWwgPT4ge1xuICAgIGlmICgoc2lnbmFsLm5hbWUgPT09ICd3aWR0aCcgfHwgc2lnbmFsLm5hbWUgPT09ICdoZWlnaHQnKSAmJiBzaWduYWwudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdG9wTGV2ZWxQcm9wZXJ0aWVzW3NpZ25hbC5uYW1lXSA9ICtzaWduYWwudmFsdWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcblxuICBjb25zdCBvdXRwdXQgPSB7XG4gICAgJHNjaGVtYTogJ2h0dHBzOi8vdmVnYS5naXRodWIuaW8vc2NoZW1hL3ZlZ2EvdjMuMC5qc29uJyxcbiAgICAuLi4obW9kZWwuZGVzY3JpcHRpb24gPyB7ZGVzY3JpcHRpb246IG1vZGVsLmRlc2NyaXB0aW9ufSA6IHt9KSxcbiAgICAuLi50b3BMZXZlbFByb3BlcnRpZXMsXG4gICAgLi4uKHRpdGxlPyB7dGl0bGV9IDoge30pLFxuICAgIC4uLihzdHlsZT8ge3N0eWxlfSA6IHt9KSxcbiAgICBkYXRhOiBkYXRhLFxuICAgIC4uLihwcm9qZWN0aW9ucy5sZW5ndGggPiAwID8ge3Byb2plY3Rpb25zOiBwcm9qZWN0aW9uc30gOiB7fSksXG4gICAgLi4ubW9kZWwuYXNzZW1ibGVHcm91cChbXG4gICAgICAuLi5sYXlvdXRTaWduYWxzLFxuICAgICAgLi4ubW9kZWwuYXNzZW1ibGVTZWxlY3Rpb25Ub3BMZXZlbFNpZ25hbHMoW10pXG4gICAgXSksXG4gICAgLi4uKHZnQ29uZmlnID8ge2NvbmZpZzogdmdDb25maWd9IDoge30pXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzcGVjOiBvdXRwdXRcbiAgICAvLyBUT0RPOiBhZGQgd2FybmluZyAvIGVycm9ycyBoZXJlXG4gIH07XG59XG4iXX0="]}