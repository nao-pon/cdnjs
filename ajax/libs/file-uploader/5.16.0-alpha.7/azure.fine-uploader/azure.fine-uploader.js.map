{"version":3,"sources":["?","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/azure/util.js","../client/js/non-traditional-common/uploader.basic.api.js","../client/js/azure/uploader.basic.js","../client/js/azure/azure.xhr.upload.handler.js","../client/js/azure/get-sas.js","../client/js/uploadsuccess.ajax.requester.js","../client/js/azure/rest/delete-blob.js","../client/js/azure/rest/put-blob.js","../client/js/azure/rest/put-block.js","../client/js/azure/rest/put-block-list.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js","../client/js/azure/uploader.js"],"names":["global","qq","element","hide","style","display","this","attach","type","fn","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","name","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","each","idx","val","push","getFirstByClass","children","child","firstChild","nodeType","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","exec","getAttribute","undefined","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","data","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","length","Uint8Array","character","charCodeAt","log","message","level","console","isObject","variable","Object","prototype","toString","call","isFunction","isArray","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","args","Array","slice","arguments","newStr","nextIdxToReplace","strBefore","substring","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","toLowerCase","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","error","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","prop","override","target","sourceFn","super_","source","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","retVal","Storage","key","getItem","charAt","bind","oldFunc","context","newArgs","concat","apply","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","match","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","self","disposeSupport","options","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","index","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onBeforeStatusChange","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","params","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","_options","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","isResumable","isAttemptingResume","debug","pauseUpload","removeFileRef","expunge","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","_customResumeDataStore","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setCustomResumeData","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","fileRecord","_onDeleteComplete","errorMessage","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","callbacks","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","toUpperCase","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","namespace","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadResult","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkResult","partIndex","onUploadChunkSuccess","onResume","customResumeData","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","isInProgress","getCustomResumeData","_getCustomResumeData","UploadHandlerController","_fileOrBlobRejected","_formatSize","sizeSymbols","max","toFixed","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_handleDeleteSuccess","_handleDeleteFailed","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","allowEmpty","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","omitDefaultParams","paramsInBody","requireSuccessJson","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","jsonPayload","recordsExpireIn","resuming","customKeys","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","onUploadChunkPromise","requestOverrides","uploadChunkData","overrides","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","onUploadPromise","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","localStorageId","forEach","_getMimeType","_getPersistableData","ceil","_markNotResumable","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","el","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","azure","util","AZURE_PARAM_PREFIX","_paramNameMatchesAzureParameter","_getPrefixedParamName","getParamsAsHeaders","headerName","parseAzureError","domParser","DOMParser","responseDoc","parseFromString","errorTag","errorDetails","codeTag","messageTag","nonTraditionalBasePublicApi","setUploadSuccessParams","_uploadSuccessParamsStore","setUploadSuccessEndpoint","_uploadSuccessEndpointStore","nonTraditionalBasePrivateApi","onCompleteArgs","successEndpoint","successCustomHeaders","uploadSuccess","successMethod","uploadSuccessParams","fileParams","onSuccessFromServer","successRequestResult","_failedSuccessRequestCallbacks","onFailureFromServer","submitSuccessRequest","successAjaxRequester","UploadSuccessAjaxRequester","_getEndpointSpecificParams","sendSuccessRequest","successRequestCallback","signature","blobProperties","minFileSize","_cannedBlobNames","getBlobName","onGetBlobName","_determineBlobName","deleteBlob","_deleteBlob","blobNameOptionValue","fileExtension","blobNameToUse","blobName","relatedToCancel","deleteBlobSasUri","blobUriStore","deleteFileEndpointStore","getSasSuccess","sasUri","getSasFailure","DeleteBlob","getSas","GetSas","restRequestVerb","minFileSizeForChunking","getBlobMetadata","putBlob","PutBlob","putBlock","PutBlock","putBlockList","PutBlockList","getSasForPutBlobOrBlock","combineChunks","getSignedUrl","mimeType","blockIdEntries","determineBlobUrl","containerUrl","getBlobNameSuccess","getBlobNameFailure","getSasId","getSasXhr","determineBlobUrlSuccess","blobUrl","determineBlobUrlFailure","azureError","blockIdEntry","chunkingData","maybePossible","requestPromises","sasResponseReceived","blobUri","requestPromise","restVerb","bloburi","pendingRequests","handleSuccessResponse","responseJson","successIndicator","failureIndicator","parsedResponse","codes","endpoints","promises","endpointHandler","Content-Type","createBlockId","partNum","digits","zeros","paddedPartNum","btoa","blockId","createRequestBody","doc","implementation","createDocument","latestEl","latestTextEl","createTextNode","XMLSerializer","serializeToString","fileMimeType","registerXhrCallback","blockIdsXml","x-ms-blob-content-type","DragAndDrop","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","dropZoneElements","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","relatedTarget","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","FineUploader","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","content","createDocumentFragment","map","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","uploader","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateHtml","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","update","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListHtml","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"azure.fine-uploader.js","sourcesContent":[null,"/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\nqq.version = \"5.16.0-alpha.7\";\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\n    function isChrome21OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         * - onBeforeStatusChange(fileId): callback that is executed before the status change is broadcast\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            spec.onBeforeStatusChange && spec.onBeforeStatusChange(id);\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\n/**\n * Defines the public API for FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.basePublicApi = {\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\n        addBlobs: function(blobDataOrArray, params, endpoint) {\n            this.addFiles(blobDataOrArray, params, endpoint);\n        },\n\n        addInitialFiles: function(cannedFileList) {\n            var self = this;\n\n            qq.each(cannedFileList, function(index, cannedFile) {\n                self._addCannedFile(cannedFile);\n            });\n        },\n\n        addFiles: function(data, params, endpoint) {\n            this._maybeHandleIos8SafariWorkaround();\n\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\n\n                processBlob = qq.bind(function(blob) {\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processBlobData = qq.bind(function(blobData) {\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\n                }, this),\n\n                processCanvas = qq.bind(function(canvas) {\n                    var blob = qq.canvasToBlob(canvas);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName + \".png\"\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processCanvasData = qq.bind(function(canvasData) {\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: canvasData.name\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processFileOrInput = qq.bind(function(fileOrInput) {\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\n                        var files = Array.prototype.slice.call(fileOrInput.files),\n                            self = this;\n\n                        qq.each(files, function(idx, file) {\n                            self._handleNewFile(file, batchId, verifiedFiles);\n                        });\n                    }\n                    else {\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\n                    }\n                }, this),\n\n                normalizeData = function() {\n                    if (qq.isFileList(data)) {\n                        data = Array.prototype.slice.call(data);\n                    }\n                    data = [].concat(data);\n                },\n\n                self = this,\n                verifiedFiles = [];\n\n            this._currentBatchId = batchId;\n\n            if (data) {\n                normalizeData();\n\n                qq.each(data, function(idx, fileContainer) {\n                    if (qq.isFileOrInput(fileContainer)) {\n                        processFileOrInput(fileContainer);\n                    }\n                    else if (qq.isBlob(fileContainer)) {\n                        processBlob(fileContainer);\n                    }\n                    else if (qq.isObject(fileContainer)) {\n                        if (fileContainer.blob && fileContainer.name) {\n                            processBlobData(fileContainer);\n                        }\n                        else if (fileContainer.canvas && fileContainer.name) {\n                            processCanvasData(fileContainer);\n                        }\n                    }\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\n                        processCanvas(fileContainer);\n                    }\n                    else {\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\n                    }\n                });\n\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\n            }\n        },\n\n        cancel: function(id) {\n            this._handler.cancel(id);\n        },\n\n        cancelAll: function() {\n            var storedIdsCopy = [],\n                self = this;\n\n            qq.extend(storedIdsCopy, this._storedIds);\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\n                self.cancel(storedFileId);\n            });\n\n            this._handler.cancelAll();\n        },\n\n        clearStoredFiles: function() {\n            this._storedIds = [];\n        },\n\n        continueUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            if (uploadData.status === qq.status.PAUSED) {\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\n                this._uploadFile(id);\n                return true;\n            }\n            else {\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        deleteFile: function(id) {\n            return this._onSubmitDelete(id);\n        },\n\n        // TODO document?\n        doesExist: function(fileOrBlobId) {\n            return this._handler.isValid(fileOrBlobId);\n        },\n\n        // Generate a variable size thumbnail on an img or canvas,\n        // returning a promise that is fulfilled when the attempt completes.\n        // Thumbnail can either be based off of a URL for an image returned\n        // by the server in the upload response, or the associated `Blob`.\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\n            var promiseToReturn = new qq.Promise(),\n                fileOrUrl, options;\n\n            if (this._imageGenerator) {\n                fileOrUrl = this._thumbnailUrls[fileId];\n                options = {\n                    customResizeFunction: customResizeFunction,\n                    maxSize: maxSize > 0 ? maxSize : null,\n                    scale: maxSize > 0\n                };\n\n                // If client-side preview generation is possible\n                // and we are not specifically looking for the image URl returned by the server...\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\n                    fileOrUrl = this.getFile(fileId);\n                }\n\n                /* jshint eqeqeq:false,eqnull:true */\n                if (fileOrUrl == null) {\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\n                }\n                else {\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\n                        function success(modifiedContainer) {\n                            promiseToReturn.success(modifiedContainer);\n                        },\n\n                        function failure(container, reason) {\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\n                        }\n                    );\n                }\n            }\n            else {\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\n            }\n\n            return promiseToReturn;\n        },\n\n        getButton: function(fileId) {\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\n        },\n\n        getEndpoint: function(fileId) {\n            return this._endpointStore.get(fileId);\n        },\n\n        getFile: function(fileOrBlobId) {\n            return this._handler.getFile(fileOrBlobId) || null;\n        },\n\n        getInProgress: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED\n                ]\n            }).length;\n        },\n\n        getName: function(id) {\n            return this._uploadData.retrieve({id: id}).name;\n        },\n\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\n        getParentId: function(id) {\n            var uploadDataEntry = this.getUploads({id: id}),\n                parentId = null;\n\n            if (uploadDataEntry) {\n                if (uploadDataEntry.parentId !== undefined) {\n                    parentId = uploadDataEntry.parentId;\n                }\n            }\n\n            return parentId;\n        },\n\n        getResumableFilesData: function() {\n            return this._handler.getResumableFilesData();\n        },\n\n        getSize: function(id) {\n            return this._uploadData.retrieve({id: id}).size;\n        },\n\n        getNetUploads: function() {\n            return this._netUploaded;\n        },\n\n        getRemainingAllowedItems: function() {\n            var allowedItems = this._currentItemLimit;\n\n            if (allowedItems > 0) {\n                return allowedItems - this._netUploadedOrQueued;\n            }\n\n            return null;\n        },\n\n        getUploads: function(optionalFilter) {\n            return this._uploadData.retrieve(optionalFilter);\n        },\n\n        getUuid: function(id) {\n            return this._uploadData.retrieve({id: id}).uuid;\n        },\n\n        isResumable: function(id) {\n            return this._handler.isResumable(id) && this._handler.isAttemptingResume(id);\n        },\n\n        log: function(str, level) {\n            if (this._options.debug && (!level || level === \"info\")) {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\n            }\n            else if (level && level !== \"info\") {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\n\n            }\n        },\n\n        pauseUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            // Pause only really makes sense if the file is uploading or retrying\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\n                if (this._handler.pause(id)) {\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\n                    return true;\n                }\n                else {\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\n                }\n            }\n            else {\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        removeFileRef: function(id) {\n            this._handler.expunge(id);\n        },\n\n        reset: function() {\n            this.log(\"Resetting uploader...\");\n\n            this._handler.reset();\n            this._storedIds = [];\n            this._autoRetries = [];\n            this._retryTimeouts = [];\n            this._preventRetries = [];\n            this._thumbnailUrls = [];\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n\n            this._paramsStore.reset();\n            this._endpointStore.reset();\n            this._netUploadedOrQueued = 0;\n            this._netUploaded = 0;\n            this._uploadData.reset();\n            this._buttonIdsForFileIds = [];\n\n            this._pasteHandler && this._pasteHandler.reset();\n            this._options.session.refreshOnReset && this._refreshSessionData();\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n\n            this._totalProgress && this._totalProgress.reset();\n\n            this._customResumeDataStore.reset();\n        },\n\n        retry: function(id) {\n            return this._manualRetry(id);\n        },\n\n        scaleImage: function(id, specs) {\n            var self = this;\n\n            return qq.Scaler.prototype.scaleImage(id, specs, {\n                log: qq.bind(self.log, self),\n                getFile: qq.bind(self.getFile, self),\n                uploadData: self._uploadData\n            });\n        },\n\n        setCustomHeaders: function(headers, id) {\n            this._customHeadersStore.set(headers, id);\n        },\n\n        setCustomResumeData: function(id, data) {\n            this._customResumeDataStore.set(data, id);\n        },\n\n        setDeleteFileCustomHeaders: function(headers, id) {\n            this._deleteFileCustomHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileEndpoint: function(endpoint, id) {\n            this._deleteFileEndpointStore.set(endpoint, id);\n        },\n\n        setDeleteFileParams: function(params, id) {\n            this._deleteFileParamsStore.set(params, id);\n        },\n\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\n        setEndpoint: function(endpoint, id) {\n            this._endpointStore.set(endpoint, id);\n        },\n\n        setForm: function(elementOrId) {\n            this._updateFormSupportAndParams(elementOrId);\n        },\n\n        setItemLimit: function(newItemLimit) {\n            this._currentItemLimit = newItemLimit;\n        },\n\n        setName: function(id, newName) {\n            this._uploadData.updateName(id, newName);\n        },\n\n        setParams: function(params, id) {\n            this._paramsStore.set(params, id);\n        },\n\n        setUuid: function(id, newUuid) {\n            return this._uploadData.uuidChanged(id, newUuid);\n        },\n\n        /**\n         * Expose the internal status of a file id to the public api for manual state changes\n         * @public\n         *\n         * @param {Number} id,\n         * @param {String} newStatus\n         *\n         * @todo Implement the remaining methods\n         */\n        setStatus: function(id, newStatus) {\n            var fileRecord = this.getUploads({id: id});\n            if (!fileRecord) {\n                throw new qq.Error(id + \" is not a valid file ID.\");\n            }\n\n            switch (newStatus) {\n                case qq.status.DELETED:\n                    this._onDeleteComplete(id, null, false);\n                    break;\n                case qq.status.DELETE_FAILED:\n                    this._onDeleteComplete(id, null, true);\n                    break;\n                default:\n                    var errorMessage = \"Method setStatus called on '\" + name + \"' not implemented yet for \" + newStatus;\n                    this.log(errorMessage);\n                    throw new qq.Error(errorMessage);\n            }\n        },\n\n        uploadStoredFiles: function() {\n            if (this._storedIds.length === 0) {\n                this._itemError(\"noFilesError\");\n            }\n            else {\n                this._uploadStoredFiles();\n            }\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploaderBasic mode.\n     */\n    qq.basePrivateApi = {\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\n        _addCannedFile: function(sessionData) {\n            var self = this;\n\n            return this._uploadData.addFile({\n                uuid: sessionData.uuid,\n                name: sessionData.name,\n                size: sessionData.size,\n                status: qq.status.UPLOAD_SUCCESSFUL,\n                onBeforeStatusChange: function(id) {\n                    sessionData.deleteFileEndpoint && self.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\n                    sessionData.deleteFileParams && self.setDeleteFileParams(sessionData.deleteFileParams, id);\n\n                    if (sessionData.thumbnailUrl) {\n                        self._thumbnailUrls[id] = sessionData.thumbnailUrl;\n                    }\n\n                    self._netUploaded++;\n                    self._netUploadedOrQueued++;\n                }\n            });\n        },\n\n        _annotateWithButtonId: function(file, associatedInput) {\n            if (qq.isFile(file)) {\n                file.qqButtonId = this._getButtonId(associatedInput);\n            }\n        },\n\n        _batchError: function(message) {\n            this._options.callbacks.onError(null, null, message, undefined);\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return new qq.DeleteFileAjaxRequester({\n                method: this._options.deleteFile.method.toUpperCase(),\n                maxConnections: this._options.maxConnections,\n                uuidParamName: this._options.request.uuidName,\n                customHeaders: this._deleteFileCustomHeadersStore,\n                paramsStore: this._deleteFileParamsStore,\n                endpointStore: this._deleteFileEndpointStore,\n                cors: this._options.cors,\n                log: qq.bind(self.log, self),\n                onDelete: function(id) {\n                    self._onDelete(id);\n                    self._options.callbacks.onDelete(id);\n                },\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                }\n\n            });\n        },\n\n        _createPasteHandler: function() {\n            var self = this;\n\n            return new qq.PasteSupport({\n                targetElement: this._options.paste.targetElement,\n                callbacks: {\n                    log: qq.bind(self.log, self),\n                    pasteReceived: function(blob) {\n                        self._handleCheckedCallback({\n                            name: \"onPasteReceived\",\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\n                            identifier: \"pasted image\"\n                        });\n                    }\n                }\n            });\n        },\n\n        _createStore: function(initialValue, _readOnlyValues_) {\n            var store = {},\n                catchall = initialValue,\n                perIdReadOnlyValues = {},\n                readOnlyValues = _readOnlyValues_,\n                copy = function(orig) {\n                    if (qq.isObject(orig)) {\n                        return qq.extend({}, orig);\n                    }\n                    return orig;\n                },\n                getReadOnlyValues = function() {\n                    if (qq.isFunction(readOnlyValues)) {\n                        return readOnlyValues();\n                    }\n                    return readOnlyValues;\n                },\n                includeReadOnlyValues = function(id, existing) {\n                    if (readOnlyValues && qq.isObject(existing)) {\n                        qq.extend(existing, getReadOnlyValues());\n                    }\n\n                    if (perIdReadOnlyValues[id]) {\n                        qq.extend(existing, perIdReadOnlyValues[id]);\n                    }\n                };\n\n            return {\n                set: function(val, id) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id == null) {\n                        store = {};\n                        catchall = copy(val);\n                    }\n                    else {\n                        store[id] = copy(val);\n                    }\n                },\n\n                get: function(id) {\n                    var values;\n\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id != null && store[id]) {\n                        values = store[id];\n                    }\n                    else {\n                        values = copy(catchall);\n                    }\n\n                    includeReadOnlyValues(id, values);\n\n                    return copy(values);\n                },\n\n                addReadOnly: function(id, values) {\n                    // Only applicable to Object stores\n                    if (qq.isObject(store)) {\n                        // If null ID, apply readonly values to all files\n                        if (id === null) {\n                            if (qq.isFunction(values)) {\n                                readOnlyValues = values;\n                            }\n                            else {\n                                readOnlyValues = readOnlyValues || {};\n                                qq.extend(readOnlyValues, values);\n                            }\n                        }\n                        else {\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\n                            qq.extend(perIdReadOnlyValues[id], values);\n                        }\n                    }\n                },\n\n                remove: function(fileId) {\n                    return delete store[fileId];\n                },\n\n                reset: function() {\n                    store = {};\n                    perIdReadOnlyValues = {};\n                    catchall = initialValue;\n                }\n            };\n        },\n\n        _createUploadDataTracker: function() {\n            var self = this;\n\n            return new qq.UploadData({\n                getName: function(id) {\n                    return self.getName(id);\n                },\n                getUuid: function(id) {\n                    return self.getUuid(id);\n                },\n                getSize: function(id) {\n                    return self.getSize(id);\n                },\n                onStatusChange: function(id, oldStatus, newStatus) {\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\n                    self._maybeAllComplete(id, newStatus);\n\n                    if (self._totalProgress) {\n                        setTimeout(function() {\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\n                        }, 0);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Generate a tracked upload button.\n         *\n         * @param spec Object containing a required `element` property\n         * along with optional `multiple`, `accept`, and `folders`.\n         * @returns {qq.UploadButton}\n         * @private\n         */\n        _createUploadButton: function(spec) {\n            var self = this,\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\n                button;\n\n            function allowMultiple() {\n                if (qq.supportedFeatures.ajaxUploading) {\n                    // Workaround for bug in iOS7+ (see #1039)\n                    if (self._options.workarounds.iosEmptyVideos &&\n                        qq.ios() &&\n                        !qq.ios6() &&\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\n\n                        return false;\n                    }\n\n                    if (spec.multiple === undefined) {\n                        return self._options.multiple;\n                    }\n\n                    return spec.multiple;\n                }\n\n                return false;\n            }\n\n            button = new qq.UploadButton({\n                acceptFiles: acceptFiles,\n                element: spec.element,\n                focusClass: this._options.classes.buttonFocus,\n                folders: spec.folders,\n                hoverClass: this._options.classes.buttonHover,\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\n                multiple: allowMultiple(),\n                name: this._options.request.inputName,\n                onChange: function(input) {\n                    self._onInputChange(input);\n                },\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\n            });\n\n            this._disposeSupport.addDisposer(function() {\n                button.dispose();\n            });\n\n            self._buttons.push(button);\n\n            return button;\n        },\n\n        _createUploadHandler: function(additionalOptions, namespace) {\n            var self = this,\n                lastOnProgress = {},\n                options = {\n                    debug: this._options.debug,\n                    maxConnections: this._options.maxConnections,\n                    cors: this._options.cors,\n                    paramsStore: this._paramsStore,\n                    endpointStore: this._endpointStore,\n                    chunking: this._options.chunking,\n                    resume: this._options.resume,\n                    blobs: this._options.blobs,\n                    log: qq.bind(self.log, self),\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\n                    onProgress: function(id, name, loaded, total) {\n                        if (loaded < 0 || total < 0) {\n                            return;\n                        }\n\n                        if (lastOnProgress[id]) {\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\n                                self._onProgress(id, name, loaded, total);\n                                self._options.callbacks.onProgress(id, name, loaded, total);\n                            }\n                        }\n                        else {\n                            self._onProgress(id, name, loaded, total);\n                            self._options.callbacks.onProgress(id, name, loaded, total);\n                        }\n\n                        lastOnProgress[id] = {loaded: loaded, total: total};\n\n                    },\n                    onComplete: function(id, name, result, xhr) {\n                        delete lastOnProgress[id];\n\n                        var status = self.getUploads({id: id}).status,\n                            retVal;\n\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\n                        // invoked by the browser multiple times for the same XHR instance with the same state\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\n                        // done this.\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\n                            return;\n                        }\n\n                        retVal = self._onComplete(id, name, result, xhr);\n\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\n                        // until the promise has been fulfilled.\n                        if (retVal instanceof  qq.Promise) {\n                            retVal.done(function() {\n                                self._options.callbacks.onComplete(id, name, result, xhr);\n                            });\n                        }\n                        else {\n                            self._options.callbacks.onComplete(id, name, result, xhr);\n                        }\n                    },\n                    onCancel: function(id, name, cancelFinalizationEffort) {\n                        var promise = new qq.Promise();\n\n                        self._handleCheckedCallback({\n                            name: \"onCancel\",\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\n                            onFailure: promise.failure,\n                            onSuccess: function() {\n                                cancelFinalizationEffort.then(function() {\n                                    self._onCancel(id, name);\n                                });\n\n                                promise.success();\n                            },\n                            identifier: id\n                        });\n\n                        return promise;\n                    },\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\n                    onUpload: function(id, name) {\n                        self._onUpload(id, name);\n                        var onUploadResult = self._options.callbacks.onUpload(id, name);\n\n                        if (qq.isGenericPromise(onUploadResult)) {\n                            self.log(qq.format(\"onUpload for {} returned a Promise - waiting for resolution.\", id));\n                            return onUploadResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunk: function(id, name, chunkData) {\n                        self._onUploadChunk(id, chunkData);\n                        var onUploadChunkResult = self._options.callbacks.onUploadChunk(id, name, chunkData);\n\n                        if (qq.isGenericPromise(onUploadChunkResult)) {\n                            self.log(qq.format(\"onUploadChunk for {}.{} returned a Promise - waiting for resolution.\", id, chunkData.partIndex));\n                            return onUploadChunkResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\n                    },\n                    onResume: function(id, name, chunkData, customResumeData) {\n                        return self._options.callbacks.onResume(id, name, chunkData, customResumeData);\n                    },\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\n                        return self._onAutoRetry.apply(self, arguments);\n                    },\n                    onUuidChanged: function(id, newUuid) {\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\n                        self.setUuid(id, newUuid);\n                    },\n                    getName: qq.bind(self.getName, self),\n                    getUuid: qq.bind(self.getUuid, self),\n                    getSize: qq.bind(self.getSize, self),\n                    setSize: qq.bind(self._setSize, self),\n                    getDataByUuid: function(uuid) {\n                        return self.getUploads({uuid: uuid});\n                    },\n                    isQueued: function(id) {\n                        var status = self.getUploads({id: id}).status;\n                        return status === qq.status.QUEUED ||\n                            status === qq.status.SUBMITTED ||\n                            status === qq.status.UPLOAD_RETRYING ||\n                            status === qq.status.PAUSED;\n                    },\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\n                    getIdsInBatch: self._uploadData.getIdsInBatch,\n                    isInProgress: function(id) {\n                        return self.getUploads({id: id}).status === qq.status.UPLOADING;\n                    },\n                    getCustomResumeData: qq.bind(self._getCustomResumeData, self)\n                };\n\n            qq.each(this._options.request, function(prop, val) {\n                options[prop] = val;\n            });\n\n            options.customHeaders = this._customHeadersStore;\n\n            if (additionalOptions) {\n                qq.each(additionalOptions, function(key, val) {\n                    options[key] = val;\n                });\n            }\n\n            return new qq.UploadHandlerController(options, namespace);\n        },\n\n        _fileOrBlobRejected: function(id) {\n            this._netUploadedOrQueued--;\n            this._uploadData.setStatus(id, qq.status.REJECTED);\n        },\n\n        _formatSize: function(bytes) {\n            if (bytes === 0) {\n                return bytes + this._options.text.sizeSymbols[0];\n            }\n            var i = -1;\n            do {\n                bytes = bytes / 1000;\n                i++;\n            } while (bytes > 999);\n\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\n        },\n\n        // Creates an internal object that tracks various properties of each extra button,\n        // and then actually creates the extra button.\n        _generateExtraButtonSpecs: function() {\n            var self = this;\n\n            this._extraButtonSpecs = {};\n\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\n                var multiple = extraButtonOptionEntry.multiple,\n                    validation = qq.extend({}, self._options.validation, true),\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\n\n                if (multiple === undefined) {\n                    multiple = self._options.multiple;\n                }\n\n                if (extraButtonSpec.validation) {\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\n                }\n\n                qq.extend(extraButtonSpec, {\n                    multiple: multiple,\n                    validation: validation\n                }, true);\n\n                self._initExtraButton(extraButtonSpec);\n            });\n        },\n\n        _getButton: function(buttonId) {\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\n\n            if (extraButtonsSpec) {\n                return extraButtonsSpec.element;\n            }\n            else if (buttonId === this._defaultButtonId) {\n                return this._options.button;\n            }\n        },\n\n        /**\n         * Gets the internally used tracking ID for a button.\n         *\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\n         * @private\n         */\n        _getButtonId: function(buttonOrFileInputOrFile) {\n            var inputs, fileInput,\n                fileBlobOrInput = buttonOrFileInputOrFile;\n\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\n            }\n\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\n                if (qq.isFile(fileBlobOrInput)) {\n                    return fileBlobOrInput.qqButtonId;\n                }\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\n\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\n\n                qq.each(inputs, function(idx, input) {\n                    if (input.getAttribute(\"type\") === \"file\") {\n                        fileInput = input;\n                        return false;\n                    }\n                });\n\n                if (fileInput) {\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n            }\n        },\n\n        _getCustomResumeData: function(fileId) {\n            return this._customResumeDataStore.get(fileId);\n        },\n\n        _getNotFinished: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED,\n                    qq.status.SUBMITTING,\n                    qq.status.SUBMITTED,\n                    qq.status.PAUSED\n                ]\n            }).length;\n        },\n\n        // Get the validation options for this button.  Could be the default validation option\n        // or a specific one assigned to this particular button.\n        _getValidationBase: function(buttonId) {\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\n\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\n        },\n\n        _getValidationDescriptor: function(fileWrapper) {\n            if (fileWrapper.file instanceof qq.BlobProxy) {\n                return {\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\n                    size: fileWrapper.file.referenceBlob.size\n                };\n            }\n\n            return {\n                name: this.getUploads({id: fileWrapper.id}).name,\n                size: this.getUploads({id: fileWrapper.id}).size\n            };\n        },\n\n        _getValidationDescriptors: function(fileWrappers) {\n            var self = this,\n                fileDescriptors = [];\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\n            });\n\n            return fileDescriptors;\n        },\n\n        // Allows camera access on either the default or an extra button for iOS devices.\n        _handleCameraAccess: function() {\n            if (this._options.camera.ios && qq.ios()) {\n                var acceptIosCamera = \"image/*;capture=camera\",\n                    button = this._options.camera.button,\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\n                    optionRoot = this._options;\n\n                // If we are not targeting the default button, it is an \"extra\" button\n                if (buttonId && buttonId !== this._defaultButtonId) {\n                    optionRoot = this._extraButtonSpecs[buttonId];\n                }\n\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\n                optionRoot.multiple = false;\n\n                // update the options\n                if (optionRoot.validation.acceptFiles === null) {\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\n                }\n                else {\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\n                }\n\n                // update the already-created button\n                qq.each(this._buttons, function(idx, button) {\n                    if (button.getButtonId() === buttonId) {\n                        button.setMultiple(optionRoot.multiple);\n                        button.setAcceptFiles(optionRoot.acceptFiles);\n\n                        return false;\n                    }\n                });\n            }\n        },\n\n        _handleCheckedCallback: function(details) {\n            var self = this,\n                callbackRetVal = details.callback();\n\n            if (qq.isGenericPromise(callbackRetVal)) {\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\n                return callbackRetVal.then(\n                    function(successParam) {\n                        self.log(details.name + \" promise success for \" + details.identifier);\n                        details.onSuccess(successParam);\n                    },\n                    function() {\n                        if (details.onFailure) {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                            details.onFailure();\n                        }\n                        else {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                        }\n                    });\n            }\n\n            if (callbackRetVal !== false) {\n                details.onSuccess(callbackRetVal);\n            }\n            else {\n                if (details.onFailure) {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\n                    details.onFailure();\n                }\n                else {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\n                }\n            }\n\n            return callbackRetVal;\n        },\n\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\n            var self = this,\n                uuid = qq.getUniqueId(),\n                size = -1,\n                name = qq.getFilename(file),\n                actualFile = file.blob || file,\n                handler = this._customNewFileHandler ?\n                    this._customNewFileHandler :\n                    qq.bind(self._handleNewFileGeneric, self);\n\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\n                size = actualFile.size;\n            }\n\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\n                uploadData: self._uploadData,\n                paramsStore: self._paramsStore,\n                addFileToHandler: function(id, file) {\n                    self._handler.add(id, file);\n                    self._netUploadedOrQueued++;\n                    self._trackButton(id);\n                }\n            });\n        },\n\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\n\n            this._handler.add(id, file);\n            this._trackButton(id);\n\n            this._netUploadedOrQueued++;\n\n            fileList.push({id: id, file: file});\n        },\n\n        _handlePasteSuccess: function(blob, extSuppliedName) {\n            var extension = blob.type.split(\"/\")[1],\n                name = extSuppliedName;\n\n            /*jshint eqeqeq: true, eqnull: true*/\n            if (name == null) {\n                name = this._options.paste.defaultName;\n            }\n\n            name += \".\" + extension;\n\n            this.addFiles({\n                name: name,\n                blob: blob\n            });\n        },\n\n        _handleDeleteSuccess: function(id) {\n            if (this.getUploads({id: id}).status !== qq.status.DELETED) {\n                var name = this.getName(id);\n\n                this._netUploadedOrQueued--;\n                this._netUploaded--;\n                this._handler.expunge(id);\n                this._uploadData.setStatus(id, qq.status.DELETED);\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\n            }\n        },\n\n        _handleDeleteFailed: function(id, xhrOrXdr) {\n            var name = this.getName(id);\n\n            this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\n            this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\n\n            // Check first if xhrOrXdr is actually passed or valid\n            // For error reporting, we only have access to the response status if this is not\n            // an `XDomainRequest`.\n            if (!xhrOrXdr || xhrOrXdr.withCredentials === undefined) {\n                this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\n            }\n            else {\n                this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\n            }\n        },\n\n        // Creates an extra button element\n        _initExtraButton: function(spec) {\n            var button = this._createUploadButton({\n                accept: spec.validation.acceptFiles,\n                allowedExtensions: spec.validation.allowedExtensions,\n                element: spec.element,\n                folders: spec.folders,\n                multiple: spec.multiple,\n                title: spec.fileInputTitle\n            });\n\n            this._extraButtonSpecs[button.getButtonId()] = spec;\n        },\n\n        _initFormSupportAndParams: function() {\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n            );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore = this._createStore(\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\n                );\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\n                }\n            }\n            else {\n                this._paramsStore = this._createStore(this._options.request.params);\n            }\n        },\n\n        _isDeletePossible: function() {\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\n                return false;\n            }\n\n            if (this._options.cors.expected) {\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\n                    return true;\n                }\n\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            return true;\n        },\n\n        _isAllowedExtension: function(allowed, fileName) {\n            var valid = false;\n\n            if (!allowed.length) {\n                return true;\n            }\n\n            qq.each(allowed, function(idx, allowedExt) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExt)) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\n\n                    if (fileName.match(extRegex) != null) {\n                        valid = true;\n                        return false;\n                    }\n                }\n            });\n\n            return valid;\n        },\n\n        /**\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\n         *\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\n         * @param maybeNameOrNames names of the items that have failed, if applicable\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\n         * @private\n         */\n        _itemError: function(code, maybeNameOrNames, item) {\n            var message = this._options.messages[code],\n                allowedExtensions = [],\n                names = [].concat(maybeNameOrNames),\n                name = names[0],\n                buttonId = this._getButtonId(item),\n                validationBase = this._getValidationBase(buttonId),\n                extensionsForMessage, placeholderMatch;\n\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExtension)) {\n                    allowedExtensions.push(allowedExtension);\n                }\n            });\n\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\n\n            r(\"{file}\", this._options.formatFileName(name));\n            r(\"{extensions}\", extensionsForMessage);\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\n\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\n            if (placeholderMatch !== null) {\n                qq.each(placeholderMatch, function(idx, placeholder) {\n                    r(placeholder, names[idx]);\n                });\n            }\n\n            this._options.callbacks.onError(null, name, message, undefined);\n\n            return message;\n        },\n\n        /**\n         * Conditionally orders a manual retry of a failed upload.\n         *\n         * @param id File ID of the failed upload\n         * @param callback Optional callback to invoke if a retry is prudent.\n         * In lieu of asking the upload handler to retry.\n         * @returns {boolean} true if a manual retry will occur\n         * @private\n         */\n        _manualRetry: function(id, callback) {\n            if (this._onBeforeManualRetry(id)) {\n                this._netUploadedOrQueued++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n\n                if (callback) {\n                    callback(id);\n                }\n                else {\n                    this._handler.retry(id);\n                }\n\n                return true;\n            }\n        },\n\n        _maybeAllComplete: function(id, status) {\n            var self = this,\n                notFinished = this._getNotFinished();\n\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\n                this._succeededSinceLastAllComplete.push(id);\n            }\n            else if (status === qq.status.UPLOAD_FAILED) {\n                this._failedSinceLastAllComplete.push(id);\n            }\n\n            if (notFinished === 0 &&\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\n                setTimeout(function() {\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\n                }, 0);\n            }\n        },\n\n        _maybeHandleIos8SafariWorkaround: function() {\n            var self = this;\n\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n                setTimeout(function() {\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\n                }, 0);\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\n            }\n        },\n\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\n            // Assuming no one will actually set the response code to something other than 200\n            // and still set 'success' to true...\n            if (!response.success) {\n                if (xhr && xhr.status !== 200 && !response.error) {\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\n                }\n                else {\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\n                }\n            }\n        },\n\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\n            var self = this;\n\n            if (items.length > index) {\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\n                    setTimeout(function() {\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\n                            buttonId = self._getButtonId(items[index].file),\n                            button = self._getButton(buttonId);\n\n                        self._handleCheckedCallback({\n                            name: \"onValidate\",\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\n                        });\n                    }, 0);\n                }\n                else if (!validItem) {\n                    for (; index < items.length; index++) {\n                        self._fileOrBlobRejected(items[index].id);\n                    }\n                }\n            }\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\n\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n        },\n\n        /**\n         * Attempt to automatically retry a failed upload.\n         *\n         * @param id The file ID of the failed upload\n         * @param name The name of the file associated with the failed upload\n         * @param responseJSON Response from the server, parsed into a javascript object\n         * @param xhr Ajax transport used to send the failed request\n         * @param callback Optional callback to be invoked if a retry is prudent.\n         * Invoked in lieu of asking the upload handler to retry.\n         * @returns {boolean} true if an auto-retry will occur\n         * @private\n         */\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\n            var self = this;\n\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\n\n            if (self._shouldAutoRetry(id)) {\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\n\n                self._maybeParseAndSendUploadError.apply(self, arguments);\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\n                self._onBeforeAutoRetry(id, name);\n\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n                self._retryTimeouts[id] = setTimeout(function() {\n                    self.log(\"Starting retry for \" + name + \"...\");\n\n                    if (callback) {\n                        callback(id);\n                    }\n                    else {\n                        self._handler.retry(id);\n                    }\n                }, retryWaitPeriod);\n\n                return true;\n            }\n        },\n\n        _onBeforeAutoRetry: function(id, name) {\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            var itemLimit = this._currentItemLimit,\n                fileName;\n\n            if (this._preventRetries[id]) {\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\n                return false;\n            }\n            else if (this._handler.isValid(id)) {\n                fileName = this.getName(id);\n\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\n                    return false;\n                }\n\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\n                    this._itemError(\"retryFailTooManyItems\");\n                    return false;\n                }\n\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\n                return true;\n            }\n            else {\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\n                return false;\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._netUploadedOrQueued--;\n\n            clearTimeout(this._retryTimeouts[id]);\n\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\n                this._storedIds.splice(storedItemIndex, 1);\n            }\n\n            this._uploadData.setStatus(id, qq.status.CANCELED);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            if (!result.success) {\n                this._netUploadedOrQueued--;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\n\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\n                    this._preventRetries[id] = true;\n                }\n            }\n            else {\n                if (result.thumbnailUrl) {\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\n                }\n\n                this._netUploaded++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\n            }\n\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\n\n            return result.success ? true : false;\n        },\n\n        _onDelete: function(id) {\n            this._uploadData.setStatus(id, qq.status.DELETING);\n        },\n\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\n            var name = this.getName(id);\n\n            if (isError) {\n                this._handleDeleteFailed(id, xhrOrXdr);\n            }\n            else {\n                this._handleDeleteSuccess(id);\n            }\n        },\n\n        _onInputChange: function(input) {\n            var fileIndex;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\n                    this._annotateWithButtonId(input.files[fileIndex], input);\n                }\n\n                this.addFiles(input.files);\n            }\n            // Android 2.3.x will fire `onchange` even if no file has been selected\n            else if (input.value.length > 0) {\n                this.addFiles(input);\n            }\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n        },\n\n        _onProgress: function(id, name, loaded, total) {\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\n        },\n\n        _onSubmit: function(id, name) {\n            //nothing to do yet in core uploader\n        },\n\n        _onSubmitCallbackSuccess: function(id, name) {\n            this._onSubmit.apply(this, arguments);\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\n            this._onSubmitted.apply(this, arguments);\n\n            if (this._options.autoUpload) {\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n                this._uploadFile(id);\n            }\n            else {\n                this._storeForLater(id);\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n            }\n        },\n\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\n            var uuid = this.getUuid(id),\n                adjustedOnSuccessCallback;\n\n            if (onSuccessCallback) {\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\n            }\n\n            if (this._isDeletePossible()) {\n                this._handleCheckedCallback({\n                    name: \"onSubmitDelete\",\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\n                    onSuccess: adjustedOnSuccessCallback ||\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\n                    identifier: id\n                });\n                return true;\n            }\n            else {\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\n                return false;\n            }\n        },\n\n        _onSubmitted: function(id) {\n            //nothing to do in the base uploader\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._options.callbacks.onTotalProgress(loaded, total);\n        },\n\n        _onUploadPrep: function(id) {\n            // nothing to do in the core uploader for now\n        },\n\n        _onUpload: function(id, name) {\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            //nothing to do in the base uploader\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\n            if (newStatus === qq.status.PAUSED) {\n                clearTimeout(this._retryTimeouts[id]);\n            }\n        },\n\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\n            var self = this;\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                self._fileOrBlobRejected(fileWrapper.id);\n            });\n        },\n\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\n            var errorMessage,\n                itemLimit = this._currentItemLimit,\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\n\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\n                if (items.length > 0) {\n                    this._handleCheckedCallback({\n                        name: \"onValidate\",\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\n                    });\n                }\n                else {\n                    this._itemError(\"noFilesError\");\n                }\n            }\n            else {\n                this._onValidateBatchCallbackFailure(items);\n                errorMessage = this._options.messages.tooManyItemsError\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\n                this._batchError(errorMessage);\n            }\n        },\n\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\n            var nextIndex = index + 1;\n\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\n\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n        },\n\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\n            var self = this,\n                nextIndex = index + 1,\n                validationDescriptor = this._getValidationDescriptor(items[index]);\n\n            this._validateFileOrBlobData(items[index], validationDescriptor)\n                .then(\n                function() {\n                    self._upload(items[index].id, params, endpoint);\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\n                },\n                function() {\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n                }\n            );\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            if (items.length === 0) {\n                this._itemError(\"noFilesError\");\n                return;\n            }\n\n            var validationDescriptors = this._getValidationDescriptors(items),\n                buttonId = this._getButtonId(items[0].file),\n                button = this._getButton(buttonId);\n\n            this._handleCheckedCallback({\n                name: \"onValidateBatch\",\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\n                identifier: \"batch validation\"\n            });\n        },\n\n        _preventLeaveInProgress: function() {\n            var self = this;\n\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\n                if (self.getInProgress()) {\n                    e = e || window.event;\n                    // for ie, ff\n                    e.returnValue = self._options.messages.onLeave;\n                    // for webkit\n                    return self._options.messages.onLeave;\n                }\n            });\n        },\n\n        // Attempts to refresh session data only if the `qq.Session` module exists\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\n        // callback will be invoked once the refresh is complete.\n        _refreshSessionData: function() {\n            var self = this,\n                options = this._options.session;\n\n            /* jshint eqnull:true */\n            if (qq.Session && this._options.session.endpoint != null) {\n                if (!this._session) {\n                    qq.extend(options, {cors: this._options.cors});\n\n                    options.log = qq.bind(this.log, this);\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\n\n                    this._session = new qq.Session(options);\n                }\n\n                setTimeout(function() {\n                    self._session.refresh().then(function(response, xhrOrXdr) {\n                        self._sessionRequestComplete();\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\n\n                    }, function(response, xhrOrXdr) {\n\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\n                    });\n                }, 0);\n            }\n        },\n\n        _sessionRequestComplete: function() {},\n\n        _setSize: function(id, newSize) {\n            this._uploadData.updateSize(id, newSize);\n            this._totalProgress && this._totalProgress.onNewSize(id);\n        },\n\n        _shouldAutoRetry: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            /*jshint laxbreak: true */\n            if (!this._preventRetries[id]\n                && this._options.retry.enableAuto\n                && uploadData.status !== qq.status.PAUSED) {\n\n                if (this._autoRetries[id] === undefined) {\n                    this._autoRetries[id] = 0;\n                }\n\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\n                    this._autoRetries[id] += 1;\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        _storeForLater: function(id) {\n            this._storedIds.push(id);\n        },\n\n        // Maps a file with the button that was used to select it.\n        _trackButton: function(id) {\n            var buttonId;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                buttonId = this._handler.getFile(id).qqButtonId;\n            }\n            else {\n                buttonId = this._getButtonId(this._handler.getInput(id));\n            }\n\n            if (buttonId) {\n                this._buttonIdsForFileIds[id] = buttonId;\n            }\n        },\n\n        _updateFormSupportAndParams: function(formElementOrId) {\n            this._options.form.element = formElementOrId;\n\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n                );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this.setEndpoint(this._formSupport.newEndpoint);\n                }\n            }\n        },\n\n        _upload: function(id, params, endpoint) {\n            var name = this.getName(id);\n\n            if (params) {\n                this.setParams(params, id);\n            }\n\n            if (endpoint) {\n                this.setEndpoint(endpoint, id);\n            }\n\n            this._handleCheckedCallback({\n                name: \"onSubmit\",\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\n                identifier: id\n            });\n        },\n\n        _uploadFile: function(id) {\n            if (!this._handler.upload(id)) {\n                this._uploadData.setStatus(id, qq.status.QUEUED);\n            }\n        },\n\n        _uploadStoredFiles: function() {\n            var idToUpload, stillSubmitting,\n                self = this;\n\n            while (this._storedIds.length) {\n                idToUpload = this._storedIds.shift();\n                this._uploadFile(idToUpload);\n            }\n\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\n            if (stillSubmitting) {\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\n                setTimeout(function() {\n                    self._uploadStoredFiles();\n                }, 1000);\n            }\n        },\n\n        /**\n         * Performs some internal validation checks on an item, defined in the `validation` option.\n         *\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\n         * @private\n         */\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\n            var self = this,\n                file = (function() {\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\n                        return fileWrapper.file.referenceBlob;\n                    }\n                    return fileWrapper.file;\n                }()),\n                name = validationDescriptor.name,\n                size = validationDescriptor.size,\n                buttonId = this._getButtonId(fileWrapper.file),\n                validationBase = this._getValidationBase(buttonId),\n                validityChecker = new qq.Promise();\n\n            validityChecker.then(\n                function() {},\n                function() {\n                    self._fileOrBlobRejected(fileWrapper.id, name);\n                });\n\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\n                this._itemError(\"typeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (!this._options.validation.allowEmpty && size === 0) {\n                this._itemError(\"emptyError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\n                this._itemError(\"sizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && size < validationBase.minSizeLimit) {\n                this._itemError(\"minSizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\n                    validityChecker.success,\n                    function(errorCode) {\n                        self._itemError(errorCode + \"ImageError\", name, file);\n                        validityChecker.failure();\n                    }\n                );\n            }\n            else {\n                validityChecker.success();\n            }\n\n            return validityChecker;\n        },\n\n        _wrapCallbacks: function() {\n            var self, safeCallback, prop;\n\n            self = this;\n\n            safeCallback = function(name, callback, args) {\n                var errorMsg;\n\n                try {\n                    return callback.apply(self, args);\n                }\n                catch (exception) {\n                    errorMsg = exception.message || exception.toString();\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\n                }\n            };\n\n            /* jshint forin: false, loopfunc: true */\n            for (prop in this._options.callbacks) {\n                (function() {\n                    var callbackName, callbackFunc;\n                    callbackName = prop;\n                    callbackFunc = self._options.callbacks[callbackName];\n                    self._options.callbacks[callbackName] = function() {\n                        return safeCallback(callbackName, callbackFunc, arguments);\n                    };\n                }());\n            }\n        }\n    };\n}());\n","/*globals qq*/\n(function() {\n    \"use strict\";\n\n    qq.FineUploaderBasic = function(o) {\n        var self = this;\n\n        // These options define FineUploaderBasic mode.\n        this._options = {\n            debug: false,\n            button: null,\n            multiple: true,\n            maxConnections: 3,\n            disableCancelForFormUploads: false,\n            autoUpload: true,\n\n            request: {\n                customHeaders: {},\n                endpoint: \"/server/upload\",\n                filenameParam: \"qqfilename\",\n                forceMultipart: true,\n                inputName: \"qqfile\",\n                method: \"POST\",\n                omitDefaultParams: false,\n                params: {},\n                paramsInBody: true,\n                requireSuccessJson: true,\n                totalFileSizeName: \"qqtotalfilesize\",\n                uuidName: \"qquuid\"\n            },\n\n            validation: {\n                allowedExtensions: [],\n                sizeLimit: 0,\n                minSizeLimit: 0,\n                itemLimit: 0,\n                stopOnFirstInvalidFile: true,\n                acceptFiles: null,\n                image: {\n                    maxHeight: 0,\n                    maxWidth: 0,\n                    minHeight: 0,\n                    minWidth: 0\n                },\n                allowEmpty: false\n            },\n\n            callbacks: {\n                onSubmit: function(id, name) {},\n                onSubmitted: function(id, name) {},\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\n                onAllComplete: function(successful, failed) {},\n                onCancel: function(id, name) {},\n                onUpload: function(id, name) {},\n                onUploadChunk: function(id, name, chunkData) {},\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\n                onResume: function(id, fileName, chunkData, customResumeData) {},\n                onProgress: function(id, name, loaded, total) {},\n                onTotalProgress: function(loaded, total) {},\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\n                onAutoRetry: function(id, name, attemptNumber) {},\n                onManualRetry: function(id, name) {},\n                onValidateBatch: function(fileOrBlobData) {},\n                onValidate: function(fileOrBlobData) {},\n                onSubmitDelete: function(id) {},\n                onDelete: function(id) {},\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\n                onPasteReceived: function(blob) {},\n                onStatusChange: function(id, oldStatus, newStatus) {},\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\n            },\n\n            messages: {\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\n                emptyError: \"{file} is empty, please select files again without it.\",\n                noFilesError: \"No files to upload.\",\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\n                maxHeightImageError: \"Image is too tall.\",\n                maxWidthImageError: \"Image is too wide.\",\n                minHeightImageError: \"Image is not tall enough.\",\n                minWidthImageError: \"Image is not wide enough.\",\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\n            },\n\n            retry: {\n                enableAuto: false,\n                maxAutoAttempts: 3,\n                autoAttemptDelay: 5,\n                preventRetryResponseProperty: \"preventRetry\"\n            },\n\n            classes: {\n                buttonHover: \"qq-upload-button-hover\",\n                buttonFocus: \"qq-upload-button-focus\"\n            },\n\n            chunking: {\n                enabled: false,\n                concurrent: {\n                    enabled: false\n                },\n                mandatory: false,\n                paramNames: {\n                    partIndex: \"qqpartindex\",\n                    partByteOffset: \"qqpartbyteoffset\",\n                    chunkSize: \"qqchunksize\",\n                    totalFileSize: \"qqtotalfilesize\",\n                    totalParts: \"qqtotalparts\"\n                },\n                partSize: 2000000,\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\n                success: {\n                    endpoint: null,\n\n                    headers: function(id) {\n                        return null;\n                    },\n\n                    jsonPayload: false,\n\n                    method: \"POST\",\n\n                    params: function(id) {\n                        return null;\n                    }\n                }\n            },\n\n            resume: {\n                enabled: false,\n                recordsExpireIn: 7, //days\n                paramNames: {\n                    resuming: \"qqresume\"\n                },\n                customKeys: function(fileId) {\n                    return [];\n                }\n            },\n\n            formatFileName: function(fileOrBlobName) {\n                return fileOrBlobName;\n            },\n\n            text: {\n                defaultResponseError: \"Upload failure reason unknown\",\n                fileInputTitle: \"file input\",\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\n            },\n\n            deleteFile: {\n                enabled: false,\n                method: \"DELETE\",\n                endpoint: \"/server/upload\",\n                customHeaders: {},\n                params: {}\n            },\n\n            cors: {\n                expected: false,\n                sendCredentials: false,\n                allowXdr: false\n            },\n\n            blobs: {\n                defaultName: \"misc_data\"\n            },\n\n            paste: {\n                targetElement: null,\n                defaultName: \"pasted_image\"\n            },\n\n            camera: {\n                ios: false,\n\n                // if ios is true: button is null means target the default button, otherwise target the button specified\n                button: null\n            },\n\n            // This refers to additional upload buttons to be handled by Fine Uploader.\n            // Each element is an object, containing `element` as the only required\n            // property.  The `element` must be a container that will ultimately\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\n            // Optional properties of each object include `multiple`, `validation`,\n            // and `folders`.\n            extraButtons: [],\n\n            // Depends on the session module.  Used to query the server for an initial file list\n            // during initialization and optionally after a `reset`.\n            session: {\n                endpoint: null,\n                params: {},\n                customHeaders: {},\n                refreshOnReset: true\n            },\n\n            // Send parameters associated with an existing form along with the files\n            form: {\n                // Element ID, HTMLElement, or null\n                element: \"qq-form\",\n\n                // Overrides the base `autoUpload`, unless `element` is null.\n                autoUpload: false,\n\n                // true = upload files on form submission (and squelch submit event)\n                interceptSubmit: true\n            },\n\n            // scale images client side, upload a new file for each scaled version\n            scaling: {\n                customResizer: null,\n\n                // send the original file as well\n                sendOriginal: true,\n\n                // fox orientation for scaled images\n                orient: true,\n\n                // If null, scaled image type will match reference image type.  This value will be referred to\n                // for any size record that does not specific a type.\n                defaultType: null,\n\n                defaultQuality: 80,\n\n                failureText: \"Failed to scale\",\n\n                includeExif: false,\n\n                // metadata about each requested scaled version\n                sizes: []\n            },\n\n            workarounds: {\n                iosEmptyVideos: true,\n                ios8SafariUploads: true,\n                ios8BrowserCrash: false\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(this._options, o, true);\n\n        this._buttons = [];\n        this._extraButtonSpecs = {};\n        this._buttonIdsForFileIds = [];\n\n        this._wrapCallbacks();\n        this._disposeSupport =  new qq.DisposeSupport();\n\n        this._storedIds = [];\n        this._autoRetries = [];\n        this._retryTimeouts = [];\n        this._preventRetries = [];\n        this._thumbnailUrls = [];\n\n        this._netUploadedOrQueued = 0;\n        this._netUploaded = 0;\n        this._uploadData = this._createUploadDataTracker();\n\n        this._initFormSupportAndParams();\n\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\n\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\n\n        this._endpointStore = this._createStore(this._options.request.endpoint);\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\n\n        this._handler = this._createUploadHandler();\n\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\n\n        if (this._options.button) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._options.button,\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._generateExtraButtonSpecs();\n\n        this._handleCameraAccess();\n\n        if (this._options.paste.targetElement) {\n            if (qq.PasteSupport) {\n                this._pasteHandler = this._createPasteHandler();\n            }\n            else {\n                this.log(\"Paste support module not found\", \"error\");\n            }\n        }\n\n        this._preventLeaveInProgress();\n\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\n        this._refreshSessionData();\n\n        this._succeededSinceLastAllComplete = [];\n        this._failedSinceLastAllComplete = [];\n\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\n        if (this._scaler.enabled) {\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\n        }\n\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\n            this._totalProgress = new qq.TotalProgress(\n                qq.bind(this._onTotalProgress, this),\n\n                function(id) {\n                    var entry = self._uploadData.retrieve({id: id});\n                    return (entry && entry.size) || 0;\n                }\n            );\n        }\n\n        this._currentItemLimit = this._options.validation.itemLimit;\n\n        this._customResumeDataStore = this._createStore();\n    };\n\n    // Define the private & public API methods.\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\n}());\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Base upload handler module.  Controls more specific handlers.\n *\n * @param o Options.  Passed along to the specific handler submodule as well.\n * @param namespace [optional] Namespace for the specific handler.\n */\nqq.UploadHandlerController = function(o, namespace) {\n    \"use strict\";\n\n    var controller = this,\n        chunkingPossible = false,\n        concurrentChunkingPossible = false,\n        chunking, preventRetryResponse, log, handler,\n\n    options = {\n        paramsStore: {},\n        maxConnections: 3, // maximum number of concurrent uploads\n        chunking: {\n            enabled: false,\n            multiple: {\n                enabled: false\n            }\n        },\n        log: function(str, level) {},\n        onProgress: function(id, fileName, loaded, total) {},\n        onComplete: function(id, fileName, response, xhr) {},\n        onCancel: function(id, fileName) {},\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\n        onUpload: function(id, fileName) {},\n        onUploadChunk: function(id, fileName, chunkData) {},\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\n        onAutoRetry: function(id, fileName, response, xhr) {},\n        onResume: function(id, fileName, chunkData, customResumeData) {},\n        onUuidChanged: function(id, newUuid) {},\n        getName: function(id) {},\n        setSize: function(id, newSize) {},\n        isQueued: function(id) {},\n        getIdsInProxyGroup: function(id) {},\n        getIdsInBatch: function(id) {},\n        isInProgress: function(id) {}\n    },\n\n    chunked = {\n        // Called when each chunk has uploaded successfully\n        done: function(id, chunkIdx, response, xhr) {\n            var chunkData = handler._getChunkData(id, chunkIdx);\n\n            handler._getFileState(id).attemptingResume = false;\n\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\n            handler._getFileState(id).loaded += chunkData.size;\n\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\n        },\n\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\n        // logic associated with closing out the file, such as combining the chunks.\n        finalize: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id);\n\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\n            handler.finalizeChunks(id).then(\n                function(response, xhr) {\n                    log(\"Finalize successful for \" + id);\n\n                    var normaizedResponse = upload.normalizeResponse(response, true);\n\n                    options.onProgress(id, name, size, size);\n                    handler._maybeDeletePersistedChunkData(id);\n                    upload.cleanup(id, normaizedResponse, xhr);\n                },\n                function(response, xhr) {\n                    var normaizedResponse = upload.normalizeResponse(response, false);\n\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normaizedResponse.error, \"error\");\n\n                    if (normaizedResponse.reset) {\n                        chunked.reset(id);\n                    }\n\n                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {\n                        upload.cleanup(id, normaizedResponse, xhr);\n                    }\n                }\n            );\n        },\n\n        handleFailure: function(chunkIdx, id, response, xhr) {\n            var name = options.getName(id);\n\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\n\n            handler.clearCachedChunk(id, chunkIdx);\n\n            var responseToReport = upload.normalizeResponse(response, false),\n                inProgressIdx;\n\n            if (responseToReport.reset) {\n                chunked.reset(id);\n            }\n            else {\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\n                if (inProgressIdx >= 0) {\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\n                }\n            }\n\n            // We may have aborted all other in-progress chunks for this file due to a failure.\n            // If so, ignore the failures associated with those aborts.\n            if (!handler._getFileState(id).temp.ignoreFailure) {\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\n                // chunks since they will be explicitly aborted\n                if (concurrentChunkingPossible) {\n                    handler._getFileState(id).temp.ignoreFailure = true;\n\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\n                        ckXhr.abort();\n                        // Flag the transport, in case we are waiting for some other async operation\n                        // to complete before attempting to upload the chunk\n                        ckXhr._cancelled = true;\n                    });\n\n                    // We must indicate that all aborted chunks are no longer in progress\n                    handler.moveInProgressToRemaining(id);\n\n                    // Free up any connections used by these chunks, but don't allow any\n                    // other files to take up the connections (until we have exhausted all auto-retries)\n                    connectionManager.free(id, true);\n                }\n\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\n                    // is a failure or not.\n                    upload.cleanup(id, responseToReport, xhr);\n                }\n            }\n        },\n\n        hasMoreParts: function(id) {\n            return !!handler._getFileState(id).chunking.remaining.length;\n        },\n\n        nextPart: function(id) {\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\n\n            if (nextIdx >= handler._getTotalChunks(id)) {\n                nextIdx = null;\n            }\n\n            return nextIdx;\n        },\n\n        reset: function(id) {\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\n\n            handler._maybeDeletePersistedChunkData(id);\n            handler.reevaluateChunking(id);\n            handler._getFileState(id).loaded = 0;\n        },\n\n        sendNext: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id),\n                chunkIdx = chunked.nextPart(id),\n                chunkData = handler._getChunkData(id, chunkIdx),\n                fileState = handler._getFileState(id),\n                resuming = fileState.attemptingResume,\n                inProgressChunks = fileState.chunking.inProgress || [];\n\n            if (fileState.loaded == null) {\n                fileState.loaded = 0;\n            }\n\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\n            if (resuming && options.onResume(id, name, chunkData, fileState.customResumeData) === false) {\n                chunked.reset(id);\n                chunkIdx = chunked.nextPart(id);\n                chunkData = handler._getChunkData(id, chunkIdx);\n                resuming = false;\n            }\n\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\n            if (chunkIdx == null && inProgressChunks.length === 0) {\n                chunked.finalize(id);\n            }\n\n            // Send the next chunk\n            else {\n                inProgressChunks.push(chunkIdx);\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\n\n                if (concurrentChunkingPossible) {\n                    connectionManager.open(id, chunkIdx);\n                }\n\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\n                    chunked.sendNext(id);\n                }\n\n                if (chunkData.blob.size === 0) {\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\n                }\n\n                var onUploadChunkPromise = options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\n\n                onUploadChunkPromise.then(\n                    function(requestOverrides) {\n                        if (!options.isInProgress(id)) {\n                            log(qq.format(\"Not sending chunked upload request for item {}.{} - no longer in progress.\", id, chunkIdx));\n                        }\n                        else {\n                            log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\n\n                            var uploadChunkData = {\n                                chunkIdx: chunkIdx,\n                                id: id,\n                                overrides: requestOverrides,\n                                resuming: resuming\n                            };\n\n                            handler.uploadChunk(uploadChunkData).then(\n                                // upload chunk success\n                                function success(response, xhr) {\n                                    log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\n\n                                    handler.clearCachedChunk(id, chunkIdx);\n\n                                    var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\n                                        responseToReport = upload.normalizeResponse(response, true),\n                                        inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\n\n                                    log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\n\n                                    chunked.done(id, chunkIdx, responseToReport, xhr);\n\n                                    if (inProgressChunkIdx >= 0) {\n                                        inProgressChunks.splice(inProgressChunkIdx, 1);\n                                    }\n\n                                    handler._maybePersistChunkedState(id);\n\n                                    if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\n                                        chunked.finalize(id);\n                                    }\n                                    else if (chunked.hasMoreParts(id)) {\n                                        chunked.sendNext(id);\n                                    }\n                                    else {\n                                        log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\n                                    }\n                                },\n\n                                // upload chunk failure\n                                function failure(response, xhr) {\n                                    chunked.handleFailure(chunkIdx, id, response, xhr);\n                                }\n                            )\n                                .done(function () {\n                                    handler.clearXhr(id, chunkIdx);\n                                });\n                        }\n                    },\n\n                    function(error) {\n                        chunked.handleFailure(chunkIdx, id, error, null);\n                    }\n                );\n            }\n        }\n    },\n\n    connectionManager = {\n        _open: [],\n        _openChunks: {},\n        _waiting: [],\n\n        available: function() {\n            var max = options.maxConnections,\n                openChunkEntriesCount = 0,\n                openChunksCount = 0;\n\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\n                openChunkEntriesCount++;\n                openChunksCount += openChunkIndexes.length;\n            });\n\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\n        },\n\n        /**\n         * Removes element from queue, starts upload of next\n         */\n        free: function(id, dontAllowNext) {\n            var allowNext = !dontAllowNext,\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\n                nextId;\n\n            delete connectionManager._openChunks[id];\n\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\n                delete handler._getFileState(id).file;\n            }\n\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\n            if (waitingIndex >= 0) {\n                connectionManager._waiting.splice(waitingIndex, 1);\n            }\n            // If this file was consuming a connection, allow the next file to be uploaded\n            else if (allowNext && connectionsIndex >= 0) {\n                connectionManager._open.splice(connectionsIndex, 1);\n\n                nextId = connectionManager._waiting.shift();\n                if (nextId >= 0) {\n                    connectionManager._open.push(nextId);\n                    upload.start(nextId);\n                }\n            }\n        },\n\n        getWaitingOrConnected: function() {\n            var waitingOrConnected = [];\n\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\n                if (chunks && chunks.length) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // For non-chunked files, only one connection will be consumed per file.\n            // This is where we aggregate those file IDs.\n            qq.each(connectionManager._open, function(idx, fileId) {\n                if (!connectionManager._openChunks[fileId]) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // There may be files waiting for a connection.\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\n\n            return waitingOrConnected;\n        },\n\n        isUsingConnection: function(id) {\n            return qq.indexOf(connectionManager._open, id) >= 0;\n        },\n\n        open: function(id, chunkIdx) {\n            if (chunkIdx == null) {\n                connectionManager._waiting.push(id);\n            }\n\n            if (connectionManager.available()) {\n                if (chunkIdx == null) {\n                    connectionManager._waiting.pop();\n                    connectionManager._open.push(id);\n                }\n                else {\n                    (function() {\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\n                        openChunksEntry.push(chunkIdx);\n                        connectionManager._openChunks[id] = openChunksEntry;\n                    }());\n                }\n\n                return true;\n            }\n\n            return false;\n        },\n\n        reset: function() {\n            connectionManager._waiting = [];\n            connectionManager._open = [];\n        }\n    },\n\n    simple = {\n        send: function(id, name) {\n            handler._getFileState(id).loaded = 0;\n\n            log(\"Sending simple upload request for \" + id);\n            handler.uploadFile(id).then(\n                function(response, optXhr) {\n                    log(\"Simple upload request succeeded for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, true),\n                        size = options.getSize(id);\n\n                    options.onProgress(id, name, size, size);\n                    upload.maybeNewUuid(id, responseToReport);\n                    upload.cleanup(id, responseToReport, optXhr);\n                },\n\n                function(response, optXhr) {\n                    log(\"Simple upload request failed for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, false);\n\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\n                        upload.cleanup(id, responseToReport, optXhr);\n                    }\n                }\n            );\n        }\n    },\n\n    upload = {\n        cancel: function(id) {\n            log(\"Cancelling \" + id);\n            options.paramsStore.remove(id);\n            connectionManager.free(id);\n        },\n\n        cleanup: function(id, response, optXhr) {\n            var name = options.getName(id);\n\n            options.onComplete(id, name, response, optXhr);\n\n            if (handler._getFileState(id)) {\n                handler._clearXhrs && handler._clearXhrs(id);\n            }\n\n            connectionManager.free(id);\n        },\n\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\n        // if none of these are available for the ID\n        getProxyOrBlob: function(id) {\n            return (handler.getProxy && handler.getProxy(id)) ||\n                (handler.getFile && handler.getFile(id));\n        },\n\n        initHandler: function() {\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\n\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\n                options,\n                {\n                    getCustomResumeData: options.getCustomResumeData,\n                    getDataByUuid: options.getDataByUuid,\n                    getName: options.getName,\n                    getSize: options.getSize,\n                    getUuid: options.getUuid,\n                    log: log,\n                    onCancel: options.onCancel,\n                    onProgress: options.onProgress,\n                    onUuidChanged: options.onUuidChanged\n                }\n            );\n\n            if (handler._removeExpiredChunkingRecords) {\n                handler._removeExpiredChunkingRecords();\n            }\n        },\n\n        isDeferredEligibleForUpload: function(id) {\n            return options.isQueued(id);\n        },\n\n        // For Blobs that are part of a group of generated images, along with a reference image,\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\n        // even if some async processing must be completed on one or more Blobs first.\n        maybeDefer: function(id, blob) {\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\n            // and then submit the upload to the specific handler once the blob is available.\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\n\n                // Blob creation may take some time, so the caller may want to update the\n                // UI to indicate that an operation is in progress, even before the actual\n                // upload begins and an onUpload callback is invoked.\n                options.onUploadPrep(id);\n\n                log(\"Attempting to generate a blob on-demand for \" + id);\n                blob.create().then(function(generatedBlob) {\n                    log(\"Generated an on-demand blob for \" + id);\n\n                    // Update record associated with this file by providing the generated Blob\n                    handler.updateBlob(id, generatedBlob);\n\n                    // Propagate the size for this generated Blob\n                    options.setSize(id, generatedBlob.size);\n\n                    // Order handler to recalculate chunking possibility, if applicable\n                    handler.reevaluateChunking(id);\n\n                    upload.maybeSendDeferredFiles(id);\n                },\n\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\n                function(errorMessage) {\n                    var errorResponse = {};\n\n                    if (errorMessage) {\n                        errorResponse.error = errorMessage;\n                    }\n\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\n\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\n                    upload.maybeSendDeferredFiles(id);\n                    connectionManager.free(id);\n                });\n            }\n            else {\n                return upload.maybeSendDeferredFiles(id);\n            }\n\n            return false;\n        },\n\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\n        maybeSendDeferredFiles: function(id) {\n            var idsInGroup = options.getIdsInProxyGroup(id),\n                uploadedThisId = false;\n\n            if (idsInGroup && idsInGroup.length) {\n                log(\"Maybe ready to upload proxy group file \" + id);\n\n                qq.each(idsInGroup, function(idx, idInGroup) {\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\n                        uploadedThisId = idInGroup === id;\n                        upload.now(idInGroup);\n                    }\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\n                        return false;\n                    }\n                });\n            }\n            else {\n                uploadedThisId = true;\n                upload.now(id);\n            }\n\n            return uploadedThisId;\n        },\n\n        maybeNewUuid: function(id, response) {\n            if (response.newUuid !== undefined) {\n                options.onUuidChanged(id, response.newUuid);\n            }\n        },\n\n        // The response coming from handler implementations may be in various formats.\n        // Instead of hoping a promise nested 5 levels deep will always return an object\n        // as its first param, let's just normalize the response here.\n        normalizeResponse: function(originalResponse, successful) {\n            var response = originalResponse;\n\n            // The passed \"response\" param may not be a response at all.\n            // It could be a string, detailing the error, for example.\n            if (!qq.isObject(originalResponse)) {\n                response = {};\n\n                if (qq.isString(originalResponse) && !successful) {\n                    response.error = originalResponse;\n                }\n            }\n\n            response.success = successful;\n\n            return response;\n        },\n\n        now: function(id) {\n            var name = options.getName(id);\n\n            if (!controller.isValid(id)) {\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\n            }\n\n            var onUploadPromise = options.onUpload(id, name);\n\n            onUploadPromise.then(\n                function() {\n                    if (chunkingPossible && handler._shouldChunkThisFile(id)) {\n                        chunked.sendNext(id);\n                    }\n                    else {\n                        simple.send(id, name);\n                    }\n                },\n\n                function(error) {\n                    error = error || {};\n\n                    log(id + \" upload start aborted due to rejected onUpload Promise - details: \" + error, \"error\");\n\n                    if (!options.onAutoRetry(id, name, error.responseJSON || {})) {\n                        var response = upload.normalizeResponse(error.responseJSON, false);\n                        upload.cleanup(id, response);\n                    }\n                }\n            );\n        },\n\n        start: function(id) {\n            var blobToUpload = upload.getProxyOrBlob(id);\n\n            if (blobToUpload) {\n                return upload.maybeDefer(id, blobToUpload);\n            }\n            else {\n                upload.now(id);\n                return true;\n            }\n        }\n    };\n\n    qq.extend(this, {\n        /**\n         * Adds file or file input to the queue\n         **/\n        add: function(id, file) {\n            handler.add.apply(this, arguments);\n        },\n\n        /**\n         * Sends the file identified by id\n         */\n        upload: function(id) {\n            if (connectionManager.open(id)) {\n                return upload.start(id);\n            }\n            return false;\n        },\n\n        retry: function(id) {\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\n            // any more failures at this point.\n            if (concurrentChunkingPossible) {\n                handler._getFileState(id).temp.ignoreFailure = false;\n            }\n\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\n            // Just go ahead and ask the handler to upload again.\n            if (connectionManager.isUsingConnection(id)) {\n                return upload.start(id);\n            }\n\n            // If we are attempting to retry a file that is not currently consuming a connection,\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\n            // before the retry commences.\n            else {\n                return controller.upload(id);\n            }\n        },\n\n        /**\n         * Cancels file upload by id\n         */\n        cancel: function(id) {\n            var cancelRetVal = handler.cancel(id);\n\n            if (qq.isGenericPromise(cancelRetVal)) {\n                cancelRetVal.then(function() {\n                    upload.cancel(id);\n                });\n            }\n            else if (cancelRetVal !== false) {\n                upload.cancel(id);\n            }\n        },\n\n        /**\n         * Cancels all queued or in-progress uploads\n         */\n        cancelAll: function() {\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\n                i;\n\n            // ensure files are cancelled in reverse order which they were added\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\n            if (waitingOrConnected.length) {\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\n                    controller.cancel(waitingOrConnected[i]);\n                }\n            }\n\n            connectionManager.reset();\n        },\n\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\n        // Undefined if no file record is available.\n        getFile: function(id) {\n            if (handler.getProxy && handler.getProxy(id)) {\n                return handler.getProxy(id).referenceBlob;\n            }\n\n            return handler.getFile && handler.getFile(id);\n        },\n\n        // Returns true if the Blob associated with the ID is related to a proxy s\n        isProxied: function(id) {\n            return !!(handler.getProxy && handler.getProxy(id));\n        },\n\n        getInput: function(id) {\n            if (handler.getInput) {\n                return handler.getInput(id);\n            }\n        },\n\n        reset: function() {\n            log(\"Resetting upload handler\");\n            controller.cancelAll();\n            connectionManager.reset();\n            handler.reset();\n        },\n\n        expunge: function(id) {\n            if (controller.isValid(id)) {\n                return handler.expunge(id);\n            }\n        },\n\n        /**\n         * Determine if the file exists.\n         */\n        isValid: function(id) {\n            return handler.isValid(id);\n        },\n\n        getResumableFilesData: function() {\n            if (handler.getResumableFilesData) {\n                return handler.getResumableFilesData();\n            }\n            return [];\n        },\n\n        /**\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\n         * will be undefined.\n         *\n         * @param id Internal file ID\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\n         */\n        getThirdPartyFileId: function(id) {\n            if (controller.isValid(id)) {\n                return handler.getThirdPartyFileId(id);\n            }\n        },\n\n        /**\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\n         * @param id ID of the upload/file to pause\n         * @returns {boolean} true if the upload was paused\n         */\n        pause: function(id) {\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\n                connectionManager.free(id);\n                handler.moveInProgressToRemaining(id);\n                return true;\n            }\n            return false;\n        },\n\n        isAttemptingResume: function(id) {\n            return !!handler.isAttemptingResume && handler.isAttemptingResume(id);\n        },\n\n        // True if the file is eligible for pause/resume.\n        isResumable: function(id) {\n            return !!handler.isResumable && handler.isResumable(id);\n        }\n    });\n\n    qq.extend(options, o);\n    log = options.log;\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\n\n    preventRetryResponse = (function() {\n        var response = {};\n\n        response[options.preventRetryParam] = true;\n\n        return response;\n    }());\n\n    upload.initHandler();\n};\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log,\n        getCustomResumeData = proxy.getCustomResumeData;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                if (uploadData.customResumeData) {\n                    data.customResumeData = uploadData.customResumeData;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isAttemptingResume: function(id) {\n            return handler._getFileState(id).attemptingResume;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = chunking.partSize,\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = chunking.partSize,\n                endpoint = getEndpoint(id),\n                customKeys = resume.customKeys(id),\n                localStorageId = qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n\n            customKeys.forEach(function(key) {\n                localStorageId += \"-\" + key;\n            });\n\n            return localStorageId;\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = chunking.partSize;\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.customResumeData = persistedData.customResumeData;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                var customResumeData = getCustomResumeData(id);\n\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now(),\n                };\n\n                if (customResumeData) {\n                    persistedData.customResumeData = customResumeData;\n                }\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*globals qq */\nqq.azure = qq.azure || {};\nqq.azure.util = qq.azure.util || (function() {\n    \"use strict\";\n\n    return {\n        AZURE_PARAM_PREFIX: \"x-ms-meta-\",\n\n        /** Test if a request header is actually a known Azure parameter. See: https://msdn.microsoft.com/en-us/library/azure/dd179451.aspx\n         *\n         * @param name Name of the Request Header parameter.\n         * @returns {Boolean} Test result.\n         */\n        _paramNameMatchesAzureParameter: function(name) {\n            switch (name) {\n                case \"Cache-Control\":\n                case \"Content-Disposition\":\n                case \"Content-Encoding\":\n                case \"Content-MD5\":\n                case \"x-ms-blob-content-encoding\":\n                case \"x-ms-blob-content-disposition\":\n                case \"x-ms-blob-content-md5\":\n                case \"x-ms-blob-cache-control\":\n                    return true;\n                default:\n                    return false;\n            }\n        },\n\n        /** Create Prefixed request headers which are appropriate for Azure.\n         *\n         * If the request header is appropriate for Azure (e.g. Cache-Control) then it should be\n         * passed along without a metadata prefix. For all other request header parameter names,\n         * qq.azure.util.AZURE_PARAM_PREFIX should be prepended.\n         *\n         * @param name Name of the Request Header parameter to construct a (possibly) prefixed name.\n         * @returns {String} A valid Request Header parameter name.\n         */\n        _getPrefixedParamName: function(name) {\n            if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\n                return name;\n            }\n            else {\n                return qq.azure.util.AZURE_PARAM_PREFIX + name;\n            }\n        },\n\n        getParamsAsHeaders: function(params) {\n            var headers = {};\n\n            qq.each(params, function(name, val) {\n                var headerName = qq.azure.util._getPrefixedParamName(name),\n                    value = null;\n\n                if (qq.isFunction(val)) {\n                    value = String(val());\n                }\n                else if (qq.isObject(val)) {\n                    qq.extend(headers, qq.azure.util.getParamsAsHeaders(val));\n                }\n                else {\n                    value = String(val);\n                }\n\n                if (value !== null) {\n                    if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\n                        headers[headerName] = value;\n                    } else {\n                        headers[headerName] = encodeURIComponent(value);\n                    }\n                }\n            });\n\n            return headers;\n        },\n\n        parseAzureError: function(responseText, log) {\n            var domParser = new DOMParser(),\n                responseDoc = domParser.parseFromString(responseText, \"application/xml\"),\n                errorTag = responseDoc.getElementsByTagName(\"Error\")[0],\n                errorDetails = {},\n                codeTag, messageTag;\n\n            log(\"Received error response: \" + responseText, \"error\");\n\n            if (errorTag) {\n                messageTag = errorTag.getElementsByTagName(\"Message\")[0];\n                if (messageTag) {\n                    errorDetails.message = messageTag.textContent;\n                }\n\n                codeTag = errorTag.getElementsByTagName(\"Code\")[0];\n                if (codeTag) {\n                    errorDetails.code = codeTag.textContent;\n                }\n\n                log(\"Parsed Azure error: \" + JSON.stringify(errorDetails), \"error\");\n\n                return errorDetails;\n            }\n        }\n    };\n}());\n","/*globals qq*/\n/**\n * Defines the public API for non-traditional FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.nonTraditionalBasePublicApi = {\n        setUploadSuccessParams: function(params, id) {\n            this._uploadSuccessParamsStore.set(params, id);\n        },\n        setUploadSuccessEndpoint: function(endpoint, id) {\n            this._uploadSuccessEndpointStore.set(endpoint, id);\n        }\n    };\n\n    qq.nonTraditionalBasePrivateApi = {\n        /**\n         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).\n         * This will hold up the call to the `onComplete` callback until we have determined success of the upload\n         * according to the local server, if a `successEndpoint` has been defined by the integrator.\n         *\n         * @param id ID of the completed upload\n         * @param name Name of the associated item\n         * @param result Object created from the server's parsed JSON response.\n         * @param xhr Associated XmlHttpRequest, if this was used to send the request.\n         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`\n         * if we need to ask the server.\n         * @private\n         */\n        _onComplete: function(id, name, result, xhr) {\n            var success = result.success ? true : false,\n                self = this,\n                onCompleteArgs = arguments,\n                successEndpoint = this._uploadSuccessEndpointStore.get(id),\n                successCustomHeaders = this._options.uploadSuccess.customHeaders,\n                successMethod = this._options.uploadSuccess.method,\n                cors = this._options.cors,\n                promise = new qq.Promise(),\n                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),\n                fileParams = this._paramsStore.get(id),\n\n                // If we are waiting for confirmation from the local server, and have received it,\n                // include properties from the local server response in the `response` parameter\n                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and\n                // fulfill the associated promise.\n                onSuccessFromServer = function(successRequestResult) {\n                    delete self._failedSuccessRequestCallbacks[id];\n                    qq.extend(result, successRequestResult);\n                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                    promise.success(successRequestResult);\n                },\n\n                // If the upload success request fails, attempt to re-send the success request (via the core retry code).\n                // The entire upload may be restarted if the server returns a \"reset\" property with a value of true as well.\n                onFailureFromServer = function(successRequestResult) {\n                    var callback = submitSuccessRequest;\n\n                    qq.extend(result, successRequestResult);\n\n                    if (result && result.reset) {\n                        callback = null;\n                    }\n\n                    if (!callback) {\n                        delete self._failedSuccessRequestCallbacks[id];\n                    }\n                    else {\n                        self._failedSuccessRequestCallbacks[id] = callback;\n                    }\n\n                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {\n                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                        promise.failure(successRequestResult);\n                    }\n                },\n                submitSuccessRequest,\n                successAjaxRequester;\n\n            // Ask the local server if the file sent is ok.\n            if (success && successEndpoint) {\n                successAjaxRequester = new qq.UploadSuccessAjaxRequester({\n                    endpoint: successEndpoint,\n                    method: successMethod,\n                    customHeaders: successCustomHeaders,\n                    cors: cors,\n                    log: qq.bind(this.log, this)\n                });\n\n                // combine custom params and default params\n                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);\n\n                // include any params associated with the file\n                fileParams && qq.extend(uploadSuccessParams, fileParams, true);\n\n                submitSuccessRequest = qq.bind(function() {\n                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)\n                        .then(onSuccessFromServer, onFailureFromServer);\n                }, self);\n\n                submitSuccessRequest();\n\n                return promise;\n            }\n\n            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.\n            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);\n        },\n\n        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.\n        _manualRetry: function(id) {\n            var successRequestCallback = this._failedSuccessRequestCallbacks[id];\n\n            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to Azure, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to Azure.\n * Some inherited options and API methods have a special meaning in the context of the Azure uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.azure.FineUploaderBasic = function(o) {\n        if (!qq.supportedFeatures.ajaxUploading) {\n            throw new qq.Error(\"Uploading directly to Azure is not possible in this browser.\");\n        }\n\n        var options = {\n            signature: {\n                endpoint: null,\n\n                customHeaders: {}\n            },\n\n            // 'uuid', 'filename', or a function which may be promissory\n            blobProperties: {\n                name: \"uuid\"\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            chunking: {\n                // If this is increased, Azure may respond with a 413\n                partSize: 4000000,\n                // Don't chunk files less than this size\n                minFileSize: 4000001\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds blob names for file representations constructed from a session request.\n        this._cannedBlobNames = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.azure.FineUploaderBasic.prototype, {\n        getBlobName: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedBlobNames[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n            return this._cannedBlobNames[id];\n        },\n\n        _getEndpointSpecificParams: function(id) {\n            return {\n                blob: this.getBlobName(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                container: this._endpointStore.get(id)\n            };\n        },\n\n        _createUploadHandler: function() {\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this,\n                {\n                    signature: this._options.signature,\n                    onGetBlobName: qq.bind(this._determineBlobName, this),\n                    deleteBlob: qq.bind(this._deleteBlob, this, true)\n                },\n                \"azure\");\n        },\n\n        _determineBlobName: function(id) {\n            var self = this,\n                blobNameOptionValue = this._options.blobProperties.name,\n                uuid = this.getUuid(id),\n                filename = this.getName(id),\n                fileExtension = qq.getExtension(filename),\n                blobNameToUse = uuid;\n\n            if (qq.isString(blobNameOptionValue)) {\n                switch (blobNameOptionValue) {\n                    case \"uuid\":\n                        if (fileExtension !== undefined) {\n                            blobNameToUse += \".\" + fileExtension;\n                        }\n                        return new qq.Promise().success(blobNameToUse);\n                    case \"filename\":\n                        return new qq.Promise().success(filename);\n                    default:\n                        return new qq.Promise.failure(\"Invalid blobName option value - \" + blobNameOptionValue);\n                }\n            }\n            else {\n                return blobNameOptionValue.call(this, id);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.blobName == null) {\n                throw new qq.Error(\"Did not find blob name property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedBlobNames[id] = sessionData.blobName;\n            }\n\n            return id;\n        },\n\n        _deleteBlob: function(relatedToCancel, id) {\n            var self = this,\n                deleteBlobSasUri = {},\n                blobUriStore = {\n                    get: function(id) {\n                        return self._endpointStore.get(id) + \"/\" + self.getBlobName(id);\n                    }\n                },\n                deleteFileEndpointStore = {\n                    get: function(id) {\n                        return deleteBlobSasUri[id];\n                    }\n                },\n                getSasSuccess = function(id, sasUri) {\n                    deleteBlobSasUri[id] = sasUri;\n                    deleteBlob.send(id);\n                },\n                getSasFailure = function(id, reason, xhr) {\n                    if (relatedToCancel) {\n                        self.log(\"Will cancel upload, but cannot remove uncommitted parts from Azure due to issue retrieving SAS\", \"error\");\n                        qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\n                    }\n                    else {\n                        self._onDeleteComplete(id, xhr, true);\n                        self._options.callbacks.onDeleteComplete(id, xhr, true);\n                    }\n                },\n                deleteBlob = new qq.azure.DeleteBlob({\n                    endpointStore: deleteFileEndpointStore,\n                    log: qq.bind(self.log, self),\n                    onDelete: function(id) {\n                        self._onDelete(id);\n                        self._options.callbacks.onDelete(id);\n                    },\n                    onDeleteComplete: function(id, xhrOrXdr, isError) {\n                        delete deleteBlobSasUri[id];\n\n                        if (isError) {\n                            if (relatedToCancel) {\n                                self.log(\"Will cancel upload, but failed to remove uncommitted parts from Azure.\", \"error\");\n                            }\n                            else {\n                                qq.azure.util.parseAzureError(xhrOrXdr.responseText, qq.bind(self.log, self));\n                            }\n                        }\n\n                        if (relatedToCancel) {\n                            qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\n                            self.log(\"Deleted uncommitted blob chunks for \" + id);\n                        }\n                        else {\n                            self._onDeleteComplete(id, xhrOrXdr, isError);\n                            self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                        }\n                    }\n                }),\n                getSas = new qq.azure.GetSas({\n                    cors: this._options.cors,\n                    customHeaders: this._options.signature.customHeaders,\n                    endpointStore: {\n                        get: function() {\n                            return self._options.signature.endpoint;\n                        }\n                    },\n                    restRequestVerb: deleteBlob.method,\n                    log: qq.bind(self.log, self)\n                });\n\n            getSas.request(id, blobUriStore.get(id)).then(\n                qq.bind(getSasSuccess, self, id),\n                qq.bind(getSasFailure, self, id));\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return {\n                sendDelete: function(id, uuid) {\n                    self._deleteBlob(false, id);\n                }\n            };\n        }\n    });\n}());\n","/*globals qq */\n/**\n * Upload handler used by the upload to Azure module that depends on File API support, and, therefore, makes use of\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to Azure Blob Storage containers via the\n * associated Azure API.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\n// TODO l18n for error messages returned to UI\nqq.azure.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        log = proxy.log,\n        cors = spec.cors,\n        endpointStore = spec.endpointStore,\n        paramsStore = spec.paramsStore,\n        signature = spec.signature,\n        filenameParam = spec.filenameParam,\n        minFileSizeForChunking = spec.chunking.minFileSize,\n        deleteBlob = spec.deleteBlob,\n        onGetBlobName = spec.onGetBlobName,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n\n        getBlobMetadata = function(id) {\n            var params = paramsStore.get(id);\n            params[filenameParam] = getName(id);\n            return params;\n        },\n\n        api = {\n            putBlob: new qq.azure.PutBlob({\n                getBlobMetadata: getBlobMetadata,\n                log: log\n            }),\n\n            putBlock: new qq.azure.PutBlock({\n                log: log\n            }),\n\n            putBlockList: new qq.azure.PutBlockList({\n                getBlobMetadata: getBlobMetadata,\n                log: log\n            }),\n\n            getSasForPutBlobOrBlock: new qq.azure.GetSas({\n                cors: cors,\n                customHeaders: signature.customHeaders,\n                endpointStore: {\n                    get: function() {\n                        return signature.endpoint;\n                    }\n                },\n                log: log,\n                restRequestVerb: \"PUT\"\n            })\n        };\n\n    function combineChunks(id) {\n        var promise = new qq.Promise();\n\n        getSignedUrl(id).then(function(sasUri) {\n            var mimeType = handler._getMimeType(id),\n                blockIdEntries = handler._getPersistableData(id).blockIdEntries;\n\n            api.putBlockList.send(id, sasUri, blockIdEntries, mimeType, function(xhr) {\n                handler._registerXhr(id, null, xhr, api.putBlockList);\n            })\n                .then(function(xhr) {\n                    log(\"Success combining chunks for id \" + id);\n                    promise.success({}, xhr);\n                }, function(xhr) {\n                    log(\"Attempt to combine chunks failed for id \" + id, \"error\");\n                    handleFailure(xhr, promise);\n                });\n\n        },\n        promise.failure);\n\n        return promise;\n    }\n\n    function determineBlobUrl(id) {\n        var containerUrl = endpointStore.get(id),\n            promise = new qq.Promise(),\n            getBlobNameSuccess = function(blobName) {\n                handler._setThirdPartyFileId(id, blobName);\n                promise.success(containerUrl + \"/\" + blobName);\n            },\n            getBlobNameFailure = function(reason) {\n                promise.failure(reason);\n            };\n\n        onGetBlobName(id).then(getBlobNameSuccess, getBlobNameFailure);\n\n        return promise;\n    }\n\n    function getSignedUrl(id, optChunkIdx) {\n        // We may have multiple SAS requests in progress for the same file, so we must include the chunk idx\n        // as part of the ID when communicating with the SAS ajax requester to avoid collisions.\n        var getSasId = optChunkIdx == null ? id : id + \".\" + optChunkIdx,\n\n            promise = new qq.Promise(),\n            getSasSuccess = function(sasUri) {\n                log(\"GET SAS request succeeded.\");\n                promise.success(sasUri);\n            },\n            getSasFailure = function(reason, getSasXhr) {\n                log(\"GET SAS request failed: \" + reason, \"error\");\n                promise.failure({error: \"Problem communicating with local server\"}, getSasXhr);\n            },\n            determineBlobUrlSuccess = function(blobUrl) {\n                api.getSasForPutBlobOrBlock.request(getSasId, blobUrl).then(\n                    getSasSuccess,\n                    getSasFailure\n                );\n            },\n            determineBlobUrlFailure = function(reason) {\n                log(qq.format(\"Failed to determine blob name for ID {} - {}\", id, reason), \"error\");\n                promise.failure({error: reason});\n            };\n\n        determineBlobUrl(id).then(determineBlobUrlSuccess, determineBlobUrlFailure);\n\n        return promise;\n    }\n\n    function handleFailure(xhr, promise) {\n        var azureError = qq.azure.util.parseAzureError(xhr.responseText, log),\n            errorMsg = \"Problem sending file to Azure\";\n\n        promise.failure({error: errorMsg,\n            azureError: azureError && azureError.message,\n            reset: xhr.status === 403\n        });\n    }\n\n    qq.extend(this, {\n        uploadChunk: function(params) {\n            var chunkIdx = params.chunkIdx;\n            var id = params.id;\n\n            var promise = new qq.Promise();\n\n            getSignedUrl(id, chunkIdx).then(\n                function(sasUri) {\n                    var xhr = handler._createXhr(id, chunkIdx),\n                    chunkData = handler._getChunkData(id, chunkIdx);\n\n                    handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n                    handler._registerXhr(id, chunkIdx, xhr, api.putBlock);\n\n                    // We may have multiple put block requests in progress for the same file, so we must include the chunk idx\n                    // as part of the ID when communicating with the put block ajax requester to avoid collisions.\n                    api.putBlock.upload(id + \".\" + chunkIdx, xhr, sasUri, chunkIdx, chunkData.blob).then(\n                        function(blockIdEntry) {\n                            if (!handler._getPersistableData(id).blockIdEntries) {\n                                handler._getPersistableData(id).blockIdEntries = [];\n                            }\n\n                            handler._getPersistableData(id).blockIdEntries.push(blockIdEntry);\n                            log(\"Put Block call succeeded for \" + id);\n                            promise.success({}, xhr);\n                        },\n                        function() {\n                            log(qq.format(\"Put Block call failed for ID {} on part {}\", id, chunkIdx), \"error\");\n                            handleFailure(xhr, promise);\n                        }\n                    );\n                },\n                promise.failure\n            );\n\n            return promise;\n        },\n\n        uploadFile: function(id) {\n            var promise = new qq.Promise(),\n                fileOrBlob = handler.getFile(id);\n\n            getSignedUrl(id).then(function(sasUri) {\n                var xhr = handler._createXhr(id);\n\n                handler._registerProgressHandler(id);\n\n                api.putBlob.upload(id, xhr, sasUri, fileOrBlob).then(\n                    function() {\n                        log(\"Put Blob call succeeded for \" + id);\n                        promise.success({}, xhr);\n                    },\n                    function() {\n                        log(\"Put Blob call failed for \" + id, \"error\");\n                        handleFailure(xhr, promise);\n                    }\n                );\n            },\n            promise.failure);\n\n            return promise;\n        }\n    });\n\n    qq.extend(this,\n        new qq.XhrUploadHandler({\n            options: qq.extend({namespace: \"azure\"}, spec),\n            proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n        }\n    ));\n\n    qq.override(this, function(super_) {\n        return {\n            expunge: function(id) {\n                var relatedToCancel = handler._wasCanceled(id),\n                    chunkingData = handler._getPersistableData(id),\n                    blockIdEntries = (chunkingData && chunkingData.blockIdEntries) || [];\n\n                if (relatedToCancel && blockIdEntries.length > 0) {\n                    deleteBlob(id);\n                }\n\n                super_.expunge(id);\n            },\n\n            finalizeChunks: function(id) {\n                return combineChunks(id);\n            },\n\n            _shouldChunkThisFile: function(id) {\n                var maybePossible = super_._shouldChunkThisFile(id);\n                return maybePossible && getSize(id) >= minFileSizeForChunking;\n            }\n        };\n    });\n};\n","/* globals qq */\n/**\n * Sends a GET request to the integrator's server, which should return a Shared Access Signature URI used to\n * make a specific request on a Blob via the Azure REST API.\n */\nqq.azure.GetSas = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            customHeaders: {},\n            restRequestVerb: \"PUT\",\n            endpointStore: null,\n            log: function(str, level) {}\n        },\n        requestPromises = {};\n\n    qq.extend(options, o);\n\n    function sasResponseReceived(id, xhr, isError) {\n        var promise = requestPromises[id];\n\n        if (isError) {\n            promise.failure(\"Received response code \" + xhr.status, xhr);\n        }\n        else {\n            if (xhr.responseText.length) {\n                promise.success(xhr.responseText);\n            }\n            else {\n                promise.failure(\"Empty response.\", xhr);\n            }\n        }\n\n        delete requestPromises[id];\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        successfulResponseCodes: {\n            GET: [200]\n        },\n        contentType: null,\n        customHeaders: options.customHeaders,\n        endpointStore: options.endpointStore,\n        cors: options.cors,\n        log: options.log,\n        onComplete: sasResponseReceived\n    }));\n\n    qq.extend(this, {\n        request: function(id, blobUri) {\n            var requestPromise = new qq.Promise(),\n                restVerb = options.restRequestVerb;\n\n            options.log(qq.format(\"Submitting GET SAS request for a {} REST request related to file ID {}.\", restVerb, id));\n\n            requestPromises[id] = requestPromise;\n\n            requester.initTransport(id)\n                .withParams({\n                    bloburi: blobUri,\n                    _method: restVerb\n                })\n                .withCacheBuster()\n                .send();\n\n            return requestPromise;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success\n * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`\n * property (by default) in an \"application/json\" response.\n *\n * @param o Options associated with all requests.\n * @constructor\n */\nqq.UploadSuccessAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingRequests = [],\n        options = {\n            method: \"POST\",\n            endpoint: null,\n            maxConnections: 3,\n            customHeaders: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    function handleSuccessResponse(id, xhrOrXdr, isError) {\n        var promise = pendingRequests[id],\n            responseJson = xhrOrXdr.responseText,\n            successIndicator = {success: true},\n            failureIndicator = {success: false},\n            parsedResponse;\n\n        delete pendingRequests[id];\n\n        options.log(qq.format(\"Received the following response body to an upload success request for id {}: {}\", id, responseJson));\n\n        try {\n            parsedResponse = qq.parseJson(responseJson);\n\n            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties\n            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,\n            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the\n            // response body for an \"error\" response.\n            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {\n                options.log(\"Upload success request was rejected by the server.\", \"error\");\n                promise.failure(qq.extend(parsedResponse, failureIndicator));\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(qq.extend(parsedResponse, successIndicator));\n            }\n        }\n        catch (error) {\n            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.\n            if (isError) {\n                options.log(qq.format(\"Your server indicated failure in its upload success request response for id {}!\", id), \"error\");\n                promise.failure(failureIndicator);\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(successIndicator);\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: handleSuccessResponse,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.\n         *\n         * @param id ID of the associated file\n         * @param spec `Object` with the properties that correspond to important values that we want to\n         * send to the server with this request.\n         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed\n         * payload of the response will be passed into the `failure` or `success` promise method.\n         */\n        sendSuccessRequest: function(id, spec) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting upload success request/notification for \" + id);\n\n            requester.initTransport(id)\n                .withParams(spec)\n                .send();\n\n            pendingRequests[id] = promise;\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Delete Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179413.aspx.\n */\nqq.azure.DeleteBlob = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"DELETE\",\n        options = {\n            endpointStore: {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhr, isError) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [202];\n            return codes;\n        }()),\n        contentType: null,\n        endpointStore: options.endpointStore,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete\n    }));\n\n    qq.extend(this, {\n        method: method,\n        send: function(id) {\n            options.log(\"Submitting Delete Blob request for \" + id);\n\n            return requester.initTransport(id)\n                .send();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179451.aspx.\n */\nqq.azure.PutBlob = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        options = {\n            getBlobMetadata: function(id) {},\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        promises = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        contentType: null,\n        customHeaders: function(id) {\n            var params = options.getBlobMetadata(id),\n                headers = qq.azure.util.getParamsAsHeaders(params);\n\n            headers[\"x-ms-blob-type\"] = \"BlockBlob\";\n\n            return headers;\n        },\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete endpoints[id];\n            delete promises[id];\n\n            if (isError) {\n                promise.failure();\n            }\n            else {\n                promise.success();\n            }\n        }\n    }));\n\n    qq.extend(this, {\n        method: method,\n        upload: function(id, xhr, url, file) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting Put Blob request for \" + id);\n\n            promises[id] = promise;\n            endpoints[id] = url;\n\n            requester.initTransport(id)\n                .withPayload(file)\n                .withHeaders({\"Content-Type\": file.type})\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Block Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd135726.aspx.\n */\nqq.azure.PutBlock = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        blockIdEntries = {},\n        promises = {},\n        options = {\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        contentType: null,\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id],\n                blockIdEntry = blockIdEntries[id];\n\n            delete endpoints[id];\n            delete promises[id];\n            delete blockIdEntries[id];\n\n            if (isError) {\n                promise.failure();\n            }\n            else {\n                promise.success(blockIdEntry);\n            }\n        }\n    }));\n\n    function createBlockId(partNum) {\n        var digits = 5,\n            zeros = new Array(digits + 1).join(\"0\"),\n            paddedPartNum = (zeros + partNum).slice(-digits);\n\n        return btoa(paddedPartNum);\n    }\n\n    qq.extend(this, {\n        method: method,\n        upload: function(id, xhr, sasUri, partNum, blob) {\n            var promise = new qq.Promise(),\n                blockId = createBlockId(partNum);\n\n            promises[id] = promise;\n\n            options.log(qq.format(\"Submitting Put Block request for {} = part {}\", id, partNum));\n\n            endpoints[id] = qq.format(\"{}&comp=block&blockid={}\", sasUri, encodeURIComponent(blockId));\n            blockIdEntries[id] = {part: partNum, id: blockId};\n\n            requester.initTransport(id)\n                .withPayload(blob)\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Block List Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179467.aspx.\n */\nqq.azure.PutBlockList = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        promises = {},\n        options = {\n            getBlobMetadata: function(id) {},\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        customHeaders: function(id) {\n            var params = options.getBlobMetadata(id);\n\n            return qq.azure.util.getParamsAsHeaders(params);\n        },\n        contentType: \"text/plain\",\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onSend: function() {},\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete endpoints[id];\n            delete promises[id];\n\n            if (isError) {\n                promise.failure(xhr);\n            }\n            else {\n                promise.success(xhr);\n            }\n\n        }\n    }));\n\n    function createRequestBody(blockIdEntries) {\n        var doc = document.implementation.createDocument(null, \"BlockList\", null);\n\n        // If we don't sort the block ID entries by part number, the file will be combined incorrectly by Azure\n        blockIdEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(blockIdEntries, function(idx, blockIdEntry) {\n            var latestEl = doc.createElement(\"Latest\"),\n                latestTextEl = doc.createTextNode(blockIdEntry.id);\n\n            latestEl.appendChild(latestTextEl);\n            qq(doc).children()[0].appendChild(latestEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    qq.extend(this, {\n        method: method,\n        send: function(id, sasUri, blockIdEntries, fileMimeType, registerXhrCallback) {\n            var promise = new qq.Promise(),\n                blockIdsXml = createRequestBody(blockIdEntries),\n                xhr;\n\n            promises[id] = promise;\n\n            options.log(qq.format(\"Submitting Put Block List request for {}\", id));\n\n            endpoints[id] = qq.format(\"{}&comp=blocklist\", sasUri);\n\n            xhr = requester.initTransport(id)\n                .withPayload(blockIdsXml)\n                .withHeaders({\"x-ms-blob-content-type\": fileMimeType})\n                .send();\n            registerXhrCallback(xhr);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                var name = entry.name,\n                    fullPath = entry.fullPath,\n                    indexOfNameInFullPath = fullPath.indexOf(name);\n\n                // remove file name from full path string\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n                // remove leading slash in full path string\n                if (fullPath.charAt(0) === \"/\") {\n                    fullPath = fullPath.substr(1);\n                }\n\n                file.qqPath = fullPath;\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.firefox()) {\n            return !e.relatedTarget;\n        }\n\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            e.preventDefault();\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n        // dt.types.contains check is for firefox\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains(\"Files\")));\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Defines the public API for FineUploader mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.uiPublicApi = {\n        addInitialFiles: function(cannedFileList) {\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\n            this._templating.addCacheToDom();\n        },\n\n        clearStoredFiles: function() {\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\n            this._templating.clearFiles();\n        },\n\n        addExtraDropzone: function(element) {\n            this._dnd && this._dnd.setupExtraDropzone(element);\n        },\n\n        removeExtraDropzone: function(element) {\n            if (this._dnd) {\n                return this._dnd.removeDropzone(element);\n            }\n        },\n\n        getItemByFileId: function(id) {\n            if (!this._templating.isHiddenForever(id)) {\n                return this._templating.getFileContainer(id);\n            }\n        },\n\n        reset: function() {\n            this._parent.prototype.reset.apply(this, arguments);\n            this._templating.reset();\n\n            if (!this._options.button && this._templating.getButton()) {\n                this._defaultButtonId = this._createUploadButton({\n                    element: this._templating.getButton(),\n                    title: this._options.text.fileInputTitle\n                }).getButtonId();\n            }\n\n            if (this._dnd) {\n                this._dnd.dispose();\n                this._dnd = this._setupDragAndDrop();\n            }\n\n            this._totalFilesInBatch = 0;\n            this._filesInBatchAddedToUi = 0;\n\n            this._setupClickAndEditEventHandlers();\n        },\n\n        setName: function(id, newName) {\n            var formattedFilename = this._options.formatFileName(newName);\n\n            this._parent.prototype.setName.apply(this, arguments);\n            this._templating.updateFilename(id, formattedFilename);\n        },\n\n        pauseUpload: function(id) {\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\n\n            paused && this._templating.uploadPaused(id);\n            return paused;\n        },\n\n        continueUpload: function(id) {\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\n\n            continued && this._templating.uploadContinued(id);\n            return continued;\n        },\n\n        getId: function(fileContainerOrChildEl) {\n            return this._templating.getFileId(fileContainerOrChildEl);\n        },\n\n        getDropTarget: function(fileId) {\n            var file = this.getFile(fileId);\n\n            return file.qqDropTarget;\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploader mode.\n     */\n    qq.uiPrivateApi = {\n        _getButton: function(buttonId) {\n            var button = this._parent.prototype._getButton.apply(this, arguments);\n\n            if (!button) {\n                if (buttonId === this._defaultButtonId) {\n                    button = this._templating.getButton();\n                }\n            }\n\n            return button;\n        },\n\n        _removeFileItem: function(fileId) {\n            this._templating.removeFile(fileId);\n        },\n\n        _setupClickAndEditEventHandlers: function() {\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\n\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\n            this._focusinEventSupported = !qq.firefox();\n\n            if (this._isEditFilenameEnabled())\n            {\n                this._filenameClickHandler = this._bindFilenameClickEvent();\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\n            }\n        },\n\n        _setupDragAndDrop: function() {\n            var self = this,\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\n                templating = this._templating,\n                defaultDropZone = templating.getDropZone();\n\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\n\n            return new qq.DragAndDrop({\n                dropZoneElements: dropZoneElements,\n                allowMultipleItems: this._options.multiple,\n                classes: {\n                    dropActive: this._options.classes.dropActive\n                },\n                callbacks: {\n                    processingDroppedFiles: function() {\n                        templating.showDropProcessing();\n                    },\n                    processingDroppedFilesComplete: function(files, targetEl) {\n                        templating.hideDropProcessing();\n\n                        qq.each(files, function(idx, file) {\n                            file.qqDropTarget = targetEl;\n                        });\n\n                        if (files.length) {\n                            self.addFiles(files, null, null);\n                        }\n                    },\n                    dropError: function(code, errorData) {\n                        self._itemError(code, errorData);\n                    },\n                    dropLog: function(message, level) {\n                        self.log(message, level);\n                    }\n                }\n            });\n        },\n\n        _bindFileButtonsClickEvent: function() {\n            var self = this;\n\n            return new qq.FileButtonsClickHandler({\n                templating: this._templating,\n\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n\n                onDeleteFile: function(fileId) {\n                    self.deleteFile(fileId);\n                },\n\n                onCancel: function(fileId) {\n                    self.cancel(fileId);\n                },\n\n                onRetry: function(fileId) {\n                    self.retry(fileId);\n                },\n\n                onPause: function(fileId) {\n                    self.pauseUpload(fileId);\n                },\n\n                onContinue: function(fileId) {\n                    self.continueUpload(fileId);\n                },\n\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                }\n            });\n        },\n\n        _isEditFilenameEnabled: function() {\n            /*jshint -W014 */\n            return this._templating.isEditFilenamePossible()\n                && !this._options.autoUpload\n                && qq.FilenameClickHandler\n                && qq.FilenameInputFocusHandler\n                && qq.FilenameInputFocusHandler;\n        },\n\n        _filenameEditHandler: function() {\n            var self = this,\n                templating = this._templating;\n\n            return {\n                templating: templating,\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n                onGetUploadStatus: function(fileId) {\n                    return self.getUploads({id: fileId}).status;\n                },\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                },\n                onSetName: function(id, newName) {\n                    self.setName(id, newName);\n                },\n                onEditingStatusChange: function(id, isEditing) {\n                    var qqInput = qq(templating.getEditInput(id)),\n                        qqFileContainer = qq(templating.getFileContainer(id));\n\n                    if (isEditing) {\n                        qqInput.addClass(\"qq-editing\");\n                        templating.hideFilename(id);\n                        templating.hideEditIcon(id);\n                    }\n                    else {\n                        qqInput.removeClass(\"qq-editing\");\n                        templating.showFilename(id);\n                        templating.showEditIcon(id);\n                    }\n\n                    // Force IE8 and older to repaint\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\n                }\n            };\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\n\n            if (this._isEditFilenameEnabled()) {\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\n                    this._templating.markFilenameEditable(id);\n                    this._templating.hideEditIcon(id);\n                }\n            }\n\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\n                this._templating.hideRetry(id);\n                this._templating.setStatusText(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\n            }\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\n                this._templating.hidePause(id);\n            }\n        },\n\n        _bindFilenameInputFocusInEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusInHandler(spec);\n        },\n\n        _bindFilenameInputFocusEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusHandler(spec);\n        },\n\n        _bindFilenameClickEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameClickHandler(spec);\n        },\n\n        _storeForLater: function(id) {\n            this._parent.prototype._storeForLater.apply(this, arguments);\n            this._templating.hideSpinner(id);\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._parent.prototype._onAllComplete.apply(this, arguments);\n            this._templating.resetTotalProgress();\n        },\n\n        _onSubmit: function(id, name) {\n            var file = this.getFile(id);\n\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\n                this._paramsStore.addReadOnly(id, {\n                    qqpath: file.qqPath\n                });\n            }\n\n            this._parent.prototype._onSubmit.apply(this, arguments);\n            this._addToList(id, name);\n        },\n\n        // The file item has been added to the DOM.\n        _onSubmitted: function(id) {\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\n            if (this._isEditFilenameEnabled()) {\n                this._templating.markFilenameEditable(id);\n                this._templating.showEditIcon(id);\n\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\n                if (!this._focusinEventSupported) {\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\n                }\n            }\n        },\n\n        // Update the progress bar & percentage as the file is uploaded\n        _onProgress: function(id, name, loaded, total) {\n            this._parent.prototype._onProgress.apply(this, arguments);\n\n            this._templating.updateProgress(id, loaded, total);\n\n            if (total === 0 || Math.round(loaded / total * 100) === 100) {\n                this._templating.hideCancel(id);\n                this._templating.hidePause(id);\n                this._templating.hideProgress(id);\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\n\n                // If ~last byte was sent, display total file size\n                this._displayFileSize(id);\n            }\n            else {\n                // If still uploading, display percentage - total size is actually the total request(s) size\n                this._displayFileSize(id, loaded, total);\n            }\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\n            this._templating.updateTotalProgress(loaded, total);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\n                templating = this._templating,\n                fileContainer = templating.getFileContainer(id),\n                self = this;\n\n            function completeUpload(result) {\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\n                // If so, don't perform any UI-related tasks related to this file.\n                if (!fileContainer) {\n                    return;\n                }\n\n                templating.setStatusText(id);\n\n                qq(fileContainer).removeClass(self._classes.retrying);\n                templating.hideProgress(id);\n\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\n                    templating.hideCancel(id);\n                }\n                templating.hideSpinner(id);\n\n                if (result.success) {\n                    self._markFileAsSuccessful(id);\n                }\n                else {\n                    qq(fileContainer).addClass(self._classes.fail);\n                    templating.showCancel(id);\n\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\n                        qq(fileContainer).addClass(self._classes.retryable);\n                        templating.showRetry(id);\n                    }\n                    self._controlFailureTextDisplay(id, result);\n                }\n            }\n\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\n            if (parentRetVal instanceof qq.Promise) {\n                parentRetVal.done(function(newResult) {\n                    completeUpload(newResult);\n                });\n\n            }\n            else {\n                completeUpload(result);\n            }\n\n            return parentRetVal;\n        },\n\n        _markFileAsSuccessful: function(id) {\n            var templating = this._templating;\n\n            if (this._isDeletePossible()) {\n                templating.showDeleteButton(id);\n            }\n\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\n\n            this._maybeUpdateThumbnail(id);\n        },\n\n        _onUploadPrep: function(id) {\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\n            this._templating.showSpinner(id);\n        },\n\n        _onUpload: function(id, name) {\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\n\n            this._templating.showSpinner(id);\n\n            return parentRetVal;\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\n\n            // Only display the pause button if we have finished uploading at least one chunk\n            // & this file can be resumed\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\n                this._templating.allowPause(id);\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._parent.prototype._onCancel.apply(this, arguments);\n            this._removeFileItem(id);\n\n            if (this._getNotFinished() === 0) {\n                this._templating.resetTotalProgress();\n            }\n        },\n\n        _onBeforeAutoRetry: function(id) {\n            var retryNumForDisplay, maxAuto, retryNote;\n\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\n\n            this._showCancelLink(id);\n\n            if (this._options.retry.showAutoRetryNote) {\n                retryNumForDisplay = this._autoRetries[id];\n                maxAuto = this._options.retry.maxAutoAttempts;\n\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\n\n                this._templating.setStatusText(id, retryNote);\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\n            }\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\n                this._templating.resetProgress(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\n                this._templating.setStatusText(id);\n                this._templating.showSpinner(id);\n                this._showCancelLink(id);\n                return true;\n            }\n            else {\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\n                this._templating.showRetry(id);\n                return false;\n            }\n        },\n\n        _onSubmitDelete: function(id) {\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\n\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\n        },\n\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\n            if (this._options.deleteFile.forceConfirm) {\n                this._showDeleteConfirm.apply(this, arguments);\n            }\n            else {\n                this._sendDeleteRequest.apply(this, arguments);\n            }\n        },\n\n        _onDeleteComplete: function(id, xhr, isError) {\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\n\n            this._templating.hideSpinner(id);\n\n            if (isError) {\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\n                this._templating.showDeleteButton(id);\n            }\n            else {\n                this._removeFileItem(id);\n            }\n        },\n\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\n            this._templating.hideDeleteButton(id);\n            this._templating.showSpinner(id);\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\n            this._deleteHandler.sendDelete.apply(this, arguments);\n        },\n\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\n            /*jshint -W004 */\n            var fileName = this.getName(id),\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\n                uuid = this.getUuid(id),\n                deleteRequestArgs = arguments,\n                self = this,\n                retVal;\n\n            retVal = this._options.showConfirm(confirmMessage);\n\n            if (qq.isGenericPromise(retVal)) {\n                retVal.then(function() {\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\n                });\n            }\n            else if (retVal !== false) {\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\n            }\n        },\n\n        _addToList: function(id, name, canned) {\n            var prependData,\n                prependIndex = 0,\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\n                record;\n\n            if (this._options.display.prependFiles) {\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\n                    prependIndex = this._filesInBatchAddedToUi - 1;\n                }\n\n                prependData = {\n                    index: prependIndex\n                };\n            }\n\n            if (!canned) {\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\n                    this._templating.disableCancel();\n                }\n\n                // Cancel all existing (previous) files and clear the list if this file is not part of\n                // a scaled file group that has already been accepted, or if this file is not part of\n                // a scaled file group at all.\n                if (!this._options.multiple) {\n                    record = this.getUploads({id: id});\n\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\n\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\n                        this._handler.cancelAll();\n                        this._clearList();\n                        this._handledProxyGroup = null;\n                    }\n                }\n            }\n\n            if (canned) {\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\n            }\n            else {\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\n            }\n\n            this._filesInBatchAddedToUi += 1;\n\n            if (canned ||\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\n\n                this._displayFileSize(id);\n            }\n        },\n\n        _clearList: function() {\n            this._templating.clearFiles();\n            this.clearStoredFiles();\n        },\n\n        _displayFileSize: function(id, loadedSize, totalSize) {\n            var size = this.getSize(id),\n                sizeForDisplay = this._formatSize(size);\n\n            if (size >= 0) {\n                if (loadedSize !== undefined && totalSize !== undefined) {\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\n                }\n\n                this._templating.updateSize(id, sizeForDisplay);\n            }\n        },\n\n        _formatProgress: function(uploadedSize, totalSize) {\n            var message = this._options.text.formatProgress;\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\n            r(\"{total_size}\", this._formatSize(totalSize));\n            return message;\n        },\n\n        _controlFailureTextDisplay: function(id, response) {\n            var mode, responseProperty, failureReason;\n\n            mode = this._options.failedUploadTextDisplay.mode;\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\n\n            if (mode === \"custom\") {\n                failureReason = response[responseProperty];\n                if (!failureReason) {\n                    failureReason = this._options.text.failUpload;\n                }\n\n                this._templating.setStatusText(id, failureReason);\n\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\n                    this._showTooltip(id, failureReason);\n                }\n            }\n            else if (mode === \"default\") {\n                this._templating.setStatusText(id, this._options.text.failUpload);\n            }\n            else if (mode !== \"none\") {\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\n            }\n        },\n\n        _showTooltip: function(id, text) {\n            this._templating.getFileContainer(id).title = text;\n        },\n\n        _showCancelLink: function(id) {\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\n                this._templating.showCancel(id);\n            }\n        },\n\n        _itemError: function(code, name, item) {\n            var message = this._parent.prototype._itemError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _batchError: function(message) {\n            this._parent.prototype._batchError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _setupPastePrompt: function() {\n            var self = this;\n\n            this._options.callbacks.onPasteReceived = function() {\n                var message = self._options.paste.namePromptMessage,\n                    defaultVal = self._options.paste.defaultName;\n\n                return self._options.showPrompt(message, defaultVal);\n            };\n        },\n\n        _fileOrBlobRejected: function(id, name) {\n            this._totalFilesInBatch -= 1;\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            this._totalFilesInBatch = items.length;\n            this._filesInBatchAddedToUi = 0;\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\n        },\n\n        _maybeUpdateThumbnail: function(fileId) {\n            var thumbnailUrl = this._thumbnailUrls[fileId],\n                fileStatus = this.getUploads({id: fileId}).status;\n\n            if (fileStatus !== qq.status.DELETED &&\n                (thumbnailUrl ||\n                this._options.thumbnails.placeholders.waitUntilResponse ||\n                !qq.supportedFeatures.imagePreviews)) {\n\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\n                // if called with a null thumbnailUrl.\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\n\n            this._addToList(id, this.getName(id), true);\n            this._templating.hideSpinner(id);\n            this._templating.hideCancel(id);\n            this._markFileAsSuccessful(id);\n\n            return id;\n        },\n\n        _setSize: function(id, newSize) {\n            this._parent.prototype._setSize.apply(this, arguments);\n\n            this._templating.updateSize(id, this._formatSize(newSize));\n        },\n\n        _sessionRequestComplete: function() {\n            this._templating.addCacheToDom();\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateHtml,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListHtml,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListHtml = fileListNode.innerHTML;\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: qq.trimStr(tempTemplateEl.innerHTML),\n                fileTemplate: qq.trimStr(fileListHtml)\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateHtml = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.innerHTML = templateHtml.template;\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = qq.toElement(templateHtml.fileTemplate),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n","/*globals qq */\n/**\n * This defines FineUploader mode w/ support for uploading to Azure, which provides all the basic\n * functionality of Fine Uploader as well as code to handle uploads directly to Azure.\n * This module inherits all logic from UI & core mode and adds some UI-related logic\n * specific to the upload-to-Azure workflow.  Some inherited options and API methods have a special meaning\n * in the context of the Azure uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.azure.FineUploader = function(o) {\n        var options = {\n            failedUploadTextDisplay: {\n                mode: \"custom\"\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Inherit instance data from FineUploader, which should in turn inherit from azure.FineUploaderBasic.\n        qq.FineUploader.call(this, options, \"azure\");\n    };\n\n    // Inherit the API methods from FineUploaderBasicS3\n    qq.extend(qq.azure.FineUploader.prototype, qq.azure.FineUploaderBasic.prototype);\n\n    // Inherit public and private API methods related to UI\n    qq.extend(qq.azure.FineUploader.prototype, qq.uiPublicApi);\n    qq.extend(qq.azure.FineUploader.prototype, qq.uiPrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.azure.FineUploader.prototype, {\n    });\n}());\n"]}