{"version":3,"sources":["?","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/traditional/traditional.form.upload.handler.js","../client/js/traditional/traditional.xhr.upload.handler.js","../client/js/traditional/all-chunks-done.ajax.requester.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js","../client/js/third-party/crypto-js/core.js","../client/js/third-party/crypto-js/enc-base64.js","../client/js/third-party/crypto-js/hmac.js","../client/js/third-party/crypto-js/sha1.js","../client/js/third-party/crypto-js/sha256.js","../client/js/third-party/crypto-js/lib-typedarrays.js","../client/js/s3/util.js","../client/js/non-traditional-common/uploader.basic.api.js","../client/js/s3/uploader.basic.js","../client/js/s3/request-signer.js","../client/js/uploadsuccess.ajax.requester.js","../client/js/s3/multipart.initiate.ajax.requester.js","../client/js/s3/multipart.complete.ajax.requester.js","../client/js/s3/multipart.abort.ajax.requester.js","../client/js/s3/s3.xhr.upload.handler.js","../client/js/s3/s3.form.upload.handler.js","../client/js/s3/uploader.js","../client/js/azure/util.js","../client/js/azure/uploader.basic.js","../client/js/azure/azure.xhr.upload.handler.js","../client/js/azure/get-sas.js","../client/js/azure/rest/delete-blob.js","../client/js/azure/rest/put-blob.js","../client/js/azure/rest/put-block.js","../client/js/azure/rest/put-block-list.js","../client/js/azure/uploader.js"],"names":["global","qq","element","hide","style","display","this","attach","type","fn","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","name","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","each","idx","val","push","getFirstByClass","children","child","firstChild","nodeType","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","exec","getAttribute","undefined","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","data","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","length","Uint8Array","character","charCodeAt","log","message","level","console","isObject","variable","Object","prototype","toString","call","isFunction","isArray","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","args","Array","slice","arguments","newStr","nextIdxToReplace","strBefore","substring","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","toLowerCase","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","error","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","prop","override","target","sourceFn","super_","source","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","retVal","Storage","key","getItem","charAt","bind","oldFunc","context","newArgs","concat","apply","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","match","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","self","disposeSupport","options","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","index","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onBeforeStatusChange","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","params","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","_options","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","debug","pauseUpload","removeFileRef","expunge","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","_customResumeDataStore","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setCustomResumeData","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","fileRecord","_onDeleteComplete","errorMessage","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","callbacks","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","toUpperCase","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","namespace","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadResult","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkResult","partIndex","onUploadChunkSuccess","onResume","customResumeData","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","isInProgress","getCustomResumeData","_getCustomResumeData","UploadHandlerController","_fileOrBlobRejected","_formatSize","sizeSymbols","max","toFixed","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_handleDeleteSuccess","_handleDeleteFailed","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","allowEmpty","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","omitDefaultParams","paramsInBody","requireSuccessJson","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","jsonPayload","recordsExpireIn","resuming","customKeys","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","onUploadChunkPromise","requestOverrides","uploadChunkData","overrides","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","onUploadPromise","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","isResumable","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","localStorageId","forEach","_getMimeType","_getPersistableData","ceil","_markNotResumable","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","el","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","getIframeContentJson","doc","innerHtml","contentWindow","nodeValue","createForm","responseFromMessage","multipart","addChunkingSpecificParams","allChunksDoneRequester","AllChunksDoneAjaxRequester","createReadyStateChangedHandler","onUploadOrChunkComplete","getChunksCompleteParams","isErrorUploadResponse","parseResponse","sendChunksCompleteRequest","complete","setParamsAndGetEntityToSend","entityToSendParams","xhrOverrides","setUploadHeaders","headersOptions","headerOverrides","headerName","headerValue","extraHeaders","uploadChunkParams","toSend","promises","endpointHandler","DragAndDrop","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","dropZoneElements","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","relatedTarget","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","FineUploader","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","content","createDocumentFragment","map","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","uploader","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateHtml","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","update","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListHtml","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus","CryptoJS","C","C_lib","lib","Base","F","subtype","mixIn","init","$super","instance","properties","propertyName","clone","WordArray","words","sigBytes","encoder","Hex","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","nBytes","C_enc","enc","hexChars","bite","hexStr","hexStrLength","Latin1","latin1Chars","fromCharCode","latin1Str","latin1StrLength","Utf8","decodeURIComponent","escape","utf8Str","unescape","BufferedBlockAlgorithm","_data","_nDataBytes","_append","_process","doFlush","dataWords","dataSigBytes","blockSize","blockSizeBytes","nBlocksReady","_minBufferSize","nWordsReady","nBytesReady","min","_doProcessBlock","processedWords","Hasher","cfg","_doReset","messageUpdate","hash","_doFinalize","_createHelper","hasher","_createHmacHelper","C_algo","HMAC","algo","Base64","_map","base64Chars","byte1","byte2","byte3","triplet","j","paddingChar","base64Str","base64StrLength","paddingIndex","bits1","bits2","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","hmac","W","SHA1","_hash","M","H","n","t","nBitsTotal","nBitsLeft","floor","HmacSHA1","K","isPrime","sqrtN","factor","getFractionalBits","nPrime","SHA256","f","g","h","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","HmacSHA256","superInit","subInit","typedArray","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","byteOffset","byteLength","typedArrayByteLength","s3","util","ALGORITHM_PARAM_NAME","AWS_PARAM_PREFIX","CREDENTIAL_PARAM_NAME","DATE_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_VALUE","SERVER_SIDE_ENCRYPTION_PARAM_NAME","SERVER_SIDE_ENCRYPTION_PARAM_VALUE","SESSION_TOKEN_PARAM_NAME","V4_ALGORITHM_PARAM_VALUE","V4_SIGNATURE_PARAM_NAME","CASE_SENSITIVE_PARAM_NAMES","UNSIGNABLE_REST_HEADER_NAMES","UNPREFIXED_PARAM_NAMES","getBucket","patterns","bucket","pattern","_getPrefixedParamName","getPolicy","policy","conditions","date","drift","clockDrift","accessKey","acl","expectedStatus","sessionToken","successRedirectUrl","getSuccessRedirectAbsoluteUrl","minFileSize","maxFileSize","reducedRedundancy","region","serverSideEncryption","signatureVersion","expiration","getPolicyExpirationDate","Content-Type","success_action_status","success_action_redirect","getV4CredentialsString","getV4PolicyDate","awsParamName","enforceSizeLimits","refreshPolicyCredentials","newSessionToken","sessionTokenFound","oldCondIdx","oldCondObj","oldCondName","oldCondVal","generateAwsParams","signPolicyCallback","awsParams","customParams","policyJson","AWSAccessKeyId","policyAndSignature","updatedAccessKey","updatedSessionToken","signature","minSize","adjustedMinSize","adjustedMaxSize","adjustedDate","getPolicyDate","getCredentialsDate","getUTCFullYear","getUTCMonth","getUTCDate","_minutesToAdd_","minutesToAdd","pad","setMinutes","getMinutes","toISOString","number","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseIframeResponse","queryString","search","etag","targetAnchorContainer","encodeQueryStringParam","percentEncoded","uriEscape","uriEscapePath","nonTraditionalBasePublicApi","setUploadSuccessParams","_uploadSuccessParamsStore","setUploadSuccessEndpoint","_uploadSuccessEndpointStore","nonTraditionalBasePrivateApi","onCompleteArgs","successEndpoint","successCustomHeaders","uploadSuccess","successMethod","uploadSuccessParams","fileParams","onSuccessFromServer","successRequestResult","_failedSuccessRequestCallbacks","onFailureFromServer","submitSuccessRequest","successAjaxRequester","UploadSuccessAjaxRequester","_getEndpointSpecificParams","sendSuccessRequest","successRequestCallback","objectProperties","host","credentials","secretKey","iframeSupport","localBlankPagePath","onCredentialsExpired","setCredentials","_currentCredentials","_aclStore","_cannedKeys","_cannedBuckets","_buckets","_hosts","getKey","ignoreEmpty","setAcl","aclStore","_determineBucket","getHost","_determineHost","getKeyName","_determineKeyName","maxSizeLimit","oldParams","modifiedParams","paramName","credentialsProvider","onExpired","updateCredentials","_determineObjectPropertyValue","property","maybe","keynameLogic","onGetKeynameFailure","onGetKeynameSuccess","keyname","keynameToUse","_handleKeynameFunction","keynameFunc","successCallback","failureCallback","getResponseHeader","s3Key","s3Bucket","RequestSigner","thisSignatureRequester","pendingSignatures","expectingPolicy","signatureSpec","generateHeaders","signatureConstructor","getHeaders","Authorization","getRequestDate","getSignedHeaders","getEndOfUrl","v2","getStringToSign","contentMd5","headersStr","endOfUrl","signApiRequest","signatureEffort","headersWordArray","headersHmacSha1","headersHmacSha1Base64","signPolicy","policyStr","policyWordArray","base64Policy","policyHmacSha1","policyHmacSha1Base64","v4","getCanonicalQueryString","endOfUri","queryParamIdx","canonicalQueryString","encodedQueryParams","encodedQueryParamNames","queryStrings","nameAndVal","paramVal","encodedQueryParamName","getCanonicalRequest","getCanonicalUri","headerNames","hashedContent","getEncodedHashedPayload","onloadend","DONE","getScope","canonicalRequest","hashedRequest","scope","stringToSignTemplate","hashed","raw","signedHeaders","headersPattern","matches","dateKey","dateRegionKey","dateRegionServiceKey","signingKey","credentialPattern","credentialCondition","credential","condition","handleSignatureReceived","responseJson","pendingSignatureData","invalid","getStringToSignArtifacts","requestInfo","toSign","generateStringToSign","headerIndexesToRemove","headerIdx","toSignRaw","REQUEST_TYPE","MULTIPART_ABORT","uploadId","MULTIPART_INITIATE","MULTIPART_COMPLETE","MULTIPART_UPLOAD","partNum","Host","determineSignatureClientSide","toBeSigned","updatedHeaders","getToSign","signatureArtifacts","stringToSign","getSignature","queryParams","stringToSignRaw","constructStringToSign","artifacts","theHeaders","withUploadId","theUploadId","withContent","theContent","withContentType","theContentType","withPartNum","thePartNum","toUTCString","_artifacts_","pendingRequests","handleSuccessResponse","successIndicator","failureIndicator","parsedResponse","InitiateMultipartAjaxRequester","pendingInitiateRequests","getContentType","getSignatureAjaxRequester","handleInitiateRequestComplete","domParser","DOMParser","responseDoc","parseFromString","uploadIdElements","messageElements","CompleteMultipartAjaxRequester","pendingCompleteRequests","handleCompleteRequestComplete","bucketEls","keyEls","getCompleteRequestBody","etagEntries","implementation","createDocument","etagEntry","partEl","partNumEl","partNumTextEl","createTextNode","etagTextEl","etagEl","XMLSerializer","serializeToString","AbortMultipartAjaxRequester","handleAbortRequestComplete","errorEls","awsErrorMsg","onGetBucket","onGetHost","onGetKeyName","combine","etagMap","etags","requesters","completeMultipart","initHeaders","urlSafe","restSignature","put","domain","track","hasContentType","setup","uploadIdPromise","initiateMultipart","abortMultipart","policySignature","initParams","cachedBucket","cachedHost","shouldReset","keyName","encodedKey","parsedErrorProps","parseError","awsResponseXml","parsedDoc","errorDetails","codeEls","messageEls","existedInLocalStorage","baseStorageId","bucketName","isValidResponse","responseData","handleFinishedUpload","handleUpload","azure","AZURE_PARAM_PREFIX","_paramNameMatchesAzureParameter","getParamsAsHeaders","parseAzureError","errorTag","codeTag","messageTag","blobProperties","_cannedBlobNames","getBlobName","onGetBlobName","_determineBlobName","deleteBlob","_deleteBlob","blobNameOptionValue","fileExtension","blobNameToUse","blobName","relatedToCancel","deleteBlobSasUri","blobUriStore","deleteFileEndpointStore","getSasSuccess","sasUri","getSasFailure","DeleteBlob","getSas","GetSas","restRequestVerb","minFileSizeForChunking","getBlobMetadata","putBlob","PutBlob","putBlock","PutBlock","putBlockList","PutBlockList","getSasForPutBlobOrBlock","combineChunks","getSignedUrl","mimeType","blockIdEntries","determineBlobUrl","containerUrl","getBlobNameSuccess","getBlobNameFailure","getSasId","getSasXhr","determineBlobUrlSuccess","blobUrl","determineBlobUrlFailure","azureError","blockIdEntry","chunkingData","maybePossible","requestPromises","sasResponseReceived","blobUri","requestPromise","restVerb","bloburi","codes","endpoints","createBlockId","digits","zeros","paddedPartNum","btoa","blockId","createRequestBody","latestEl","latestTextEl","fileMimeType","registerXhrCallback","blockIdsXml","x-ms-blob-content-type"],"mappings":"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","file":"all.fine-uploader.js","sourcesContent":[null,"/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\nqq.version = \"5.16.0-alpha.3\";\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\n    function isChrome21OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         * - onBeforeStatusChange(fileId): callback that is executed before the status change is broadcast\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            spec.onBeforeStatusChange && spec.onBeforeStatusChange(id);\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\n/**\n * Defines the public API for FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.basePublicApi = {\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\n        addBlobs: function(blobDataOrArray, params, endpoint) {\n            this.addFiles(blobDataOrArray, params, endpoint);\n        },\n\n        addInitialFiles: function(cannedFileList) {\n            var self = this;\n\n            qq.each(cannedFileList, function(index, cannedFile) {\n                self._addCannedFile(cannedFile);\n            });\n        },\n\n        addFiles: function(data, params, endpoint) {\n            this._maybeHandleIos8SafariWorkaround();\n\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\n\n                processBlob = qq.bind(function(blob) {\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processBlobData = qq.bind(function(blobData) {\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\n                }, this),\n\n                processCanvas = qq.bind(function(canvas) {\n                    var blob = qq.canvasToBlob(canvas);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName + \".png\"\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processCanvasData = qq.bind(function(canvasData) {\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: canvasData.name\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processFileOrInput = qq.bind(function(fileOrInput) {\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\n                        var files = Array.prototype.slice.call(fileOrInput.files),\n                            self = this;\n\n                        qq.each(files, function(idx, file) {\n                            self._handleNewFile(file, batchId, verifiedFiles);\n                        });\n                    }\n                    else {\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\n                    }\n                }, this),\n\n                normalizeData = function() {\n                    if (qq.isFileList(data)) {\n                        data = Array.prototype.slice.call(data);\n                    }\n                    data = [].concat(data);\n                },\n\n                self = this,\n                verifiedFiles = [];\n\n            this._currentBatchId = batchId;\n\n            if (data) {\n                normalizeData();\n\n                qq.each(data, function(idx, fileContainer) {\n                    if (qq.isFileOrInput(fileContainer)) {\n                        processFileOrInput(fileContainer);\n                    }\n                    else if (qq.isBlob(fileContainer)) {\n                        processBlob(fileContainer);\n                    }\n                    else if (qq.isObject(fileContainer)) {\n                        if (fileContainer.blob && fileContainer.name) {\n                            processBlobData(fileContainer);\n                        }\n                        else if (fileContainer.canvas && fileContainer.name) {\n                            processCanvasData(fileContainer);\n                        }\n                    }\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\n                        processCanvas(fileContainer);\n                    }\n                    else {\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\n                    }\n                });\n\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\n            }\n        },\n\n        cancel: function(id) {\n            this._handler.cancel(id);\n        },\n\n        cancelAll: function() {\n            var storedIdsCopy = [],\n                self = this;\n\n            qq.extend(storedIdsCopy, this._storedIds);\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\n                self.cancel(storedFileId);\n            });\n\n            this._handler.cancelAll();\n        },\n\n        clearStoredFiles: function() {\n            this._storedIds = [];\n        },\n\n        continueUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            if (uploadData.status === qq.status.PAUSED) {\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\n                this._uploadFile(id);\n                return true;\n            }\n            else {\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        deleteFile: function(id) {\n            return this._onSubmitDelete(id);\n        },\n\n        // TODO document?\n        doesExist: function(fileOrBlobId) {\n            return this._handler.isValid(fileOrBlobId);\n        },\n\n        // Generate a variable size thumbnail on an img or canvas,\n        // returning a promise that is fulfilled when the attempt completes.\n        // Thumbnail can either be based off of a URL for an image returned\n        // by the server in the upload response, or the associated `Blob`.\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\n            var promiseToReturn = new qq.Promise(),\n                fileOrUrl, options;\n\n            if (this._imageGenerator) {\n                fileOrUrl = this._thumbnailUrls[fileId];\n                options = {\n                    customResizeFunction: customResizeFunction,\n                    maxSize: maxSize > 0 ? maxSize : null,\n                    scale: maxSize > 0\n                };\n\n                // If client-side preview generation is possible\n                // and we are not specifically looking for the image URl returned by the server...\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\n                    fileOrUrl = this.getFile(fileId);\n                }\n\n                /* jshint eqeqeq:false,eqnull:true */\n                if (fileOrUrl == null) {\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\n                }\n                else {\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\n                        function success(modifiedContainer) {\n                            promiseToReturn.success(modifiedContainer);\n                        },\n\n                        function failure(container, reason) {\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\n                        }\n                    );\n                }\n            }\n            else {\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\n            }\n\n            return promiseToReturn;\n        },\n\n        getButton: function(fileId) {\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\n        },\n\n        getEndpoint: function(fileId) {\n            return this._endpointStore.get(fileId);\n        },\n\n        getFile: function(fileOrBlobId) {\n            return this._handler.getFile(fileOrBlobId) || null;\n        },\n\n        getInProgress: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED\n                ]\n            }).length;\n        },\n\n        getName: function(id) {\n            return this._uploadData.retrieve({id: id}).name;\n        },\n\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\n        getParentId: function(id) {\n            var uploadDataEntry = this.getUploads({id: id}),\n                parentId = null;\n\n            if (uploadDataEntry) {\n                if (uploadDataEntry.parentId !== undefined) {\n                    parentId = uploadDataEntry.parentId;\n                }\n            }\n\n            return parentId;\n        },\n\n        getResumableFilesData: function() {\n            return this._handler.getResumableFilesData();\n        },\n\n        getSize: function(id) {\n            return this._uploadData.retrieve({id: id}).size;\n        },\n\n        getNetUploads: function() {\n            return this._netUploaded;\n        },\n\n        getRemainingAllowedItems: function() {\n            var allowedItems = this._currentItemLimit;\n\n            if (allowedItems > 0) {\n                return allowedItems - this._netUploadedOrQueued;\n            }\n\n            return null;\n        },\n\n        getUploads: function(optionalFilter) {\n            return this._uploadData.retrieve(optionalFilter);\n        },\n\n        getUuid: function(id) {\n            return this._uploadData.retrieve({id: id}).uuid;\n        },\n\n        log: function(str, level) {\n            if (this._options.debug && (!level || level === \"info\")) {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\n            }\n            else if (level && level !== \"info\") {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\n\n            }\n        },\n\n        pauseUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            // Pause only really makes sense if the file is uploading or retrying\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\n                if (this._handler.pause(id)) {\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\n                    return true;\n                }\n                else {\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\n                }\n            }\n            else {\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        removeFileRef: function(id) {\n            this._handler.expunge(id);\n        },\n\n        reset: function() {\n            this.log(\"Resetting uploader...\");\n\n            this._handler.reset();\n            this._storedIds = [];\n            this._autoRetries = [];\n            this._retryTimeouts = [];\n            this._preventRetries = [];\n            this._thumbnailUrls = [];\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n\n            this._paramsStore.reset();\n            this._endpointStore.reset();\n            this._netUploadedOrQueued = 0;\n            this._netUploaded = 0;\n            this._uploadData.reset();\n            this._buttonIdsForFileIds = [];\n\n            this._pasteHandler && this._pasteHandler.reset();\n            this._options.session.refreshOnReset && this._refreshSessionData();\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n\n            this._totalProgress && this._totalProgress.reset();\n\n            this._customResumeDataStore.reset();\n        },\n\n        retry: function(id) {\n            return this._manualRetry(id);\n        },\n\n        scaleImage: function(id, specs) {\n            var self = this;\n\n            return qq.Scaler.prototype.scaleImage(id, specs, {\n                log: qq.bind(self.log, self),\n                getFile: qq.bind(self.getFile, self),\n                uploadData: self._uploadData\n            });\n        },\n\n        setCustomHeaders: function(headers, id) {\n            this._customHeadersStore.set(headers, id);\n        },\n\n        setCustomResumeData: function(id, data) {\n            this._customResumeDataStore.set(data, id);\n        },\n\n        setDeleteFileCustomHeaders: function(headers, id) {\n            this._deleteFileCustomHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileEndpoint: function(endpoint, id) {\n            this._deleteFileEndpointStore.set(endpoint, id);\n        },\n\n        setDeleteFileParams: function(params, id) {\n            this._deleteFileParamsStore.set(params, id);\n        },\n\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\n        setEndpoint: function(endpoint, id) {\n            this._endpointStore.set(endpoint, id);\n        },\n\n        setForm: function(elementOrId) {\n            this._updateFormSupportAndParams(elementOrId);\n        },\n\n        setItemLimit: function(newItemLimit) {\n            this._currentItemLimit = newItemLimit;\n        },\n\n        setName: function(id, newName) {\n            this._uploadData.updateName(id, newName);\n        },\n\n        setParams: function(params, id) {\n            this._paramsStore.set(params, id);\n        },\n\n        setUuid: function(id, newUuid) {\n            return this._uploadData.uuidChanged(id, newUuid);\n        },\n\n        /**\n         * Expose the internal status of a file id to the public api for manual state changes\n         * @public\n         *\n         * @param {Number} id,\n         * @param {String} newStatus\n         *\n         * @todo Implement the remaining methods\n         */\n        setStatus: function(id, newStatus) {\n            var fileRecord = this.getUploads({id: id});\n            if (!fileRecord) {\n                throw new qq.Error(id + \" is not a valid file ID.\");\n            }\n\n            switch (newStatus) {\n                case qq.status.DELETED:\n                    this._onDeleteComplete(id, null, false);\n                    break;\n                case qq.status.DELETE_FAILED:\n                    this._onDeleteComplete(id, null, true);\n                    break;\n                default:\n                    var errorMessage = \"Method setStatus called on '\" + name + \"' not implemented yet for \" + newStatus;\n                    this.log(errorMessage);\n                    throw new qq.Error(errorMessage);\n            }\n        },\n\n        uploadStoredFiles: function() {\n            if (this._storedIds.length === 0) {\n                this._itemError(\"noFilesError\");\n            }\n            else {\n                this._uploadStoredFiles();\n            }\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploaderBasic mode.\n     */\n    qq.basePrivateApi = {\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\n        _addCannedFile: function(sessionData) {\n            var self = this;\n\n            return this._uploadData.addFile({\n                uuid: sessionData.uuid,\n                name: sessionData.name,\n                size: sessionData.size,\n                status: qq.status.UPLOAD_SUCCESSFUL,\n                onBeforeStatusChange: function(id) {\n                    sessionData.deleteFileEndpoint && self.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\n                    sessionData.deleteFileParams && self.setDeleteFileParams(sessionData.deleteFileParams, id);\n\n                    if (sessionData.thumbnailUrl) {\n                        self._thumbnailUrls[id] = sessionData.thumbnailUrl;\n                    }\n\n                    self._netUploaded++;\n                    self._netUploadedOrQueued++;\n                }\n            });\n        },\n\n        _annotateWithButtonId: function(file, associatedInput) {\n            if (qq.isFile(file)) {\n                file.qqButtonId = this._getButtonId(associatedInput);\n            }\n        },\n\n        _batchError: function(message) {\n            this._options.callbacks.onError(null, null, message, undefined);\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return new qq.DeleteFileAjaxRequester({\n                method: this._options.deleteFile.method.toUpperCase(),\n                maxConnections: this._options.maxConnections,\n                uuidParamName: this._options.request.uuidName,\n                customHeaders: this._deleteFileCustomHeadersStore,\n                paramsStore: this._deleteFileParamsStore,\n                endpointStore: this._deleteFileEndpointStore,\n                cors: this._options.cors,\n                log: qq.bind(self.log, self),\n                onDelete: function(id) {\n                    self._onDelete(id);\n                    self._options.callbacks.onDelete(id);\n                },\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                }\n\n            });\n        },\n\n        _createPasteHandler: function() {\n            var self = this;\n\n            return new qq.PasteSupport({\n                targetElement: this._options.paste.targetElement,\n                callbacks: {\n                    log: qq.bind(self.log, self),\n                    pasteReceived: function(blob) {\n                        self._handleCheckedCallback({\n                            name: \"onPasteReceived\",\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\n                            identifier: \"pasted image\"\n                        });\n                    }\n                }\n            });\n        },\n\n        _createStore: function(initialValue, _readOnlyValues_) {\n            var store = {},\n                catchall = initialValue,\n                perIdReadOnlyValues = {},\n                readOnlyValues = _readOnlyValues_,\n                copy = function(orig) {\n                    if (qq.isObject(orig)) {\n                        return qq.extend({}, orig);\n                    }\n                    return orig;\n                },\n                getReadOnlyValues = function() {\n                    if (qq.isFunction(readOnlyValues)) {\n                        return readOnlyValues();\n                    }\n                    return readOnlyValues;\n                },\n                includeReadOnlyValues = function(id, existing) {\n                    if (readOnlyValues && qq.isObject(existing)) {\n                        qq.extend(existing, getReadOnlyValues());\n                    }\n\n                    if (perIdReadOnlyValues[id]) {\n                        qq.extend(existing, perIdReadOnlyValues[id]);\n                    }\n                };\n\n            return {\n                set: function(val, id) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id == null) {\n                        store = {};\n                        catchall = copy(val);\n                    }\n                    else {\n                        store[id] = copy(val);\n                    }\n                },\n\n                get: function(id) {\n                    var values;\n\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id != null && store[id]) {\n                        values = store[id];\n                    }\n                    else {\n                        values = copy(catchall);\n                    }\n\n                    includeReadOnlyValues(id, values);\n\n                    return copy(values);\n                },\n\n                addReadOnly: function(id, values) {\n                    // Only applicable to Object stores\n                    if (qq.isObject(store)) {\n                        // If null ID, apply readonly values to all files\n                        if (id === null) {\n                            if (qq.isFunction(values)) {\n                                readOnlyValues = values;\n                            }\n                            else {\n                                readOnlyValues = readOnlyValues || {};\n                                qq.extend(readOnlyValues, values);\n                            }\n                        }\n                        else {\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\n                            qq.extend(perIdReadOnlyValues[id], values);\n                        }\n                    }\n                },\n\n                remove: function(fileId) {\n                    return delete store[fileId];\n                },\n\n                reset: function() {\n                    store = {};\n                    perIdReadOnlyValues = {};\n                    catchall = initialValue;\n                }\n            };\n        },\n\n        _createUploadDataTracker: function() {\n            var self = this;\n\n            return new qq.UploadData({\n                getName: function(id) {\n                    return self.getName(id);\n                },\n                getUuid: function(id) {\n                    return self.getUuid(id);\n                },\n                getSize: function(id) {\n                    return self.getSize(id);\n                },\n                onStatusChange: function(id, oldStatus, newStatus) {\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\n                    self._maybeAllComplete(id, newStatus);\n\n                    if (self._totalProgress) {\n                        setTimeout(function() {\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\n                        }, 0);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Generate a tracked upload button.\n         *\n         * @param spec Object containing a required `element` property\n         * along with optional `multiple`, `accept`, and `folders`.\n         * @returns {qq.UploadButton}\n         * @private\n         */\n        _createUploadButton: function(spec) {\n            var self = this,\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\n                button;\n\n            function allowMultiple() {\n                if (qq.supportedFeatures.ajaxUploading) {\n                    // Workaround for bug in iOS7+ (see #1039)\n                    if (self._options.workarounds.iosEmptyVideos &&\n                        qq.ios() &&\n                        !qq.ios6() &&\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\n\n                        return false;\n                    }\n\n                    if (spec.multiple === undefined) {\n                        return self._options.multiple;\n                    }\n\n                    return spec.multiple;\n                }\n\n                return false;\n            }\n\n            button = new qq.UploadButton({\n                acceptFiles: acceptFiles,\n                element: spec.element,\n                focusClass: this._options.classes.buttonFocus,\n                folders: spec.folders,\n                hoverClass: this._options.classes.buttonHover,\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\n                multiple: allowMultiple(),\n                name: this._options.request.inputName,\n                onChange: function(input) {\n                    self._onInputChange(input);\n                },\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\n            });\n\n            this._disposeSupport.addDisposer(function() {\n                button.dispose();\n            });\n\n            self._buttons.push(button);\n\n            return button;\n        },\n\n        _createUploadHandler: function(additionalOptions, namespace) {\n            var self = this,\n                lastOnProgress = {},\n                options = {\n                    debug: this._options.debug,\n                    maxConnections: this._options.maxConnections,\n                    cors: this._options.cors,\n                    paramsStore: this._paramsStore,\n                    endpointStore: this._endpointStore,\n                    chunking: this._options.chunking,\n                    resume: this._options.resume,\n                    blobs: this._options.blobs,\n                    log: qq.bind(self.log, self),\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\n                    onProgress: function(id, name, loaded, total) {\n                        if (loaded < 0 || total < 0) {\n                            return;\n                        }\n\n                        if (lastOnProgress[id]) {\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\n                                self._onProgress(id, name, loaded, total);\n                                self._options.callbacks.onProgress(id, name, loaded, total);\n                            }\n                        }\n                        else {\n                            self._onProgress(id, name, loaded, total);\n                            self._options.callbacks.onProgress(id, name, loaded, total);\n                        }\n\n                        lastOnProgress[id] = {loaded: loaded, total: total};\n\n                    },\n                    onComplete: function(id, name, result, xhr) {\n                        delete lastOnProgress[id];\n\n                        var status = self.getUploads({id: id}).status,\n                            retVal;\n\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\n                        // invoked by the browser multiple times for the same XHR instance with the same state\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\n                        // done this.\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\n                            return;\n                        }\n\n                        retVal = self._onComplete(id, name, result, xhr);\n\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\n                        // until the promise has been fulfilled.\n                        if (retVal instanceof  qq.Promise) {\n                            retVal.done(function() {\n                                self._options.callbacks.onComplete(id, name, result, xhr);\n                            });\n                        }\n                        else {\n                            self._options.callbacks.onComplete(id, name, result, xhr);\n                        }\n                    },\n                    onCancel: function(id, name, cancelFinalizationEffort) {\n                        var promise = new qq.Promise();\n\n                        self._handleCheckedCallback({\n                            name: \"onCancel\",\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\n                            onFailure: promise.failure,\n                            onSuccess: function() {\n                                cancelFinalizationEffort.then(function() {\n                                    self._onCancel(id, name);\n                                });\n\n                                promise.success();\n                            },\n                            identifier: id\n                        });\n\n                        return promise;\n                    },\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\n                    onUpload: function(id, name) {\n                        self._onUpload(id, name);\n                        var onUploadResult = self._options.callbacks.onUpload(id, name);\n\n                        if (qq.isGenericPromise(onUploadResult)) {\n                            self.log(qq.format(\"onUpload for {} returned a Promise - waiting for resolution.\", id));\n                            return onUploadResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunk: function(id, name, chunkData) {\n                        self._onUploadChunk(id, chunkData);\n                        var onUploadChunkResult = self._options.callbacks.onUploadChunk(id, name, chunkData);\n\n                        if (qq.isGenericPromise(onUploadChunkResult)) {\n                            self.log(qq.format(\"onUploadChunk for {}.{} returned a Promise - waiting for resolution.\", id, chunkData.partIndex));\n                            return onUploadChunkResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\n                    },\n                    onResume: function(id, name, chunkData, customResumeData) {\n                        return self._options.callbacks.onResume(id, name, chunkData, customResumeData);\n                    },\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\n                        return self._onAutoRetry.apply(self, arguments);\n                    },\n                    onUuidChanged: function(id, newUuid) {\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\n                        self.setUuid(id, newUuid);\n                    },\n                    getName: qq.bind(self.getName, self),\n                    getUuid: qq.bind(self.getUuid, self),\n                    getSize: qq.bind(self.getSize, self),\n                    setSize: qq.bind(self._setSize, self),\n                    getDataByUuid: function(uuid) {\n                        return self.getUploads({uuid: uuid});\n                    },\n                    isQueued: function(id) {\n                        var status = self.getUploads({id: id}).status;\n                        return status === qq.status.QUEUED ||\n                            status === qq.status.SUBMITTED ||\n                            status === qq.status.UPLOAD_RETRYING ||\n                            status === qq.status.PAUSED;\n                    },\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\n                    getIdsInBatch: self._uploadData.getIdsInBatch,\n                    isInProgress: function(id) {\n                        return self.getUploads({id: id}).status === qq.status.UPLOADING;\n                    },\n                    getCustomResumeData: qq.bind(self._getCustomResumeData, self)\n                };\n\n            qq.each(this._options.request, function(prop, val) {\n                options[prop] = val;\n            });\n\n            options.customHeaders = this._customHeadersStore;\n\n            if (additionalOptions) {\n                qq.each(additionalOptions, function(key, val) {\n                    options[key] = val;\n                });\n            }\n\n            return new qq.UploadHandlerController(options, namespace);\n        },\n\n        _fileOrBlobRejected: function(id) {\n            this._netUploadedOrQueued--;\n            this._uploadData.setStatus(id, qq.status.REJECTED);\n        },\n\n        _formatSize: function(bytes) {\n            if (bytes === 0) {\n                return bytes + this._options.text.sizeSymbols[0];\n            }\n            var i = -1;\n            do {\n                bytes = bytes / 1000;\n                i++;\n            } while (bytes > 999);\n\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\n        },\n\n        // Creates an internal object that tracks various properties of each extra button,\n        // and then actually creates the extra button.\n        _generateExtraButtonSpecs: function() {\n            var self = this;\n\n            this._extraButtonSpecs = {};\n\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\n                var multiple = extraButtonOptionEntry.multiple,\n                    validation = qq.extend({}, self._options.validation, true),\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\n\n                if (multiple === undefined) {\n                    multiple = self._options.multiple;\n                }\n\n                if (extraButtonSpec.validation) {\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\n                }\n\n                qq.extend(extraButtonSpec, {\n                    multiple: multiple,\n                    validation: validation\n                }, true);\n\n                self._initExtraButton(extraButtonSpec);\n            });\n        },\n\n        _getButton: function(buttonId) {\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\n\n            if (extraButtonsSpec) {\n                return extraButtonsSpec.element;\n            }\n            else if (buttonId === this._defaultButtonId) {\n                return this._options.button;\n            }\n        },\n\n        /**\n         * Gets the internally used tracking ID for a button.\n         *\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\n         * @private\n         */\n        _getButtonId: function(buttonOrFileInputOrFile) {\n            var inputs, fileInput,\n                fileBlobOrInput = buttonOrFileInputOrFile;\n\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\n            }\n\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\n                if (qq.isFile(fileBlobOrInput)) {\n                    return fileBlobOrInput.qqButtonId;\n                }\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\n\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\n\n                qq.each(inputs, function(idx, input) {\n                    if (input.getAttribute(\"type\") === \"file\") {\n                        fileInput = input;\n                        return false;\n                    }\n                });\n\n                if (fileInput) {\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n            }\n        },\n\n        _getCustomResumeData: function(fileId) {\n            return this._customResumeDataStore.get(fileId);\n        },\n\n        _getNotFinished: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED,\n                    qq.status.SUBMITTING,\n                    qq.status.SUBMITTED,\n                    qq.status.PAUSED\n                ]\n            }).length;\n        },\n\n        // Get the validation options for this button.  Could be the default validation option\n        // or a specific one assigned to this particular button.\n        _getValidationBase: function(buttonId) {\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\n\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\n        },\n\n        _getValidationDescriptor: function(fileWrapper) {\n            if (fileWrapper.file instanceof qq.BlobProxy) {\n                return {\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\n                    size: fileWrapper.file.referenceBlob.size\n                };\n            }\n\n            return {\n                name: this.getUploads({id: fileWrapper.id}).name,\n                size: this.getUploads({id: fileWrapper.id}).size\n            };\n        },\n\n        _getValidationDescriptors: function(fileWrappers) {\n            var self = this,\n                fileDescriptors = [];\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\n            });\n\n            return fileDescriptors;\n        },\n\n        // Allows camera access on either the default or an extra button for iOS devices.\n        _handleCameraAccess: function() {\n            if (this._options.camera.ios && qq.ios()) {\n                var acceptIosCamera = \"image/*;capture=camera\",\n                    button = this._options.camera.button,\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\n                    optionRoot = this._options;\n\n                // If we are not targeting the default button, it is an \"extra\" button\n                if (buttonId && buttonId !== this._defaultButtonId) {\n                    optionRoot = this._extraButtonSpecs[buttonId];\n                }\n\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\n                optionRoot.multiple = false;\n\n                // update the options\n                if (optionRoot.validation.acceptFiles === null) {\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\n                }\n                else {\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\n                }\n\n                // update the already-created button\n                qq.each(this._buttons, function(idx, button) {\n                    if (button.getButtonId() === buttonId) {\n                        button.setMultiple(optionRoot.multiple);\n                        button.setAcceptFiles(optionRoot.acceptFiles);\n\n                        return false;\n                    }\n                });\n            }\n        },\n\n        _handleCheckedCallback: function(details) {\n            var self = this,\n                callbackRetVal = details.callback();\n\n            if (qq.isGenericPromise(callbackRetVal)) {\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\n                return callbackRetVal.then(\n                    function(successParam) {\n                        self.log(details.name + \" promise success for \" + details.identifier);\n                        details.onSuccess(successParam);\n                    },\n                    function() {\n                        if (details.onFailure) {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                            details.onFailure();\n                        }\n                        else {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                        }\n                    });\n            }\n\n            if (callbackRetVal !== false) {\n                details.onSuccess(callbackRetVal);\n            }\n            else {\n                if (details.onFailure) {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\n                    details.onFailure();\n                }\n                else {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\n                }\n            }\n\n            return callbackRetVal;\n        },\n\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\n            var self = this,\n                uuid = qq.getUniqueId(),\n                size = -1,\n                name = qq.getFilename(file),\n                actualFile = file.blob || file,\n                handler = this._customNewFileHandler ?\n                    this._customNewFileHandler :\n                    qq.bind(self._handleNewFileGeneric, self);\n\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\n                size = actualFile.size;\n            }\n\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\n                uploadData: self._uploadData,\n                paramsStore: self._paramsStore,\n                addFileToHandler: function(id, file) {\n                    self._handler.add(id, file);\n                    self._netUploadedOrQueued++;\n                    self._trackButton(id);\n                }\n            });\n        },\n\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\n\n            this._handler.add(id, file);\n            this._trackButton(id);\n\n            this._netUploadedOrQueued++;\n\n            fileList.push({id: id, file: file});\n        },\n\n        _handlePasteSuccess: function(blob, extSuppliedName) {\n            var extension = blob.type.split(\"/\")[1],\n                name = extSuppliedName;\n\n            /*jshint eqeqeq: true, eqnull: true*/\n            if (name == null) {\n                name = this._options.paste.defaultName;\n            }\n\n            name += \".\" + extension;\n\n            this.addFiles({\n                name: name,\n                blob: blob\n            });\n        },\n\n        _handleDeleteSuccess: function(id) {\n            if (this.getUploads({id: id}).status !== qq.status.DELETED) {\n                var name = this.getName(id);\n\n                this._netUploadedOrQueued--;\n                this._netUploaded--;\n                this._handler.expunge(id);\n                this._uploadData.setStatus(id, qq.status.DELETED);\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\n            }\n        },\n\n        _handleDeleteFailed: function(id, xhrOrXdr) {\n            var name = this.getName(id);\n\n            this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\n            this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\n\n            // Check first if xhrOrXdr is actually passed or valid\n            // For error reporting, we only have access to the response status if this is not\n            // an `XDomainRequest`.\n            if (!xhrOrXdr || xhrOrXdr.withCredentials === undefined) {\n                this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\n            }\n            else {\n                this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\n            }\n        },\n\n        // Creates an extra button element\n        _initExtraButton: function(spec) {\n            var button = this._createUploadButton({\n                accept: spec.validation.acceptFiles,\n                allowedExtensions: spec.validation.allowedExtensions,\n                element: spec.element,\n                folders: spec.folders,\n                multiple: spec.multiple,\n                title: spec.fileInputTitle\n            });\n\n            this._extraButtonSpecs[button.getButtonId()] = spec;\n        },\n\n        _initFormSupportAndParams: function() {\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n            );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore = this._createStore(\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\n                );\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\n                }\n            }\n            else {\n                this._paramsStore = this._createStore(this._options.request.params);\n            }\n        },\n\n        _isDeletePossible: function() {\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\n                return false;\n            }\n\n            if (this._options.cors.expected) {\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\n                    return true;\n                }\n\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            return true;\n        },\n\n        _isAllowedExtension: function(allowed, fileName) {\n            var valid = false;\n\n            if (!allowed.length) {\n                return true;\n            }\n\n            qq.each(allowed, function(idx, allowedExt) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExt)) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\n\n                    if (fileName.match(extRegex) != null) {\n                        valid = true;\n                        return false;\n                    }\n                }\n            });\n\n            return valid;\n        },\n\n        /**\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\n         *\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\n         * @param maybeNameOrNames names of the items that have failed, if applicable\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\n         * @private\n         */\n        _itemError: function(code, maybeNameOrNames, item) {\n            var message = this._options.messages[code],\n                allowedExtensions = [],\n                names = [].concat(maybeNameOrNames),\n                name = names[0],\n                buttonId = this._getButtonId(item),\n                validationBase = this._getValidationBase(buttonId),\n                extensionsForMessage, placeholderMatch;\n\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExtension)) {\n                    allowedExtensions.push(allowedExtension);\n                }\n            });\n\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\n\n            r(\"{file}\", this._options.formatFileName(name));\n            r(\"{extensions}\", extensionsForMessage);\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\n\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\n            if (placeholderMatch !== null) {\n                qq.each(placeholderMatch, function(idx, placeholder) {\n                    r(placeholder, names[idx]);\n                });\n            }\n\n            this._options.callbacks.onError(null, name, message, undefined);\n\n            return message;\n        },\n\n        /**\n         * Conditionally orders a manual retry of a failed upload.\n         *\n         * @param id File ID of the failed upload\n         * @param callback Optional callback to invoke if a retry is prudent.\n         * In lieu of asking the upload handler to retry.\n         * @returns {boolean} true if a manual retry will occur\n         * @private\n         */\n        _manualRetry: function(id, callback) {\n            if (this._onBeforeManualRetry(id)) {\n                this._netUploadedOrQueued++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n\n                if (callback) {\n                    callback(id);\n                }\n                else {\n                    this._handler.retry(id);\n                }\n\n                return true;\n            }\n        },\n\n        _maybeAllComplete: function(id, status) {\n            var self = this,\n                notFinished = this._getNotFinished();\n\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\n                this._succeededSinceLastAllComplete.push(id);\n            }\n            else if (status === qq.status.UPLOAD_FAILED) {\n                this._failedSinceLastAllComplete.push(id);\n            }\n\n            if (notFinished === 0 &&\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\n                setTimeout(function() {\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\n                }, 0);\n            }\n        },\n\n        _maybeHandleIos8SafariWorkaround: function() {\n            var self = this;\n\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n                setTimeout(function() {\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\n                }, 0);\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\n            }\n        },\n\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\n            // Assuming no one will actually set the response code to something other than 200\n            // and still set 'success' to true...\n            if (!response.success) {\n                if (xhr && xhr.status !== 200 && !response.error) {\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\n                }\n                else {\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\n                }\n            }\n        },\n\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\n            var self = this;\n\n            if (items.length > index) {\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\n                    setTimeout(function() {\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\n                            buttonId = self._getButtonId(items[index].file),\n                            button = self._getButton(buttonId);\n\n                        self._handleCheckedCallback({\n                            name: \"onValidate\",\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\n                        });\n                    }, 0);\n                }\n                else if (!validItem) {\n                    for (; index < items.length; index++) {\n                        self._fileOrBlobRejected(items[index].id);\n                    }\n                }\n            }\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\n\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n        },\n\n        /**\n         * Attempt to automatically retry a failed upload.\n         *\n         * @param id The file ID of the failed upload\n         * @param name The name of the file associated with the failed upload\n         * @param responseJSON Response from the server, parsed into a javascript object\n         * @param xhr Ajax transport used to send the failed request\n         * @param callback Optional callback to be invoked if a retry is prudent.\n         * Invoked in lieu of asking the upload handler to retry.\n         * @returns {boolean} true if an auto-retry will occur\n         * @private\n         */\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\n            var self = this;\n\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\n\n            if (self._shouldAutoRetry(id, name, responseJSON)) {\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\n\n                self._maybeParseAndSendUploadError.apply(self, arguments);\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\n                self._onBeforeAutoRetry(id, name);\n\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n                self._retryTimeouts[id] = setTimeout(function() {\n                    self.log(\"Starting retry for \" + name + \"...\");\n\n                    if (callback) {\n                        callback(id);\n                    }\n                    else {\n                        self._handler.retry(id);\n                    }\n                }, retryWaitPeriod);\n\n                return true;\n            }\n        },\n\n        _onBeforeAutoRetry: function(id, name) {\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            var itemLimit = this._currentItemLimit,\n                fileName;\n\n            if (this._preventRetries[id]) {\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\n                return false;\n            }\n            else if (this._handler.isValid(id)) {\n                fileName = this.getName(id);\n\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\n                    return false;\n                }\n\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\n                    this._itemError(\"retryFailTooManyItems\");\n                    return false;\n                }\n\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\n                return true;\n            }\n            else {\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\n                return false;\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._netUploadedOrQueued--;\n\n            clearTimeout(this._retryTimeouts[id]);\n\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\n                this._storedIds.splice(storedItemIndex, 1);\n            }\n\n            this._uploadData.setStatus(id, qq.status.CANCELED);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            if (!result.success) {\n                this._netUploadedOrQueued--;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\n\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\n                    this._preventRetries[id] = true;\n                }\n            }\n            else {\n                if (result.thumbnailUrl) {\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\n                }\n\n                this._netUploaded++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\n            }\n\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\n\n            return result.success ? true : false;\n        },\n\n        _onDelete: function(id) {\n            this._uploadData.setStatus(id, qq.status.DELETING);\n        },\n\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\n            var name = this.getName(id);\n\n            if (isError) {\n                this._handleDeleteFailed(id, xhrOrXdr);\n            }\n            else {\n                this._handleDeleteSuccess(id);\n            }\n        },\n\n        _onInputChange: function(input) {\n            var fileIndex;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\n                    this._annotateWithButtonId(input.files[fileIndex], input);\n                }\n\n                this.addFiles(input.files);\n            }\n            // Android 2.3.x will fire `onchange` even if no file has been selected\n            else if (input.value.length > 0) {\n                this.addFiles(input);\n            }\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n        },\n\n        _onProgress: function(id, name, loaded, total) {\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\n        },\n\n        _onSubmit: function(id, name) {\n            //nothing to do yet in core uploader\n        },\n\n        _onSubmitCallbackSuccess: function(id, name) {\n            this._onSubmit.apply(this, arguments);\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\n            this._onSubmitted.apply(this, arguments);\n\n            if (this._options.autoUpload) {\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n                this._uploadFile(id);\n            }\n            else {\n                this._storeForLater(id);\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n            }\n        },\n\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\n            var uuid = this.getUuid(id),\n                adjustedOnSuccessCallback;\n\n            if (onSuccessCallback) {\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\n            }\n\n            if (this._isDeletePossible()) {\n                this._handleCheckedCallback({\n                    name: \"onSubmitDelete\",\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\n                    onSuccess: adjustedOnSuccessCallback ||\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\n                    identifier: id\n                });\n                return true;\n            }\n            else {\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\n                return false;\n            }\n        },\n\n        _onSubmitted: function(id) {\n            //nothing to do in the base uploader\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._options.callbacks.onTotalProgress(loaded, total);\n        },\n\n        _onUploadPrep: function(id) {\n            // nothing to do in the core uploader for now\n        },\n\n        _onUpload: function(id, name) {\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            //nothing to do in the base uploader\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\n            if (newStatus === qq.status.PAUSED) {\n                clearTimeout(this._retryTimeouts[id]);\n            }\n        },\n\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\n            var self = this;\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                self._fileOrBlobRejected(fileWrapper.id);\n            });\n        },\n\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\n            var errorMessage,\n                itemLimit = this._currentItemLimit,\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\n\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\n                if (items.length > 0) {\n                    this._handleCheckedCallback({\n                        name: \"onValidate\",\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\n                    });\n                }\n                else {\n                    this._itemError(\"noFilesError\");\n                }\n            }\n            else {\n                this._onValidateBatchCallbackFailure(items);\n                errorMessage = this._options.messages.tooManyItemsError\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\n                this._batchError(errorMessage);\n            }\n        },\n\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\n            var nextIndex = index + 1;\n\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\n\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n        },\n\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\n            var self = this,\n                nextIndex = index + 1,\n                validationDescriptor = this._getValidationDescriptor(items[index]);\n\n            this._validateFileOrBlobData(items[index], validationDescriptor)\n                .then(\n                function() {\n                    self._upload(items[index].id, params, endpoint);\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\n                },\n                function() {\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n                }\n            );\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            if (items.length === 0) {\n                this._itemError(\"noFilesError\");\n                return;\n            }\n\n            var validationDescriptors = this._getValidationDescriptors(items),\n                buttonId = this._getButtonId(items[0].file),\n                button = this._getButton(buttonId);\n\n            this._handleCheckedCallback({\n                name: \"onValidateBatch\",\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\n                identifier: \"batch validation\"\n            });\n        },\n\n        _preventLeaveInProgress: function() {\n            var self = this;\n\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\n                if (self.getInProgress()) {\n                    e = e || window.event;\n                    // for ie, ff\n                    e.returnValue = self._options.messages.onLeave;\n                    // for webkit\n                    return self._options.messages.onLeave;\n                }\n            });\n        },\n\n        // Attempts to refresh session data only if the `qq.Session` module exists\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\n        // callback will be invoked once the refresh is complete.\n        _refreshSessionData: function() {\n            var self = this,\n                options = this._options.session;\n\n            /* jshint eqnull:true */\n            if (qq.Session && this._options.session.endpoint != null) {\n                if (!this._session) {\n                    qq.extend(options, {cors: this._options.cors});\n\n                    options.log = qq.bind(this.log, this);\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\n\n                    this._session = new qq.Session(options);\n                }\n\n                setTimeout(function() {\n                    self._session.refresh().then(function(response, xhrOrXdr) {\n                        self._sessionRequestComplete();\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\n\n                    }, function(response, xhrOrXdr) {\n\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\n                    });\n                }, 0);\n            }\n        },\n\n        _sessionRequestComplete: function() {},\n\n        _setSize: function(id, newSize) {\n            this._uploadData.updateSize(id, newSize);\n            this._totalProgress && this._totalProgress.onNewSize(id);\n        },\n\n        _shouldAutoRetry: function(id, name, responseJSON) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            /*jshint laxbreak: true */\n            if (!this._preventRetries[id]\n                && this._options.retry.enableAuto\n                && uploadData.status !== qq.status.PAUSED) {\n\n                if (this._autoRetries[id] === undefined) {\n                    this._autoRetries[id] = 0;\n                }\n\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\n                    this._autoRetries[id] += 1;\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        _storeForLater: function(id) {\n            this._storedIds.push(id);\n        },\n\n        // Maps a file with the button that was used to select it.\n        _trackButton: function(id) {\n            var buttonId;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                buttonId = this._handler.getFile(id).qqButtonId;\n            }\n            else {\n                buttonId = this._getButtonId(this._handler.getInput(id));\n            }\n\n            if (buttonId) {\n                this._buttonIdsForFileIds[id] = buttonId;\n            }\n        },\n\n        _updateFormSupportAndParams: function(formElementOrId) {\n            this._options.form.element = formElementOrId;\n\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n                );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this.setEndpoint(this._formSupport.newEndpoint);\n                }\n            }\n        },\n\n        _upload: function(id, params, endpoint) {\n            var name = this.getName(id);\n\n            if (params) {\n                this.setParams(params, id);\n            }\n\n            if (endpoint) {\n                this.setEndpoint(endpoint, id);\n            }\n\n            this._handleCheckedCallback({\n                name: \"onSubmit\",\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\n                identifier: id\n            });\n        },\n\n        _uploadFile: function(id) {\n            if (!this._handler.upload(id)) {\n                this._uploadData.setStatus(id, qq.status.QUEUED);\n            }\n        },\n\n        _uploadStoredFiles: function() {\n            var idToUpload, stillSubmitting,\n                self = this;\n\n            while (this._storedIds.length) {\n                idToUpload = this._storedIds.shift();\n                this._uploadFile(idToUpload);\n            }\n\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\n            if (stillSubmitting) {\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\n                setTimeout(function() {\n                    self._uploadStoredFiles();\n                }, 1000);\n            }\n        },\n\n        /**\n         * Performs some internal validation checks on an item, defined in the `validation` option.\n         *\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\n         * @private\n         */\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\n            var self = this,\n                file = (function() {\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\n                        return fileWrapper.file.referenceBlob;\n                    }\n                    return fileWrapper.file;\n                }()),\n                name = validationDescriptor.name,\n                size = validationDescriptor.size,\n                buttonId = this._getButtonId(fileWrapper.file),\n                validationBase = this._getValidationBase(buttonId),\n                validityChecker = new qq.Promise();\n\n            validityChecker.then(\n                function() {},\n                function() {\n                    self._fileOrBlobRejected(fileWrapper.id, name);\n                });\n\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\n                this._itemError(\"typeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (!this._options.validation.allowEmpty && size === 0) {\n                this._itemError(\"emptyError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\n                this._itemError(\"sizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && size < validationBase.minSizeLimit) {\n                this._itemError(\"minSizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\n                    validityChecker.success,\n                    function(errorCode) {\n                        self._itemError(errorCode + \"ImageError\", name, file);\n                        validityChecker.failure();\n                    }\n                );\n            }\n            else {\n                validityChecker.success();\n            }\n\n            return validityChecker;\n        },\n\n        _wrapCallbacks: function() {\n            var self, safeCallback, prop;\n\n            self = this;\n\n            safeCallback = function(name, callback, args) {\n                var errorMsg;\n\n                try {\n                    return callback.apply(self, args);\n                }\n                catch (exception) {\n                    errorMsg = exception.message || exception.toString();\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\n                }\n            };\n\n            /* jshint forin: false, loopfunc: true */\n            for (prop in this._options.callbacks) {\n                (function() {\n                    var callbackName, callbackFunc;\n                    callbackName = prop;\n                    callbackFunc = self._options.callbacks[callbackName];\n                    self._options.callbacks[callbackName] = function() {\n                        return safeCallback(callbackName, callbackFunc, arguments);\n                    };\n                }());\n            }\n        }\n    };\n}());\n","/*globals qq*/\n(function() {\n    \"use strict\";\n\n    qq.FineUploaderBasic = function(o) {\n        var self = this;\n\n        // These options define FineUploaderBasic mode.\n        this._options = {\n            debug: false,\n            button: null,\n            multiple: true,\n            maxConnections: 3,\n            disableCancelForFormUploads: false,\n            autoUpload: true,\n\n            request: {\n                customHeaders: {},\n                endpoint: \"/server/upload\",\n                filenameParam: \"qqfilename\",\n                forceMultipart: true,\n                inputName: \"qqfile\",\n                method: \"POST\",\n                omitDefaultParams: false,\n                params: {},\n                paramsInBody: true,\n                requireSuccessJson: true,\n                totalFileSizeName: \"qqtotalfilesize\",\n                uuidName: \"qquuid\"\n            },\n\n            validation: {\n                allowedExtensions: [],\n                sizeLimit: 0,\n                minSizeLimit: 0,\n                itemLimit: 0,\n                stopOnFirstInvalidFile: true,\n                acceptFiles: null,\n                image: {\n                    maxHeight: 0,\n                    maxWidth: 0,\n                    minHeight: 0,\n                    minWidth: 0\n                },\n                allowEmpty: false\n            },\n\n            callbacks: {\n                onSubmit: function(id, name) {},\n                onSubmitted: function(id, name) {},\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\n                onAllComplete: function(successful, failed) {},\n                onCancel: function(id, name) {},\n                onUpload: function(id, name) {},\n                onUploadChunk: function(id, name, chunkData) {},\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\n                onResume: function(id, fileName, chunkData, customResumeData) {},\n                onProgress: function(id, name, loaded, total) {},\n                onTotalProgress: function(loaded, total) {},\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\n                onAutoRetry: function(id, name, attemptNumber) {},\n                onManualRetry: function(id, name) {},\n                onValidateBatch: function(fileOrBlobData) {},\n                onValidate: function(fileOrBlobData) {},\n                onSubmitDelete: function(id) {},\n                onDelete: function(id) {},\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\n                onPasteReceived: function(blob) {},\n                onStatusChange: function(id, oldStatus, newStatus) {},\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\n            },\n\n            messages: {\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\n                emptyError: \"{file} is empty, please select files again without it.\",\n                noFilesError: \"No files to upload.\",\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\n                maxHeightImageError: \"Image is too tall.\",\n                maxWidthImageError: \"Image is too wide.\",\n                minHeightImageError: \"Image is not tall enough.\",\n                minWidthImageError: \"Image is not wide enough.\",\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\n            },\n\n            retry: {\n                enableAuto: false,\n                maxAutoAttempts: 3,\n                autoAttemptDelay: 5,\n                preventRetryResponseProperty: \"preventRetry\"\n            },\n\n            classes: {\n                buttonHover: \"qq-upload-button-hover\",\n                buttonFocus: \"qq-upload-button-focus\"\n            },\n\n            chunking: {\n                enabled: false,\n                concurrent: {\n                    enabled: false\n                },\n                mandatory: false,\n                paramNames: {\n                    partIndex: \"qqpartindex\",\n                    partByteOffset: \"qqpartbyteoffset\",\n                    chunkSize: \"qqchunksize\",\n                    totalFileSize: \"qqtotalfilesize\",\n                    totalParts: \"qqtotalparts\"\n                },\n                partSize: 2000000,\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\n                success: {\n                    endpoint: null,\n\n                    headers: function(id) {\n                        return null;\n                    },\n\n                    jsonPayload: false,\n\n                    method: \"POST\",\n\n                    params: function(id) {\n                        return null;\n                    }\n                }\n            },\n\n            resume: {\n                enabled: false,\n                recordsExpireIn: 7, //days\n                paramNames: {\n                    resuming: \"qqresume\"\n                },\n                customKeys: function(fileId) {\n                    return [];\n                }\n            },\n\n            formatFileName: function(fileOrBlobName) {\n                return fileOrBlobName;\n            },\n\n            text: {\n                defaultResponseError: \"Upload failure reason unknown\",\n                fileInputTitle: \"file input\",\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\n            },\n\n            deleteFile: {\n                enabled: false,\n                method: \"DELETE\",\n                endpoint: \"/server/upload\",\n                customHeaders: {},\n                params: {}\n            },\n\n            cors: {\n                expected: false,\n                sendCredentials: false,\n                allowXdr: false\n            },\n\n            blobs: {\n                defaultName: \"misc_data\"\n            },\n\n            paste: {\n                targetElement: null,\n                defaultName: \"pasted_image\"\n            },\n\n            camera: {\n                ios: false,\n\n                // if ios is true: button is null means target the default button, otherwise target the button specified\n                button: null\n            },\n\n            // This refers to additional upload buttons to be handled by Fine Uploader.\n            // Each element is an object, containing `element` as the only required\n            // property.  The `element` must be a container that will ultimately\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\n            // Optional properties of each object include `multiple`, `validation`,\n            // and `folders`.\n            extraButtons: [],\n\n            // Depends on the session module.  Used to query the server for an initial file list\n            // during initialization and optionally after a `reset`.\n            session: {\n                endpoint: null,\n                params: {},\n                customHeaders: {},\n                refreshOnReset: true\n            },\n\n            // Send parameters associated with an existing form along with the files\n            form: {\n                // Element ID, HTMLElement, or null\n                element: \"qq-form\",\n\n                // Overrides the base `autoUpload`, unless `element` is null.\n                autoUpload: false,\n\n                // true = upload files on form submission (and squelch submit event)\n                interceptSubmit: true\n            },\n\n            // scale images client side, upload a new file for each scaled version\n            scaling: {\n                customResizer: null,\n\n                // send the original file as well\n                sendOriginal: true,\n\n                // fox orientation for scaled images\n                orient: true,\n\n                // If null, scaled image type will match reference image type.  This value will be referred to\n                // for any size record that does not specific a type.\n                defaultType: null,\n\n                defaultQuality: 80,\n\n                failureText: \"Failed to scale\",\n\n                includeExif: false,\n\n                // metadata about each requested scaled version\n                sizes: []\n            },\n\n            workarounds: {\n                iosEmptyVideos: true,\n                ios8SafariUploads: true,\n                ios8BrowserCrash: false\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(this._options, o, true);\n\n        this._buttons = [];\n        this._extraButtonSpecs = {};\n        this._buttonIdsForFileIds = [];\n\n        this._wrapCallbacks();\n        this._disposeSupport =  new qq.DisposeSupport();\n\n        this._storedIds = [];\n        this._autoRetries = [];\n        this._retryTimeouts = [];\n        this._preventRetries = [];\n        this._thumbnailUrls = [];\n\n        this._netUploadedOrQueued = 0;\n        this._netUploaded = 0;\n        this._uploadData = this._createUploadDataTracker();\n\n        this._initFormSupportAndParams();\n\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\n\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\n\n        this._endpointStore = this._createStore(this._options.request.endpoint);\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\n\n        this._handler = this._createUploadHandler();\n\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\n\n        if (this._options.button) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._options.button,\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._generateExtraButtonSpecs();\n\n        this._handleCameraAccess();\n\n        if (this._options.paste.targetElement) {\n            if (qq.PasteSupport) {\n                this._pasteHandler = this._createPasteHandler();\n            }\n            else {\n                this.log(\"Paste support module not found\", \"error\");\n            }\n        }\n\n        this._preventLeaveInProgress();\n\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\n        this._refreshSessionData();\n\n        this._succeededSinceLastAllComplete = [];\n        this._failedSinceLastAllComplete = [];\n\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\n        if (this._scaler.enabled) {\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\n        }\n\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\n            this._totalProgress = new qq.TotalProgress(\n                qq.bind(this._onTotalProgress, this),\n\n                function(id) {\n                    var entry = self._uploadData.retrieve({id: id});\n                    return (entry && entry.size) || 0;\n                }\n            );\n        }\n\n        this._currentItemLimit = this._options.validation.itemLimit;\n\n        this._customResumeDataStore = this._createStore();\n    };\n\n    // Define the private & public API methods.\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\n}());\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Base upload handler module.  Controls more specific handlers.\n *\n * @param o Options.  Passed along to the specific handler submodule as well.\n * @param namespace [optional] Namespace for the specific handler.\n */\nqq.UploadHandlerController = function(o, namespace) {\n    \"use strict\";\n\n    var controller = this,\n        chunkingPossible = false,\n        concurrentChunkingPossible = false,\n        chunking, preventRetryResponse, log, handler,\n\n    options = {\n        paramsStore: {},\n        maxConnections: 3, // maximum number of concurrent uploads\n        chunking: {\n            enabled: false,\n            multiple: {\n                enabled: false\n            }\n        },\n        log: function(str, level) {},\n        onProgress: function(id, fileName, loaded, total) {},\n        onComplete: function(id, fileName, response, xhr) {},\n        onCancel: function(id, fileName) {},\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\n        onUpload: function(id, fileName) {},\n        onUploadChunk: function(id, fileName, chunkData) {},\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\n        onAutoRetry: function(id, fileName, response, xhr) {},\n        onResume: function(id, fileName, chunkData, customResumeData) {},\n        onUuidChanged: function(id, newUuid) {},\n        getName: function(id) {},\n        setSize: function(id, newSize) {},\n        isQueued: function(id) {},\n        getIdsInProxyGroup: function(id) {},\n        getIdsInBatch: function(id) {},\n        isInProgress: function(id) {}\n    },\n\n    chunked = {\n        // Called when each chunk has uploaded successfully\n        done: function(id, chunkIdx, response, xhr) {\n            var chunkData = handler._getChunkData(id, chunkIdx);\n\n            handler._getFileState(id).attemptingResume = false;\n\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\n            handler._getFileState(id).loaded += chunkData.size;\n\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\n        },\n\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\n        // logic associated with closing out the file, such as combining the chunks.\n        finalize: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id);\n\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\n            handler.finalizeChunks(id).then(\n                function(response, xhr) {\n                    log(\"Finalize successful for \" + id);\n\n                    var normaizedResponse = upload.normalizeResponse(response, true);\n\n                    options.onProgress(id, name, size, size);\n                    handler._maybeDeletePersistedChunkData(id);\n                    upload.cleanup(id, normaizedResponse, xhr);\n                },\n                function(response, xhr) {\n                    var normaizedResponse = upload.normalizeResponse(response, false);\n\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normaizedResponse.error, \"error\");\n\n                    if (normaizedResponse.reset) {\n                        chunked.reset(id);\n                    }\n\n                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {\n                        upload.cleanup(id, normaizedResponse, xhr);\n                    }\n                }\n            );\n        },\n\n        handleFailure: function(chunkIdx, id, response, xhr) {\n            var name = options.getName(id);\n\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\n\n            handler.clearCachedChunk(id, chunkIdx);\n\n            var responseToReport = upload.normalizeResponse(response, false),\n                inProgressIdx;\n\n            if (responseToReport.reset) {\n                chunked.reset(id);\n            }\n            else {\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\n                if (inProgressIdx >= 0) {\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\n                }\n            }\n\n            // We may have aborted all other in-progress chunks for this file due to a failure.\n            // If so, ignore the failures associated with those aborts.\n            if (!handler._getFileState(id).temp.ignoreFailure) {\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\n                // chunks since they will be explicitly aborted\n                if (concurrentChunkingPossible) {\n                    handler._getFileState(id).temp.ignoreFailure = true;\n\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\n                        ckXhr.abort();\n                        // Flag the transport, in case we are waiting for some other async operation\n                        // to complete before attempting to upload the chunk\n                        ckXhr._cancelled = true;\n                    });\n\n                    // We must indicate that all aborted chunks are no longer in progress\n                    handler.moveInProgressToRemaining(id);\n\n                    // Free up any connections used by these chunks, but don't allow any\n                    // other files to take up the connections (until we have exhausted all auto-retries)\n                    connectionManager.free(id, true);\n                }\n\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\n                    // is a failure or not.\n                    upload.cleanup(id, responseToReport, xhr);\n                }\n            }\n        },\n\n        hasMoreParts: function(id) {\n            return !!handler._getFileState(id).chunking.remaining.length;\n        },\n\n        nextPart: function(id) {\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\n\n            if (nextIdx >= handler._getTotalChunks(id)) {\n                nextIdx = null;\n            }\n\n            return nextIdx;\n        },\n\n        reset: function(id) {\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\n\n            handler._maybeDeletePersistedChunkData(id);\n            handler.reevaluateChunking(id);\n            handler._getFileState(id).loaded = 0;\n        },\n\n        sendNext: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id),\n                chunkIdx = chunked.nextPart(id),\n                chunkData = handler._getChunkData(id, chunkIdx),\n                fileState = handler._getFileState(id),\n                resuming = fileState.attemptingResume,\n                inProgressChunks = fileState.chunking.inProgress || [];\n\n            if (fileState.loaded == null) {\n                fileState.loaded = 0;\n            }\n\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\n            if (resuming && options.onResume(id, name, chunkData, fileState.customResumeData) === false) {\n                chunked.reset(id);\n                chunkIdx = chunked.nextPart(id);\n                chunkData = handler._getChunkData(id, chunkIdx);\n                resuming = false;\n            }\n\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\n            if (chunkIdx == null && inProgressChunks.length === 0) {\n                chunked.finalize(id);\n            }\n\n            // Send the next chunk\n            else {\n                inProgressChunks.push(chunkIdx);\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\n\n                if (concurrentChunkingPossible) {\n                    connectionManager.open(id, chunkIdx);\n                }\n\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\n                    chunked.sendNext(id);\n                }\n\n                if (chunkData.blob.size === 0) {\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\n                }\n\n                var onUploadChunkPromise = options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\n\n                onUploadChunkPromise.then(\n                    function(requestOverrides) {\n                        if (!options.isInProgress(id)) {\n                            log(qq.format(\"Not sending chunked upload request for item {}.{} - no longer in progress.\", id, chunkIdx));\n                        }\n                        else {\n                            log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\n\n                            var uploadChunkData = {\n                                chunkIdx: chunkIdx,\n                                id: id,\n                                overrides: requestOverrides,\n                                resuming: resuming\n                            };\n\n                            handler.uploadChunk(uploadChunkData).then(\n                                // upload chunk success\n                                function success(response, xhr) {\n                                    log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\n\n                                    handler.clearCachedChunk(id, chunkIdx);\n\n                                    var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\n                                        responseToReport = upload.normalizeResponse(response, true),\n                                        inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\n\n                                    log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\n\n                                    chunked.done(id, chunkIdx, responseToReport, xhr);\n\n                                    if (inProgressChunkIdx >= 0) {\n                                        inProgressChunks.splice(inProgressChunkIdx, 1);\n                                    }\n\n                                    handler._maybePersistChunkedState(id);\n\n                                    if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\n                                        chunked.finalize(id);\n                                    }\n                                    else if (chunked.hasMoreParts(id)) {\n                                        chunked.sendNext(id);\n                                    }\n                                    else {\n                                        log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\n                                    }\n                                },\n\n                                // upload chunk failure\n                                function failure(response, xhr) {\n                                    chunked.handleFailure(chunkIdx, id, response, xhr);\n                                }\n                            )\n                                .done(function () {\n                                    handler.clearXhr(id, chunkIdx);\n                                });\n                        }\n                    },\n\n                    function(error) {\n                        chunked.handleFailure(chunkIdx, id, error, null);\n                    }\n                );\n            }\n        }\n    },\n\n    connectionManager = {\n        _open: [],\n        _openChunks: {},\n        _waiting: [],\n\n        available: function() {\n            var max = options.maxConnections,\n                openChunkEntriesCount = 0,\n                openChunksCount = 0;\n\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\n                openChunkEntriesCount++;\n                openChunksCount += openChunkIndexes.length;\n            });\n\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\n        },\n\n        /**\n         * Removes element from queue, starts upload of next\n         */\n        free: function(id, dontAllowNext) {\n            var allowNext = !dontAllowNext,\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\n                nextId;\n\n            delete connectionManager._openChunks[id];\n\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\n                delete handler._getFileState(id).file;\n            }\n\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\n            if (waitingIndex >= 0) {\n                connectionManager._waiting.splice(waitingIndex, 1);\n            }\n            // If this file was consuming a connection, allow the next file to be uploaded\n            else if (allowNext && connectionsIndex >= 0) {\n                connectionManager._open.splice(connectionsIndex, 1);\n\n                nextId = connectionManager._waiting.shift();\n                if (nextId >= 0) {\n                    connectionManager._open.push(nextId);\n                    upload.start(nextId);\n                }\n            }\n        },\n\n        getWaitingOrConnected: function() {\n            var waitingOrConnected = [];\n\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\n                if (chunks && chunks.length) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // For non-chunked files, only one connection will be consumed per file.\n            // This is where we aggregate those file IDs.\n            qq.each(connectionManager._open, function(idx, fileId) {\n                if (!connectionManager._openChunks[fileId]) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // There may be files waiting for a connection.\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\n\n            return waitingOrConnected;\n        },\n\n        isUsingConnection: function(id) {\n            return qq.indexOf(connectionManager._open, id) >= 0;\n        },\n\n        open: function(id, chunkIdx) {\n            if (chunkIdx == null) {\n                connectionManager._waiting.push(id);\n            }\n\n            if (connectionManager.available()) {\n                if (chunkIdx == null) {\n                    connectionManager._waiting.pop();\n                    connectionManager._open.push(id);\n                }\n                else {\n                    (function() {\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\n                        openChunksEntry.push(chunkIdx);\n                        connectionManager._openChunks[id] = openChunksEntry;\n                    }());\n                }\n\n                return true;\n            }\n\n            return false;\n        },\n\n        reset: function() {\n            connectionManager._waiting = [];\n            connectionManager._open = [];\n        }\n    },\n\n    simple = {\n        send: function(id, name) {\n            handler._getFileState(id).loaded = 0;\n\n            log(\"Sending simple upload request for \" + id);\n            handler.uploadFile(id).then(\n                function(response, optXhr) {\n                    log(\"Simple upload request succeeded for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, true),\n                        size = options.getSize(id);\n\n                    options.onProgress(id, name, size, size);\n                    upload.maybeNewUuid(id, responseToReport);\n                    upload.cleanup(id, responseToReport, optXhr);\n                },\n\n                function(response, optXhr) {\n                    log(\"Simple upload request failed for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, false);\n\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\n                        upload.cleanup(id, responseToReport, optXhr);\n                    }\n                }\n            );\n        }\n    },\n\n    upload = {\n        cancel: function(id) {\n            log(\"Cancelling \" + id);\n            options.paramsStore.remove(id);\n            connectionManager.free(id);\n        },\n\n        cleanup: function(id, response, optXhr) {\n            var name = options.getName(id);\n\n            options.onComplete(id, name, response, optXhr);\n\n            if (handler._getFileState(id)) {\n                handler._clearXhrs && handler._clearXhrs(id);\n            }\n\n            connectionManager.free(id);\n        },\n\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\n        // if none of these are available for the ID\n        getProxyOrBlob: function(id) {\n            return (handler.getProxy && handler.getProxy(id)) ||\n                (handler.getFile && handler.getFile(id));\n        },\n\n        initHandler: function() {\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\n\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\n                options,\n                {\n                    getCustomResumeData: options.getCustomResumeData,\n                    getDataByUuid: options.getDataByUuid,\n                    getName: options.getName,\n                    getSize: options.getSize,\n                    getUuid: options.getUuid,\n                    log: log,\n                    onCancel: options.onCancel,\n                    onProgress: options.onProgress,\n                    onUuidChanged: options.onUuidChanged\n                }\n            );\n\n            if (handler._removeExpiredChunkingRecords) {\n                handler._removeExpiredChunkingRecords();\n            }\n        },\n\n        isDeferredEligibleForUpload: function(id) {\n            return options.isQueued(id);\n        },\n\n        // For Blobs that are part of a group of generated images, along with a reference image,\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\n        // even if some async processing must be completed on one or more Blobs first.\n        maybeDefer: function(id, blob) {\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\n            // and then submit the upload to the specific handler once the blob is available.\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\n\n                // Blob creation may take some time, so the caller may want to update the\n                // UI to indicate that an operation is in progress, even before the actual\n                // upload begins and an onUpload callback is invoked.\n                options.onUploadPrep(id);\n\n                log(\"Attempting to generate a blob on-demand for \" + id);\n                blob.create().then(function(generatedBlob) {\n                    log(\"Generated an on-demand blob for \" + id);\n\n                    // Update record associated with this file by providing the generated Blob\n                    handler.updateBlob(id, generatedBlob);\n\n                    // Propagate the size for this generated Blob\n                    options.setSize(id, generatedBlob.size);\n\n                    // Order handler to recalculate chunking possibility, if applicable\n                    handler.reevaluateChunking(id);\n\n                    upload.maybeSendDeferredFiles(id);\n                },\n\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\n                function(errorMessage) {\n                    var errorResponse = {};\n\n                    if (errorMessage) {\n                        errorResponse.error = errorMessage;\n                    }\n\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\n\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\n                    upload.maybeSendDeferredFiles(id);\n                    connectionManager.free(id);\n                });\n            }\n            else {\n                return upload.maybeSendDeferredFiles(id);\n            }\n\n            return false;\n        },\n\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\n        maybeSendDeferredFiles: function(id) {\n            var idsInGroup = options.getIdsInProxyGroup(id),\n                uploadedThisId = false;\n\n            if (idsInGroup && idsInGroup.length) {\n                log(\"Maybe ready to upload proxy group file \" + id);\n\n                qq.each(idsInGroup, function(idx, idInGroup) {\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\n                        uploadedThisId = idInGroup === id;\n                        upload.now(idInGroup);\n                    }\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\n                        return false;\n                    }\n                });\n            }\n            else {\n                uploadedThisId = true;\n                upload.now(id);\n            }\n\n            return uploadedThisId;\n        },\n\n        maybeNewUuid: function(id, response) {\n            if (response.newUuid !== undefined) {\n                options.onUuidChanged(id, response.newUuid);\n            }\n        },\n\n        // The response coming from handler implementations may be in various formats.\n        // Instead of hoping a promise nested 5 levels deep will always return an object\n        // as its first param, let's just normalize the response here.\n        normalizeResponse: function(originalResponse, successful) {\n            var response = originalResponse;\n\n            // The passed \"response\" param may not be a response at all.\n            // It could be a string, detailing the error, for example.\n            if (!qq.isObject(originalResponse)) {\n                response = {};\n\n                if (qq.isString(originalResponse) && !successful) {\n                    response.error = originalResponse;\n                }\n            }\n\n            response.success = successful;\n\n            return response;\n        },\n\n        now: function(id) {\n            var name = options.getName(id);\n\n            if (!controller.isValid(id)) {\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\n            }\n\n            var onUploadPromise = options.onUpload(id, name);\n\n            onUploadPromise.then(\n                function() {\n                    if (chunkingPossible && handler._shouldChunkThisFile(id)) {\n                        chunked.sendNext(id);\n                    }\n                    else {\n                        simple.send(id, name);\n                    }\n                },\n\n                function(error) {\n                    throw new qq.Error(id + \" upload start aborted due to rejected onUpload Promise - details: \" + error);\n                }\n            );\n        },\n\n        start: function(id) {\n            var blobToUpload = upload.getProxyOrBlob(id);\n\n            if (blobToUpload) {\n                return upload.maybeDefer(id, blobToUpload);\n            }\n            else {\n                upload.now(id);\n                return true;\n            }\n        }\n    };\n\n    qq.extend(this, {\n        /**\n         * Adds file or file input to the queue\n         **/\n        add: function(id, file) {\n            handler.add.apply(this, arguments);\n        },\n\n        /**\n         * Sends the file identified by id\n         */\n        upload: function(id) {\n            if (connectionManager.open(id)) {\n                return upload.start(id);\n            }\n            return false;\n        },\n\n        retry: function(id) {\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\n            // any more failures at this point.\n            if (concurrentChunkingPossible) {\n                handler._getFileState(id).temp.ignoreFailure = false;\n            }\n\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\n            // Just go ahead and ask the handler to upload again.\n            if (connectionManager.isUsingConnection(id)) {\n                return upload.start(id);\n            }\n\n            // If we are attempting to retry a file that is not currently consuming a connection,\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\n            // before the retry commences.\n            else {\n                return controller.upload(id);\n            }\n        },\n\n        /**\n         * Cancels file upload by id\n         */\n        cancel: function(id) {\n            var cancelRetVal = handler.cancel(id);\n\n            if (qq.isGenericPromise(cancelRetVal)) {\n                cancelRetVal.then(function() {\n                    upload.cancel(id);\n                });\n            }\n            else if (cancelRetVal !== false) {\n                upload.cancel(id);\n            }\n        },\n\n        /**\n         * Cancels all queued or in-progress uploads\n         */\n        cancelAll: function() {\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\n                i;\n\n            // ensure files are cancelled in reverse order which they were added\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\n            if (waitingOrConnected.length) {\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\n                    controller.cancel(waitingOrConnected[i]);\n                }\n            }\n\n            connectionManager.reset();\n        },\n\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\n        // Undefined if no file record is available.\n        getFile: function(id) {\n            if (handler.getProxy && handler.getProxy(id)) {\n                return handler.getProxy(id).referenceBlob;\n            }\n\n            return handler.getFile && handler.getFile(id);\n        },\n\n        // Returns true if the Blob associated with the ID is related to a proxy s\n        isProxied: function(id) {\n            return !!(handler.getProxy && handler.getProxy(id));\n        },\n\n        getInput: function(id) {\n            if (handler.getInput) {\n                return handler.getInput(id);\n            }\n        },\n\n        reset: function() {\n            log(\"Resetting upload handler\");\n            controller.cancelAll();\n            connectionManager.reset();\n            handler.reset();\n        },\n\n        expunge: function(id) {\n            if (controller.isValid(id)) {\n                return handler.expunge(id);\n            }\n        },\n\n        /**\n         * Determine if the file exists.\n         */\n        isValid: function(id) {\n            return handler.isValid(id);\n        },\n\n        getResumableFilesData: function() {\n            if (handler.getResumableFilesData) {\n                return handler.getResumableFilesData();\n            }\n            return [];\n        },\n\n        /**\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\n         * will be undefined.\n         *\n         * @param id Internal file ID\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\n         */\n        getThirdPartyFileId: function(id) {\n            if (controller.isValid(id)) {\n                return handler.getThirdPartyFileId(id);\n            }\n        },\n\n        /**\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\n         * @param id ID of the upload/file to pause\n         * @returns {boolean} true if the upload was paused\n         */\n        pause: function(id) {\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\n                connectionManager.free(id);\n                handler.moveInProgressToRemaining(id);\n                return true;\n            }\n            return false;\n        },\n\n        // True if the file is eligible for pause/resume.\n        isResumable: function(id) {\n            return !!handler.isResumable && handler.isResumable(id);\n        }\n    });\n\n    qq.extend(options, o);\n    log = options.log;\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\n\n    preventRetryResponse = (function() {\n        var response = {};\n\n        response[options.preventRetryParam] = true;\n\n        return response;\n    }());\n\n    upload.initHandler();\n};\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log,\n        getCustomResumeData = proxy.getCustomResumeData;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = chunking.partSize,\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = chunking.partSize,\n                endpoint = getEndpoint(id),\n                customKeys = resume.customKeys(id),\n                localStorageId = qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n\n            customKeys.forEach(function(key) {\n                localStorageId += \"-\" + key;\n            });\n\n            return localStorageId;\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = chunking.partSize;\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.customResumeData = persistedData.customResumeData;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                var customResumeData = getCustomResumeData(id);\n\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now(),\n                };\n\n                if (customResumeData) {\n                    persistedData.customResumeData = customResumeData;\n                }\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*globals qq*/\n/**\n * Upload handler used that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to\n * a generic server.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.traditional = qq.traditional || {};\nqq.traditional.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log;\n\n    /**\n     * Returns json object received by iframe from server.\n     */\n    function getIframeContentJson(id, iframe) {\n        /*jshint evil: true*/\n\n        var response, doc, innerHtml;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            log(\"converting iframe's innerHTML to JSON\");\n            log(\"innerHTML = \" + innerHtml);\n            //plain text response may be wrapped in <pre> tag\n            if (innerHtml && innerHtml.match(/^<pre/i)) {\n                innerHtml = doc.body.firstChild.firstChild.nodeValue;\n            }\n\n            response = handler._parseJsonResponse(innerHtml);\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n            response = {success: false};\n        }\n\n        return response;\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var params = options.paramsStore.get(id),\n            method = options.method.toLowerCase() === \"get\" ? \"GET\" : \"POST\",\n            endpoint = options.endpointStore.get(id),\n            name = getName(id);\n\n        params[options.uuidName] = getUuid(id);\n        params[options.filenameParam] = name;\n\n        return handler._initFormForUpload({\n            method: method,\n            endpoint: endpoint,\n            params: params,\n            paramsInBody: options.paramsInBody,\n            targetName: iframe.name\n        });\n    }\n\n    this.uploadFile = function(id) {\n        var input = handler.getInput(id),\n            iframe = handler._createIframe(id),\n            promise = new qq.Promise(),\n            form;\n\n        form = createForm(id, iframe);\n        form.appendChild(input);\n\n        handler._attachLoadEvent(iframe, function(responseFromMessage) {\n            log(\"iframe loaded\");\n\n            var response = responseFromMessage ? responseFromMessage : getIframeContentJson(id, iframe);\n\n            handler._detachLoadEvent(id);\n\n            //we can't remove an iframe if the iframe doesn't belong to the same domain\n            if (!options.cors.expected) {\n                qq(iframe).remove();\n            }\n\n            if (response.success) {\n                promise.success(response);\n            }\n            else {\n                promise.failure(response);\n            }\n        });\n\n        log(\"Sending upload request for \" + id);\n        form.submit();\n        qq(form).remove();\n\n        return promise;\n    };\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: options.cors.expected,\n            inputName: options.inputName\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n};\n","/*globals qq*/\n/**\n * Upload handler used to upload to traditional endpoints.  It depends on File API support, and, therefore,\n * makes use of `XMLHttpRequest` level 2 to upload `File`s and `Blob`s to a generic server.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.traditional = qq.traditional || {};\nqq.traditional.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        multipart = spec.forceMultipart || spec.paramsInBody,\n\n        addChunkingSpecificParams = function(id, params, chunkData) {\n            var size = getSize(id),\n                name = getName(id);\n\n            if (!spec.omitDefaultParams) {\n                params[spec.chunking.paramNames.partIndex] = chunkData.part;\n                params[spec.chunking.paramNames.partByteOffset] = chunkData.start;\n                params[spec.chunking.paramNames.chunkSize] = chunkData.size;\n                params[spec.chunking.paramNames.totalParts] = chunkData.count;\n                params[spec.totalFileSizeName] = size;\n            }\n\n            /**\n             * When a Blob is sent in a multipart request, the filename value in the content-disposition header is either \"blob\"\n             * or an empty string.  So, we will need to include the actual file name as a param in this case.\n             */\n            if (multipart && !spec.omitDefaultParams) {\n                params[spec.filenameParam] = name;\n            }\n        },\n\n        allChunksDoneRequester = new qq.traditional.AllChunksDoneAjaxRequester({\n            cors: spec.cors,\n            endpoint: spec.chunking.success.endpoint,\n            headers: spec.chunking.success.headers,\n            jsonPayload: spec.chunking.success.jsonPayload,\n            log: log,\n            method: spec.chunking.success.method,\n            params: spec.chunking.success.params\n        }),\n\n        createReadyStateChangedHandler = function(id, xhr) {\n            var promise = new qq.Promise();\n\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    var result = onUploadOrChunkComplete(id, xhr);\n\n                    if (result.success) {\n                        promise.success(result.response, xhr);\n                    }\n                    else {\n                        promise.failure(result.response, xhr);\n                    }\n                }\n            };\n\n            return promise;\n        },\n\n        getChunksCompleteParams = function(id) {\n            var params = spec.paramsStore.get(id),\n                name = getName(id),\n                size = getSize(id);\n\n            params[spec.uuidName] = getUuid(id);\n            params[spec.filenameParam] = name;\n            params[spec.totalFileSizeName] = size;\n            params[spec.chunking.paramNames.totalParts] = handler._getTotalChunks(id);\n\n            return params;\n        },\n\n        isErrorUploadResponse = function(xhr, response) {\n            return qq.indexOf([200, 201, 202, 203, 204], xhr.status) < 0 ||\n                (spec.requireSuccessJson && !response.success) ||\n                response.reset;\n        },\n\n        onUploadOrChunkComplete = function(id, xhr) {\n            var response;\n\n            log(\"xhr - server response received for \" + id);\n            log(\"responseText = \" + xhr.responseText);\n\n            response = parseResponse(true, xhr);\n\n            return {\n                success: !isErrorUploadResponse(xhr, response),\n                response: response\n            };\n        },\n\n        // If this is an upload response, we require a JSON payload, otherwise, it is optional.\n        parseResponse = function(upload, xhr) {\n            var response = {};\n\n            try {\n                log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\n                response = qq.parseJson(xhr.responseText);\n            }\n            catch (error) {\n                upload && spec.requireSuccessJson && log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        },\n\n        sendChunksCompleteRequest = function(id) {\n            var promise = new qq.Promise();\n\n            allChunksDoneRequester.complete(\n                    id,\n                    handler._createXhr(id),\n                    getChunksCompleteParams(id),\n                    spec.customHeaders.get(id)\n                )\n                .then(function(xhr) {\n                    promise.success(parseResponse(false, xhr), xhr);\n                }, function(xhr) {\n                    promise.failure(parseResponse(false, xhr), xhr);\n                });\n\n            return promise;\n        },\n\n        setParamsAndGetEntityToSend = function(entityToSendParams) {\n            var fileOrBlob = entityToSendParams.fileOrBlob;\n            var id = entityToSendParams.id;\n            var xhr = entityToSendParams.xhr;\n            var xhrOverrides = entityToSendParams.xhrOverrides || {};\n\n            var params = xhrOverrides.params || entityToSendParams.params;\n\n            var formData = multipart ? new FormData() : null,\n                method = xhrOverrides.method || spec.method,\n                endpoint = xhrOverrides.endpoint || spec.endpointStore.get(id),\n                name = getName(id),\n                size = getSize(id);\n\n            if (!spec.omitDefaultParams) {\n                params[spec.uuidName] = getUuid(id);\n                params[spec.filenameParam] = name;\n            }\n\n            if (multipart && !spec.omitDefaultParams) {\n                params[spec.totalFileSizeName] = size;\n            }\n\n            //build query string\n            if (!spec.paramsInBody) {\n                if (!multipart && !spec.omitDefaultParams) {\n                    params[spec.inputName] = name;\n                }\n                endpoint = qq.obj2url(params, endpoint);\n            }\n\n            xhr.open(method, endpoint, true);\n\n            if (spec.cors.expected && spec.cors.sendCredentials) {\n                xhr.withCredentials = true;\n            }\n\n            if (multipart) {\n                if (spec.paramsInBody) {\n                    qq.obj2FormData(params, formData);\n                }\n\n                formData.append(spec.inputName, fileOrBlob);\n                return formData;\n            }\n\n            return fileOrBlob;\n        },\n\n        setUploadHeaders = function(headersOptions) {\n            var headerOverrides = headersOptions.headerOverrides;\n            var id = headersOptions.id;\n            var xhr = headersOptions.xhr;\n\n            if (headerOverrides) {\n                qq.each(headerOverrides, function(headerName, headerValue) {\n                    xhr.setRequestHeader(headerName, headerValue);\n                });\n            }\n            else {\n                var extraHeaders = spec.customHeaders.get(id),\n                    fileOrBlob = handler.getFile(id);\n\n                xhr.setRequestHeader(\"Accept\", \"application/json\");\n                xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n\n                if (!multipart) {\n                    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n                    //NOTE: return mime type in xhr works on chrome 16.0.9 firefox 11.0a2\n                    xhr.setRequestHeader(\"X-Mime-Type\", fileOrBlob.type);\n                }\n\n                qq.each(extraHeaders, function(name, val) {\n                    xhr.setRequestHeader(name, val);\n                });\n            }\n        };\n\n    qq.extend(this, {\n        uploadChunk: function(uploadChunkParams) {\n            var id = uploadChunkParams.id;\n            var chunkIdx = uploadChunkParams.chunkIdx;\n            var overrides = uploadChunkParams.overrides || {};\n            var resuming = uploadChunkParams.resuming;\n\n            var chunkData = handler._getChunkData(id, chunkIdx),\n                xhr = handler._createXhr(id, chunkIdx),\n                promise, toSend, params;\n\n            promise = createReadyStateChangedHandler(id, xhr);\n            handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n            params = spec.paramsStore.get(id);\n            addChunkingSpecificParams(id, params, chunkData);\n\n            if (resuming && !spec.omitDefaultParams) {\n                params[spec.resume.paramNames.resuming] = true;\n            }\n\n            toSend = setParamsAndGetEntityToSend({\n                fileOrBlob: chunkData.blob,\n                id: id,\n                params: params,\n                xhr: xhr,\n                xhrOverrides: overrides\n            });\n\n            setUploadHeaders({\n                headerOverrides: overrides.headers,\n                id: id,\n                xhr: xhr\n            });\n\n            xhr.send(toSend);\n\n            return promise;\n        },\n\n        uploadFile: function(id) {\n            var fileOrBlob = handler.getFile(id),\n                promise, xhr, params, toSend;\n\n            xhr = handler._createXhr(id);\n            handler._registerProgressHandler(id);\n            promise = createReadyStateChangedHandler(id, xhr);\n            params = spec.paramsStore.get(id);\n\n            toSend = setParamsAndGetEntityToSend({\n                fileOrBlob: fileOrBlob,\n                id: id,\n                params: params,\n                xhr: xhr\n            });\n\n            setUploadHeaders({\n                id: id,\n                xhr: xhr\n            });\n\n            xhr.send(toSend);\n\n            return promise;\n        }\n    });\n\n    qq.extend(this, new qq.XhrUploadHandler({\n        options: qq.extend({namespace: \"traditional\"}, spec),\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n    }));\n\n    qq.override(this, function(super_) {\n        return {\n            finalizeChunks: function(id) {\n                if (spec.chunking.success.endpoint) {\n                    return sendChunksCompleteRequest(id);\n                }\n                else {\n                    return super_.finalizeChunks(id, qq.bind(parseResponse, this, true));\n                }\n            }\n        };\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send a POST to a traditional endpoint once all chunks for a specific file have uploaded\n * successfully.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.traditional.AllChunksDoneAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            cors: {\n                allowXdr: false,\n                expected: false,\n                sendCredentials: false\n            },\n            endpoint: null,\n            log: function(str, level) {},\n            method: \"POST\"\n        },\n        promises = {},\n        endpointHandler = {\n            get: function(id) {\n                if (qq.isFunction(options.endpoint)) {\n                    return options.endpoint(id);\n                }\n\n                return options.endpoint;\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        contentType: options.jsonPayload ? \"application/json\" : \"application/x-www-form-urlencoded\",\n        validMethods: [options.method],\n        method: options.method,\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: options.cors,\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete promises[id];\n\n            if (isError) {\n                promise.failure(xhr);\n            }\n            else {\n                promise.success(xhr);\n            }\n        }\n    }));\n\n    qq.extend(this, {\n        complete: function(id, xhr, params, headers) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting All Chunks Done request for \" + id);\n\n            promises[id] = promise;\n\n            requester.initTransport(id)\n                .withParams(options.params(id) || params)\n                .withHeaders(options.headers(id) || headers)\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                var name = entry.name,\n                    fullPath = entry.fullPath,\n                    indexOfNameInFullPath = fullPath.indexOf(name);\n\n                // remove file name from full path string\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n                // remove leading slash in full path string\n                if (fullPath.charAt(0) === \"/\") {\n                    fullPath = fullPath.substr(1);\n                }\n\n                file.qqPath = fullPath;\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.firefox()) {\n            return !e.relatedTarget;\n        }\n\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            e.preventDefault();\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n        // dt.types.contains check is for firefox\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains(\"Files\")));\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Defines the public API for FineUploader mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.uiPublicApi = {\n        addInitialFiles: function(cannedFileList) {\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\n            this._templating.addCacheToDom();\n        },\n\n        clearStoredFiles: function() {\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\n            this._templating.clearFiles();\n        },\n\n        addExtraDropzone: function(element) {\n            this._dnd && this._dnd.setupExtraDropzone(element);\n        },\n\n        removeExtraDropzone: function(element) {\n            if (this._dnd) {\n                return this._dnd.removeDropzone(element);\n            }\n        },\n\n        getItemByFileId: function(id) {\n            if (!this._templating.isHiddenForever(id)) {\n                return this._templating.getFileContainer(id);\n            }\n        },\n\n        reset: function() {\n            this._parent.prototype.reset.apply(this, arguments);\n            this._templating.reset();\n\n            if (!this._options.button && this._templating.getButton()) {\n                this._defaultButtonId = this._createUploadButton({\n                    element: this._templating.getButton(),\n                    title: this._options.text.fileInputTitle\n                }).getButtonId();\n            }\n\n            if (this._dnd) {\n                this._dnd.dispose();\n                this._dnd = this._setupDragAndDrop();\n            }\n\n            this._totalFilesInBatch = 0;\n            this._filesInBatchAddedToUi = 0;\n\n            this._setupClickAndEditEventHandlers();\n        },\n\n        setName: function(id, newName) {\n            var formattedFilename = this._options.formatFileName(newName);\n\n            this._parent.prototype.setName.apply(this, arguments);\n            this._templating.updateFilename(id, formattedFilename);\n        },\n\n        pauseUpload: function(id) {\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\n\n            paused && this._templating.uploadPaused(id);\n            return paused;\n        },\n\n        continueUpload: function(id) {\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\n\n            continued && this._templating.uploadContinued(id);\n            return continued;\n        },\n\n        getId: function(fileContainerOrChildEl) {\n            return this._templating.getFileId(fileContainerOrChildEl);\n        },\n\n        getDropTarget: function(fileId) {\n            var file = this.getFile(fileId);\n\n            return file.qqDropTarget;\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploader mode.\n     */\n    qq.uiPrivateApi = {\n        _getButton: function(buttonId) {\n            var button = this._parent.prototype._getButton.apply(this, arguments);\n\n            if (!button) {\n                if (buttonId === this._defaultButtonId) {\n                    button = this._templating.getButton();\n                }\n            }\n\n            return button;\n        },\n\n        _removeFileItem: function(fileId) {\n            this._templating.removeFile(fileId);\n        },\n\n        _setupClickAndEditEventHandlers: function() {\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\n\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\n            this._focusinEventSupported = !qq.firefox();\n\n            if (this._isEditFilenameEnabled())\n            {\n                this._filenameClickHandler = this._bindFilenameClickEvent();\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\n            }\n        },\n\n        _setupDragAndDrop: function() {\n            var self = this,\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\n                templating = this._templating,\n                defaultDropZone = templating.getDropZone();\n\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\n\n            return new qq.DragAndDrop({\n                dropZoneElements: dropZoneElements,\n                allowMultipleItems: this._options.multiple,\n                classes: {\n                    dropActive: this._options.classes.dropActive\n                },\n                callbacks: {\n                    processingDroppedFiles: function() {\n                        templating.showDropProcessing();\n                    },\n                    processingDroppedFilesComplete: function(files, targetEl) {\n                        templating.hideDropProcessing();\n\n                        qq.each(files, function(idx, file) {\n                            file.qqDropTarget = targetEl;\n                        });\n\n                        if (files.length) {\n                            self.addFiles(files, null, null);\n                        }\n                    },\n                    dropError: function(code, errorData) {\n                        self._itemError(code, errorData);\n                    },\n                    dropLog: function(message, level) {\n                        self.log(message, level);\n                    }\n                }\n            });\n        },\n\n        _bindFileButtonsClickEvent: function() {\n            var self = this;\n\n            return new qq.FileButtonsClickHandler({\n                templating: this._templating,\n\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n\n                onDeleteFile: function(fileId) {\n                    self.deleteFile(fileId);\n                },\n\n                onCancel: function(fileId) {\n                    self.cancel(fileId);\n                },\n\n                onRetry: function(fileId) {\n                    self.retry(fileId);\n                },\n\n                onPause: function(fileId) {\n                    self.pauseUpload(fileId);\n                },\n\n                onContinue: function(fileId) {\n                    self.continueUpload(fileId);\n                },\n\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                }\n            });\n        },\n\n        _isEditFilenameEnabled: function() {\n            /*jshint -W014 */\n            return this._templating.isEditFilenamePossible()\n                && !this._options.autoUpload\n                && qq.FilenameClickHandler\n                && qq.FilenameInputFocusHandler\n                && qq.FilenameInputFocusHandler;\n        },\n\n        _filenameEditHandler: function() {\n            var self = this,\n                templating = this._templating;\n\n            return {\n                templating: templating,\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n                onGetUploadStatus: function(fileId) {\n                    return self.getUploads({id: fileId}).status;\n                },\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                },\n                onSetName: function(id, newName) {\n                    self.setName(id, newName);\n                },\n                onEditingStatusChange: function(id, isEditing) {\n                    var qqInput = qq(templating.getEditInput(id)),\n                        qqFileContainer = qq(templating.getFileContainer(id));\n\n                    if (isEditing) {\n                        qqInput.addClass(\"qq-editing\");\n                        templating.hideFilename(id);\n                        templating.hideEditIcon(id);\n                    }\n                    else {\n                        qqInput.removeClass(\"qq-editing\");\n                        templating.showFilename(id);\n                        templating.showEditIcon(id);\n                    }\n\n                    // Force IE8 and older to repaint\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\n                }\n            };\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\n\n            if (this._isEditFilenameEnabled()) {\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\n                    this._templating.markFilenameEditable(id);\n                    this._templating.hideEditIcon(id);\n                }\n            }\n\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\n                this._templating.hideRetry(id);\n                this._templating.setStatusText(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\n            }\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\n                this._templating.hidePause(id);\n            }\n        },\n\n        _bindFilenameInputFocusInEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusInHandler(spec);\n        },\n\n        _bindFilenameInputFocusEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusHandler(spec);\n        },\n\n        _bindFilenameClickEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameClickHandler(spec);\n        },\n\n        _storeForLater: function(id) {\n            this._parent.prototype._storeForLater.apply(this, arguments);\n            this._templating.hideSpinner(id);\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._parent.prototype._onAllComplete.apply(this, arguments);\n            this._templating.resetTotalProgress();\n        },\n\n        _onSubmit: function(id, name) {\n            var file = this.getFile(id);\n\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\n                this._paramsStore.addReadOnly(id, {\n                    qqpath: file.qqPath\n                });\n            }\n\n            this._parent.prototype._onSubmit.apply(this, arguments);\n            this._addToList(id, name);\n        },\n\n        // The file item has been added to the DOM.\n        _onSubmitted: function(id) {\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\n            if (this._isEditFilenameEnabled()) {\n                this._templating.markFilenameEditable(id);\n                this._templating.showEditIcon(id);\n\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\n                if (!this._focusinEventSupported) {\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\n                }\n            }\n        },\n\n        // Update the progress bar & percentage as the file is uploaded\n        _onProgress: function(id, name, loaded, total) {\n            this._parent.prototype._onProgress.apply(this, arguments);\n\n            this._templating.updateProgress(id, loaded, total);\n\n            if (total === 0 || Math.round(loaded / total * 100) === 100) {\n                this._templating.hideCancel(id);\n                this._templating.hidePause(id);\n                this._templating.hideProgress(id);\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\n\n                // If ~last byte was sent, display total file size\n                this._displayFileSize(id);\n            }\n            else {\n                // If still uploading, display percentage - total size is actually the total request(s) size\n                this._displayFileSize(id, loaded, total);\n            }\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\n            this._templating.updateTotalProgress(loaded, total);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\n                templating = this._templating,\n                fileContainer = templating.getFileContainer(id),\n                self = this;\n\n            function completeUpload(result) {\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\n                // If so, don't perform any UI-related tasks related to this file.\n                if (!fileContainer) {\n                    return;\n                }\n\n                templating.setStatusText(id);\n\n                qq(fileContainer).removeClass(self._classes.retrying);\n                templating.hideProgress(id);\n\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\n                    templating.hideCancel(id);\n                }\n                templating.hideSpinner(id);\n\n                if (result.success) {\n                    self._markFileAsSuccessful(id);\n                }\n                else {\n                    qq(fileContainer).addClass(self._classes.fail);\n                    templating.showCancel(id);\n\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\n                        qq(fileContainer).addClass(self._classes.retryable);\n                        templating.showRetry(id);\n                    }\n                    self._controlFailureTextDisplay(id, result);\n                }\n            }\n\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\n            if (parentRetVal instanceof qq.Promise) {\n                parentRetVal.done(function(newResult) {\n                    completeUpload(newResult);\n                });\n\n            }\n            else {\n                completeUpload(result);\n            }\n\n            return parentRetVal;\n        },\n\n        _markFileAsSuccessful: function(id) {\n            var templating = this._templating;\n\n            if (this._isDeletePossible()) {\n                templating.showDeleteButton(id);\n            }\n\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\n\n            this._maybeUpdateThumbnail(id);\n        },\n\n        _onUploadPrep: function(id) {\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\n            this._templating.showSpinner(id);\n        },\n\n        _onUpload: function(id, name) {\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\n\n            this._templating.showSpinner(id);\n\n            return parentRetVal;\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\n\n            // Only display the pause button if we have finished uploading at least one chunk\n            // & this file can be resumed\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\n                this._templating.allowPause(id);\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._parent.prototype._onCancel.apply(this, arguments);\n            this._removeFileItem(id);\n\n            if (this._getNotFinished() === 0) {\n                this._templating.resetTotalProgress();\n            }\n        },\n\n        _onBeforeAutoRetry: function(id) {\n            var retryNumForDisplay, maxAuto, retryNote;\n\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\n\n            this._showCancelLink(id);\n\n            if (this._options.retry.showAutoRetryNote) {\n                retryNumForDisplay = this._autoRetries[id];\n                maxAuto = this._options.retry.maxAutoAttempts;\n\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\n\n                this._templating.setStatusText(id, retryNote);\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\n            }\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\n                this._templating.resetProgress(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\n                this._templating.setStatusText(id);\n                this._templating.showSpinner(id);\n                this._showCancelLink(id);\n                return true;\n            }\n            else {\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\n                this._templating.showRetry(id);\n                return false;\n            }\n        },\n\n        _onSubmitDelete: function(id) {\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\n\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\n        },\n\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\n            if (this._options.deleteFile.forceConfirm) {\n                this._showDeleteConfirm.apply(this, arguments);\n            }\n            else {\n                this._sendDeleteRequest.apply(this, arguments);\n            }\n        },\n\n        _onDeleteComplete: function(id, xhr, isError) {\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\n\n            this._templating.hideSpinner(id);\n\n            if (isError) {\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\n                this._templating.showDeleteButton(id);\n            }\n            else {\n                this._removeFileItem(id);\n            }\n        },\n\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\n            this._templating.hideDeleteButton(id);\n            this._templating.showSpinner(id);\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\n            this._deleteHandler.sendDelete.apply(this, arguments);\n        },\n\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\n            /*jshint -W004 */\n            var fileName = this.getName(id),\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\n                uuid = this.getUuid(id),\n                deleteRequestArgs = arguments,\n                self = this,\n                retVal;\n\n            retVal = this._options.showConfirm(confirmMessage);\n\n            if (qq.isGenericPromise(retVal)) {\n                retVal.then(function() {\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\n                });\n            }\n            else if (retVal !== false) {\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\n            }\n        },\n\n        _addToList: function(id, name, canned) {\n            var prependData,\n                prependIndex = 0,\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\n                record;\n\n            if (this._options.display.prependFiles) {\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\n                    prependIndex = this._filesInBatchAddedToUi - 1;\n                }\n\n                prependData = {\n                    index: prependIndex\n                };\n            }\n\n            if (!canned) {\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\n                    this._templating.disableCancel();\n                }\n\n                // Cancel all existing (previous) files and clear the list if this file is not part of\n                // a scaled file group that has already been accepted, or if this file is not part of\n                // a scaled file group at all.\n                if (!this._options.multiple) {\n                    record = this.getUploads({id: id});\n\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\n\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\n                        this._handler.cancelAll();\n                        this._clearList();\n                        this._handledProxyGroup = null;\n                    }\n                }\n            }\n\n            if (canned) {\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\n            }\n            else {\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\n            }\n\n            this._filesInBatchAddedToUi += 1;\n\n            if (canned ||\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\n\n                this._displayFileSize(id);\n            }\n        },\n\n        _clearList: function() {\n            this._templating.clearFiles();\n            this.clearStoredFiles();\n        },\n\n        _displayFileSize: function(id, loadedSize, totalSize) {\n            var size = this.getSize(id),\n                sizeForDisplay = this._formatSize(size);\n\n            if (size >= 0) {\n                if (loadedSize !== undefined && totalSize !== undefined) {\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\n                }\n\n                this._templating.updateSize(id, sizeForDisplay);\n            }\n        },\n\n        _formatProgress: function(uploadedSize, totalSize) {\n            var message = this._options.text.formatProgress;\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\n            r(\"{total_size}\", this._formatSize(totalSize));\n            return message;\n        },\n\n        _controlFailureTextDisplay: function(id, response) {\n            var mode, responseProperty, failureReason;\n\n            mode = this._options.failedUploadTextDisplay.mode;\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\n\n            if (mode === \"custom\") {\n                failureReason = response[responseProperty];\n                if (!failureReason) {\n                    failureReason = this._options.text.failUpload;\n                }\n\n                this._templating.setStatusText(id, failureReason);\n\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\n                    this._showTooltip(id, failureReason);\n                }\n            }\n            else if (mode === \"default\") {\n                this._templating.setStatusText(id, this._options.text.failUpload);\n            }\n            else if (mode !== \"none\") {\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\n            }\n        },\n\n        _showTooltip: function(id, text) {\n            this._templating.getFileContainer(id).title = text;\n        },\n\n        _showCancelLink: function(id) {\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\n                this._templating.showCancel(id);\n            }\n        },\n\n        _itemError: function(code, name, item) {\n            var message = this._parent.prototype._itemError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _batchError: function(message) {\n            this._parent.prototype._batchError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _setupPastePrompt: function() {\n            var self = this;\n\n            this._options.callbacks.onPasteReceived = function() {\n                var message = self._options.paste.namePromptMessage,\n                    defaultVal = self._options.paste.defaultName;\n\n                return self._options.showPrompt(message, defaultVal);\n            };\n        },\n\n        _fileOrBlobRejected: function(id, name) {\n            this._totalFilesInBatch -= 1;\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            this._totalFilesInBatch = items.length;\n            this._filesInBatchAddedToUi = 0;\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\n        },\n\n        _maybeUpdateThumbnail: function(fileId) {\n            var thumbnailUrl = this._thumbnailUrls[fileId],\n                fileStatus = this.getUploads({id: fileId}).status;\n\n            if (fileStatus !== qq.status.DELETED &&\n                (thumbnailUrl ||\n                this._options.thumbnails.placeholders.waitUntilResponse ||\n                !qq.supportedFeatures.imagePreviews)) {\n\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\n                // if called with a null thumbnailUrl.\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\n\n            this._addToList(id, this.getName(id), true);\n            this._templating.hideSpinner(id);\n            this._templating.hideCancel(id);\n            this._markFileAsSuccessful(id);\n\n            return id;\n        },\n\n        _setSize: function(id, newSize) {\n            this._parent.prototype._setSize.apply(this, arguments);\n\n            this._templating.updateSize(id, this._formatSize(newSize));\n        },\n\n        _sessionRequestComplete: function() {\n            this._templating.addCacheToDom();\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateHtml,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListHtml,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListHtml = fileListNode.innerHTML;\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: qq.trimStr(tempTemplateEl.innerHTML),\n                fileTemplate: qq.trimStr(fileListHtml)\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateHtml = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.innerHTML = templateHtml.template;\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = qq.toElement(templateHtml.fileTemplate),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\n * CryptoJS core components.\n */\nqq.CryptoJS = (function (Math, undefined) {\n    /**\n     * CryptoJS namespace.\n     */\n    var C = {};\n\n    /**\n     * Library namespace.\n     */\n    var C_lib = C.lib = {};\n\n    /**\n     * Base object for prototypal inheritance.\n     */\n    var Base = C_lib.Base = (function () {\n        function F() {}\n\n        return {\n            /**\n             * Creates a new object that inherits from this object.\n             *\n             * @param {Object} overrides Properties to copy into the new object.\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         field: 'value',\n             *\n             *         method: function () {\n             *         }\n             *     });\n             */\n            extend: function (overrides) {\n                // Spawn\n                F.prototype = this;\n                var subtype = new F();\n\n                // Augment\n                if (overrides) {\n                    subtype.mixIn(overrides);\n                }\n\n                // Create default initializer\n                if (!subtype.hasOwnProperty('init')) {\n                    subtype.init = function () {\n                        subtype.$super.init.apply(this, arguments);\n                    };\n                }\n\n                // Initializer's prototype is the subtype object\n                subtype.init.prototype = subtype;\n\n                // Reference supertype\n                subtype.$super = this;\n\n                return subtype;\n            },\n\n            /**\n             * Extends this object and runs the init method.\n             * Arguments to create() will be passed to init().\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var instance = MyType.create();\n             */\n            create: function () {\n                var instance = this.extend();\n                instance.init.apply(instance, arguments);\n\n                return instance;\n            },\n\n            /**\n             * Initializes a newly created object.\n             * Override this method to add some logic when your objects are created.\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         init: function () {\n             *             // ...\n             *         }\n             *     });\n             */\n            init: function () {\n            },\n\n            /**\n             * Copies properties into this object.\n             *\n             * @param {Object} properties The properties to mix in.\n             *\n             * @example\n             *\n             *     MyType.mixIn({\n             *         field: 'value'\n             *     });\n             */\n            mixIn: function (properties) {\n                for (var propertyName in properties) {\n                    if (properties.hasOwnProperty(propertyName)) {\n                        this[propertyName] = properties[propertyName];\n                    }\n                }\n\n                // IE won't copy toString using the loop above\n                if (properties.hasOwnProperty('toString')) {\n                    this.toString = properties.toString;\n                }\n            },\n\n            /**\n             * Creates a copy of this object.\n             *\n             * @return {Object} The clone.\n             *\n             * @example\n             *\n             *     var clone = instance.clone();\n             */\n            clone: function () {\n                return this.init.prototype.extend(this);\n            }\n        };\n    }());\n\n    /**\n     * An array of 32-bit words.\n     *\n     * @property {Array} words The array of 32-bit words.\n     * @property {number} sigBytes The number of significant bytes in this word array.\n     */\n    var WordArray = C_lib.WordArray = Base.extend({\n        /**\n         * Initializes a newly created word array.\n         *\n         * @param {Array} words (Optional) An array of 32-bit words.\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.create();\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n         */\n        init: function (words, sigBytes) {\n            words = this.words = words || [];\n\n            if (sigBytes != undefined) {\n                this.sigBytes = sigBytes;\n            } else {\n                this.sigBytes = words.length * 4;\n            }\n        },\n\n        /**\n         * Converts this word array to a string.\n         *\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n         *\n         * @return {string} The stringified word array.\n         *\n         * @example\n         *\n         *     var string = wordArray + '';\n         *     var string = wordArray.toString();\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n         */\n        toString: function (encoder) {\n            return (encoder || Hex).stringify(this);\n        },\n\n        /**\n         * Concatenates a word array to this word array.\n         *\n         * @param {WordArray} wordArray The word array to append.\n         *\n         * @return {WordArray} This word array.\n         *\n         * @example\n         *\n         *     wordArray1.concat(wordArray2);\n         */\n        concat: function (wordArray) {\n            // Shortcuts\n            var thisWords = this.words;\n            var thatWords = wordArray.words;\n            var thisSigBytes = this.sigBytes;\n            var thatSigBytes = wordArray.sigBytes;\n\n            // Clamp excess bits\n            this.clamp();\n\n            // Concat\n            if (thisSigBytes % 4) {\n                // Copy one byte at a time\n                for (var i = 0; i < thatSigBytes; i++) {\n                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n                }\n            } else if (thatWords.length > 0xffff) {\n                // Copy one word at a time\n                for (var i = 0; i < thatSigBytes; i += 4) {\n                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n                }\n            } else {\n                // Copy all words at once\n                thisWords.push.apply(thisWords, thatWords);\n            }\n            this.sigBytes += thatSigBytes;\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Removes insignificant bits.\n         *\n         * @example\n         *\n         *     wordArray.clamp();\n         */\n        clamp: function () {\n            // Shortcuts\n            var words = this.words;\n            var sigBytes = this.sigBytes;\n\n            // Clamp\n            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n            words.length = Math.ceil(sigBytes / 4);\n        },\n\n        /**\n         * Creates a copy of this word array.\n         *\n         * @return {WordArray} The clone.\n         *\n         * @example\n         *\n         *     var clone = wordArray.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone.words = this.words.slice(0);\n\n            return clone;\n        },\n\n        /**\n         * Creates a word array filled with random bytes.\n         *\n         * @param {number} nBytes The number of random bytes to generate.\n         *\n         * @return {WordArray} The random word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n         */\n        random: function (nBytes) {\n            var words = [];\n            for (var i = 0; i < nBytes; i += 4) {\n                words.push((Math.random() * 0x100000000) | 0);\n            }\n\n            return new WordArray.init(words, nBytes);\n        }\n    });\n\n    /**\n     * Encoder namespace.\n     */\n    var C_enc = C.enc = {};\n\n    /**\n     * Hex encoding strategy.\n     */\n    var Hex = C_enc.Hex = {\n        /**\n         * Converts a word array to a hex string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The hex string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var hexChars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                hexChars.push((bite >>> 4).toString(16));\n                hexChars.push((bite & 0x0f).toString(16));\n            }\n\n            return hexChars.join('');\n        },\n\n        /**\n         * Converts a hex string to a word array.\n         *\n         * @param {string} hexStr The hex string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n         */\n        parse: function (hexStr) {\n            // Shortcut\n            var hexStrLength = hexStr.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < hexStrLength; i += 2) {\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n            }\n\n            return new WordArray.init(words, hexStrLength / 2);\n        }\n    };\n\n    /**\n     * Latin1 encoding strategy.\n     */\n    var Latin1 = C_enc.Latin1 = {\n        /**\n         * Converts a word array to a Latin1 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Latin1 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var latin1Chars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                latin1Chars.push(String.fromCharCode(bite));\n            }\n\n            return latin1Chars.join('');\n        },\n\n        /**\n         * Converts a Latin1 string to a word array.\n         *\n         * @param {string} latin1Str The Latin1 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n         */\n        parse: function (latin1Str) {\n            // Shortcut\n            var latin1StrLength = latin1Str.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < latin1StrLength; i++) {\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n            }\n\n            return new WordArray.init(words, latin1StrLength);\n        }\n    };\n\n    /**\n     * UTF-8 encoding strategy.\n     */\n    var Utf8 = C_enc.Utf8 = {\n        /**\n         * Converts a word array to a UTF-8 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The UTF-8 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            try {\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n            } catch (e) {\n                throw new Error('Malformed UTF-8 data');\n            }\n        },\n\n        /**\n         * Converts a UTF-8 string to a word array.\n         *\n         * @param {string} utf8Str The UTF-8 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n         */\n        parse: function (utf8Str) {\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n        }\n    };\n\n    /**\n     * Abstract buffered block algorithm template.\n     *\n     * The property blockSize must be implemented in a concrete subtype.\n     *\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n     */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n        /**\n         * Resets this block algorithm's data buffer to its initial state.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm.reset();\n         */\n        reset: function () {\n            // Initial values\n            this._data = new WordArray.init();\n            this._nDataBytes = 0;\n        },\n\n        /**\n         * Adds new data to this block algorithm's buffer.\n         *\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm._append('data');\n         *     bufferedBlockAlgorithm._append(wordArray);\n         */\n        _append: function (data) {\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof data == 'string') {\n                data = Utf8.parse(data);\n            }\n\n            // Append\n            this._data.concat(data);\n            this._nDataBytes += data.sigBytes;\n        },\n\n        /**\n         * Processes available data blocks.\n         *\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n         *\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n         *\n         * @return {WordArray} The processed data.\n         *\n         * @example\n         *\n         *     var processedData = bufferedBlockAlgorithm._process();\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n         */\n        _process: function (doFlush) {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n            var dataSigBytes = data.sigBytes;\n            var blockSize = this.blockSize;\n            var blockSizeBytes = blockSize * 4;\n\n            // Count blocks ready\n            var nBlocksReady = dataSigBytes / blockSizeBytes;\n            if (doFlush) {\n                // Round up to include partial blocks\n                nBlocksReady = Math.ceil(nBlocksReady);\n            } else {\n                // Round down to include only full blocks,\n                // less the number of blocks that must remain in the buffer\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n            }\n\n            // Count words ready\n            var nWordsReady = nBlocksReady * blockSize;\n\n            // Count bytes ready\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n            // Process blocks\n            if (nWordsReady) {\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n                    // Perform concrete-algorithm logic\n                    this._doProcessBlock(dataWords, offset);\n                }\n\n                // Remove processed words\n                var processedWords = dataWords.splice(0, nWordsReady);\n                data.sigBytes -= nBytesReady;\n            }\n\n            // Return processed words\n            return new WordArray.init(processedWords, nBytesReady);\n        },\n\n        /**\n         * Creates a copy of this object.\n         *\n         * @return {Object} The clone.\n         *\n         * @example\n         *\n         *     var clone = bufferedBlockAlgorithm.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone._data = this._data.clone();\n\n            return clone;\n        },\n\n        _minBufferSize: 0\n    });\n\n    /**\n     * Abstract hasher template.\n     *\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n     */\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n        /**\n         * Configuration options.\n         */\n        cfg: Base.extend(),\n\n        /**\n         * Initializes a newly created hasher.\n         *\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n         *\n         * @example\n         *\n         *     var hasher = CryptoJS.algo.SHA256.create();\n         */\n        init: function (cfg) {\n            // Apply config defaults\n            this.cfg = this.cfg.extend(cfg);\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this hasher to its initial state.\n         *\n         * @example\n         *\n         *     hasher.reset();\n         */\n        reset: function () {\n            // Reset data buffer\n            BufferedBlockAlgorithm.reset.call(this);\n\n            // Perform concrete-hasher logic\n            this._doReset();\n        },\n\n        /**\n         * Updates this hasher with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {Hasher} This hasher.\n         *\n         * @example\n         *\n         *     hasher.update('message');\n         *     hasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            // Append\n            this._append(messageUpdate);\n\n            // Update the hash\n            this._process();\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the hash computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The hash.\n         *\n         * @example\n         *\n         *     var hash = hasher.finalize();\n         *     var hash = hasher.finalize('message');\n         *     var hash = hasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Final message update\n            if (messageUpdate) {\n                this._append(messageUpdate);\n            }\n\n            // Perform concrete-hasher logic\n            var hash = this._doFinalize();\n\n            return hash;\n        },\n\n        blockSize: 512/32,\n\n        /**\n         * Creates a shortcut function to a hasher's object interface.\n         *\n         * @param {Hasher} hasher The hasher to create a helper for.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n         */\n        _createHelper: function (hasher) {\n            return function (message, cfg) {\n                return new hasher.init(cfg).finalize(message);\n            };\n        },\n\n        /**\n         * Creates a shortcut function to the HMAC's object interface.\n         *\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n         */\n        _createHmacHelper: function (hasher) {\n            return function (message, key) {\n                return new C_algo.HMAC.init(hasher, key).finalize(message);\n            };\n        }\n    });\n\n    /**\n     * Algorithm namespace.\n     */\n    var C_algo = C.algo = {};\n\n    return C;\n}(Math));\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n     * Base64 encoding strategy.\n     */\n    var Base64 = C_enc.Base64 = {\n        /**\n         * Converts a word array to a Base64 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Base64 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n            var map = this._map;\n\n            // Clamp excess bits\n            wordArray.clamp();\n\n            // Convert\n            var base64Chars = [];\n            for (var i = 0; i < sigBytes; i += 3) {\n                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n                }\n            }\n\n            // Add padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                while (base64Chars.length % 4) {\n                    base64Chars.push(paddingChar);\n                }\n            }\n\n            return base64Chars.join('');\n        },\n\n        /**\n         * Converts a Base64 string to a word array.\n         *\n         * @param {string} base64Str The Base64 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n         */\n        parse: function (base64Str) {\n            // Shortcuts\n            var base64StrLength = base64Str.length;\n            var map = this._map;\n\n            // Ignore padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                var paddingIndex = base64Str.indexOf(paddingChar);\n                if (paddingIndex != -1) {\n                    base64StrLength = paddingIndex;\n                }\n            }\n\n            // Convert\n            var words = [];\n            var nBytes = 0;\n            for (var i = 0; i < base64StrLength; i++) {\n                if (i % 4) {\n                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);\n                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);\n                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n                    nBytes++;\n                }\n            }\n\n            return WordArray.create(words, nBytes);\n        },\n\n        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n    };\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\n     * HMAC algorithm.\n     */\n    var HMAC = C_algo.HMAC = Base.extend({\n        /**\n         * Initializes a newly created HMAC.\n         *\n         * @param {Hasher} hasher The hash algorithm to use.\n         * @param {WordArray|string} key The secret key.\n         *\n         * @example\n         *\n         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n         */\n        init: function (hasher, key) {\n            // Init hasher\n            hasher = this._hasher = new hasher.init();\n\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof key == 'string') {\n                key = Utf8.parse(key);\n            }\n\n            // Shortcuts\n            var hasherBlockSize = hasher.blockSize;\n            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n            // Allow arbitrary length keys\n            if (key.sigBytes > hasherBlockSizeBytes) {\n                key = hasher.finalize(key);\n            }\n\n            // Clamp excess bits\n            key.clamp();\n\n            // Clone key for inner and outer pads\n            var oKey = this._oKey = key.clone();\n            var iKey = this._iKey = key.clone();\n\n            // Shortcuts\n            var oKeyWords = oKey.words;\n            var iKeyWords = iKey.words;\n\n            // XOR keys with pad constants\n            for (var i = 0; i < hasherBlockSize; i++) {\n                oKeyWords[i] ^= 0x5c5c5c5c;\n                iKeyWords[i] ^= 0x36363636;\n            }\n            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this HMAC to its initial state.\n         *\n         * @example\n         *\n         *     hmacHasher.reset();\n         */\n        reset: function () {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Reset\n            hasher.reset();\n            hasher.update(this._iKey);\n        },\n\n        /**\n         * Updates this HMAC with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {HMAC} This HMAC instance.\n         *\n         * @example\n         *\n         *     hmacHasher.update('message');\n         *     hmacHasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            this._hasher.update(messageUpdate);\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the HMAC computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The HMAC.\n         *\n         * @example\n         *\n         *     var hmac = hmacHasher.finalize();\n         *     var hmac = hmacHasher.finalize('message');\n         *     var hmac = hmacHasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Compute HMAC\n            var innerHash = hasher.finalize(messageUpdate);\n            hasher.reset();\n            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n            return hmac;\n        }\n    });\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Reusable object\n    var W = [];\n\n    /**\n     * SHA-1 hash algorithm.\n     */\n    var SHA1 = C_algo.SHA1 = Hasher.extend({\n        _doReset: function () {\n            this._hash = new WordArray.init([\n                0x67452301, 0xefcdab89,\n                0x98badcfe, 0x10325476,\n                0xc3d2e1f0\n            ]);\n        },\n\n        _doProcessBlock: function (M, offset) {\n            // Shortcut\n            var H = this._hash.words;\n\n            // Working variables\n            var a = H[0];\n            var b = H[1];\n            var c = H[2];\n            var d = H[3];\n            var e = H[4];\n\n            // Computation\n            for (var i = 0; i < 80; i++) {\n                if (i < 16) {\n                    W[i] = M[offset + i] | 0;\n                } else {\n                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n                    W[i] = (n << 1) | (n >>> 31);\n                }\n\n                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n                if (i < 20) {\n                    t += ((b & c) | (~b & d)) + 0x5a827999;\n                } else if (i < 40) {\n                    t += (b ^ c ^ d) + 0x6ed9eba1;\n                } else if (i < 60) {\n                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n                } else /* if (i < 80) */ {\n                    t += (b ^ c ^ d) - 0x359d3e2a;\n                }\n\n                e = d;\n                d = c;\n                c = (b << 30) | (b >>> 2);\n                b = a;\n                a = t;\n            }\n\n            // Intermediate hash value\n            H[0] = (H[0] + a) | 0;\n            H[1] = (H[1] + b) | 0;\n            H[2] = (H[2] + c) | 0;\n            H[3] = (H[3] + d) | 0;\n            H[4] = (H[4] + e) | 0;\n        },\n\n        _doFinalize: function () {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n\n            var nBitsTotal = this._nDataBytes * 8;\n            var nBitsLeft = data.sigBytes * 8;\n\n            // Add padding\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n            data.sigBytes = dataWords.length * 4;\n\n            // Hash final blocks\n            this._process();\n\n            // Return final computed hash\n            return this._hash;\n        },\n\n        clone: function () {\n            var clone = Hasher.clone.call(this);\n            clone._hash = this._hash.clone();\n\n            return clone;\n        }\n    });\n\n    /**\n     * Shortcut function to the hasher's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     *\n     * @return {WordArray} The hash.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hash = CryptoJS.SHA1('message');\n     *     var hash = CryptoJS.SHA1(wordArray);\n     */\n    C.SHA1 = Hasher._createHelper(SHA1);\n\n    /**\n     * Shortcut function to the HMAC's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     * @param {WordArray|string} key The secret key.\n     *\n     * @return {WordArray} The HMAC.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hmac = CryptoJS.HmacSHA1(message, key);\n     */\n    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n}());\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function (Math) {\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n    var Hasher = C_lib.Hasher;\r\n    var C_algo = C.algo;\r\n\r\n    // Initialization and round constants tables\r\n    var H = [];\r\n    var K = [];\r\n\r\n    // Compute constants\r\n    (function () {\r\n        function isPrime(n) {\r\n            var sqrtN = Math.sqrt(n);\r\n            for (var factor = 2; factor <= sqrtN; factor++) {\r\n                if (!(n % factor)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function getFractionalBits(n) {\r\n            return ((n - (n | 0)) * 0x100000000) | 0;\r\n        }\r\n\r\n        var n = 2;\r\n        var nPrime = 0;\r\n        while (nPrime < 64) {\r\n            if (isPrime(n)) {\r\n                if (nPrime < 8) {\r\n                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\r\n                }\r\n                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\r\n\r\n                nPrime++;\r\n            }\r\n\r\n            n++;\r\n        }\r\n    }());\r\n\r\n    // Reusable object\r\n    var W = [];\r\n\r\n    /**\r\n     * SHA-256 hash algorithm.\r\n     */\r\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\r\n        _doReset: function () {\r\n            this._hash = new WordArray.init(H.slice(0));\r\n        },\r\n\r\n        _doProcessBlock: function (M, offset) {\r\n            // Shortcut\r\n            var H = this._hash.words;\r\n\r\n            // Working variables\r\n            var a = H[0];\r\n            var b = H[1];\r\n            var c = H[2];\r\n            var d = H[3];\r\n            var e = H[4];\r\n            var f = H[5];\r\n            var g = H[6];\r\n            var h = H[7];\r\n\r\n            // Computation\r\n            for (var i = 0; i < 64; i++) {\r\n                if (i < 16) {\r\n                    W[i] = M[offset + i] | 0;\r\n                } else {\r\n                    var gamma0x = W[i - 15];\r\n                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\r\n                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\r\n                                   (gamma0x >>> 3);\r\n\r\n                    var gamma1x = W[i - 2];\r\n                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\r\n                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\r\n                                   (gamma1x >>> 10);\r\n\r\n                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\r\n                }\r\n\r\n                var ch  = (e & f) ^ (~e & g);\r\n                var maj = (a & b) ^ (a & c) ^ (b & c);\r\n\r\n                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\r\n                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\r\n\r\n                var t1 = h + sigma1 + ch + K[i] + W[i];\r\n                var t2 = sigma0 + maj;\r\n\r\n                h = g;\r\n                g = f;\r\n                f = e;\r\n                e = (d + t1) | 0;\r\n                d = c;\r\n                c = b;\r\n                b = a;\r\n                a = (t1 + t2) | 0;\r\n            }\r\n\r\n            // Intermediate hash value\r\n            H[0] = (H[0] + a) | 0;\r\n            H[1] = (H[1] + b) | 0;\r\n            H[2] = (H[2] + c) | 0;\r\n            H[3] = (H[3] + d) | 0;\r\n            H[4] = (H[4] + e) | 0;\r\n            H[5] = (H[5] + f) | 0;\r\n            H[6] = (H[6] + g) | 0;\r\n            H[7] = (H[7] + h) | 0;\r\n        },\r\n\r\n        _doFinalize: function () {\r\n            // Shortcuts\r\n            var data = this._data;\r\n            var dataWords = data.words;\r\n\r\n            var nBitsTotal = this._nDataBytes * 8;\r\n            var nBitsLeft = data.sigBytes * 8;\r\n\r\n            // Add padding\r\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\r\n            data.sigBytes = dataWords.length * 4;\r\n\r\n            // Hash final blocks\r\n            this._process();\r\n\r\n            // Return final computed hash\r\n            return this._hash;\r\n        },\r\n\r\n        clone: function () {\r\n            var clone = Hasher.clone.call(this);\r\n            clone._hash = this._hash.clone();\r\n\r\n            return clone;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Shortcut function to the hasher's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = CryptoJS.SHA256('message');\r\n     *     var hash = CryptoJS.SHA256(wordArray);\r\n     */\r\n    C.SHA256 = Hasher._createHelper(SHA256);\r\n\r\n    /**\r\n     * Shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     * @param {WordArray|string} key The secret key.\r\n     *\r\n     * @return {WordArray} The HMAC.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmac = CryptoJS.HmacSHA256(message, key);\r\n     */\r\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\r\n}(Math));\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function () {\r\n    // Check if typed arrays are supported\r\n    if (typeof ArrayBuffer != 'function') {\r\n        return;\r\n    }\r\n\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n\r\n    // Reference original init\r\n    var superInit = WordArray.init;\r\n\r\n    // Augment WordArray.init to handle typed arrays\r\n    var subInit = WordArray.init = function (typedArray) {\r\n        // Convert buffers to uint8\r\n        if (typedArray instanceof ArrayBuffer) {\r\n            typedArray = new Uint8Array(typedArray);\r\n        }\r\n\r\n        // Convert other array views to uint8\r\n        if (\r\n            typedArray instanceof Int8Array ||\r\n            typedArray instanceof Uint8ClampedArray ||\r\n            typedArray instanceof Int16Array ||\r\n            typedArray instanceof Uint16Array ||\r\n            typedArray instanceof Int32Array ||\r\n            typedArray instanceof Uint32Array ||\r\n            typedArray instanceof Float32Array ||\r\n            typedArray instanceof Float64Array\r\n        ) {\r\n            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\r\n        }\r\n\r\n        // Handle Uint8Array\r\n        if (typedArray instanceof Uint8Array) {\r\n            // Shortcut\r\n            var typedArrayByteLength = typedArray.byteLength;\r\n\r\n            // Extract bytes\r\n            var words = [];\r\n            for (var i = 0; i < typedArrayByteLength; i++) {\r\n                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\r\n            }\r\n\r\n            // Initialize this word array\r\n            superInit.call(this, words, typedArrayByteLength);\r\n        } else {\r\n            // Else call normal init\r\n            superInit.apply(this, arguments);\r\n        }\r\n    };\r\n\r\n    subInit.prototype = WordArray;\r\n}());\r\n","/*globals qq */\nqq.s3 = qq.s3 || {};\n\nqq.s3.util = qq.s3.util || (function() {\n    \"use strict\";\n\n    return {\n        ALGORITHM_PARAM_NAME: \"x-amz-algorithm\",\n\n        AWS_PARAM_PREFIX: \"x-amz-meta-\",\n\n        CREDENTIAL_PARAM_NAME: \"x-amz-credential\",\n\n        DATE_PARAM_NAME: \"x-amz-date\",\n\n        REDUCED_REDUNDANCY_PARAM_NAME: \"x-amz-storage-class\",\n        REDUCED_REDUNDANCY_PARAM_VALUE: \"REDUCED_REDUNDANCY\",\n\n        SERVER_SIDE_ENCRYPTION_PARAM_NAME: \"x-amz-server-side-encryption\",\n        SERVER_SIDE_ENCRYPTION_PARAM_VALUE: \"AES256\",\n\n        SESSION_TOKEN_PARAM_NAME: \"x-amz-security-token\",\n\n        V4_ALGORITHM_PARAM_VALUE: \"AWS4-HMAC-SHA256\",\n\n        V4_SIGNATURE_PARAM_NAME: \"x-amz-signature\",\n\n        CASE_SENSITIVE_PARAM_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\"\n        ],\n\n        UNSIGNABLE_REST_HEADER_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\"\n        ],\n\n        UNPREFIXED_PARAM_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\",\n            \"x-amz-server-side-encryption-customer-algorithm\",\n            \"x-amz-server-side-encryption-customer-key\",\n            \"x-amz-server-side-encryption-customer-key-MD5\"\n        ],\n\n        /**\n         * This allows for the region to be specified in the bucket's endpoint URL, or not.\n         *\n         * Examples of some valid endpoints are:\n         *     http://foo.s3.amazonaws.com\n         *     https://foo.s3.amazonaws.com\n         *     http://foo.s3-ap-northeast-1.amazonaws.com\n         *     foo.s3.amazonaws.com\n         *     http://foo.bar.com\n         *     http://s3.amazonaws.com/foo.bar.com\n         * ...etc\n         *\n         * @param endpoint The bucket's URL.\n         * @returns {String || undefined} The bucket name, or undefined if the URL cannot be parsed.\n         */\n        getBucket: function(endpoint) {\n            var patterns = [\n                    //bucket in domain\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)\\.s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com/i,\n                    //bucket in path\n                    /^(?:https?:\\/\\/)?s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com\\/([a-z0-9.\\-_]+)/i,\n                    //custom domain\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)/i\n                ],\n                bucket;\n\n            qq.each(patterns, function(idx, pattern) {\n                var match = pattern.exec(endpoint);\n\n                if (match) {\n                    bucket = match[1];\n                    return false;\n                }\n            });\n\n            return bucket;\n        },\n\n        /** Create Prefixed request headers which are appropriate for S3.\n         *\n         * If the request header is appropriate for S3 (e.g. Cache-Control) then pass\n         * it along without a metadata prefix. For all other request header parameter names,\n         * apply qq.s3.util.AWS_PARAM_PREFIX before the name.\n         * See: http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html\n         */\n        _getPrefixedParamName: function(name) {\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\n                return name;\n            }\n            return qq.s3.util.AWS_PARAM_PREFIX + name;\n        },\n\n        /**\n         * Create a policy document to be signed and sent along with the S3 upload request.\n         *\n         * @param spec Object with properties use to construct the policy document.\n         * @returns {Object} Policy doc.\n         */\n        getPolicy: function(spec) {\n            var policy = {},\n                conditions = [],\n                bucket = spec.bucket,\n                date = spec.date,\n                drift = spec.clockDrift,\n                key = spec.key,\n                accessKey = spec.accessKey,\n                acl = spec.acl,\n                type = spec.type,\n                expectedStatus = spec.expectedStatus,\n                sessionToken = spec.sessionToken,\n                params = spec.params,\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\n                minFileSize = spec.minFileSize,\n                maxFileSize = spec.maxFileSize,\n                reducedRedundancy = spec.reducedRedundancy,\n                region = spec.region,\n                serverSideEncryption = spec.serverSideEncryption,\n                signatureVersion = spec.signatureVersion;\n\n            policy.expiration = qq.s3.util.getPolicyExpirationDate(date, drift);\n\n            conditions.push({acl: acl});\n            conditions.push({bucket: bucket});\n\n            if (type) {\n                conditions.push({\"Content-Type\": type});\n            }\n\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            if (expectedStatus) {\n                conditions.push({success_action_status: expectedStatus.toString()});\n            }\n\n            if (successRedirectUrl) {\n                conditions.push({success_action_redirect: successRedirectUrl});\n            }\n            // jscs:enable\n            if (reducedRedundancy) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n            }\n\n            if (sessionToken) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n            }\n\n            if (serverSideEncryption) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n            }\n\n            if (signatureVersion === 2) {\n                conditions.push({key: key});\n            }\n            else if (signatureVersion === 4) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\n\n                conditions.push({});\n                conditions[conditions.length - 1].key = key;\n\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.CREDENTIAL_PARAM_NAME] =\n                    qq.s3.util.getV4CredentialsString({date: date, key: accessKey, region: region});\n\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.DATE_PARAM_NAME] =\n                    qq.s3.util.getV4PolicyDate(date, drift);\n            }\n\n            // user metadata\n            qq.each(params, function(name, val) {\n                var awsParamName = qq.s3.util._getPrefixedParamName(name),\n                    param = {};\n\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\n                    param[awsParamName] = val;\n                }\n                else {\n                    param[awsParamName] = encodeURIComponent(val);\n                }\n\n                conditions.push(param);\n            });\n\n            policy.conditions = conditions;\n\n            qq.s3.util.enforceSizeLimits(policy, minFileSize, maxFileSize);\n\n            return policy;\n        },\n\n        /**\n         * Update a previously constructed policy document with updated credentials.  Currently, this only requires we\n         * update the session token.  This is only relevant if requests are being signed client-side.\n         *\n         * @param policy Live policy document\n         * @param newSessionToken Updated session token.\n         */\n        refreshPolicyCredentials: function(policy, newSessionToken) {\n            var sessionTokenFound = false;\n\n            qq.each(policy.conditions, function(oldCondIdx, oldCondObj) {\n                qq.each(oldCondObj, function(oldCondName, oldCondVal) {\n                    if (oldCondName === qq.s3.util.SESSION_TOKEN_PARAM_NAME) {\n                        oldCondObj[oldCondName] = newSessionToken;\n                        sessionTokenFound = true;\n                    }\n                });\n            });\n\n            if (!sessionTokenFound) {\n                policy.conditions.push({});\n                policy.conditions[policy.conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = newSessionToken;\n            }\n        },\n\n        /**\n         * Generates all parameters to be passed along with the S3 upload request.  This includes invoking a callback\n         * that is expected to asynchronously retrieve a signature for the policy document.  Note that the server\n         * signing the request should reject a \"tainted\" policy document that includes unexpected values, since it is\n         * still possible for a malicious user to tamper with these values during policy document generation,\n         * before it is sent to the server for signing.\n         *\n         * @param spec Object with properties: `params`, `type`, `key`, `accessKey`, `acl`, `expectedStatus`, `successRedirectUrl`,\n         * `reducedRedundancy`, `region`, `serverSideEncryption`, `version`, and `log()`, along with any options associated with `qq.s3.util.getPolicy()`.\n         * @returns {qq.Promise} Promise that will be fulfilled once all parameters have been determined.\n         */\n        generateAwsParams: function(spec, signPolicyCallback) {\n            var awsParams = {},\n                customParams = spec.params,\n                promise = new qq.Promise(),\n                sessionToken = spec.sessionToken,\n                drift = spec.clockDrift,\n                type = spec.type,\n                key = spec.key,\n                accessKey = spec.accessKey,\n                acl = spec.acl,\n                expectedStatus = spec.expectedStatus,\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\n                reducedRedundancy = spec.reducedRedundancy,\n                region = spec.region,\n                serverSideEncryption = spec.serverSideEncryption,\n                signatureVersion = spec.signatureVersion,\n                now = new Date(),\n                log = spec.log,\n                policyJson;\n\n            spec.date = now;\n            policyJson = qq.s3.util.getPolicy(spec);\n\n            awsParams.key = key;\n\n            if (type) {\n                awsParams[\"Content-Type\"] = type;\n            }\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            if (expectedStatus) {\n                awsParams.success_action_status = expectedStatus;\n            }\n\n            if (successRedirectUrl) {\n                awsParams.success_action_redirect = successRedirectUrl;\n            }\n            // jscs:enable\n            if (reducedRedundancy) {\n                awsParams[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n            }\n\n            if (serverSideEncryption) {\n                awsParams[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n            }\n\n            if (sessionToken) {\n                awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n            }\n\n            awsParams.acl = acl;\n\n            // Custom (user-supplied) params must be prefixed with the value of `qq.s3.util.AWS_PARAM_PREFIX`.\n            // Params such as Cache-Control or Content-Disposition will not be prefixed.\n            // Prefixed param values will be URI encoded as well.\n            qq.each(customParams, function(name, val) {\n                var awsParamName = qq.s3.util._getPrefixedParamName(name);\n\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\n                    awsParams[awsParamName] = val;\n                }\n                else {\n                    awsParams[awsParamName] = encodeURIComponent(val);\n                }\n            });\n\n            if (signatureVersion === 2) {\n                awsParams.AWSAccessKeyId = accessKey;\n            }\n            else if (signatureVersion === 4) {\n                awsParams[qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\n                awsParams[qq.s3.util.CREDENTIAL_PARAM_NAME] = qq.s3.util.getV4CredentialsString({date: now, key: accessKey, region: region});\n                awsParams[qq.s3.util.DATE_PARAM_NAME] = qq.s3.util.getV4PolicyDate(now, drift);\n            }\n\n            // Invoke a promissory callback that should provide us with a base64-encoded policy doc and an\n            // HMAC signature for the policy doc.\n            signPolicyCallback(policyJson).then(\n                function(policyAndSignature, updatedAccessKey, updatedSessionToken) {\n                    awsParams.policy = policyAndSignature.policy;\n\n                    if (spec.signatureVersion === 2) {\n                        awsParams.signature = policyAndSignature.signature;\n\n                        if (updatedAccessKey) {\n                            awsParams.AWSAccessKeyId = updatedAccessKey;\n                        }\n                    }\n                    else if (spec.signatureVersion === 4) {\n                        awsParams[qq.s3.util.V4_SIGNATURE_PARAM_NAME] = policyAndSignature.signature;\n                    }\n\n                    if (updatedSessionToken) {\n                        awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\n                    }\n\n                    promise.success(awsParams);\n                },\n                function(errorMessage) {\n                    errorMessage = errorMessage || \"Can't continue further with request to S3 as we did not receive \" +\n                                                   \"a valid signature and policy from the server.\";\n\n                    log(\"Policy signing failed.  \" + errorMessage, \"error\");\n                    promise.failure(errorMessage);\n                }\n            );\n\n            return promise;\n        },\n\n        /**\n         * Add a condition to an existing S3 upload request policy document used to ensure AWS enforces any size\n         * restrictions placed on files server-side.  This is important to do, in case users mess with the client-side\n         * checks already in place.\n         *\n         * @param policy Policy document as an `Object`, with a `conditions` property already attached\n         * @param minSize Minimum acceptable size, in bytes\n         * @param maxSize Maximum acceptable size, in bytes (0 = unlimited)\n         */\n        enforceSizeLimits: function(policy, minSize, maxSize) {\n            var adjustedMinSize = minSize < 0 ? 0 : minSize,\n                // Adjust a maxSize of 0 to the largest possible integer, since we must specify a high and a low in the request\n                adjustedMaxSize = maxSize <= 0 ? 9007199254740992 : maxSize;\n\n            if (minSize > 0 || maxSize > 0) {\n                policy.conditions.push([\"content-length-range\", adjustedMinSize.toString(), adjustedMaxSize.toString()]);\n            }\n        },\n\n        getPolicyExpirationDate: function(date, drift) {\n            var adjustedDate = new Date(date.getTime() + drift);\n            return qq.s3.util.getPolicyDate(adjustedDate, 5);\n        },\n\n        getCredentialsDate: function(date) {\n            return date.getUTCFullYear() + \"\" +\n                (\"0\" + (date.getUTCMonth() + 1)).slice(-2) +\n                (\"0\" + date.getUTCDate()).slice(-2);\n        },\n\n        getPolicyDate: function(date, _minutesToAdd_) {\n            var minutesToAdd = _minutesToAdd_ || 0,\n                pad, r;\n\n            /*jshint -W014 */\n            // Is this going to be a problem if we encounter this moments before 2 AM just before daylight savings time ends?\n            date.setMinutes(date.getMinutes() + (minutesToAdd || 0));\n\n            if (Date.prototype.toISOString) {\n                return date.toISOString();\n            }\n            else {\n                pad = function(number) {\n                    r = String(number);\n\n                    if (r.length === 1) {\n                        r = \"0\" + r;\n                    }\n\n                    return r;\n                };\n\n                return date.getUTCFullYear()\n                    + \"-\" + pad(date.getUTCMonth() + 1)\n                    + \"-\" + pad(date.getUTCDate())\n                    + \"T\" + pad(date.getUTCHours())\n                    + \":\" + pad(date.getUTCMinutes())\n                    + \":\" + pad(date.getUTCSeconds())\n                    + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\n                    + \"Z\";\n            }\n        },\n\n        /**\n         * Looks at a response from S3 contained in an iframe and parses the query string in an attempt to identify\n         * the associated resource.\n         *\n         * @param iframe Iframe containing response\n         * @returns {{bucket: *, key: *, etag: *}}\n         */\n        parseIframeResponse: function(iframe) {\n            var doc = iframe.contentDocument || iframe.contentWindow.document,\n                queryString = doc.location.search,\n                match = /bucket=(.+)&key=(.+)&etag=(.+)/.exec(queryString);\n\n            if (match) {\n                return {\n                    bucket: match[1],\n                    key: match[2],\n                    etag: match[3].replace(/%22/g, \"\")\n                };\n            }\n        },\n\n        /**\n         * @param successRedirectUrl Relative or absolute location of success redirect page\n         * @returns {*|string} undefined if the parameter is undefined, otherwise the absolute location of the success redirect page\n         */\n        getSuccessRedirectAbsoluteUrl: function(successRedirectUrl) {\n            if (successRedirectUrl) {\n                var targetAnchorContainer = document.createElement(\"div\"),\n                    targetAnchor;\n\n                if (qq.ie7()) {\n                    // Note that we must make use of `innerHTML` for IE7 only instead of simply creating an anchor via\n                    // `document.createElement('a')` and setting the `href` attribute.  The latter approach does not allow us to\n                    // obtain an absolute URL in IE7 if the `endpoint` is a relative URL.\n                    targetAnchorContainer.innerHTML = \"<a href='\" + successRedirectUrl + \"'></a>\";\n                    targetAnchor = targetAnchorContainer.firstChild;\n                    return targetAnchor.href;\n                }\n                else {\n                    // IE8 and IE9 do not seem to derive an absolute URL from a relative URL using the `innerHTML`\n                    // approach above, so we'll just create an anchor this way and set it's `href` attribute.\n                    // Due to yet another quirk in IE8 and IE9, we have to set the `href` equal to itself\n                    // in order to ensure relative URLs will be properly parsed.\n                    targetAnchor = document.createElement(\"a\");\n                    targetAnchor.href = successRedirectUrl;\n                    targetAnchor.href = targetAnchor.href;\n                    return targetAnchor.href;\n                }\n            }\n        },\n\n        getV4CredentialsString: function(spec) {\n            return spec.key + \"/\" +\n                qq.s3.util.getCredentialsDate(spec.date) + \"/\" +\n                spec.region + \"/s3/aws4_request\";\n        },\n\n        getV4PolicyDate: function(date, drift) {\n            var adjustedDate = new Date(date.getTime() + drift);\n\n            return qq.s3.util.getCredentialsDate(adjustedDate) + \"T\" +\n                    (\"0\" + adjustedDate.getUTCHours()).slice(-2) +\n                    (\"0\" + adjustedDate.getUTCMinutes()).slice(-2) +\n                    (\"0\" + adjustedDate.getUTCSeconds()).slice(-2) +\n                    \"Z\";\n        },\n\n        // AWS employs a strict interpretation of [RFC 3986](http://tools.ietf.org/html/rfc3986#page-12).\n        // So, we must ensure all reserved characters listed in the spec are percent-encoded,\n        // and spaces are replaced with \"+\".\n        encodeQueryStringParam: function(param) {\n            var percentEncoded = encodeURIComponent(param);\n\n            // %-encode characters not handled by `encodeURIComponent` (to follow RFC 3986)\n            percentEncoded = percentEncoded.replace(/[!'()]/g, escape);\n\n            // %-encode characters not handled by `escape` (to follow RFC 3986)\n            percentEncoded = percentEncoded.replace(/\\*/g, \"%2A\");\n\n            // replace percent-encoded spaces with a \"+\"\n            return percentEncoded.replace(/%20/g, \"+\");\n        },\n        /**\n         * Escapes url part as for AWS requirements\n         * AWS uriEscapePath function pulled from aws-sdk-js licensed under Apache 2.0 - http://github.com/aws/aws-sdk-js\n         */\n        uriEscape: function(string) {\n            var output = encodeURIComponent(string);\n            output = output.replace(/[^A-Za-z0-9_.~\\-%]+/g, escape);\n            output = output.replace(/[*]/g, function(ch) {\n                return \"%\" + ch.charCodeAt(0).toString(16).toUpperCase();\n            });\n            return output;\n        },\n        /**\n         * Escapes a path as for AWS requirement\n         * AWS uriEscapePath function pulled from aws-sdk-js licensed under Apache 2.0 - http://github.com/aws/aws-sdk-js\n         */\n        uriEscapePath: function(path) {\n            var parts = [];\n            qq.each(path.split(\"/\"), function(idx, item) {\n                parts.push(qq.s3.util.uriEscape(item));\n            });\n            return parts.join(\"/\");\n        }\n    };\n}());\n","/*globals qq*/\n/**\n * Defines the public API for non-traditional FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.nonTraditionalBasePublicApi = {\n        setUploadSuccessParams: function(params, id) {\n            this._uploadSuccessParamsStore.set(params, id);\n        },\n        setUploadSuccessEndpoint: function(endpoint, id) {\n            this._uploadSuccessEndpointStore.set(endpoint, id);\n        }\n    };\n\n    qq.nonTraditionalBasePrivateApi = {\n        /**\n         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).\n         * This will hold up the call to the `onComplete` callback until we have determined success of the upload\n         * according to the local server, if a `successEndpoint` has been defined by the integrator.\n         *\n         * @param id ID of the completed upload\n         * @param name Name of the associated item\n         * @param result Object created from the server's parsed JSON response.\n         * @param xhr Associated XmlHttpRequest, if this was used to send the request.\n         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`\n         * if we need to ask the server.\n         * @private\n         */\n        _onComplete: function(id, name, result, xhr) {\n            var success = result.success ? true : false,\n                self = this,\n                onCompleteArgs = arguments,\n                successEndpoint = this._uploadSuccessEndpointStore.get(id),\n                successCustomHeaders = this._options.uploadSuccess.customHeaders,\n                successMethod = this._options.uploadSuccess.method,\n                cors = this._options.cors,\n                promise = new qq.Promise(),\n                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),\n                fileParams = this._paramsStore.get(id),\n\n                // If we are waiting for confirmation from the local server, and have received it,\n                // include properties from the local server response in the `response` parameter\n                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and\n                // fulfill the associated promise.\n                onSuccessFromServer = function(successRequestResult) {\n                    delete self._failedSuccessRequestCallbacks[id];\n                    qq.extend(result, successRequestResult);\n                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                    promise.success(successRequestResult);\n                },\n\n                // If the upload success request fails, attempt to re-send the success request (via the core retry code).\n                // The entire upload may be restarted if the server returns a \"reset\" property with a value of true as well.\n                onFailureFromServer = function(successRequestResult) {\n                    var callback = submitSuccessRequest;\n\n                    qq.extend(result, successRequestResult);\n\n                    if (result && result.reset) {\n                        callback = null;\n                    }\n\n                    if (!callback) {\n                        delete self._failedSuccessRequestCallbacks[id];\n                    }\n                    else {\n                        self._failedSuccessRequestCallbacks[id] = callback;\n                    }\n\n                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {\n                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                        promise.failure(successRequestResult);\n                    }\n                },\n                submitSuccessRequest,\n                successAjaxRequester;\n\n            // Ask the local server if the file sent is ok.\n            if (success && successEndpoint) {\n                successAjaxRequester = new qq.UploadSuccessAjaxRequester({\n                    endpoint: successEndpoint,\n                    method: successMethod,\n                    customHeaders: successCustomHeaders,\n                    cors: cors,\n                    log: qq.bind(this.log, this)\n                });\n\n                // combine custom params and default params\n                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);\n\n                // include any params associated with the file\n                fileParams && qq.extend(uploadSuccessParams, fileParams, true);\n\n                submitSuccessRequest = qq.bind(function() {\n                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)\n                        .then(onSuccessFromServer, onFailureFromServer);\n                }, self);\n\n                submitSuccessRequest();\n\n                return promise;\n            }\n\n            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.\n            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);\n        },\n\n        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.\n        _manualRetry: function(id) {\n            var successRequestCallback = this._failedSuccessRequestCallbacks[id];\n\n            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to S3.\n * Some inherited options and API methods have a special meaning in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploaderBasic = function(o) {\n        var options = {\n            request: {\n                // public key (required for server-side signing, ignored if `credentials` have been provided)\n                accessKey: null,\n\n                // padding, in milliseconds, to add to the x-amz-date header & the policy expiration date\n                clockDrift: 0\n            },\n\n            objectProperties: {\n                acl: \"private\",\n\n                // string or a function which may be promissory\n                bucket: qq.bind(function(id) {\n                    return qq.s3.util.getBucket(this.getEndpoint(id));\n                }, this),\n\n                // string or a function which may be promissory - only used for V4 multipart uploads\n                host: qq.bind(function(id) {\n                    return (/(?:http|https):\\/\\/(.+)(?:\\/.+)?/).exec(this._endpointStore.get(id))[1];\n                }, this),\n\n                // 'uuid', 'filename', or a function which may be promissory\n                key: \"uuid\",\n\n                reducedRedundancy: false,\n\n                // Defined at http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\n                region: \"us-east-1\",\n\n                serverSideEncryption: false\n            },\n\n            credentials: {\n                // Public key (required).\n                accessKey: null,\n                // Private key (required).\n                secretKey: null,\n                // Expiration date for the credentials (required).  May be an ISO string or a `Date`.\n                expiration: null,\n                // Temporary credentials session token.\n                // Only required for temporary credentials obtained via AssumeRoleWithWebIdentity.\n                sessionToken: null\n            },\n\n            // All but `version` are ignored if `credentials` is provided.\n            signature: {\n                customHeaders: {},\n                endpoint: null,\n                version: 2\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            // required if non-File-API browsers, such as IE9 and older, are used\n            iframeSupport: {\n                localBlankPagePath: null\n            },\n\n            chunking: {\n                // minimum part size is 5 MiB when uploading to S3\n                partSize: 5242880\n            },\n\n            cors: {\n                allowXdr: true\n            },\n\n            callbacks: {\n                onCredentialsExpired: function() {}\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        if (!this.setCredentials(options.credentials, true)) {\n            this._currentCredentials.accessKey = options.request.accessKey;\n        }\n\n        this._aclStore = this._createStore(options.objectProperties.acl);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds S3 keys for file representations constructed from a session request.\n        this._cannedKeys = {};\n        // Holds S3 buckets for file representations constructed from a session request.\n        this._cannedBuckets = {};\n\n        this._buckets = {};\n        this._hosts = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, {\n        getBucket: function(id) {\n            if (this._cannedBuckets[id] == null) {\n                return this._buckets[id];\n            }\n            return this._cannedBuckets[id];\n        },\n\n        /**\n         * @param id File ID\n         * @returns {*} Key name associated w/ the file, if one exists\n         */\n        getKey: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedKeys[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n\n            return this._cannedKeys[id];\n        },\n\n        /**\n         * Override the parent's reset function to cleanup various S3-related items.\n         */\n        reset: function() {\n            qq.FineUploaderBasic.prototype.reset.call(this);\n            this._failedSuccessRequestCallbacks = [];\n            this._buckets = {};\n            this._hosts = {};\n        },\n\n        setCredentials: function(credentials, ignoreEmpty) {\n            if (credentials && credentials.secretKey) {\n                if (!credentials.accessKey) {\n                    throw new qq.Error(\"Invalid credentials: no accessKey\");\n                }\n                else if (!credentials.expiration) {\n                    throw new qq.Error(\"Invalid credentials: no expiration\");\n                }\n                else {\n                    this._currentCredentials = qq.extend({}, credentials);\n\n                    // Ensure expiration is a `Date`.  If initially a string, assuming it is in ISO format.\n                    if (qq.isString(credentials.expiration)) {\n                        this._currentCredentials.expiration = new Date(credentials.expiration);\n                    }\n                }\n\n                return true;\n            }\n            else if (!ignoreEmpty) {\n                throw new qq.Error(\"Invalid credentials parameter!\");\n            }\n            else {\n                this._currentCredentials = {};\n            }\n        },\n\n        setAcl: function(acl, id) {\n            this._aclStore.set(acl, id);\n        },\n\n        /**\n         * Ensures the parent's upload handler creator passes any additional S3-specific options to the handler as well\n         * as information required to instantiate the specific handler based on the current browser's capabilities.\n         *\n         * @returns {qq.UploadHandlerController}\n         * @private\n         */\n        _createUploadHandler: function() {\n            var self = this,\n                additionalOptions = {\n                    aclStore: this._aclStore,\n                    getBucket: qq.bind(this._determineBucket, this),\n                    getHost: qq.bind(this._determineHost, this),\n                    getKeyName: qq.bind(this._determineKeyName, this),\n                    iframeSupport: this._options.iframeSupport,\n                    objectProperties: this._options.objectProperties,\n                    signature: this._options.signature,\n                    clockDrift: this._options.request.clockDrift,\n                    // pass size limit validation values to include in the request so AWS enforces this server-side\n                    validation: {\n                        minSizeLimit: this._options.validation.minSizeLimit,\n                        maxSizeLimit: this._options.validation.sizeLimit\n                    }\n                };\n\n            // We assume HTTP if it is missing from the start of the endpoint string.\n            qq.override(this._endpointStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var endpoint = super_.get(id);\n\n                        if (endpoint.indexOf(\"http\") < 0) {\n                            return \"http://\" + endpoint;\n                        }\n\n                        return endpoint;\n                    }\n                };\n            });\n\n            // Some param names should be lower case to avoid signature mismatches\n            qq.override(this._paramsStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var oldParams = super_.get(id),\n                            modifiedParams = {};\n\n                        qq.each(oldParams, function(name, val) {\n                            var paramName = name;\n\n                            if (qq.indexOf(qq.s3.util.CASE_SENSITIVE_PARAM_NAMES, paramName) < 0) {\n                                paramName = paramName.toLowerCase();\n                            }\n\n                            modifiedParams[paramName] = qq.isFunction(val) ? val() : val;\n                        });\n\n                        return modifiedParams;\n                    }\n                };\n            });\n\n            additionalOptions.signature.credentialsProvider = {\n                get: function() {\n                    return self._currentCredentials;\n                },\n\n                onExpired: function() {\n                    var updateCredentials = new qq.Promise(),\n                        callbackRetVal = self._options.callbacks.onCredentialsExpired();\n\n                    if (qq.isGenericPromise(callbackRetVal)) {\n                        callbackRetVal.then(function(credentials) {\n                            try {\n                                self.setCredentials(credentials);\n                                updateCredentials.success();\n                            }\n                            catch (error) {\n                                self.log(\"Invalid credentials returned from onCredentialsExpired callback! (\" + error.message + \")\", \"error\");\n                                updateCredentials.failure(\"onCredentialsExpired did not return valid credentials.\");\n                            }\n                        }, function(errorMsg) {\n                            self.log(\"onCredentialsExpired callback indicated failure! (\" + errorMsg + \")\", \"error\");\n                            updateCredentials.failure(\"onCredentialsExpired callback failed.\");\n                        });\n                    }\n                    else {\n                        self.log(\"onCredentialsExpired callback did not return a promise!\", \"error\");\n                        updateCredentials.failure(\"Unexpected return value for onCredentialsExpired.\");\n                    }\n\n                    return updateCredentials;\n                }\n            };\n\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this, additionalOptions, \"s3\");\n        },\n\n        _determineObjectPropertyValue: function(id, property) {\n            var maybe = this._options.objectProperties[property],\n                promise = new qq.Promise(),\n                self = this;\n\n            if (qq.isFunction(maybe)) {\n                maybe = maybe(id);\n                if (qq.isGenericPromise(maybe)) {\n                    promise = maybe;\n                }\n                else {\n                    promise.success(maybe);\n                }\n            }\n            else if (qq.isString(maybe)) {\n                promise.success(maybe);\n            }\n\n            promise.then(\n                function success(value) {\n                    self[\"_\" + property + \"s\"][id] = value;\n                },\n\n                function failure(errorMsg) {\n                    qq.log(\"Problem determining \" + property + \" for ID \" + id + \" (\" + errorMsg + \")\", \"error\");\n                }\n            );\n\n            return promise;\n        },\n\n        _determineBucket: function(id) {\n            return this._determineObjectPropertyValue(id, \"bucket\");\n        },\n\n        _determineHost: function(id) {\n            return this._determineObjectPropertyValue(id, \"host\");\n        },\n\n        /**\n         * Determine the file's key name and passes it to the caller via a promissory callback.  This also may\n         * delegate to an integrator-defined function that determines the file's key name on demand,\n         * which also may be promissory.\n         *\n         * @param id ID of the file\n         * @param filename Name of the file\n         * @returns {qq.Promise} A promise that will be fulfilled when the key name has been determined (and will be passed to the caller via the success callback).\n         * @private\n         */\n        _determineKeyName: function(id, filename) {\n            /*jshint -W015*/\n            var promise = new qq.Promise(),\n                keynameLogic = this._options.objectProperties.key,\n                extension = qq.getExtension(filename),\n                onGetKeynameFailure = promise.failure,\n                onGetKeynameSuccess = function(keyname, extension) {\n                    var keynameToUse = keyname;\n\n                    if (extension !== undefined) {\n                        keynameToUse += \".\" + extension;\n                    }\n\n                    promise.success(keynameToUse);\n                };\n\n            switch (keynameLogic) {\n                case \"uuid\":\n                    onGetKeynameSuccess(this.getUuid(id), extension);\n                    break;\n                case \"filename\":\n                    onGetKeynameSuccess(filename);\n                    break;\n                default:\n                    if (qq.isFunction(keynameLogic)) {\n                        this._handleKeynameFunction(keynameLogic, id, onGetKeynameSuccess, onGetKeynameFailure);\n                    }\n                    else {\n                        this.log(keynameLogic + \" is not a valid value for the s3.keyname option!\", \"error\");\n                        onGetKeynameFailure();\n                    }\n            }\n\n            return promise;\n        },\n\n        /**\n         * Called by the internal onUpload handler if the integrator has supplied a function to determine\n         * the file's key name.  The integrator's function may be promissory.  We also need to fulfill\n         * the promise contract associated with the caller as well.\n         *\n         * @param keynameFunc Integrator-supplied function that must be executed to determine the key name.  May be promissory.\n         * @param id ID of the associated file\n         * @param successCallback Invoke this if key name retrieval is successful, passing in the key name.\n         * @param failureCallback Invoke this if key name retrieval was unsuccessful.\n         * @private\n         */\n        _handleKeynameFunction: function(keynameFunc, id, successCallback, failureCallback) {\n            var self = this,\n                onSuccess = function(keyname) {\n                    successCallback(keyname);\n                },\n                onFailure = function(reason) {\n                    self.log(qq.format(\"Failed to retrieve key name for {}.  Reason: {}\", id, reason || \"null\"), \"error\");\n                    failureCallback(reason);\n                },\n                keyname = keynameFunc.call(this, id);\n\n            if (qq.isGenericPromise(keyname)) {\n                keyname.then(onSuccess, onFailure);\n            }\n            /*jshint -W116*/\n            else if (keyname == null) {\n                onFailure();\n            }\n            else {\n                onSuccess(keyname);\n            }\n        },\n\n        _getEndpointSpecificParams: function(id, response, maybeXhr) {\n            var params = {\n                key: this.getKey(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                bucket: this.getBucket(id)\n            };\n\n            if (maybeXhr && maybeXhr.getResponseHeader(\"ETag\")) {\n                params.etag = maybeXhr.getResponseHeader(\"ETag\");\n            }\n            else if (response.etag) {\n                params.etag = response.etag;\n            }\n\n            return params;\n        },\n\n        // Hooks into the base internal `_onSubmitDelete` to add key and bucket params to the delete file request.\n        _onSubmitDelete: function(id, onSuccessCallback) {\n            var additionalMandatedParams = {\n                key: this.getKey(id),\n                bucket: this.getBucket(id)\n            };\n\n            return qq.FineUploaderBasic.prototype._onSubmitDelete.call(this, id, onSuccessCallback, additionalMandatedParams);\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.s3Key == null) {\n                throw new qq.Error(\"Did not find s3Key property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedKeys[id] = sessionData.s3Key;\n                this._cannedBuckets[id] = sessionData.s3Bucket;\n            }\n\n            return id;\n        }\n    });\n}());\n","/* globals qq, CryptoJS */\n\n// IE 10 does not support Uint8ClampedArray. We don't need it, but CryptoJS attempts to reference it\n// inside a conditional via an instanceof check, which breaks S3 v4 signatures for chunked uploads.\nif (!window.Uint8ClampedArray) {\n    window.Uint8ClampedArray = function() {};\n}\n/**\n * Handles signature determination for HTML Form Upload requests and Multipart Uploader requests (via the S3 REST API).\n *\n * If the S3 requests are to be signed server side, this module will send a POST request to the server in an attempt\n * to solicit signatures for various S3-related requests.  This module also parses the response and attempts\n * to determine if the effort was successful.\n *\n * If the S3 requests are to be signed client-side, without the help of a server, this module will utilize CryptoJS to\n * sign the requests directly in the browser and send them off to S3.\n *\n * @param o Options associated with all such requests\n * @returns {{getSignature: Function}} API method used to initiate the signature request.\n * @constructor\n */\nqq.s3.RequestSigner = function(o) {\n    \"use strict\";\n\n    var requester,\n        thisSignatureRequester = this,\n        pendingSignatures = {},\n        options = {\n            expectingPolicy: false,\n            method: \"POST\",\n            signatureSpec: {\n                drift: 0,\n                credentialsProvider: {},\n                endpoint: null,\n                customHeaders: {},\n                version: 2\n            },\n            maxConnections: 3,\n            endpointStore: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        },\n        credentialsProvider,\n\n        generateHeaders = function(signatureConstructor, signature, promise) {\n            var headers = signatureConstructor.getHeaders();\n\n            if (options.signatureSpec.version === 4) {\n                headers.Authorization = qq.s3.util.V4_ALGORITHM_PARAM_VALUE +\n                    \" Credential=\" + options.signatureSpec.credentialsProvider.get().accessKey + \"/\" +\n                    qq.s3.util.getCredentialsDate(signatureConstructor.getRequestDate()) + \"/\" +\n                    options.signatureSpec.region + \"/\" +\n                    \"s3/aws4_request,\" +\n                    \"SignedHeaders=\" + signatureConstructor.getSignedHeaders() + \",\" +\n                    \"Signature=\" + signature;\n            }\n            else {\n                headers.Authorization = \"AWS \" + options.signatureSpec.credentialsProvider.get().accessKey + \":\" + signature;\n            }\n\n            promise.success(headers, signatureConstructor.getEndOfUrl());\n        },\n\n        v2 = {\n            getStringToSign: function(signatureSpec) {\n                return qq.format(\"{}\\n{}\\n{}\\n\\n{}/{}/{}\",\n                    signatureSpec.method,\n                    signatureSpec.contentMd5 || \"\",\n                    signatureSpec.contentType || \"\",\n                    signatureSpec.headersStr || \"\\n\",\n                    signatureSpec.bucket,\n                    signatureSpec.endOfUrl);\n            },\n\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\n                var headersWordArray = qq.CryptoJS.enc.Utf8.parse(headersStr),\n                    headersHmacSha1 = qq.CryptoJS.HmacSHA1(headersWordArray, credentialsProvider.get().secretKey),\n                    headersHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(headersHmacSha1);\n\n                generateHeaders(signatureConstructor, headersHmacSha1Base64, signatureEffort);\n            },\n\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n                var policyStr = JSON.stringify(policy),\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\n                    policyHmacSha1 = qq.CryptoJS.HmacSHA1(base64Policy, credentialsProvider.get().secretKey),\n                    policyHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(policyHmacSha1);\n\n                signatureEffort.success({\n                    policy: base64Policy,\n                    signature: policyHmacSha1Base64\n                }, updatedAccessKey, updatedSessionToken);\n            }\n        },\n\n        v4 = {\n            getCanonicalQueryString: function(endOfUri) {\n                var queryParamIdx = endOfUri.indexOf(\"?\"),\n                    canonicalQueryString = \"\",\n                    encodedQueryParams, encodedQueryParamNames, queryStrings;\n\n                if (queryParamIdx >= 0) {\n                    encodedQueryParams = {};\n                    queryStrings = endOfUri.substr(queryParamIdx + 1).split(\"&\");\n\n                    qq.each(queryStrings, function(idx, queryString) {\n                        var nameAndVal = queryString.split(\"=\"),\n                            paramVal = nameAndVal[1];\n\n                        if (paramVal == null) {\n                            paramVal = \"\";\n                        }\n\n                        encodedQueryParams[encodeURIComponent(nameAndVal[0])] = encodeURIComponent(paramVal);\n                    });\n\n                    encodedQueryParamNames = Object.keys(encodedQueryParams).sort();\n                    encodedQueryParamNames.forEach(function(encodedQueryParamName, idx) {\n                        canonicalQueryString += encodedQueryParamName + \"=\" + encodedQueryParams[encodedQueryParamName];\n                        if (idx < encodedQueryParamNames.length - 1) {\n                            canonicalQueryString += \"&\";\n                        }\n                    });\n                }\n\n                return canonicalQueryString;\n            },\n\n            getCanonicalRequest: function(signatureSpec) {\n                return qq.format(\"{}\\n{}\\n{}\\n{}\\n{}\\n{}\",\n                    signatureSpec.method,\n                    v4.getCanonicalUri(signatureSpec.endOfUrl),\n                    v4.getCanonicalQueryString(signatureSpec.endOfUrl),\n                    signatureSpec.headersStr || \"\\n\",\n                    v4.getSignedHeaders(signatureSpec.headerNames),\n                    signatureSpec.hashedContent);\n            },\n\n            getCanonicalUri: function(endOfUri) {\n                var path = endOfUri,\n                    queryParamIdx = endOfUri.indexOf(\"?\");\n\n                if (queryParamIdx > 0) {\n                    path = endOfUri.substr(0, queryParamIdx);\n                }\n                return \"/\" + path;\n            },\n\n            getEncodedHashedPayload: function(body) {\n                var promise = new qq.Promise(),\n                    reader;\n\n                if (qq.isBlob(body)) {\n                    // TODO hash blob in webworker if this becomes a notable perf issue\n                    reader = new FileReader();\n                    reader.onloadend = function(e) {\n                        if (e.target.readyState === FileReader.DONE) {\n                            if (e.target.error) {\n                                promise.failure(e.target.error);\n                            }\n                            else {\n                                var wordArray = qq.CryptoJS.lib.WordArray.create(e.target.result);\n                                promise.success(qq.CryptoJS.SHA256(wordArray).toString());\n                            }\n                        }\n                    };\n                    reader.readAsArrayBuffer(body);\n                }\n                else {\n                    body = body || \"\";\n                    promise.success(qq.CryptoJS.SHA256(body).toString());\n                }\n\n                return promise;\n            },\n\n            getScope: function(date, region) {\n                return qq.s3.util.getCredentialsDate(date) + \"/\" +\n                    region + \"/s3/aws4_request\";\n            },\n\n            getStringToSign: function(signatureSpec) {\n                var canonicalRequest = v4.getCanonicalRequest(signatureSpec),\n                    date = qq.s3.util.getV4PolicyDate(signatureSpec.date, signatureSpec.drift),\n                    hashedRequest = qq.CryptoJS.SHA256(canonicalRequest).toString(),\n                    scope = v4.getScope(signatureSpec.date, options.signatureSpec.region),\n                    stringToSignTemplate = \"AWS4-HMAC-SHA256\\n{}\\n{}\\n{}\";\n\n                return {\n                    hashed: qq.format(stringToSignTemplate, date, scope, hashedRequest),\n                    raw: qq.format(stringToSignTemplate, date, scope, canonicalRequest)\n                };\n            },\n\n            getSignedHeaders: function(headerNames) {\n                var signedHeaders = \"\";\n\n                headerNames.forEach(function(headerName, idx) {\n                    signedHeaders += headerName.toLowerCase();\n\n                    if (idx < headerNames.length - 1) {\n                        signedHeaders += \";\";\n                    }\n                });\n\n                return signedHeaders;\n            },\n\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\n                var secretKey = credentialsProvider.get().secretKey,\n                    headersPattern = /.+\\n.+\\n(\\d+)\\/(.+)\\/s3\\/.+\\n(.+)/,\n                    matches = headersPattern.exec(headersStr),\n                    dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\n\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\n\n                generateHeaders(signatureConstructor, qq.CryptoJS.HmacSHA256(headersStr, signingKey), signatureEffort);\n            },\n\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n                var policyStr = JSON.stringify(policy),\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\n                    secretKey = credentialsProvider.get().secretKey,\n                    credentialPattern = /.+\\/(.+)\\/(.+)\\/s3\\/aws4_request/,\n                    credentialCondition = (function() {\n                        var credential = null;\n                        qq.each(policy.conditions, function(key, condition) {\n                            var val = condition[\"x-amz-credential\"];\n                            if (val) {\n                                credential = val;\n                                return false;\n                            }\n                        });\n                        return credential;\n                    }()),\n                    matches, dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\n\n                matches = credentialPattern.exec(credentialCondition);\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\n\n                signatureEffort.success({\n                    policy: base64Policy,\n                    signature: qq.CryptoJS.HmacSHA256(base64Policy, signingKey).toString()\n                }, updatedAccessKey, updatedSessionToken);\n            }\n        };\n\n    qq.extend(options, o, true);\n    credentialsProvider = options.signatureSpec.credentialsProvider;\n\n    function handleSignatureReceived(id, xhrOrXdr, isError) {\n        var responseJson = xhrOrXdr.responseText,\n            pendingSignatureData = pendingSignatures[id],\n            promise = pendingSignatureData.promise,\n            signatureConstructor = pendingSignatureData.signatureConstructor,\n            errorMessage, response;\n\n        delete pendingSignatures[id];\n\n        // Attempt to parse what we would expect to be a JSON response\n        if (responseJson) {\n            try {\n                response = qq.parseJson(responseJson);\n            }\n            catch (error) {\n                options.log(\"Error attempting to parse signature response: \" + error, \"error\");\n            }\n        }\n\n        // If the response is parsable and contains an `error` property, use it as the error message\n        if (response && response.error) {\n            isError = true;\n            errorMessage = response.error;\n        }\n        // If we have received a parsable response, and it has an `invalid` property,\n        // the policy document or request headers may have been tampered with client-side.\n        else if (response && response.invalid) {\n            isError = true;\n            errorMessage = \"Invalid policy document or request headers!\";\n        }\n        // Make sure the response contains policy & signature properties\n        else if (response) {\n            if (options.expectingPolicy && !response.policy) {\n                isError = true;\n                errorMessage = \"Response does not include the base64 encoded policy!\";\n            }\n            else if (!response.signature) {\n                isError = true;\n                errorMessage = \"Response does not include the signature!\";\n            }\n        }\n        // Something unknown went wrong\n        else {\n            isError = true;\n            errorMessage = \"Received an empty or invalid response from the server!\";\n        }\n\n        if (isError) {\n            if (errorMessage) {\n                options.log(errorMessage, \"error\");\n            }\n\n            promise.failure(errorMessage);\n        }\n        else if (signatureConstructor) {\n            generateHeaders(signatureConstructor, response.signature, promise);\n        }\n        else {\n            promise.success(response);\n        }\n    }\n\n    function getStringToSignArtifacts(id, version, requestInfo) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            headerNames = [],\n            headersStr = \"\",\n            now = new Date(),\n            endOfUrl, signatureSpec, toSign,\n\n            generateStringToSign = function(requestInfo) {\n                var contentMd5,\n                    headerIndexesToRemove = [];\n\n                qq.each(requestInfo.headers, function(name) {\n                    headerNames.push(name);\n                });\n                headerNames.sort();\n\n                qq.each(headerNames, function(idx, headerName) {\n                    if (qq.indexOf(qq.s3.util.UNSIGNABLE_REST_HEADER_NAMES, headerName) < 0) {\n                        headersStr += headerName.toLowerCase() + \":\" + requestInfo.headers[headerName].trim() + \"\\n\";\n                    }\n                    else if (headerName === \"Content-MD5\") {\n                        contentMd5 = requestInfo.headers[headerName];\n                    }\n                    else {\n                        headerIndexesToRemove.unshift(idx);\n                    }\n                });\n\n                qq.each(headerIndexesToRemove, function(idx, headerIdx) {\n                    headerNames.splice(headerIdx, 1);\n                });\n\n                signatureSpec = {\n                    bucket: requestInfo.bucket,\n                    contentMd5: contentMd5,\n                    contentType: requestInfo.contentType,\n                    date: now,\n                    drift: options.signatureSpec.drift,\n                    endOfUrl: endOfUrl,\n                    hashedContent: requestInfo.hashedContent,\n                    headerNames: headerNames,\n                    headersStr: headersStr,\n                    method: method\n                };\n\n                toSign = version === 2 ? v2.getStringToSign(signatureSpec) : v4.getStringToSign(signatureSpec);\n\n                return {\n                    date: now,\n                    endOfUrl: endOfUrl,\n                    signedHeaders: version === 4 ? v4.getSignedHeaders(signatureSpec.headerNames) : null,\n                    toSign: version === 4 ? toSign.hashed : toSign,\n                    toSignRaw: version === 4 ? toSign.raw : toSign\n                };\n            };\n\n        /*jshint indent:false */\n        switch (requestInfo.type) {\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_ABORT:\n                method = \"DELETE\";\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_INITIATE:\n                endOfUrl = \"uploads\";\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_COMPLETE:\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_UPLOAD:\n                method = \"PUT\";\n                endOfUrl = qq.format(\"partNumber={}&uploadId={}\", requestInfo.partNum, requestInfo.uploadId);\n                break;\n        }\n\n        endOfUrl = requestInfo.key + \"?\" + endOfUrl;\n\n        if (version === 4) {\n            v4.getEncodedHashedPayload(requestInfo.content).then(function(hashedContent) {\n                requestInfo.headers[\"x-amz-content-sha256\"] = hashedContent;\n                requestInfo.headers.Host = requestInfo.host;\n                requestInfo.headers[\"x-amz-date\"] = qq.s3.util.getV4PolicyDate(now, options.signatureSpec.drift);\n                requestInfo.hashedContent = hashedContent;\n\n                promise.success(generateStringToSign(requestInfo));\n            }, function (err) {\n                promise.failure(err);\n            });\n        }\n        else {\n            promise.success(generateStringToSign(requestInfo));\n        }\n\n        return promise;\n    }\n\n    function determineSignatureClientSide(id, toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken) {\n        var updatedHeaders;\n\n        // REST API request\n        if (toBeSigned.signatureConstructor) {\n            if (updatedSessionToken) {\n                updatedHeaders = toBeSigned.signatureConstructor.getHeaders();\n                updatedHeaders[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\n                toBeSigned.signatureConstructor.withHeaders(updatedHeaders);\n            }\n\n            toBeSigned.signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\n                signApiRequest(toBeSigned.signatureConstructor, signatureArtifacts.stringToSign, signatureEffort);\n            }, function (err) {\n                signatureEffort.failure(err);\n            });\n        }\n        // Form upload (w/ policy document)\n        else {\n            updatedSessionToken && qq.s3.util.refreshPolicyCredentials(toBeSigned, updatedSessionToken);\n            signPolicy(toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n    }\n\n    function signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n        if (options.signatureSpec.version === 4) {\n            v4.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n        else {\n            v2.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n    }\n\n    function signApiRequest(signatureConstructor, headersStr, signatureEffort) {\n        if (options.signatureSpec.version === 4) {\n            v4.signApiRequest(signatureConstructor, headersStr, signatureEffort);\n        }\n        else {\n            v2.signApiRequest(signatureConstructor, headersStr, signatureEffort);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        contentType: \"application/json; charset=utf-8\",\n        endpointStore: {\n            get: function() {\n                return options.signatureSpec.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.signatureSpec.customHeaders,\n        log: options.log,\n        onComplete: handleSignatureReceived,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * On success, an object containing the parsed JSON response will be passed into the success handler if the\n         * request succeeds.  Otherwise an error message will be passed into the failure method.\n         *\n         * @param id File ID.\n         * @param toBeSigned an Object that holds the item(s) to be signed\n         * @returns {qq.Promise} A promise that is fulfilled when the response has been received.\n         */\n        getSignature: function(id, toBeSigned) {\n            var params = toBeSigned,\n                signatureConstructor = toBeSigned.signatureConstructor,\n                signatureEffort = new qq.Promise(),\n                queryParams;\n\n            if (options.signatureSpec.version === 4) {\n                queryParams = {v4: true};\n            }\n\n            if (credentialsProvider.get().secretKey && qq.CryptoJS) {\n                if (credentialsProvider.get().expiration.getTime() > Date.now()) {\n                    determineSignatureClientSide(id, toBeSigned, signatureEffort);\n                }\n                // If credentials are expired, ask for new ones before attempting to sign request\n                else {\n                    credentialsProvider.onExpired().then(function() {\n                        determineSignatureClientSide(id, toBeSigned,\n                            signatureEffort,\n                            credentialsProvider.get().accessKey,\n                            credentialsProvider.get().sessionToken);\n                    }, function(errorMsg) {\n                        options.log(\"Attempt to update expired credentials apparently failed! Unable to sign request.  \", \"error\");\n                        signatureEffort.failure(\"Unable to sign request - expired credentials.\");\n                    });\n                }\n            }\n            else {\n                options.log(\"Submitting S3 signature request for \" + id);\n\n                if (signatureConstructor) {\n                    signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\n                        params = {headers: signatureArtifacts.stringToSignRaw};\n                        requester.initTransport(id)\n                            .withParams(params)\n                            .withQueryParams(queryParams)\n                            .send();\n                    }, function (err) {\n                        options.log(\"Failed to construct signature. \", \"error\");\n                        signatureEffort.failure(\"Failed to construct signature.\");\n                    });\n                }\n                else {\n                    requester.initTransport(id)\n                        .withParams(params)\n                        .withQueryParams(queryParams)\n                        .send();\n                }\n\n                pendingSignatures[id] = {\n                    promise: signatureEffort,\n                    signatureConstructor: signatureConstructor\n                };\n            }\n\n            return signatureEffort;\n        },\n\n        constructStringToSign: function(type, bucket, host, key) {\n            var headers = {},\n                uploadId, content, contentType, partNum, artifacts;\n\n            return {\n                withHeaders: function(theHeaders) {\n                    headers = theHeaders;\n                    return this;\n                },\n\n                withUploadId: function(theUploadId) {\n                    uploadId = theUploadId;\n                    return this;\n                },\n\n                withContent: function(theContent) {\n                    content = theContent;\n                    return this;\n                },\n\n                withContentType: function(theContentType) {\n                    contentType = theContentType;\n                    return this;\n                },\n\n                withPartNum: function(thePartNum) {\n                    partNum = thePartNum;\n                    return this;\n                },\n\n                getToSign: function(id) {\n                    var sessionToken = credentialsProvider.get().sessionToken,\n                        promise = new qq.Promise(),\n                        adjustedDate = new Date(Date.now() + options.signatureSpec.drift);\n\n                    headers[\"x-amz-date\"] = adjustedDate.toUTCString();\n\n                    if (sessionToken) {\n                        headers[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n                    }\n\n                    getStringToSignArtifacts(id, options.signatureSpec.version, {\n                        bucket: bucket,\n                        content: content,\n                        contentType: contentType,\n                        headers: headers,\n                        host: host,\n                        key: key,\n                        partNum: partNum,\n                        type: type,\n                        uploadId: uploadId\n                    }).then(function(_artifacts_) {\n                        artifacts = _artifacts_;\n                        promise.success({\n                            headers: (function() {\n                                if (contentType) {\n                                    headers[\"Content-Type\"] = contentType;\n                                }\n\n                                delete headers.Host; // we don't want this to be set on the XHR-initiated request\n                                return headers;\n                            }()),\n                            date: artifacts.date,\n                            endOfUrl: artifacts.endOfUrl,\n                            signedHeaders: artifacts.signedHeaders,\n                            stringToSign: artifacts.toSign,\n                            stringToSignRaw: artifacts.toSignRaw\n                        });\n                    }, function (err) {\n                        promise.failure(err);\n                    });\n\n                    return promise;\n                },\n\n                getHeaders: function() {\n                    return qq.extend({}, headers);\n                },\n\n                getEndOfUrl: function() {\n                    return artifacts && artifacts.endOfUrl;\n                },\n\n                getRequestDate: function() {\n                    return artifacts && artifacts.date;\n                },\n\n                getSignedHeaders: function() {\n                    return artifacts && artifacts.signedHeaders;\n                }\n            };\n        }\n    });\n};\n\nqq.s3.RequestSigner.prototype.REQUEST_TYPE = {\n    MULTIPART_INITIATE: \"multipart_initiate\",\n    MULTIPART_COMPLETE: \"multipart_complete\",\n    MULTIPART_ABORT: \"multipart_abort\",\n    MULTIPART_UPLOAD: \"multipart_upload\"\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success\n * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`\n * property (by default) in an \"application/json\" response.\n *\n * @param o Options associated with all requests.\n * @constructor\n */\nqq.UploadSuccessAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingRequests = [],\n        options = {\n            method: \"POST\",\n            endpoint: null,\n            maxConnections: 3,\n            customHeaders: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    function handleSuccessResponse(id, xhrOrXdr, isError) {\n        var promise = pendingRequests[id],\n            responseJson = xhrOrXdr.responseText,\n            successIndicator = {success: true},\n            failureIndicator = {success: false},\n            parsedResponse;\n\n        delete pendingRequests[id];\n\n        options.log(qq.format(\"Received the following response body to an upload success request for id {}: {}\", id, responseJson));\n\n        try {\n            parsedResponse = qq.parseJson(responseJson);\n\n            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties\n            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,\n            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the\n            // response body for an \"error\" response.\n            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {\n                options.log(\"Upload success request was rejected by the server.\", \"error\");\n                promise.failure(qq.extend(parsedResponse, failureIndicator));\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(qq.extend(parsedResponse, successIndicator));\n            }\n        }\n        catch (error) {\n            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.\n            if (isError) {\n                options.log(qq.format(\"Your server indicated failure in its upload success request response for id {}!\", id), \"error\");\n                promise.failure(failureIndicator);\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(successIndicator);\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: handleSuccessResponse,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.\n         *\n         * @param id ID of the associated file\n         * @param spec `Object` with the properties that correspond to important values that we want to\n         * send to the server with this request.\n         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed\n         * payload of the response will be passed into the `failure` or `success` promise method.\n         */\n        sendSuccessRequest: function(id, spec) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting upload success request/notification for \" + id);\n\n            requester.initTransport(id)\n                .withParams(spec)\n                .send();\n\n            pendingRequests[id] = promise;\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Initiate Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadInitiate.html)\n * request to S3 via the REST API.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.s3.InitiateMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingInitiateRequests = {},\n        options = {\n            filenameParam: \"qqfilename\",\n            method: \"POST\",\n            endpointStore: null,\n            paramsStore: null,\n            signatureSpec: null,\n            aclStore: null,\n            reducedRedundancy: false,\n            serverSideEncryption: false,\n            maxConnections: 3,\n            getContentType: function(id) {},\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            getName: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Determine all headers for the \"Initiate MPU\" request, including the \"Authorization\" header, which must be determined\n     * by the local server.  This is a promissory function.  If the server responds with a signature, the headers\n     * (including the Authorization header) will be passed into the success method of the promise.  Otherwise, the failure\n     * method on the promise will be called.\n     *\n     * @param id Associated file ID\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id) {\n        var bucket = options.getBucket(id),\n            host = options.getHost(id),\n            headers = {},\n            promise = new qq.Promise(),\n            key = options.getKey(id),\n            signatureConstructor;\n\n        headers[\"x-amz-acl\"] = options.aclStore.get(id);\n\n        if (options.reducedRedundancy) {\n            headers[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n        }\n\n        if (options.serverSideEncryption) {\n            headers[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n        }\n\n        headers[qq.s3.util.AWS_PARAM_PREFIX + options.filenameParam] = encodeURIComponent(options.getName(id));\n\n        qq.each(options.paramsStore.get(id), function(name, val) {\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\n                headers[name] = val;\n            }\n            else {\n                headers[qq.s3.util.AWS_PARAM_PREFIX + name] = encodeURIComponent(val);\n            }\n        });\n\n        signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n            (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_INITIATE, bucket, host, key)\n            .withContentType(options.getContentType(id))\n            .withHeaders(headers);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Initiate MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleInitiateRequestComplete(id, xhr, isError) {\n        var promise = pendingInitiateRequests[id],\n            domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            uploadIdElements, messageElements, uploadId, errorMessage, status;\n\n        delete pendingInitiateRequests[id];\n\n        // The base ajax requester may declare the request to be a failure based on status code.\n        if (isError) {\n            status = xhr.status;\n\n            messageElements = responseDoc.getElementsByTagName(\"Message\");\n            if (messageElements.length > 0) {\n                errorMessage = messageElements[0].textContent;\n            }\n        }\n        // If the base ajax requester has not declared this a failure, make sure we can retrieve the uploadId from the response.\n        else {\n            uploadIdElements = responseDoc.getElementsByTagName(\"UploadId\");\n            if (uploadIdElements.length > 0) {\n                uploadId = uploadIdElements[0].textContent;\n            }\n            else {\n                errorMessage = \"Upload ID missing from request\";\n            }\n        }\n\n        // Either fail the promise (passing a descriptive error message) or declare it a success (passing the upload ID)\n        if (uploadId === undefined) {\n            if (errorMessage) {\n                options.log(qq.format(\"Specific problem detected initiating multipart upload request for {}: '{}'.\", id, errorMessage), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Unexplained error with initiate multipart upload request for {}.  Status code {}.\", id, status), \"error\");\n            }\n\n            promise.failure(\"Problem initiating upload request.\", xhr);\n        }\n        else {\n            options.log(qq.format(\"Initiate multipart upload request successful for {}.  Upload ID is {}\", id, uploadId));\n            promise.success(uploadId, xhr);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleInitiateRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Initiate MPU\" request to AWS via the REST API.  First, though, we must get a signature from the\n         * local server for the request.  If all is successful, the uploadId from AWS will be passed into the promise's\n         * success handler. Otherwise, an error message will ultimately be passed into the failure method.\n         *\n         * @param id The ID associated with the file\n         * @returns {qq.Promise}\n         */\n        send: function(id) {\n            var promise = new qq.Promise();\n\n            getHeaders(id).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 initiate multipart upload request for \" + id);\n\n                pendingInitiateRequests[id] = promise;\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Complete Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadComplete.html)\n * request to S3 via the REST API.\n *\n * @param o Options passed by the creator, to overwrite any default option values.\n * @constructor\n */\nqq.s3.CompleteMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingCompleteRequests = {},\n        options = {\n            method: \"POST\",\n            contentType: \"text/xml\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Complete\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId, body) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_COMPLETE, bucket, host, options.getKey(id))\n                .withUploadId(uploadId)\n                .withContent(body)\n                .withContentType(\"application/xml; charset=UTF-8\");\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Complete MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleCompleteRequestComplete(id, xhr, isError) {\n        var promise = pendingCompleteRequests[id],\n            domParser = new DOMParser(),\n            bucket = options.getBucket(id),\n            key = options.getKey(id),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            bucketEls = responseDoc.getElementsByTagName(\"Bucket\"),\n            keyEls = responseDoc.getElementsByTagName(\"Key\");\n\n        delete pendingCompleteRequests[id];\n\n        options.log(qq.format(\"Complete response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Complete Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (bucketEls.length && keyEls.length) {\n                if (bucketEls[0].textContent !== bucket) {\n                    isError = true;\n                    options.log(qq.format(\"Wrong bucket in response to Complete Multipart Upload request for {}.\", id), \"error\");\n                }\n\n                // TODO Compare key name from response w/ expected key name if AWS ever fixes the encoding of key names in this response.\n            }\n            else {\n                isError = true;\n                options.log(qq.format(\"Missing bucket and/or key in response to Complete Multipart Upload request for {}.\", id), \"error\");\n            }\n        }\n\n        if (isError) {\n            promise.failure(\"Problem combining the file parts!\", xhr);\n        }\n        else {\n            promise.success({}, xhr);\n        }\n    }\n\n    /**\n     * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n     * @returns {string} XML string containing the body to send with the \"Complete\" request\n     */\n    function getCompleteRequestBody(etagEntries) {\n        var doc = document.implementation.createDocument(null, \"CompleteMultipartUpload\", null);\n\n        // The entries MUST be sorted by part number, per the AWS API spec.\n        etagEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(etagEntries, function(idx, etagEntry) {\n            var part = etagEntry.part,\n                etag = etagEntry.etag,\n                partEl = doc.createElement(\"Part\"),\n                partNumEl = doc.createElement(\"PartNumber\"),\n                partNumTextEl = doc.createTextNode(part),\n                etagTextEl = doc.createTextNode(etag),\n                etagEl = doc.createElement(\"ETag\");\n\n            etagEl.appendChild(etagTextEl);\n            partNumEl.appendChild(partNumTextEl);\n            partEl.appendChild(partNumEl);\n            partEl.appendChild(etagEl);\n            qq(doc).children()[0].appendChild(partEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: \"application/xml; charset=UTF-8\",\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleCompleteRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Complete\" request and fulfills the returned promise when the success of this request is known.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n         * @returns {qq.Promise}\n         */\n        send: function(id, uploadId, etagEntries) {\n            var promise = new qq.Promise(),\n                body = getCompleteRequestBody(etagEntries);\n\n            getHeaders(id, uploadId, body).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 complete multipart upload request for \" + id);\n\n                pendingCompleteRequests[id] = promise;\n                delete headers[\"Content-Type\"];\n\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .withPayload(body)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Ajax requester used to send an [\"Abort Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadAbort.html)\n * request to S3 via the REST API.\n\n * @param o\n * @constructor\n */\nqq.s3.AbortMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Abort\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @param id Associated file ID\n     * @param uploadId ID of the associated upload, according to AWS\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_ABORT, bucket, host, options.getKey(id))\n                .withUploadId(uploadId);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Abort MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleAbortRequestComplete(id, xhr, isError) {\n        var domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            errorEls = responseDoc.getElementsByTagName(\"Error\"),\n            awsErrorMsg;\n\n        options.log(qq.format(\"Abort response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Abort Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (errorEls.length) {\n                isError = true;\n                awsErrorMsg = responseDoc.getElementsByTagName(\"Message\")[0].textContent;\n                options.log(qq.format(\"Failed to Abort Multipart Upload request for {}.  Error: {}\", id, awsErrorMsg), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Abort MPU request succeeded for file ID {}.\", id));\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [\"DELETE\"],\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleAbortRequestComplete,\n        successfulResponseCodes: {\n            DELETE: [204]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Abort\" request.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         */\n        send: function(id, uploadId) {\n            getHeaders(id, uploadId).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 Abort multipart upload request for \" + id);\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            });\n        }\n    });\n};\n","/*globals qq */\n/**\n * Upload handler used by the upload to S3 module that depends on File API support, and, therefore, makes use of\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to S3 buckets via the associated AWS API.\n *\n * If chunking is supported and enabled, the S3 Multipart Upload REST API is utilized.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.s3.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var getName = proxy.getName,\n        log = proxy.log,\n        clockDrift = spec.clockDrift,\n        expectedStatus = 200,\n        onGetBucket = spec.getBucket,\n        onGetHost = spec.getHost,\n        onGetKeyName = spec.getKeyName,\n        filenameParam = spec.filenameParam,\n        paramsStore = spec.paramsStore,\n        endpointStore = spec.endpointStore,\n        aclStore = spec.aclStore,\n        reducedRedundancy = spec.objectProperties.reducedRedundancy,\n        region = spec.objectProperties.region,\n        serverSideEncryption = spec.objectProperties.serverSideEncryption,\n        validation = spec.validation,\n        signature = qq.extend({region: region, drift: clockDrift}, spec.signature),\n        handler = this,\n        credentialsProvider = spec.signature.credentialsProvider,\n\n        chunked = {\n            // Sends a \"Complete Multipart Upload\" request and then signals completion of the upload\n            // when the response to this request has been parsed.\n            combine: function(id) {\n                var uploadId = handler._getPersistableData(id).uploadId,\n                    etagMap = handler._getPersistableData(id).etags,\n                    result = new qq.Promise();\n\n                requesters.completeMultipart.send(id, uploadId, etagMap).then(\n                    result.success,\n\n                    function failure(reason, xhr) {\n                        result.failure(upload.done(id, xhr).response, xhr);\n                    }\n                );\n\n                return result;\n            },\n\n            // The last step in handling a chunked upload.  This is called after each chunk has been sent.\n            // The request may be successful, or not.  If it was successful, we must extract the \"ETag\" element\n            // in the XML response and store that along with the associated part number.\n            // We need these items to \"Complete\" the multipart upload after all chunks have been successfully sent.\n            done: function(id, xhr, chunkIdx) {\n                var response = upload.response.parse(id, xhr),\n                    etag;\n\n                if (response.success) {\n                    etag = xhr.getResponseHeader(\"ETag\");\n\n                    if (!handler._getPersistableData(id).etags) {\n                        handler._getPersistableData(id).etags = [];\n                    }\n                    handler._getPersistableData(id).etags.push({part: chunkIdx + 1, etag: etag});\n                }\n            },\n\n            /**\n             * Determines headers that must be attached to the chunked (Multipart Upload) request.  One of these headers is an\n             * Authorization value, which must be determined by asking the local server to sign the request first.  So, this\n             * function returns a promise.  Once all headers are determined, the `success` method of the promise is called with\n             * the headers object.  If there was some problem determining the headers, we delegate to the caller's `failure`\n             * callback.\n             *\n             * @param id File ID\n             * @param chunkIdx Index of the chunk to PUT\n             * @returns {qq.Promise}\n             */\n            initHeaders: function(id, chunkIdx, blob) {\n                var headers = {},\n                    bucket = upload.bucket.getName(id),\n                    host = upload.host.getName(id),\n                    key = upload.key.urlSafe(id),\n                    promise = new qq.Promise(),\n                    signatureConstructor = requesters.restSignature.constructStringToSign\n                        (requesters.restSignature.REQUEST_TYPE.MULTIPART_UPLOAD, bucket, host, key)\n                        .withPartNum(chunkIdx + 1)\n                        .withContent(blob)\n                        .withUploadId(handler._getPersistableData(id).uploadId);\n\n                // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n                requesters.restSignature.getSignature(id + \".\" + chunkIdx, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n                return promise;\n            },\n\n            put: function(id, chunkIdx) {\n                var xhr = handler._createXhr(id, chunkIdx),\n                    chunkData = handler._getChunkData(id, chunkIdx),\n                    domain = spec.endpointStore.get(id),\n                    promise = new qq.Promise();\n\n                // Add appropriate headers to the multipart upload request.\n                // Once these have been determined (asynchronously) attach the headers and send the chunk.\n                chunked.initHeaders(id, chunkIdx, chunkData.blob).then(function(headers, endOfUrl) {\n                    if (xhr._cancelled) {\n                        log(qq.format(\"Upload of item {}.{} cancelled. Upload will not start after successful signature request.\", id, chunkIdx));\n                        promise.failure({error: \"Chunk upload cancelled\"});\n                    }\n                    else {\n                        var url = domain + \"/\" + endOfUrl;\n                        handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n                        upload.track(id, xhr, chunkIdx).then(promise.success, promise.failure);\n                        xhr.open(\"PUT\", url, true);\n\n                        var hasContentType = false;\n                        qq.each(headers, function(name, val) {\n                            if (name === \"Content-Type\") {\n                                hasContentType = true;\n                            }\n\n                            xhr.setRequestHeader(name, val);\n                        });\n\n                        // Workaround for IE Edge\n                        if (!hasContentType) {\n                            xhr.setRequestHeader(\"Content-Type\", \"\");\n                        }\n\n                        xhr.send(chunkData.blob);\n                    }\n                }, function() {\n                    promise.failure({error: \"Problem signing the chunk!\"}, xhr);\n                });\n\n                return promise;\n            },\n\n            send: function(id, chunkIdx) {\n                var promise = new qq.Promise();\n\n                chunked.setup(id).then(\n                    // The \"Initiate\" request succeeded.  We are ready to send the first chunk.\n                    function() {\n                        chunked.put(id, chunkIdx).then(promise.success, promise.failure);\n                    },\n\n                    // We were unable to initiate the chunked upload process.\n                    function(errorMessage, xhr) {\n                        promise.failure({error: errorMessage}, xhr);\n                    }\n                );\n\n                return promise;\n            },\n\n            /**\n             * Sends an \"Initiate Multipart Upload\" request to S3 via the REST API, but only if the MPU has not already been\n             * initiated.\n             *\n             * @param id Associated file ID\n             * @returns {qq.Promise} A promise that is fulfilled when the initiate request has been sent and the response has been parsed.\n             */\n            setup: function(id) {\n                var promise = new qq.Promise(),\n                    uploadId = handler._getPersistableData(id).uploadId,\n                    uploadIdPromise = new qq.Promise();\n\n                if (!uploadId) {\n                    handler._getPersistableData(id).uploadId = uploadIdPromise;\n                    requesters.initiateMultipart.send(id).then(\n                        function(uploadId) {\n                            handler._getPersistableData(id).uploadId = uploadId;\n                            uploadIdPromise.success(uploadId);\n                            promise.success(uploadId);\n                        },\n                        function(errorMsg, xhr) {\n                            handler._getPersistableData(id).uploadId = null;\n                            promise.failure(errorMsg, xhr);\n                            uploadIdPromise.failure(errorMsg, xhr);\n                        }\n                    );\n                }\n                else if (uploadId instanceof qq.Promise) {\n                    uploadId.then(function(uploadId) {\n                        promise.success(uploadId);\n                    });\n                }\n                else {\n                    promise.success(uploadId);\n                }\n\n                return promise;\n            }\n        },\n\n        requesters = {\n            abortMultipart: new qq.s3.AbortMultipartAjaxRequester({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log,\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                }\n            }),\n\n            completeMultipart: new qq.s3.CompleteMultipartAjaxRequester({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log,\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                }\n            }),\n\n            initiateMultipart: new qq.s3.InitiateMultipartAjaxRequester({\n                filenameParam: filenameParam,\n                endpointStore: endpointStore,\n                paramsStore: paramsStore,\n                signatureSpec: signature,\n                aclStore: aclStore,\n                reducedRedundancy: reducedRedundancy,\n                serverSideEncryption: serverSideEncryption,\n                cors: spec.cors,\n                log: log,\n                getContentType: function(id) {\n                    return handler._getMimeType(id);\n                },\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                },\n                getName: function(id) {\n                    return getName(id);\n                }\n            }),\n\n            policySignature: new qq.s3.RequestSigner({\n                expectingPolicy: true,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log\n            }),\n\n            restSignature: new qq.s3.RequestSigner({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log\n            })\n        },\n\n        simple = {\n            /**\n             * Used for simple (non-chunked) uploads to determine the parameters to send along with the request.  Part of this\n             * process involves asking the local server to sign the request, so this function returns a promise.  The promise\n             * is fulfilled when all parameters are determined, or when we determine that all parameters cannot be calculated\n             * due to some error.\n             *\n             * @param id File ID\n             * @returns {qq.Promise}\n             */\n            initParams: function(id) {\n                /*jshint -W040 */\n                var customParams = paramsStore.get(id);\n                customParams[filenameParam] = getName(id);\n\n                return qq.s3.util.generateAwsParams({\n                    endpoint: endpointStore.get(id),\n                    clockDrift: clockDrift,\n                    params: customParams,\n                    type: handler._getMimeType(id),\n                    bucket: upload.bucket.getName(id),\n                    key: handler.getThirdPartyFileId(id),\n                    accessKey: credentialsProvider.get().accessKey,\n                    sessionToken: credentialsProvider.get().sessionToken,\n                    acl: aclStore.get(id),\n                    expectedStatus: expectedStatus,\n                    minFileSize: validation.minSizeLimit,\n                    maxFileSize: validation.maxSizeLimit,\n                    reducedRedundancy: reducedRedundancy,\n                    region: region,\n                    serverSideEncryption: serverSideEncryption,\n                    signatureVersion: signature.version,\n                    log: log\n                },\n                qq.bind(requesters.policySignature.getSignature, this, id));\n            },\n\n            send: function(id) {\n                var promise = new qq.Promise(),\n                    xhr = handler._createXhr(id),\n                    fileOrBlob = handler.getFile(id);\n\n                handler._registerProgressHandler(id);\n                upload.track(id, xhr).then(promise.success, promise.failure);\n\n                // Delegate to a function the sets up the XHR request and notifies us when it is ready to be sent, along w/ the payload.\n                simple.setup(id, xhr, fileOrBlob).then(function(toSend) {\n                    log(\"Sending upload request for \" + id);\n                    xhr.send(toSend);\n                }, promise.failure);\n\n                return promise;\n            },\n\n            /**\n             * Starts the upload process by delegating to an async function that determine parameters to be attached to the\n             * request.  If all params can be determined, we are called back with the params and the caller of this function is\n             * informed by invoking the `success` method on the promise returned by this function, passing the payload of the\n             * request.  If some error occurs here, we delegate to a function that signals a failure for this upload attempt.\n             *\n             * Note that this is only used by the simple (non-chunked) upload process.\n             *\n             * @param id File ID\n             * @param xhr XMLHttpRequest to use for the upload\n             * @param fileOrBlob `File` or `Blob` to send\n             * @returns {qq.Promise}\n             */\n            setup: function(id, xhr, fileOrBlob) {\n                var formData = new FormData(),\n                    endpoint = endpointStore.get(id),\n                    url = endpoint,\n                    promise = new qq.Promise();\n\n                simple.initParams(id).then(\n                    // Success - all params determined\n                    function(awsParams) {\n                        xhr.open(\"POST\", url, true);\n\n                        qq.obj2FormData(awsParams, formData);\n\n                        // AWS requires the file field be named \"file\".\n                        formData.append(\"file\", fileOrBlob);\n\n                        promise.success(formData);\n                    },\n\n                    // Failure - we couldn't determine some params (likely the signature)\n                    function(errorMessage) {\n                        promise.failure({error: errorMessage});\n                    }\n                );\n\n                return promise;\n            }\n        },\n\n        upload = {\n            /**\n             * Note that this is called when an upload has reached a termination point,\n             * regardless of success/failure.  For example, it is called when we have\n             * encountered an error during the upload or when the file may have uploaded successfully.\n             *\n             * @param id file ID\n             */\n            bucket: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        cachedBucket = handler._getFileState(id).bucket;\n\n                    if (cachedBucket) {\n                        promise.success(cachedBucket);\n                    }\n                    else {\n                        onGetBucket(id).then(function(bucket) {\n                            handler._getFileState(id).bucket = bucket;\n                            promise.success(bucket);\n                        }, promise.failure);\n                    }\n\n                    return promise;\n                },\n\n                getName: function(id) {\n                    return handler._getFileState(id).bucket;\n                }\n            },\n\n            host: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        cachedHost = handler._getFileState(id).host;\n\n                    if (cachedHost) {\n                        promise.success(cachedHost);\n                    }\n                    else {\n                        onGetHost(id).then(function(host) {\n                            handler._getFileState(id).host = host;\n                            promise.success(host);\n                        }, promise.failure);\n                    }\n\n                    return promise;\n                },\n\n                getName: function(id) {\n                    return handler._getFileState(id).host;\n                }\n            },\n\n            done: function(id, xhr) {\n                var response = upload.response.parse(id, xhr),\n                    isError = response.success !== true;\n\n                if (isError && upload.response.shouldReset(response.code)) {\n                    log(\"This is an unrecoverable error, we must restart the upload entirely on the next retry attempt.\", \"error\");\n                    response.reset = true;\n                }\n\n                return {\n                    success: !isError,\n                    response: response\n                };\n            },\n\n            key: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        key = handler.getThirdPartyFileId(id);\n\n                    /* jshint eqnull:true */\n                    if (key == null) {\n                        handler._setThirdPartyFileId(id, promise);\n                        onGetKeyName(id, getName(id)).then(\n                            function(keyName) {\n                                handler._setThirdPartyFileId(id, keyName);\n                                promise.success(keyName);\n                            },\n                            function(errorReason) {\n                                handler._setThirdPartyFileId(id, null);\n                                promise.failure(errorReason);\n                            }\n                        );\n                    }\n                    else if (qq.isGenericPromise(key)) {\n                        key.then(promise.success, promise.failure);\n                    }\n                    else {\n                        promise.success(key);\n                    }\n\n                    return promise;\n                },\n\n                urlSafe: function(id) {\n                    var encodedKey = handler.getThirdPartyFileId(id);\n                    return qq.s3.util.uriEscapePath(encodedKey);\n                }\n            },\n\n            response: {\n                parse: function(id, xhr) {\n                    var response = {},\n                        parsedErrorProps;\n\n                    try {\n                        log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\n\n                        if (xhr.status === expectedStatus) {\n                            response.success = true;\n                        }\n                        else {\n                            parsedErrorProps = upload.response.parseError(xhr.responseText);\n\n                            if (parsedErrorProps) {\n                                response.error = parsedErrorProps.message;\n                                response.code = parsedErrorProps.code;\n                            }\n                        }\n                    }\n                    catch (error) {\n                        log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\n                    }\n\n                    return response;\n                },\n\n                /**\n                 * This parses an XML response by extracting the \"Message\" and \"Code\" elements that accompany AWS error responses.\n                 *\n                 * @param awsResponseXml XML response from AWS\n                 * @returns {object} Object w/ `code` and `message` properties, or undefined if we couldn't find error info in the XML document.\n                 */\n                parseError: function(awsResponseXml) {\n                    var parser = new DOMParser(),\n                        parsedDoc = parser.parseFromString(awsResponseXml, \"application/xml\"),\n                        errorEls = parsedDoc.getElementsByTagName(\"Error\"),\n                        errorDetails = {},\n                        codeEls, messageEls;\n\n                    if (errorEls.length) {\n                        codeEls = parsedDoc.getElementsByTagName(\"Code\");\n                        messageEls = parsedDoc.getElementsByTagName(\"Message\");\n\n                        if (messageEls.length) {\n                            errorDetails.message = messageEls[0].textContent;\n                        }\n\n                        if (codeEls.length) {\n                            errorDetails.code = codeEls[0].textContent;\n                        }\n\n                        return errorDetails;\n                    }\n                },\n\n                // Determine if the upload should be restarted on the next retry attempt\n                // based on the error code returned in the response from AWS.\n                shouldReset: function(errorCode) {\n                    /*jshint -W014 */\n                    return errorCode === \"EntityTooSmall\"\n                        || errorCode === \"InvalidPart\"\n                        || errorCode === \"InvalidPartOrder\"\n                        || errorCode === \"NoSuchUpload\";\n                }\n            },\n\n            start: function(params) {\n                var id = params.id;\n                var optChunkIdx = params.chunkIdx;\n\n                var promise = new qq.Promise();\n\n                upload.key.promise(id).then(function() {\n                    upload.bucket.promise(id).then(function() {\n                        upload.host.promise(id).then(function() {\n                            /* jshint eqnull:true */\n                            if (optChunkIdx == null) {\n                                simple.send(id).then(promise.success, promise.failure);\n                            }\n                            else {\n                                chunked.send(id, optChunkIdx).then(promise.success, promise.failure);\n                            }\n                        });\n                    });\n                },\n                function(errorReason) {\n                    promise.failure({error: errorReason});\n                });\n\n                return promise;\n            },\n\n            track: function(id, xhr, optChunkIdx) {\n                var promise = new qq.Promise();\n\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState === 4) {\n                        var result;\n\n                        /* jshint eqnull:true */\n                        if (optChunkIdx == null) {\n                            result = upload.done(id, xhr);\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\n                        }\n                        else {\n                            chunked.done(id, xhr, optChunkIdx);\n                            result = upload.done(id, xhr);\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\n                        }\n                    }\n                };\n\n                return promise;\n            }\n        };\n\n    qq.extend(this, {\n        uploadChunk: upload.start,\n        uploadFile: function(id) {\n            return upload.start({ id: id });\n        }\n    });\n\n    qq.extend(this, new qq.XhrUploadHandler({\n        options: qq.extend({namespace: \"s3\"}, spec),\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n    }));\n\n    qq.override(this, function(super_) {\n        return {\n            expunge: function(id) {\n                var uploadId = handler._getPersistableData(id) && handler._getPersistableData(id).uploadId,\n                    existedInLocalStorage = handler._maybeDeletePersistedChunkData(id);\n\n                if (uploadId !== undefined && existedInLocalStorage) {\n                    requesters.abortMultipart.send(id, uploadId);\n                }\n\n                super_.expunge(id);\n            },\n\n            finalizeChunks: function(id) {\n                return chunked.combine(id);\n            },\n\n            _getLocalStorageId: function(id) {\n                var baseStorageId = super_._getLocalStorageId(id),\n                    bucketName = upload.bucket.getName(id);\n\n                return baseStorageId + \"-\" + bucketName;\n            }\n        };\n    });\n};\n","/*globals qq */\n/**\n * Upload handler used by the upload to S3 module that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to S3 buckets via the associated\n * AWS API.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.s3.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        clockDrift = options.clockDrift,\n        onUuidChanged = proxy.onUuidChanged,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        onGetBucket = options.getBucket,\n        onGetKeyName = options.getKeyName,\n        filenameParam = options.filenameParam,\n        paramsStore = options.paramsStore,\n        endpointStore = options.endpointStore,\n        aclStore = options.aclStore,\n        reducedRedundancy = options.objectProperties.reducedRedundancy,\n        region = options.objectProperties.region,\n        serverSideEncryption = options.objectProperties.serverSideEncryption,\n        validation = options.validation,\n        signature = options.signature,\n        successRedirectUrl = options.iframeSupport.localBlankPagePath,\n        credentialsProvider = options.signature.credentialsProvider,\n        getSignatureAjaxRequester = new qq.s3.RequestSigner({\n            signatureSpec: signature,\n            cors: options.cors,\n            log: log\n        });\n\n    if (successRedirectUrl === undefined) {\n        throw new Error(\"successRedirectEndpoint MUST be defined if you intend to use browsers that do not support the File API!\");\n    }\n\n    /**\n     * Attempt to parse the contents of an iframe after receiving a response from the server.  If the contents cannot be\n     * read (perhaps due to a security error) it is safe to assume that the upload was not successful since Amazon should\n     * have redirected to a known endpoint that should provide a parseable response.\n     *\n     * @param id ID of the associated file\n     * @param iframe target of the form submit\n     * @returns {boolean} true if the contents can be read, false otherwise\n     */\n    function isValidResponse(id, iframe) {\n        var response,\n            endpoint = options.endpointStore.get(id),\n            bucket = handler._getFileState(id).bucket,\n            doc,\n            innerHtml,\n            responseData;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            responseData = qq.s3.util.parseIframeResponse(iframe);\n            if (responseData.bucket === bucket &&\n                responseData.key === qq.s3.util.encodeQueryStringParam(handler.getThirdPartyFileId(id))) {\n\n                return true;\n            }\n\n            log(\"Response from AWS included an unexpected bucket or key name.\", \"error\");\n\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n        }\n\n        return false;\n    }\n\n    function generateAwsParams(id) {\n        /*jshint -W040 */\n        var customParams = paramsStore.get(id);\n\n        customParams[filenameParam] = getName(id);\n\n        return qq.s3.util.generateAwsParams({\n            endpoint: endpointStore.get(id),\n            clockDrift: clockDrift,\n            params: customParams,\n            bucket: handler._getFileState(id).bucket,\n            key: handler.getThirdPartyFileId(id),\n            accessKey: credentialsProvider.get().accessKey,\n            sessionToken: credentialsProvider.get().sessionToken,\n            acl: aclStore.get(id),\n            minFileSize: validation.minSizeLimit,\n            maxFileSize: validation.maxSizeLimit,\n            successRedirectUrl: successRedirectUrl,\n            reducedRedundancy: reducedRedundancy,\n            region: region,\n            serverSideEncryption: serverSideEncryption,\n            signatureVersion: signature.version,\n            log: log\n        },\n        qq.bind(getSignatureAjaxRequester.getSignature, this, id));\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            endpoint = options.endpointStore.get(id),\n            fileName = getName(id);\n\n        generateAwsParams(id).then(function(params) {\n            var form = handler._initFormForUpload({\n                method: method,\n                endpoint: endpoint,\n                params: params,\n                paramsInBody: true,\n                targetName: iframe.name\n            });\n\n            promise.success(form);\n        }, function(errorMessage) {\n            promise.failure(errorMessage);\n            handleFinishedUpload(id, iframe, fileName, {error: errorMessage});\n        });\n\n        return promise;\n    }\n\n    function handleUpload(id) {\n        var iframe = handler._createIframe(id),\n            input = handler.getInput(id),\n            promise = new qq.Promise();\n\n        createForm(id, iframe).then(function(form) {\n            form.appendChild(input);\n\n            // Register a callback when the response comes in from S3\n            handler._attachLoadEvent(iframe, function(response) {\n                log(\"iframe loaded\");\n\n                // If the common response handler has determined success or failure immediately\n                if (response) {\n                    // If there is something fundamentally wrong with the response (such as iframe content is not accessible)\n                    if (response.success === false) {\n                        log(\"Amazon likely rejected the upload request\", \"error\");\n                        promise.failure(response);\n                    }\n                }\n                // The generic response (iframe onload) handler was not able to make a determination regarding the success of the request\n                else {\n                    response = {};\n                    response.success = isValidResponse(id, iframe);\n\n                    // If the more specific response handle detected a problem with the response from S3\n                    if (response.success === false) {\n                        log(\"A success response was received by Amazon, but it was invalid in some way.\", \"error\");\n                        promise.failure(response);\n                    }\n                    else {\n                        qq.extend(response, qq.s3.util.parseIframeResponse(iframe));\n                        promise.success(response);\n                    }\n                }\n\n                handleFinishedUpload(id, iframe);\n            });\n\n            log(\"Sending upload request for \" + id);\n            form.submit();\n            qq(form).remove();\n        }, promise.failure);\n\n        return promise;\n    }\n\n    function handleFinishedUpload(id, iframe) {\n        handler._detachLoadEvent(id);\n        iframe && qq(iframe).remove();\n    }\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: false,\n            inputName: \"file\"\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            onUuidChanged: onUuidChanged,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n\n    qq.extend(this, {\n        uploadFile: function(id) {\n            var name = getName(id),\n                promise = new qq.Promise();\n\n            if (handler.getThirdPartyFileId(id)) {\n                if (handler._getFileState(id).bucket) {\n                    handleUpload(id).then(promise.success, promise.failure);\n                }\n                else {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handleUpload(id).then(promise.success, promise.failure);\n                    });\n                }\n            }\n            else {\n                // The S3 uploader module will either calculate the key or ask the server for it\n                // and will call us back once it is known.\n                onGetKeyName(id, name).then(function(key) {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handler._setThirdPartyFileId(id, key);\n                        handleUpload(id).then(promise.success, promise.failure);\n                    }, function(errorReason) {\n                        promise.failure({error: errorReason});\n                    });\n                }, function(errorReason) {\n                    promise.failure({error: errorReason});\n                });\n            }\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n/**\n * This defines FineUploader mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader as well as code to handle uploads directly to S3.\n * This module inherits all logic from FineUploader mode and FineUploaderBasicS3 mode and adds some UI-related logic\n * specific to the upload-to-S3 workflow.  Some inherited options and API methods have a special meaning\n * in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploader = function(o) {\n        var options = {\n            failedUploadTextDisplay: {\n                mode: \"custom\"\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Inherit instance data from FineUploader, which should in turn inherit from s3.FineUploaderBasic.\n        qq.FineUploader.call(this, options, \"s3\");\n\n        if (!qq.supportedFeatures.ajaxUploading && options.iframeSupport.localBlankPagePath === undefined) {\n            this._options.element.innerHTML = \"<div>You MUST set the <code>localBlankPagePath</code> property \" +\n                \"of the <code>iframeSupport</code> option since this browser does not support the File API!</div>\";\n        }\n    };\n\n    // Inherit the API methods from FineUploaderBasicS3\n    qq.extend(qq.s3.FineUploader.prototype, qq.s3.FineUploaderBasic.prototype);\n\n    // Inherit public and private API methods related to UI\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPublicApi);\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPrivateApi);\n}());\n","/*globals qq */\nqq.azure = qq.azure || {};\nqq.azure.util = qq.azure.util || (function() {\n    \"use strict\";\n\n    return {\n        AZURE_PARAM_PREFIX: \"x-ms-meta-\",\n\n        /** Test if a request header is actually a known Azure parameter. See: https://msdn.microsoft.com/en-us/library/azure/dd179451.aspx\n         *\n         * @param name Name of the Request Header parameter.\n         * @returns {Boolean} Test result.\n         */\n        _paramNameMatchesAzureParameter: function(name) {\n            switch (name) {\n                case \"Cache-Control\":\n                case \"Content-Disposition\":\n                case \"Content-Encoding\":\n                case \"Content-MD5\":\n                case \"x-ms-blob-content-encoding\":\n                case \"x-ms-blob-content-disposition\":\n                case \"x-ms-blob-content-md5\":\n                case \"x-ms-blob-cache-control\":\n                    return true;\n                default:\n                    return false;\n            }\n        },\n\n        /** Create Prefixed request headers which are appropriate for Azure.\n         *\n         * If the request header is appropriate for Azure (e.g. Cache-Control) then it should be\n         * passed along without a metadata prefix. For all other request header parameter names,\n         * qq.azure.util.AZURE_PARAM_PREFIX should be prepended.\n         *\n         * @param name Name of the Request Header parameter to construct a (possibly) prefixed name.\n         * @returns {String} A valid Request Header parameter name.\n         */\n        _getPrefixedParamName: function(name) {\n            if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\n                return name;\n            }\n            else {\n                return qq.azure.util.AZURE_PARAM_PREFIX + name;\n            }\n        },\n\n        getParamsAsHeaders: function(params) {\n            var headers = {};\n\n            qq.each(params, function(name, val) {\n                var headerName = qq.azure.util._getPrefixedParamName(name),\n                    value = null;\n\n                if (qq.isFunction(val)) {\n                    value = String(val());\n                }\n                else if (qq.isObject(val)) {\n                    qq.extend(headers, qq.azure.util.getParamsAsHeaders(val));\n                }\n                else {\n                    value = String(val);\n                }\n\n                if (value !== null) {\n                    if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\n                        headers[headerName] = value;\n                    } else {\n                        headers[headerName] = encodeURIComponent(value);\n                    }\n                }\n            });\n\n            return headers;\n        },\n\n        parseAzureError: function(responseText, log) {\n            var domParser = new DOMParser(),\n                responseDoc = domParser.parseFromString(responseText, \"application/xml\"),\n                errorTag = responseDoc.getElementsByTagName(\"Error\")[0],\n                errorDetails = {},\n                codeTag, messageTag;\n\n            log(\"Received error response: \" + responseText, \"error\");\n\n            if (errorTag) {\n                messageTag = errorTag.getElementsByTagName(\"Message\")[0];\n                if (messageTag) {\n                    errorDetails.message = messageTag.textContent;\n                }\n\n                codeTag = errorTag.getElementsByTagName(\"Code\")[0];\n                if (codeTag) {\n                    errorDetails.code = codeTag.textContent;\n                }\n\n                log(\"Parsed Azure error: \" + JSON.stringify(errorDetails), \"error\");\n\n                return errorDetails;\n            }\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to Azure, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to Azure.\n * Some inherited options and API methods have a special meaning in the context of the Azure uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.azure.FineUploaderBasic = function(o) {\n        if (!qq.supportedFeatures.ajaxUploading) {\n            throw new qq.Error(\"Uploading directly to Azure is not possible in this browser.\");\n        }\n\n        var options = {\n            signature: {\n                endpoint: null,\n\n                customHeaders: {}\n            },\n\n            // 'uuid', 'filename', or a function which may be promissory\n            blobProperties: {\n                name: \"uuid\"\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            chunking: {\n                // If this is increased, Azure may respond with a 413\n                partSize: 4000000,\n                // Don't chunk files less than this size\n                minFileSize: 4000001\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds blob names for file representations constructed from a session request.\n        this._cannedBlobNames = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.azure.FineUploaderBasic.prototype, {\n        getBlobName: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedBlobNames[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n            return this._cannedBlobNames[id];\n        },\n\n        _getEndpointSpecificParams: function(id) {\n            return {\n                blob: this.getBlobName(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                container: this._endpointStore.get(id)\n            };\n        },\n\n        _createUploadHandler: function() {\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this,\n                {\n                    signature: this._options.signature,\n                    onGetBlobName: qq.bind(this._determineBlobName, this),\n                    deleteBlob: qq.bind(this._deleteBlob, this, true)\n                },\n                \"azure\");\n        },\n\n        _determineBlobName: function(id) {\n            var self = this,\n                blobNameOptionValue = this._options.blobProperties.name,\n                uuid = this.getUuid(id),\n                filename = this.getName(id),\n                fileExtension = qq.getExtension(filename),\n                blobNameToUse = uuid;\n\n            if (qq.isString(blobNameOptionValue)) {\n                switch (blobNameOptionValue) {\n                    case \"uuid\":\n                        if (fileExtension !== undefined) {\n                            blobNameToUse += \".\" + fileExtension;\n                        }\n                        return new qq.Promise().success(blobNameToUse);\n                    case \"filename\":\n                        return new qq.Promise().success(filename);\n                    default:\n                        return new qq.Promise.failure(\"Invalid blobName option value - \" + blobNameOptionValue);\n                }\n            }\n            else {\n                return blobNameOptionValue.call(this, id);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.blobName == null) {\n                throw new qq.Error(\"Did not find blob name property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedBlobNames[id] = sessionData.blobName;\n            }\n\n            return id;\n        },\n\n        _deleteBlob: function(relatedToCancel, id) {\n            var self = this,\n                deleteBlobSasUri = {},\n                blobUriStore = {\n                    get: function(id) {\n                        return self._endpointStore.get(id) + \"/\" + self.getBlobName(id);\n                    }\n                },\n                deleteFileEndpointStore = {\n                    get: function(id) {\n                        return deleteBlobSasUri[id];\n                    }\n                },\n                getSasSuccess = function(id, sasUri) {\n                    deleteBlobSasUri[id] = sasUri;\n                    deleteBlob.send(id);\n                },\n                getSasFailure = function(id, reason, xhr) {\n                    if (relatedToCancel) {\n                        self.log(\"Will cancel upload, but cannot remove uncommitted parts from Azure due to issue retrieving SAS\", \"error\");\n                        qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\n                    }\n                    else {\n                        self._onDeleteComplete(id, xhr, true);\n                        self._options.callbacks.onDeleteComplete(id, xhr, true);\n                    }\n                },\n                deleteBlob = new qq.azure.DeleteBlob({\n                    endpointStore: deleteFileEndpointStore,\n                    log: qq.bind(self.log, self),\n                    onDelete: function(id) {\n                        self._onDelete(id);\n                        self._options.callbacks.onDelete(id);\n                    },\n                    onDeleteComplete: function(id, xhrOrXdr, isError) {\n                        delete deleteBlobSasUri[id];\n\n                        if (isError) {\n                            if (relatedToCancel) {\n                                self.log(\"Will cancel upload, but failed to remove uncommitted parts from Azure.\", \"error\");\n                            }\n                            else {\n                                qq.azure.util.parseAzureError(xhrOrXdr.responseText, qq.bind(self.log, self));\n                            }\n                        }\n\n                        if (relatedToCancel) {\n                            qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\n                            self.log(\"Deleted uncommitted blob chunks for \" + id);\n                        }\n                        else {\n                            self._onDeleteComplete(id, xhrOrXdr, isError);\n                            self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                        }\n                    }\n                }),\n                getSas = new qq.azure.GetSas({\n                    cors: this._options.cors,\n                    customHeaders: this._options.signature.customHeaders,\n                    endpointStore: {\n                        get: function() {\n                            return self._options.signature.endpoint;\n                        }\n                    },\n                    restRequestVerb: deleteBlob.method,\n                    log: qq.bind(self.log, self)\n                });\n\n            getSas.request(id, blobUriStore.get(id)).then(\n                qq.bind(getSasSuccess, self, id),\n                qq.bind(getSasFailure, self, id));\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return {\n                sendDelete: function(id, uuid) {\n                    self._deleteBlob(false, id);\n                }\n            };\n        }\n    });\n}());\n","/*globals qq */\n/**\n * Upload handler used by the upload to Azure module that depends on File API support, and, therefore, makes use of\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to Azure Blob Storage containers via the\n * associated Azure API.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\n// TODO l18n for error messages returned to UI\nqq.azure.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        log = proxy.log,\n        cors = spec.cors,\n        endpointStore = spec.endpointStore,\n        paramsStore = spec.paramsStore,\n        signature = spec.signature,\n        filenameParam = spec.filenameParam,\n        minFileSizeForChunking = spec.chunking.minFileSize,\n        deleteBlob = spec.deleteBlob,\n        onGetBlobName = spec.onGetBlobName,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n\n        getBlobMetadata = function(id) {\n            var params = paramsStore.get(id);\n            params[filenameParam] = getName(id);\n            return params;\n        },\n\n        api = {\n            putBlob: new qq.azure.PutBlob({\n                getBlobMetadata: getBlobMetadata,\n                log: log\n            }),\n\n            putBlock: new qq.azure.PutBlock({\n                log: log\n            }),\n\n            putBlockList: new qq.azure.PutBlockList({\n                getBlobMetadata: getBlobMetadata,\n                log: log\n            }),\n\n            getSasForPutBlobOrBlock: new qq.azure.GetSas({\n                cors: cors,\n                customHeaders: signature.customHeaders,\n                endpointStore: {\n                    get: function() {\n                        return signature.endpoint;\n                    }\n                },\n                log: log,\n                restRequestVerb: \"PUT\"\n            })\n        };\n\n    function combineChunks(id) {\n        var promise = new qq.Promise();\n\n        getSignedUrl(id).then(function(sasUri) {\n            var mimeType = handler._getMimeType(id),\n                blockIdEntries = handler._getPersistableData(id).blockIdEntries;\n\n            api.putBlockList.send(id, sasUri, blockIdEntries, mimeType, function(xhr) {\n                handler._registerXhr(id, null, xhr, api.putBlockList);\n            })\n                .then(function(xhr) {\n                    log(\"Success combining chunks for id \" + id);\n                    promise.success({}, xhr);\n                }, function(xhr) {\n                    log(\"Attempt to combine chunks failed for id \" + id, \"error\");\n                    handleFailure(xhr, promise);\n                });\n\n        },\n        promise.failure);\n\n        return promise;\n    }\n\n    function determineBlobUrl(id) {\n        var containerUrl = endpointStore.get(id),\n            promise = new qq.Promise(),\n            getBlobNameSuccess = function(blobName) {\n                handler._setThirdPartyFileId(id, blobName);\n                promise.success(containerUrl + \"/\" + blobName);\n            },\n            getBlobNameFailure = function(reason) {\n                promise.failure(reason);\n            };\n\n        onGetBlobName(id).then(getBlobNameSuccess, getBlobNameFailure);\n\n        return promise;\n    }\n\n    function getSignedUrl(id, optChunkIdx) {\n        // We may have multiple SAS requests in progress for the same file, so we must include the chunk idx\n        // as part of the ID when communicating with the SAS ajax requester to avoid collisions.\n        var getSasId = optChunkIdx == null ? id : id + \".\" + optChunkIdx,\n\n            promise = new qq.Promise(),\n            getSasSuccess = function(sasUri) {\n                log(\"GET SAS request succeeded.\");\n                promise.success(sasUri);\n            },\n            getSasFailure = function(reason, getSasXhr) {\n                log(\"GET SAS request failed: \" + reason, \"error\");\n                promise.failure({error: \"Problem communicating with local server\"}, getSasXhr);\n            },\n            determineBlobUrlSuccess = function(blobUrl) {\n                api.getSasForPutBlobOrBlock.request(getSasId, blobUrl).then(\n                    getSasSuccess,\n                    getSasFailure\n                );\n            },\n            determineBlobUrlFailure = function(reason) {\n                log(qq.format(\"Failed to determine blob name for ID {} - {}\", id, reason), \"error\");\n                promise.failure({error: reason});\n            };\n\n        determineBlobUrl(id).then(determineBlobUrlSuccess, determineBlobUrlFailure);\n\n        return promise;\n    }\n\n    function handleFailure(xhr, promise) {\n        var azureError = qq.azure.util.parseAzureError(xhr.responseText, log),\n            errorMsg = \"Problem sending file to Azure\";\n\n        promise.failure({error: errorMsg,\n            azureError: azureError && azureError.message,\n            reset: xhr.status === 403\n        });\n    }\n\n    qq.extend(this, {\n        uploadChunk: function(params) {\n            var chunkIdx = params.chunkIdx;\n            var id = params.id;\n\n            var promise = new qq.Promise();\n\n            getSignedUrl(id, chunkIdx).then(\n                function(sasUri) {\n                    var xhr = handler._createXhr(id, chunkIdx),\n                    chunkData = handler._getChunkData(id, chunkIdx);\n\n                    handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n                    handler._registerXhr(id, chunkIdx, xhr, api.putBlock);\n\n                    // We may have multiple put block requests in progress for the same file, so we must include the chunk idx\n                    // as part of the ID when communicating with the put block ajax requester to avoid collisions.\n                    api.putBlock.upload(id + \".\" + chunkIdx, xhr, sasUri, chunkIdx, chunkData.blob).then(\n                        function(blockIdEntry) {\n                            if (!handler._getPersistableData(id).blockIdEntries) {\n                                handler._getPersistableData(id).blockIdEntries = [];\n                            }\n\n                            handler._getPersistableData(id).blockIdEntries.push(blockIdEntry);\n                            log(\"Put Block call succeeded for \" + id);\n                            promise.success({}, xhr);\n                        },\n                        function() {\n                            log(qq.format(\"Put Block call failed for ID {} on part {}\", id, chunkIdx), \"error\");\n                            handleFailure(xhr, promise);\n                        }\n                    );\n                },\n                promise.failure\n            );\n\n            return promise;\n        },\n\n        uploadFile: function(id) {\n            var promise = new qq.Promise(),\n                fileOrBlob = handler.getFile(id);\n\n            getSignedUrl(id).then(function(sasUri) {\n                var xhr = handler._createXhr(id);\n\n                handler._registerProgressHandler(id);\n\n                api.putBlob.upload(id, xhr, sasUri, fileOrBlob).then(\n                    function() {\n                        log(\"Put Blob call succeeded for \" + id);\n                        promise.success({}, xhr);\n                    },\n                    function() {\n                        log(\"Put Blob call failed for \" + id, \"error\");\n                        handleFailure(xhr, promise);\n                    }\n                );\n            },\n            promise.failure);\n\n            return promise;\n        }\n    });\n\n    qq.extend(this,\n        new qq.XhrUploadHandler({\n            options: qq.extend({namespace: \"azure\"}, spec),\n            proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n        }\n    ));\n\n    qq.override(this, function(super_) {\n        return {\n            expunge: function(id) {\n                var relatedToCancel = handler._wasCanceled(id),\n                    chunkingData = handler._getPersistableData(id),\n                    blockIdEntries = (chunkingData && chunkingData.blockIdEntries) || [];\n\n                if (relatedToCancel && blockIdEntries.length > 0) {\n                    deleteBlob(id);\n                }\n\n                super_.expunge(id);\n            },\n\n            finalizeChunks: function(id) {\n                return combineChunks(id);\n            },\n\n            _shouldChunkThisFile: function(id) {\n                var maybePossible = super_._shouldChunkThisFile(id);\n                return maybePossible && getSize(id) >= minFileSizeForChunking;\n            }\n        };\n    });\n};\n","/* globals qq */\n/**\n * Sends a GET request to the integrator's server, which should return a Shared Access Signature URI used to\n * make a specific request on a Blob via the Azure REST API.\n */\nqq.azure.GetSas = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            customHeaders: {},\n            restRequestVerb: \"PUT\",\n            endpointStore: null,\n            log: function(str, level) {}\n        },\n        requestPromises = {};\n\n    qq.extend(options, o);\n\n    function sasResponseReceived(id, xhr, isError) {\n        var promise = requestPromises[id];\n\n        if (isError) {\n            promise.failure(\"Received response code \" + xhr.status, xhr);\n        }\n        else {\n            if (xhr.responseText.length) {\n                promise.success(xhr.responseText);\n            }\n            else {\n                promise.failure(\"Empty response.\", xhr);\n            }\n        }\n\n        delete requestPromises[id];\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        successfulResponseCodes: {\n            GET: [200]\n        },\n        contentType: null,\n        customHeaders: options.customHeaders,\n        endpointStore: options.endpointStore,\n        cors: options.cors,\n        log: options.log,\n        onComplete: sasResponseReceived\n    }));\n\n    qq.extend(this, {\n        request: function(id, blobUri) {\n            var requestPromise = new qq.Promise(),\n                restVerb = options.restRequestVerb;\n\n            options.log(qq.format(\"Submitting GET SAS request for a {} REST request related to file ID {}.\", restVerb, id));\n\n            requestPromises[id] = requestPromise;\n\n            requester.initTransport(id)\n                .withParams({\n                    bloburi: blobUri,\n                    _method: restVerb\n                })\n                .withCacheBuster()\n                .send();\n\n            return requestPromise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Delete Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179413.aspx.\n */\nqq.azure.DeleteBlob = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"DELETE\",\n        options = {\n            endpointStore: {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhr, isError) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [202];\n            return codes;\n        }()),\n        contentType: null,\n        endpointStore: options.endpointStore,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete\n    }));\n\n    qq.extend(this, {\n        method: method,\n        send: function(id) {\n            options.log(\"Submitting Delete Blob request for \" + id);\n\n            return requester.initTransport(id)\n                .send();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179451.aspx.\n */\nqq.azure.PutBlob = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        options = {\n            getBlobMetadata: function(id) {},\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        promises = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        contentType: null,\n        customHeaders: function(id) {\n            var params = options.getBlobMetadata(id),\n                headers = qq.azure.util.getParamsAsHeaders(params);\n\n            headers[\"x-ms-blob-type\"] = \"BlockBlob\";\n\n            return headers;\n        },\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete endpoints[id];\n            delete promises[id];\n\n            if (isError) {\n                promise.failure();\n            }\n            else {\n                promise.success();\n            }\n        }\n    }));\n\n    qq.extend(this, {\n        method: method,\n        upload: function(id, xhr, url, file) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting Put Blob request for \" + id);\n\n            promises[id] = promise;\n            endpoints[id] = url;\n\n            requester.initTransport(id)\n                .withPayload(file)\n                .withHeaders({\"Content-Type\": file.type})\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Block Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd135726.aspx.\n */\nqq.azure.PutBlock = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        blockIdEntries = {},\n        promises = {},\n        options = {\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        contentType: null,\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id],\n                blockIdEntry = blockIdEntries[id];\n\n            delete endpoints[id];\n            delete promises[id];\n            delete blockIdEntries[id];\n\n            if (isError) {\n                promise.failure();\n            }\n            else {\n                promise.success(blockIdEntry);\n            }\n        }\n    }));\n\n    function createBlockId(partNum) {\n        var digits = 5,\n            zeros = new Array(digits + 1).join(\"0\"),\n            paddedPartNum = (zeros + partNum).slice(-digits);\n\n        return btoa(paddedPartNum);\n    }\n\n    qq.extend(this, {\n        method: method,\n        upload: function(id, xhr, sasUri, partNum, blob) {\n            var promise = new qq.Promise(),\n                blockId = createBlockId(partNum);\n\n            promises[id] = promise;\n\n            options.log(qq.format(\"Submitting Put Block request for {} = part {}\", id, partNum));\n\n            endpoints[id] = qq.format(\"{}&comp=block&blockid={}\", sasUri, encodeURIComponent(blockId));\n            blockIdEntries[id] = {part: partNum, id: blockId};\n\n            requester.initTransport(id)\n                .withPayload(blob)\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Block List Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179467.aspx.\n */\nqq.azure.PutBlockList = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        promises = {},\n        options = {\n            getBlobMetadata: function(id) {},\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        customHeaders: function(id) {\n            var params = options.getBlobMetadata(id);\n\n            return qq.azure.util.getParamsAsHeaders(params);\n        },\n        contentType: \"text/plain\",\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onSend: function() {},\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete endpoints[id];\n            delete promises[id];\n\n            if (isError) {\n                promise.failure(xhr);\n            }\n            else {\n                promise.success(xhr);\n            }\n\n        }\n    }));\n\n    function createRequestBody(blockIdEntries) {\n        var doc = document.implementation.createDocument(null, \"BlockList\", null);\n\n        // If we don't sort the block ID entries by part number, the file will be combined incorrectly by Azure\n        blockIdEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(blockIdEntries, function(idx, blockIdEntry) {\n            var latestEl = doc.createElement(\"Latest\"),\n                latestTextEl = doc.createTextNode(blockIdEntry.id);\n\n            latestEl.appendChild(latestTextEl);\n            qq(doc).children()[0].appendChild(latestEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    qq.extend(this, {\n        method: method,\n        send: function(id, sasUri, blockIdEntries, fileMimeType, registerXhrCallback) {\n            var promise = new qq.Promise(),\n                blockIdsXml = createRequestBody(blockIdEntries),\n                xhr;\n\n            promises[id] = promise;\n\n            options.log(qq.format(\"Submitting Put Block List request for {}\", id));\n\n            endpoints[id] = qq.format(\"{}&comp=blocklist\", sasUri);\n\n            xhr = requester.initTransport(id)\n                .withPayload(blockIdsXml)\n                .withHeaders({\"x-ms-blob-content-type\": fileMimeType})\n                .send();\n            registerXhrCallback(xhr);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n/**\n * This defines FineUploader mode w/ support for uploading to Azure, which provides all the basic\n * functionality of Fine Uploader as well as code to handle uploads directly to Azure.\n * This module inherits all logic from UI & core mode and adds some UI-related logic\n * specific to the upload-to-Azure workflow.  Some inherited options and API methods have a special meaning\n * in the context of the Azure uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.azure.FineUploader = function(o) {\n        var options = {\n            failedUploadTextDisplay: {\n                mode: \"custom\"\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Inherit instance data from FineUploader, which should in turn inherit from azure.FineUploaderBasic.\n        qq.FineUploader.call(this, options, \"azure\");\n    };\n\n    // Inherit the API methods from FineUploaderBasicS3\n    qq.extend(qq.azure.FineUploader.prototype, qq.azure.FineUploaderBasic.prototype);\n\n    // Inherit public and private API methods related to UI\n    qq.extend(qq.azure.FineUploader.prototype, qq.uiPublicApi);\n    qq.extend(qq.azure.FineUploader.prototype, qq.uiPrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.azure.FineUploader.prototype, {\n    });\n}());\n"]}