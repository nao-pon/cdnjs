{"version":3,"sources":["?","../client/js/jquery-plugin.js","../client/js/jquery-dnd.js","../client/js/s3/jquery-plugin.js","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/third-party/crypto-js/core.js","../client/js/third-party/crypto-js/enc-base64.js","../client/js/third-party/crypto-js/hmac.js","../client/js/third-party/crypto-js/sha1.js","../client/js/third-party/crypto-js/sha256.js","../client/js/third-party/crypto-js/lib-typedarrays.js","../client/js/s3/util.js","../client/js/non-traditional-common/uploader.basic.api.js","../client/js/s3/uploader.basic.js","../client/js/s3/request-signer.js","../client/js/uploadsuccess.ajax.requester.js","../client/js/s3/multipart.initiate.ajax.requester.js","../client/js/s3/multipart.complete.ajax.requester.js","../client/js/s3/multipart.abort.ajax.requester.js","../client/js/s3/s3.xhr.upload.handler.js","../client/js/s3/s3.form.upload.handler.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js","../client/js/s3/uploader.js"],"names":["global","$","$el","pluginOptions","init","options","xformedOpts","transformVariables","newUploaderInstance","getNewUploaderInstance","uploader","addCallbacks","params","uploaderType","pluginOption","namespace","charAt","toUpperCase","slice","toLowerCase","qq","FineUploader","dataStore","key","val","data","undefined","instanceToStore","option","optionVal","transformedOpts","callbacks","each","_options","prop","nonJqueryCallback","name","callbackEventTarget","exec","substring","originalArgs","Array","prototype","call","arguments","transformedArgs","nonJqueryCallbackRetVal","jqueryEventCallbackRetVal","idx","arg","push","maybeWrapInJquery","apply","this","triggerHandler","error","log","message","source","dest","xformed","arrayVals","element","inArray","isPlainObject","isArray","arrayVal","arrayObjDest","merge","isValidCommand","command","type","match","delegateCommand","xformedArgs","origArgs","retVal","transformedVal","nodeType","cloneNode","fn","fineUploader","optionsOrCommand","self","selfArgs","retVals","index","el","length","jQuery","rootDataKey","dropZoneElements","dnd","DragAndDrop","func","$callbackEl","args","jqueryHandlerResult","fineUploaderDnd","fineUploaderS3","endpointType","hide","style","display","attach","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","getFirstByClass","children","child","firstChild","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","getAttribute","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","Uint8Array","character","charCodeAt","level","console","isObject","variable","Object","toString","isFunction","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","newStr","nextIdxToReplace","strBefore","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","override","target","sourceFn","super_","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","Storage","getItem","bind","oldFunc","context","newArgs","concat","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","disposeSupport","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onBeforeStatusChange","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","isResumable","hasResumeRecord","debug","pauseUpload","removeFileRef","expunge","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","_customResumeDataStore","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setCustomResumeData","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","fileRecord","_onDeleteComplete","errorMessage","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadResult","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkResult","partIndex","onUploadChunkSuccess","onResume","customResumeData","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","isInProgress","getCustomResumeData","_getCustomResumeData","UploadHandlerController","_fileOrBlobRejected","_formatSize","sizeSymbols","max","toFixed","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_handleDeleteSuccess","_handleDeleteFailed","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","allowEmpty","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","omitDefaultParams","paramsInBody","requireSuccessJson","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","jsonPayload","resetOnStatus","recordsExpireIn","resuming","customKeys","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","normalizedResponse","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","onUploadChunkPromise","requestOverrides","uploadChunkData","overrides","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","_getLocalStorageId","isAttemptingResume","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","chunkingState","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","formatVersion","localStorageId","forEach","_getMimeType","_getPersistableData","ceil","_markNotResumable","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","CryptoJS","C","C_lib","lib","Base","F","subtype","mixIn","$super","instance","properties","propertyName","clone","WordArray","words","sigBytes","encoder","Hex","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","nBytes","C_enc","enc","hexChars","bite","hexStr","hexStrLength","Latin1","latin1Chars","fromCharCode","latin1Str","latin1StrLength","Utf8","decodeURIComponent","escape","utf8Str","unescape","BufferedBlockAlgorithm","_data","_nDataBytes","_append","_process","doFlush","dataWords","dataSigBytes","blockSize","blockSizeBytes","nBlocksReady","_minBufferSize","nWordsReady","nBytesReady","min","_doProcessBlock","processedWords","Hasher","cfg","_doReset","update","messageUpdate","hash","_doFinalize","_createHelper","hasher","_createHmacHelper","C_algo","HMAC","algo","Base64","map","_map","base64Chars","byte1","byte2","byte3","triplet","j","paddingChar","base64Str","base64StrLength","paddingIndex","bits1","bits2","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","hmac","W","SHA1","_hash","M","H","n","t","nBitsTotal","nBitsLeft","floor","HmacSHA1","K","isPrime","sqrtN","factor","getFractionalBits","nPrime","SHA256","f","g","h","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","HmacSHA256","superInit","subInit","typedArray","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","byteOffset","byteLength","typedArrayByteLength","s3","util","ALGORITHM_PARAM_NAME","AWS_PARAM_PREFIX","CREDENTIAL_PARAM_NAME","DATE_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_VALUE","SERVER_SIDE_ENCRYPTION_PARAM_NAME","SERVER_SIDE_ENCRYPTION_PARAM_VALUE","SESSION_TOKEN_PARAM_NAME","V4_ALGORITHM_PARAM_VALUE","V4_SIGNATURE_PARAM_NAME","CASE_SENSITIVE_PARAM_NAMES","UNSIGNABLE_REST_HEADER_NAMES","UNPREFIXED_PARAM_NAMES","getBucket","patterns","bucket","pattern","_getPrefixedParamName","getPolicy","policy","conditions","date","drift","clockDrift","accessKey","acl","expectedStatus","sessionToken","successRedirectUrl","getSuccessRedirectAbsoluteUrl","minFileSize","maxFileSize","reducedRedundancy","region","serverSideEncryption","signatureVersion","expiration","getPolicyExpirationDate","Content-Type","success_action_status","success_action_redirect","getV4CredentialsString","getV4PolicyDate","awsParamName","enforceSizeLimits","refreshPolicyCredentials","newSessionToken","sessionTokenFound","oldCondIdx","oldCondObj","oldCondName","oldCondVal","generateAwsParams","signPolicyCallback","awsParams","customParams","policyJson","AWSAccessKeyId","policyAndSignature","updatedAccessKey","updatedSessionToken","signature","minSize","adjustedMinSize","adjustedMaxSize","adjustedDate","getPolicyDate","getCredentialsDate","getUTCFullYear","getUTCMonth","getUTCDate","_minutesToAdd_","minutesToAdd","pad","setMinutes","getMinutes","toISOString","number","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseIframeResponse","doc","contentWindow","queryString","search","etag","targetAnchorContainer","encodeQueryStringParam","percentEncoded","uriEscape","uriEscapePath","nonTraditionalBasePublicApi","setUploadSuccessParams","_uploadSuccessParamsStore","setUploadSuccessEndpoint","_uploadSuccessEndpointStore","nonTraditionalBasePrivateApi","onCompleteArgs","successEndpoint","successCustomHeaders","uploadSuccess","successMethod","uploadSuccessParams","fileParams","onSuccessFromServer","successRequestResult","_failedSuccessRequestCallbacks","onFailureFromServer","submitSuccessRequest","successAjaxRequester","UploadSuccessAjaxRequester","_getEndpointSpecificParams","sendSuccessRequest","successRequestCallback","objectProperties","host","credentials","secretKey","iframeSupport","localBlankPagePath","onCredentialsExpired","setCredentials","_currentCredentials","_aclStore","_cannedKeys","_cannedBuckets","_buckets","_hosts","getKey","ignoreEmpty","setAcl","aclStore","_determineBucket","getHost","_determineHost","getKeyName","_determineKeyName","maxSizeLimit","oldParams","modifiedParams","paramName","credentialsProvider","onExpired","updateCredentials","_determineObjectPropertyValue","property","maybe","keynameLogic","onGetKeynameFailure","onGetKeynameSuccess","keyname","keynameToUse","_handleKeynameFunction","keynameFunc","successCallback","failureCallback","getResponseHeader","s3Key","s3Bucket","RequestSigner","thisSignatureRequester","pendingSignatures","expectingPolicy","signatureSpec","generateHeaders","signatureConstructor","getHeaders","Authorization","getRequestDate","getSignedHeaders","getEndOfUrl","v2","getStringToSign","contentMd5","headersStr","endOfUrl","signApiRequest","signatureEffort","headersWordArray","headersHmacSha1","headersHmacSha1Base64","signPolicy","policyStr","policyWordArray","base64Policy","policyHmacSha1","policyHmacSha1Base64","v4","getCanonicalQueryString","endOfUri","queryParamIdx","canonicalQueryString","encodedQueryParams","encodedQueryParamNames","queryStrings","nameAndVal","paramVal","encodedQueryParamName","getCanonicalRequest","getCanonicalUri","headerNames","hashedContent","getEncodedHashedPayload","onloadend","DONE","getScope","canonicalRequest","hashedRequest","scope","stringToSignTemplate","hashed","raw","signedHeaders","headerName","headersPattern","matches","dateKey","dateRegionKey","dateRegionServiceKey","signingKey","credentialPattern","credentialCondition","credential","condition","handleSignatureReceived","responseJson","pendingSignatureData","invalid","getStringToSignArtifacts","requestInfo","toSign","generateStringToSign","headerIndexesToRemove","headerIdx","toSignRaw","REQUEST_TYPE","MULTIPART_ABORT","uploadId","MULTIPART_INITIATE","MULTIPART_COMPLETE","MULTIPART_UPLOAD","partNum","content","Host","determineSignatureClientSide","toBeSigned","updatedHeaders","getToSign","signatureArtifacts","stringToSign","getSignature","queryParams","stringToSignRaw","constructStringToSign","artifacts","theHeaders","withUploadId","theUploadId","withContent","theContent","withContentType","theContentType","withPartNum","thePartNum","toUTCString","_artifacts_","pendingRequests","handleSuccessResponse","successIndicator","failureIndicator","parsedResponse","InitiateMultipartAjaxRequester","pendingInitiateRequests","getContentType","getSignatureAjaxRequester","handleInitiateRequestComplete","domParser","DOMParser","responseDoc","parseFromString","uploadIdElements","messageElements","CompleteMultipartAjaxRequester","pendingCompleteRequests","handleCompleteRequestComplete","bucketEls","keyEls","getCompleteRequestBody","etagEntries","implementation","createDocument","etagEntry","partEl","partNumEl","partNumTextEl","createTextNode","etagTextEl","etagEl","XMLSerializer","serializeToString","AbortMultipartAjaxRequester","handleAbortRequestComplete","errorEls","awsErrorMsg","onGetBucket","onGetHost","onGetKeyName","combine","etagMap","etags","requesters","completeMultipart","initHeaders","urlSafe","restSignature","put","domain","track","hasContentType","setup","uploadIdPromise","initiateMultipart","abortMultipart","policySignature","initParams","toSend","cachedBucket","cachedHost","shouldReset","keyName","encodedKey","parsedErrorProps","parseError","awsResponseXml","parsedDoc","errorDetails","codeEls","messageEls","existedInLocalStorage","baseStorageId","bucketName","isValidResponse","innerHtml","responseData","createForm","handleFinishedUpload","handleUpload","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","relatedTarget","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","createDocumentFragment","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateHtml","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListHtml","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"s3.jquery.fine-uploader.js","sourcesContent":[null,"/*globals jQuery, qq*/\n(function($) {\n    \"use strict\";\n    var $el,\n        pluginOptions = [\"uploaderType\", \"endpointType\"];\n\n    function init(options) {\n        var xformedOpts = transformVariables(options || {}),\n            newUploaderInstance = getNewUploaderInstance(xformedOpts);\n\n        uploader(newUploaderInstance);\n        addCallbacks(xformedOpts, newUploaderInstance);\n\n        return $el;\n    }\n\n    function getNewUploaderInstance(params) {\n        var uploaderType = pluginOption(\"uploaderType\"),\n            namespace = pluginOption(\"endpointType\");\n\n        // If the integrator has defined a specific type of uploader to load, use that, otherwise assume `qq.FineUploader`\n        if (uploaderType) {\n            // We can determine the correct constructor function to invoke by combining \"FineUploader\"\n            // with the upper camel cased `uploaderType` value.\n            uploaderType = uploaderType.charAt(0).toUpperCase() + uploaderType.slice(1).toLowerCase();\n\n            if (namespace) {\n                return new qq[namespace][\"FineUploader\" + uploaderType](params);\n            }\n\n            return new qq[\"FineUploader\" + uploaderType](params);\n        }\n        else {\n            if (namespace) {\n                return new qq[namespace].FineUploader(params);\n            }\n\n            return new qq.FineUploader(params);\n        }\n    }\n\n    function dataStore(key, val) {\n        var data = $el.data(\"fineuploader\");\n\n        if (val) {\n            if (data === undefined) {\n                data = {};\n            }\n            data[key] = val;\n            $el.data(\"fineuploader\", data);\n        }\n        else {\n            if (data === undefined) {\n                return null;\n            }\n            return data[key];\n        }\n    }\n\n    //the underlying Fine Uploader instance is stored in jQuery's data stored, associated with the element\n    // tied to this instance of the plug-in\n    function uploader(instanceToStore) {\n        return dataStore(\"uploader\", instanceToStore);\n    }\n\n    function pluginOption(option, optionVal) {\n        return dataStore(option, optionVal);\n    }\n\n    // Implement all callbacks defined in Fine Uploader as functions that trigger appropriately names events and\n    // return the result of executing the bound handler back to Fine Uploader\n    function addCallbacks(transformedOpts, newUploaderInstance) {\n        var callbacks = transformedOpts.callbacks = {};\n\n        $.each(newUploaderInstance._options.callbacks, function(prop, nonJqueryCallback) {\n            var name, callbackEventTarget;\n\n            name = /^on(\\w+)/.exec(prop)[1];\n            name = name.substring(0, 1).toLowerCase() + name.substring(1);\n            callbackEventTarget = $el;\n\n            callbacks[prop] = function() {\n                var originalArgs = Array.prototype.slice.call(arguments),\n                    transformedArgs = [],\n                    nonJqueryCallbackRetVal, jqueryEventCallbackRetVal;\n\n                $.each(originalArgs, function(idx, arg) {\n                    transformedArgs.push(maybeWrapInJquery(arg));\n                });\n\n                nonJqueryCallbackRetVal = nonJqueryCallback.apply(this, originalArgs);\n\n                try {\n                    jqueryEventCallbackRetVal = callbackEventTarget.triggerHandler(name, transformedArgs);\n                }\n                catch (error) {\n                    qq.log(\"Caught error in Fine Uploader jQuery event handler: \" + error.message, \"error\");\n                }\n\n                /*jshint -W116*/\n                if (nonJqueryCallbackRetVal != null) {\n                    return nonJqueryCallbackRetVal;\n                }\n                return jqueryEventCallbackRetVal;\n            };\n        });\n\n        newUploaderInstance._options.callbacks = callbacks;\n    }\n\n    //transform jQuery objects into HTMLElements, and pass along all other option properties\n    function transformVariables(source, dest) {\n        var xformed, arrayVals;\n\n        if (dest === undefined) {\n            if (source.uploaderType !== \"basic\") {\n                xformed = { element: $el[0] };\n            }\n            else {\n                xformed = {};\n            }\n        }\n        else {\n            xformed = dest;\n        }\n\n        $.each(source, function(prop, val) {\n            if ($.inArray(prop, pluginOptions) >= 0) {\n                pluginOption(prop, val);\n            }\n            else if (val instanceof $) {\n                xformed[prop] = val[0];\n            }\n            else if ($.isPlainObject(val)) {\n                xformed[prop] = {};\n                transformVariables(val, xformed[prop]);\n            }\n            else if ($.isArray(val)) {\n                arrayVals = [];\n                $.each(val, function(idx, arrayVal) {\n                    var arrayObjDest = {};\n\n                    if (arrayVal instanceof $) {\n                        $.merge(arrayVals, arrayVal);\n                    }\n                    else if ($.isPlainObject(arrayVal)) {\n                        transformVariables(arrayVal, arrayObjDest);\n                        arrayVals.push(arrayObjDest);\n                    }\n                    else {\n                        arrayVals.push(arrayVal);\n                    }\n                });\n                xformed[prop] = arrayVals;\n            }\n            else {\n                xformed[prop] = val;\n            }\n        });\n\n        if (dest === undefined) {\n            return xformed;\n        }\n    }\n\n    function isValidCommand(command) {\n        return $.type(command) === \"string\" &&\n            !command.match(/^_/) && //enforce private methods convention\n            uploader()[command] !== undefined;\n    }\n\n    // Assuming we have already verified that this is a valid command, call the associated function in the underlying\n    // Fine Uploader instance (passing along the arguments from the caller) and return the result of the call back to the caller\n    function delegateCommand(command) {\n        var xformedArgs = [],\n            origArgs = Array.prototype.slice.call(arguments, 1),\n            retVal;\n\n        transformVariables(origArgs, xformedArgs);\n\n        retVal = uploader()[command].apply(uploader(), xformedArgs);\n\n        return maybeWrapInJquery(retVal);\n    }\n\n    // If the value is an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\n    function maybeWrapInJquery(val) {\n        var transformedVal = val;\n\n        // If the command is returning an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\n        /*jshint -W116*/\n        if (val != null && typeof val === \"object\" &&\n           (val.nodeType === 1 || val.nodeType === 9) && val.cloneNode) {\n\n            transformedVal = $(val);\n        }\n\n        return transformedVal;\n    }\n\n    $.fn.fineUploader = function(optionsOrCommand) {\n        var self = this, selfArgs = arguments, retVals = [];\n\n        this.each(function(index, el) {\n            $el = $(el);\n\n            if (uploader() && isValidCommand(optionsOrCommand)) {\n                retVals.push(delegateCommand.apply(self, selfArgs));\n\n                if (self.length === 1) {\n                    return false;\n                }\n            }\n            else if (typeof optionsOrCommand === \"object\" || !optionsOrCommand) {\n                init.apply(self, selfArgs);\n            }\n            else {\n                $.error(\"Method \" +  optionsOrCommand + \" does not exist on jQuery.fineUploader\");\n            }\n        });\n\n        if (retVals.length === 1) {\n            return retVals[0];\n        }\n        else if (retVals.length > 1) {\n            return retVals;\n        }\n\n        return this;\n    };\n\n}(jQuery));\n","/*globals jQuery, qq*/\n(function($) {\n    \"use strict\";\n    var rootDataKey = \"fineUploaderDnd\",\n        $el;\n\n    function init(options) {\n        if (!options) {\n            options = {};\n        }\n\n        options.dropZoneElements = [$el];\n        var xformedOpts = transformVariables(options);\n        addCallbacks(xformedOpts);\n        dnd(new qq.DragAndDrop(xformedOpts));\n\n        return $el;\n    }\n\n    function dataStore(key, val) {\n        var data = $el.data(rootDataKey);\n\n        if (val) {\n            if (data === undefined) {\n                data = {};\n            }\n            data[key] = val;\n            $el.data(rootDataKey, data);\n        }\n        else {\n            if (data === undefined) {\n                return null;\n            }\n            return data[key];\n        }\n    }\n\n    function dnd(instanceToStore) {\n        return dataStore(\"dndInstance\", instanceToStore);\n    }\n\n    function addCallbacks(transformedOpts) {\n        var callbacks = transformedOpts.callbacks = {};\n\n        $.each(new qq.DragAndDrop.callbacks(), function(prop, func) {\n            var name = prop,\n                $callbackEl;\n\n            $callbackEl = $el;\n\n            callbacks[prop] = function() {\n                var args = Array.prototype.slice.call(arguments),\n                    jqueryHandlerResult = $callbackEl.triggerHandler(name, args);\n\n                return jqueryHandlerResult;\n            };\n        });\n    }\n\n    //transform jQuery objects into HTMLElements, and pass along all other option properties\n    function transformVariables(source, dest) {\n        var xformed, arrayVals;\n\n        if (dest === undefined) {\n            xformed = {};\n        }\n        else {\n            xformed = dest;\n        }\n\n        $.each(source, function(prop, val) {\n            if (val instanceof $) {\n                xformed[prop] = val[0];\n            }\n            else if ($.isPlainObject(val)) {\n                xformed[prop] = {};\n                transformVariables(val, xformed[prop]);\n            }\n            else if ($.isArray(val)) {\n                arrayVals = [];\n                $.each(val, function(idx, arrayVal) {\n                    if (arrayVal instanceof $) {\n                        $.merge(arrayVals, arrayVal);\n                    }\n                    else {\n                        arrayVals.push(arrayVal);\n                    }\n                });\n                xformed[prop] = arrayVals;\n            }\n            else {\n                xformed[prop] = val;\n            }\n        });\n\n        if (dest === undefined) {\n            return xformed;\n        }\n    }\n\n    function isValidCommand(command) {\n        return $.type(command) === \"string\" &&\n            command === \"dispose\" &&\n            dnd()[command] !== undefined;\n    }\n\n    function delegateCommand(command) {\n        var xformedArgs = [], origArgs = Array.prototype.slice.call(arguments, 1);\n        transformVariables(origArgs, xformedArgs);\n        return dnd()[command].apply(dnd(), xformedArgs);\n    }\n\n    $.fn.fineUploaderDnd = function(optionsOrCommand) {\n        var self = this, selfArgs = arguments, retVals = [];\n\n        this.each(function(index, el) {\n            $el = $(el);\n\n            if (dnd() && isValidCommand(optionsOrCommand)) {\n                retVals.push(delegateCommand.apply(self, selfArgs));\n\n                if (self.length === 1) {\n                    return false;\n                }\n            }\n            else if (typeof optionsOrCommand === \"object\" || !optionsOrCommand) {\n                init.apply(self, selfArgs);\n            }\n            else {\n                $.error(\"Method \" +  optionsOrCommand + \" does not exist in Fine Uploader's DnD module.\");\n            }\n        });\n\n        if (retVals.length === 1) {\n            return retVals[0];\n        }\n        else if (retVals.length > 1) {\n            return retVals;\n        }\n\n        return this;\n    };\n\n}(jQuery));\n","/*globals jQuery*/\n/**\n * Simply an alias for the `fineUploader` plug-in wrapper, but hides the required `endpointType` option from the\n * integrator.  I thought it may be confusing to convey to the integrator that, when using Fine Uploader in S3 mode,\n * you need to specify an `endpointType` with a value of S3, and perhaps an `uploaderType` with a value of \"basic\" if\n * you want to use basic mode when uploading directly to S3 as well.  So, you can use this plug-in alias and not worry\n * about the `endpointType` option at all.\n */\n(function($) {\n    \"use strict\";\n\n    $.fn.fineUploaderS3 = function(optionsOrCommand) {\n        if (typeof optionsOrCommand === \"object\") {\n\n            // This option is used to tell the plug-in wrapper to instantiate the appropriate S3-namespace modules.\n            optionsOrCommand.endpointType = \"s3\";\n        }\n\n        return $.fn.fineUploader.apply(this, arguments);\n    };\n\n}(jQuery));\n","/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\nqq.version = \"5.16.0-alpha.11\";\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\n    function isChrome21OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         * - onBeforeStatusChange(fileId): callback that is executed before the status change is broadcast\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            spec.onBeforeStatusChange && spec.onBeforeStatusChange(id);\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\n/**\n * Defines the public API for FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.basePublicApi = {\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\n        addBlobs: function(blobDataOrArray, params, endpoint) {\n            this.addFiles(blobDataOrArray, params, endpoint);\n        },\n\n        addInitialFiles: function(cannedFileList) {\n            var self = this;\n\n            qq.each(cannedFileList, function(index, cannedFile) {\n                self._addCannedFile(cannedFile);\n            });\n        },\n\n        addFiles: function(data, params, endpoint) {\n            this._maybeHandleIos8SafariWorkaround();\n\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\n\n                processBlob = qq.bind(function(blob) {\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processBlobData = qq.bind(function(blobData) {\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\n                }, this),\n\n                processCanvas = qq.bind(function(canvas) {\n                    var blob = qq.canvasToBlob(canvas);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName + \".png\"\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processCanvasData = qq.bind(function(canvasData) {\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: canvasData.name\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processFileOrInput = qq.bind(function(fileOrInput) {\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\n                        var files = Array.prototype.slice.call(fileOrInput.files),\n                            self = this;\n\n                        qq.each(files, function(idx, file) {\n                            self._handleNewFile(file, batchId, verifiedFiles);\n                        });\n                    }\n                    else {\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\n                    }\n                }, this),\n\n                normalizeData = function() {\n                    if (qq.isFileList(data)) {\n                        data = Array.prototype.slice.call(data);\n                    }\n                    data = [].concat(data);\n                },\n\n                self = this,\n                verifiedFiles = [];\n\n            this._currentBatchId = batchId;\n\n            if (data) {\n                normalizeData();\n\n                qq.each(data, function(idx, fileContainer) {\n                    if (qq.isFileOrInput(fileContainer)) {\n                        processFileOrInput(fileContainer);\n                    }\n                    else if (qq.isBlob(fileContainer)) {\n                        processBlob(fileContainer);\n                    }\n                    else if (qq.isObject(fileContainer)) {\n                        if (fileContainer.blob && fileContainer.name) {\n                            processBlobData(fileContainer);\n                        }\n                        else if (fileContainer.canvas && fileContainer.name) {\n                            processCanvasData(fileContainer);\n                        }\n                    }\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\n                        processCanvas(fileContainer);\n                    }\n                    else {\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\n                    }\n                });\n\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\n            }\n        },\n\n        cancel: function(id) {\n            this._handler.cancel(id);\n        },\n\n        cancelAll: function() {\n            var storedIdsCopy = [],\n                self = this;\n\n            qq.extend(storedIdsCopy, this._storedIds);\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\n                self.cancel(storedFileId);\n            });\n\n            this._handler.cancelAll();\n        },\n\n        clearStoredFiles: function() {\n            this._storedIds = [];\n        },\n\n        continueUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            if (uploadData.status === qq.status.PAUSED) {\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\n                this._uploadFile(id);\n                return true;\n            }\n            else {\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        deleteFile: function(id) {\n            return this._onSubmitDelete(id);\n        },\n\n        // TODO document?\n        doesExist: function(fileOrBlobId) {\n            return this._handler.isValid(fileOrBlobId);\n        },\n\n        // Generate a variable size thumbnail on an img or canvas,\n        // returning a promise that is fulfilled when the attempt completes.\n        // Thumbnail can either be based off of a URL for an image returned\n        // by the server in the upload response, or the associated `Blob`.\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\n            var promiseToReturn = new qq.Promise(),\n                fileOrUrl, options;\n\n            if (this._imageGenerator) {\n                fileOrUrl = this._thumbnailUrls[fileId];\n                options = {\n                    customResizeFunction: customResizeFunction,\n                    maxSize: maxSize > 0 ? maxSize : null,\n                    scale: maxSize > 0\n                };\n\n                // If client-side preview generation is possible\n                // and we are not specifically looking for the image URl returned by the server...\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\n                    fileOrUrl = this.getFile(fileId);\n                }\n\n                /* jshint eqeqeq:false,eqnull:true */\n                if (fileOrUrl == null) {\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\n                }\n                else {\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\n                        function success(modifiedContainer) {\n                            promiseToReturn.success(modifiedContainer);\n                        },\n\n                        function failure(container, reason) {\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\n                        }\n                    );\n                }\n            }\n            else {\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\n            }\n\n            return promiseToReturn;\n        },\n\n        getButton: function(fileId) {\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\n        },\n\n        getEndpoint: function(fileId) {\n            return this._endpointStore.get(fileId);\n        },\n\n        getFile: function(fileOrBlobId) {\n            return this._handler.getFile(fileOrBlobId) || null;\n        },\n\n        getInProgress: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED\n                ]\n            }).length;\n        },\n\n        getName: function(id) {\n            return this._uploadData.retrieve({id: id}).name;\n        },\n\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\n        getParentId: function(id) {\n            var uploadDataEntry = this.getUploads({id: id}),\n                parentId = null;\n\n            if (uploadDataEntry) {\n                if (uploadDataEntry.parentId !== undefined) {\n                    parentId = uploadDataEntry.parentId;\n                }\n            }\n\n            return parentId;\n        },\n\n        getResumableFilesData: function() {\n            return this._handler.getResumableFilesData();\n        },\n\n        getSize: function(id) {\n            return this._uploadData.retrieve({id: id}).size;\n        },\n\n        getNetUploads: function() {\n            return this._netUploaded;\n        },\n\n        getRemainingAllowedItems: function() {\n            var allowedItems = this._currentItemLimit;\n\n            if (allowedItems > 0) {\n                return allowedItems - this._netUploadedOrQueued;\n            }\n\n            return null;\n        },\n\n        getUploads: function(optionalFilter) {\n            return this._uploadData.retrieve(optionalFilter);\n        },\n\n        getUuid: function(id) {\n            return this._uploadData.retrieve({id: id}).uuid;\n        },\n\n        isResumable: function(id) {\n            return this._handler.hasResumeRecord(id);\n        },\n\n        log: function(str, level) {\n            if (this._options.debug && (!level || level === \"info\")) {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\n            }\n            else if (level && level !== \"info\") {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\n\n            }\n        },\n\n        pauseUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            // Pause only really makes sense if the file is uploading or retrying\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\n                if (this._handler.pause(id)) {\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\n                    return true;\n                }\n                else {\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\n                }\n            }\n            else {\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        removeFileRef: function(id) {\n            this._handler.expunge(id);\n        },\n\n        reset: function() {\n            this.log(\"Resetting uploader...\");\n\n            this._handler.reset();\n            this._storedIds = [];\n            this._autoRetries = [];\n            this._retryTimeouts = [];\n            this._preventRetries = [];\n            this._thumbnailUrls = [];\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n\n            this._paramsStore.reset();\n            this._endpointStore.reset();\n            this._netUploadedOrQueued = 0;\n            this._netUploaded = 0;\n            this._uploadData.reset();\n            this._buttonIdsForFileIds = [];\n\n            this._pasteHandler && this._pasteHandler.reset();\n            this._options.session.refreshOnReset && this._refreshSessionData();\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n\n            this._totalProgress && this._totalProgress.reset();\n\n            this._customResumeDataStore.reset();\n        },\n\n        retry: function(id) {\n            return this._manualRetry(id);\n        },\n\n        scaleImage: function(id, specs) {\n            var self = this;\n\n            return qq.Scaler.prototype.scaleImage(id, specs, {\n                log: qq.bind(self.log, self),\n                getFile: qq.bind(self.getFile, self),\n                uploadData: self._uploadData\n            });\n        },\n\n        setCustomHeaders: function(headers, id) {\n            this._customHeadersStore.set(headers, id);\n        },\n\n        setCustomResumeData: function(id, data) {\n            this._customResumeDataStore.set(data, id);\n        },\n\n        setDeleteFileCustomHeaders: function(headers, id) {\n            this._deleteFileCustomHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileEndpoint: function(endpoint, id) {\n            this._deleteFileEndpointStore.set(endpoint, id);\n        },\n\n        setDeleteFileParams: function(params, id) {\n            this._deleteFileParamsStore.set(params, id);\n        },\n\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\n        setEndpoint: function(endpoint, id) {\n            this._endpointStore.set(endpoint, id);\n        },\n\n        setForm: function(elementOrId) {\n            this._updateFormSupportAndParams(elementOrId);\n        },\n\n        setItemLimit: function(newItemLimit) {\n            this._currentItemLimit = newItemLimit;\n        },\n\n        setName: function(id, newName) {\n            this._uploadData.updateName(id, newName);\n        },\n\n        setParams: function(params, id) {\n            this._paramsStore.set(params, id);\n        },\n\n        setUuid: function(id, newUuid) {\n            return this._uploadData.uuidChanged(id, newUuid);\n        },\n\n        /**\n         * Expose the internal status of a file id to the public api for manual state changes\n         * @public\n         *\n         * @param {Number} id,\n         * @param {String} newStatus\n         *\n         * @todo Implement the remaining methods\n         */\n        setStatus: function(id, newStatus) {\n            var fileRecord = this.getUploads({id: id});\n            if (!fileRecord) {\n                throw new qq.Error(id + \" is not a valid file ID.\");\n            }\n\n            switch (newStatus) {\n                case qq.status.DELETED:\n                    this._onDeleteComplete(id, null, false);\n                    break;\n                case qq.status.DELETE_FAILED:\n                    this._onDeleteComplete(id, null, true);\n                    break;\n                default:\n                    var errorMessage = \"Method setStatus called on '\" + name + \"' not implemented yet for \" + newStatus;\n                    this.log(errorMessage);\n                    throw new qq.Error(errorMessage);\n            }\n        },\n\n        uploadStoredFiles: function() {\n            if (this._storedIds.length === 0) {\n                this._itemError(\"noFilesError\");\n            }\n            else {\n                this._uploadStoredFiles();\n            }\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploaderBasic mode.\n     */\n    qq.basePrivateApi = {\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\n        _addCannedFile: function(sessionData) {\n            var self = this;\n\n            return this._uploadData.addFile({\n                uuid: sessionData.uuid,\n                name: sessionData.name,\n                size: sessionData.size,\n                status: qq.status.UPLOAD_SUCCESSFUL,\n                onBeforeStatusChange: function(id) {\n                    sessionData.deleteFileEndpoint && self.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\n                    sessionData.deleteFileParams && self.setDeleteFileParams(sessionData.deleteFileParams, id);\n\n                    if (sessionData.thumbnailUrl) {\n                        self._thumbnailUrls[id] = sessionData.thumbnailUrl;\n                    }\n\n                    self._netUploaded++;\n                    self._netUploadedOrQueued++;\n                }\n            });\n        },\n\n        _annotateWithButtonId: function(file, associatedInput) {\n            if (qq.isFile(file)) {\n                file.qqButtonId = this._getButtonId(associatedInput);\n            }\n        },\n\n        _batchError: function(message) {\n            this._options.callbacks.onError(null, null, message, undefined);\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return new qq.DeleteFileAjaxRequester({\n                method: this._options.deleteFile.method.toUpperCase(),\n                maxConnections: this._options.maxConnections,\n                uuidParamName: this._options.request.uuidName,\n                customHeaders: this._deleteFileCustomHeadersStore,\n                paramsStore: this._deleteFileParamsStore,\n                endpointStore: this._deleteFileEndpointStore,\n                cors: this._options.cors,\n                log: qq.bind(self.log, self),\n                onDelete: function(id) {\n                    self._onDelete(id);\n                    self._options.callbacks.onDelete(id);\n                },\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                }\n\n            });\n        },\n\n        _createPasteHandler: function() {\n            var self = this;\n\n            return new qq.PasteSupport({\n                targetElement: this._options.paste.targetElement,\n                callbacks: {\n                    log: qq.bind(self.log, self),\n                    pasteReceived: function(blob) {\n                        self._handleCheckedCallback({\n                            name: \"onPasteReceived\",\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\n                            identifier: \"pasted image\"\n                        });\n                    }\n                }\n            });\n        },\n\n        _createStore: function(initialValue, _readOnlyValues_) {\n            var store = {},\n                catchall = initialValue,\n                perIdReadOnlyValues = {},\n                readOnlyValues = _readOnlyValues_,\n                copy = function(orig) {\n                    if (qq.isObject(orig)) {\n                        return qq.extend({}, orig);\n                    }\n                    return orig;\n                },\n                getReadOnlyValues = function() {\n                    if (qq.isFunction(readOnlyValues)) {\n                        return readOnlyValues();\n                    }\n                    return readOnlyValues;\n                },\n                includeReadOnlyValues = function(id, existing) {\n                    if (readOnlyValues && qq.isObject(existing)) {\n                        qq.extend(existing, getReadOnlyValues());\n                    }\n\n                    if (perIdReadOnlyValues[id]) {\n                        qq.extend(existing, perIdReadOnlyValues[id]);\n                    }\n                };\n\n            return {\n                set: function(val, id) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id == null) {\n                        store = {};\n                        catchall = copy(val);\n                    }\n                    else {\n                        store[id] = copy(val);\n                    }\n                },\n\n                get: function(id) {\n                    var values;\n\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id != null && store[id]) {\n                        values = store[id];\n                    }\n                    else {\n                        values = copy(catchall);\n                    }\n\n                    includeReadOnlyValues(id, values);\n\n                    return copy(values);\n                },\n\n                addReadOnly: function(id, values) {\n                    // Only applicable to Object stores\n                    if (qq.isObject(store)) {\n                        // If null ID, apply readonly values to all files\n                        if (id === null) {\n                            if (qq.isFunction(values)) {\n                                readOnlyValues = values;\n                            }\n                            else {\n                                readOnlyValues = readOnlyValues || {};\n                                qq.extend(readOnlyValues, values);\n                            }\n                        }\n                        else {\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\n                            qq.extend(perIdReadOnlyValues[id], values);\n                        }\n                    }\n                },\n\n                remove: function(fileId) {\n                    return delete store[fileId];\n                },\n\n                reset: function() {\n                    store = {};\n                    perIdReadOnlyValues = {};\n                    catchall = initialValue;\n                }\n            };\n        },\n\n        _createUploadDataTracker: function() {\n            var self = this;\n\n            return new qq.UploadData({\n                getName: function(id) {\n                    return self.getName(id);\n                },\n                getUuid: function(id) {\n                    return self.getUuid(id);\n                },\n                getSize: function(id) {\n                    return self.getSize(id);\n                },\n                onStatusChange: function(id, oldStatus, newStatus) {\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\n                    self._maybeAllComplete(id, newStatus);\n\n                    if (self._totalProgress) {\n                        setTimeout(function() {\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\n                        }, 0);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Generate a tracked upload button.\n         *\n         * @param spec Object containing a required `element` property\n         * along with optional `multiple`, `accept`, and `folders`.\n         * @returns {qq.UploadButton}\n         * @private\n         */\n        _createUploadButton: function(spec) {\n            var self = this,\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\n                button;\n\n            function allowMultiple() {\n                if (qq.supportedFeatures.ajaxUploading) {\n                    // Workaround for bug in iOS7+ (see #1039)\n                    if (self._options.workarounds.iosEmptyVideos &&\n                        qq.ios() &&\n                        !qq.ios6() &&\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\n\n                        return false;\n                    }\n\n                    if (spec.multiple === undefined) {\n                        return self._options.multiple;\n                    }\n\n                    return spec.multiple;\n                }\n\n                return false;\n            }\n\n            button = new qq.UploadButton({\n                acceptFiles: acceptFiles,\n                element: spec.element,\n                focusClass: this._options.classes.buttonFocus,\n                folders: spec.folders,\n                hoverClass: this._options.classes.buttonHover,\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\n                multiple: allowMultiple(),\n                name: this._options.request.inputName,\n                onChange: function(input) {\n                    self._onInputChange(input);\n                },\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\n            });\n\n            this._disposeSupport.addDisposer(function() {\n                button.dispose();\n            });\n\n            self._buttons.push(button);\n\n            return button;\n        },\n\n        _createUploadHandler: function(additionalOptions, namespace) {\n            var self = this,\n                lastOnProgress = {},\n                options = {\n                    debug: this._options.debug,\n                    maxConnections: this._options.maxConnections,\n                    cors: this._options.cors,\n                    paramsStore: this._paramsStore,\n                    endpointStore: this._endpointStore,\n                    chunking: this._options.chunking,\n                    resume: this._options.resume,\n                    blobs: this._options.blobs,\n                    log: qq.bind(self.log, self),\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\n                    onProgress: function(id, name, loaded, total) {\n                        if (loaded < 0 || total < 0) {\n                            return;\n                        }\n\n                        if (lastOnProgress[id]) {\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\n                                self._onProgress(id, name, loaded, total);\n                                self._options.callbacks.onProgress(id, name, loaded, total);\n                            }\n                        }\n                        else {\n                            self._onProgress(id, name, loaded, total);\n                            self._options.callbacks.onProgress(id, name, loaded, total);\n                        }\n\n                        lastOnProgress[id] = {loaded: loaded, total: total};\n\n                    },\n                    onComplete: function(id, name, result, xhr) {\n                        delete lastOnProgress[id];\n\n                        var status = self.getUploads({id: id}).status,\n                            retVal;\n\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\n                        // invoked by the browser multiple times for the same XHR instance with the same state\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\n                        // done this.\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\n                            return;\n                        }\n\n                        retVal = self._onComplete(id, name, result, xhr);\n\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\n                        // until the promise has been fulfilled.\n                        if (retVal instanceof  qq.Promise) {\n                            retVal.done(function() {\n                                self._options.callbacks.onComplete(id, name, result, xhr);\n                            });\n                        }\n                        else {\n                            self._options.callbacks.onComplete(id, name, result, xhr);\n                        }\n                    },\n                    onCancel: function(id, name, cancelFinalizationEffort) {\n                        var promise = new qq.Promise();\n\n                        self._handleCheckedCallback({\n                            name: \"onCancel\",\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\n                            onFailure: promise.failure,\n                            onSuccess: function() {\n                                cancelFinalizationEffort.then(function() {\n                                    self._onCancel(id, name);\n                                });\n\n                                promise.success();\n                            },\n                            identifier: id\n                        });\n\n                        return promise;\n                    },\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\n                    onUpload: function(id, name) {\n                        self._onUpload(id, name);\n                        var onUploadResult = self._options.callbacks.onUpload(id, name);\n\n                        if (qq.isGenericPromise(onUploadResult)) {\n                            self.log(qq.format(\"onUpload for {} returned a Promise - waiting for resolution.\", id));\n                            return onUploadResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunk: function(id, name, chunkData) {\n                        self._onUploadChunk(id, chunkData);\n                        var onUploadChunkResult = self._options.callbacks.onUploadChunk(id, name, chunkData);\n\n                        if (qq.isGenericPromise(onUploadChunkResult)) {\n                            self.log(qq.format(\"onUploadChunk for {}.{} returned a Promise - waiting for resolution.\", id, chunkData.partIndex));\n                            return onUploadChunkResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\n                    },\n                    onResume: function(id, name, chunkData, customResumeData) {\n                        return self._options.callbacks.onResume(id, name, chunkData, customResumeData);\n                    },\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\n                        return self._onAutoRetry.apply(self, arguments);\n                    },\n                    onUuidChanged: function(id, newUuid) {\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\n                        self.setUuid(id, newUuid);\n                    },\n                    getName: qq.bind(self.getName, self),\n                    getUuid: qq.bind(self.getUuid, self),\n                    getSize: qq.bind(self.getSize, self),\n                    setSize: qq.bind(self._setSize, self),\n                    getDataByUuid: function(uuid) {\n                        return self.getUploads({uuid: uuid});\n                    },\n                    isQueued: function(id) {\n                        var status = self.getUploads({id: id}).status;\n                        return status === qq.status.QUEUED ||\n                            status === qq.status.SUBMITTED ||\n                            status === qq.status.UPLOAD_RETRYING ||\n                            status === qq.status.PAUSED;\n                    },\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\n                    getIdsInBatch: self._uploadData.getIdsInBatch,\n                    isInProgress: function(id) {\n                        return self.getUploads({id: id}).status === qq.status.UPLOADING;\n                    },\n                    getCustomResumeData: qq.bind(self._getCustomResumeData, self),\n                    setStatus: function(id, status) {\n                        self._uploadData.setStatus(id, status);\n                    }\n                };\n\n            qq.each(this._options.request, function(prop, val) {\n                options[prop] = val;\n            });\n\n            options.customHeaders = this._customHeadersStore;\n\n            if (additionalOptions) {\n                qq.each(additionalOptions, function(key, val) {\n                    options[key] = val;\n                });\n            }\n\n            return new qq.UploadHandlerController(options, namespace);\n        },\n\n        _fileOrBlobRejected: function(id) {\n            this._netUploadedOrQueued--;\n            this._uploadData.setStatus(id, qq.status.REJECTED);\n        },\n\n        _formatSize: function(bytes) {\n            if (bytes === 0) {\n                return bytes + this._options.text.sizeSymbols[0];\n            }\n            var i = -1;\n            do {\n                bytes = bytes / 1000;\n                i++;\n            } while (bytes > 999);\n\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\n        },\n\n        // Creates an internal object that tracks various properties of each extra button,\n        // and then actually creates the extra button.\n        _generateExtraButtonSpecs: function() {\n            var self = this;\n\n            this._extraButtonSpecs = {};\n\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\n                var multiple = extraButtonOptionEntry.multiple,\n                    validation = qq.extend({}, self._options.validation, true),\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\n\n                if (multiple === undefined) {\n                    multiple = self._options.multiple;\n                }\n\n                if (extraButtonSpec.validation) {\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\n                }\n\n                qq.extend(extraButtonSpec, {\n                    multiple: multiple,\n                    validation: validation\n                }, true);\n\n                self._initExtraButton(extraButtonSpec);\n            });\n        },\n\n        _getButton: function(buttonId) {\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\n\n            if (extraButtonsSpec) {\n                return extraButtonsSpec.element;\n            }\n            else if (buttonId === this._defaultButtonId) {\n                return this._options.button;\n            }\n        },\n\n        /**\n         * Gets the internally used tracking ID for a button.\n         *\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\n         * @private\n         */\n        _getButtonId: function(buttonOrFileInputOrFile) {\n            var inputs, fileInput,\n                fileBlobOrInput = buttonOrFileInputOrFile;\n\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\n            }\n\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\n                if (qq.isFile(fileBlobOrInput)) {\n                    return fileBlobOrInput.qqButtonId;\n                }\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\n\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\n\n                qq.each(inputs, function(idx, input) {\n                    if (input.getAttribute(\"type\") === \"file\") {\n                        fileInput = input;\n                        return false;\n                    }\n                });\n\n                if (fileInput) {\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n            }\n        },\n\n        _getCustomResumeData: function(fileId) {\n            return this._customResumeDataStore.get(fileId);\n        },\n\n        _getNotFinished: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED,\n                    qq.status.SUBMITTING,\n                    qq.status.SUBMITTED,\n                    qq.status.PAUSED\n                ]\n            }).length;\n        },\n\n        // Get the validation options for this button.  Could be the default validation option\n        // or a specific one assigned to this particular button.\n        _getValidationBase: function(buttonId) {\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\n\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\n        },\n\n        _getValidationDescriptor: function(fileWrapper) {\n            if (fileWrapper.file instanceof qq.BlobProxy) {\n                return {\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\n                    size: fileWrapper.file.referenceBlob.size\n                };\n            }\n\n            return {\n                name: this.getUploads({id: fileWrapper.id}).name,\n                size: this.getUploads({id: fileWrapper.id}).size\n            };\n        },\n\n        _getValidationDescriptors: function(fileWrappers) {\n            var self = this,\n                fileDescriptors = [];\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\n            });\n\n            return fileDescriptors;\n        },\n\n        // Allows camera access on either the default or an extra button for iOS devices.\n        _handleCameraAccess: function() {\n            if (this._options.camera.ios && qq.ios()) {\n                var acceptIosCamera = \"image/*;capture=camera\",\n                    button = this._options.camera.button,\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\n                    optionRoot = this._options;\n\n                // If we are not targeting the default button, it is an \"extra\" button\n                if (buttonId && buttonId !== this._defaultButtonId) {\n                    optionRoot = this._extraButtonSpecs[buttonId];\n                }\n\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\n                optionRoot.multiple = false;\n\n                // update the options\n                if (optionRoot.validation.acceptFiles === null) {\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\n                }\n                else {\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\n                }\n\n                // update the already-created button\n                qq.each(this._buttons, function(idx, button) {\n                    if (button.getButtonId() === buttonId) {\n                        button.setMultiple(optionRoot.multiple);\n                        button.setAcceptFiles(optionRoot.acceptFiles);\n\n                        return false;\n                    }\n                });\n            }\n        },\n\n        _handleCheckedCallback: function(details) {\n            var self = this,\n                callbackRetVal = details.callback();\n\n            if (qq.isGenericPromise(callbackRetVal)) {\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\n                return callbackRetVal.then(\n                    function(successParam) {\n                        self.log(details.name + \" promise success for \" + details.identifier);\n                        details.onSuccess(successParam);\n                    },\n                    function() {\n                        if (details.onFailure) {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                            details.onFailure();\n                        }\n                        else {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                        }\n                    });\n            }\n\n            if (callbackRetVal !== false) {\n                details.onSuccess(callbackRetVal);\n            }\n            else {\n                if (details.onFailure) {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\n                    details.onFailure();\n                }\n                else {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\n                }\n            }\n\n            return callbackRetVal;\n        },\n\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\n            var self = this,\n                uuid = qq.getUniqueId(),\n                size = -1,\n                name = qq.getFilename(file),\n                actualFile = file.blob || file,\n                handler = this._customNewFileHandler ?\n                    this._customNewFileHandler :\n                    qq.bind(self._handleNewFileGeneric, self);\n\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\n                size = actualFile.size;\n            }\n\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\n                uploadData: self._uploadData,\n                paramsStore: self._paramsStore,\n                addFileToHandler: function(id, file) {\n                    self._handler.add(id, file);\n                    self._netUploadedOrQueued++;\n                    self._trackButton(id);\n                }\n            });\n        },\n\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\n\n            this._handler.add(id, file);\n            this._trackButton(id);\n\n            this._netUploadedOrQueued++;\n\n            fileList.push({id: id, file: file});\n        },\n\n        _handlePasteSuccess: function(blob, extSuppliedName) {\n            var extension = blob.type.split(\"/\")[1],\n                name = extSuppliedName;\n\n            /*jshint eqeqeq: true, eqnull: true*/\n            if (name == null) {\n                name = this._options.paste.defaultName;\n            }\n\n            name += \".\" + extension;\n\n            this.addFiles({\n                name: name,\n                blob: blob\n            });\n        },\n\n        _handleDeleteSuccess: function(id) {\n            if (this.getUploads({id: id}).status !== qq.status.DELETED) {\n                var name = this.getName(id);\n\n                this._netUploadedOrQueued--;\n                this._netUploaded--;\n                this._handler.expunge(id);\n                this._uploadData.setStatus(id, qq.status.DELETED);\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\n            }\n        },\n\n        _handleDeleteFailed: function(id, xhrOrXdr) {\n            var name = this.getName(id);\n\n            this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\n            this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\n\n            // Check first if xhrOrXdr is actually passed or valid\n            // For error reporting, we only have access to the response status if this is not\n            // an `XDomainRequest`.\n            if (!xhrOrXdr || xhrOrXdr.withCredentials === undefined) {\n                this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\n            }\n            else {\n                this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\n            }\n        },\n\n        // Creates an extra button element\n        _initExtraButton: function(spec) {\n            var button = this._createUploadButton({\n                accept: spec.validation.acceptFiles,\n                allowedExtensions: spec.validation.allowedExtensions,\n                element: spec.element,\n                folders: spec.folders,\n                multiple: spec.multiple,\n                title: spec.fileInputTitle\n            });\n\n            this._extraButtonSpecs[button.getButtonId()] = spec;\n        },\n\n        _initFormSupportAndParams: function() {\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n            );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore = this._createStore(\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\n                );\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\n                }\n            }\n            else {\n                this._paramsStore = this._createStore(this._options.request.params);\n            }\n        },\n\n        _isDeletePossible: function() {\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\n                return false;\n            }\n\n            if (this._options.cors.expected) {\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\n                    return true;\n                }\n\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            return true;\n        },\n\n        _isAllowedExtension: function(allowed, fileName) {\n            var valid = false;\n\n            if (!allowed.length) {\n                return true;\n            }\n\n            qq.each(allowed, function(idx, allowedExt) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExt)) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\n\n                    if (fileName.match(extRegex) != null) {\n                        valid = true;\n                        return false;\n                    }\n                }\n            });\n\n            return valid;\n        },\n\n        /**\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\n         *\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\n         * @param maybeNameOrNames names of the items that have failed, if applicable\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\n         * @private\n         */\n        _itemError: function(code, maybeNameOrNames, item) {\n            var message = this._options.messages[code],\n                allowedExtensions = [],\n                names = [].concat(maybeNameOrNames),\n                name = names[0],\n                buttonId = this._getButtonId(item),\n                validationBase = this._getValidationBase(buttonId),\n                extensionsForMessage, placeholderMatch;\n\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExtension)) {\n                    allowedExtensions.push(allowedExtension);\n                }\n            });\n\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\n\n            r(\"{file}\", this._options.formatFileName(name));\n            r(\"{extensions}\", extensionsForMessage);\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\n\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\n            if (placeholderMatch !== null) {\n                qq.each(placeholderMatch, function(idx, placeholder) {\n                    r(placeholder, names[idx]);\n                });\n            }\n\n            this._options.callbacks.onError(null, name, message, undefined);\n\n            return message;\n        },\n\n        /**\n         * Conditionally orders a manual retry of a failed upload.\n         *\n         * @param id File ID of the failed upload\n         * @param callback Optional callback to invoke if a retry is prudent.\n         * In lieu of asking the upload handler to retry.\n         * @returns {boolean} true if a manual retry will occur\n         * @private\n         */\n        _manualRetry: function(id, callback) {\n            if (this._onBeforeManualRetry(id)) {\n                this._netUploadedOrQueued++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n\n                if (callback) {\n                    callback(id);\n                }\n                else {\n                    this._handler.retry(id);\n                }\n\n                return true;\n            }\n        },\n\n        _maybeAllComplete: function(id, status) {\n            var self = this,\n                notFinished = this._getNotFinished();\n\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\n                this._succeededSinceLastAllComplete.push(id);\n            }\n            else if (status === qq.status.UPLOAD_FAILED) {\n                this._failedSinceLastAllComplete.push(id);\n            }\n\n            if (notFinished === 0 &&\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\n                setTimeout(function() {\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\n                }, 0);\n            }\n        },\n\n        _maybeHandleIos8SafariWorkaround: function() {\n            var self = this;\n\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n                setTimeout(function() {\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\n                }, 0);\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\n            }\n        },\n\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\n            // Assuming no one will actually set the response code to something other than 200\n            // and still set 'success' to true...\n            if (!response.success) {\n                if (xhr && xhr.status !== 200 && !response.error) {\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\n                }\n                else {\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\n                }\n            }\n        },\n\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\n            var self = this;\n\n            if (items.length > index) {\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\n                    setTimeout(function() {\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\n                            buttonId = self._getButtonId(items[index].file),\n                            button = self._getButton(buttonId);\n\n                        self._handleCheckedCallback({\n                            name: \"onValidate\",\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\n                        });\n                    }, 0);\n                }\n                else if (!validItem) {\n                    for (; index < items.length; index++) {\n                        self._fileOrBlobRejected(items[index].id);\n                    }\n                }\n            }\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\n\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n        },\n\n        /**\n         * Attempt to automatically retry a failed upload.\n         *\n         * @param id The file ID of the failed upload\n         * @param name The name of the file associated with the failed upload\n         * @param responseJSON Response from the server, parsed into a javascript object\n         * @param xhr Ajax transport used to send the failed request\n         * @param callback Optional callback to be invoked if a retry is prudent.\n         * Invoked in lieu of asking the upload handler to retry.\n         * @returns {boolean} true if an auto-retry will occur\n         * @private\n         */\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\n            var self = this;\n\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\n\n            if (self._shouldAutoRetry(id)) {\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\n\n                self._maybeParseAndSendUploadError.apply(self, arguments);\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\n                self._onBeforeAutoRetry(id, name);\n\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n                self._retryTimeouts[id] = setTimeout(function() {\n                    self.log(\"Starting retry for \" + name + \"...\");\n\n                    if (callback) {\n                        callback(id);\n                    }\n                    else {\n                        self._handler.retry(id);\n                    }\n                }, retryWaitPeriod);\n\n                return true;\n            }\n        },\n\n        _onBeforeAutoRetry: function(id, name) {\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            var itemLimit = this._currentItemLimit,\n                fileName;\n\n            if (this._preventRetries[id]) {\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\n                return false;\n            }\n            else if (this._handler.isValid(id)) {\n                fileName = this.getName(id);\n\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\n                    return false;\n                }\n\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\n                    this._itemError(\"retryFailTooManyItems\");\n                    return false;\n                }\n\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\n                return true;\n            }\n            else {\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\n                return false;\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._netUploadedOrQueued--;\n\n            clearTimeout(this._retryTimeouts[id]);\n\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\n                this._storedIds.splice(storedItemIndex, 1);\n            }\n\n            this._uploadData.setStatus(id, qq.status.CANCELED);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            if (!result.success) {\n                this._netUploadedOrQueued--;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\n\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\n                    this._preventRetries[id] = true;\n                }\n            }\n            else {\n                if (result.thumbnailUrl) {\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\n                }\n\n                this._netUploaded++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\n            }\n\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\n\n            return result.success ? true : false;\n        },\n\n        _onDelete: function(id) {\n            this._uploadData.setStatus(id, qq.status.DELETING);\n        },\n\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\n            var name = this.getName(id);\n\n            if (isError) {\n                this._handleDeleteFailed(id, xhrOrXdr);\n            }\n            else {\n                this._handleDeleteSuccess(id);\n            }\n        },\n\n        _onInputChange: function(input) {\n            var fileIndex;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\n                    this._annotateWithButtonId(input.files[fileIndex], input);\n                }\n\n                this.addFiles(input.files);\n            }\n            // Android 2.3.x will fire `onchange` even if no file has been selected\n            else if (input.value.length > 0) {\n                this.addFiles(input);\n            }\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n        },\n\n        _onProgress: function(id, name, loaded, total) {\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\n        },\n\n        _onSubmit: function(id, name) {\n            //nothing to do yet in core uploader\n        },\n\n        _onSubmitCallbackSuccess: function(id, name) {\n            this._onSubmit.apply(this, arguments);\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\n            this._onSubmitted.apply(this, arguments);\n\n            if (this._options.autoUpload) {\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n                this._uploadFile(id);\n            }\n            else {\n                this._storeForLater(id);\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n            }\n        },\n\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\n            var uuid = this.getUuid(id),\n                adjustedOnSuccessCallback;\n\n            if (onSuccessCallback) {\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\n            }\n\n            if (this._isDeletePossible()) {\n                this._handleCheckedCallback({\n                    name: \"onSubmitDelete\",\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\n                    onSuccess: adjustedOnSuccessCallback ||\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\n                    identifier: id\n                });\n                return true;\n            }\n            else {\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\n                return false;\n            }\n        },\n\n        _onSubmitted: function(id) {\n            //nothing to do in the base uploader\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._options.callbacks.onTotalProgress(loaded, total);\n        },\n\n        _onUploadPrep: function(id) {\n            // nothing to do in the core uploader for now\n        },\n\n        _onUpload: function(id, name) {\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            //nothing to do in the base uploader\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\n            if (newStatus === qq.status.PAUSED) {\n                clearTimeout(this._retryTimeouts[id]);\n            }\n        },\n\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\n            var self = this;\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                self._fileOrBlobRejected(fileWrapper.id);\n            });\n        },\n\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\n            var errorMessage,\n                itemLimit = this._currentItemLimit,\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\n\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\n                if (items.length > 0) {\n                    this._handleCheckedCallback({\n                        name: \"onValidate\",\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\n                    });\n                }\n                else {\n                    this._itemError(\"noFilesError\");\n                }\n            }\n            else {\n                this._onValidateBatchCallbackFailure(items);\n                errorMessage = this._options.messages.tooManyItemsError\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\n                this._batchError(errorMessage);\n            }\n        },\n\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\n            var nextIndex = index + 1;\n\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\n\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n        },\n\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\n            var self = this,\n                nextIndex = index + 1,\n                validationDescriptor = this._getValidationDescriptor(items[index]);\n\n            this._validateFileOrBlobData(items[index], validationDescriptor)\n                .then(\n                function() {\n                    self._upload(items[index].id, params, endpoint);\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\n                },\n                function() {\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n                }\n            );\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            if (items.length === 0) {\n                this._itemError(\"noFilesError\");\n                return;\n            }\n\n            var validationDescriptors = this._getValidationDescriptors(items),\n                buttonId = this._getButtonId(items[0].file),\n                button = this._getButton(buttonId);\n\n            this._handleCheckedCallback({\n                name: \"onValidateBatch\",\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\n                identifier: \"batch validation\"\n            });\n        },\n\n        _preventLeaveInProgress: function() {\n            var self = this;\n\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\n                if (self.getInProgress()) {\n                    e = e || window.event;\n                    // for ie, ff\n                    e.returnValue = self._options.messages.onLeave;\n                    // for webkit\n                    return self._options.messages.onLeave;\n                }\n            });\n        },\n\n        // Attempts to refresh session data only if the `qq.Session` module exists\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\n        // callback will be invoked once the refresh is complete.\n        _refreshSessionData: function() {\n            var self = this,\n                options = this._options.session;\n\n            /* jshint eqnull:true */\n            if (qq.Session && this._options.session.endpoint != null) {\n                if (!this._session) {\n                    qq.extend(options, {cors: this._options.cors});\n\n                    options.log = qq.bind(this.log, this);\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\n\n                    this._session = new qq.Session(options);\n                }\n\n                setTimeout(function() {\n                    self._session.refresh().then(function(response, xhrOrXdr) {\n                        self._sessionRequestComplete();\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\n\n                    }, function(response, xhrOrXdr) {\n\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\n                    });\n                }, 0);\n            }\n        },\n\n        _sessionRequestComplete: function() {},\n\n        _setSize: function(id, newSize) {\n            this._uploadData.updateSize(id, newSize);\n            this._totalProgress && this._totalProgress.onNewSize(id);\n        },\n\n        _shouldAutoRetry: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            /*jshint laxbreak: true */\n            if (!this._preventRetries[id]\n                && this._options.retry.enableAuto\n                && uploadData.status !== qq.status.PAUSED) {\n\n                if (this._autoRetries[id] === undefined) {\n                    this._autoRetries[id] = 0;\n                }\n\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\n                    this._autoRetries[id] += 1;\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        _storeForLater: function(id) {\n            this._storedIds.push(id);\n        },\n\n        // Maps a file with the button that was used to select it.\n        _trackButton: function(id) {\n            var buttonId;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                buttonId = this._handler.getFile(id).qqButtonId;\n            }\n            else {\n                buttonId = this._getButtonId(this._handler.getInput(id));\n            }\n\n            if (buttonId) {\n                this._buttonIdsForFileIds[id] = buttonId;\n            }\n        },\n\n        _updateFormSupportAndParams: function(formElementOrId) {\n            this._options.form.element = formElementOrId;\n\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n                );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this.setEndpoint(this._formSupport.newEndpoint);\n                }\n            }\n        },\n\n        _upload: function(id, params, endpoint) {\n            var name = this.getName(id);\n\n            if (params) {\n                this.setParams(params, id);\n            }\n\n            if (endpoint) {\n                this.setEndpoint(endpoint, id);\n            }\n\n            this._handleCheckedCallback({\n                name: \"onSubmit\",\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\n                identifier: id\n            });\n        },\n\n        _uploadFile: function(id) {\n            if (!this._handler.upload(id)) {\n                this._uploadData.setStatus(id, qq.status.QUEUED);\n            }\n        },\n\n        _uploadStoredFiles: function() {\n            var idToUpload, stillSubmitting,\n                self = this;\n\n            while (this._storedIds.length) {\n                idToUpload = this._storedIds.shift();\n                this._uploadFile(idToUpload);\n            }\n\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\n            if (stillSubmitting) {\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\n                setTimeout(function() {\n                    self._uploadStoredFiles();\n                }, 1000);\n            }\n        },\n\n        /**\n         * Performs some internal validation checks on an item, defined in the `validation` option.\n         *\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\n         * @private\n         */\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\n            var self = this,\n                file = (function() {\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\n                        return fileWrapper.file.referenceBlob;\n                    }\n                    return fileWrapper.file;\n                }()),\n                name = validationDescriptor.name,\n                size = validationDescriptor.size,\n                buttonId = this._getButtonId(fileWrapper.file),\n                validationBase = this._getValidationBase(buttonId),\n                validityChecker = new qq.Promise();\n\n            validityChecker.then(\n                function() {},\n                function() {\n                    self._fileOrBlobRejected(fileWrapper.id, name);\n                });\n\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\n                this._itemError(\"typeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (!this._options.validation.allowEmpty && size === 0) {\n                this._itemError(\"emptyError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\n                this._itemError(\"sizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && size < validationBase.minSizeLimit) {\n                this._itemError(\"minSizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\n                    validityChecker.success,\n                    function(errorCode) {\n                        self._itemError(errorCode + \"ImageError\", name, file);\n                        validityChecker.failure();\n                    }\n                );\n            }\n            else {\n                validityChecker.success();\n            }\n\n            return validityChecker;\n        },\n\n        _wrapCallbacks: function() {\n            var self, safeCallback, prop;\n\n            self = this;\n\n            safeCallback = function(name, callback, args) {\n                var errorMsg;\n\n                try {\n                    return callback.apply(self, args);\n                }\n                catch (exception) {\n                    errorMsg = exception.message || exception.toString();\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\n                }\n            };\n\n            /* jshint forin: false, loopfunc: true */\n            for (prop in this._options.callbacks) {\n                (function() {\n                    var callbackName, callbackFunc;\n                    callbackName = prop;\n                    callbackFunc = self._options.callbacks[callbackName];\n                    self._options.callbacks[callbackName] = function() {\n                        return safeCallback(callbackName, callbackFunc, arguments);\n                    };\n                }());\n            }\n        }\n    };\n}());\n","/*globals qq*/\n(function() {\n    \"use strict\";\n\n    qq.FineUploaderBasic = function(o) {\n        var self = this;\n\n        // These options define FineUploaderBasic mode.\n        this._options = {\n            debug: false,\n            button: null,\n            multiple: true,\n            maxConnections: 3,\n            disableCancelForFormUploads: false,\n            autoUpload: true,\n\n            request: {\n                customHeaders: {},\n                endpoint: \"/server/upload\",\n                filenameParam: \"qqfilename\",\n                forceMultipart: true,\n                inputName: \"qqfile\",\n                method: \"POST\",\n                omitDefaultParams: false,\n                params: {},\n                paramsInBody: true,\n                requireSuccessJson: true,\n                totalFileSizeName: \"qqtotalfilesize\",\n                uuidName: \"qquuid\"\n            },\n\n            validation: {\n                allowedExtensions: [],\n                sizeLimit: 0,\n                minSizeLimit: 0,\n                itemLimit: 0,\n                stopOnFirstInvalidFile: true,\n                acceptFiles: null,\n                image: {\n                    maxHeight: 0,\n                    maxWidth: 0,\n                    minHeight: 0,\n                    minWidth: 0\n                },\n                allowEmpty: false\n            },\n\n            callbacks: {\n                onSubmit: function(id, name) {},\n                onSubmitted: function(id, name) {},\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\n                onAllComplete: function(successful, failed) {},\n                onCancel: function(id, name) {},\n                onUpload: function(id, name) {},\n                onUploadChunk: function(id, name, chunkData) {},\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\n                onResume: function(id, fileName, chunkData, customResumeData) {},\n                onProgress: function(id, name, loaded, total) {},\n                onTotalProgress: function(loaded, total) {},\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\n                onAutoRetry: function(id, name, attemptNumber) {},\n                onManualRetry: function(id, name) {},\n                onValidateBatch: function(fileOrBlobData) {},\n                onValidate: function(fileOrBlobData) {},\n                onSubmitDelete: function(id) {},\n                onDelete: function(id) {},\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\n                onPasteReceived: function(blob) {},\n                onStatusChange: function(id, oldStatus, newStatus) {},\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\n            },\n\n            messages: {\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\n                emptyError: \"{file} is empty, please select files again without it.\",\n                noFilesError: \"No files to upload.\",\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\n                maxHeightImageError: \"Image is too tall.\",\n                maxWidthImageError: \"Image is too wide.\",\n                minHeightImageError: \"Image is not tall enough.\",\n                minWidthImageError: \"Image is not wide enough.\",\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\n            },\n\n            retry: {\n                enableAuto: false,\n                maxAutoAttempts: 3,\n                autoAttemptDelay: 5,\n                preventRetryResponseProperty: \"preventRetry\"\n            },\n\n            classes: {\n                buttonHover: \"qq-upload-button-hover\",\n                buttonFocus: \"qq-upload-button-focus\"\n            },\n\n            chunking: {\n                enabled: false,\n                concurrent: {\n                    enabled: false\n                },\n                mandatory: false,\n                paramNames: {\n                    partIndex: \"qqpartindex\",\n                    partByteOffset: \"qqpartbyteoffset\",\n                    chunkSize: \"qqchunksize\",\n                    totalFileSize: \"qqtotalfilesize\",\n                    totalParts: \"qqtotalparts\"\n                },\n                partSize: 2000000,\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\n                success: {\n                    endpoint: null,\n\n                    headers: function(id) {\n                        return null;\n                    },\n\n                    jsonPayload: false,\n\n                    method: \"POST\",\n\n                    params: function(id) {\n                        return null;\n                    },\n\n                    resetOnStatus: []\n                }\n            },\n\n            resume: {\n                enabled: false,\n                recordsExpireIn: 7, //days\n                paramNames: {\n                    resuming: \"qqresume\"\n                },\n                customKeys: function(fileId) {\n                    return [];\n                }\n            },\n\n            formatFileName: function(fileOrBlobName) {\n                return fileOrBlobName;\n            },\n\n            text: {\n                defaultResponseError: \"Upload failure reason unknown\",\n                fileInputTitle: \"file input\",\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\n            },\n\n            deleteFile: {\n                enabled: false,\n                method: \"DELETE\",\n                endpoint: \"/server/upload\",\n                customHeaders: {},\n                params: {}\n            },\n\n            cors: {\n                expected: false,\n                sendCredentials: false,\n                allowXdr: false\n            },\n\n            blobs: {\n                defaultName: \"misc_data\"\n            },\n\n            paste: {\n                targetElement: null,\n                defaultName: \"pasted_image\"\n            },\n\n            camera: {\n                ios: false,\n\n                // if ios is true: button is null means target the default button, otherwise target the button specified\n                button: null\n            },\n\n            // This refers to additional upload buttons to be handled by Fine Uploader.\n            // Each element is an object, containing `element` as the only required\n            // property.  The `element` must be a container that will ultimately\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\n            // Optional properties of each object include `multiple`, `validation`,\n            // and `folders`.\n            extraButtons: [],\n\n            // Depends on the session module.  Used to query the server for an initial file list\n            // during initialization and optionally after a `reset`.\n            session: {\n                endpoint: null,\n                params: {},\n                customHeaders: {},\n                refreshOnReset: true\n            },\n\n            // Send parameters associated with an existing form along with the files\n            form: {\n                // Element ID, HTMLElement, or null\n                element: \"qq-form\",\n\n                // Overrides the base `autoUpload`, unless `element` is null.\n                autoUpload: false,\n\n                // true = upload files on form submission (and squelch submit event)\n                interceptSubmit: true\n            },\n\n            // scale images client side, upload a new file for each scaled version\n            scaling: {\n                customResizer: null,\n\n                // send the original file as well\n                sendOriginal: true,\n\n                // fox orientation for scaled images\n                orient: true,\n\n                // If null, scaled image type will match reference image type.  This value will be referred to\n                // for any size record that does not specific a type.\n                defaultType: null,\n\n                defaultQuality: 80,\n\n                failureText: \"Failed to scale\",\n\n                includeExif: false,\n\n                // metadata about each requested scaled version\n                sizes: []\n            },\n\n            workarounds: {\n                iosEmptyVideos: true,\n                ios8SafariUploads: true,\n                ios8BrowserCrash: false\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(this._options, o, true);\n\n        this._buttons = [];\n        this._extraButtonSpecs = {};\n        this._buttonIdsForFileIds = [];\n\n        this._wrapCallbacks();\n        this._disposeSupport =  new qq.DisposeSupport();\n\n        this._storedIds = [];\n        this._autoRetries = [];\n        this._retryTimeouts = [];\n        this._preventRetries = [];\n        this._thumbnailUrls = [];\n\n        this._netUploadedOrQueued = 0;\n        this._netUploaded = 0;\n        this._uploadData = this._createUploadDataTracker();\n\n        this._initFormSupportAndParams();\n\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\n\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\n\n        this._endpointStore = this._createStore(this._options.request.endpoint);\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\n\n        this._handler = this._createUploadHandler();\n\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\n\n        if (this._options.button) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._options.button,\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._generateExtraButtonSpecs();\n\n        this._handleCameraAccess();\n\n        if (this._options.paste.targetElement) {\n            if (qq.PasteSupport) {\n                this._pasteHandler = this._createPasteHandler();\n            }\n            else {\n                this.log(\"Paste support module not found\", \"error\");\n            }\n        }\n\n        this._preventLeaveInProgress();\n\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\n        this._refreshSessionData();\n\n        this._succeededSinceLastAllComplete = [];\n        this._failedSinceLastAllComplete = [];\n\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\n        if (this._scaler.enabled) {\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\n        }\n\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\n            this._totalProgress = new qq.TotalProgress(\n                qq.bind(this._onTotalProgress, this),\n\n                function(id) {\n                    var entry = self._uploadData.retrieve({id: id});\n                    return (entry && entry.size) || 0;\n                }\n            );\n        }\n\n        this._currentItemLimit = this._options.validation.itemLimit;\n\n        this._customResumeDataStore = this._createStore();\n    };\n\n    // Define the private & public API methods.\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\n}());\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Base upload handler module.  Controls more specific handlers.\n *\n * @param o Options.  Passed along to the specific handler submodule as well.\n * @param namespace [optional] Namespace for the specific handler.\n */\nqq.UploadHandlerController = function(o, namespace) {\n    \"use strict\";\n\n    var controller = this,\n        chunkingPossible = false,\n        concurrentChunkingPossible = false,\n        chunking, preventRetryResponse, log, handler,\n\n    options = {\n        paramsStore: {},\n        maxConnections: 3, // maximum number of concurrent uploads\n        chunking: {\n            enabled: false,\n            multiple: {\n                enabled: false\n            }\n        },\n        log: function(str, level) {},\n        onProgress: function(id, fileName, loaded, total) {},\n        onComplete: function(id, fileName, response, xhr) {},\n        onCancel: function(id, fileName) {},\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\n        onUpload: function(id, fileName) {},\n        onUploadChunk: function(id, fileName, chunkData) {},\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\n        onAutoRetry: function(id, fileName, response, xhr) {},\n        onResume: function(id, fileName, chunkData, customResumeData) {},\n        onUuidChanged: function(id, newUuid) {},\n        getName: function(id) {},\n        setSize: function(id, newSize) {},\n        isQueued: function(id) {},\n        getIdsInProxyGroup: function(id) {},\n        getIdsInBatch: function(id) {},\n        isInProgress: function(id) {}\n    },\n\n    chunked = {\n        // Called when each chunk has uploaded successfully\n        done: function(id, chunkIdx, response, xhr) {\n            var chunkData = handler._getChunkData(id, chunkIdx);\n\n            handler._getFileState(id).attemptingResume = false;\n\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\n            handler._getFileState(id).loaded += chunkData.size;\n\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\n        },\n\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\n        // logic associated with closing out the file, such as combining the chunks.\n        finalize: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id);\n\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\n            handler.finalizeChunks(id).then(\n                function(response, xhr) {\n                    log(\"Finalize successful for \" + id);\n\n                    var normaizedResponse = upload.normalizeResponse(response, true);\n\n                    options.onProgress(id, name, size, size);\n                    handler._maybeDeletePersistedChunkData(id);\n                    upload.cleanup(id, normaizedResponse, xhr);\n                },\n                function(response, xhr) {\n                    var normalizedResponse = upload.normalizeResponse(response, false);\n\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normalizedResponse.error, \"error\");\n\n                    if (\n                        normalizedResponse.reset\n                        || (xhr && options.chunking.success.resetOnStatus.indexOf(xhr.status) >= 0)\n                    ) {\n                        chunked.reset(id);\n                    }\n\n                    if (!options.onAutoRetry(id, name, normalizedResponse, xhr)) {\n                        upload.cleanup(id, normalizedResponse, xhr);\n                    }\n                }\n            );\n        },\n\n        handleFailure: function(chunkIdx, id, response, xhr) {\n            var name = options.getName(id);\n\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\n\n            handler.clearCachedChunk(id, chunkIdx);\n\n            var responseToReport = upload.normalizeResponse(response, false),\n                inProgressIdx;\n\n            if (responseToReport.reset) {\n                chunked.reset(id);\n            }\n            else {\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\n                if (inProgressIdx >= 0) {\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\n                }\n            }\n\n            // We may have aborted all other in-progress chunks for this file due to a failure.\n            // If so, ignore the failures associated with those aborts.\n            if (!handler._getFileState(id).temp.ignoreFailure) {\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\n                // chunks since they will be explicitly aborted\n                if (concurrentChunkingPossible) {\n                    handler._getFileState(id).temp.ignoreFailure = true;\n\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\n                        ckXhr.abort();\n                        // Flag the transport, in case we are waiting for some other async operation\n                        // to complete before attempting to upload the chunk\n                        ckXhr._cancelled = true;\n                    });\n\n                    // We must indicate that all aborted chunks are no longer in progress\n                    handler.moveInProgressToRemaining(id);\n\n                    // Free up any connections used by these chunks, but don't allow any\n                    // other files to take up the connections (until we have exhausted all auto-retries)\n                    connectionManager.free(id, true);\n                }\n\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\n                    // is a failure or not.\n                    upload.cleanup(id, responseToReport, xhr);\n                }\n            }\n        },\n\n        hasMoreParts: function(id) {\n            return !!handler._getFileState(id).chunking.remaining.length;\n        },\n\n        nextPart: function(id) {\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\n\n            if (nextIdx >= handler._getTotalChunks(id)) {\n                nextIdx = null;\n            }\n\n            return nextIdx;\n        },\n\n        reset: function(id) {\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\n\n            handler._maybeDeletePersistedChunkData(id);\n            handler.reevaluateChunking(id);\n            handler._getFileState(id).loaded = 0;\n            handler._getFileState(id).attemptingResume = false;\n        },\n\n        sendNext: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id),\n                chunkIdx = chunked.nextPart(id),\n                chunkData = handler._getChunkData(id, chunkIdx),\n                fileState = handler._getFileState(id),\n                resuming = fileState.attemptingResume,\n                inProgressChunks = fileState.chunking.inProgress || [];\n\n            if (fileState.loaded == null) {\n                fileState.loaded = 0;\n            }\n\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\n            if (resuming && options.onResume(id, name, chunkData, fileState.customResumeData) === false) {\n                chunked.reset(id);\n                chunkIdx = chunked.nextPart(id);\n                chunkData = handler._getChunkData(id, chunkIdx);\n                resuming = false;\n            }\n\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\n            if (chunkIdx == null && inProgressChunks.length === 0) {\n                chunked.finalize(id);\n            }\n\n            // Send the next chunk\n            else {\n                inProgressChunks.push(chunkIdx);\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\n\n                if (concurrentChunkingPossible) {\n                    connectionManager.open(id, chunkIdx);\n                }\n\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\n                    chunked.sendNext(id);\n                }\n\n                if (chunkData.blob.size === 0) {\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\n                }\n\n                var onUploadChunkPromise = options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\n\n                onUploadChunkPromise.then(\n                    function(requestOverrides) {\n                        if (!options.isInProgress(id)) {\n                            log(qq.format(\"Not sending chunked upload request for item {}.{} - no longer in progress.\", id, chunkIdx));\n                        }\n                        else {\n                            log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\n\n                            var uploadChunkData = {\n                                chunkIdx: chunkIdx,\n                                id: id,\n                                overrides: requestOverrides,\n                                resuming: resuming\n                            };\n\n                            handler.uploadChunk(uploadChunkData).then(\n                                // upload chunk success\n                                function success(response, xhr) {\n                                    log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\n\n                                    handler.clearCachedChunk(id, chunkIdx);\n\n                                    var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\n                                        responseToReport = upload.normalizeResponse(response, true),\n                                        inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\n\n                                    log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\n\n                                    chunked.done(id, chunkIdx, responseToReport, xhr);\n\n                                    if (inProgressChunkIdx >= 0) {\n                                        inProgressChunks.splice(inProgressChunkIdx, 1);\n                                    }\n\n                                    handler._maybePersistChunkedState(id);\n\n                                    if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\n                                        chunked.finalize(id);\n                                    }\n                                    else if (chunked.hasMoreParts(id)) {\n                                        chunked.sendNext(id);\n                                    }\n                                    else {\n                                        log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\n                                    }\n                                },\n\n                                // upload chunk failure\n                                function failure(response, xhr) {\n                                    chunked.handleFailure(chunkIdx, id, response, xhr);\n                                }\n                            )\n                                .done(function () {\n                                    handler.clearXhr(id, chunkIdx);\n                                });\n                        }\n                    },\n\n                    function(error) {\n                        chunked.handleFailure(chunkIdx, id, error, null);\n                    }\n                );\n            }\n        }\n    },\n\n    connectionManager = {\n        _open: [],\n        _openChunks: {},\n        _waiting: [],\n\n        available: function() {\n            var max = options.maxConnections,\n                openChunkEntriesCount = 0,\n                openChunksCount = 0;\n\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\n                openChunkEntriesCount++;\n                openChunksCount += openChunkIndexes.length;\n            });\n\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\n        },\n\n        /**\n         * Removes element from queue, starts upload of next\n         */\n        free: function(id, dontAllowNext) {\n            var allowNext = !dontAllowNext,\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\n                nextId;\n\n            delete connectionManager._openChunks[id];\n\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\n                delete handler._getFileState(id).file;\n            }\n\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\n            if (waitingIndex >= 0) {\n                connectionManager._waiting.splice(waitingIndex, 1);\n            }\n            // If this file was consuming a connection, allow the next file to be uploaded\n            else if (allowNext && connectionsIndex >= 0) {\n                connectionManager._open.splice(connectionsIndex, 1);\n\n                nextId = connectionManager._waiting.shift();\n                if (nextId >= 0) {\n                    connectionManager._open.push(nextId);\n                    upload.start(nextId);\n                }\n            }\n        },\n\n        getWaitingOrConnected: function() {\n            var waitingOrConnected = [];\n\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\n                if (chunks && chunks.length) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // For non-chunked files, only one connection will be consumed per file.\n            // This is where we aggregate those file IDs.\n            qq.each(connectionManager._open, function(idx, fileId) {\n                if (!connectionManager._openChunks[fileId]) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // There may be files waiting for a connection.\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\n\n            return waitingOrConnected;\n        },\n\n        isUsingConnection: function(id) {\n            return qq.indexOf(connectionManager._open, id) >= 0;\n        },\n\n        open: function(id, chunkIdx) {\n            if (chunkIdx == null) {\n                connectionManager._waiting.push(id);\n            }\n\n            if (connectionManager.available()) {\n                if (chunkIdx == null) {\n                    connectionManager._waiting.pop();\n                    connectionManager._open.push(id);\n                }\n                else {\n                    (function() {\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\n                        openChunksEntry.push(chunkIdx);\n                        connectionManager._openChunks[id] = openChunksEntry;\n                    }());\n                }\n\n                return true;\n            }\n\n            return false;\n        },\n\n        reset: function() {\n            connectionManager._waiting = [];\n            connectionManager._open = [];\n        }\n    },\n\n    simple = {\n        send: function(id, name) {\n            handler._getFileState(id).loaded = 0;\n\n            log(\"Sending simple upload request for \" + id);\n            handler.uploadFile(id).then(\n                function(response, optXhr) {\n                    log(\"Simple upload request succeeded for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, true),\n                        size = options.getSize(id);\n\n                    options.onProgress(id, name, size, size);\n                    upload.maybeNewUuid(id, responseToReport);\n                    upload.cleanup(id, responseToReport, optXhr);\n                },\n\n                function(response, optXhr) {\n                    log(\"Simple upload request failed for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, false);\n\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\n                        upload.cleanup(id, responseToReport, optXhr);\n                    }\n                }\n            );\n        }\n    },\n\n    upload = {\n        cancel: function(id) {\n            log(\"Cancelling \" + id);\n            options.paramsStore.remove(id);\n            connectionManager.free(id);\n        },\n\n        cleanup: function(id, response, optXhr) {\n            var name = options.getName(id);\n\n            options.onComplete(id, name, response, optXhr);\n\n            if (handler._getFileState(id)) {\n                handler._clearXhrs && handler._clearXhrs(id);\n            }\n\n            connectionManager.free(id);\n        },\n\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\n        // if none of these are available for the ID\n        getProxyOrBlob: function(id) {\n            return (handler.getProxy && handler.getProxy(id)) ||\n                (handler.getFile && handler.getFile(id));\n        },\n\n        initHandler: function() {\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\n\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\n                options,\n                {\n                    getCustomResumeData: options.getCustomResumeData,\n                    getDataByUuid: options.getDataByUuid,\n                    getName: options.getName,\n                    getSize: options.getSize,\n                    getUuid: options.getUuid,\n                    log: log,\n                    onCancel: options.onCancel,\n                    onProgress: options.onProgress,\n                    onUuidChanged: options.onUuidChanged\n                }\n            );\n\n            if (handler._removeExpiredChunkingRecords) {\n                handler._removeExpiredChunkingRecords();\n            }\n        },\n\n        isDeferredEligibleForUpload: function(id) {\n            return options.isQueued(id);\n        },\n\n        // For Blobs that are part of a group of generated images, along with a reference image,\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\n        // even if some async processing must be completed on one or more Blobs first.\n        maybeDefer: function(id, blob) {\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\n            // and then submit the upload to the specific handler once the blob is available.\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\n\n                // Blob creation may take some time, so the caller may want to update the\n                // UI to indicate that an operation is in progress, even before the actual\n                // upload begins and an onUpload callback is invoked.\n                options.onUploadPrep(id);\n\n                log(\"Attempting to generate a blob on-demand for \" + id);\n                blob.create().then(function(generatedBlob) {\n                    log(\"Generated an on-demand blob for \" + id);\n\n                    // Update record associated with this file by providing the generated Blob\n                    handler.updateBlob(id, generatedBlob);\n\n                    // Propagate the size for this generated Blob\n                    options.setSize(id, generatedBlob.size);\n\n                    // Order handler to recalculate chunking possibility, if applicable\n                    handler.reevaluateChunking(id);\n\n                    upload.maybeSendDeferredFiles(id);\n                },\n\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\n                function(errorMessage) {\n                    var errorResponse = {};\n\n                    if (errorMessage) {\n                        errorResponse.error = errorMessage;\n                    }\n\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\n\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\n                    upload.maybeSendDeferredFiles(id);\n                    connectionManager.free(id);\n                });\n            }\n            else {\n                return upload.maybeSendDeferredFiles(id);\n            }\n\n            return false;\n        },\n\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\n        maybeSendDeferredFiles: function(id) {\n            var idsInGroup = options.getIdsInProxyGroup(id),\n                uploadedThisId = false;\n\n            if (idsInGroup && idsInGroup.length) {\n                log(\"Maybe ready to upload proxy group file \" + id);\n\n                qq.each(idsInGroup, function(idx, idInGroup) {\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\n                        uploadedThisId = idInGroup === id;\n                        upload.now(idInGroup);\n                    }\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\n                        return false;\n                    }\n                });\n            }\n            else {\n                uploadedThisId = true;\n                upload.now(id);\n            }\n\n            return uploadedThisId;\n        },\n\n        maybeNewUuid: function(id, response) {\n            if (response.newUuid !== undefined) {\n                options.onUuidChanged(id, response.newUuid);\n            }\n        },\n\n        // The response coming from handler implementations may be in various formats.\n        // Instead of hoping a promise nested 5 levels deep will always return an object\n        // as its first param, let's just normalize the response here.\n        normalizeResponse: function(originalResponse, successful) {\n            var response = originalResponse;\n\n            // The passed \"response\" param may not be a response at all.\n            // It could be a string, detailing the error, for example.\n            if (!qq.isObject(originalResponse)) {\n                response = {};\n\n                if (qq.isString(originalResponse) && !successful) {\n                    response.error = originalResponse;\n                }\n            }\n\n            response.success = successful;\n\n            return response;\n        },\n\n        now: function(id) {\n            var name = options.getName(id);\n\n            if (!controller.isValid(id)) {\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\n            }\n\n            options.onUpload(id, name).then(\n                function(response) {\n                    if (response && response.pause) {\n                        options.setStatus(id, qq.status.PAUSED);\n                        handler.pause(id);\n                        connectionManager.free(id);\n                    }\n                    else {\n                        if (chunkingPossible && handler._shouldChunkThisFile(id)) {\n                            chunked.sendNext(id);\n                        }\n                        else {\n                            simple.send(id, name);\n                        }\n                    }\n                },\n\n                function(error) {\n                    error = error || {};\n\n                    log(id + \" upload start aborted due to rejected onUpload Promise - details: \" + error, \"error\");\n\n                    if (!options.onAutoRetry(id, name, error.responseJSON || {})) {\n                        var response = upload.normalizeResponse(error.responseJSON, false);\n                        upload.cleanup(id, response);\n                    }\n                }\n            );\n        },\n\n        start: function(id) {\n            var blobToUpload = upload.getProxyOrBlob(id);\n\n            if (blobToUpload) {\n                return upload.maybeDefer(id, blobToUpload);\n            }\n            else {\n                upload.now(id);\n                return true;\n            }\n        }\n    };\n\n    qq.extend(this, {\n        /**\n         * Adds file or file input to the queue\n         **/\n        add: function(id, file) {\n            handler.add.apply(this, arguments);\n        },\n\n        /**\n         * Sends the file identified by id\n         */\n        upload: function(id) {\n            if (connectionManager.open(id)) {\n                return upload.start(id);\n            }\n            return false;\n        },\n\n        retry: function(id) {\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\n            // any more failures at this point.\n            if (concurrentChunkingPossible) {\n                handler._getFileState(id).temp.ignoreFailure = false;\n            }\n\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\n            // Just go ahead and ask the handler to upload again.\n            if (connectionManager.isUsingConnection(id)) {\n                return upload.start(id);\n            }\n\n            // If we are attempting to retry a file that is not currently consuming a connection,\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\n            // before the retry commences.\n            else {\n                return controller.upload(id);\n            }\n        },\n\n        /**\n         * Cancels file upload by id\n         */\n        cancel: function(id) {\n            var cancelRetVal = handler.cancel(id);\n\n            if (qq.isGenericPromise(cancelRetVal)) {\n                cancelRetVal.then(function() {\n                    upload.cancel(id);\n                });\n            }\n            else if (cancelRetVal !== false) {\n                upload.cancel(id);\n            }\n        },\n\n        /**\n         * Cancels all queued or in-progress uploads\n         */\n        cancelAll: function() {\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\n                i;\n\n            // ensure files are cancelled in reverse order which they were added\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\n            if (waitingOrConnected.length) {\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\n                    controller.cancel(waitingOrConnected[i]);\n                }\n            }\n\n            connectionManager.reset();\n        },\n\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\n        // Undefined if no file record is available.\n        getFile: function(id) {\n            if (handler.getProxy && handler.getProxy(id)) {\n                return handler.getProxy(id).referenceBlob;\n            }\n\n            return handler.getFile && handler.getFile(id);\n        },\n\n        // Returns true if the Blob associated with the ID is related to a proxy s\n        isProxied: function(id) {\n            return !!(handler.getProxy && handler.getProxy(id));\n        },\n\n        getInput: function(id) {\n            if (handler.getInput) {\n                return handler.getInput(id);\n            }\n        },\n\n        reset: function() {\n            log(\"Resetting upload handler\");\n            controller.cancelAll();\n            connectionManager.reset();\n            handler.reset();\n        },\n\n        expunge: function(id) {\n            if (controller.isValid(id)) {\n                return handler.expunge(id);\n            }\n        },\n\n        /**\n         * Determine if the file exists.\n         */\n        isValid: function(id) {\n            return handler.isValid(id);\n        },\n\n        hasResumeRecord: function(id) {\n            var key = handler.isValid(id) &&\n                handler._getLocalStorageId &&\n                handler._getLocalStorageId(id);\n\n            if (key) {\n                return !!localStorage.getItem(key);\n            }\n\n            return false;\n        },\n\n        getResumableFilesData: function() {\n            if (handler.getResumableFilesData) {\n                return handler.getResumableFilesData();\n            }\n            return [];\n        },\n\n        /**\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\n         * will be undefined.\n         *\n         * @param id Internal file ID\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\n         */\n        getThirdPartyFileId: function(id) {\n            if (controller.isValid(id)) {\n                return handler.getThirdPartyFileId(id);\n            }\n        },\n\n        /**\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\n         * @param id ID of the upload/file to pause\n         * @returns {boolean} true if the upload was paused\n         */\n        pause: function(id) {\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\n                connectionManager.free(id);\n                handler.moveInProgressToRemaining(id);\n                return true;\n            }\n            return false;\n        },\n\n        isAttemptingResume: function(id) {\n            return !!handler.isAttemptingResume && handler.isAttemptingResume(id);\n        },\n\n        // True if the file is eligible for pause/resume.\n        isResumable: function(id) {\n            return !!handler.isResumable && handler.isResumable(id);\n        }\n    });\n\n    qq.extend(options, o);\n    log = options.log;\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\n\n    preventRetryResponse = (function() {\n        var response = {};\n\n        response[options.preventRetryParam] = true;\n\n        return response;\n    }());\n\n    upload.initHandler();\n};\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log,\n        getCustomResumeData = proxy.getCustomResumeData;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                if (uploadData.customResumeData) {\n                    data.customResumeData = uploadData.customResumeData;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isAttemptingResume: function(id) {\n            return handler._getFileState(id).attemptingResume;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id)\n                && !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var fileState = handler._getFileState(id) || {},\n                chunkingState =  fileState.chunking || {},\n                inProgress = optInProgress || chunkingState.inProgress,\n                remaining = optRemaining || chunkingState.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = chunking.partSize,\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = chunking.partSize,\n                endpoint = getEndpoint(id),\n                customKeys = resume.customKeys(id),\n                localStorageId = qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n\n            customKeys.forEach(function(key) {\n                localStorageId += \"-\" + key;\n            });\n\n            return localStorageId;\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = chunking.partSize;\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.customResumeData = persistedData.customResumeData;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                var customResumeData = getCustomResumeData(id);\n\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now(),\n                };\n\n                if (customResumeData) {\n                    persistedData.customResumeData = customResumeData;\n                }\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\n * CryptoJS core components.\n */\nqq.CryptoJS = (function (Math, undefined) {\n    /**\n     * CryptoJS namespace.\n     */\n    var C = {};\n\n    /**\n     * Library namespace.\n     */\n    var C_lib = C.lib = {};\n\n    /**\n     * Base object for prototypal inheritance.\n     */\n    var Base = C_lib.Base = (function () {\n        function F() {}\n\n        return {\n            /**\n             * Creates a new object that inherits from this object.\n             *\n             * @param {Object} overrides Properties to copy into the new object.\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         field: 'value',\n             *\n             *         method: function () {\n             *         }\n             *     });\n             */\n            extend: function (overrides) {\n                // Spawn\n                F.prototype = this;\n                var subtype = new F();\n\n                // Augment\n                if (overrides) {\n                    subtype.mixIn(overrides);\n                }\n\n                // Create default initializer\n                if (!subtype.hasOwnProperty('init')) {\n                    subtype.init = function () {\n                        subtype.$super.init.apply(this, arguments);\n                    };\n                }\n\n                // Initializer's prototype is the subtype object\n                subtype.init.prototype = subtype;\n\n                // Reference supertype\n                subtype.$super = this;\n\n                return subtype;\n            },\n\n            /**\n             * Extends this object and runs the init method.\n             * Arguments to create() will be passed to init().\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var instance = MyType.create();\n             */\n            create: function () {\n                var instance = this.extend();\n                instance.init.apply(instance, arguments);\n\n                return instance;\n            },\n\n            /**\n             * Initializes a newly created object.\n             * Override this method to add some logic when your objects are created.\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         init: function () {\n             *             // ...\n             *         }\n             *     });\n             */\n            init: function () {\n            },\n\n            /**\n             * Copies properties into this object.\n             *\n             * @param {Object} properties The properties to mix in.\n             *\n             * @example\n             *\n             *     MyType.mixIn({\n             *         field: 'value'\n             *     });\n             */\n            mixIn: function (properties) {\n                for (var propertyName in properties) {\n                    if (properties.hasOwnProperty(propertyName)) {\n                        this[propertyName] = properties[propertyName];\n                    }\n                }\n\n                // IE won't copy toString using the loop above\n                if (properties.hasOwnProperty('toString')) {\n                    this.toString = properties.toString;\n                }\n            },\n\n            /**\n             * Creates a copy of this object.\n             *\n             * @return {Object} The clone.\n             *\n             * @example\n             *\n             *     var clone = instance.clone();\n             */\n            clone: function () {\n                return this.init.prototype.extend(this);\n            }\n        };\n    }());\n\n    /**\n     * An array of 32-bit words.\n     *\n     * @property {Array} words The array of 32-bit words.\n     * @property {number} sigBytes The number of significant bytes in this word array.\n     */\n    var WordArray = C_lib.WordArray = Base.extend({\n        /**\n         * Initializes a newly created word array.\n         *\n         * @param {Array} words (Optional) An array of 32-bit words.\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.create();\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n         */\n        init: function (words, sigBytes) {\n            words = this.words = words || [];\n\n            if (sigBytes != undefined) {\n                this.sigBytes = sigBytes;\n            } else {\n                this.sigBytes = words.length * 4;\n            }\n        },\n\n        /**\n         * Converts this word array to a string.\n         *\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n         *\n         * @return {string} The stringified word array.\n         *\n         * @example\n         *\n         *     var string = wordArray + '';\n         *     var string = wordArray.toString();\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n         */\n        toString: function (encoder) {\n            return (encoder || Hex).stringify(this);\n        },\n\n        /**\n         * Concatenates a word array to this word array.\n         *\n         * @param {WordArray} wordArray The word array to append.\n         *\n         * @return {WordArray} This word array.\n         *\n         * @example\n         *\n         *     wordArray1.concat(wordArray2);\n         */\n        concat: function (wordArray) {\n            // Shortcuts\n            var thisWords = this.words;\n            var thatWords = wordArray.words;\n            var thisSigBytes = this.sigBytes;\n            var thatSigBytes = wordArray.sigBytes;\n\n            // Clamp excess bits\n            this.clamp();\n\n            // Concat\n            if (thisSigBytes % 4) {\n                // Copy one byte at a time\n                for (var i = 0; i < thatSigBytes; i++) {\n                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n                }\n            } else if (thatWords.length > 0xffff) {\n                // Copy one word at a time\n                for (var i = 0; i < thatSigBytes; i += 4) {\n                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n                }\n            } else {\n                // Copy all words at once\n                thisWords.push.apply(thisWords, thatWords);\n            }\n            this.sigBytes += thatSigBytes;\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Removes insignificant bits.\n         *\n         * @example\n         *\n         *     wordArray.clamp();\n         */\n        clamp: function () {\n            // Shortcuts\n            var words = this.words;\n            var sigBytes = this.sigBytes;\n\n            // Clamp\n            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n            words.length = Math.ceil(sigBytes / 4);\n        },\n\n        /**\n         * Creates a copy of this word array.\n         *\n         * @return {WordArray} The clone.\n         *\n         * @example\n         *\n         *     var clone = wordArray.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone.words = this.words.slice(0);\n\n            return clone;\n        },\n\n        /**\n         * Creates a word array filled with random bytes.\n         *\n         * @param {number} nBytes The number of random bytes to generate.\n         *\n         * @return {WordArray} The random word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n         */\n        random: function (nBytes) {\n            var words = [];\n            for (var i = 0; i < nBytes; i += 4) {\n                words.push((Math.random() * 0x100000000) | 0);\n            }\n\n            return new WordArray.init(words, nBytes);\n        }\n    });\n\n    /**\n     * Encoder namespace.\n     */\n    var C_enc = C.enc = {};\n\n    /**\n     * Hex encoding strategy.\n     */\n    var Hex = C_enc.Hex = {\n        /**\n         * Converts a word array to a hex string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The hex string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var hexChars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                hexChars.push((bite >>> 4).toString(16));\n                hexChars.push((bite & 0x0f).toString(16));\n            }\n\n            return hexChars.join('');\n        },\n\n        /**\n         * Converts a hex string to a word array.\n         *\n         * @param {string} hexStr The hex string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n         */\n        parse: function (hexStr) {\n            // Shortcut\n            var hexStrLength = hexStr.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < hexStrLength; i += 2) {\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n            }\n\n            return new WordArray.init(words, hexStrLength / 2);\n        }\n    };\n\n    /**\n     * Latin1 encoding strategy.\n     */\n    var Latin1 = C_enc.Latin1 = {\n        /**\n         * Converts a word array to a Latin1 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Latin1 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var latin1Chars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                latin1Chars.push(String.fromCharCode(bite));\n            }\n\n            return latin1Chars.join('');\n        },\n\n        /**\n         * Converts a Latin1 string to a word array.\n         *\n         * @param {string} latin1Str The Latin1 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n         */\n        parse: function (latin1Str) {\n            // Shortcut\n            var latin1StrLength = latin1Str.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < latin1StrLength; i++) {\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n            }\n\n            return new WordArray.init(words, latin1StrLength);\n        }\n    };\n\n    /**\n     * UTF-8 encoding strategy.\n     */\n    var Utf8 = C_enc.Utf8 = {\n        /**\n         * Converts a word array to a UTF-8 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The UTF-8 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            try {\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n            } catch (e) {\n                throw new Error('Malformed UTF-8 data');\n            }\n        },\n\n        /**\n         * Converts a UTF-8 string to a word array.\n         *\n         * @param {string} utf8Str The UTF-8 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n         */\n        parse: function (utf8Str) {\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n        }\n    };\n\n    /**\n     * Abstract buffered block algorithm template.\n     *\n     * The property blockSize must be implemented in a concrete subtype.\n     *\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n     */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n        /**\n         * Resets this block algorithm's data buffer to its initial state.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm.reset();\n         */\n        reset: function () {\n            // Initial values\n            this._data = new WordArray.init();\n            this._nDataBytes = 0;\n        },\n\n        /**\n         * Adds new data to this block algorithm's buffer.\n         *\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm._append('data');\n         *     bufferedBlockAlgorithm._append(wordArray);\n         */\n        _append: function (data) {\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof data == 'string') {\n                data = Utf8.parse(data);\n            }\n\n            // Append\n            this._data.concat(data);\n            this._nDataBytes += data.sigBytes;\n        },\n\n        /**\n         * Processes available data blocks.\n         *\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n         *\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n         *\n         * @return {WordArray} The processed data.\n         *\n         * @example\n         *\n         *     var processedData = bufferedBlockAlgorithm._process();\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n         */\n        _process: function (doFlush) {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n            var dataSigBytes = data.sigBytes;\n            var blockSize = this.blockSize;\n            var blockSizeBytes = blockSize * 4;\n\n            // Count blocks ready\n            var nBlocksReady = dataSigBytes / blockSizeBytes;\n            if (doFlush) {\n                // Round up to include partial blocks\n                nBlocksReady = Math.ceil(nBlocksReady);\n            } else {\n                // Round down to include only full blocks,\n                // less the number of blocks that must remain in the buffer\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n            }\n\n            // Count words ready\n            var nWordsReady = nBlocksReady * blockSize;\n\n            // Count bytes ready\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n            // Process blocks\n            if (nWordsReady) {\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n                    // Perform concrete-algorithm logic\n                    this._doProcessBlock(dataWords, offset);\n                }\n\n                // Remove processed words\n                var processedWords = dataWords.splice(0, nWordsReady);\n                data.sigBytes -= nBytesReady;\n            }\n\n            // Return processed words\n            return new WordArray.init(processedWords, nBytesReady);\n        },\n\n        /**\n         * Creates a copy of this object.\n         *\n         * @return {Object} The clone.\n         *\n         * @example\n         *\n         *     var clone = bufferedBlockAlgorithm.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone._data = this._data.clone();\n\n            return clone;\n        },\n\n        _minBufferSize: 0\n    });\n\n    /**\n     * Abstract hasher template.\n     *\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n     */\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n        /**\n         * Configuration options.\n         */\n        cfg: Base.extend(),\n\n        /**\n         * Initializes a newly created hasher.\n         *\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n         *\n         * @example\n         *\n         *     var hasher = CryptoJS.algo.SHA256.create();\n         */\n        init: function (cfg) {\n            // Apply config defaults\n            this.cfg = this.cfg.extend(cfg);\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this hasher to its initial state.\n         *\n         * @example\n         *\n         *     hasher.reset();\n         */\n        reset: function () {\n            // Reset data buffer\n            BufferedBlockAlgorithm.reset.call(this);\n\n            // Perform concrete-hasher logic\n            this._doReset();\n        },\n\n        /**\n         * Updates this hasher with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {Hasher} This hasher.\n         *\n         * @example\n         *\n         *     hasher.update('message');\n         *     hasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            // Append\n            this._append(messageUpdate);\n\n            // Update the hash\n            this._process();\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the hash computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The hash.\n         *\n         * @example\n         *\n         *     var hash = hasher.finalize();\n         *     var hash = hasher.finalize('message');\n         *     var hash = hasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Final message update\n            if (messageUpdate) {\n                this._append(messageUpdate);\n            }\n\n            // Perform concrete-hasher logic\n            var hash = this._doFinalize();\n\n            return hash;\n        },\n\n        blockSize: 512/32,\n\n        /**\n         * Creates a shortcut function to a hasher's object interface.\n         *\n         * @param {Hasher} hasher The hasher to create a helper for.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n         */\n        _createHelper: function (hasher) {\n            return function (message, cfg) {\n                return new hasher.init(cfg).finalize(message);\n            };\n        },\n\n        /**\n         * Creates a shortcut function to the HMAC's object interface.\n         *\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n         */\n        _createHmacHelper: function (hasher) {\n            return function (message, key) {\n                return new C_algo.HMAC.init(hasher, key).finalize(message);\n            };\n        }\n    });\n\n    /**\n     * Algorithm namespace.\n     */\n    var C_algo = C.algo = {};\n\n    return C;\n}(Math));\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n     * Base64 encoding strategy.\n     */\n    var Base64 = C_enc.Base64 = {\n        /**\n         * Converts a word array to a Base64 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Base64 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n            var map = this._map;\n\n            // Clamp excess bits\n            wordArray.clamp();\n\n            // Convert\n            var base64Chars = [];\n            for (var i = 0; i < sigBytes; i += 3) {\n                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n                }\n            }\n\n            // Add padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                while (base64Chars.length % 4) {\n                    base64Chars.push(paddingChar);\n                }\n            }\n\n            return base64Chars.join('');\n        },\n\n        /**\n         * Converts a Base64 string to a word array.\n         *\n         * @param {string} base64Str The Base64 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n         */\n        parse: function (base64Str) {\n            // Shortcuts\n            var base64StrLength = base64Str.length;\n            var map = this._map;\n\n            // Ignore padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                var paddingIndex = base64Str.indexOf(paddingChar);\n                if (paddingIndex != -1) {\n                    base64StrLength = paddingIndex;\n                }\n            }\n\n            // Convert\n            var words = [];\n            var nBytes = 0;\n            for (var i = 0; i < base64StrLength; i++) {\n                if (i % 4) {\n                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);\n                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);\n                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n                    nBytes++;\n                }\n            }\n\n            return WordArray.create(words, nBytes);\n        },\n\n        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n    };\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\n     * HMAC algorithm.\n     */\n    var HMAC = C_algo.HMAC = Base.extend({\n        /**\n         * Initializes a newly created HMAC.\n         *\n         * @param {Hasher} hasher The hash algorithm to use.\n         * @param {WordArray|string} key The secret key.\n         *\n         * @example\n         *\n         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n         */\n        init: function (hasher, key) {\n            // Init hasher\n            hasher = this._hasher = new hasher.init();\n\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof key == 'string') {\n                key = Utf8.parse(key);\n            }\n\n            // Shortcuts\n            var hasherBlockSize = hasher.blockSize;\n            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n            // Allow arbitrary length keys\n            if (key.sigBytes > hasherBlockSizeBytes) {\n                key = hasher.finalize(key);\n            }\n\n            // Clamp excess bits\n            key.clamp();\n\n            // Clone key for inner and outer pads\n            var oKey = this._oKey = key.clone();\n            var iKey = this._iKey = key.clone();\n\n            // Shortcuts\n            var oKeyWords = oKey.words;\n            var iKeyWords = iKey.words;\n\n            // XOR keys with pad constants\n            for (var i = 0; i < hasherBlockSize; i++) {\n                oKeyWords[i] ^= 0x5c5c5c5c;\n                iKeyWords[i] ^= 0x36363636;\n            }\n            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this HMAC to its initial state.\n         *\n         * @example\n         *\n         *     hmacHasher.reset();\n         */\n        reset: function () {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Reset\n            hasher.reset();\n            hasher.update(this._iKey);\n        },\n\n        /**\n         * Updates this HMAC with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {HMAC} This HMAC instance.\n         *\n         * @example\n         *\n         *     hmacHasher.update('message');\n         *     hmacHasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            this._hasher.update(messageUpdate);\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the HMAC computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The HMAC.\n         *\n         * @example\n         *\n         *     var hmac = hmacHasher.finalize();\n         *     var hmac = hmacHasher.finalize('message');\n         *     var hmac = hmacHasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Compute HMAC\n            var innerHash = hasher.finalize(messageUpdate);\n            hasher.reset();\n            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n            return hmac;\n        }\n    });\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Reusable object\n    var W = [];\n\n    /**\n     * SHA-1 hash algorithm.\n     */\n    var SHA1 = C_algo.SHA1 = Hasher.extend({\n        _doReset: function () {\n            this._hash = new WordArray.init([\n                0x67452301, 0xefcdab89,\n                0x98badcfe, 0x10325476,\n                0xc3d2e1f0\n            ]);\n        },\n\n        _doProcessBlock: function (M, offset) {\n            // Shortcut\n            var H = this._hash.words;\n\n            // Working variables\n            var a = H[0];\n            var b = H[1];\n            var c = H[2];\n            var d = H[3];\n            var e = H[4];\n\n            // Computation\n            for (var i = 0; i < 80; i++) {\n                if (i < 16) {\n                    W[i] = M[offset + i] | 0;\n                } else {\n                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n                    W[i] = (n << 1) | (n >>> 31);\n                }\n\n                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n                if (i < 20) {\n                    t += ((b & c) | (~b & d)) + 0x5a827999;\n                } else if (i < 40) {\n                    t += (b ^ c ^ d) + 0x6ed9eba1;\n                } else if (i < 60) {\n                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n                } else /* if (i < 80) */ {\n                    t += (b ^ c ^ d) - 0x359d3e2a;\n                }\n\n                e = d;\n                d = c;\n                c = (b << 30) | (b >>> 2);\n                b = a;\n                a = t;\n            }\n\n            // Intermediate hash value\n            H[0] = (H[0] + a) | 0;\n            H[1] = (H[1] + b) | 0;\n            H[2] = (H[2] + c) | 0;\n            H[3] = (H[3] + d) | 0;\n            H[4] = (H[4] + e) | 0;\n        },\n\n        _doFinalize: function () {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n\n            var nBitsTotal = this._nDataBytes * 8;\n            var nBitsLeft = data.sigBytes * 8;\n\n            // Add padding\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n            data.sigBytes = dataWords.length * 4;\n\n            // Hash final blocks\n            this._process();\n\n            // Return final computed hash\n            return this._hash;\n        },\n\n        clone: function () {\n            var clone = Hasher.clone.call(this);\n            clone._hash = this._hash.clone();\n\n            return clone;\n        }\n    });\n\n    /**\n     * Shortcut function to the hasher's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     *\n     * @return {WordArray} The hash.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hash = CryptoJS.SHA1('message');\n     *     var hash = CryptoJS.SHA1(wordArray);\n     */\n    C.SHA1 = Hasher._createHelper(SHA1);\n\n    /**\n     * Shortcut function to the HMAC's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     * @param {WordArray|string} key The secret key.\n     *\n     * @return {WordArray} The HMAC.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hmac = CryptoJS.HmacSHA1(message, key);\n     */\n    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n}());\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function (Math) {\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n    var Hasher = C_lib.Hasher;\r\n    var C_algo = C.algo;\r\n\r\n    // Initialization and round constants tables\r\n    var H = [];\r\n    var K = [];\r\n\r\n    // Compute constants\r\n    (function () {\r\n        function isPrime(n) {\r\n            var sqrtN = Math.sqrt(n);\r\n            for (var factor = 2; factor <= sqrtN; factor++) {\r\n                if (!(n % factor)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function getFractionalBits(n) {\r\n            return ((n - (n | 0)) * 0x100000000) | 0;\r\n        }\r\n\r\n        var n = 2;\r\n        var nPrime = 0;\r\n        while (nPrime < 64) {\r\n            if (isPrime(n)) {\r\n                if (nPrime < 8) {\r\n                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\r\n                }\r\n                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\r\n\r\n                nPrime++;\r\n            }\r\n\r\n            n++;\r\n        }\r\n    }());\r\n\r\n    // Reusable object\r\n    var W = [];\r\n\r\n    /**\r\n     * SHA-256 hash algorithm.\r\n     */\r\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\r\n        _doReset: function () {\r\n            this._hash = new WordArray.init(H.slice(0));\r\n        },\r\n\r\n        _doProcessBlock: function (M, offset) {\r\n            // Shortcut\r\n            var H = this._hash.words;\r\n\r\n            // Working variables\r\n            var a = H[0];\r\n            var b = H[1];\r\n            var c = H[2];\r\n            var d = H[3];\r\n            var e = H[4];\r\n            var f = H[5];\r\n            var g = H[6];\r\n            var h = H[7];\r\n\r\n            // Computation\r\n            for (var i = 0; i < 64; i++) {\r\n                if (i < 16) {\r\n                    W[i] = M[offset + i] | 0;\r\n                } else {\r\n                    var gamma0x = W[i - 15];\r\n                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\r\n                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\r\n                                   (gamma0x >>> 3);\r\n\r\n                    var gamma1x = W[i - 2];\r\n                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\r\n                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\r\n                                   (gamma1x >>> 10);\r\n\r\n                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\r\n                }\r\n\r\n                var ch  = (e & f) ^ (~e & g);\r\n                var maj = (a & b) ^ (a & c) ^ (b & c);\r\n\r\n                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\r\n                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\r\n\r\n                var t1 = h + sigma1 + ch + K[i] + W[i];\r\n                var t2 = sigma0 + maj;\r\n\r\n                h = g;\r\n                g = f;\r\n                f = e;\r\n                e = (d + t1) | 0;\r\n                d = c;\r\n                c = b;\r\n                b = a;\r\n                a = (t1 + t2) | 0;\r\n            }\r\n\r\n            // Intermediate hash value\r\n            H[0] = (H[0] + a) | 0;\r\n            H[1] = (H[1] + b) | 0;\r\n            H[2] = (H[2] + c) | 0;\r\n            H[3] = (H[3] + d) | 0;\r\n            H[4] = (H[4] + e) | 0;\r\n            H[5] = (H[5] + f) | 0;\r\n            H[6] = (H[6] + g) | 0;\r\n            H[7] = (H[7] + h) | 0;\r\n        },\r\n\r\n        _doFinalize: function () {\r\n            // Shortcuts\r\n            var data = this._data;\r\n            var dataWords = data.words;\r\n\r\n            var nBitsTotal = this._nDataBytes * 8;\r\n            var nBitsLeft = data.sigBytes * 8;\r\n\r\n            // Add padding\r\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\r\n            data.sigBytes = dataWords.length * 4;\r\n\r\n            // Hash final blocks\r\n            this._process();\r\n\r\n            // Return final computed hash\r\n            return this._hash;\r\n        },\r\n\r\n        clone: function () {\r\n            var clone = Hasher.clone.call(this);\r\n            clone._hash = this._hash.clone();\r\n\r\n            return clone;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Shortcut function to the hasher's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = CryptoJS.SHA256('message');\r\n     *     var hash = CryptoJS.SHA256(wordArray);\r\n     */\r\n    C.SHA256 = Hasher._createHelper(SHA256);\r\n\r\n    /**\r\n     * Shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     * @param {WordArray|string} key The secret key.\r\n     *\r\n     * @return {WordArray} The HMAC.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmac = CryptoJS.HmacSHA256(message, key);\r\n     */\r\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\r\n}(Math));\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function () {\r\n    // Check if typed arrays are supported\r\n    if (typeof ArrayBuffer != 'function') {\r\n        return;\r\n    }\r\n\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n\r\n    // Reference original init\r\n    var superInit = WordArray.init;\r\n\r\n    // Augment WordArray.init to handle typed arrays\r\n    var subInit = WordArray.init = function (typedArray) {\r\n        // Convert buffers to uint8\r\n        if (typedArray instanceof ArrayBuffer) {\r\n            typedArray = new Uint8Array(typedArray);\r\n        }\r\n\r\n        // Convert other array views to uint8\r\n        if (\r\n            typedArray instanceof Int8Array ||\r\n            typedArray instanceof Uint8ClampedArray ||\r\n            typedArray instanceof Int16Array ||\r\n            typedArray instanceof Uint16Array ||\r\n            typedArray instanceof Int32Array ||\r\n            typedArray instanceof Uint32Array ||\r\n            typedArray instanceof Float32Array ||\r\n            typedArray instanceof Float64Array\r\n        ) {\r\n            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\r\n        }\r\n\r\n        // Handle Uint8Array\r\n        if (typedArray instanceof Uint8Array) {\r\n            // Shortcut\r\n            var typedArrayByteLength = typedArray.byteLength;\r\n\r\n            // Extract bytes\r\n            var words = [];\r\n            for (var i = 0; i < typedArrayByteLength; i++) {\r\n                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\r\n            }\r\n\r\n            // Initialize this word array\r\n            superInit.call(this, words, typedArrayByteLength);\r\n        } else {\r\n            // Else call normal init\r\n            superInit.apply(this, arguments);\r\n        }\r\n    };\r\n\r\n    subInit.prototype = WordArray;\r\n}());\r\n","/*globals qq */\nqq.s3 = qq.s3 || {};\n\nqq.s3.util = qq.s3.util || (function() {\n    \"use strict\";\n\n    return {\n        ALGORITHM_PARAM_NAME: \"x-amz-algorithm\",\n\n        AWS_PARAM_PREFIX: \"x-amz-meta-\",\n\n        CREDENTIAL_PARAM_NAME: \"x-amz-credential\",\n\n        DATE_PARAM_NAME: \"x-amz-date\",\n\n        REDUCED_REDUNDANCY_PARAM_NAME: \"x-amz-storage-class\",\n        REDUCED_REDUNDANCY_PARAM_VALUE: \"REDUCED_REDUNDANCY\",\n\n        SERVER_SIDE_ENCRYPTION_PARAM_NAME: \"x-amz-server-side-encryption\",\n        SERVER_SIDE_ENCRYPTION_PARAM_VALUE: \"AES256\",\n\n        SESSION_TOKEN_PARAM_NAME: \"x-amz-security-token\",\n\n        V4_ALGORITHM_PARAM_VALUE: \"AWS4-HMAC-SHA256\",\n\n        V4_SIGNATURE_PARAM_NAME: \"x-amz-signature\",\n\n        CASE_SENSITIVE_PARAM_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\"\n        ],\n\n        UNSIGNABLE_REST_HEADER_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\"\n        ],\n\n        UNPREFIXED_PARAM_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\",\n            \"x-amz-server-side-encryption-customer-algorithm\",\n            \"x-amz-server-side-encryption-customer-key\",\n            \"x-amz-server-side-encryption-customer-key-MD5\"\n        ],\n\n        /**\n         * This allows for the region to be specified in the bucket's endpoint URL, or not.\n         *\n         * Examples of some valid endpoints are:\n         *     http://foo.s3.amazonaws.com\n         *     https://foo.s3.amazonaws.com\n         *     http://foo.s3-ap-northeast-1.amazonaws.com\n         *     foo.s3.amazonaws.com\n         *     http://foo.bar.com\n         *     http://s3.amazonaws.com/foo.bar.com\n         * ...etc\n         *\n         * @param endpoint The bucket's URL.\n         * @returns {String || undefined} The bucket name, or undefined if the URL cannot be parsed.\n         */\n        getBucket: function(endpoint) {\n            var patterns = [\n                    //bucket in domain\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)\\.s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com/i,\n                    //bucket in path\n                    /^(?:https?:\\/\\/)?s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com\\/([a-z0-9.\\-_]+)/i,\n                    //custom domain\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)/i\n                ],\n                bucket;\n\n            qq.each(patterns, function(idx, pattern) {\n                var match = pattern.exec(endpoint);\n\n                if (match) {\n                    bucket = match[1];\n                    return false;\n                }\n            });\n\n            return bucket;\n        },\n\n        /** Create Prefixed request headers which are appropriate for S3.\n         *\n         * If the request header is appropriate for S3 (e.g. Cache-Control) then pass\n         * it along without a metadata prefix. For all other request header parameter names,\n         * apply qq.s3.util.AWS_PARAM_PREFIX before the name.\n         * See: http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html\n         */\n        _getPrefixedParamName: function(name) {\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\n                return name;\n            }\n            return qq.s3.util.AWS_PARAM_PREFIX + name;\n        },\n\n        /**\n         * Create a policy document to be signed and sent along with the S3 upload request.\n         *\n         * @param spec Object with properties use to construct the policy document.\n         * @returns {Object} Policy doc.\n         */\n        getPolicy: function(spec) {\n            var policy = {},\n                conditions = [],\n                bucket = spec.bucket,\n                date = spec.date,\n                drift = spec.clockDrift,\n                key = spec.key,\n                accessKey = spec.accessKey,\n                acl = spec.acl,\n                type = spec.type,\n                expectedStatus = spec.expectedStatus,\n                sessionToken = spec.sessionToken,\n                params = spec.params,\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\n                minFileSize = spec.minFileSize,\n                maxFileSize = spec.maxFileSize,\n                reducedRedundancy = spec.reducedRedundancy,\n                region = spec.region,\n                serverSideEncryption = spec.serverSideEncryption,\n                signatureVersion = spec.signatureVersion;\n\n            policy.expiration = qq.s3.util.getPolicyExpirationDate(date, drift);\n\n            conditions.push({acl: acl});\n            conditions.push({bucket: bucket});\n\n            if (type) {\n                conditions.push({\"Content-Type\": type});\n            }\n\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            if (expectedStatus) {\n                conditions.push({success_action_status: expectedStatus.toString()});\n            }\n\n            if (successRedirectUrl) {\n                conditions.push({success_action_redirect: successRedirectUrl});\n            }\n            // jscs:enable\n            if (reducedRedundancy) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n            }\n\n            if (sessionToken) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n            }\n\n            if (serverSideEncryption) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n            }\n\n            if (signatureVersion === 2) {\n                conditions.push({key: key});\n            }\n            else if (signatureVersion === 4) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\n\n                conditions.push({});\n                conditions[conditions.length - 1].key = key;\n\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.CREDENTIAL_PARAM_NAME] =\n                    qq.s3.util.getV4CredentialsString({date: date, key: accessKey, region: region});\n\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.DATE_PARAM_NAME] =\n                    qq.s3.util.getV4PolicyDate(date, drift);\n            }\n\n            // user metadata\n            qq.each(params, function(name, val) {\n                var awsParamName = qq.s3.util._getPrefixedParamName(name),\n                    param = {};\n\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\n                    param[awsParamName] = val;\n                }\n                else {\n                    param[awsParamName] = encodeURIComponent(val);\n                }\n\n                conditions.push(param);\n            });\n\n            policy.conditions = conditions;\n\n            qq.s3.util.enforceSizeLimits(policy, minFileSize, maxFileSize);\n\n            return policy;\n        },\n\n        /**\n         * Update a previously constructed policy document with updated credentials.  Currently, this only requires we\n         * update the session token.  This is only relevant if requests are being signed client-side.\n         *\n         * @param policy Live policy document\n         * @param newSessionToken Updated session token.\n         */\n        refreshPolicyCredentials: function(policy, newSessionToken) {\n            var sessionTokenFound = false;\n\n            qq.each(policy.conditions, function(oldCondIdx, oldCondObj) {\n                qq.each(oldCondObj, function(oldCondName, oldCondVal) {\n                    if (oldCondName === qq.s3.util.SESSION_TOKEN_PARAM_NAME) {\n                        oldCondObj[oldCondName] = newSessionToken;\n                        sessionTokenFound = true;\n                    }\n                });\n            });\n\n            if (!sessionTokenFound) {\n                policy.conditions.push({});\n                policy.conditions[policy.conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = newSessionToken;\n            }\n        },\n\n        /**\n         * Generates all parameters to be passed along with the S3 upload request.  This includes invoking a callback\n         * that is expected to asynchronously retrieve a signature for the policy document.  Note that the server\n         * signing the request should reject a \"tainted\" policy document that includes unexpected values, since it is\n         * still possible for a malicious user to tamper with these values during policy document generation,\n         * before it is sent to the server for signing.\n         *\n         * @param spec Object with properties: `params`, `type`, `key`, `accessKey`, `acl`, `expectedStatus`, `successRedirectUrl`,\n         * `reducedRedundancy`, `region`, `serverSideEncryption`, `version`, and `log()`, along with any options associated with `qq.s3.util.getPolicy()`.\n         * @returns {qq.Promise} Promise that will be fulfilled once all parameters have been determined.\n         */\n        generateAwsParams: function(spec, signPolicyCallback) {\n            var awsParams = {},\n                customParams = spec.params,\n                promise = new qq.Promise(),\n                sessionToken = spec.sessionToken,\n                drift = spec.clockDrift,\n                type = spec.type,\n                key = spec.key,\n                accessKey = spec.accessKey,\n                acl = spec.acl,\n                expectedStatus = spec.expectedStatus,\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\n                reducedRedundancy = spec.reducedRedundancy,\n                region = spec.region,\n                serverSideEncryption = spec.serverSideEncryption,\n                signatureVersion = spec.signatureVersion,\n                now = new Date(),\n                log = spec.log,\n                policyJson;\n\n            spec.date = now;\n            policyJson = qq.s3.util.getPolicy(spec);\n\n            awsParams.key = key;\n\n            if (type) {\n                awsParams[\"Content-Type\"] = type;\n            }\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            if (expectedStatus) {\n                awsParams.success_action_status = expectedStatus;\n            }\n\n            if (successRedirectUrl) {\n                awsParams.success_action_redirect = successRedirectUrl;\n            }\n            // jscs:enable\n            if (reducedRedundancy) {\n                awsParams[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n            }\n\n            if (serverSideEncryption) {\n                awsParams[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n            }\n\n            if (sessionToken) {\n                awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n            }\n\n            awsParams.acl = acl;\n\n            // Custom (user-supplied) params must be prefixed with the value of `qq.s3.util.AWS_PARAM_PREFIX`.\n            // Params such as Cache-Control or Content-Disposition will not be prefixed.\n            // Prefixed param values will be URI encoded as well.\n            qq.each(customParams, function(name, val) {\n                var awsParamName = qq.s3.util._getPrefixedParamName(name);\n\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\n                    awsParams[awsParamName] = val;\n                }\n                else {\n                    awsParams[awsParamName] = encodeURIComponent(val);\n                }\n            });\n\n            if (signatureVersion === 2) {\n                awsParams.AWSAccessKeyId = accessKey;\n            }\n            else if (signatureVersion === 4) {\n                awsParams[qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\n                awsParams[qq.s3.util.CREDENTIAL_PARAM_NAME] = qq.s3.util.getV4CredentialsString({date: now, key: accessKey, region: region});\n                awsParams[qq.s3.util.DATE_PARAM_NAME] = qq.s3.util.getV4PolicyDate(now, drift);\n            }\n\n            // Invoke a promissory callback that should provide us with a base64-encoded policy doc and an\n            // HMAC signature for the policy doc.\n            signPolicyCallback(policyJson).then(\n                function(policyAndSignature, updatedAccessKey, updatedSessionToken) {\n                    awsParams.policy = policyAndSignature.policy;\n\n                    if (spec.signatureVersion === 2) {\n                        awsParams.signature = policyAndSignature.signature;\n\n                        if (updatedAccessKey) {\n                            awsParams.AWSAccessKeyId = updatedAccessKey;\n                        }\n                    }\n                    else if (spec.signatureVersion === 4) {\n                        awsParams[qq.s3.util.V4_SIGNATURE_PARAM_NAME] = policyAndSignature.signature;\n                    }\n\n                    if (updatedSessionToken) {\n                        awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\n                    }\n\n                    promise.success(awsParams);\n                },\n                function(errorMessage) {\n                    errorMessage = errorMessage || \"Can't continue further with request to S3 as we did not receive \" +\n                                                   \"a valid signature and policy from the server.\";\n\n                    log(\"Policy signing failed.  \" + errorMessage, \"error\");\n                    promise.failure(errorMessage);\n                }\n            );\n\n            return promise;\n        },\n\n        /**\n         * Add a condition to an existing S3 upload request policy document used to ensure AWS enforces any size\n         * restrictions placed on files server-side.  This is important to do, in case users mess with the client-side\n         * checks already in place.\n         *\n         * @param policy Policy document as an `Object`, with a `conditions` property already attached\n         * @param minSize Minimum acceptable size, in bytes\n         * @param maxSize Maximum acceptable size, in bytes (0 = unlimited)\n         */\n        enforceSizeLimits: function(policy, minSize, maxSize) {\n            var adjustedMinSize = minSize < 0 ? 0 : minSize,\n                // Adjust a maxSize of 0 to the largest possible integer, since we must specify a high and a low in the request\n                adjustedMaxSize = maxSize <= 0 ? 9007199254740992 : maxSize;\n\n            if (minSize > 0 || maxSize > 0) {\n                policy.conditions.push([\"content-length-range\", adjustedMinSize.toString(), adjustedMaxSize.toString()]);\n            }\n        },\n\n        getPolicyExpirationDate: function(date, drift) {\n            var adjustedDate = new Date(date.getTime() + drift);\n            return qq.s3.util.getPolicyDate(adjustedDate, 5);\n        },\n\n        getCredentialsDate: function(date) {\n            return date.getUTCFullYear() + \"\" +\n                (\"0\" + (date.getUTCMonth() + 1)).slice(-2) +\n                (\"0\" + date.getUTCDate()).slice(-2);\n        },\n\n        getPolicyDate: function(date, _minutesToAdd_) {\n            var minutesToAdd = _minutesToAdd_ || 0,\n                pad, r;\n\n            /*jshint -W014 */\n            // Is this going to be a problem if we encounter this moments before 2 AM just before daylight savings time ends?\n            date.setMinutes(date.getMinutes() + (minutesToAdd || 0));\n\n            if (Date.prototype.toISOString) {\n                return date.toISOString();\n            }\n            else {\n                pad = function(number) {\n                    r = String(number);\n\n                    if (r.length === 1) {\n                        r = \"0\" + r;\n                    }\n\n                    return r;\n                };\n\n                return date.getUTCFullYear()\n                    + \"-\" + pad(date.getUTCMonth() + 1)\n                    + \"-\" + pad(date.getUTCDate())\n                    + \"T\" + pad(date.getUTCHours())\n                    + \":\" + pad(date.getUTCMinutes())\n                    + \":\" + pad(date.getUTCSeconds())\n                    + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\n                    + \"Z\";\n            }\n        },\n\n        /**\n         * Looks at a response from S3 contained in an iframe and parses the query string in an attempt to identify\n         * the associated resource.\n         *\n         * @param iframe Iframe containing response\n         * @returns {{bucket: *, key: *, etag: *}}\n         */\n        parseIframeResponse: function(iframe) {\n            var doc = iframe.contentDocument || iframe.contentWindow.document,\n                queryString = doc.location.search,\n                match = /bucket=(.+)&key=(.+)&etag=(.+)/.exec(queryString);\n\n            if (match) {\n                return {\n                    bucket: match[1],\n                    key: match[2],\n                    etag: match[3].replace(/%22/g, \"\")\n                };\n            }\n        },\n\n        /**\n         * @param successRedirectUrl Relative or absolute location of success redirect page\n         * @returns {*|string} undefined if the parameter is undefined, otherwise the absolute location of the success redirect page\n         */\n        getSuccessRedirectAbsoluteUrl: function(successRedirectUrl) {\n            if (successRedirectUrl) {\n                var targetAnchorContainer = document.createElement(\"div\"),\n                    targetAnchor;\n\n                if (qq.ie7()) {\n                    // Note that we must make use of `innerHTML` for IE7 only instead of simply creating an anchor via\n                    // `document.createElement('a')` and setting the `href` attribute.  The latter approach does not allow us to\n                    // obtain an absolute URL in IE7 if the `endpoint` is a relative URL.\n                    targetAnchorContainer.innerHTML = \"<a href='\" + successRedirectUrl + \"'></a>\";\n                    targetAnchor = targetAnchorContainer.firstChild;\n                    return targetAnchor.href;\n                }\n                else {\n                    // IE8 and IE9 do not seem to derive an absolute URL from a relative URL using the `innerHTML`\n                    // approach above, so we'll just create an anchor this way and set it's `href` attribute.\n                    // Due to yet another quirk in IE8 and IE9, we have to set the `href` equal to itself\n                    // in order to ensure relative URLs will be properly parsed.\n                    targetAnchor = document.createElement(\"a\");\n                    targetAnchor.href = successRedirectUrl;\n                    targetAnchor.href = targetAnchor.href;\n                    return targetAnchor.href;\n                }\n            }\n        },\n\n        getV4CredentialsString: function(spec) {\n            return spec.key + \"/\" +\n                qq.s3.util.getCredentialsDate(spec.date) + \"/\" +\n                spec.region + \"/s3/aws4_request\";\n        },\n\n        getV4PolicyDate: function(date, drift) {\n            var adjustedDate = new Date(date.getTime() + drift);\n\n            return qq.s3.util.getCredentialsDate(adjustedDate) + \"T\" +\n                    (\"0\" + adjustedDate.getUTCHours()).slice(-2) +\n                    (\"0\" + adjustedDate.getUTCMinutes()).slice(-2) +\n                    (\"0\" + adjustedDate.getUTCSeconds()).slice(-2) +\n                    \"Z\";\n        },\n\n        // AWS employs a strict interpretation of [RFC 3986](http://tools.ietf.org/html/rfc3986#page-12).\n        // So, we must ensure all reserved characters listed in the spec are percent-encoded,\n        // and spaces are replaced with \"+\".\n        encodeQueryStringParam: function(param) {\n            var percentEncoded = encodeURIComponent(param);\n\n            // %-encode characters not handled by `encodeURIComponent` (to follow RFC 3986)\n            percentEncoded = percentEncoded.replace(/[!'()]/g, escape);\n\n            // %-encode characters not handled by `escape` (to follow RFC 3986)\n            percentEncoded = percentEncoded.replace(/\\*/g, \"%2A\");\n\n            // replace percent-encoded spaces with a \"+\"\n            return percentEncoded.replace(/%20/g, \"+\");\n        },\n        /**\n         * Escapes url part as for AWS requirements\n         * AWS uriEscapePath function pulled from aws-sdk-js licensed under Apache 2.0 - http://github.com/aws/aws-sdk-js\n         */\n        uriEscape: function(string) {\n            var output = encodeURIComponent(string);\n            output = output.replace(/[^A-Za-z0-9_.~\\-%]+/g, escape);\n            output = output.replace(/[*]/g, function(ch) {\n                return \"%\" + ch.charCodeAt(0).toString(16).toUpperCase();\n            });\n            return output;\n        },\n        /**\n         * Escapes a path as for AWS requirement\n         * AWS uriEscapePath function pulled from aws-sdk-js licensed under Apache 2.0 - http://github.com/aws/aws-sdk-js\n         */\n        uriEscapePath: function(path) {\n            var parts = [];\n            qq.each(path.split(\"/\"), function(idx, item) {\n                parts.push(qq.s3.util.uriEscape(item));\n            });\n            return parts.join(\"/\");\n        }\n    };\n}());\n","/*globals qq*/\n/**\n * Defines the public API for non-traditional FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.nonTraditionalBasePublicApi = {\n        setUploadSuccessParams: function(params, id) {\n            this._uploadSuccessParamsStore.set(params, id);\n        },\n        setUploadSuccessEndpoint: function(endpoint, id) {\n            this._uploadSuccessEndpointStore.set(endpoint, id);\n        }\n    };\n\n    qq.nonTraditionalBasePrivateApi = {\n        /**\n         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).\n         * This will hold up the call to the `onComplete` callback until we have determined success of the upload\n         * according to the local server, if a `successEndpoint` has been defined by the integrator.\n         *\n         * @param id ID of the completed upload\n         * @param name Name of the associated item\n         * @param result Object created from the server's parsed JSON response.\n         * @param xhr Associated XmlHttpRequest, if this was used to send the request.\n         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`\n         * if we need to ask the server.\n         * @private\n         */\n        _onComplete: function(id, name, result, xhr) {\n            var success = result.success ? true : false,\n                self = this,\n                onCompleteArgs = arguments,\n                successEndpoint = this._uploadSuccessEndpointStore.get(id),\n                successCustomHeaders = this._options.uploadSuccess.customHeaders,\n                successMethod = this._options.uploadSuccess.method,\n                cors = this._options.cors,\n                promise = new qq.Promise(),\n                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),\n                fileParams = this._paramsStore.get(id),\n\n                // If we are waiting for confirmation from the local server, and have received it,\n                // include properties from the local server response in the `response` parameter\n                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and\n                // fulfill the associated promise.\n                onSuccessFromServer = function(successRequestResult) {\n                    delete self._failedSuccessRequestCallbacks[id];\n                    qq.extend(result, successRequestResult);\n                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                    promise.success(successRequestResult);\n                },\n\n                // If the upload success request fails, attempt to re-send the success request (via the core retry code).\n                // The entire upload may be restarted if the server returns a \"reset\" property with a value of true as well.\n                onFailureFromServer = function(successRequestResult) {\n                    var callback = submitSuccessRequest;\n\n                    qq.extend(result, successRequestResult);\n\n                    if (result && result.reset) {\n                        callback = null;\n                    }\n\n                    if (!callback) {\n                        delete self._failedSuccessRequestCallbacks[id];\n                    }\n                    else {\n                        self._failedSuccessRequestCallbacks[id] = callback;\n                    }\n\n                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {\n                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                        promise.failure(successRequestResult);\n                    }\n                },\n                submitSuccessRequest,\n                successAjaxRequester;\n\n            // Ask the local server if the file sent is ok.\n            if (success && successEndpoint) {\n                successAjaxRequester = new qq.UploadSuccessAjaxRequester({\n                    endpoint: successEndpoint,\n                    method: successMethod,\n                    customHeaders: successCustomHeaders,\n                    cors: cors,\n                    log: qq.bind(this.log, this)\n                });\n\n                // combine custom params and default params\n                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);\n\n                // include any params associated with the file\n                fileParams && qq.extend(uploadSuccessParams, fileParams, true);\n\n                submitSuccessRequest = qq.bind(function() {\n                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)\n                        .then(onSuccessFromServer, onFailureFromServer);\n                }, self);\n\n                submitSuccessRequest();\n\n                return promise;\n            }\n\n            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.\n            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);\n        },\n\n        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.\n        _manualRetry: function(id) {\n            var successRequestCallback = this._failedSuccessRequestCallbacks[id];\n\n            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to S3.\n * Some inherited options and API methods have a special meaning in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploaderBasic = function(o) {\n        var options = {\n            request: {\n                // public key (required for server-side signing, ignored if `credentials` have been provided)\n                accessKey: null,\n\n                // padding, in milliseconds, to add to the x-amz-date header & the policy expiration date\n                clockDrift: 0\n            },\n\n            objectProperties: {\n                acl: \"private\",\n\n                // string or a function which may be promissory\n                bucket: qq.bind(function(id) {\n                    return qq.s3.util.getBucket(this.getEndpoint(id));\n                }, this),\n\n                // string or a function which may be promissory - only used for V4 multipart uploads\n                host: qq.bind(function(id) {\n                    return (/(?:http|https):\\/\\/(.+)(?:\\/.+)?/).exec(this._endpointStore.get(id))[1];\n                }, this),\n\n                // 'uuid', 'filename', or a function which may be promissory\n                key: \"uuid\",\n\n                reducedRedundancy: false,\n\n                // Defined at http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\n                region: \"us-east-1\",\n\n                serverSideEncryption: false\n            },\n\n            credentials: {\n                // Public key (required).\n                accessKey: null,\n                // Private key (required).\n                secretKey: null,\n                // Expiration date for the credentials (required).  May be an ISO string or a `Date`.\n                expiration: null,\n                // Temporary credentials session token.\n                // Only required for temporary credentials obtained via AssumeRoleWithWebIdentity.\n                sessionToken: null\n            },\n\n            // All but `version` are ignored if `credentials` is provided.\n            signature: {\n                customHeaders: {},\n                endpoint: null,\n                version: 2\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            // required if non-File-API browsers, such as IE9 and older, are used\n            iframeSupport: {\n                localBlankPagePath: null\n            },\n\n            chunking: {\n                // minimum part size is 5 MiB when uploading to S3\n                partSize: 5242880\n            },\n\n            cors: {\n                allowXdr: true\n            },\n\n            callbacks: {\n                onCredentialsExpired: function() {}\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        if (!this.setCredentials(options.credentials, true)) {\n            this._currentCredentials.accessKey = options.request.accessKey;\n        }\n\n        this._aclStore = this._createStore(options.objectProperties.acl);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds S3 keys for file representations constructed from a session request.\n        this._cannedKeys = {};\n        // Holds S3 buckets for file representations constructed from a session request.\n        this._cannedBuckets = {};\n\n        this._buckets = {};\n        this._hosts = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, {\n        getBucket: function(id) {\n            if (this._cannedBuckets[id] == null) {\n                return this._buckets[id];\n            }\n            return this._cannedBuckets[id];\n        },\n\n        /**\n         * @param id File ID\n         * @returns {*} Key name associated w/ the file, if one exists\n         */\n        getKey: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedKeys[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n\n            return this._cannedKeys[id];\n        },\n\n        /**\n         * Override the parent's reset function to cleanup various S3-related items.\n         */\n        reset: function() {\n            qq.FineUploaderBasic.prototype.reset.call(this);\n            this._failedSuccessRequestCallbacks = [];\n            this._buckets = {};\n            this._hosts = {};\n        },\n\n        setCredentials: function(credentials, ignoreEmpty) {\n            if (credentials && credentials.secretKey) {\n                if (!credentials.accessKey) {\n                    throw new qq.Error(\"Invalid credentials: no accessKey\");\n                }\n                else if (!credentials.expiration) {\n                    throw new qq.Error(\"Invalid credentials: no expiration\");\n                }\n                else {\n                    this._currentCredentials = qq.extend({}, credentials);\n\n                    // Ensure expiration is a `Date`.  If initially a string, assuming it is in ISO format.\n                    if (qq.isString(credentials.expiration)) {\n                        this._currentCredentials.expiration = new Date(credentials.expiration);\n                    }\n                }\n\n                return true;\n            }\n            else if (!ignoreEmpty) {\n                throw new qq.Error(\"Invalid credentials parameter!\");\n            }\n            else {\n                this._currentCredentials = {};\n            }\n        },\n\n        setAcl: function(acl, id) {\n            this._aclStore.set(acl, id);\n        },\n\n        /**\n         * Ensures the parent's upload handler creator passes any additional S3-specific options to the handler as well\n         * as information required to instantiate the specific handler based on the current browser's capabilities.\n         *\n         * @returns {qq.UploadHandlerController}\n         * @private\n         */\n        _createUploadHandler: function() {\n            var self = this,\n                additionalOptions = {\n                    aclStore: this._aclStore,\n                    getBucket: qq.bind(this._determineBucket, this),\n                    getHost: qq.bind(this._determineHost, this),\n                    getKeyName: qq.bind(this._determineKeyName, this),\n                    iframeSupport: this._options.iframeSupport,\n                    objectProperties: this._options.objectProperties,\n                    signature: this._options.signature,\n                    clockDrift: this._options.request.clockDrift,\n                    // pass size limit validation values to include in the request so AWS enforces this server-side\n                    validation: {\n                        minSizeLimit: this._options.validation.minSizeLimit,\n                        maxSizeLimit: this._options.validation.sizeLimit\n                    }\n                };\n\n            // We assume HTTP if it is missing from the start of the endpoint string.\n            qq.override(this._endpointStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var endpoint = super_.get(id);\n\n                        if (endpoint.indexOf(\"http\") < 0) {\n                            return \"http://\" + endpoint;\n                        }\n\n                        return endpoint;\n                    }\n                };\n            });\n\n            // Some param names should be lower case to avoid signature mismatches\n            qq.override(this._paramsStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var oldParams = super_.get(id),\n                            modifiedParams = {};\n\n                        qq.each(oldParams, function(name, val) {\n                            var paramName = name;\n\n                            if (qq.indexOf(qq.s3.util.CASE_SENSITIVE_PARAM_NAMES, paramName) < 0) {\n                                paramName = paramName.toLowerCase();\n                            }\n\n                            modifiedParams[paramName] = qq.isFunction(val) ? val() : val;\n                        });\n\n                        return modifiedParams;\n                    }\n                };\n            });\n\n            additionalOptions.signature.credentialsProvider = {\n                get: function() {\n                    return self._currentCredentials;\n                },\n\n                onExpired: function() {\n                    var updateCredentials = new qq.Promise(),\n                        callbackRetVal = self._options.callbacks.onCredentialsExpired();\n\n                    if (qq.isGenericPromise(callbackRetVal)) {\n                        callbackRetVal.then(function(credentials) {\n                            try {\n                                self.setCredentials(credentials);\n                                updateCredentials.success();\n                            }\n                            catch (error) {\n                                self.log(\"Invalid credentials returned from onCredentialsExpired callback! (\" + error.message + \")\", \"error\");\n                                updateCredentials.failure(\"onCredentialsExpired did not return valid credentials.\");\n                            }\n                        }, function(errorMsg) {\n                            self.log(\"onCredentialsExpired callback indicated failure! (\" + errorMsg + \")\", \"error\");\n                            updateCredentials.failure(\"onCredentialsExpired callback failed.\");\n                        });\n                    }\n                    else {\n                        self.log(\"onCredentialsExpired callback did not return a promise!\", \"error\");\n                        updateCredentials.failure(\"Unexpected return value for onCredentialsExpired.\");\n                    }\n\n                    return updateCredentials;\n                }\n            };\n\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this, additionalOptions, \"s3\");\n        },\n\n        _determineObjectPropertyValue: function(id, property) {\n            var maybe = this._options.objectProperties[property],\n                promise = new qq.Promise(),\n                self = this;\n\n            if (qq.isFunction(maybe)) {\n                maybe = maybe(id);\n                if (qq.isGenericPromise(maybe)) {\n                    promise = maybe;\n                }\n                else {\n                    promise.success(maybe);\n                }\n            }\n            else if (qq.isString(maybe)) {\n                promise.success(maybe);\n            }\n\n            promise.then(\n                function success(value) {\n                    self[\"_\" + property + \"s\"][id] = value;\n                },\n\n                function failure(errorMsg) {\n                    qq.log(\"Problem determining \" + property + \" for ID \" + id + \" (\" + errorMsg + \")\", \"error\");\n                }\n            );\n\n            return promise;\n        },\n\n        _determineBucket: function(id) {\n            return this._determineObjectPropertyValue(id, \"bucket\");\n        },\n\n        _determineHost: function(id) {\n            return this._determineObjectPropertyValue(id, \"host\");\n        },\n\n        /**\n         * Determine the file's key name and passes it to the caller via a promissory callback.  This also may\n         * delegate to an integrator-defined function that determines the file's key name on demand,\n         * which also may be promissory.\n         *\n         * @param id ID of the file\n         * @param filename Name of the file\n         * @returns {qq.Promise} A promise that will be fulfilled when the key name has been determined (and will be passed to the caller via the success callback).\n         * @private\n         */\n        _determineKeyName: function(id, filename) {\n            /*jshint -W015*/\n            var promise = new qq.Promise(),\n                keynameLogic = this._options.objectProperties.key,\n                extension = qq.getExtension(filename),\n                onGetKeynameFailure = promise.failure,\n                onGetKeynameSuccess = function(keyname, extension) {\n                    var keynameToUse = keyname;\n\n                    if (extension !== undefined) {\n                        keynameToUse += \".\" + extension;\n                    }\n\n                    promise.success(keynameToUse);\n                };\n\n            switch (keynameLogic) {\n                case \"uuid\":\n                    onGetKeynameSuccess(this.getUuid(id), extension);\n                    break;\n                case \"filename\":\n                    onGetKeynameSuccess(filename);\n                    break;\n                default:\n                    if (qq.isFunction(keynameLogic)) {\n                        this._handleKeynameFunction(keynameLogic, id, onGetKeynameSuccess, onGetKeynameFailure);\n                    }\n                    else {\n                        this.log(keynameLogic + \" is not a valid value for the s3.keyname option!\", \"error\");\n                        onGetKeynameFailure();\n                    }\n            }\n\n            return promise;\n        },\n\n        /**\n         * Called by the internal onUpload handler if the integrator has supplied a function to determine\n         * the file's key name.  The integrator's function may be promissory.  We also need to fulfill\n         * the promise contract associated with the caller as well.\n         *\n         * @param keynameFunc Integrator-supplied function that must be executed to determine the key name.  May be promissory.\n         * @param id ID of the associated file\n         * @param successCallback Invoke this if key name retrieval is successful, passing in the key name.\n         * @param failureCallback Invoke this if key name retrieval was unsuccessful.\n         * @private\n         */\n        _handleKeynameFunction: function(keynameFunc, id, successCallback, failureCallback) {\n            var self = this,\n                onSuccess = function(keyname) {\n                    successCallback(keyname);\n                },\n                onFailure = function(reason) {\n                    self.log(qq.format(\"Failed to retrieve key name for {}.  Reason: {}\", id, reason || \"null\"), \"error\");\n                    failureCallback(reason);\n                },\n                keyname = keynameFunc.call(this, id);\n\n            if (qq.isGenericPromise(keyname)) {\n                keyname.then(onSuccess, onFailure);\n            }\n            /*jshint -W116*/\n            else if (keyname == null) {\n                onFailure();\n            }\n            else {\n                onSuccess(keyname);\n            }\n        },\n\n        _getEndpointSpecificParams: function(id, response, maybeXhr) {\n            var params = {\n                key: this.getKey(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                bucket: this.getBucket(id)\n            };\n\n            if (maybeXhr && maybeXhr.getResponseHeader(\"ETag\")) {\n                params.etag = maybeXhr.getResponseHeader(\"ETag\");\n            }\n            else if (response.etag) {\n                params.etag = response.etag;\n            }\n\n            return params;\n        },\n\n        // Hooks into the base internal `_onSubmitDelete` to add key and bucket params to the delete file request.\n        _onSubmitDelete: function(id, onSuccessCallback) {\n            var additionalMandatedParams = {\n                key: this.getKey(id),\n                bucket: this.getBucket(id)\n            };\n\n            return qq.FineUploaderBasic.prototype._onSubmitDelete.call(this, id, onSuccessCallback, additionalMandatedParams);\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.s3Key == null) {\n                throw new qq.Error(\"Did not find s3Key property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedKeys[id] = sessionData.s3Key;\n                this._cannedBuckets[id] = sessionData.s3Bucket;\n            }\n\n            return id;\n        }\n    });\n}());\n","/* globals qq, CryptoJS */\n\n// IE 10 does not support Uint8ClampedArray. We don't need it, but CryptoJS attempts to reference it\n// inside a conditional via an instanceof check, which breaks S3 v4 signatures for chunked uploads.\nif (!window.Uint8ClampedArray) {\n    window.Uint8ClampedArray = function() {};\n}\n/**\n * Handles signature determination for HTML Form Upload requests and Multipart Uploader requests (via the S3 REST API).\n *\n * If the S3 requests are to be signed server side, this module will send a POST request to the server in an attempt\n * to solicit signatures for various S3-related requests.  This module also parses the response and attempts\n * to determine if the effort was successful.\n *\n * If the S3 requests are to be signed client-side, without the help of a server, this module will utilize CryptoJS to\n * sign the requests directly in the browser and send them off to S3.\n *\n * @param o Options associated with all such requests\n * @returns {{getSignature: Function}} API method used to initiate the signature request.\n * @constructor\n */\nqq.s3.RequestSigner = function(o) {\n    \"use strict\";\n\n    var requester,\n        thisSignatureRequester = this,\n        pendingSignatures = {},\n        options = {\n            expectingPolicy: false,\n            method: \"POST\",\n            signatureSpec: {\n                drift: 0,\n                credentialsProvider: {},\n                endpoint: null,\n                customHeaders: {},\n                version: 2\n            },\n            maxConnections: 3,\n            endpointStore: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        },\n        credentialsProvider,\n\n        generateHeaders = function(signatureConstructor, signature, promise) {\n            var headers = signatureConstructor.getHeaders();\n\n            if (options.signatureSpec.version === 4) {\n                headers.Authorization = qq.s3.util.V4_ALGORITHM_PARAM_VALUE +\n                    \" Credential=\" + options.signatureSpec.credentialsProvider.get().accessKey + \"/\" +\n                    qq.s3.util.getCredentialsDate(signatureConstructor.getRequestDate()) + \"/\" +\n                    options.signatureSpec.region + \"/\" +\n                    \"s3/aws4_request,\" +\n                    \"SignedHeaders=\" + signatureConstructor.getSignedHeaders() + \",\" +\n                    \"Signature=\" + signature;\n            }\n            else {\n                headers.Authorization = \"AWS \" + options.signatureSpec.credentialsProvider.get().accessKey + \":\" + signature;\n            }\n\n            promise.success(headers, signatureConstructor.getEndOfUrl());\n        },\n\n        v2 = {\n            getStringToSign: function(signatureSpec) {\n                return qq.format(\"{}\\n{}\\n{}\\n\\n{}/{}/{}\",\n                    signatureSpec.method,\n                    signatureSpec.contentMd5 || \"\",\n                    signatureSpec.contentType || \"\",\n                    signatureSpec.headersStr || \"\\n\",\n                    signatureSpec.bucket,\n                    signatureSpec.endOfUrl);\n            },\n\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\n                var headersWordArray = qq.CryptoJS.enc.Utf8.parse(headersStr),\n                    headersHmacSha1 = qq.CryptoJS.HmacSHA1(headersWordArray, credentialsProvider.get().secretKey),\n                    headersHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(headersHmacSha1);\n\n                generateHeaders(signatureConstructor, headersHmacSha1Base64, signatureEffort);\n            },\n\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n                var policyStr = JSON.stringify(policy),\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\n                    policyHmacSha1 = qq.CryptoJS.HmacSHA1(base64Policy, credentialsProvider.get().secretKey),\n                    policyHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(policyHmacSha1);\n\n                signatureEffort.success({\n                    policy: base64Policy,\n                    signature: policyHmacSha1Base64\n                }, updatedAccessKey, updatedSessionToken);\n            }\n        },\n\n        v4 = {\n            getCanonicalQueryString: function(endOfUri) {\n                var queryParamIdx = endOfUri.indexOf(\"?\"),\n                    canonicalQueryString = \"\",\n                    encodedQueryParams, encodedQueryParamNames, queryStrings;\n\n                if (queryParamIdx >= 0) {\n                    encodedQueryParams = {};\n                    queryStrings = endOfUri.substr(queryParamIdx + 1).split(\"&\");\n\n                    qq.each(queryStrings, function(idx, queryString) {\n                        var nameAndVal = queryString.split(\"=\"),\n                            paramVal = nameAndVal[1];\n\n                        if (paramVal == null) {\n                            paramVal = \"\";\n                        }\n\n                        encodedQueryParams[encodeURIComponent(nameAndVal[0])] = encodeURIComponent(paramVal);\n                    });\n\n                    encodedQueryParamNames = Object.keys(encodedQueryParams).sort();\n                    encodedQueryParamNames.forEach(function(encodedQueryParamName, idx) {\n                        canonicalQueryString += encodedQueryParamName + \"=\" + encodedQueryParams[encodedQueryParamName];\n                        if (idx < encodedQueryParamNames.length - 1) {\n                            canonicalQueryString += \"&\";\n                        }\n                    });\n                }\n\n                return canonicalQueryString;\n            },\n\n            getCanonicalRequest: function(signatureSpec) {\n                return qq.format(\"{}\\n{}\\n{}\\n{}\\n{}\\n{}\",\n                    signatureSpec.method,\n                    v4.getCanonicalUri(signatureSpec.endOfUrl),\n                    v4.getCanonicalQueryString(signatureSpec.endOfUrl),\n                    signatureSpec.headersStr || \"\\n\",\n                    v4.getSignedHeaders(signatureSpec.headerNames),\n                    signatureSpec.hashedContent);\n            },\n\n            getCanonicalUri: function(endOfUri) {\n                var path = endOfUri,\n                    queryParamIdx = endOfUri.indexOf(\"?\");\n\n                if (queryParamIdx > 0) {\n                    path = endOfUri.substr(0, queryParamIdx);\n                }\n                return \"/\" + path;\n            },\n\n            getEncodedHashedPayload: function(body) {\n                var promise = new qq.Promise(),\n                    reader;\n\n                if (qq.isBlob(body)) {\n                    // TODO hash blob in webworker if this becomes a notable perf issue\n                    reader = new FileReader();\n                    reader.onloadend = function(e) {\n                        if (e.target.readyState === FileReader.DONE) {\n                            if (e.target.error) {\n                                promise.failure(e.target.error);\n                            }\n                            else {\n                                var wordArray = qq.CryptoJS.lib.WordArray.create(e.target.result);\n                                promise.success(qq.CryptoJS.SHA256(wordArray).toString());\n                            }\n                        }\n                    };\n                    reader.readAsArrayBuffer(body);\n                }\n                else {\n                    body = body || \"\";\n                    promise.success(qq.CryptoJS.SHA256(body).toString());\n                }\n\n                return promise;\n            },\n\n            getScope: function(date, region) {\n                return qq.s3.util.getCredentialsDate(date) + \"/\" +\n                    region + \"/s3/aws4_request\";\n            },\n\n            getStringToSign: function(signatureSpec) {\n                var canonicalRequest = v4.getCanonicalRequest(signatureSpec),\n                    date = qq.s3.util.getV4PolicyDate(signatureSpec.date, signatureSpec.drift),\n                    hashedRequest = qq.CryptoJS.SHA256(canonicalRequest).toString(),\n                    scope = v4.getScope(signatureSpec.date, options.signatureSpec.region),\n                    stringToSignTemplate = \"AWS4-HMAC-SHA256\\n{}\\n{}\\n{}\";\n\n                return {\n                    hashed: qq.format(stringToSignTemplate, date, scope, hashedRequest),\n                    raw: qq.format(stringToSignTemplate, date, scope, canonicalRequest)\n                };\n            },\n\n            getSignedHeaders: function(headerNames) {\n                var signedHeaders = \"\";\n\n                headerNames.forEach(function(headerName, idx) {\n                    signedHeaders += headerName.toLowerCase();\n\n                    if (idx < headerNames.length - 1) {\n                        signedHeaders += \";\";\n                    }\n                });\n\n                return signedHeaders;\n            },\n\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\n                var secretKey = credentialsProvider.get().secretKey,\n                    headersPattern = /.+\\n.+\\n(\\d+)\\/(.+)\\/s3\\/.+\\n(.+)/,\n                    matches = headersPattern.exec(headersStr),\n                    dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\n\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\n\n                generateHeaders(signatureConstructor, qq.CryptoJS.HmacSHA256(headersStr, signingKey), signatureEffort);\n            },\n\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n                var policyStr = JSON.stringify(policy),\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\n                    secretKey = credentialsProvider.get().secretKey,\n                    credentialPattern = /.+\\/(.+)\\/(.+)\\/s3\\/aws4_request/,\n                    credentialCondition = (function() {\n                        var credential = null;\n                        qq.each(policy.conditions, function(key, condition) {\n                            var val = condition[\"x-amz-credential\"];\n                            if (val) {\n                                credential = val;\n                                return false;\n                            }\n                        });\n                        return credential;\n                    }()),\n                    matches, dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\n\n                matches = credentialPattern.exec(credentialCondition);\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\n\n                signatureEffort.success({\n                    policy: base64Policy,\n                    signature: qq.CryptoJS.HmacSHA256(base64Policy, signingKey).toString()\n                }, updatedAccessKey, updatedSessionToken);\n            }\n        };\n\n    qq.extend(options, o, true);\n    credentialsProvider = options.signatureSpec.credentialsProvider;\n\n    function handleSignatureReceived(id, xhrOrXdr, isError) {\n        var responseJson = xhrOrXdr.responseText,\n            pendingSignatureData = pendingSignatures[id],\n            promise = pendingSignatureData.promise,\n            signatureConstructor = pendingSignatureData.signatureConstructor,\n            errorMessage, response;\n\n        delete pendingSignatures[id];\n\n        // Attempt to parse what we would expect to be a JSON response\n        if (responseJson) {\n            try {\n                response = qq.parseJson(responseJson);\n            }\n            catch (error) {\n                options.log(\"Error attempting to parse signature response: \" + error, \"error\");\n            }\n        }\n\n        // If the response is parsable and contains an `error` property, use it as the error message\n        if (response && response.error) {\n            isError = true;\n            errorMessage = response.error;\n        }\n        // If we have received a parsable response, and it has an `invalid` property,\n        // the policy document or request headers may have been tampered with client-side.\n        else if (response && response.invalid) {\n            isError = true;\n            errorMessage = \"Invalid policy document or request headers!\";\n        }\n        // Make sure the response contains policy & signature properties\n        else if (response) {\n            if (options.expectingPolicy && !response.policy) {\n                isError = true;\n                errorMessage = \"Response does not include the base64 encoded policy!\";\n            }\n            else if (!response.signature) {\n                isError = true;\n                errorMessage = \"Response does not include the signature!\";\n            }\n        }\n        // Something unknown went wrong\n        else {\n            isError = true;\n            errorMessage = \"Received an empty or invalid response from the server!\";\n        }\n\n        if (isError) {\n            if (errorMessage) {\n                options.log(errorMessage, \"error\");\n            }\n\n            promise.failure(errorMessage);\n        }\n        else if (signatureConstructor) {\n            generateHeaders(signatureConstructor, response.signature, promise);\n        }\n        else {\n            promise.success(response);\n        }\n    }\n\n    function getStringToSignArtifacts(id, version, requestInfo) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            headerNames = [],\n            headersStr = \"\",\n            now = new Date(),\n            endOfUrl, signatureSpec, toSign,\n\n            generateStringToSign = function(requestInfo) {\n                var contentMd5,\n                    headerIndexesToRemove = [];\n\n                qq.each(requestInfo.headers, function(name) {\n                    headerNames.push(name);\n                });\n                headerNames.sort();\n\n                qq.each(headerNames, function(idx, headerName) {\n                    if (qq.indexOf(qq.s3.util.UNSIGNABLE_REST_HEADER_NAMES, headerName) < 0) {\n                        headersStr += headerName.toLowerCase() + \":\" + requestInfo.headers[headerName].trim() + \"\\n\";\n                    }\n                    else if (headerName === \"Content-MD5\") {\n                        contentMd5 = requestInfo.headers[headerName];\n                    }\n                    else {\n                        headerIndexesToRemove.unshift(idx);\n                    }\n                });\n\n                qq.each(headerIndexesToRemove, function(idx, headerIdx) {\n                    headerNames.splice(headerIdx, 1);\n                });\n\n                signatureSpec = {\n                    bucket: requestInfo.bucket,\n                    contentMd5: contentMd5,\n                    contentType: requestInfo.contentType,\n                    date: now,\n                    drift: options.signatureSpec.drift,\n                    endOfUrl: endOfUrl,\n                    hashedContent: requestInfo.hashedContent,\n                    headerNames: headerNames,\n                    headersStr: headersStr,\n                    method: method\n                };\n\n                toSign = version === 2 ? v2.getStringToSign(signatureSpec) : v4.getStringToSign(signatureSpec);\n\n                return {\n                    date: now,\n                    endOfUrl: endOfUrl,\n                    signedHeaders: version === 4 ? v4.getSignedHeaders(signatureSpec.headerNames) : null,\n                    toSign: version === 4 ? toSign.hashed : toSign,\n                    toSignRaw: version === 4 ? toSign.raw : toSign\n                };\n            };\n\n        /*jshint indent:false */\n        switch (requestInfo.type) {\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_ABORT:\n                method = \"DELETE\";\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_INITIATE:\n                endOfUrl = \"uploads\";\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_COMPLETE:\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_UPLOAD:\n                method = \"PUT\";\n                endOfUrl = qq.format(\"partNumber={}&uploadId={}\", requestInfo.partNum, requestInfo.uploadId);\n                break;\n        }\n\n        endOfUrl = requestInfo.key + \"?\" + endOfUrl;\n\n        if (version === 4) {\n            v4.getEncodedHashedPayload(requestInfo.content).then(function(hashedContent) {\n                requestInfo.headers[\"x-amz-content-sha256\"] = hashedContent;\n                requestInfo.headers.Host = requestInfo.host;\n                requestInfo.headers[\"x-amz-date\"] = qq.s3.util.getV4PolicyDate(now, options.signatureSpec.drift);\n                requestInfo.hashedContent = hashedContent;\n\n                promise.success(generateStringToSign(requestInfo));\n            }, function (err) {\n                promise.failure(err);\n            });\n        }\n        else {\n            promise.success(generateStringToSign(requestInfo));\n        }\n\n        return promise;\n    }\n\n    function determineSignatureClientSide(id, toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken) {\n        var updatedHeaders;\n\n        // REST API request\n        if (toBeSigned.signatureConstructor) {\n            if (updatedSessionToken) {\n                updatedHeaders = toBeSigned.signatureConstructor.getHeaders();\n                updatedHeaders[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\n                toBeSigned.signatureConstructor.withHeaders(updatedHeaders);\n            }\n\n            toBeSigned.signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\n                signApiRequest(toBeSigned.signatureConstructor, signatureArtifacts.stringToSign, signatureEffort);\n            }, function (err) {\n                signatureEffort.failure(err);\n            });\n        }\n        // Form upload (w/ policy document)\n        else {\n            updatedSessionToken && qq.s3.util.refreshPolicyCredentials(toBeSigned, updatedSessionToken);\n            signPolicy(toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n    }\n\n    function signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n        if (options.signatureSpec.version === 4) {\n            v4.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n        else {\n            v2.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n    }\n\n    function signApiRequest(signatureConstructor, headersStr, signatureEffort) {\n        if (options.signatureSpec.version === 4) {\n            v4.signApiRequest(signatureConstructor, headersStr, signatureEffort);\n        }\n        else {\n            v2.signApiRequest(signatureConstructor, headersStr, signatureEffort);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        contentType: \"application/json; charset=utf-8\",\n        endpointStore: {\n            get: function() {\n                return options.signatureSpec.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.signatureSpec.customHeaders,\n        log: options.log,\n        onComplete: handleSignatureReceived,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * On success, an object containing the parsed JSON response will be passed into the success handler if the\n         * request succeeds.  Otherwise an error message will be passed into the failure method.\n         *\n         * @param id File ID.\n         * @param toBeSigned an Object that holds the item(s) to be signed\n         * @returns {qq.Promise} A promise that is fulfilled when the response has been received.\n         */\n        getSignature: function(id, toBeSigned) {\n            var params = toBeSigned,\n                signatureConstructor = toBeSigned.signatureConstructor,\n                signatureEffort = new qq.Promise(),\n                queryParams;\n\n            if (options.signatureSpec.version === 4) {\n                queryParams = {v4: true};\n            }\n\n            if (credentialsProvider.get().secretKey && qq.CryptoJS) {\n                if (credentialsProvider.get().expiration.getTime() > Date.now()) {\n                    determineSignatureClientSide(id, toBeSigned, signatureEffort);\n                }\n                // If credentials are expired, ask for new ones before attempting to sign request\n                else {\n                    credentialsProvider.onExpired().then(function() {\n                        determineSignatureClientSide(id, toBeSigned,\n                            signatureEffort,\n                            credentialsProvider.get().accessKey,\n                            credentialsProvider.get().sessionToken);\n                    }, function(errorMsg) {\n                        options.log(\"Attempt to update expired credentials apparently failed! Unable to sign request.  \", \"error\");\n                        signatureEffort.failure(\"Unable to sign request - expired credentials.\");\n                    });\n                }\n            }\n            else {\n                options.log(\"Submitting S3 signature request for \" + id);\n\n                if (signatureConstructor) {\n                    signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\n                        params = {headers: signatureArtifacts.stringToSignRaw};\n                        requester.initTransport(id)\n                            .withParams(params)\n                            .withQueryParams(queryParams)\n                            .send();\n                    }, function (err) {\n                        options.log(\"Failed to construct signature. \", \"error\");\n                        signatureEffort.failure(\"Failed to construct signature.\");\n                    });\n                }\n                else {\n                    requester.initTransport(id)\n                        .withParams(params)\n                        .withQueryParams(queryParams)\n                        .send();\n                }\n\n                pendingSignatures[id] = {\n                    promise: signatureEffort,\n                    signatureConstructor: signatureConstructor\n                };\n            }\n\n            return signatureEffort;\n        },\n\n        constructStringToSign: function(type, bucket, host, key) {\n            var headers = {},\n                uploadId, content, contentType, partNum, artifacts;\n\n            return {\n                withHeaders: function(theHeaders) {\n                    headers = theHeaders;\n                    return this;\n                },\n\n                withUploadId: function(theUploadId) {\n                    uploadId = theUploadId;\n                    return this;\n                },\n\n                withContent: function(theContent) {\n                    content = theContent;\n                    return this;\n                },\n\n                withContentType: function(theContentType) {\n                    contentType = theContentType;\n                    return this;\n                },\n\n                withPartNum: function(thePartNum) {\n                    partNum = thePartNum;\n                    return this;\n                },\n\n                getToSign: function(id) {\n                    var sessionToken = credentialsProvider.get().sessionToken,\n                        promise = new qq.Promise(),\n                        adjustedDate = new Date(Date.now() + options.signatureSpec.drift);\n\n                    headers[\"x-amz-date\"] = adjustedDate.toUTCString();\n\n                    if (sessionToken) {\n                        headers[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n                    }\n\n                    getStringToSignArtifacts(id, options.signatureSpec.version, {\n                        bucket: bucket,\n                        content: content,\n                        contentType: contentType,\n                        headers: headers,\n                        host: host,\n                        key: key,\n                        partNum: partNum,\n                        type: type,\n                        uploadId: uploadId\n                    }).then(function(_artifacts_) {\n                        artifacts = _artifacts_;\n                        promise.success({\n                            headers: (function() {\n                                if (contentType) {\n                                    headers[\"Content-Type\"] = contentType;\n                                }\n\n                                delete headers.Host; // we don't want this to be set on the XHR-initiated request\n                                return headers;\n                            }()),\n                            date: artifacts.date,\n                            endOfUrl: artifacts.endOfUrl,\n                            signedHeaders: artifacts.signedHeaders,\n                            stringToSign: artifacts.toSign,\n                            stringToSignRaw: artifacts.toSignRaw\n                        });\n                    }, function (err) {\n                        promise.failure(err);\n                    });\n\n                    return promise;\n                },\n\n                getHeaders: function() {\n                    return qq.extend({}, headers);\n                },\n\n                getEndOfUrl: function() {\n                    return artifacts && artifacts.endOfUrl;\n                },\n\n                getRequestDate: function() {\n                    return artifacts && artifacts.date;\n                },\n\n                getSignedHeaders: function() {\n                    return artifacts && artifacts.signedHeaders;\n                }\n            };\n        }\n    });\n};\n\nqq.s3.RequestSigner.prototype.REQUEST_TYPE = {\n    MULTIPART_INITIATE: \"multipart_initiate\",\n    MULTIPART_COMPLETE: \"multipart_complete\",\n    MULTIPART_ABORT: \"multipart_abort\",\n    MULTIPART_UPLOAD: \"multipart_upload\"\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success\n * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`\n * property (by default) in an \"application/json\" response.\n *\n * @param o Options associated with all requests.\n * @constructor\n */\nqq.UploadSuccessAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingRequests = [],\n        options = {\n            method: \"POST\",\n            endpoint: null,\n            maxConnections: 3,\n            customHeaders: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    function handleSuccessResponse(id, xhrOrXdr, isError) {\n        var promise = pendingRequests[id],\n            responseJson = xhrOrXdr.responseText,\n            successIndicator = {success: true},\n            failureIndicator = {success: false},\n            parsedResponse;\n\n        delete pendingRequests[id];\n\n        options.log(qq.format(\"Received the following response body to an upload success request for id {}: {}\", id, responseJson));\n\n        try {\n            parsedResponse = qq.parseJson(responseJson);\n\n            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties\n            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,\n            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the\n            // response body for an \"error\" response.\n            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {\n                options.log(\"Upload success request was rejected by the server.\", \"error\");\n                promise.failure(qq.extend(parsedResponse, failureIndicator));\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(qq.extend(parsedResponse, successIndicator));\n            }\n        }\n        catch (error) {\n            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.\n            if (isError) {\n                options.log(qq.format(\"Your server indicated failure in its upload success request response for id {}!\", id), \"error\");\n                promise.failure(failureIndicator);\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(successIndicator);\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: handleSuccessResponse,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.\n         *\n         * @param id ID of the associated file\n         * @param spec `Object` with the properties that correspond to important values that we want to\n         * send to the server with this request.\n         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed\n         * payload of the response will be passed into the `failure` or `success` promise method.\n         */\n        sendSuccessRequest: function(id, spec) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting upload success request/notification for \" + id);\n\n            requester.initTransport(id)\n                .withParams(spec)\n                .send();\n\n            pendingRequests[id] = promise;\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Initiate Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadInitiate.html)\n * request to S3 via the REST API.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.s3.InitiateMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingInitiateRequests = {},\n        options = {\n            filenameParam: \"qqfilename\",\n            method: \"POST\",\n            endpointStore: null,\n            paramsStore: null,\n            signatureSpec: null,\n            aclStore: null,\n            reducedRedundancy: false,\n            serverSideEncryption: false,\n            maxConnections: 3,\n            getContentType: function(id) {},\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            getName: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Determine all headers for the \"Initiate MPU\" request, including the \"Authorization\" header, which must be determined\n     * by the local server.  This is a promissory function.  If the server responds with a signature, the headers\n     * (including the Authorization header) will be passed into the success method of the promise.  Otherwise, the failure\n     * method on the promise will be called.\n     *\n     * @param id Associated file ID\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id) {\n        var bucket = options.getBucket(id),\n            host = options.getHost(id),\n            headers = {},\n            promise = new qq.Promise(),\n            key = options.getKey(id),\n            signatureConstructor;\n\n        headers[\"x-amz-acl\"] = options.aclStore.get(id);\n\n        if (options.reducedRedundancy) {\n            headers[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n        }\n\n        if (options.serverSideEncryption) {\n            headers[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n        }\n\n        headers[qq.s3.util.AWS_PARAM_PREFIX + options.filenameParam] = encodeURIComponent(options.getName(id));\n\n        qq.each(options.paramsStore.get(id), function(name, val) {\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\n                headers[name] = val;\n            }\n            else {\n                headers[qq.s3.util.AWS_PARAM_PREFIX + name] = encodeURIComponent(val);\n            }\n        });\n\n        signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n            (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_INITIATE, bucket, host, key)\n            .withContentType(options.getContentType(id))\n            .withHeaders(headers);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Initiate MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleInitiateRequestComplete(id, xhr, isError) {\n        var promise = pendingInitiateRequests[id],\n            domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            uploadIdElements, messageElements, uploadId, errorMessage, status;\n\n        delete pendingInitiateRequests[id];\n\n        // The base ajax requester may declare the request to be a failure based on status code.\n        if (isError) {\n            status = xhr.status;\n\n            messageElements = responseDoc.getElementsByTagName(\"Message\");\n            if (messageElements.length > 0) {\n                errorMessage = messageElements[0].textContent;\n            }\n        }\n        // If the base ajax requester has not declared this a failure, make sure we can retrieve the uploadId from the response.\n        else {\n            uploadIdElements = responseDoc.getElementsByTagName(\"UploadId\");\n            if (uploadIdElements.length > 0) {\n                uploadId = uploadIdElements[0].textContent;\n            }\n            else {\n                errorMessage = \"Upload ID missing from request\";\n            }\n        }\n\n        // Either fail the promise (passing a descriptive error message) or declare it a success (passing the upload ID)\n        if (uploadId === undefined) {\n            if (errorMessage) {\n                options.log(qq.format(\"Specific problem detected initiating multipart upload request for {}: '{}'.\", id, errorMessage), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Unexplained error with initiate multipart upload request for {}.  Status code {}.\", id, status), \"error\");\n            }\n\n            promise.failure(\"Problem initiating upload request.\", xhr);\n        }\n        else {\n            options.log(qq.format(\"Initiate multipart upload request successful for {}.  Upload ID is {}\", id, uploadId));\n            promise.success(uploadId, xhr);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleInitiateRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Initiate MPU\" request to AWS via the REST API.  First, though, we must get a signature from the\n         * local server for the request.  If all is successful, the uploadId from AWS will be passed into the promise's\n         * success handler. Otherwise, an error message will ultimately be passed into the failure method.\n         *\n         * @param id The ID associated with the file\n         * @returns {qq.Promise}\n         */\n        send: function(id) {\n            var promise = new qq.Promise();\n\n            getHeaders(id).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 initiate multipart upload request for \" + id);\n\n                pendingInitiateRequests[id] = promise;\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Complete Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadComplete.html)\n * request to S3 via the REST API.\n *\n * @param o Options passed by the creator, to overwrite any default option values.\n * @constructor\n */\nqq.s3.CompleteMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingCompleteRequests = {},\n        options = {\n            method: \"POST\",\n            contentType: \"text/xml\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Complete\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId, body) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_COMPLETE, bucket, host, options.getKey(id))\n                .withUploadId(uploadId)\n                .withContent(body)\n                .withContentType(\"application/xml; charset=UTF-8\");\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Complete MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleCompleteRequestComplete(id, xhr, isError) {\n        var promise = pendingCompleteRequests[id],\n            domParser = new DOMParser(),\n            bucket = options.getBucket(id),\n            key = options.getKey(id),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            bucketEls = responseDoc.getElementsByTagName(\"Bucket\"),\n            keyEls = responseDoc.getElementsByTagName(\"Key\");\n\n        delete pendingCompleteRequests[id];\n\n        options.log(qq.format(\"Complete response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Complete Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (bucketEls.length && keyEls.length) {\n                if (bucketEls[0].textContent !== bucket) {\n                    isError = true;\n                    options.log(qq.format(\"Wrong bucket in response to Complete Multipart Upload request for {}.\", id), \"error\");\n                }\n\n                // TODO Compare key name from response w/ expected key name if AWS ever fixes the encoding of key names in this response.\n            }\n            else {\n                isError = true;\n                options.log(qq.format(\"Missing bucket and/or key in response to Complete Multipart Upload request for {}.\", id), \"error\");\n            }\n        }\n\n        if (isError) {\n            promise.failure(\"Problem combining the file parts!\", xhr);\n        }\n        else {\n            promise.success({}, xhr);\n        }\n    }\n\n    /**\n     * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n     * @returns {string} XML string containing the body to send with the \"Complete\" request\n     */\n    function getCompleteRequestBody(etagEntries) {\n        var doc = document.implementation.createDocument(null, \"CompleteMultipartUpload\", null);\n\n        // The entries MUST be sorted by part number, per the AWS API spec.\n        etagEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(etagEntries, function(idx, etagEntry) {\n            var part = etagEntry.part,\n                etag = etagEntry.etag,\n                partEl = doc.createElement(\"Part\"),\n                partNumEl = doc.createElement(\"PartNumber\"),\n                partNumTextEl = doc.createTextNode(part),\n                etagTextEl = doc.createTextNode(etag),\n                etagEl = doc.createElement(\"ETag\");\n\n            etagEl.appendChild(etagTextEl);\n            partNumEl.appendChild(partNumTextEl);\n            partEl.appendChild(partNumEl);\n            partEl.appendChild(etagEl);\n            qq(doc).children()[0].appendChild(partEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: \"application/xml; charset=UTF-8\",\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleCompleteRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Complete\" request and fulfills the returned promise when the success of this request is known.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n         * @returns {qq.Promise}\n         */\n        send: function(id, uploadId, etagEntries) {\n            var promise = new qq.Promise(),\n                body = getCompleteRequestBody(etagEntries);\n\n            getHeaders(id, uploadId, body).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 complete multipart upload request for \" + id);\n\n                pendingCompleteRequests[id] = promise;\n                delete headers[\"Content-Type\"];\n\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .withPayload(body)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Ajax requester used to send an [\"Abort Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadAbort.html)\n * request to S3 via the REST API.\n\n * @param o\n * @constructor\n */\nqq.s3.AbortMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Abort\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @param id Associated file ID\n     * @param uploadId ID of the associated upload, according to AWS\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_ABORT, bucket, host, options.getKey(id))\n                .withUploadId(uploadId);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Abort MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleAbortRequestComplete(id, xhr, isError) {\n        var domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            errorEls = responseDoc.getElementsByTagName(\"Error\"),\n            awsErrorMsg;\n\n        options.log(qq.format(\"Abort response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Abort Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (errorEls.length) {\n                isError = true;\n                awsErrorMsg = responseDoc.getElementsByTagName(\"Message\")[0].textContent;\n                options.log(qq.format(\"Failed to Abort Multipart Upload request for {}.  Error: {}\", id, awsErrorMsg), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Abort MPU request succeeded for file ID {}.\", id));\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [\"DELETE\"],\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleAbortRequestComplete,\n        successfulResponseCodes: {\n            DELETE: [204]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Abort\" request.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         */\n        send: function(id, uploadId) {\n            getHeaders(id, uploadId).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 Abort multipart upload request for \" + id);\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            });\n        }\n    });\n};\n","/*globals qq */\n/**\n * Upload handler used by the upload to S3 module that depends on File API support, and, therefore, makes use of\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to S3 buckets via the associated AWS API.\n *\n * If chunking is supported and enabled, the S3 Multipart Upload REST API is utilized.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.s3.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var getName = proxy.getName,\n        log = proxy.log,\n        clockDrift = spec.clockDrift,\n        expectedStatus = 200,\n        onGetBucket = spec.getBucket,\n        onGetHost = spec.getHost,\n        onGetKeyName = spec.getKeyName,\n        filenameParam = spec.filenameParam,\n        paramsStore = spec.paramsStore,\n        endpointStore = spec.endpointStore,\n        aclStore = spec.aclStore,\n        reducedRedundancy = spec.objectProperties.reducedRedundancy,\n        region = spec.objectProperties.region,\n        serverSideEncryption = spec.objectProperties.serverSideEncryption,\n        validation = spec.validation,\n        signature = qq.extend({region: region, drift: clockDrift}, spec.signature),\n        handler = this,\n        credentialsProvider = spec.signature.credentialsProvider,\n\n        chunked = {\n            // Sends a \"Complete Multipart Upload\" request and then signals completion of the upload\n            // when the response to this request has been parsed.\n            combine: function(id) {\n                var uploadId = handler._getPersistableData(id).uploadId,\n                    etagMap = handler._getPersistableData(id).etags,\n                    result = new qq.Promise();\n\n                requesters.completeMultipart.send(id, uploadId, etagMap).then(\n                    result.success,\n\n                    function failure(reason, xhr) {\n                        result.failure(upload.done(id, xhr).response, xhr);\n                    }\n                );\n\n                return result;\n            },\n\n            // The last step in handling a chunked upload.  This is called after each chunk has been sent.\n            // The request may be successful, or not.  If it was successful, we must extract the \"ETag\" element\n            // in the XML response and store that along with the associated part number.\n            // We need these items to \"Complete\" the multipart upload after all chunks have been successfully sent.\n            done: function(id, xhr, chunkIdx) {\n                var response = upload.response.parse(id, xhr),\n                    etag;\n\n                if (response.success) {\n                    etag = xhr.getResponseHeader(\"ETag\");\n\n                    if (!handler._getPersistableData(id).etags) {\n                        handler._getPersistableData(id).etags = [];\n                    }\n                    handler._getPersistableData(id).etags.push({part: chunkIdx + 1, etag: etag});\n                }\n            },\n\n            /**\n             * Determines headers that must be attached to the chunked (Multipart Upload) request.  One of these headers is an\n             * Authorization value, which must be determined by asking the local server to sign the request first.  So, this\n             * function returns a promise.  Once all headers are determined, the `success` method of the promise is called with\n             * the headers object.  If there was some problem determining the headers, we delegate to the caller's `failure`\n             * callback.\n             *\n             * @param id File ID\n             * @param chunkIdx Index of the chunk to PUT\n             * @returns {qq.Promise}\n             */\n            initHeaders: function(id, chunkIdx, blob) {\n                var headers = {},\n                    bucket = upload.bucket.getName(id),\n                    host = upload.host.getName(id),\n                    key = upload.key.urlSafe(id),\n                    promise = new qq.Promise(),\n                    signatureConstructor = requesters.restSignature.constructStringToSign\n                        (requesters.restSignature.REQUEST_TYPE.MULTIPART_UPLOAD, bucket, host, key)\n                        .withPartNum(chunkIdx + 1)\n                        .withContent(blob)\n                        .withUploadId(handler._getPersistableData(id).uploadId);\n\n                // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n                requesters.restSignature.getSignature(id + \".\" + chunkIdx, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n                return promise;\n            },\n\n            put: function(id, chunkIdx) {\n                var xhr = handler._createXhr(id, chunkIdx),\n                    chunkData = handler._getChunkData(id, chunkIdx),\n                    domain = spec.endpointStore.get(id),\n                    promise = new qq.Promise();\n\n                // Add appropriate headers to the multipart upload request.\n                // Once these have been determined (asynchronously) attach the headers and send the chunk.\n                chunked.initHeaders(id, chunkIdx, chunkData.blob).then(function(headers, endOfUrl) {\n                    if (xhr._cancelled) {\n                        log(qq.format(\"Upload of item {}.{} cancelled. Upload will not start after successful signature request.\", id, chunkIdx));\n                        promise.failure({error: \"Chunk upload cancelled\"});\n                    }\n                    else {\n                        var url = domain + \"/\" + endOfUrl;\n                        handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n                        upload.track(id, xhr, chunkIdx).then(promise.success, promise.failure);\n                        xhr.open(\"PUT\", url, true);\n\n                        var hasContentType = false;\n                        qq.each(headers, function(name, val) {\n                            if (name === \"Content-Type\") {\n                                hasContentType = true;\n                            }\n\n                            xhr.setRequestHeader(name, val);\n                        });\n\n                        // Workaround for IE Edge\n                        if (!hasContentType) {\n                            xhr.setRequestHeader(\"Content-Type\", \"\");\n                        }\n\n                        xhr.send(chunkData.blob);\n                    }\n                }, function() {\n                    promise.failure({error: \"Problem signing the chunk!\"}, xhr);\n                });\n\n                return promise;\n            },\n\n            send: function(id, chunkIdx) {\n                var promise = new qq.Promise();\n\n                chunked.setup(id).then(\n                    // The \"Initiate\" request succeeded.  We are ready to send the first chunk.\n                    function() {\n                        chunked.put(id, chunkIdx).then(promise.success, promise.failure);\n                    },\n\n                    // We were unable to initiate the chunked upload process.\n                    function(errorMessage, xhr) {\n                        promise.failure({error: errorMessage}, xhr);\n                    }\n                );\n\n                return promise;\n            },\n\n            /**\n             * Sends an \"Initiate Multipart Upload\" request to S3 via the REST API, but only if the MPU has not already been\n             * initiated.\n             *\n             * @param id Associated file ID\n             * @returns {qq.Promise} A promise that is fulfilled when the initiate request has been sent and the response has been parsed.\n             */\n            setup: function(id) {\n                var promise = new qq.Promise(),\n                    uploadId = handler._getPersistableData(id).uploadId,\n                    uploadIdPromise = new qq.Promise();\n\n                if (!uploadId) {\n                    handler._getPersistableData(id).uploadId = uploadIdPromise;\n                    requesters.initiateMultipart.send(id).then(\n                        function(uploadId) {\n                            handler._getPersistableData(id).uploadId = uploadId;\n                            uploadIdPromise.success(uploadId);\n                            promise.success(uploadId);\n                        },\n                        function(errorMsg, xhr) {\n                            handler._getPersistableData(id).uploadId = null;\n                            promise.failure(errorMsg, xhr);\n                            uploadIdPromise.failure(errorMsg, xhr);\n                        }\n                    );\n                }\n                else if (uploadId instanceof qq.Promise) {\n                    uploadId.then(function(uploadId) {\n                        promise.success(uploadId);\n                    });\n                }\n                else {\n                    promise.success(uploadId);\n                }\n\n                return promise;\n            }\n        },\n\n        requesters = {\n            abortMultipart: new qq.s3.AbortMultipartAjaxRequester({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log,\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                }\n            }),\n\n            completeMultipart: new qq.s3.CompleteMultipartAjaxRequester({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log,\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                }\n            }),\n\n            initiateMultipart: new qq.s3.InitiateMultipartAjaxRequester({\n                filenameParam: filenameParam,\n                endpointStore: endpointStore,\n                paramsStore: paramsStore,\n                signatureSpec: signature,\n                aclStore: aclStore,\n                reducedRedundancy: reducedRedundancy,\n                serverSideEncryption: serverSideEncryption,\n                cors: spec.cors,\n                log: log,\n                getContentType: function(id) {\n                    return handler._getMimeType(id);\n                },\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                },\n                getName: function(id) {\n                    return getName(id);\n                }\n            }),\n\n            policySignature: new qq.s3.RequestSigner({\n                expectingPolicy: true,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log\n            }),\n\n            restSignature: new qq.s3.RequestSigner({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log\n            })\n        },\n\n        simple = {\n            /**\n             * Used for simple (non-chunked) uploads to determine the parameters to send along with the request.  Part of this\n             * process involves asking the local server to sign the request, so this function returns a promise.  The promise\n             * is fulfilled when all parameters are determined, or when we determine that all parameters cannot be calculated\n             * due to some error.\n             *\n             * @param id File ID\n             * @returns {qq.Promise}\n             */\n            initParams: function(id) {\n                /*jshint -W040 */\n                var customParams = paramsStore.get(id);\n                customParams[filenameParam] = getName(id);\n\n                return qq.s3.util.generateAwsParams({\n                    endpoint: endpointStore.get(id),\n                    clockDrift: clockDrift,\n                    params: customParams,\n                    type: handler._getMimeType(id),\n                    bucket: upload.bucket.getName(id),\n                    key: handler.getThirdPartyFileId(id),\n                    accessKey: credentialsProvider.get().accessKey,\n                    sessionToken: credentialsProvider.get().sessionToken,\n                    acl: aclStore.get(id),\n                    expectedStatus: expectedStatus,\n                    minFileSize: validation.minSizeLimit,\n                    maxFileSize: validation.maxSizeLimit,\n                    reducedRedundancy: reducedRedundancy,\n                    region: region,\n                    serverSideEncryption: serverSideEncryption,\n                    signatureVersion: signature.version,\n                    log: log\n                },\n                qq.bind(requesters.policySignature.getSignature, this, id));\n            },\n\n            send: function(id) {\n                var promise = new qq.Promise(),\n                    xhr = handler._createXhr(id),\n                    fileOrBlob = handler.getFile(id);\n\n                handler._registerProgressHandler(id);\n                upload.track(id, xhr).then(promise.success, promise.failure);\n\n                // Delegate to a function the sets up the XHR request and notifies us when it is ready to be sent, along w/ the payload.\n                simple.setup(id, xhr, fileOrBlob).then(function(toSend) {\n                    log(\"Sending upload request for \" + id);\n                    xhr.send(toSend);\n                }, promise.failure);\n\n                return promise;\n            },\n\n            /**\n             * Starts the upload process by delegating to an async function that determine parameters to be attached to the\n             * request.  If all params can be determined, we are called back with the params and the caller of this function is\n             * informed by invoking the `success` method on the promise returned by this function, passing the payload of the\n             * request.  If some error occurs here, we delegate to a function that signals a failure for this upload attempt.\n             *\n             * Note that this is only used by the simple (non-chunked) upload process.\n             *\n             * @param id File ID\n             * @param xhr XMLHttpRequest to use for the upload\n             * @param fileOrBlob `File` or `Blob` to send\n             * @returns {qq.Promise}\n             */\n            setup: function(id, xhr, fileOrBlob) {\n                var formData = new FormData(),\n                    endpoint = endpointStore.get(id),\n                    url = endpoint,\n                    promise = new qq.Promise();\n\n                simple.initParams(id).then(\n                    // Success - all params determined\n                    function(awsParams) {\n                        xhr.open(\"POST\", url, true);\n\n                        qq.obj2FormData(awsParams, formData);\n\n                        // AWS requires the file field be named \"file\".\n                        formData.append(\"file\", fileOrBlob);\n\n                        promise.success(formData);\n                    },\n\n                    // Failure - we couldn't determine some params (likely the signature)\n                    function(errorMessage) {\n                        promise.failure({error: errorMessage});\n                    }\n                );\n\n                return promise;\n            }\n        },\n\n        upload = {\n            /**\n             * Note that this is called when an upload has reached a termination point,\n             * regardless of success/failure.  For example, it is called when we have\n             * encountered an error during the upload or when the file may have uploaded successfully.\n             *\n             * @param id file ID\n             */\n            bucket: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        cachedBucket = handler._getFileState(id).bucket;\n\n                    if (cachedBucket) {\n                        promise.success(cachedBucket);\n                    }\n                    else {\n                        onGetBucket(id).then(function(bucket) {\n                            handler._getFileState(id).bucket = bucket;\n                            promise.success(bucket);\n                        }, promise.failure);\n                    }\n\n                    return promise;\n                },\n\n                getName: function(id) {\n                    return handler._getFileState(id).bucket;\n                }\n            },\n\n            host: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        cachedHost = handler._getFileState(id).host;\n\n                    if (cachedHost) {\n                        promise.success(cachedHost);\n                    }\n                    else {\n                        onGetHost(id).then(function(host) {\n                            handler._getFileState(id).host = host;\n                            promise.success(host);\n                        }, promise.failure);\n                    }\n\n                    return promise;\n                },\n\n                getName: function(id) {\n                    return handler._getFileState(id).host;\n                }\n            },\n\n            done: function(id, xhr) {\n                var response = upload.response.parse(id, xhr),\n                    isError = response.success !== true;\n\n                if (isError && upload.response.shouldReset(response.code)) {\n                    log(\"This is an unrecoverable error, we must restart the upload entirely on the next retry attempt.\", \"error\");\n                    response.reset = true;\n                }\n\n                return {\n                    success: !isError,\n                    response: response\n                };\n            },\n\n            key: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        key = handler.getThirdPartyFileId(id);\n\n                    /* jshint eqnull:true */\n                    if (key == null) {\n                        handler._setThirdPartyFileId(id, promise);\n                        onGetKeyName(id, getName(id)).then(\n                            function(keyName) {\n                                handler._setThirdPartyFileId(id, keyName);\n                                promise.success(keyName);\n                            },\n                            function(errorReason) {\n                                handler._setThirdPartyFileId(id, null);\n                                promise.failure(errorReason);\n                            }\n                        );\n                    }\n                    else if (qq.isGenericPromise(key)) {\n                        key.then(promise.success, promise.failure);\n                    }\n                    else {\n                        promise.success(key);\n                    }\n\n                    return promise;\n                },\n\n                urlSafe: function(id) {\n                    var encodedKey = handler.getThirdPartyFileId(id);\n                    return qq.s3.util.uriEscapePath(encodedKey);\n                }\n            },\n\n            response: {\n                parse: function(id, xhr) {\n                    var response = {},\n                        parsedErrorProps;\n\n                    try {\n                        log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\n\n                        if (xhr.status === expectedStatus) {\n                            response.success = true;\n                        }\n                        else {\n                            parsedErrorProps = upload.response.parseError(xhr.responseText);\n\n                            if (parsedErrorProps) {\n                                response.error = parsedErrorProps.message;\n                                response.code = parsedErrorProps.code;\n                            }\n                        }\n                    }\n                    catch (error) {\n                        log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\n                    }\n\n                    return response;\n                },\n\n                /**\n                 * This parses an XML response by extracting the \"Message\" and \"Code\" elements that accompany AWS error responses.\n                 *\n                 * @param awsResponseXml XML response from AWS\n                 * @returns {object} Object w/ `code` and `message` properties, or undefined if we couldn't find error info in the XML document.\n                 */\n                parseError: function(awsResponseXml) {\n                    var parser = new DOMParser(),\n                        parsedDoc = parser.parseFromString(awsResponseXml, \"application/xml\"),\n                        errorEls = parsedDoc.getElementsByTagName(\"Error\"),\n                        errorDetails = {},\n                        codeEls, messageEls;\n\n                    if (errorEls.length) {\n                        codeEls = parsedDoc.getElementsByTagName(\"Code\");\n                        messageEls = parsedDoc.getElementsByTagName(\"Message\");\n\n                        if (messageEls.length) {\n                            errorDetails.message = messageEls[0].textContent;\n                        }\n\n                        if (codeEls.length) {\n                            errorDetails.code = codeEls[0].textContent;\n                        }\n\n                        return errorDetails;\n                    }\n                },\n\n                // Determine if the upload should be restarted on the next retry attempt\n                // based on the error code returned in the response from AWS.\n                shouldReset: function(errorCode) {\n                    /*jshint -W014 */\n                    return errorCode === \"EntityTooSmall\"\n                        || errorCode === \"InvalidPart\"\n                        || errorCode === \"InvalidPartOrder\"\n                        || errorCode === \"NoSuchUpload\";\n                }\n            },\n\n            start: function(params) {\n                var id = params.id;\n                var optChunkIdx = params.chunkIdx;\n\n                var promise = new qq.Promise();\n\n                upload.key.promise(id).then(function() {\n                    upload.bucket.promise(id).then(function() {\n                        upload.host.promise(id).then(function() {\n                            /* jshint eqnull:true */\n                            if (optChunkIdx == null) {\n                                simple.send(id).then(promise.success, promise.failure);\n                            }\n                            else {\n                                chunked.send(id, optChunkIdx).then(promise.success, promise.failure);\n                            }\n                        });\n                    });\n                },\n                function(errorReason) {\n                    promise.failure({error: errorReason});\n                });\n\n                return promise;\n            },\n\n            track: function(id, xhr, optChunkIdx) {\n                var promise = new qq.Promise();\n\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState === 4) {\n                        var result;\n\n                        /* jshint eqnull:true */\n                        if (optChunkIdx == null) {\n                            result = upload.done(id, xhr);\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\n                        }\n                        else {\n                            chunked.done(id, xhr, optChunkIdx);\n                            result = upload.done(id, xhr);\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\n                        }\n                    }\n                };\n\n                return promise;\n            }\n        };\n\n    qq.extend(this, {\n        uploadChunk: upload.start,\n        uploadFile: function(id) {\n            return upload.start({ id: id });\n        }\n    });\n\n    qq.extend(this, new qq.XhrUploadHandler({\n        options: qq.extend({namespace: \"s3\"}, spec),\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n    }));\n\n    qq.override(this, function(super_) {\n        return {\n            expunge: function(id) {\n                var uploadId = handler._getPersistableData(id) && handler._getPersistableData(id).uploadId,\n                    existedInLocalStorage = handler._maybeDeletePersistedChunkData(id);\n\n                if (uploadId !== undefined && existedInLocalStorage) {\n                    requesters.abortMultipart.send(id, uploadId);\n                }\n\n                super_.expunge(id);\n            },\n\n            finalizeChunks: function(id) {\n                return chunked.combine(id);\n            },\n\n            _getLocalStorageId: function(id) {\n                var baseStorageId = super_._getLocalStorageId(id),\n                    bucketName = upload.bucket.getName(id);\n\n                return baseStorageId + \"-\" + bucketName;\n            }\n        };\n    });\n};\n","/*globals qq */\n/**\n * Upload handler used by the upload to S3 module that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to S3 buckets via the associated\n * AWS API.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.s3.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        clockDrift = options.clockDrift,\n        onUuidChanged = proxy.onUuidChanged,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        onGetBucket = options.getBucket,\n        onGetKeyName = options.getKeyName,\n        filenameParam = options.filenameParam,\n        paramsStore = options.paramsStore,\n        endpointStore = options.endpointStore,\n        aclStore = options.aclStore,\n        reducedRedundancy = options.objectProperties.reducedRedundancy,\n        region = options.objectProperties.region,\n        serverSideEncryption = options.objectProperties.serverSideEncryption,\n        validation = options.validation,\n        signature = options.signature,\n        successRedirectUrl = options.iframeSupport.localBlankPagePath,\n        credentialsProvider = options.signature.credentialsProvider,\n        getSignatureAjaxRequester = new qq.s3.RequestSigner({\n            signatureSpec: signature,\n            cors: options.cors,\n            log: log\n        });\n\n    if (successRedirectUrl === undefined) {\n        throw new Error(\"successRedirectEndpoint MUST be defined if you intend to use browsers that do not support the File API!\");\n    }\n\n    /**\n     * Attempt to parse the contents of an iframe after receiving a response from the server.  If the contents cannot be\n     * read (perhaps due to a security error) it is safe to assume that the upload was not successful since Amazon should\n     * have redirected to a known endpoint that should provide a parseable response.\n     *\n     * @param id ID of the associated file\n     * @param iframe target of the form submit\n     * @returns {boolean} true if the contents can be read, false otherwise\n     */\n    function isValidResponse(id, iframe) {\n        var response,\n            endpoint = options.endpointStore.get(id),\n            bucket = handler._getFileState(id).bucket,\n            doc,\n            innerHtml,\n            responseData;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            responseData = qq.s3.util.parseIframeResponse(iframe);\n            if (responseData.bucket === bucket &&\n                responseData.key === qq.s3.util.encodeQueryStringParam(handler.getThirdPartyFileId(id))) {\n\n                return true;\n            }\n\n            log(\"Response from AWS included an unexpected bucket or key name.\", \"error\");\n\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n        }\n\n        return false;\n    }\n\n    function generateAwsParams(id) {\n        /*jshint -W040 */\n        var customParams = paramsStore.get(id);\n\n        customParams[filenameParam] = getName(id);\n\n        return qq.s3.util.generateAwsParams({\n            endpoint: endpointStore.get(id),\n            clockDrift: clockDrift,\n            params: customParams,\n            bucket: handler._getFileState(id).bucket,\n            key: handler.getThirdPartyFileId(id),\n            accessKey: credentialsProvider.get().accessKey,\n            sessionToken: credentialsProvider.get().sessionToken,\n            acl: aclStore.get(id),\n            minFileSize: validation.minSizeLimit,\n            maxFileSize: validation.maxSizeLimit,\n            successRedirectUrl: successRedirectUrl,\n            reducedRedundancy: reducedRedundancy,\n            region: region,\n            serverSideEncryption: serverSideEncryption,\n            signatureVersion: signature.version,\n            log: log\n        },\n        qq.bind(getSignatureAjaxRequester.getSignature, this, id));\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            endpoint = options.endpointStore.get(id),\n            fileName = getName(id);\n\n        generateAwsParams(id).then(function(params) {\n            var form = handler._initFormForUpload({\n                method: method,\n                endpoint: endpoint,\n                params: params,\n                paramsInBody: true,\n                targetName: iframe.name\n            });\n\n            promise.success(form);\n        }, function(errorMessage) {\n            promise.failure(errorMessage);\n            handleFinishedUpload(id, iframe, fileName, {error: errorMessage});\n        });\n\n        return promise;\n    }\n\n    function handleUpload(id) {\n        var iframe = handler._createIframe(id),\n            input = handler.getInput(id),\n            promise = new qq.Promise();\n\n        createForm(id, iframe).then(function(form) {\n            form.appendChild(input);\n\n            // Register a callback when the response comes in from S3\n            handler._attachLoadEvent(iframe, function(response) {\n                log(\"iframe loaded\");\n\n                // If the common response handler has determined success or failure immediately\n                if (response) {\n                    // If there is something fundamentally wrong with the response (such as iframe content is not accessible)\n                    if (response.success === false) {\n                        log(\"Amazon likely rejected the upload request\", \"error\");\n                        promise.failure(response);\n                    }\n                }\n                // The generic response (iframe onload) handler was not able to make a determination regarding the success of the request\n                else {\n                    response = {};\n                    response.success = isValidResponse(id, iframe);\n\n                    // If the more specific response handle detected a problem with the response from S3\n                    if (response.success === false) {\n                        log(\"A success response was received by Amazon, but it was invalid in some way.\", \"error\");\n                        promise.failure(response);\n                    }\n                    else {\n                        qq.extend(response, qq.s3.util.parseIframeResponse(iframe));\n                        promise.success(response);\n                    }\n                }\n\n                handleFinishedUpload(id, iframe);\n            });\n\n            log(\"Sending upload request for \" + id);\n            form.submit();\n            qq(form).remove();\n        }, promise.failure);\n\n        return promise;\n    }\n\n    function handleFinishedUpload(id, iframe) {\n        handler._detachLoadEvent(id);\n        iframe && qq(iframe).remove();\n    }\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: false,\n            inputName: \"file\"\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            onUuidChanged: onUuidChanged,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n\n    qq.extend(this, {\n        uploadFile: function(id) {\n            var name = getName(id),\n                promise = new qq.Promise();\n\n            if (handler.getThirdPartyFileId(id)) {\n                if (handler._getFileState(id).bucket) {\n                    handleUpload(id).then(promise.success, promise.failure);\n                }\n                else {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handleUpload(id).then(promise.success, promise.failure);\n                    });\n                }\n            }\n            else {\n                // The S3 uploader module will either calculate the key or ask the server for it\n                // and will call us back once it is known.\n                onGetKeyName(id, name).then(function(key) {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handler._setThirdPartyFileId(id, key);\n                        handleUpload(id).then(promise.success, promise.failure);\n                    }, function(errorReason) {\n                        promise.failure({error: errorReason});\n                    });\n                }, function(errorReason) {\n                    promise.failure({error: errorReason});\n                });\n            }\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                var name = entry.name,\n                    fullPath = entry.fullPath,\n                    indexOfNameInFullPath = fullPath.indexOf(name);\n\n                // remove file name from full path string\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n                // remove leading slash in full path string\n                if (fullPath.charAt(0) === \"/\") {\n                    fullPath = fullPath.substr(1);\n                }\n\n                file.qqPath = fullPath;\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.firefox()) {\n            return !e.relatedTarget;\n        }\n\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            e.preventDefault();\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n        // dt.types.contains check is for firefox\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains(\"Files\")));\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Defines the public API for FineUploader mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.uiPublicApi = {\n        addInitialFiles: function(cannedFileList) {\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\n            this._templating.addCacheToDom();\n        },\n\n        clearStoredFiles: function() {\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\n            this._templating.clearFiles();\n        },\n\n        addExtraDropzone: function(element) {\n            this._dnd && this._dnd.setupExtraDropzone(element);\n        },\n\n        removeExtraDropzone: function(element) {\n            if (this._dnd) {\n                return this._dnd.removeDropzone(element);\n            }\n        },\n\n        getItemByFileId: function(id) {\n            if (!this._templating.isHiddenForever(id)) {\n                return this._templating.getFileContainer(id);\n            }\n        },\n\n        reset: function() {\n            this._parent.prototype.reset.apply(this, arguments);\n            this._templating.reset();\n\n            if (!this._options.button && this._templating.getButton()) {\n                this._defaultButtonId = this._createUploadButton({\n                    element: this._templating.getButton(),\n                    title: this._options.text.fileInputTitle\n                }).getButtonId();\n            }\n\n            if (this._dnd) {\n                this._dnd.dispose();\n                this._dnd = this._setupDragAndDrop();\n            }\n\n            this._totalFilesInBatch = 0;\n            this._filesInBatchAddedToUi = 0;\n\n            this._setupClickAndEditEventHandlers();\n        },\n\n        setName: function(id, newName) {\n            var formattedFilename = this._options.formatFileName(newName);\n\n            this._parent.prototype.setName.apply(this, arguments);\n            this._templating.updateFilename(id, formattedFilename);\n        },\n\n        pauseUpload: function(id) {\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\n\n            paused && this._templating.uploadPaused(id);\n            return paused;\n        },\n\n        continueUpload: function(id) {\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\n\n            continued && this._templating.uploadContinued(id);\n            return continued;\n        },\n\n        getId: function(fileContainerOrChildEl) {\n            return this._templating.getFileId(fileContainerOrChildEl);\n        },\n\n        getDropTarget: function(fileId) {\n            var file = this.getFile(fileId);\n\n            return file.qqDropTarget;\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploader mode.\n     */\n    qq.uiPrivateApi = {\n        _getButton: function(buttonId) {\n            var button = this._parent.prototype._getButton.apply(this, arguments);\n\n            if (!button) {\n                if (buttonId === this._defaultButtonId) {\n                    button = this._templating.getButton();\n                }\n            }\n\n            return button;\n        },\n\n        _removeFileItem: function(fileId) {\n            this._templating.removeFile(fileId);\n        },\n\n        _setupClickAndEditEventHandlers: function() {\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\n\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\n            this._focusinEventSupported = !qq.firefox();\n\n            if (this._isEditFilenameEnabled())\n            {\n                this._filenameClickHandler = this._bindFilenameClickEvent();\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\n            }\n        },\n\n        _setupDragAndDrop: function() {\n            var self = this,\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\n                templating = this._templating,\n                defaultDropZone = templating.getDropZone();\n\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\n\n            return new qq.DragAndDrop({\n                dropZoneElements: dropZoneElements,\n                allowMultipleItems: this._options.multiple,\n                classes: {\n                    dropActive: this._options.classes.dropActive\n                },\n                callbacks: {\n                    processingDroppedFiles: function() {\n                        templating.showDropProcessing();\n                    },\n                    processingDroppedFilesComplete: function(files, targetEl) {\n                        templating.hideDropProcessing();\n\n                        qq.each(files, function(idx, file) {\n                            file.qqDropTarget = targetEl;\n                        });\n\n                        if (files.length) {\n                            self.addFiles(files, null, null);\n                        }\n                    },\n                    dropError: function(code, errorData) {\n                        self._itemError(code, errorData);\n                    },\n                    dropLog: function(message, level) {\n                        self.log(message, level);\n                    }\n                }\n            });\n        },\n\n        _bindFileButtonsClickEvent: function() {\n            var self = this;\n\n            return new qq.FileButtonsClickHandler({\n                templating: this._templating,\n\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n\n                onDeleteFile: function(fileId) {\n                    self.deleteFile(fileId);\n                },\n\n                onCancel: function(fileId) {\n                    self.cancel(fileId);\n                },\n\n                onRetry: function(fileId) {\n                    self.retry(fileId);\n                },\n\n                onPause: function(fileId) {\n                    self.pauseUpload(fileId);\n                },\n\n                onContinue: function(fileId) {\n                    self.continueUpload(fileId);\n                },\n\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                }\n            });\n        },\n\n        _isEditFilenameEnabled: function() {\n            /*jshint -W014 */\n            return this._templating.isEditFilenamePossible()\n                && !this._options.autoUpload\n                && qq.FilenameClickHandler\n                && qq.FilenameInputFocusHandler\n                && qq.FilenameInputFocusHandler;\n        },\n\n        _filenameEditHandler: function() {\n            var self = this,\n                templating = this._templating;\n\n            return {\n                templating: templating,\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n                onGetUploadStatus: function(fileId) {\n                    return self.getUploads({id: fileId}).status;\n                },\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                },\n                onSetName: function(id, newName) {\n                    self.setName(id, newName);\n                },\n                onEditingStatusChange: function(id, isEditing) {\n                    var qqInput = qq(templating.getEditInput(id)),\n                        qqFileContainer = qq(templating.getFileContainer(id));\n\n                    if (isEditing) {\n                        qqInput.addClass(\"qq-editing\");\n                        templating.hideFilename(id);\n                        templating.hideEditIcon(id);\n                    }\n                    else {\n                        qqInput.removeClass(\"qq-editing\");\n                        templating.showFilename(id);\n                        templating.showEditIcon(id);\n                    }\n\n                    // Force IE8 and older to repaint\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\n                }\n            };\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\n\n            if (this._isEditFilenameEnabled()) {\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\n                    this._templating.markFilenameEditable(id);\n                    this._templating.hideEditIcon(id);\n                }\n            }\n\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\n                this._templating.hideRetry(id);\n                this._templating.setStatusText(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\n            }\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\n                this._templating.hidePause(id);\n            }\n        },\n\n        _bindFilenameInputFocusInEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusInHandler(spec);\n        },\n\n        _bindFilenameInputFocusEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusHandler(spec);\n        },\n\n        _bindFilenameClickEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameClickHandler(spec);\n        },\n\n        _storeForLater: function(id) {\n            this._parent.prototype._storeForLater.apply(this, arguments);\n            this._templating.hideSpinner(id);\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._parent.prototype._onAllComplete.apply(this, arguments);\n            this._templating.resetTotalProgress();\n        },\n\n        _onSubmit: function(id, name) {\n            var file = this.getFile(id);\n\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\n                this._paramsStore.addReadOnly(id, {\n                    qqpath: file.qqPath\n                });\n            }\n\n            this._parent.prototype._onSubmit.apply(this, arguments);\n            this._addToList(id, name);\n        },\n\n        // The file item has been added to the DOM.\n        _onSubmitted: function(id) {\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\n            if (this._isEditFilenameEnabled()) {\n                this._templating.markFilenameEditable(id);\n                this._templating.showEditIcon(id);\n\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\n                if (!this._focusinEventSupported) {\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\n                }\n            }\n        },\n\n        // Update the progress bar & percentage as the file is uploaded\n        _onProgress: function(id, name, loaded, total) {\n            this._parent.prototype._onProgress.apply(this, arguments);\n\n            this._templating.updateProgress(id, loaded, total);\n\n            if (total === 0 || Math.round(loaded / total * 100) === 100) {\n                this._templating.hideCancel(id);\n                this._templating.hidePause(id);\n                this._templating.hideProgress(id);\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\n\n                // If ~last byte was sent, display total file size\n                this._displayFileSize(id);\n            }\n            else {\n                // If still uploading, display percentage - total size is actually the total request(s) size\n                this._displayFileSize(id, loaded, total);\n            }\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\n            this._templating.updateTotalProgress(loaded, total);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\n                templating = this._templating,\n                fileContainer = templating.getFileContainer(id),\n                self = this;\n\n            function completeUpload(result) {\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\n                // If so, don't perform any UI-related tasks related to this file.\n                if (!fileContainer) {\n                    return;\n                }\n\n                templating.setStatusText(id);\n\n                qq(fileContainer).removeClass(self._classes.retrying);\n                templating.hideProgress(id);\n\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\n                    templating.hideCancel(id);\n                }\n                templating.hideSpinner(id);\n\n                if (result.success) {\n                    self._markFileAsSuccessful(id);\n                }\n                else {\n                    qq(fileContainer).addClass(self._classes.fail);\n                    templating.showCancel(id);\n\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\n                        qq(fileContainer).addClass(self._classes.retryable);\n                        templating.showRetry(id);\n                    }\n                    self._controlFailureTextDisplay(id, result);\n                }\n            }\n\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\n            if (parentRetVal instanceof qq.Promise) {\n                parentRetVal.done(function(newResult) {\n                    completeUpload(newResult);\n                });\n\n            }\n            else {\n                completeUpload(result);\n            }\n\n            return parentRetVal;\n        },\n\n        _markFileAsSuccessful: function(id) {\n            var templating = this._templating;\n\n            if (this._isDeletePossible()) {\n                templating.showDeleteButton(id);\n            }\n\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\n\n            this._maybeUpdateThumbnail(id);\n        },\n\n        _onUploadPrep: function(id) {\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\n            this._templating.showSpinner(id);\n        },\n\n        _onUpload: function(id, name) {\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\n\n            this._templating.showSpinner(id);\n\n            return parentRetVal;\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\n\n            // Only display the pause button if we have finished uploading at least one chunk\n            // & this file can be resumed\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\n                this._templating.allowPause(id);\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._parent.prototype._onCancel.apply(this, arguments);\n            this._removeFileItem(id);\n\n            if (this._getNotFinished() === 0) {\n                this._templating.resetTotalProgress();\n            }\n        },\n\n        _onBeforeAutoRetry: function(id) {\n            var retryNumForDisplay, maxAuto, retryNote;\n\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\n\n            this._showCancelLink(id);\n\n            if (this._options.retry.showAutoRetryNote) {\n                retryNumForDisplay = this._autoRetries[id];\n                maxAuto = this._options.retry.maxAutoAttempts;\n\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\n\n                this._templating.setStatusText(id, retryNote);\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\n            }\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\n                this._templating.resetProgress(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\n                this._templating.setStatusText(id);\n                this._templating.showSpinner(id);\n                this._showCancelLink(id);\n                return true;\n            }\n            else {\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\n                this._templating.showRetry(id);\n                return false;\n            }\n        },\n\n        _onSubmitDelete: function(id) {\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\n\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\n        },\n\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\n            if (this._options.deleteFile.forceConfirm) {\n                this._showDeleteConfirm.apply(this, arguments);\n            }\n            else {\n                this._sendDeleteRequest.apply(this, arguments);\n            }\n        },\n\n        _onDeleteComplete: function(id, xhr, isError) {\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\n\n            this._templating.hideSpinner(id);\n\n            if (isError) {\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\n                this._templating.showDeleteButton(id);\n            }\n            else {\n                this._removeFileItem(id);\n            }\n        },\n\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\n            this._templating.hideDeleteButton(id);\n            this._templating.showSpinner(id);\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\n            this._deleteHandler.sendDelete.apply(this, arguments);\n        },\n\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\n            /*jshint -W004 */\n            var fileName = this.getName(id),\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\n                uuid = this.getUuid(id),\n                deleteRequestArgs = arguments,\n                self = this,\n                retVal;\n\n            retVal = this._options.showConfirm(confirmMessage);\n\n            if (qq.isGenericPromise(retVal)) {\n                retVal.then(function() {\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\n                });\n            }\n            else if (retVal !== false) {\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\n            }\n        },\n\n        _addToList: function(id, name, canned) {\n            var prependData,\n                prependIndex = 0,\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\n                record;\n\n            if (this._options.display.prependFiles) {\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\n                    prependIndex = this._filesInBatchAddedToUi - 1;\n                }\n\n                prependData = {\n                    index: prependIndex\n                };\n            }\n\n            if (!canned) {\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\n                    this._templating.disableCancel();\n                }\n\n                // Cancel all existing (previous) files and clear the list if this file is not part of\n                // a scaled file group that has already been accepted, or if this file is not part of\n                // a scaled file group at all.\n                if (!this._options.multiple) {\n                    record = this.getUploads({id: id});\n\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\n\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\n                        this._handler.cancelAll();\n                        this._clearList();\n                        this._handledProxyGroup = null;\n                    }\n                }\n            }\n\n            if (canned) {\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\n            }\n            else {\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\n            }\n\n            this._filesInBatchAddedToUi += 1;\n\n            if (canned ||\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\n\n                this._displayFileSize(id);\n            }\n        },\n\n        _clearList: function() {\n            this._templating.clearFiles();\n            this.clearStoredFiles();\n        },\n\n        _displayFileSize: function(id, loadedSize, totalSize) {\n            var size = this.getSize(id),\n                sizeForDisplay = this._formatSize(size);\n\n            if (size >= 0) {\n                if (loadedSize !== undefined && totalSize !== undefined) {\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\n                }\n\n                this._templating.updateSize(id, sizeForDisplay);\n            }\n        },\n\n        _formatProgress: function(uploadedSize, totalSize) {\n            var message = this._options.text.formatProgress;\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\n            r(\"{total_size}\", this._formatSize(totalSize));\n            return message;\n        },\n\n        _controlFailureTextDisplay: function(id, response) {\n            var mode, responseProperty, failureReason;\n\n            mode = this._options.failedUploadTextDisplay.mode;\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\n\n            if (mode === \"custom\") {\n                failureReason = response[responseProperty];\n                if (!failureReason) {\n                    failureReason = this._options.text.failUpload;\n                }\n\n                this._templating.setStatusText(id, failureReason);\n\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\n                    this._showTooltip(id, failureReason);\n                }\n            }\n            else if (mode === \"default\") {\n                this._templating.setStatusText(id, this._options.text.failUpload);\n            }\n            else if (mode !== \"none\") {\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\n            }\n        },\n\n        _showTooltip: function(id, text) {\n            this._templating.getFileContainer(id).title = text;\n        },\n\n        _showCancelLink: function(id) {\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\n                this._templating.showCancel(id);\n            }\n        },\n\n        _itemError: function(code, name, item) {\n            var message = this._parent.prototype._itemError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _batchError: function(message) {\n            this._parent.prototype._batchError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _setupPastePrompt: function() {\n            var self = this;\n\n            this._options.callbacks.onPasteReceived = function() {\n                var message = self._options.paste.namePromptMessage,\n                    defaultVal = self._options.paste.defaultName;\n\n                return self._options.showPrompt(message, defaultVal);\n            };\n        },\n\n        _fileOrBlobRejected: function(id, name) {\n            this._totalFilesInBatch -= 1;\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            this._totalFilesInBatch = items.length;\n            this._filesInBatchAddedToUi = 0;\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\n        },\n\n        _maybeUpdateThumbnail: function(fileId) {\n            var thumbnailUrl = this._thumbnailUrls[fileId],\n                fileStatus = this.getUploads({id: fileId}).status;\n\n            if (fileStatus !== qq.status.DELETED &&\n                (thumbnailUrl ||\n                this._options.thumbnails.placeholders.waitUntilResponse ||\n                !qq.supportedFeatures.imagePreviews)) {\n\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\n                // if called with a null thumbnailUrl.\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\n\n            this._addToList(id, this.getName(id), true);\n            this._templating.hideSpinner(id);\n            this._templating.hideCancel(id);\n            this._markFileAsSuccessful(id);\n\n            return id;\n        },\n\n        _setSize: function(id, newSize) {\n            this._parent.prototype._setSize.apply(this, arguments);\n\n            this._templating.updateSize(id, this._formatSize(newSize));\n        },\n\n        _sessionRequestComplete: function() {\n            this._templating.addCacheToDom();\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateHtml,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListHtml,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListHtml = fileListNode.innerHTML;\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: qq.trimStr(tempTemplateEl.innerHTML),\n                fileTemplate: qq.trimStr(fileListHtml)\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateHtml = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.innerHTML = templateHtml.template;\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = qq.toElement(templateHtml.fileTemplate),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n","/*globals qq */\n/**\n * This defines FineUploader mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader as well as code to handle uploads directly to S3.\n * This module inherits all logic from FineUploader mode and FineUploaderBasicS3 mode and adds some UI-related logic\n * specific to the upload-to-S3 workflow.  Some inherited options and API methods have a special meaning\n * in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploader = function(o) {\n        var options = {\n            failedUploadTextDisplay: {\n                mode: \"custom\"\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Inherit instance data from FineUploader, which should in turn inherit from s3.FineUploaderBasic.\n        qq.FineUploader.call(this, options, \"s3\");\n\n        if (!qq.supportedFeatures.ajaxUploading && options.iframeSupport.localBlankPagePath === undefined) {\n            this._options.element.innerHTML = \"<div>You MUST set the <code>localBlankPagePath</code> property \" +\n                \"of the <code>iframeSupport</code> option since this browser does not support the File API!</div>\";\n        }\n    };\n\n    // Inherit the API methods from FineUploaderBasicS3\n    qq.extend(qq.s3.FineUploader.prototype, qq.s3.FineUploaderBasic.prototype);\n\n    // Inherit public and private API methods related to UI\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPublicApi);\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPrivateApi);\n}());\n"]}