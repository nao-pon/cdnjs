{"version":3,"sources":["?","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/traditional/traditional.form.upload.handler.js","../client/js/traditional/traditional.xhr.upload.handler.js","../client/js/traditional/all-chunks-done.ajax.requester.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js"],"names":["global","qq","element","hide","style","display","this","attach","type","fn","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","name","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","each","idx","val","push","getFirstByClass","children","child","firstChild","nodeType","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","exec","getAttribute","undefined","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","data","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","length","Uint8Array","character","charCodeAt","log","message","level","console","isObject","variable","Object","prototype","toString","call","isFunction","isArray","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","args","Array","slice","arguments","newStr","nextIdxToReplace","strBefore","substring","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","toLowerCase","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","error","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","prop","override","target","sourceFn","super_","source","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","retVal","Storage","key","getItem","charAt","bind","oldFunc","context","newArgs","concat","apply","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","match","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","self","disposeSupport","options","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","index","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onBeforeStatusChange","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","params","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","_options","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","debug","pauseUpload","removeFileRef","expunge","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","fileRecord","_onDeleteComplete","errorMessage","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","callbacks","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","toUpperCase","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","namespace","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadResult","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkResult","partIndex","onUploadChunkSuccess","onResume","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","isInProgress","UploadHandlerController","_fileOrBlobRejected","_formatSize","sizeSymbols","max","toFixed","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_handleDeleteSuccess","_handleDeleteFailed","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","allowEmpty","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","omitDefaultParams","paramsInBody","requireSuccessJson","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","recordsExpireIn","resuming","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","onUploadChunkPromise","requestOverrides","uploadChunkData","overrides","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","onUploadPromise","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","isResumable","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","_getMimeType","_getPersistableData","ceil","_markNotResumable","localStorageId","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","el","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","getIframeContentJson","doc","innerHtml","contentWindow","nodeValue","createForm","responseFromMessage","multipart","addChunkingSpecificParams","allChunksDoneRequester","AllChunksDoneAjaxRequester","createReadyStateChangedHandler","onUploadOrChunkComplete","getChunksCompleteParams","isErrorUploadResponse","parseResponse","sendChunksCompleteRequest","complete","setParamsAndGetEntityToSend","entityToSendParams","xhrOverrides","setUploadHeaders","headersOptions","headerOverrides","headerName","headerValue","extraHeaders","uploadChunkParams","toSend","promises","endpointHandler","DragAndDrop","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","dropZoneElements","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","relatedTarget","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","FineUploader","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","content","createDocumentFragment","map","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","uploader","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateHtml","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","update","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListHtml","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"fine-uploader.js","sourcesContent":[null,"/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\nqq.version = \"5.16.0-alpha.0\";\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\n    function isChrome21OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         * - onBeforeStatusChange(fileId): callback that is executed before the status change is broadcast\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            spec.onBeforeStatusChange && spec.onBeforeStatusChange(id);\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\n/**\n * Defines the public API for FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.basePublicApi = {\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\n        addBlobs: function(blobDataOrArray, params, endpoint) {\n            this.addFiles(blobDataOrArray, params, endpoint);\n        },\n\n        addInitialFiles: function(cannedFileList) {\n            var self = this;\n\n            qq.each(cannedFileList, function(index, cannedFile) {\n                self._addCannedFile(cannedFile);\n            });\n        },\n\n        addFiles: function(data, params, endpoint) {\n            this._maybeHandleIos8SafariWorkaround();\n\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\n\n                processBlob = qq.bind(function(blob) {\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processBlobData = qq.bind(function(blobData) {\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\n                }, this),\n\n                processCanvas = qq.bind(function(canvas) {\n                    var blob = qq.canvasToBlob(canvas);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName + \".png\"\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processCanvasData = qq.bind(function(canvasData) {\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: canvasData.name\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processFileOrInput = qq.bind(function(fileOrInput) {\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\n                        var files = Array.prototype.slice.call(fileOrInput.files),\n                            self = this;\n\n                        qq.each(files, function(idx, file) {\n                            self._handleNewFile(file, batchId, verifiedFiles);\n                        });\n                    }\n                    else {\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\n                    }\n                }, this),\n\n                normalizeData = function() {\n                    if (qq.isFileList(data)) {\n                        data = Array.prototype.slice.call(data);\n                    }\n                    data = [].concat(data);\n                },\n\n                self = this,\n                verifiedFiles = [];\n\n            this._currentBatchId = batchId;\n\n            if (data) {\n                normalizeData();\n\n                qq.each(data, function(idx, fileContainer) {\n                    if (qq.isFileOrInput(fileContainer)) {\n                        processFileOrInput(fileContainer);\n                    }\n                    else if (qq.isBlob(fileContainer)) {\n                        processBlob(fileContainer);\n                    }\n                    else if (qq.isObject(fileContainer)) {\n                        if (fileContainer.blob && fileContainer.name) {\n                            processBlobData(fileContainer);\n                        }\n                        else if (fileContainer.canvas && fileContainer.name) {\n                            processCanvasData(fileContainer);\n                        }\n                    }\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\n                        processCanvas(fileContainer);\n                    }\n                    else {\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\n                    }\n                });\n\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\n            }\n        },\n\n        cancel: function(id) {\n            this._handler.cancel(id);\n        },\n\n        cancelAll: function() {\n            var storedIdsCopy = [],\n                self = this;\n\n            qq.extend(storedIdsCopy, this._storedIds);\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\n                self.cancel(storedFileId);\n            });\n\n            this._handler.cancelAll();\n        },\n\n        clearStoredFiles: function() {\n            this._storedIds = [];\n        },\n\n        continueUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            if (uploadData.status === qq.status.PAUSED) {\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\n                this._uploadFile(id);\n                return true;\n            }\n            else {\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        deleteFile: function(id) {\n            return this._onSubmitDelete(id);\n        },\n\n        // TODO document?\n        doesExist: function(fileOrBlobId) {\n            return this._handler.isValid(fileOrBlobId);\n        },\n\n        // Generate a variable size thumbnail on an img or canvas,\n        // returning a promise that is fulfilled when the attempt completes.\n        // Thumbnail can either be based off of a URL for an image returned\n        // by the server in the upload response, or the associated `Blob`.\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\n            var promiseToReturn = new qq.Promise(),\n                fileOrUrl, options;\n\n            if (this._imageGenerator) {\n                fileOrUrl = this._thumbnailUrls[fileId];\n                options = {\n                    customResizeFunction: customResizeFunction,\n                    maxSize: maxSize > 0 ? maxSize : null,\n                    scale: maxSize > 0\n                };\n\n                // If client-side preview generation is possible\n                // and we are not specifically looking for the image URl returned by the server...\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\n                    fileOrUrl = this.getFile(fileId);\n                }\n\n                /* jshint eqeqeq:false,eqnull:true */\n                if (fileOrUrl == null) {\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\n                }\n                else {\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\n                        function success(modifiedContainer) {\n                            promiseToReturn.success(modifiedContainer);\n                        },\n\n                        function failure(container, reason) {\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\n                        }\n                    );\n                }\n            }\n            else {\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\n            }\n\n            return promiseToReturn;\n        },\n\n        getButton: function(fileId) {\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\n        },\n\n        getEndpoint: function(fileId) {\n            return this._endpointStore.get(fileId);\n        },\n\n        getFile: function(fileOrBlobId) {\n            return this._handler.getFile(fileOrBlobId) || null;\n        },\n\n        getInProgress: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED\n                ]\n            }).length;\n        },\n\n        getName: function(id) {\n            return this._uploadData.retrieve({id: id}).name;\n        },\n\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\n        getParentId: function(id) {\n            var uploadDataEntry = this.getUploads({id: id}),\n                parentId = null;\n\n            if (uploadDataEntry) {\n                if (uploadDataEntry.parentId !== undefined) {\n                    parentId = uploadDataEntry.parentId;\n                }\n            }\n\n            return parentId;\n        },\n\n        getResumableFilesData: function() {\n            return this._handler.getResumableFilesData();\n        },\n\n        getSize: function(id) {\n            return this._uploadData.retrieve({id: id}).size;\n        },\n\n        getNetUploads: function() {\n            return this._netUploaded;\n        },\n\n        getRemainingAllowedItems: function() {\n            var allowedItems = this._currentItemLimit;\n\n            if (allowedItems > 0) {\n                return allowedItems - this._netUploadedOrQueued;\n            }\n\n            return null;\n        },\n\n        getUploads: function(optionalFilter) {\n            return this._uploadData.retrieve(optionalFilter);\n        },\n\n        getUuid: function(id) {\n            return this._uploadData.retrieve({id: id}).uuid;\n        },\n\n        log: function(str, level) {\n            if (this._options.debug && (!level || level === \"info\")) {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\n            }\n            else if (level && level !== \"info\") {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\n\n            }\n        },\n\n        pauseUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            // Pause only really makes sense if the file is uploading or retrying\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\n                if (this._handler.pause(id)) {\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\n                    return true;\n                }\n                else {\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\n                }\n            }\n            else {\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        removeFileRef: function(id) {\n            this._handler.expunge(id);\n        },\n\n        reset: function() {\n            this.log(\"Resetting uploader...\");\n\n            this._handler.reset();\n            this._storedIds = [];\n            this._autoRetries = [];\n            this._retryTimeouts = [];\n            this._preventRetries = [];\n            this._thumbnailUrls = [];\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n\n            this._paramsStore.reset();\n            this._endpointStore.reset();\n            this._netUploadedOrQueued = 0;\n            this._netUploaded = 0;\n            this._uploadData.reset();\n            this._buttonIdsForFileIds = [];\n\n            this._pasteHandler && this._pasteHandler.reset();\n            this._options.session.refreshOnReset && this._refreshSessionData();\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n\n            this._totalProgress && this._totalProgress.reset();\n        },\n\n        retry: function(id) {\n            return this._manualRetry(id);\n        },\n\n        scaleImage: function(id, specs) {\n            var self = this;\n\n            return qq.Scaler.prototype.scaleImage(id, specs, {\n                log: qq.bind(self.log, self),\n                getFile: qq.bind(self.getFile, self),\n                uploadData: self._uploadData\n            });\n        },\n\n        setCustomHeaders: function(headers, id) {\n            this._customHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileCustomHeaders: function(headers, id) {\n            this._deleteFileCustomHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileEndpoint: function(endpoint, id) {\n            this._deleteFileEndpointStore.set(endpoint, id);\n        },\n\n        setDeleteFileParams: function(params, id) {\n            this._deleteFileParamsStore.set(params, id);\n        },\n\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\n        setEndpoint: function(endpoint, id) {\n            this._endpointStore.set(endpoint, id);\n        },\n\n        setForm: function(elementOrId) {\n            this._updateFormSupportAndParams(elementOrId);\n        },\n\n        setItemLimit: function(newItemLimit) {\n            this._currentItemLimit = newItemLimit;\n        },\n\n        setName: function(id, newName) {\n            this._uploadData.updateName(id, newName);\n        },\n\n        setParams: function(params, id) {\n            this._paramsStore.set(params, id);\n        },\n\n        setUuid: function(id, newUuid) {\n            return this._uploadData.uuidChanged(id, newUuid);\n        },\n\n        /**\n         * Expose the internal status of a file id to the public api for manual state changes\n         * @public\n         *\n         * @param {Number} id,\n         * @param {String} newStatus\n         *\n         * @todo Implement the remaining methods\n         */\n        setStatus: function(id, newStatus) {\n            var fileRecord = this.getUploads({id: id});\n            if (!fileRecord) {\n                throw new qq.Error(id + \" is not a valid file ID.\");\n            }\n\n            switch (newStatus) {\n                case qq.status.DELETED:\n                    this._onDeleteComplete(id, null, false);\n                    break;\n                case qq.status.DELETE_FAILED:\n                    this._onDeleteComplete(id, null, true);\n                    break;\n                default:\n                    var errorMessage = \"Method setStatus called on '\" + name + \"' not implemented yet for \" + newStatus;\n                    this.log(errorMessage);\n                    throw new qq.Error(errorMessage);\n            }\n        },\n\n        uploadStoredFiles: function() {\n            if (this._storedIds.length === 0) {\n                this._itemError(\"noFilesError\");\n            }\n            else {\n                this._uploadStoredFiles();\n            }\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploaderBasic mode.\n     */\n    qq.basePrivateApi = {\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\n        _addCannedFile: function(sessionData) {\n            var self = this;\n\n            return this._uploadData.addFile({\n                uuid: sessionData.uuid,\n                name: sessionData.name,\n                size: sessionData.size,\n                status: qq.status.UPLOAD_SUCCESSFUL,\n                onBeforeStatusChange: function(id) {\n                    sessionData.deleteFileEndpoint && self.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\n                    sessionData.deleteFileParams && self.setDeleteFileParams(sessionData.deleteFileParams, id);\n\n                    if (sessionData.thumbnailUrl) {\n                        self._thumbnailUrls[id] = sessionData.thumbnailUrl;\n                    }\n\n                    self._netUploaded++;\n                    self._netUploadedOrQueued++;\n                }\n            });\n        },\n\n        _annotateWithButtonId: function(file, associatedInput) {\n            if (qq.isFile(file)) {\n                file.qqButtonId = this._getButtonId(associatedInput);\n            }\n        },\n\n        _batchError: function(message) {\n            this._options.callbacks.onError(null, null, message, undefined);\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return new qq.DeleteFileAjaxRequester({\n                method: this._options.deleteFile.method.toUpperCase(),\n                maxConnections: this._options.maxConnections,\n                uuidParamName: this._options.request.uuidName,\n                customHeaders: this._deleteFileCustomHeadersStore,\n                paramsStore: this._deleteFileParamsStore,\n                endpointStore: this._deleteFileEndpointStore,\n                cors: this._options.cors,\n                log: qq.bind(self.log, self),\n                onDelete: function(id) {\n                    self._onDelete(id);\n                    self._options.callbacks.onDelete(id);\n                },\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                }\n\n            });\n        },\n\n        _createPasteHandler: function() {\n            var self = this;\n\n            return new qq.PasteSupport({\n                targetElement: this._options.paste.targetElement,\n                callbacks: {\n                    log: qq.bind(self.log, self),\n                    pasteReceived: function(blob) {\n                        self._handleCheckedCallback({\n                            name: \"onPasteReceived\",\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\n                            identifier: \"pasted image\"\n                        });\n                    }\n                }\n            });\n        },\n\n        _createStore: function(initialValue, _readOnlyValues_) {\n            var store = {},\n                catchall = initialValue,\n                perIdReadOnlyValues = {},\n                readOnlyValues = _readOnlyValues_,\n                copy = function(orig) {\n                    if (qq.isObject(orig)) {\n                        return qq.extend({}, orig);\n                    }\n                    return orig;\n                },\n                getReadOnlyValues = function() {\n                    if (qq.isFunction(readOnlyValues)) {\n                        return readOnlyValues();\n                    }\n                    return readOnlyValues;\n                },\n                includeReadOnlyValues = function(id, existing) {\n                    if (readOnlyValues && qq.isObject(existing)) {\n                        qq.extend(existing, getReadOnlyValues());\n                    }\n\n                    if (perIdReadOnlyValues[id]) {\n                        qq.extend(existing, perIdReadOnlyValues[id]);\n                    }\n                };\n\n            return {\n                set: function(val, id) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id == null) {\n                        store = {};\n                        catchall = copy(val);\n                    }\n                    else {\n                        store[id] = copy(val);\n                    }\n                },\n\n                get: function(id) {\n                    var values;\n\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id != null && store[id]) {\n                        values = store[id];\n                    }\n                    else {\n                        values = copy(catchall);\n                    }\n\n                    includeReadOnlyValues(id, values);\n\n                    return copy(values);\n                },\n\n                addReadOnly: function(id, values) {\n                    // Only applicable to Object stores\n                    if (qq.isObject(store)) {\n                        // If null ID, apply readonly values to all files\n                        if (id === null) {\n                            if (qq.isFunction(values)) {\n                                readOnlyValues = values;\n                            }\n                            else {\n                                readOnlyValues = readOnlyValues || {};\n                                qq.extend(readOnlyValues, values);\n                            }\n                        }\n                        else {\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\n                            qq.extend(perIdReadOnlyValues[id], values);\n                        }\n                    }\n                },\n\n                remove: function(fileId) {\n                    return delete store[fileId];\n                },\n\n                reset: function() {\n                    store = {};\n                    perIdReadOnlyValues = {};\n                    catchall = initialValue;\n                }\n            };\n        },\n\n        _createUploadDataTracker: function() {\n            var self = this;\n\n            return new qq.UploadData({\n                getName: function(id) {\n                    return self.getName(id);\n                },\n                getUuid: function(id) {\n                    return self.getUuid(id);\n                },\n                getSize: function(id) {\n                    return self.getSize(id);\n                },\n                onStatusChange: function(id, oldStatus, newStatus) {\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\n                    self._maybeAllComplete(id, newStatus);\n\n                    if (self._totalProgress) {\n                        setTimeout(function() {\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\n                        }, 0);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Generate a tracked upload button.\n         *\n         * @param spec Object containing a required `element` property\n         * along with optional `multiple`, `accept`, and `folders`.\n         * @returns {qq.UploadButton}\n         * @private\n         */\n        _createUploadButton: function(spec) {\n            var self = this,\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\n                button;\n\n            function allowMultiple() {\n                if (qq.supportedFeatures.ajaxUploading) {\n                    // Workaround for bug in iOS7+ (see #1039)\n                    if (self._options.workarounds.iosEmptyVideos &&\n                        qq.ios() &&\n                        !qq.ios6() &&\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\n\n                        return false;\n                    }\n\n                    if (spec.multiple === undefined) {\n                        return self._options.multiple;\n                    }\n\n                    return spec.multiple;\n                }\n\n                return false;\n            }\n\n            button = new qq.UploadButton({\n                acceptFiles: acceptFiles,\n                element: spec.element,\n                focusClass: this._options.classes.buttonFocus,\n                folders: spec.folders,\n                hoverClass: this._options.classes.buttonHover,\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\n                multiple: allowMultiple(),\n                name: this._options.request.inputName,\n                onChange: function(input) {\n                    self._onInputChange(input);\n                },\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\n            });\n\n            this._disposeSupport.addDisposer(function() {\n                button.dispose();\n            });\n\n            self._buttons.push(button);\n\n            return button;\n        },\n\n        _createUploadHandler: function(additionalOptions, namespace) {\n            var self = this,\n                lastOnProgress = {},\n                options = {\n                    debug: this._options.debug,\n                    maxConnections: this._options.maxConnections,\n                    cors: this._options.cors,\n                    paramsStore: this._paramsStore,\n                    endpointStore: this._endpointStore,\n                    chunking: this._options.chunking,\n                    resume: this._options.resume,\n                    blobs: this._options.blobs,\n                    log: qq.bind(self.log, self),\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\n                    onProgress: function(id, name, loaded, total) {\n                        if (loaded < 0 || total < 0) {\n                            return;\n                        }\n\n                        if (lastOnProgress[id]) {\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\n                                self._onProgress(id, name, loaded, total);\n                                self._options.callbacks.onProgress(id, name, loaded, total);\n                            }\n                        }\n                        else {\n                            self._onProgress(id, name, loaded, total);\n                            self._options.callbacks.onProgress(id, name, loaded, total);\n                        }\n\n                        lastOnProgress[id] = {loaded: loaded, total: total};\n\n                    },\n                    onComplete: function(id, name, result, xhr) {\n                        delete lastOnProgress[id];\n\n                        var status = self.getUploads({id: id}).status,\n                            retVal;\n\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\n                        // invoked by the browser multiple times for the same XHR instance with the same state\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\n                        // done this.\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\n                            return;\n                        }\n\n                        retVal = self._onComplete(id, name, result, xhr);\n\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\n                        // until the promise has been fulfilled.\n                        if (retVal instanceof  qq.Promise) {\n                            retVal.done(function() {\n                                self._options.callbacks.onComplete(id, name, result, xhr);\n                            });\n                        }\n                        else {\n                            self._options.callbacks.onComplete(id, name, result, xhr);\n                        }\n                    },\n                    onCancel: function(id, name, cancelFinalizationEffort) {\n                        var promise = new qq.Promise();\n\n                        self._handleCheckedCallback({\n                            name: \"onCancel\",\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\n                            onFailure: promise.failure,\n                            onSuccess: function() {\n                                cancelFinalizationEffort.then(function() {\n                                    self._onCancel(id, name);\n                                });\n\n                                promise.success();\n                            },\n                            identifier: id\n                        });\n\n                        return promise;\n                    },\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\n                    onUpload: function(id, name) {\n                        self._onUpload(id, name);\n                        var onUploadResult = self._options.callbacks.onUpload(id, name);\n\n                        if (qq.isGenericPromise(onUploadResult)) {\n                            self.log(qq.format(\"onUpload for {} returned a Promise - waiting for resolution.\", id));\n                            return onUploadResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunk: function(id, name, chunkData) {\n                        self._onUploadChunk(id, chunkData);\n                        var onUploadChunkResult = self._options.callbacks.onUploadChunk(id, name, chunkData);\n\n                        if (qq.isGenericPromise(onUploadChunkResult)) {\n                            self.log(qq.format(\"onUploadChunk for {}.{} returned a Promise - waiting for resolution.\", id, chunkData.partIndex));\n                            return onUploadChunkResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\n                    },\n                    onResume: function(id, name, chunkData) {\n                        return self._options.callbacks.onResume(id, name, chunkData);\n                    },\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\n                        return self._onAutoRetry.apply(self, arguments);\n                    },\n                    onUuidChanged: function(id, newUuid) {\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\n                        self.setUuid(id, newUuid);\n                    },\n                    getName: qq.bind(self.getName, self),\n                    getUuid: qq.bind(self.getUuid, self),\n                    getSize: qq.bind(self.getSize, self),\n                    setSize: qq.bind(self._setSize, self),\n                    getDataByUuid: function(uuid) {\n                        return self.getUploads({uuid: uuid});\n                    },\n                    isQueued: function(id) {\n                        var status = self.getUploads({id: id}).status;\n                        return status === qq.status.QUEUED ||\n                            status === qq.status.SUBMITTED ||\n                            status === qq.status.UPLOAD_RETRYING ||\n                            status === qq.status.PAUSED;\n                    },\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\n                    getIdsInBatch: self._uploadData.getIdsInBatch,\n                    isInProgress: function(id) {\n                        return self.getUploads({id: id}).status === qq.status.UPLOADING;\n                    }\n                };\n\n            qq.each(this._options.request, function(prop, val) {\n                options[prop] = val;\n            });\n\n            options.customHeaders = this._customHeadersStore;\n\n            if (additionalOptions) {\n                qq.each(additionalOptions, function(key, val) {\n                    options[key] = val;\n                });\n            }\n\n            return new qq.UploadHandlerController(options, namespace);\n        },\n\n        _fileOrBlobRejected: function(id) {\n            this._netUploadedOrQueued--;\n            this._uploadData.setStatus(id, qq.status.REJECTED);\n        },\n\n        _formatSize: function(bytes) {\n            if (bytes === 0) {\n                return bytes + this._options.text.sizeSymbols[0];\n            }\n            var i = -1;\n            do {\n                bytes = bytes / 1000;\n                i++;\n            } while (bytes > 999);\n\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\n        },\n\n        // Creates an internal object that tracks various properties of each extra button,\n        // and then actually creates the extra button.\n        _generateExtraButtonSpecs: function() {\n            var self = this;\n\n            this._extraButtonSpecs = {};\n\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\n                var multiple = extraButtonOptionEntry.multiple,\n                    validation = qq.extend({}, self._options.validation, true),\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\n\n                if (multiple === undefined) {\n                    multiple = self._options.multiple;\n                }\n\n                if (extraButtonSpec.validation) {\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\n                }\n\n                qq.extend(extraButtonSpec, {\n                    multiple: multiple,\n                    validation: validation\n                }, true);\n\n                self._initExtraButton(extraButtonSpec);\n            });\n        },\n\n        _getButton: function(buttonId) {\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\n\n            if (extraButtonsSpec) {\n                return extraButtonsSpec.element;\n            }\n            else if (buttonId === this._defaultButtonId) {\n                return this._options.button;\n            }\n        },\n\n        /**\n         * Gets the internally used tracking ID for a button.\n         *\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\n         * @private\n         */\n        _getButtonId: function(buttonOrFileInputOrFile) {\n            var inputs, fileInput,\n                fileBlobOrInput = buttonOrFileInputOrFile;\n\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\n            }\n\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\n                if (qq.isFile(fileBlobOrInput)) {\n                    return fileBlobOrInput.qqButtonId;\n                }\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\n\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\n\n                qq.each(inputs, function(idx, input) {\n                    if (input.getAttribute(\"type\") === \"file\") {\n                        fileInput = input;\n                        return false;\n                    }\n                });\n\n                if (fileInput) {\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n            }\n        },\n\n        _getNotFinished: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED,\n                    qq.status.SUBMITTING,\n                    qq.status.SUBMITTED,\n                    qq.status.PAUSED\n                ]\n            }).length;\n        },\n\n        // Get the validation options for this button.  Could be the default validation option\n        // or a specific one assigned to this particular button.\n        _getValidationBase: function(buttonId) {\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\n\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\n        },\n\n        _getValidationDescriptor: function(fileWrapper) {\n            if (fileWrapper.file instanceof qq.BlobProxy) {\n                return {\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\n                    size: fileWrapper.file.referenceBlob.size\n                };\n            }\n\n            return {\n                name: this.getUploads({id: fileWrapper.id}).name,\n                size: this.getUploads({id: fileWrapper.id}).size\n            };\n        },\n\n        _getValidationDescriptors: function(fileWrappers) {\n            var self = this,\n                fileDescriptors = [];\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\n            });\n\n            return fileDescriptors;\n        },\n\n        // Allows camera access on either the default or an extra button for iOS devices.\n        _handleCameraAccess: function() {\n            if (this._options.camera.ios && qq.ios()) {\n                var acceptIosCamera = \"image/*;capture=camera\",\n                    button = this._options.camera.button,\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\n                    optionRoot = this._options;\n\n                // If we are not targeting the default button, it is an \"extra\" button\n                if (buttonId && buttonId !== this._defaultButtonId) {\n                    optionRoot = this._extraButtonSpecs[buttonId];\n                }\n\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\n                optionRoot.multiple = false;\n\n                // update the options\n                if (optionRoot.validation.acceptFiles === null) {\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\n                }\n                else {\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\n                }\n\n                // update the already-created button\n                qq.each(this._buttons, function(idx, button) {\n                    if (button.getButtonId() === buttonId) {\n                        button.setMultiple(optionRoot.multiple);\n                        button.setAcceptFiles(optionRoot.acceptFiles);\n\n                        return false;\n                    }\n                });\n            }\n        },\n\n        _handleCheckedCallback: function(details) {\n            var self = this,\n                callbackRetVal = details.callback();\n\n            if (qq.isGenericPromise(callbackRetVal)) {\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\n                return callbackRetVal.then(\n                    function(successParam) {\n                        self.log(details.name + \" promise success for \" + details.identifier);\n                        details.onSuccess(successParam);\n                    },\n                    function() {\n                        if (details.onFailure) {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                            details.onFailure();\n                        }\n                        else {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                        }\n                    });\n            }\n\n            if (callbackRetVal !== false) {\n                details.onSuccess(callbackRetVal);\n            }\n            else {\n                if (details.onFailure) {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\n                    details.onFailure();\n                }\n                else {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\n                }\n            }\n\n            return callbackRetVal;\n        },\n\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\n            var self = this,\n                uuid = qq.getUniqueId(),\n                size = -1,\n                name = qq.getFilename(file),\n                actualFile = file.blob || file,\n                handler = this._customNewFileHandler ?\n                    this._customNewFileHandler :\n                    qq.bind(self._handleNewFileGeneric, self);\n\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\n                size = actualFile.size;\n            }\n\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\n                uploadData: self._uploadData,\n                paramsStore: self._paramsStore,\n                addFileToHandler: function(id, file) {\n                    self._handler.add(id, file);\n                    self._netUploadedOrQueued++;\n                    self._trackButton(id);\n                }\n            });\n        },\n\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\n\n            this._handler.add(id, file);\n            this._trackButton(id);\n\n            this._netUploadedOrQueued++;\n\n            fileList.push({id: id, file: file});\n        },\n\n        _handlePasteSuccess: function(blob, extSuppliedName) {\n            var extension = blob.type.split(\"/\")[1],\n                name = extSuppliedName;\n\n            /*jshint eqeqeq: true, eqnull: true*/\n            if (name == null) {\n                name = this._options.paste.defaultName;\n            }\n\n            name += \".\" + extension;\n\n            this.addFiles({\n                name: name,\n                blob: blob\n            });\n        },\n\n        _handleDeleteSuccess: function(id) {\n            if (this.getUploads({id: id}).status !== qq.status.DELETED) {\n                var name = this.getName(id);\n\n                this._netUploadedOrQueued--;\n                this._netUploaded--;\n                this._handler.expunge(id);\n                this._uploadData.setStatus(id, qq.status.DELETED);\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\n            }\n        },\n\n        _handleDeleteFailed: function(id, xhrOrXdr) {\n            var name = this.getName(id);\n\n            this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\n            this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\n\n            // Check first if xhrOrXdr is actually passed or valid\n            // For error reporting, we only have access to the response status if this is not\n            // an `XDomainRequest`.\n            if (!xhrOrXdr || xhrOrXdr.withCredentials === undefined) {\n                this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\n            }\n            else {\n                this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\n            }\n        },\n\n        // Creates an extra button element\n        _initExtraButton: function(spec) {\n            var button = this._createUploadButton({\n                accept: spec.validation.acceptFiles,\n                allowedExtensions: spec.validation.allowedExtensions,\n                element: spec.element,\n                folders: spec.folders,\n                multiple: spec.multiple,\n                title: spec.fileInputTitle\n            });\n\n            this._extraButtonSpecs[button.getButtonId()] = spec;\n        },\n\n        _initFormSupportAndParams: function() {\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n            );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore = this._createStore(\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\n                );\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\n                }\n            }\n            else {\n                this._paramsStore = this._createStore(this._options.request.params);\n            }\n        },\n\n        _isDeletePossible: function() {\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\n                return false;\n            }\n\n            if (this._options.cors.expected) {\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\n                    return true;\n                }\n\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            return true;\n        },\n\n        _isAllowedExtension: function(allowed, fileName) {\n            var valid = false;\n\n            if (!allowed.length) {\n                return true;\n            }\n\n            qq.each(allowed, function(idx, allowedExt) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExt)) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\n\n                    if (fileName.match(extRegex) != null) {\n                        valid = true;\n                        return false;\n                    }\n                }\n            });\n\n            return valid;\n        },\n\n        /**\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\n         *\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\n         * @param maybeNameOrNames names of the items that have failed, if applicable\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\n         * @private\n         */\n        _itemError: function(code, maybeNameOrNames, item) {\n            var message = this._options.messages[code],\n                allowedExtensions = [],\n                names = [].concat(maybeNameOrNames),\n                name = names[0],\n                buttonId = this._getButtonId(item),\n                validationBase = this._getValidationBase(buttonId),\n                extensionsForMessage, placeholderMatch;\n\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExtension)) {\n                    allowedExtensions.push(allowedExtension);\n                }\n            });\n\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\n\n            r(\"{file}\", this._options.formatFileName(name));\n            r(\"{extensions}\", extensionsForMessage);\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\n\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\n            if (placeholderMatch !== null) {\n                qq.each(placeholderMatch, function(idx, placeholder) {\n                    r(placeholder, names[idx]);\n                });\n            }\n\n            this._options.callbacks.onError(null, name, message, undefined);\n\n            return message;\n        },\n\n        /**\n         * Conditionally orders a manual retry of a failed upload.\n         *\n         * @param id File ID of the failed upload\n         * @param callback Optional callback to invoke if a retry is prudent.\n         * In lieu of asking the upload handler to retry.\n         * @returns {boolean} true if a manual retry will occur\n         * @private\n         */\n        _manualRetry: function(id, callback) {\n            if (this._onBeforeManualRetry(id)) {\n                this._netUploadedOrQueued++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n\n                if (callback) {\n                    callback(id);\n                }\n                else {\n                    this._handler.retry(id);\n                }\n\n                return true;\n            }\n        },\n\n        _maybeAllComplete: function(id, status) {\n            var self = this,\n                notFinished = this._getNotFinished();\n\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\n                this._succeededSinceLastAllComplete.push(id);\n            }\n            else if (status === qq.status.UPLOAD_FAILED) {\n                this._failedSinceLastAllComplete.push(id);\n            }\n\n            if (notFinished === 0 &&\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\n                setTimeout(function() {\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\n                }, 0);\n            }\n        },\n\n        _maybeHandleIos8SafariWorkaround: function() {\n            var self = this;\n\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n                setTimeout(function() {\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\n                }, 0);\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\n            }\n        },\n\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\n            // Assuming no one will actually set the response code to something other than 200\n            // and still set 'success' to true...\n            if (!response.success) {\n                if (xhr && xhr.status !== 200 && !response.error) {\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\n                }\n                else {\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\n                }\n            }\n        },\n\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\n            var self = this;\n\n            if (items.length > index) {\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\n                    setTimeout(function() {\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\n                            buttonId = self._getButtonId(items[index].file),\n                            button = self._getButton(buttonId);\n\n                        self._handleCheckedCallback({\n                            name: \"onValidate\",\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\n                        });\n                    }, 0);\n                }\n                else if (!validItem) {\n                    for (; index < items.length; index++) {\n                        self._fileOrBlobRejected(items[index].id);\n                    }\n                }\n            }\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\n\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n        },\n\n        /**\n         * Attempt to automatically retry a failed upload.\n         *\n         * @param id The file ID of the failed upload\n         * @param name The name of the file associated with the failed upload\n         * @param responseJSON Response from the server, parsed into a javascript object\n         * @param xhr Ajax transport used to send the failed request\n         * @param callback Optional callback to be invoked if a retry is prudent.\n         * Invoked in lieu of asking the upload handler to retry.\n         * @returns {boolean} true if an auto-retry will occur\n         * @private\n         */\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\n            var self = this;\n\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\n\n            if (self._shouldAutoRetry(id, name, responseJSON)) {\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\n\n                self._maybeParseAndSendUploadError.apply(self, arguments);\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\n                self._onBeforeAutoRetry(id, name);\n\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n                self._retryTimeouts[id] = setTimeout(function() {\n                    self.log(\"Starting retry for \" + name + \"...\");\n\n                    if (callback) {\n                        callback(id);\n                    }\n                    else {\n                        self._handler.retry(id);\n                    }\n                }, retryWaitPeriod);\n\n                return true;\n            }\n        },\n\n        _onBeforeAutoRetry: function(id, name) {\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            var itemLimit = this._currentItemLimit,\n                fileName;\n\n            if (this._preventRetries[id]) {\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\n                return false;\n            }\n            else if (this._handler.isValid(id)) {\n                fileName = this.getName(id);\n\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\n                    return false;\n                }\n\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\n                    this._itemError(\"retryFailTooManyItems\");\n                    return false;\n                }\n\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\n                return true;\n            }\n            else {\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\n                return false;\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._netUploadedOrQueued--;\n\n            clearTimeout(this._retryTimeouts[id]);\n\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\n                this._storedIds.splice(storedItemIndex, 1);\n            }\n\n            this._uploadData.setStatus(id, qq.status.CANCELED);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            if (!result.success) {\n                this._netUploadedOrQueued--;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\n\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\n                    this._preventRetries[id] = true;\n                }\n            }\n            else {\n                if (result.thumbnailUrl) {\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\n                }\n\n                this._netUploaded++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\n            }\n\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\n\n            return result.success ? true : false;\n        },\n\n        _onDelete: function(id) {\n            this._uploadData.setStatus(id, qq.status.DELETING);\n        },\n\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\n            var name = this.getName(id);\n\n            if (isError) {\n                this._handleDeleteFailed(id, xhrOrXdr);\n            }\n            else {\n                this._handleDeleteSuccess(id);\n            }\n        },\n\n        _onInputChange: function(input) {\n            var fileIndex;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\n                    this._annotateWithButtonId(input.files[fileIndex], input);\n                }\n\n                this.addFiles(input.files);\n            }\n            // Android 2.3.x will fire `onchange` even if no file has been selected\n            else if (input.value.length > 0) {\n                this.addFiles(input);\n            }\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n        },\n\n        _onProgress: function(id, name, loaded, total) {\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\n        },\n\n        _onSubmit: function(id, name) {\n            //nothing to do yet in core uploader\n        },\n\n        _onSubmitCallbackSuccess: function(id, name) {\n            this._onSubmit.apply(this, arguments);\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\n            this._onSubmitted.apply(this, arguments);\n\n            if (this._options.autoUpload) {\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n                this._uploadFile(id);\n            }\n            else {\n                this._storeForLater(id);\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n            }\n        },\n\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\n            var uuid = this.getUuid(id),\n                adjustedOnSuccessCallback;\n\n            if (onSuccessCallback) {\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\n            }\n\n            if (this._isDeletePossible()) {\n                this._handleCheckedCallback({\n                    name: \"onSubmitDelete\",\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\n                    onSuccess: adjustedOnSuccessCallback ||\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\n                    identifier: id\n                });\n                return true;\n            }\n            else {\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\n                return false;\n            }\n        },\n\n        _onSubmitted: function(id) {\n            //nothing to do in the base uploader\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._options.callbacks.onTotalProgress(loaded, total);\n        },\n\n        _onUploadPrep: function(id) {\n            // nothing to do in the core uploader for now\n        },\n\n        _onUpload: function(id, name) {\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            //nothing to do in the base uploader\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\n            if (newStatus === qq.status.PAUSED) {\n                clearTimeout(this._retryTimeouts[id]);\n            }\n        },\n\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\n            var self = this;\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                self._fileOrBlobRejected(fileWrapper.id);\n            });\n        },\n\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\n            var errorMessage,\n                itemLimit = this._currentItemLimit,\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\n\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\n                if (items.length > 0) {\n                    this._handleCheckedCallback({\n                        name: \"onValidate\",\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\n                    });\n                }\n                else {\n                    this._itemError(\"noFilesError\");\n                }\n            }\n            else {\n                this._onValidateBatchCallbackFailure(items);\n                errorMessage = this._options.messages.tooManyItemsError\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\n                this._batchError(errorMessage);\n            }\n        },\n\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\n            var nextIndex = index + 1;\n\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\n\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n        },\n\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\n            var self = this,\n                nextIndex = index + 1,\n                validationDescriptor = this._getValidationDescriptor(items[index]);\n\n            this._validateFileOrBlobData(items[index], validationDescriptor)\n                .then(\n                function() {\n                    self._upload(items[index].id, params, endpoint);\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\n                },\n                function() {\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n                }\n            );\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            if (items.length === 0) {\n                this._itemError(\"noFilesError\");\n                return;\n            }\n\n            var validationDescriptors = this._getValidationDescriptors(items),\n                buttonId = this._getButtonId(items[0].file),\n                button = this._getButton(buttonId);\n\n            this._handleCheckedCallback({\n                name: \"onValidateBatch\",\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\n                identifier: \"batch validation\"\n            });\n        },\n\n        _preventLeaveInProgress: function() {\n            var self = this;\n\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\n                if (self.getInProgress()) {\n                    e = e || window.event;\n                    // for ie, ff\n                    e.returnValue = self._options.messages.onLeave;\n                    // for webkit\n                    return self._options.messages.onLeave;\n                }\n            });\n        },\n\n        // Attempts to refresh session data only if the `qq.Session` module exists\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\n        // callback will be invoked once the refresh is complete.\n        _refreshSessionData: function() {\n            var self = this,\n                options = this._options.session;\n\n            /* jshint eqnull:true */\n            if (qq.Session && this._options.session.endpoint != null) {\n                if (!this._session) {\n                    qq.extend(options, {cors: this._options.cors});\n\n                    options.log = qq.bind(this.log, this);\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\n\n                    this._session = new qq.Session(options);\n                }\n\n                setTimeout(function() {\n                    self._session.refresh().then(function(response, xhrOrXdr) {\n                        self._sessionRequestComplete();\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\n\n                    }, function(response, xhrOrXdr) {\n\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\n                    });\n                }, 0);\n            }\n        },\n\n        _sessionRequestComplete: function() {},\n\n        _setSize: function(id, newSize) {\n            this._uploadData.updateSize(id, newSize);\n            this._totalProgress && this._totalProgress.onNewSize(id);\n        },\n\n        _shouldAutoRetry: function(id, name, responseJSON) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            /*jshint laxbreak: true */\n            if (!this._preventRetries[id]\n                && this._options.retry.enableAuto\n                && uploadData.status !== qq.status.PAUSED) {\n\n                if (this._autoRetries[id] === undefined) {\n                    this._autoRetries[id] = 0;\n                }\n\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\n                    this._autoRetries[id] += 1;\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        _storeForLater: function(id) {\n            this._storedIds.push(id);\n        },\n\n        // Maps a file with the button that was used to select it.\n        _trackButton: function(id) {\n            var buttonId;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                buttonId = this._handler.getFile(id).qqButtonId;\n            }\n            else {\n                buttonId = this._getButtonId(this._handler.getInput(id));\n            }\n\n            if (buttonId) {\n                this._buttonIdsForFileIds[id] = buttonId;\n            }\n        },\n\n        _updateFormSupportAndParams: function(formElementOrId) {\n            this._options.form.element = formElementOrId;\n\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n                );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this.setEndpoint(this._formSupport.newEndpoint);\n                }\n            }\n        },\n\n        _upload: function(id, params, endpoint) {\n            var name = this.getName(id);\n\n            if (params) {\n                this.setParams(params, id);\n            }\n\n            if (endpoint) {\n                this.setEndpoint(endpoint, id);\n            }\n\n            this._handleCheckedCallback({\n                name: \"onSubmit\",\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\n                identifier: id\n            });\n        },\n\n        _uploadFile: function(id) {\n            if (!this._handler.upload(id)) {\n                this._uploadData.setStatus(id, qq.status.QUEUED);\n            }\n        },\n\n        _uploadStoredFiles: function() {\n            var idToUpload, stillSubmitting,\n                self = this;\n\n            while (this._storedIds.length) {\n                idToUpload = this._storedIds.shift();\n                this._uploadFile(idToUpload);\n            }\n\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\n            if (stillSubmitting) {\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\n                setTimeout(function() {\n                    self._uploadStoredFiles();\n                }, 1000);\n            }\n        },\n\n        /**\n         * Performs some internal validation checks on an item, defined in the `validation` option.\n         *\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\n         * @private\n         */\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\n            var self = this,\n                file = (function() {\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\n                        return fileWrapper.file.referenceBlob;\n                    }\n                    return fileWrapper.file;\n                }()),\n                name = validationDescriptor.name,\n                size = validationDescriptor.size,\n                buttonId = this._getButtonId(fileWrapper.file),\n                validationBase = this._getValidationBase(buttonId),\n                validityChecker = new qq.Promise();\n\n            validityChecker.then(\n                function() {},\n                function() {\n                    self._fileOrBlobRejected(fileWrapper.id, name);\n                });\n\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\n                this._itemError(\"typeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (!this._options.validation.allowEmpty && size === 0) {\n                this._itemError(\"emptyError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\n                this._itemError(\"sizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && size < validationBase.minSizeLimit) {\n                this._itemError(\"minSizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\n                    validityChecker.success,\n                    function(errorCode) {\n                        self._itemError(errorCode + \"ImageError\", name, file);\n                        validityChecker.failure();\n                    }\n                );\n            }\n            else {\n                validityChecker.success();\n            }\n\n            return validityChecker;\n        },\n\n        _wrapCallbacks: function() {\n            var self, safeCallback, prop;\n\n            self = this;\n\n            safeCallback = function(name, callback, args) {\n                var errorMsg;\n\n                try {\n                    return callback.apply(self, args);\n                }\n                catch (exception) {\n                    errorMsg = exception.message || exception.toString();\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\n                }\n            };\n\n            /* jshint forin: false, loopfunc: true */\n            for (prop in this._options.callbacks) {\n                (function() {\n                    var callbackName, callbackFunc;\n                    callbackName = prop;\n                    callbackFunc = self._options.callbacks[callbackName];\n                    self._options.callbacks[callbackName] = function() {\n                        return safeCallback(callbackName, callbackFunc, arguments);\n                    };\n                }());\n            }\n        }\n    };\n}());\n","/*globals qq*/\n(function() {\n    \"use strict\";\n\n    qq.FineUploaderBasic = function(o) {\n        var self = this;\n\n        // These options define FineUploaderBasic mode.\n        this._options = {\n            debug: false,\n            button: null,\n            multiple: true,\n            maxConnections: 3,\n            disableCancelForFormUploads: false,\n            autoUpload: true,\n\n            request: {\n                customHeaders: {},\n                endpoint: \"/server/upload\",\n                filenameParam: \"qqfilename\",\n                forceMultipart: true,\n                inputName: \"qqfile\",\n                method: \"POST\",\n                omitDefaultParams: false,\n                params: {},\n                paramsInBody: true,\n                requireSuccessJson: true,\n                totalFileSizeName: \"qqtotalfilesize\",\n                uuidName: \"qquuid\"\n            },\n\n            validation: {\n                allowedExtensions: [],\n                sizeLimit: 0,\n                minSizeLimit: 0,\n                itemLimit: 0,\n                stopOnFirstInvalidFile: true,\n                acceptFiles: null,\n                image: {\n                    maxHeight: 0,\n                    maxWidth: 0,\n                    minHeight: 0,\n                    minWidth: 0\n                },\n                allowEmpty: false\n            },\n\n            callbacks: {\n                onSubmit: function(id, name) {},\n                onSubmitted: function(id, name) {},\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\n                onAllComplete: function(successful, failed) {},\n                onCancel: function(id, name) {},\n                onUpload: function(id, name) {},\n                onUploadChunk: function(id, name, chunkData) {},\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\n                onResume: function(id, fileName, chunkData) {},\n                onProgress: function(id, name, loaded, total) {},\n                onTotalProgress: function(loaded, total) {},\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\n                onAutoRetry: function(id, name, attemptNumber) {},\n                onManualRetry: function(id, name) {},\n                onValidateBatch: function(fileOrBlobData) {},\n                onValidate: function(fileOrBlobData) {},\n                onSubmitDelete: function(id) {},\n                onDelete: function(id) {},\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\n                onPasteReceived: function(blob) {},\n                onStatusChange: function(id, oldStatus, newStatus) {},\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\n            },\n\n            messages: {\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\n                emptyError: \"{file} is empty, please select files again without it.\",\n                noFilesError: \"No files to upload.\",\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\n                maxHeightImageError: \"Image is too tall.\",\n                maxWidthImageError: \"Image is too wide.\",\n                minHeightImageError: \"Image is not tall enough.\",\n                minWidthImageError: \"Image is not wide enough.\",\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\n            },\n\n            retry: {\n                enableAuto: false,\n                maxAutoAttempts: 3,\n                autoAttemptDelay: 5,\n                preventRetryResponseProperty: \"preventRetry\"\n            },\n\n            classes: {\n                buttonHover: \"qq-upload-button-hover\",\n                buttonFocus: \"qq-upload-button-focus\"\n            },\n\n            chunking: {\n                enabled: false,\n                concurrent: {\n                    enabled: false\n                },\n                mandatory: false,\n                paramNames: {\n                    partIndex: \"qqpartindex\",\n                    partByteOffset: \"qqpartbyteoffset\",\n                    chunkSize: \"qqchunksize\",\n                    totalFileSize: \"qqtotalfilesize\",\n                    totalParts: \"qqtotalparts\"\n                },\n                partSize: 2000000,\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\n                success: {\n                    endpoint: null\n                }\n            },\n\n            resume: {\n                enabled: false,\n                recordsExpireIn: 7, //days\n                paramNames: {\n                    resuming: \"qqresume\"\n                }\n            },\n\n            formatFileName: function(fileOrBlobName) {\n                return fileOrBlobName;\n            },\n\n            text: {\n                defaultResponseError: \"Upload failure reason unknown\",\n                fileInputTitle: \"file input\",\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\n            },\n\n            deleteFile: {\n                enabled: false,\n                method: \"DELETE\",\n                endpoint: \"/server/upload\",\n                customHeaders: {},\n                params: {}\n            },\n\n            cors: {\n                expected: false,\n                sendCredentials: false,\n                allowXdr: false\n            },\n\n            blobs: {\n                defaultName: \"misc_data\"\n            },\n\n            paste: {\n                targetElement: null,\n                defaultName: \"pasted_image\"\n            },\n\n            camera: {\n                ios: false,\n\n                // if ios is true: button is null means target the default button, otherwise target the button specified\n                button: null\n            },\n\n            // This refers to additional upload buttons to be handled by Fine Uploader.\n            // Each element is an object, containing `element` as the only required\n            // property.  The `element` must be a container that will ultimately\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\n            // Optional properties of each object include `multiple`, `validation`,\n            // and `folders`.\n            extraButtons: [],\n\n            // Depends on the session module.  Used to query the server for an initial file list\n            // during initialization and optionally after a `reset`.\n            session: {\n                endpoint: null,\n                params: {},\n                customHeaders: {},\n                refreshOnReset: true\n            },\n\n            // Send parameters associated with an existing form along with the files\n            form: {\n                // Element ID, HTMLElement, or null\n                element: \"qq-form\",\n\n                // Overrides the base `autoUpload`, unless `element` is null.\n                autoUpload: false,\n\n                // true = upload files on form submission (and squelch submit event)\n                interceptSubmit: true\n            },\n\n            // scale images client side, upload a new file for each scaled version\n            scaling: {\n                customResizer: null,\n\n                // send the original file as well\n                sendOriginal: true,\n\n                // fox orientation for scaled images\n                orient: true,\n\n                // If null, scaled image type will match reference image type.  This value will be referred to\n                // for any size record that does not specific a type.\n                defaultType: null,\n\n                defaultQuality: 80,\n\n                failureText: \"Failed to scale\",\n\n                includeExif: false,\n\n                // metadata about each requested scaled version\n                sizes: []\n            },\n\n            workarounds: {\n                iosEmptyVideos: true,\n                ios8SafariUploads: true,\n                ios8BrowserCrash: false\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(this._options, o, true);\n\n        this._buttons = [];\n        this._extraButtonSpecs = {};\n        this._buttonIdsForFileIds = [];\n\n        this._wrapCallbacks();\n        this._disposeSupport =  new qq.DisposeSupport();\n\n        this._storedIds = [];\n        this._autoRetries = [];\n        this._retryTimeouts = [];\n        this._preventRetries = [];\n        this._thumbnailUrls = [];\n\n        this._netUploadedOrQueued = 0;\n        this._netUploaded = 0;\n        this._uploadData = this._createUploadDataTracker();\n\n        this._initFormSupportAndParams();\n\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\n\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\n\n        this._endpointStore = this._createStore(this._options.request.endpoint);\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\n\n        this._handler = this._createUploadHandler();\n\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\n\n        if (this._options.button) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._options.button,\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._generateExtraButtonSpecs();\n\n        this._handleCameraAccess();\n\n        if (this._options.paste.targetElement) {\n            if (qq.PasteSupport) {\n                this._pasteHandler = this._createPasteHandler();\n            }\n            else {\n                this.log(\"Paste support module not found\", \"error\");\n            }\n        }\n\n        this._preventLeaveInProgress();\n\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\n        this._refreshSessionData();\n\n        this._succeededSinceLastAllComplete = [];\n        this._failedSinceLastAllComplete = [];\n\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\n        if (this._scaler.enabled) {\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\n        }\n\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\n            this._totalProgress = new qq.TotalProgress(\n                qq.bind(this._onTotalProgress, this),\n\n                function(id) {\n                    var entry = self._uploadData.retrieve({id: id});\n                    return (entry && entry.size) || 0;\n                }\n            );\n        }\n\n        this._currentItemLimit = this._options.validation.itemLimit;\n    };\n\n    // Define the private & public API methods.\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\n}());\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Base upload handler module.  Controls more specific handlers.\n *\n * @param o Options.  Passed along to the specific handler submodule as well.\n * @param namespace [optional] Namespace for the specific handler.\n */\nqq.UploadHandlerController = function(o, namespace) {\n    \"use strict\";\n\n    var controller = this,\n        chunkingPossible = false,\n        concurrentChunkingPossible = false,\n        chunking, preventRetryResponse, log, handler,\n\n    options = {\n        paramsStore: {},\n        maxConnections: 3, // maximum number of concurrent uploads\n        chunking: {\n            enabled: false,\n            multiple: {\n                enabled: false\n            }\n        },\n        log: function(str, level) {},\n        onProgress: function(id, fileName, loaded, total) {},\n        onComplete: function(id, fileName, response, xhr) {},\n        onCancel: function(id, fileName) {},\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\n        onUpload: function(id, fileName) {},\n        onUploadChunk: function(id, fileName, chunkData) {},\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\n        onAutoRetry: function(id, fileName, response, xhr) {},\n        onResume: function(id, fileName, chunkData) {},\n        onUuidChanged: function(id, newUuid) {},\n        getName: function(id) {},\n        setSize: function(id, newSize) {},\n        isQueued: function(id) {},\n        getIdsInProxyGroup: function(id) {},\n        getIdsInBatch: function(id) {},\n        isInProgress: function(id) {}\n    },\n\n    chunked = {\n        // Called when each chunk has uploaded successfully\n        done: function(id, chunkIdx, response, xhr) {\n            var chunkData = handler._getChunkData(id, chunkIdx);\n\n            handler._getFileState(id).attemptingResume = false;\n\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\n            handler._getFileState(id).loaded += chunkData.size;\n\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\n        },\n\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\n        // logic associated with closing out the file, such as combining the chunks.\n        finalize: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id);\n\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\n            handler.finalizeChunks(id).then(\n                function(response, xhr) {\n                    log(\"Finalize successful for \" + id);\n\n                    var normaizedResponse = upload.normalizeResponse(response, true);\n\n                    options.onProgress(id, name, size, size);\n                    handler._maybeDeletePersistedChunkData(id);\n                    upload.cleanup(id, normaizedResponse, xhr);\n                },\n                function(response, xhr) {\n                    var normaizedResponse = upload.normalizeResponse(response, false);\n\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normaizedResponse.error, \"error\");\n\n                    if (normaizedResponse.reset) {\n                        chunked.reset(id);\n                    }\n\n                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {\n                        upload.cleanup(id, normaizedResponse, xhr);\n                    }\n                }\n            );\n        },\n\n        handleFailure: function(chunkIdx, id, response, xhr) {\n            var name = options.getName(id);\n\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\n\n            handler.clearCachedChunk(id, chunkIdx);\n\n            var responseToReport = upload.normalizeResponse(response, false),\n                inProgressIdx;\n\n            if (responseToReport.reset) {\n                chunked.reset(id);\n            }\n            else {\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\n                if (inProgressIdx >= 0) {\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\n                }\n            }\n\n            // We may have aborted all other in-progress chunks for this file due to a failure.\n            // If so, ignore the failures associated with those aborts.\n            if (!handler._getFileState(id).temp.ignoreFailure) {\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\n                // chunks since they will be explicitly aborted\n                if (concurrentChunkingPossible) {\n                    handler._getFileState(id).temp.ignoreFailure = true;\n\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\n                        ckXhr.abort();\n                        // Flag the transport, in case we are waiting for some other async operation\n                        // to complete before attempting to upload the chunk\n                        ckXhr._cancelled = true;\n                    });\n\n                    // We must indicate that all aborted chunks are no longer in progress\n                    handler.moveInProgressToRemaining(id);\n\n                    // Free up any connections used by these chunks, but don't allow any\n                    // other files to take up the connections (until we have exhausted all auto-retries)\n                    connectionManager.free(id, true);\n                }\n\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\n                    // is a failure or not.\n                    upload.cleanup(id, responseToReport, xhr);\n                }\n            }\n        },\n\n        hasMoreParts: function(id) {\n            return !!handler._getFileState(id).chunking.remaining.length;\n        },\n\n        nextPart: function(id) {\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\n\n            if (nextIdx >= handler._getTotalChunks(id)) {\n                nextIdx = null;\n            }\n\n            return nextIdx;\n        },\n\n        reset: function(id) {\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\n\n            handler._maybeDeletePersistedChunkData(id);\n            handler.reevaluateChunking(id);\n            handler._getFileState(id).loaded = 0;\n        },\n\n        sendNext: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id),\n                chunkIdx = chunked.nextPart(id),\n                chunkData = handler._getChunkData(id, chunkIdx),\n                resuming = handler._getFileState(id).attemptingResume,\n                inProgressChunks = handler._getFileState(id).chunking.inProgress || [];\n\n            if (handler._getFileState(id).loaded == null) {\n                handler._getFileState(id).loaded = 0;\n            }\n\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\n            if (resuming && options.onResume(id, name, chunkData) === false) {\n                chunked.reset(id);\n                chunkIdx = chunked.nextPart(id);\n                chunkData = handler._getChunkData(id, chunkIdx);\n                resuming = false;\n            }\n\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\n            if (chunkIdx == null && inProgressChunks.length === 0) {\n                chunked.finalize(id);\n            }\n\n            // Send the next chunk\n            else {\n                inProgressChunks.push(chunkIdx);\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\n\n                if (concurrentChunkingPossible) {\n                    connectionManager.open(id, chunkIdx);\n                }\n\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\n                    chunked.sendNext(id);\n                }\n\n                if (chunkData.blob.size === 0) {\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\n                }\n\n                var onUploadChunkPromise = options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\n\n                onUploadChunkPromise.then(\n                    function(requestOverrides) {\n                        if (!options.isInProgress(id)) {\n                            log(qq.format(\"Not sending chunked upload request for item {}.{} - no longer in progress.\", id, chunkIdx));\n                        }\n                        else {\n                            log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\n\n                            var uploadChunkData = {\n                                chunkIdx: chunkIdx,\n                                id: id,\n                                overrides: requestOverrides,\n                                resuming: resuming\n                            };\n\n                            handler.uploadChunk(uploadChunkData).then(\n                                // upload chunk success\n                                function success(response, xhr) {\n                                    log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\n\n                                    handler.clearCachedChunk(id, chunkIdx);\n\n                                    var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\n                                        responseToReport = upload.normalizeResponse(response, true),\n                                        inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\n\n                                    log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\n\n                                    chunked.done(id, chunkIdx, responseToReport, xhr);\n\n                                    if (inProgressChunkIdx >= 0) {\n                                        inProgressChunks.splice(inProgressChunkIdx, 1);\n                                    }\n\n                                    handler._maybePersistChunkedState(id);\n\n                                    if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\n                                        chunked.finalize(id);\n                                    }\n                                    else if (chunked.hasMoreParts(id)) {\n                                        chunked.sendNext(id);\n                                    }\n                                    else {\n                                        log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\n                                    }\n                                },\n\n                                // upload chunk failure\n                                function failure(response, xhr) {\n                                    chunked.handleFailure(chunkIdx, id, response, xhr);\n                                }\n                            )\n                                .done(function () {\n                                    handler.clearXhr(id, chunkIdx);\n                                });\n                        }\n                    },\n\n                    function(error) {\n                        chunked.handleFailure(chunkIdx, id, error, null);\n                    }\n                );\n            }\n        }\n    },\n\n    connectionManager = {\n        _open: [],\n        _openChunks: {},\n        _waiting: [],\n\n        available: function() {\n            var max = options.maxConnections,\n                openChunkEntriesCount = 0,\n                openChunksCount = 0;\n\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\n                openChunkEntriesCount++;\n                openChunksCount += openChunkIndexes.length;\n            });\n\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\n        },\n\n        /**\n         * Removes element from queue, starts upload of next\n         */\n        free: function(id, dontAllowNext) {\n            var allowNext = !dontAllowNext,\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\n                nextId;\n\n            delete connectionManager._openChunks[id];\n\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\n                delete handler._getFileState(id).file;\n            }\n\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\n            if (waitingIndex >= 0) {\n                connectionManager._waiting.splice(waitingIndex, 1);\n            }\n            // If this file was consuming a connection, allow the next file to be uploaded\n            else if (allowNext && connectionsIndex >= 0) {\n                connectionManager._open.splice(connectionsIndex, 1);\n\n                nextId = connectionManager._waiting.shift();\n                if (nextId >= 0) {\n                    connectionManager._open.push(nextId);\n                    upload.start(nextId);\n                }\n            }\n        },\n\n        getWaitingOrConnected: function() {\n            var waitingOrConnected = [];\n\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\n                if (chunks && chunks.length) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // For non-chunked files, only one connection will be consumed per file.\n            // This is where we aggregate those file IDs.\n            qq.each(connectionManager._open, function(idx, fileId) {\n                if (!connectionManager._openChunks[fileId]) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // There may be files waiting for a connection.\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\n\n            return waitingOrConnected;\n        },\n\n        isUsingConnection: function(id) {\n            return qq.indexOf(connectionManager._open, id) >= 0;\n        },\n\n        open: function(id, chunkIdx) {\n            if (chunkIdx == null) {\n                connectionManager._waiting.push(id);\n            }\n\n            if (connectionManager.available()) {\n                if (chunkIdx == null) {\n                    connectionManager._waiting.pop();\n                    connectionManager._open.push(id);\n                }\n                else {\n                    (function() {\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\n                        openChunksEntry.push(chunkIdx);\n                        connectionManager._openChunks[id] = openChunksEntry;\n                    }());\n                }\n\n                return true;\n            }\n\n            return false;\n        },\n\n        reset: function() {\n            connectionManager._waiting = [];\n            connectionManager._open = [];\n        }\n    },\n\n    simple = {\n        send: function(id, name) {\n            handler._getFileState(id).loaded = 0;\n\n            log(\"Sending simple upload request for \" + id);\n            handler.uploadFile(id).then(\n                function(response, optXhr) {\n                    log(\"Simple upload request succeeded for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, true),\n                        size = options.getSize(id);\n\n                    options.onProgress(id, name, size, size);\n                    upload.maybeNewUuid(id, responseToReport);\n                    upload.cleanup(id, responseToReport, optXhr);\n                },\n\n                function(response, optXhr) {\n                    log(\"Simple upload request failed for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, false);\n\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\n                        upload.cleanup(id, responseToReport, optXhr);\n                    }\n                }\n            );\n        }\n    },\n\n    upload = {\n        cancel: function(id) {\n            log(\"Cancelling \" + id);\n            options.paramsStore.remove(id);\n            connectionManager.free(id);\n        },\n\n        cleanup: function(id, response, optXhr) {\n            var name = options.getName(id);\n\n            options.onComplete(id, name, response, optXhr);\n\n            if (handler._getFileState(id)) {\n                handler._clearXhrs && handler._clearXhrs(id);\n            }\n\n            connectionManager.free(id);\n        },\n\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\n        // if none of these are available for the ID\n        getProxyOrBlob: function(id) {\n            return (handler.getProxy && handler.getProxy(id)) ||\n                (handler.getFile && handler.getFile(id));\n        },\n\n        initHandler: function() {\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\n\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\n                options,\n                {\n                    getDataByUuid: options.getDataByUuid,\n                    getName: options.getName,\n                    getSize: options.getSize,\n                    getUuid: options.getUuid,\n                    log: log,\n                    onCancel: options.onCancel,\n                    onProgress: options.onProgress,\n                    onUuidChanged: options.onUuidChanged\n                }\n            );\n\n            if (handler._removeExpiredChunkingRecords) {\n                handler._removeExpiredChunkingRecords();\n            }\n        },\n\n        isDeferredEligibleForUpload: function(id) {\n            return options.isQueued(id);\n        },\n\n        // For Blobs that are part of a group of generated images, along with a reference image,\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\n        // even if some async processing must be completed on one or more Blobs first.\n        maybeDefer: function(id, blob) {\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\n            // and then submit the upload to the specific handler once the blob is available.\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\n\n                // Blob creation may take some time, so the caller may want to update the\n                // UI to indicate that an operation is in progress, even before the actual\n                // upload begins and an onUpload callback is invoked.\n                options.onUploadPrep(id);\n\n                log(\"Attempting to generate a blob on-demand for \" + id);\n                blob.create().then(function(generatedBlob) {\n                    log(\"Generated an on-demand blob for \" + id);\n\n                    // Update record associated with this file by providing the generated Blob\n                    handler.updateBlob(id, generatedBlob);\n\n                    // Propagate the size for this generated Blob\n                    options.setSize(id, generatedBlob.size);\n\n                    // Order handler to recalculate chunking possibility, if applicable\n                    handler.reevaluateChunking(id);\n\n                    upload.maybeSendDeferredFiles(id);\n                },\n\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\n                function(errorMessage) {\n                    var errorResponse = {};\n\n                    if (errorMessage) {\n                        errorResponse.error = errorMessage;\n                    }\n\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\n\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\n                    upload.maybeSendDeferredFiles(id);\n                    connectionManager.free(id);\n                });\n            }\n            else {\n                return upload.maybeSendDeferredFiles(id);\n            }\n\n            return false;\n        },\n\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\n        maybeSendDeferredFiles: function(id) {\n            var idsInGroup = options.getIdsInProxyGroup(id),\n                uploadedThisId = false;\n\n            if (idsInGroup && idsInGroup.length) {\n                log(\"Maybe ready to upload proxy group file \" + id);\n\n                qq.each(idsInGroup, function(idx, idInGroup) {\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\n                        uploadedThisId = idInGroup === id;\n                        upload.now(idInGroup);\n                    }\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\n                        return false;\n                    }\n                });\n            }\n            else {\n                uploadedThisId = true;\n                upload.now(id);\n            }\n\n            return uploadedThisId;\n        },\n\n        maybeNewUuid: function(id, response) {\n            if (response.newUuid !== undefined) {\n                options.onUuidChanged(id, response.newUuid);\n            }\n        },\n\n        // The response coming from handler implementations may be in various formats.\n        // Instead of hoping a promise nested 5 levels deep will always return an object\n        // as its first param, let's just normalize the response here.\n        normalizeResponse: function(originalResponse, successful) {\n            var response = originalResponse;\n\n            // The passed \"response\" param may not be a response at all.\n            // It could be a string, detailing the error, for example.\n            if (!qq.isObject(originalResponse)) {\n                response = {};\n\n                if (qq.isString(originalResponse) && !successful) {\n                    response.error = originalResponse;\n                }\n            }\n\n            response.success = successful;\n\n            return response;\n        },\n\n        now: function(id) {\n            var name = options.getName(id);\n\n            if (!controller.isValid(id)) {\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\n            }\n\n            var onUploadPromise = options.onUpload(id, name);\n\n            onUploadPromise.then(\n                function() {\n                    if (chunkingPossible && handler._shouldChunkThisFile(id)) {\n                        chunked.sendNext(id);\n                    }\n                    else {\n                        simple.send(id, name);\n                    }\n                },\n\n                function(error) {\n                    throw new qq.Error(id + \" upload start aborted due to rejected onUpload Promise - details: \" + error);\n                }\n            );\n        },\n\n        start: function(id) {\n            var blobToUpload = upload.getProxyOrBlob(id);\n\n            if (blobToUpload) {\n                return upload.maybeDefer(id, blobToUpload);\n            }\n            else {\n                upload.now(id);\n                return true;\n            }\n        }\n    };\n\n    qq.extend(this, {\n        /**\n         * Adds file or file input to the queue\n         **/\n        add: function(id, file) {\n            handler.add.apply(this, arguments);\n        },\n\n        /**\n         * Sends the file identified by id\n         */\n        upload: function(id) {\n            if (connectionManager.open(id)) {\n                return upload.start(id);\n            }\n            return false;\n        },\n\n        retry: function(id) {\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\n            // any more failures at this point.\n            if (concurrentChunkingPossible) {\n                handler._getFileState(id).temp.ignoreFailure = false;\n            }\n\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\n            // Just go ahead and ask the handler to upload again.\n            if (connectionManager.isUsingConnection(id)) {\n                return upload.start(id);\n            }\n\n            // If we are attempting to retry a file that is not currently consuming a connection,\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\n            // before the retry commences.\n            else {\n                return controller.upload(id);\n            }\n        },\n\n        /**\n         * Cancels file upload by id\n         */\n        cancel: function(id) {\n            var cancelRetVal = handler.cancel(id);\n\n            if (qq.isGenericPromise(cancelRetVal)) {\n                cancelRetVal.then(function() {\n                    upload.cancel(id);\n                });\n            }\n            else if (cancelRetVal !== false) {\n                upload.cancel(id);\n            }\n        },\n\n        /**\n         * Cancels all queued or in-progress uploads\n         */\n        cancelAll: function() {\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\n                i;\n\n            // ensure files are cancelled in reverse order which they were added\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\n            if (waitingOrConnected.length) {\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\n                    controller.cancel(waitingOrConnected[i]);\n                }\n            }\n\n            connectionManager.reset();\n        },\n\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\n        // Undefined if no file record is available.\n        getFile: function(id) {\n            if (handler.getProxy && handler.getProxy(id)) {\n                return handler.getProxy(id).referenceBlob;\n            }\n\n            return handler.getFile && handler.getFile(id);\n        },\n\n        // Returns true if the Blob associated with the ID is related to a proxy s\n        isProxied: function(id) {\n            return !!(handler.getProxy && handler.getProxy(id));\n        },\n\n        getInput: function(id) {\n            if (handler.getInput) {\n                return handler.getInput(id);\n            }\n        },\n\n        reset: function() {\n            log(\"Resetting upload handler\");\n            controller.cancelAll();\n            connectionManager.reset();\n            handler.reset();\n        },\n\n        expunge: function(id) {\n            if (controller.isValid(id)) {\n                return handler.expunge(id);\n            }\n        },\n\n        /**\n         * Determine if the file exists.\n         */\n        isValid: function(id) {\n            return handler.isValid(id);\n        },\n\n        getResumableFilesData: function() {\n            if (handler.getResumableFilesData) {\n                return handler.getResumableFilesData();\n            }\n            return [];\n        },\n\n        /**\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\n         * will be undefined.\n         *\n         * @param id Internal file ID\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\n         */\n        getThirdPartyFileId: function(id) {\n            if (controller.isValid(id)) {\n                return handler.getThirdPartyFileId(id);\n            }\n        },\n\n        /**\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\n         * @param id ID of the upload/file to pause\n         * @returns {boolean} true if the upload was paused\n         */\n        pause: function(id) {\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\n                connectionManager.free(id);\n                handler.moveInProgressToRemaining(id);\n                return true;\n            }\n            return false;\n        },\n\n        // True if the file is eligible for pause/resume.\n        isResumable: function(id) {\n            return !!handler.isResumable && handler.isResumable(id);\n        }\n    });\n\n    qq.extend(options, o);\n    log = options.log;\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\n\n    preventRetryResponse = (function() {\n        var response = {};\n\n        response[options.preventRetryParam] = true;\n\n        return response;\n    }());\n\n    upload.initHandler();\n};\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = chunking.partSize,\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = chunking.partSize,\n                endpoint = getEndpoint(id);\n\n            return qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = chunking.partSize;\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now()\n                };\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*globals qq*/\n/**\n * Upload handler used that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to\n * a generic server.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.traditional = qq.traditional || {};\nqq.traditional.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log;\n\n    /**\n     * Returns json object received by iframe from server.\n     */\n    function getIframeContentJson(id, iframe) {\n        /*jshint evil: true*/\n\n        var response, doc, innerHtml;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            log(\"converting iframe's innerHTML to JSON\");\n            log(\"innerHTML = \" + innerHtml);\n            //plain text response may be wrapped in <pre> tag\n            if (innerHtml && innerHtml.match(/^<pre/i)) {\n                innerHtml = doc.body.firstChild.firstChild.nodeValue;\n            }\n\n            response = handler._parseJsonResponse(innerHtml);\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n            response = {success: false};\n        }\n\n        return response;\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var params = options.paramsStore.get(id),\n            method = options.method.toLowerCase() === \"get\" ? \"GET\" : \"POST\",\n            endpoint = options.endpointStore.get(id),\n            name = getName(id);\n\n        params[options.uuidName] = getUuid(id);\n        params[options.filenameParam] = name;\n\n        return handler._initFormForUpload({\n            method: method,\n            endpoint: endpoint,\n            params: params,\n            paramsInBody: options.paramsInBody,\n            targetName: iframe.name\n        });\n    }\n\n    this.uploadFile = function(id) {\n        var input = handler.getInput(id),\n            iframe = handler._createIframe(id),\n            promise = new qq.Promise(),\n            form;\n\n        form = createForm(id, iframe);\n        form.appendChild(input);\n\n        handler._attachLoadEvent(iframe, function(responseFromMessage) {\n            log(\"iframe loaded\");\n\n            var response = responseFromMessage ? responseFromMessage : getIframeContentJson(id, iframe);\n\n            handler._detachLoadEvent(id);\n\n            //we can't remove an iframe if the iframe doesn't belong to the same domain\n            if (!options.cors.expected) {\n                qq(iframe).remove();\n            }\n\n            if (response.success) {\n                promise.success(response);\n            }\n            else {\n                promise.failure(response);\n            }\n        });\n\n        log(\"Sending upload request for \" + id);\n        form.submit();\n        qq(form).remove();\n\n        return promise;\n    };\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: options.cors.expected,\n            inputName: options.inputName\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n};\n","/*globals qq*/\n/**\n * Upload handler used to upload to traditional endpoints.  It depends on File API support, and, therefore,\n * makes use of `XMLHttpRequest` level 2 to upload `File`s and `Blob`s to a generic server.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.traditional = qq.traditional || {};\nqq.traditional.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        multipart = spec.forceMultipart || spec.paramsInBody,\n\n        addChunkingSpecificParams = function(id, params, chunkData) {\n            var size = getSize(id),\n                name = getName(id);\n\n            if (!spec.omitDefaultParams) {\n                params[spec.chunking.paramNames.partIndex] = chunkData.part;\n                params[spec.chunking.paramNames.partByteOffset] = chunkData.start;\n                params[spec.chunking.paramNames.chunkSize] = chunkData.size;\n                params[spec.chunking.paramNames.totalParts] = chunkData.count;\n                params[spec.totalFileSizeName] = size;\n            }\n\n            /**\n             * When a Blob is sent in a multipart request, the filename value in the content-disposition header is either \"blob\"\n             * or an empty string.  So, we will need to include the actual file name as a param in this case.\n             */\n            if (multipart && !spec.omitDefaultParams) {\n                params[spec.filenameParam] = name;\n            }\n        },\n\n        allChunksDoneRequester = new qq.traditional.AllChunksDoneAjaxRequester({\n            cors: spec.cors,\n            endpoint: spec.chunking.success.endpoint,\n            log: log\n        }),\n\n        createReadyStateChangedHandler = function(id, xhr) {\n            var promise = new qq.Promise();\n\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    var result = onUploadOrChunkComplete(id, xhr);\n\n                    if (result.success) {\n                        promise.success(result.response, xhr);\n                    }\n                    else {\n                        promise.failure(result.response, xhr);\n                    }\n                }\n            };\n\n            return promise;\n        },\n\n        getChunksCompleteParams = function(id) {\n            var params = spec.paramsStore.get(id),\n                name = getName(id),\n                size = getSize(id);\n\n            params[spec.uuidName] = getUuid(id);\n            params[spec.filenameParam] = name;\n            params[spec.totalFileSizeName] = size;\n            params[spec.chunking.paramNames.totalParts] = handler._getTotalChunks(id);\n\n            return params;\n        },\n\n        isErrorUploadResponse = function(xhr, response) {\n            return qq.indexOf([200, 201, 202, 203, 204], xhr.status) < 0 ||\n                (spec.requireSuccessJson && !response.success) ||\n                response.reset;\n        },\n\n        onUploadOrChunkComplete = function(id, xhr) {\n            var response;\n\n            log(\"xhr - server response received for \" + id);\n            log(\"responseText = \" + xhr.responseText);\n\n            response = parseResponse(true, xhr);\n\n            return {\n                success: !isErrorUploadResponse(xhr, response),\n                response: response\n            };\n        },\n\n        // If this is an upload response, we require a JSON payload, otherwise, it is optional.\n        parseResponse = function(upload, xhr) {\n            var response = {};\n\n            try {\n                log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\n                response = qq.parseJson(xhr.responseText);\n            }\n            catch (error) {\n                upload && log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        },\n\n        sendChunksCompleteRequest = function(id) {\n            var promise = new qq.Promise();\n\n            allChunksDoneRequester.complete(\n                    id,\n                    handler._createXhr(id),\n                    getChunksCompleteParams(id),\n                    spec.customHeaders.get(id)\n                )\n                .then(function(xhr) {\n                    promise.success(parseResponse(false, xhr), xhr);\n                }, function(xhr) {\n                    promise.failure(parseResponse(false, xhr), xhr);\n                });\n\n            return promise;\n        },\n\n        setParamsAndGetEntityToSend = function(entityToSendParams) {\n            var fileOrBlob = entityToSendParams.fileOrBlob;\n            var id = entityToSendParams.id;\n            var xhr = entityToSendParams.xhr;\n            var xhrOverrides = entityToSendParams.xhrOverrides || {};\n\n            var params = xhrOverrides.params || entityToSendParams.params;\n\n            var formData = multipart ? new FormData() : null,\n                method = xhrOverrides.method || spec.method,\n                endpoint = xhrOverrides.endpoint || spec.endpointStore.get(id),\n                name = getName(id),\n                size = getSize(id);\n\n            if (!spec.omitDefaultParams) {\n                params[spec.uuidName] = getUuid(id);\n                params[spec.filenameParam] = name;\n            }\n\n            if (multipart && !spec.omitDefaultParams) {\n                params[spec.totalFileSizeName] = size;\n            }\n\n            //build query string\n            if (!spec.paramsInBody) {\n                if (!multipart && !spec.omitDefaultParams) {\n                    params[spec.inputName] = name;\n                }\n                endpoint = qq.obj2url(params, endpoint);\n            }\n\n            xhr.open(method, endpoint, true);\n\n            if (spec.cors.expected && spec.cors.sendCredentials) {\n                xhr.withCredentials = true;\n            }\n\n            if (multipart) {\n                if (spec.paramsInBody) {\n                    qq.obj2FormData(params, formData);\n                }\n\n                formData.append(spec.inputName, fileOrBlob);\n                return formData;\n            }\n\n            return fileOrBlob;\n        },\n\n        setUploadHeaders = function(headersOptions) {\n            var headerOverrides = headersOptions.headerOverrides;\n            var id = headersOptions.id;\n            var xhr = headersOptions.xhr;\n\n            if (headerOverrides) {\n                qq.each(headerOverrides, function(headerName, headerValue) {\n                    xhr.setRequestHeader(headerName, headerValue);\n                });\n            }\n            else {\n                var extraHeaders = spec.customHeaders.get(id),\n                    fileOrBlob = handler.getFile(id);\n\n                xhr.setRequestHeader(\"Accept\", \"application/json\");\n                xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n\n                if (!multipart) {\n                    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n                    //NOTE: return mime type in xhr works on chrome 16.0.9 firefox 11.0a2\n                    xhr.setRequestHeader(\"X-Mime-Type\", fileOrBlob.type);\n                }\n\n                qq.each(extraHeaders, function(name, val) {\n                    xhr.setRequestHeader(name, val);\n                });\n            }\n        };\n\n    qq.extend(this, {\n        uploadChunk: function(uploadChunkParams) {\n            var id = uploadChunkParams.id;\n            var chunkIdx = uploadChunkParams.chunkIdx;\n            var overrides = uploadChunkParams.overrides || {};\n            var resuming = uploadChunkParams.resuming;\n\n            var chunkData = handler._getChunkData(id, chunkIdx),\n                xhr = handler._createXhr(id, chunkIdx),\n                promise, toSend, params;\n\n            promise = createReadyStateChangedHandler(id, xhr);\n            handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n            params = spec.paramsStore.get(id);\n            addChunkingSpecificParams(id, params, chunkData);\n\n            if (resuming && !spec.omitDefaultParams) {\n                params[spec.resume.paramNames.resuming] = true;\n            }\n\n            toSend = setParamsAndGetEntityToSend({\n                fileOrBlob: chunkData.blob,\n                id: id,\n                params: params,\n                xhr: xhr,\n                xhrOverrides: overrides\n            });\n\n            setUploadHeaders({\n                headerOverrides: overrides.headers,\n                id: id,\n                xhr: xhr\n            });\n\n            xhr.send(toSend);\n\n            return promise;\n        },\n\n        uploadFile: function(id) {\n            var fileOrBlob = handler.getFile(id),\n                promise, xhr, params, toSend;\n\n            xhr = handler._createXhr(id);\n            handler._registerProgressHandler(id);\n            promise = createReadyStateChangedHandler(id, xhr);\n            params = spec.paramsStore.get(id);\n\n            toSend = setParamsAndGetEntityToSend({\n                fileOrBlob: fileOrBlob,\n                id: id,\n                params: params,\n                xhr: xhr\n            });\n\n            setUploadHeaders({\n                id: id,\n                xhr: xhr\n            });\n\n            xhr.send(toSend);\n\n            return promise;\n        }\n    });\n\n    qq.extend(this, new qq.XhrUploadHandler({\n        options: qq.extend({namespace: \"traditional\"}, spec),\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n    }));\n\n    qq.override(this, function(super_) {\n        return {\n            finalizeChunks: function(id) {\n                if (spec.chunking.success.endpoint) {\n                    return sendChunksCompleteRequest(id);\n                }\n                else {\n                    return super_.finalizeChunks(id, qq.bind(parseResponse, this, true));\n                }\n            }\n        };\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send a POST to a traditional endpoint once all chunks for a specific file have uploaded\n * successfully.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.traditional.AllChunksDoneAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"POST\",\n        options = {\n            cors: {\n                allowXdr: false,\n                expected: false,\n                sendCredentials: false\n            },\n            endpoint: null,\n            log: function(str, level) {}\n        },\n        promises = {},\n        endpointHandler = {\n            get: function(id) {\n                return options.endpoint;\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [method],\n        method: method,\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: options.cors,\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete promises[id];\n\n            if (isError) {\n                promise.failure(xhr);\n            }\n            else {\n                promise.success(xhr);\n            }\n        }\n    }));\n\n    qq.extend(this, {\n        complete: function(id, xhr, params, headers) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting All Chunks Done request for \" + id);\n\n            promises[id] = promise;\n\n            requester.initTransport(id)\n                .withParams(params)\n                .withHeaders(headers)\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                var name = entry.name,\n                    fullPath = entry.fullPath,\n                    indexOfNameInFullPath = fullPath.indexOf(name);\n\n                // remove file name from full path string\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n                // remove leading slash in full path string\n                if (fullPath.charAt(0) === \"/\") {\n                    fullPath = fullPath.substr(1);\n                }\n\n                file.qqPath = fullPath;\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.firefox()) {\n            return !e.relatedTarget;\n        }\n\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            e.preventDefault();\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n        // dt.types.contains check is for firefox\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains(\"Files\")));\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Defines the public API for FineUploader mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.uiPublicApi = {\n        addInitialFiles: function(cannedFileList) {\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\n            this._templating.addCacheToDom();\n        },\n\n        clearStoredFiles: function() {\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\n            this._templating.clearFiles();\n        },\n\n        addExtraDropzone: function(element) {\n            this._dnd && this._dnd.setupExtraDropzone(element);\n        },\n\n        removeExtraDropzone: function(element) {\n            if (this._dnd) {\n                return this._dnd.removeDropzone(element);\n            }\n        },\n\n        getItemByFileId: function(id) {\n            if (!this._templating.isHiddenForever(id)) {\n                return this._templating.getFileContainer(id);\n            }\n        },\n\n        reset: function() {\n            this._parent.prototype.reset.apply(this, arguments);\n            this._templating.reset();\n\n            if (!this._options.button && this._templating.getButton()) {\n                this._defaultButtonId = this._createUploadButton({\n                    element: this._templating.getButton(),\n                    title: this._options.text.fileInputTitle\n                }).getButtonId();\n            }\n\n            if (this._dnd) {\n                this._dnd.dispose();\n                this._dnd = this._setupDragAndDrop();\n            }\n\n            this._totalFilesInBatch = 0;\n            this._filesInBatchAddedToUi = 0;\n\n            this._setupClickAndEditEventHandlers();\n        },\n\n        setName: function(id, newName) {\n            var formattedFilename = this._options.formatFileName(newName);\n\n            this._parent.prototype.setName.apply(this, arguments);\n            this._templating.updateFilename(id, formattedFilename);\n        },\n\n        pauseUpload: function(id) {\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\n\n            paused && this._templating.uploadPaused(id);\n            return paused;\n        },\n\n        continueUpload: function(id) {\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\n\n            continued && this._templating.uploadContinued(id);\n            return continued;\n        },\n\n        getId: function(fileContainerOrChildEl) {\n            return this._templating.getFileId(fileContainerOrChildEl);\n        },\n\n        getDropTarget: function(fileId) {\n            var file = this.getFile(fileId);\n\n            return file.qqDropTarget;\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploader mode.\n     */\n    qq.uiPrivateApi = {\n        _getButton: function(buttonId) {\n            var button = this._parent.prototype._getButton.apply(this, arguments);\n\n            if (!button) {\n                if (buttonId === this._defaultButtonId) {\n                    button = this._templating.getButton();\n                }\n            }\n\n            return button;\n        },\n\n        _removeFileItem: function(fileId) {\n            this._templating.removeFile(fileId);\n        },\n\n        _setupClickAndEditEventHandlers: function() {\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\n\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\n            this._focusinEventSupported = !qq.firefox();\n\n            if (this._isEditFilenameEnabled())\n            {\n                this._filenameClickHandler = this._bindFilenameClickEvent();\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\n            }\n        },\n\n        _setupDragAndDrop: function() {\n            var self = this,\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\n                templating = this._templating,\n                defaultDropZone = templating.getDropZone();\n\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\n\n            return new qq.DragAndDrop({\n                dropZoneElements: dropZoneElements,\n                allowMultipleItems: this._options.multiple,\n                classes: {\n                    dropActive: this._options.classes.dropActive\n                },\n                callbacks: {\n                    processingDroppedFiles: function() {\n                        templating.showDropProcessing();\n                    },\n                    processingDroppedFilesComplete: function(files, targetEl) {\n                        templating.hideDropProcessing();\n\n                        qq.each(files, function(idx, file) {\n                            file.qqDropTarget = targetEl;\n                        });\n\n                        if (files.length) {\n                            self.addFiles(files, null, null);\n                        }\n                    },\n                    dropError: function(code, errorData) {\n                        self._itemError(code, errorData);\n                    },\n                    dropLog: function(message, level) {\n                        self.log(message, level);\n                    }\n                }\n            });\n        },\n\n        _bindFileButtonsClickEvent: function() {\n            var self = this;\n\n            return new qq.FileButtonsClickHandler({\n                templating: this._templating,\n\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n\n                onDeleteFile: function(fileId) {\n                    self.deleteFile(fileId);\n                },\n\n                onCancel: function(fileId) {\n                    self.cancel(fileId);\n                },\n\n                onRetry: function(fileId) {\n                    self.retry(fileId);\n                },\n\n                onPause: function(fileId) {\n                    self.pauseUpload(fileId);\n                },\n\n                onContinue: function(fileId) {\n                    self.continueUpload(fileId);\n                },\n\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                }\n            });\n        },\n\n        _isEditFilenameEnabled: function() {\n            /*jshint -W014 */\n            return this._templating.isEditFilenamePossible()\n                && !this._options.autoUpload\n                && qq.FilenameClickHandler\n                && qq.FilenameInputFocusHandler\n                && qq.FilenameInputFocusHandler;\n        },\n\n        _filenameEditHandler: function() {\n            var self = this,\n                templating = this._templating;\n\n            return {\n                templating: templating,\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n                onGetUploadStatus: function(fileId) {\n                    return self.getUploads({id: fileId}).status;\n                },\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                },\n                onSetName: function(id, newName) {\n                    self.setName(id, newName);\n                },\n                onEditingStatusChange: function(id, isEditing) {\n                    var qqInput = qq(templating.getEditInput(id)),\n                        qqFileContainer = qq(templating.getFileContainer(id));\n\n                    if (isEditing) {\n                        qqInput.addClass(\"qq-editing\");\n                        templating.hideFilename(id);\n                        templating.hideEditIcon(id);\n                    }\n                    else {\n                        qqInput.removeClass(\"qq-editing\");\n                        templating.showFilename(id);\n                        templating.showEditIcon(id);\n                    }\n\n                    // Force IE8 and older to repaint\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\n                }\n            };\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\n\n            if (this._isEditFilenameEnabled()) {\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\n                    this._templating.markFilenameEditable(id);\n                    this._templating.hideEditIcon(id);\n                }\n            }\n\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\n                this._templating.hideRetry(id);\n                this._templating.setStatusText(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\n            }\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\n                this._templating.hidePause(id);\n            }\n        },\n\n        _bindFilenameInputFocusInEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusInHandler(spec);\n        },\n\n        _bindFilenameInputFocusEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusHandler(spec);\n        },\n\n        _bindFilenameClickEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameClickHandler(spec);\n        },\n\n        _storeForLater: function(id) {\n            this._parent.prototype._storeForLater.apply(this, arguments);\n            this._templating.hideSpinner(id);\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._parent.prototype._onAllComplete.apply(this, arguments);\n            this._templating.resetTotalProgress();\n        },\n\n        _onSubmit: function(id, name) {\n            var file = this.getFile(id);\n\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\n                this._paramsStore.addReadOnly(id, {\n                    qqpath: file.qqPath\n                });\n            }\n\n            this._parent.prototype._onSubmit.apply(this, arguments);\n            this._addToList(id, name);\n        },\n\n        // The file item has been added to the DOM.\n        _onSubmitted: function(id) {\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\n            if (this._isEditFilenameEnabled()) {\n                this._templating.markFilenameEditable(id);\n                this._templating.showEditIcon(id);\n\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\n                if (!this._focusinEventSupported) {\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\n                }\n            }\n        },\n\n        // Update the progress bar & percentage as the file is uploaded\n        _onProgress: function(id, name, loaded, total) {\n            this._parent.prototype._onProgress.apply(this, arguments);\n\n            this._templating.updateProgress(id, loaded, total);\n\n            if (total === 0 || Math.round(loaded / total * 100) === 100) {\n                this._templating.hideCancel(id);\n                this._templating.hidePause(id);\n                this._templating.hideProgress(id);\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\n\n                // If ~last byte was sent, display total file size\n                this._displayFileSize(id);\n            }\n            else {\n                // If still uploading, display percentage - total size is actually the total request(s) size\n                this._displayFileSize(id, loaded, total);\n            }\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\n            this._templating.updateTotalProgress(loaded, total);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\n                templating = this._templating,\n                fileContainer = templating.getFileContainer(id),\n                self = this;\n\n            function completeUpload(result) {\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\n                // If so, don't perform any UI-related tasks related to this file.\n                if (!fileContainer) {\n                    return;\n                }\n\n                templating.setStatusText(id);\n\n                qq(fileContainer).removeClass(self._classes.retrying);\n                templating.hideProgress(id);\n\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\n                    templating.hideCancel(id);\n                }\n                templating.hideSpinner(id);\n\n                if (result.success) {\n                    self._markFileAsSuccessful(id);\n                }\n                else {\n                    qq(fileContainer).addClass(self._classes.fail);\n                    templating.showCancel(id);\n\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\n                        qq(fileContainer).addClass(self._classes.retryable);\n                        templating.showRetry(id);\n                    }\n                    self._controlFailureTextDisplay(id, result);\n                }\n            }\n\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\n            if (parentRetVal instanceof qq.Promise) {\n                parentRetVal.done(function(newResult) {\n                    completeUpload(newResult);\n                });\n\n            }\n            else {\n                completeUpload(result);\n            }\n\n            return parentRetVal;\n        },\n\n        _markFileAsSuccessful: function(id) {\n            var templating = this._templating;\n\n            if (this._isDeletePossible()) {\n                templating.showDeleteButton(id);\n            }\n\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\n\n            this._maybeUpdateThumbnail(id);\n        },\n\n        _onUploadPrep: function(id) {\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\n            this._templating.showSpinner(id);\n        },\n\n        _onUpload: function(id, name) {\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\n\n            this._templating.showSpinner(id);\n\n            return parentRetVal;\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\n\n            // Only display the pause button if we have finished uploading at least one chunk\n            // & this file can be resumed\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\n                this._templating.allowPause(id);\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._parent.prototype._onCancel.apply(this, arguments);\n            this._removeFileItem(id);\n\n            if (this._getNotFinished() === 0) {\n                this._templating.resetTotalProgress();\n            }\n        },\n\n        _onBeforeAutoRetry: function(id) {\n            var retryNumForDisplay, maxAuto, retryNote;\n\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\n\n            this._showCancelLink(id);\n\n            if (this._options.retry.showAutoRetryNote) {\n                retryNumForDisplay = this._autoRetries[id];\n                maxAuto = this._options.retry.maxAutoAttempts;\n\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\n\n                this._templating.setStatusText(id, retryNote);\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\n            }\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\n                this._templating.resetProgress(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\n                this._templating.setStatusText(id);\n                this._templating.showSpinner(id);\n                this._showCancelLink(id);\n                return true;\n            }\n            else {\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\n                this._templating.showRetry(id);\n                return false;\n            }\n        },\n\n        _onSubmitDelete: function(id) {\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\n\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\n        },\n\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\n            if (this._options.deleteFile.forceConfirm) {\n                this._showDeleteConfirm.apply(this, arguments);\n            }\n            else {\n                this._sendDeleteRequest.apply(this, arguments);\n            }\n        },\n\n        _onDeleteComplete: function(id, xhr, isError) {\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\n\n            this._templating.hideSpinner(id);\n\n            if (isError) {\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\n                this._templating.showDeleteButton(id);\n            }\n            else {\n                this._removeFileItem(id);\n            }\n        },\n\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\n            this._templating.hideDeleteButton(id);\n            this._templating.showSpinner(id);\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\n            this._deleteHandler.sendDelete.apply(this, arguments);\n        },\n\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\n            /*jshint -W004 */\n            var fileName = this.getName(id),\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\n                uuid = this.getUuid(id),\n                deleteRequestArgs = arguments,\n                self = this,\n                retVal;\n\n            retVal = this._options.showConfirm(confirmMessage);\n\n            if (qq.isGenericPromise(retVal)) {\n                retVal.then(function() {\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\n                });\n            }\n            else if (retVal !== false) {\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\n            }\n        },\n\n        _addToList: function(id, name, canned) {\n            var prependData,\n                prependIndex = 0,\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\n                record;\n\n            if (this._options.display.prependFiles) {\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\n                    prependIndex = this._filesInBatchAddedToUi - 1;\n                }\n\n                prependData = {\n                    index: prependIndex\n                };\n            }\n\n            if (!canned) {\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\n                    this._templating.disableCancel();\n                }\n\n                // Cancel all existing (previous) files and clear the list if this file is not part of\n                // a scaled file group that has already been accepted, or if this file is not part of\n                // a scaled file group at all.\n                if (!this._options.multiple) {\n                    record = this.getUploads({id: id});\n\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\n\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\n                        this._handler.cancelAll();\n                        this._clearList();\n                        this._handledProxyGroup = null;\n                    }\n                }\n            }\n\n            if (canned) {\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\n            }\n            else {\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\n            }\n\n            this._filesInBatchAddedToUi += 1;\n\n            if (canned ||\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\n\n                this._displayFileSize(id);\n            }\n        },\n\n        _clearList: function() {\n            this._templating.clearFiles();\n            this.clearStoredFiles();\n        },\n\n        _displayFileSize: function(id, loadedSize, totalSize) {\n            var size = this.getSize(id),\n                sizeForDisplay = this._formatSize(size);\n\n            if (size >= 0) {\n                if (loadedSize !== undefined && totalSize !== undefined) {\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\n                }\n\n                this._templating.updateSize(id, sizeForDisplay);\n            }\n        },\n\n        _formatProgress: function(uploadedSize, totalSize) {\n            var message = this._options.text.formatProgress;\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\n            r(\"{total_size}\", this._formatSize(totalSize));\n            return message;\n        },\n\n        _controlFailureTextDisplay: function(id, response) {\n            var mode, responseProperty, failureReason;\n\n            mode = this._options.failedUploadTextDisplay.mode;\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\n\n            if (mode === \"custom\") {\n                failureReason = response[responseProperty];\n                if (!failureReason) {\n                    failureReason = this._options.text.failUpload;\n                }\n\n                this._templating.setStatusText(id, failureReason);\n\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\n                    this._showTooltip(id, failureReason);\n                }\n            }\n            else if (mode === \"default\") {\n                this._templating.setStatusText(id, this._options.text.failUpload);\n            }\n            else if (mode !== \"none\") {\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\n            }\n        },\n\n        _showTooltip: function(id, text) {\n            this._templating.getFileContainer(id).title = text;\n        },\n\n        _showCancelLink: function(id) {\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\n                this._templating.showCancel(id);\n            }\n        },\n\n        _itemError: function(code, name, item) {\n            var message = this._parent.prototype._itemError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _batchError: function(message) {\n            this._parent.prototype._batchError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _setupPastePrompt: function() {\n            var self = this;\n\n            this._options.callbacks.onPasteReceived = function() {\n                var message = self._options.paste.namePromptMessage,\n                    defaultVal = self._options.paste.defaultName;\n\n                return self._options.showPrompt(message, defaultVal);\n            };\n        },\n\n        _fileOrBlobRejected: function(id, name) {\n            this._totalFilesInBatch -= 1;\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            this._totalFilesInBatch = items.length;\n            this._filesInBatchAddedToUi = 0;\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\n        },\n\n        _maybeUpdateThumbnail: function(fileId) {\n            var thumbnailUrl = this._thumbnailUrls[fileId],\n                fileStatus = this.getUploads({id: fileId}).status;\n\n            if (fileStatus !== qq.status.DELETED &&\n                (thumbnailUrl ||\n                this._options.thumbnails.placeholders.waitUntilResponse ||\n                !qq.supportedFeatures.imagePreviews)) {\n\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\n                // if called with a null thumbnailUrl.\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\n\n            this._addToList(id, this.getName(id), true);\n            this._templating.hideSpinner(id);\n            this._templating.hideCancel(id);\n            this._markFileAsSuccessful(id);\n\n            return id;\n        },\n\n        _setSize: function(id, newSize) {\n            this._parent.prototype._setSize.apply(this, arguments);\n\n            this._templating.updateSize(id, this._formatSize(newSize));\n        },\n\n        _sessionRequestComplete: function() {\n            this._templating.addCacheToDom();\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateHtml,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListHtml,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListHtml = fileListNode.innerHTML;\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: qq.trimStr(tempTemplateEl.innerHTML),\n                fileTemplate: qq.trimStr(fileListHtml)\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateHtml = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.innerHTML = templateHtml.template;\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = qq.toElement(templateHtml.fileTemplate),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n"]}