{"version":3,"sources":["?","../client/js/jquery-plugin.js","../client/js/jquery-dnd.js","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/traditional/traditional.form.upload.handler.js","../client/js/traditional/traditional.xhr.upload.handler.js","../client/js/traditional/all-chunks-done.ajax.requester.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js"],"names":["global","$","$el","pluginOptions","init","options","xformedOpts","transformVariables","newUploaderInstance","getNewUploaderInstance","uploader","addCallbacks","params","uploaderType","pluginOption","namespace","charAt","toUpperCase","slice","toLowerCase","qq","FineUploader","dataStore","key","val","data","undefined","instanceToStore","option","optionVal","transformedOpts","callbacks","each","_options","prop","nonJqueryCallback","name","callbackEventTarget","exec","substring","originalArgs","Array","prototype","call","arguments","transformedArgs","nonJqueryCallbackRetVal","jqueryEventCallbackRetVal","idx","arg","push","maybeWrapInJquery","apply","this","triggerHandler","error","log","message","source","dest","xformed","arrayVals","element","inArray","isPlainObject","isArray","arrayVal","arrayObjDest","merge","isValidCommand","command","type","match","delegateCommand","xformedArgs","origArgs","retVal","transformedVal","nodeType","cloneNode","fn","fineUploader","optionsOrCommand","self","selfArgs","retVals","index","el","length","jQuery","rootDataKey","dropZoneElements","dnd","DragAndDrop","func","$callbackEl","args","jqueryHandlerResult","fineUploaderDnd","hide","style","display","attach","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","getFirstByClass","children","child","firstChild","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","getAttribute","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","Uint8Array","character","charCodeAt","level","console","isObject","variable","Object","toString","isFunction","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","newStr","nextIdxToReplace","strBefore","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","override","target","sourceFn","super_","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","Storage","getItem","bind","oldFunc","context","newArgs","concat","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","disposeSupport","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onBeforeStatusChange","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","debug","pauseUpload","removeFileRef","expunge","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","_customResumeDataStore","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setCustomResumeData","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","fileRecord","_onDeleteComplete","errorMessage","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadResult","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkResult","partIndex","onUploadChunkSuccess","onResume","customResumeData","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","isInProgress","getCustomResumeData","_getCustomResumeData","UploadHandlerController","_fileOrBlobRejected","_formatSize","sizeSymbols","max","toFixed","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_handleDeleteSuccess","_handleDeleteFailed","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","allowEmpty","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","omitDefaultParams","paramsInBody","requireSuccessJson","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","jsonPayload","resetOnStatus","recordsExpireIn","resuming","customKeys","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","normalizedResponse","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","onUploadChunkPromise","requestOverrides","uploadChunkData","overrides","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","onUploadPromise","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","isResumable","isAttemptingResume","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","localStorageId","forEach","_getMimeType","_getPersistableData","ceil","_markNotResumable","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","getIframeContentJson","doc","innerHtml","contentWindow","nodeValue","createForm","responseFromMessage","multipart","addChunkingSpecificParams","allChunksDoneRequester","AllChunksDoneAjaxRequester","createReadyStateChangedHandler","onUploadOrChunkComplete","getChunksCompleteParams","isErrorUploadResponse","parseResponse","sendChunksCompleteRequest","complete","setParamsAndGetEntityToSend","entityToSendParams","xhrOverrides","setUploadHeaders","headersOptions","headerOverrides","headerName","headerValue","extraHeaders","uploadChunkParams","toSend","promises","endpointHandler","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","relatedTarget","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","content","createDocumentFragment","map","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateHtml","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","update","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListHtml","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"jquery.fine-uploader.js","sourcesContent":[null,"/*globals jQuery, qq*/\n(function($) {\n    \"use strict\";\n    var $el,\n        pluginOptions = [\"uploaderType\", \"endpointType\"];\n\n    function init(options) {\n        var xformedOpts = transformVariables(options || {}),\n            newUploaderInstance = getNewUploaderInstance(xformedOpts);\n\n        uploader(newUploaderInstance);\n        addCallbacks(xformedOpts, newUploaderInstance);\n\n        return $el;\n    }\n\n    function getNewUploaderInstance(params) {\n        var uploaderType = pluginOption(\"uploaderType\"),\n            namespace = pluginOption(\"endpointType\");\n\n        // If the integrator has defined a specific type of uploader to load, use that, otherwise assume `qq.FineUploader`\n        if (uploaderType) {\n            // We can determine the correct constructor function to invoke by combining \"FineUploader\"\n            // with the upper camel cased `uploaderType` value.\n            uploaderType = uploaderType.charAt(0).toUpperCase() + uploaderType.slice(1).toLowerCase();\n\n            if (namespace) {\n                return new qq[namespace][\"FineUploader\" + uploaderType](params);\n            }\n\n            return new qq[\"FineUploader\" + uploaderType](params);\n        }\n        else {\n            if (namespace) {\n                return new qq[namespace].FineUploader(params);\n            }\n\n            return new qq.FineUploader(params);\n        }\n    }\n\n    function dataStore(key, val) {\n        var data = $el.data(\"fineuploader\");\n\n        if (val) {\n            if (data === undefined) {\n                data = {};\n            }\n            data[key] = val;\n            $el.data(\"fineuploader\", data);\n        }\n        else {\n            if (data === undefined) {\n                return null;\n            }\n            return data[key];\n        }\n    }\n\n    //the underlying Fine Uploader instance is stored in jQuery's data stored, associated with the element\n    // tied to this instance of the plug-in\n    function uploader(instanceToStore) {\n        return dataStore(\"uploader\", instanceToStore);\n    }\n\n    function pluginOption(option, optionVal) {\n        return dataStore(option, optionVal);\n    }\n\n    // Implement all callbacks defined in Fine Uploader as functions that trigger appropriately names events and\n    // return the result of executing the bound handler back to Fine Uploader\n    function addCallbacks(transformedOpts, newUploaderInstance) {\n        var callbacks = transformedOpts.callbacks = {};\n\n        $.each(newUploaderInstance._options.callbacks, function(prop, nonJqueryCallback) {\n            var name, callbackEventTarget;\n\n            name = /^on(\\w+)/.exec(prop)[1];\n            name = name.substring(0, 1).toLowerCase() + name.substring(1);\n            callbackEventTarget = $el;\n\n            callbacks[prop] = function() {\n                var originalArgs = Array.prototype.slice.call(arguments),\n                    transformedArgs = [],\n                    nonJqueryCallbackRetVal, jqueryEventCallbackRetVal;\n\n                $.each(originalArgs, function(idx, arg) {\n                    transformedArgs.push(maybeWrapInJquery(arg));\n                });\n\n                nonJqueryCallbackRetVal = nonJqueryCallback.apply(this, originalArgs);\n\n                try {\n                    jqueryEventCallbackRetVal = callbackEventTarget.triggerHandler(name, transformedArgs);\n                }\n                catch (error) {\n                    qq.log(\"Caught error in Fine Uploader jQuery event handler: \" + error.message, \"error\");\n                }\n\n                /*jshint -W116*/\n                if (nonJqueryCallbackRetVal != null) {\n                    return nonJqueryCallbackRetVal;\n                }\n                return jqueryEventCallbackRetVal;\n            };\n        });\n\n        newUploaderInstance._options.callbacks = callbacks;\n    }\n\n    //transform jQuery objects into HTMLElements, and pass along all other option properties\n    function transformVariables(source, dest) {\n        var xformed, arrayVals;\n\n        if (dest === undefined) {\n            if (source.uploaderType !== \"basic\") {\n                xformed = { element: $el[0] };\n            }\n            else {\n                xformed = {};\n            }\n        }\n        else {\n            xformed = dest;\n        }\n\n        $.each(source, function(prop, val) {\n            if ($.inArray(prop, pluginOptions) >= 0) {\n                pluginOption(prop, val);\n            }\n            else if (val instanceof $) {\n                xformed[prop] = val[0];\n            }\n            else if ($.isPlainObject(val)) {\n                xformed[prop] = {};\n                transformVariables(val, xformed[prop]);\n            }\n            else if ($.isArray(val)) {\n                arrayVals = [];\n                $.each(val, function(idx, arrayVal) {\n                    var arrayObjDest = {};\n\n                    if (arrayVal instanceof $) {\n                        $.merge(arrayVals, arrayVal);\n                    }\n                    else if ($.isPlainObject(arrayVal)) {\n                        transformVariables(arrayVal, arrayObjDest);\n                        arrayVals.push(arrayObjDest);\n                    }\n                    else {\n                        arrayVals.push(arrayVal);\n                    }\n                });\n                xformed[prop] = arrayVals;\n            }\n            else {\n                xformed[prop] = val;\n            }\n        });\n\n        if (dest === undefined) {\n            return xformed;\n        }\n    }\n\n    function isValidCommand(command) {\n        return $.type(command) === \"string\" &&\n            !command.match(/^_/) && //enforce private methods convention\n            uploader()[command] !== undefined;\n    }\n\n    // Assuming we have already verified that this is a valid command, call the associated function in the underlying\n    // Fine Uploader instance (passing along the arguments from the caller) and return the result of the call back to the caller\n    function delegateCommand(command) {\n        var xformedArgs = [],\n            origArgs = Array.prototype.slice.call(arguments, 1),\n            retVal;\n\n        transformVariables(origArgs, xformedArgs);\n\n        retVal = uploader()[command].apply(uploader(), xformedArgs);\n\n        return maybeWrapInJquery(retVal);\n    }\n\n    // If the value is an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\n    function maybeWrapInJquery(val) {\n        var transformedVal = val;\n\n        // If the command is returning an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\n        /*jshint -W116*/\n        if (val != null && typeof val === \"object\" &&\n           (val.nodeType === 1 || val.nodeType === 9) && val.cloneNode) {\n\n            transformedVal = $(val);\n        }\n\n        return transformedVal;\n    }\n\n    $.fn.fineUploader = function(optionsOrCommand) {\n        var self = this, selfArgs = arguments, retVals = [];\n\n        this.each(function(index, el) {\n            $el = $(el);\n\n            if (uploader() && isValidCommand(optionsOrCommand)) {\n                retVals.push(delegateCommand.apply(self, selfArgs));\n\n                if (self.length === 1) {\n                    return false;\n                }\n            }\n            else if (typeof optionsOrCommand === \"object\" || !optionsOrCommand) {\n                init.apply(self, selfArgs);\n            }\n            else {\n                $.error(\"Method \" +  optionsOrCommand + \" does not exist on jQuery.fineUploader\");\n            }\n        });\n\n        if (retVals.length === 1) {\n            return retVals[0];\n        }\n        else if (retVals.length > 1) {\n            return retVals;\n        }\n\n        return this;\n    };\n\n}(jQuery));\n","/*globals jQuery, qq*/\n(function($) {\n    \"use strict\";\n    var rootDataKey = \"fineUploaderDnd\",\n        $el;\n\n    function init(options) {\n        if (!options) {\n            options = {};\n        }\n\n        options.dropZoneElements = [$el];\n        var xformedOpts = transformVariables(options);\n        addCallbacks(xformedOpts);\n        dnd(new qq.DragAndDrop(xformedOpts));\n\n        return $el;\n    }\n\n    function dataStore(key, val) {\n        var data = $el.data(rootDataKey);\n\n        if (val) {\n            if (data === undefined) {\n                data = {};\n            }\n            data[key] = val;\n            $el.data(rootDataKey, data);\n        }\n        else {\n            if (data === undefined) {\n                return null;\n            }\n            return data[key];\n        }\n    }\n\n    function dnd(instanceToStore) {\n        return dataStore(\"dndInstance\", instanceToStore);\n    }\n\n    function addCallbacks(transformedOpts) {\n        var callbacks = transformedOpts.callbacks = {};\n\n        $.each(new qq.DragAndDrop.callbacks(), function(prop, func) {\n            var name = prop,\n                $callbackEl;\n\n            $callbackEl = $el;\n\n            callbacks[prop] = function() {\n                var args = Array.prototype.slice.call(arguments),\n                    jqueryHandlerResult = $callbackEl.triggerHandler(name, args);\n\n                return jqueryHandlerResult;\n            };\n        });\n    }\n\n    //transform jQuery objects into HTMLElements, and pass along all other option properties\n    function transformVariables(source, dest) {\n        var xformed, arrayVals;\n\n        if (dest === undefined) {\n            xformed = {};\n        }\n        else {\n            xformed = dest;\n        }\n\n        $.each(source, function(prop, val) {\n            if (val instanceof $) {\n                xformed[prop] = val[0];\n            }\n            else if ($.isPlainObject(val)) {\n                xformed[prop] = {};\n                transformVariables(val, xformed[prop]);\n            }\n            else if ($.isArray(val)) {\n                arrayVals = [];\n                $.each(val, function(idx, arrayVal) {\n                    if (arrayVal instanceof $) {\n                        $.merge(arrayVals, arrayVal);\n                    }\n                    else {\n                        arrayVals.push(arrayVal);\n                    }\n                });\n                xformed[prop] = arrayVals;\n            }\n            else {\n                xformed[prop] = val;\n            }\n        });\n\n        if (dest === undefined) {\n            return xformed;\n        }\n    }\n\n    function isValidCommand(command) {\n        return $.type(command) === \"string\" &&\n            command === \"dispose\" &&\n            dnd()[command] !== undefined;\n    }\n\n    function delegateCommand(command) {\n        var xformedArgs = [], origArgs = Array.prototype.slice.call(arguments, 1);\n        transformVariables(origArgs, xformedArgs);\n        return dnd()[command].apply(dnd(), xformedArgs);\n    }\n\n    $.fn.fineUploaderDnd = function(optionsOrCommand) {\n        var self = this, selfArgs = arguments, retVals = [];\n\n        this.each(function(index, el) {\n            $el = $(el);\n\n            if (dnd() && isValidCommand(optionsOrCommand)) {\n                retVals.push(delegateCommand.apply(self, selfArgs));\n\n                if (self.length === 1) {\n                    return false;\n                }\n            }\n            else if (typeof optionsOrCommand === \"object\" || !optionsOrCommand) {\n                init.apply(self, selfArgs);\n            }\n            else {\n                $.error(\"Method \" +  optionsOrCommand + \" does not exist in Fine Uploader's DnD module.\");\n            }\n        });\n\n        if (retVals.length === 1) {\n            return retVals[0];\n        }\n        else if (retVals.length > 1) {\n            return retVals;\n        }\n\n        return this;\n    };\n\n}(jQuery));\n","/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\nqq.version = \"5.16.0-alpha.8\";\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\n    function isChrome21OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         * - onBeforeStatusChange(fileId): callback that is executed before the status change is broadcast\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            spec.onBeforeStatusChange && spec.onBeforeStatusChange(id);\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\n/**\n * Defines the public API for FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.basePublicApi = {\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\n        addBlobs: function(blobDataOrArray, params, endpoint) {\n            this.addFiles(blobDataOrArray, params, endpoint);\n        },\n\n        addInitialFiles: function(cannedFileList) {\n            var self = this;\n\n            qq.each(cannedFileList, function(index, cannedFile) {\n                self._addCannedFile(cannedFile);\n            });\n        },\n\n        addFiles: function(data, params, endpoint) {\n            this._maybeHandleIos8SafariWorkaround();\n\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\n\n                processBlob = qq.bind(function(blob) {\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processBlobData = qq.bind(function(blobData) {\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\n                }, this),\n\n                processCanvas = qq.bind(function(canvas) {\n                    var blob = qq.canvasToBlob(canvas);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName + \".png\"\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processCanvasData = qq.bind(function(canvasData) {\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: canvasData.name\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processFileOrInput = qq.bind(function(fileOrInput) {\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\n                        var files = Array.prototype.slice.call(fileOrInput.files),\n                            self = this;\n\n                        qq.each(files, function(idx, file) {\n                            self._handleNewFile(file, batchId, verifiedFiles);\n                        });\n                    }\n                    else {\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\n                    }\n                }, this),\n\n                normalizeData = function() {\n                    if (qq.isFileList(data)) {\n                        data = Array.prototype.slice.call(data);\n                    }\n                    data = [].concat(data);\n                },\n\n                self = this,\n                verifiedFiles = [];\n\n            this._currentBatchId = batchId;\n\n            if (data) {\n                normalizeData();\n\n                qq.each(data, function(idx, fileContainer) {\n                    if (qq.isFileOrInput(fileContainer)) {\n                        processFileOrInput(fileContainer);\n                    }\n                    else if (qq.isBlob(fileContainer)) {\n                        processBlob(fileContainer);\n                    }\n                    else if (qq.isObject(fileContainer)) {\n                        if (fileContainer.blob && fileContainer.name) {\n                            processBlobData(fileContainer);\n                        }\n                        else if (fileContainer.canvas && fileContainer.name) {\n                            processCanvasData(fileContainer);\n                        }\n                    }\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\n                        processCanvas(fileContainer);\n                    }\n                    else {\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\n                    }\n                });\n\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\n            }\n        },\n\n        cancel: function(id) {\n            this._handler.cancel(id);\n        },\n\n        cancelAll: function() {\n            var storedIdsCopy = [],\n                self = this;\n\n            qq.extend(storedIdsCopy, this._storedIds);\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\n                self.cancel(storedFileId);\n            });\n\n            this._handler.cancelAll();\n        },\n\n        clearStoredFiles: function() {\n            this._storedIds = [];\n        },\n\n        continueUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            if (uploadData.status === qq.status.PAUSED) {\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\n                this._uploadFile(id);\n                return true;\n            }\n            else {\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        deleteFile: function(id) {\n            return this._onSubmitDelete(id);\n        },\n\n        // TODO document?\n        doesExist: function(fileOrBlobId) {\n            return this._handler.isValid(fileOrBlobId);\n        },\n\n        // Generate a variable size thumbnail on an img or canvas,\n        // returning a promise that is fulfilled when the attempt completes.\n        // Thumbnail can either be based off of a URL for an image returned\n        // by the server in the upload response, or the associated `Blob`.\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\n            var promiseToReturn = new qq.Promise(),\n                fileOrUrl, options;\n\n            if (this._imageGenerator) {\n                fileOrUrl = this._thumbnailUrls[fileId];\n                options = {\n                    customResizeFunction: customResizeFunction,\n                    maxSize: maxSize > 0 ? maxSize : null,\n                    scale: maxSize > 0\n                };\n\n                // If client-side preview generation is possible\n                // and we are not specifically looking for the image URl returned by the server...\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\n                    fileOrUrl = this.getFile(fileId);\n                }\n\n                /* jshint eqeqeq:false,eqnull:true */\n                if (fileOrUrl == null) {\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\n                }\n                else {\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\n                        function success(modifiedContainer) {\n                            promiseToReturn.success(modifiedContainer);\n                        },\n\n                        function failure(container, reason) {\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\n                        }\n                    );\n                }\n            }\n            else {\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\n            }\n\n            return promiseToReturn;\n        },\n\n        getButton: function(fileId) {\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\n        },\n\n        getEndpoint: function(fileId) {\n            return this._endpointStore.get(fileId);\n        },\n\n        getFile: function(fileOrBlobId) {\n            return this._handler.getFile(fileOrBlobId) || null;\n        },\n\n        getInProgress: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED\n                ]\n            }).length;\n        },\n\n        getName: function(id) {\n            return this._uploadData.retrieve({id: id}).name;\n        },\n\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\n        getParentId: function(id) {\n            var uploadDataEntry = this.getUploads({id: id}),\n                parentId = null;\n\n            if (uploadDataEntry) {\n                if (uploadDataEntry.parentId !== undefined) {\n                    parentId = uploadDataEntry.parentId;\n                }\n            }\n\n            return parentId;\n        },\n\n        getResumableFilesData: function() {\n            return this._handler.getResumableFilesData();\n        },\n\n        getSize: function(id) {\n            return this._uploadData.retrieve({id: id}).size;\n        },\n\n        getNetUploads: function() {\n            return this._netUploaded;\n        },\n\n        getRemainingAllowedItems: function() {\n            var allowedItems = this._currentItemLimit;\n\n            if (allowedItems > 0) {\n                return allowedItems - this._netUploadedOrQueued;\n            }\n\n            return null;\n        },\n\n        getUploads: function(optionalFilter) {\n            return this._uploadData.retrieve(optionalFilter);\n        },\n\n        getUuid: function(id) {\n            return this._uploadData.retrieve({id: id}).uuid;\n        },\n\n        log: function(str, level) {\n            if (this._options.debug && (!level || level === \"info\")) {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\n            }\n            else if (level && level !== \"info\") {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\n\n            }\n        },\n\n        pauseUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            // Pause only really makes sense if the file is uploading or retrying\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\n                if (this._handler.pause(id)) {\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\n                    return true;\n                }\n                else {\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\n                }\n            }\n            else {\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        removeFileRef: function(id) {\n            this._handler.expunge(id);\n        },\n\n        reset: function() {\n            this.log(\"Resetting uploader...\");\n\n            this._handler.reset();\n            this._storedIds = [];\n            this._autoRetries = [];\n            this._retryTimeouts = [];\n            this._preventRetries = [];\n            this._thumbnailUrls = [];\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n\n            this._paramsStore.reset();\n            this._endpointStore.reset();\n            this._netUploadedOrQueued = 0;\n            this._netUploaded = 0;\n            this._uploadData.reset();\n            this._buttonIdsForFileIds = [];\n\n            this._pasteHandler && this._pasteHandler.reset();\n            this._options.session.refreshOnReset && this._refreshSessionData();\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n\n            this._totalProgress && this._totalProgress.reset();\n\n            this._customResumeDataStore.reset();\n        },\n\n        retry: function(id) {\n            return this._manualRetry(id);\n        },\n\n        scaleImage: function(id, specs) {\n            var self = this;\n\n            return qq.Scaler.prototype.scaleImage(id, specs, {\n                log: qq.bind(self.log, self),\n                getFile: qq.bind(self.getFile, self),\n                uploadData: self._uploadData\n            });\n        },\n\n        setCustomHeaders: function(headers, id) {\n            this._customHeadersStore.set(headers, id);\n        },\n\n        setCustomResumeData: function(id, data) {\n            this._customResumeDataStore.set(data, id);\n        },\n\n        setDeleteFileCustomHeaders: function(headers, id) {\n            this._deleteFileCustomHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileEndpoint: function(endpoint, id) {\n            this._deleteFileEndpointStore.set(endpoint, id);\n        },\n\n        setDeleteFileParams: function(params, id) {\n            this._deleteFileParamsStore.set(params, id);\n        },\n\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\n        setEndpoint: function(endpoint, id) {\n            this._endpointStore.set(endpoint, id);\n        },\n\n        setForm: function(elementOrId) {\n            this._updateFormSupportAndParams(elementOrId);\n        },\n\n        setItemLimit: function(newItemLimit) {\n            this._currentItemLimit = newItemLimit;\n        },\n\n        setName: function(id, newName) {\n            this._uploadData.updateName(id, newName);\n        },\n\n        setParams: function(params, id) {\n            this._paramsStore.set(params, id);\n        },\n\n        setUuid: function(id, newUuid) {\n            return this._uploadData.uuidChanged(id, newUuid);\n        },\n\n        /**\n         * Expose the internal status of a file id to the public api for manual state changes\n         * @public\n         *\n         * @param {Number} id,\n         * @param {String} newStatus\n         *\n         * @todo Implement the remaining methods\n         */\n        setStatus: function(id, newStatus) {\n            var fileRecord = this.getUploads({id: id});\n            if (!fileRecord) {\n                throw new qq.Error(id + \" is not a valid file ID.\");\n            }\n\n            switch (newStatus) {\n                case qq.status.DELETED:\n                    this._onDeleteComplete(id, null, false);\n                    break;\n                case qq.status.DELETE_FAILED:\n                    this._onDeleteComplete(id, null, true);\n                    break;\n                default:\n                    var errorMessage = \"Method setStatus called on '\" + name + \"' not implemented yet for \" + newStatus;\n                    this.log(errorMessage);\n                    throw new qq.Error(errorMessage);\n            }\n        },\n\n        uploadStoredFiles: function() {\n            if (this._storedIds.length === 0) {\n                this._itemError(\"noFilesError\");\n            }\n            else {\n                this._uploadStoredFiles();\n            }\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploaderBasic mode.\n     */\n    qq.basePrivateApi = {\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\n        _addCannedFile: function(sessionData) {\n            var self = this;\n\n            return this._uploadData.addFile({\n                uuid: sessionData.uuid,\n                name: sessionData.name,\n                size: sessionData.size,\n                status: qq.status.UPLOAD_SUCCESSFUL,\n                onBeforeStatusChange: function(id) {\n                    sessionData.deleteFileEndpoint && self.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\n                    sessionData.deleteFileParams && self.setDeleteFileParams(sessionData.deleteFileParams, id);\n\n                    if (sessionData.thumbnailUrl) {\n                        self._thumbnailUrls[id] = sessionData.thumbnailUrl;\n                    }\n\n                    self._netUploaded++;\n                    self._netUploadedOrQueued++;\n                }\n            });\n        },\n\n        _annotateWithButtonId: function(file, associatedInput) {\n            if (qq.isFile(file)) {\n                file.qqButtonId = this._getButtonId(associatedInput);\n            }\n        },\n\n        _batchError: function(message) {\n            this._options.callbacks.onError(null, null, message, undefined);\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return new qq.DeleteFileAjaxRequester({\n                method: this._options.deleteFile.method.toUpperCase(),\n                maxConnections: this._options.maxConnections,\n                uuidParamName: this._options.request.uuidName,\n                customHeaders: this._deleteFileCustomHeadersStore,\n                paramsStore: this._deleteFileParamsStore,\n                endpointStore: this._deleteFileEndpointStore,\n                cors: this._options.cors,\n                log: qq.bind(self.log, self),\n                onDelete: function(id) {\n                    self._onDelete(id);\n                    self._options.callbacks.onDelete(id);\n                },\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                }\n\n            });\n        },\n\n        _createPasteHandler: function() {\n            var self = this;\n\n            return new qq.PasteSupport({\n                targetElement: this._options.paste.targetElement,\n                callbacks: {\n                    log: qq.bind(self.log, self),\n                    pasteReceived: function(blob) {\n                        self._handleCheckedCallback({\n                            name: \"onPasteReceived\",\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\n                            identifier: \"pasted image\"\n                        });\n                    }\n                }\n            });\n        },\n\n        _createStore: function(initialValue, _readOnlyValues_) {\n            var store = {},\n                catchall = initialValue,\n                perIdReadOnlyValues = {},\n                readOnlyValues = _readOnlyValues_,\n                copy = function(orig) {\n                    if (qq.isObject(orig)) {\n                        return qq.extend({}, orig);\n                    }\n                    return orig;\n                },\n                getReadOnlyValues = function() {\n                    if (qq.isFunction(readOnlyValues)) {\n                        return readOnlyValues();\n                    }\n                    return readOnlyValues;\n                },\n                includeReadOnlyValues = function(id, existing) {\n                    if (readOnlyValues && qq.isObject(existing)) {\n                        qq.extend(existing, getReadOnlyValues());\n                    }\n\n                    if (perIdReadOnlyValues[id]) {\n                        qq.extend(existing, perIdReadOnlyValues[id]);\n                    }\n                };\n\n            return {\n                set: function(val, id) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id == null) {\n                        store = {};\n                        catchall = copy(val);\n                    }\n                    else {\n                        store[id] = copy(val);\n                    }\n                },\n\n                get: function(id) {\n                    var values;\n\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id != null && store[id]) {\n                        values = store[id];\n                    }\n                    else {\n                        values = copy(catchall);\n                    }\n\n                    includeReadOnlyValues(id, values);\n\n                    return copy(values);\n                },\n\n                addReadOnly: function(id, values) {\n                    // Only applicable to Object stores\n                    if (qq.isObject(store)) {\n                        // If null ID, apply readonly values to all files\n                        if (id === null) {\n                            if (qq.isFunction(values)) {\n                                readOnlyValues = values;\n                            }\n                            else {\n                                readOnlyValues = readOnlyValues || {};\n                                qq.extend(readOnlyValues, values);\n                            }\n                        }\n                        else {\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\n                            qq.extend(perIdReadOnlyValues[id], values);\n                        }\n                    }\n                },\n\n                remove: function(fileId) {\n                    return delete store[fileId];\n                },\n\n                reset: function() {\n                    store = {};\n                    perIdReadOnlyValues = {};\n                    catchall = initialValue;\n                }\n            };\n        },\n\n        _createUploadDataTracker: function() {\n            var self = this;\n\n            return new qq.UploadData({\n                getName: function(id) {\n                    return self.getName(id);\n                },\n                getUuid: function(id) {\n                    return self.getUuid(id);\n                },\n                getSize: function(id) {\n                    return self.getSize(id);\n                },\n                onStatusChange: function(id, oldStatus, newStatus) {\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\n                    self._maybeAllComplete(id, newStatus);\n\n                    if (self._totalProgress) {\n                        setTimeout(function() {\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\n                        }, 0);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Generate a tracked upload button.\n         *\n         * @param spec Object containing a required `element` property\n         * along with optional `multiple`, `accept`, and `folders`.\n         * @returns {qq.UploadButton}\n         * @private\n         */\n        _createUploadButton: function(spec) {\n            var self = this,\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\n                button;\n\n            function allowMultiple() {\n                if (qq.supportedFeatures.ajaxUploading) {\n                    // Workaround for bug in iOS7+ (see #1039)\n                    if (self._options.workarounds.iosEmptyVideos &&\n                        qq.ios() &&\n                        !qq.ios6() &&\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\n\n                        return false;\n                    }\n\n                    if (spec.multiple === undefined) {\n                        return self._options.multiple;\n                    }\n\n                    return spec.multiple;\n                }\n\n                return false;\n            }\n\n            button = new qq.UploadButton({\n                acceptFiles: acceptFiles,\n                element: spec.element,\n                focusClass: this._options.classes.buttonFocus,\n                folders: spec.folders,\n                hoverClass: this._options.classes.buttonHover,\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\n                multiple: allowMultiple(),\n                name: this._options.request.inputName,\n                onChange: function(input) {\n                    self._onInputChange(input);\n                },\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\n            });\n\n            this._disposeSupport.addDisposer(function() {\n                button.dispose();\n            });\n\n            self._buttons.push(button);\n\n            return button;\n        },\n\n        _createUploadHandler: function(additionalOptions, namespace) {\n            var self = this,\n                lastOnProgress = {},\n                options = {\n                    debug: this._options.debug,\n                    maxConnections: this._options.maxConnections,\n                    cors: this._options.cors,\n                    paramsStore: this._paramsStore,\n                    endpointStore: this._endpointStore,\n                    chunking: this._options.chunking,\n                    resume: this._options.resume,\n                    blobs: this._options.blobs,\n                    log: qq.bind(self.log, self),\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\n                    onProgress: function(id, name, loaded, total) {\n                        if (loaded < 0 || total < 0) {\n                            return;\n                        }\n\n                        if (lastOnProgress[id]) {\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\n                                self._onProgress(id, name, loaded, total);\n                                self._options.callbacks.onProgress(id, name, loaded, total);\n                            }\n                        }\n                        else {\n                            self._onProgress(id, name, loaded, total);\n                            self._options.callbacks.onProgress(id, name, loaded, total);\n                        }\n\n                        lastOnProgress[id] = {loaded: loaded, total: total};\n\n                    },\n                    onComplete: function(id, name, result, xhr) {\n                        delete lastOnProgress[id];\n\n                        var status = self.getUploads({id: id}).status,\n                            retVal;\n\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\n                        // invoked by the browser multiple times for the same XHR instance with the same state\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\n                        // done this.\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\n                            return;\n                        }\n\n                        retVal = self._onComplete(id, name, result, xhr);\n\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\n                        // until the promise has been fulfilled.\n                        if (retVal instanceof  qq.Promise) {\n                            retVal.done(function() {\n                                self._options.callbacks.onComplete(id, name, result, xhr);\n                            });\n                        }\n                        else {\n                            self._options.callbacks.onComplete(id, name, result, xhr);\n                        }\n                    },\n                    onCancel: function(id, name, cancelFinalizationEffort) {\n                        var promise = new qq.Promise();\n\n                        self._handleCheckedCallback({\n                            name: \"onCancel\",\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\n                            onFailure: promise.failure,\n                            onSuccess: function() {\n                                cancelFinalizationEffort.then(function() {\n                                    self._onCancel(id, name);\n                                });\n\n                                promise.success();\n                            },\n                            identifier: id\n                        });\n\n                        return promise;\n                    },\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\n                    onUpload: function(id, name) {\n                        self._onUpload(id, name);\n                        var onUploadResult = self._options.callbacks.onUpload(id, name);\n\n                        if (qq.isGenericPromise(onUploadResult)) {\n                            self.log(qq.format(\"onUpload for {} returned a Promise - waiting for resolution.\", id));\n                            return onUploadResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunk: function(id, name, chunkData) {\n                        self._onUploadChunk(id, chunkData);\n                        var onUploadChunkResult = self._options.callbacks.onUploadChunk(id, name, chunkData);\n\n                        if (qq.isGenericPromise(onUploadChunkResult)) {\n                            self.log(qq.format(\"onUploadChunk for {}.{} returned a Promise - waiting for resolution.\", id, chunkData.partIndex));\n                            return onUploadChunkResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\n                    },\n                    onResume: function(id, name, chunkData, customResumeData) {\n                        return self._options.callbacks.onResume(id, name, chunkData, customResumeData);\n                    },\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\n                        return self._onAutoRetry.apply(self, arguments);\n                    },\n                    onUuidChanged: function(id, newUuid) {\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\n                        self.setUuid(id, newUuid);\n                    },\n                    getName: qq.bind(self.getName, self),\n                    getUuid: qq.bind(self.getUuid, self),\n                    getSize: qq.bind(self.getSize, self),\n                    setSize: qq.bind(self._setSize, self),\n                    getDataByUuid: function(uuid) {\n                        return self.getUploads({uuid: uuid});\n                    },\n                    isQueued: function(id) {\n                        var status = self.getUploads({id: id}).status;\n                        return status === qq.status.QUEUED ||\n                            status === qq.status.SUBMITTED ||\n                            status === qq.status.UPLOAD_RETRYING ||\n                            status === qq.status.PAUSED;\n                    },\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\n                    getIdsInBatch: self._uploadData.getIdsInBatch,\n                    isInProgress: function(id) {\n                        return self.getUploads({id: id}).status === qq.status.UPLOADING;\n                    },\n                    getCustomResumeData: qq.bind(self._getCustomResumeData, self)\n                };\n\n            qq.each(this._options.request, function(prop, val) {\n                options[prop] = val;\n            });\n\n            options.customHeaders = this._customHeadersStore;\n\n            if (additionalOptions) {\n                qq.each(additionalOptions, function(key, val) {\n                    options[key] = val;\n                });\n            }\n\n            return new qq.UploadHandlerController(options, namespace);\n        },\n\n        _fileOrBlobRejected: function(id) {\n            this._netUploadedOrQueued--;\n            this._uploadData.setStatus(id, qq.status.REJECTED);\n        },\n\n        _formatSize: function(bytes) {\n            if (bytes === 0) {\n                return bytes + this._options.text.sizeSymbols[0];\n            }\n            var i = -1;\n            do {\n                bytes = bytes / 1000;\n                i++;\n            } while (bytes > 999);\n\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\n        },\n\n        // Creates an internal object that tracks various properties of each extra button,\n        // and then actually creates the extra button.\n        _generateExtraButtonSpecs: function() {\n            var self = this;\n\n            this._extraButtonSpecs = {};\n\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\n                var multiple = extraButtonOptionEntry.multiple,\n                    validation = qq.extend({}, self._options.validation, true),\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\n\n                if (multiple === undefined) {\n                    multiple = self._options.multiple;\n                }\n\n                if (extraButtonSpec.validation) {\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\n                }\n\n                qq.extend(extraButtonSpec, {\n                    multiple: multiple,\n                    validation: validation\n                }, true);\n\n                self._initExtraButton(extraButtonSpec);\n            });\n        },\n\n        _getButton: function(buttonId) {\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\n\n            if (extraButtonsSpec) {\n                return extraButtonsSpec.element;\n            }\n            else if (buttonId === this._defaultButtonId) {\n                return this._options.button;\n            }\n        },\n\n        /**\n         * Gets the internally used tracking ID for a button.\n         *\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\n         * @private\n         */\n        _getButtonId: function(buttonOrFileInputOrFile) {\n            var inputs, fileInput,\n                fileBlobOrInput = buttonOrFileInputOrFile;\n\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\n            }\n\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\n                if (qq.isFile(fileBlobOrInput)) {\n                    return fileBlobOrInput.qqButtonId;\n                }\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\n\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\n\n                qq.each(inputs, function(idx, input) {\n                    if (input.getAttribute(\"type\") === \"file\") {\n                        fileInput = input;\n                        return false;\n                    }\n                });\n\n                if (fileInput) {\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n            }\n        },\n\n        _getCustomResumeData: function(fileId) {\n            return this._customResumeDataStore.get(fileId);\n        },\n\n        _getNotFinished: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED,\n                    qq.status.SUBMITTING,\n                    qq.status.SUBMITTED,\n                    qq.status.PAUSED\n                ]\n            }).length;\n        },\n\n        // Get the validation options for this button.  Could be the default validation option\n        // or a specific one assigned to this particular button.\n        _getValidationBase: function(buttonId) {\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\n\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\n        },\n\n        _getValidationDescriptor: function(fileWrapper) {\n            if (fileWrapper.file instanceof qq.BlobProxy) {\n                return {\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\n                    size: fileWrapper.file.referenceBlob.size\n                };\n            }\n\n            return {\n                name: this.getUploads({id: fileWrapper.id}).name,\n                size: this.getUploads({id: fileWrapper.id}).size\n            };\n        },\n\n        _getValidationDescriptors: function(fileWrappers) {\n            var self = this,\n                fileDescriptors = [];\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\n            });\n\n            return fileDescriptors;\n        },\n\n        // Allows camera access on either the default or an extra button for iOS devices.\n        _handleCameraAccess: function() {\n            if (this._options.camera.ios && qq.ios()) {\n                var acceptIosCamera = \"image/*;capture=camera\",\n                    button = this._options.camera.button,\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\n                    optionRoot = this._options;\n\n                // If we are not targeting the default button, it is an \"extra\" button\n                if (buttonId && buttonId !== this._defaultButtonId) {\n                    optionRoot = this._extraButtonSpecs[buttonId];\n                }\n\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\n                optionRoot.multiple = false;\n\n                // update the options\n                if (optionRoot.validation.acceptFiles === null) {\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\n                }\n                else {\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\n                }\n\n                // update the already-created button\n                qq.each(this._buttons, function(idx, button) {\n                    if (button.getButtonId() === buttonId) {\n                        button.setMultiple(optionRoot.multiple);\n                        button.setAcceptFiles(optionRoot.acceptFiles);\n\n                        return false;\n                    }\n                });\n            }\n        },\n\n        _handleCheckedCallback: function(details) {\n            var self = this,\n                callbackRetVal = details.callback();\n\n            if (qq.isGenericPromise(callbackRetVal)) {\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\n                return callbackRetVal.then(\n                    function(successParam) {\n                        self.log(details.name + \" promise success for \" + details.identifier);\n                        details.onSuccess(successParam);\n                    },\n                    function() {\n                        if (details.onFailure) {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                            details.onFailure();\n                        }\n                        else {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                        }\n                    });\n            }\n\n            if (callbackRetVal !== false) {\n                details.onSuccess(callbackRetVal);\n            }\n            else {\n                if (details.onFailure) {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\n                    details.onFailure();\n                }\n                else {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\n                }\n            }\n\n            return callbackRetVal;\n        },\n\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\n            var self = this,\n                uuid = qq.getUniqueId(),\n                size = -1,\n                name = qq.getFilename(file),\n                actualFile = file.blob || file,\n                handler = this._customNewFileHandler ?\n                    this._customNewFileHandler :\n                    qq.bind(self._handleNewFileGeneric, self);\n\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\n                size = actualFile.size;\n            }\n\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\n                uploadData: self._uploadData,\n                paramsStore: self._paramsStore,\n                addFileToHandler: function(id, file) {\n                    self._handler.add(id, file);\n                    self._netUploadedOrQueued++;\n                    self._trackButton(id);\n                }\n            });\n        },\n\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\n\n            this._handler.add(id, file);\n            this._trackButton(id);\n\n            this._netUploadedOrQueued++;\n\n            fileList.push({id: id, file: file});\n        },\n\n        _handlePasteSuccess: function(blob, extSuppliedName) {\n            var extension = blob.type.split(\"/\")[1],\n                name = extSuppliedName;\n\n            /*jshint eqeqeq: true, eqnull: true*/\n            if (name == null) {\n                name = this._options.paste.defaultName;\n            }\n\n            name += \".\" + extension;\n\n            this.addFiles({\n                name: name,\n                blob: blob\n            });\n        },\n\n        _handleDeleteSuccess: function(id) {\n            if (this.getUploads({id: id}).status !== qq.status.DELETED) {\n                var name = this.getName(id);\n\n                this._netUploadedOrQueued--;\n                this._netUploaded--;\n                this._handler.expunge(id);\n                this._uploadData.setStatus(id, qq.status.DELETED);\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\n            }\n        },\n\n        _handleDeleteFailed: function(id, xhrOrXdr) {\n            var name = this.getName(id);\n\n            this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\n            this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\n\n            // Check first if xhrOrXdr is actually passed or valid\n            // For error reporting, we only have access to the response status if this is not\n            // an `XDomainRequest`.\n            if (!xhrOrXdr || xhrOrXdr.withCredentials === undefined) {\n                this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\n            }\n            else {\n                this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\n            }\n        },\n\n        // Creates an extra button element\n        _initExtraButton: function(spec) {\n            var button = this._createUploadButton({\n                accept: spec.validation.acceptFiles,\n                allowedExtensions: spec.validation.allowedExtensions,\n                element: spec.element,\n                folders: spec.folders,\n                multiple: spec.multiple,\n                title: spec.fileInputTitle\n            });\n\n            this._extraButtonSpecs[button.getButtonId()] = spec;\n        },\n\n        _initFormSupportAndParams: function() {\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n            );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore = this._createStore(\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\n                );\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\n                }\n            }\n            else {\n                this._paramsStore = this._createStore(this._options.request.params);\n            }\n        },\n\n        _isDeletePossible: function() {\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\n                return false;\n            }\n\n            if (this._options.cors.expected) {\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\n                    return true;\n                }\n\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            return true;\n        },\n\n        _isAllowedExtension: function(allowed, fileName) {\n            var valid = false;\n\n            if (!allowed.length) {\n                return true;\n            }\n\n            qq.each(allowed, function(idx, allowedExt) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExt)) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\n\n                    if (fileName.match(extRegex) != null) {\n                        valid = true;\n                        return false;\n                    }\n                }\n            });\n\n            return valid;\n        },\n\n        /**\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\n         *\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\n         * @param maybeNameOrNames names of the items that have failed, if applicable\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\n         * @private\n         */\n        _itemError: function(code, maybeNameOrNames, item) {\n            var message = this._options.messages[code],\n                allowedExtensions = [],\n                names = [].concat(maybeNameOrNames),\n                name = names[0],\n                buttonId = this._getButtonId(item),\n                validationBase = this._getValidationBase(buttonId),\n                extensionsForMessage, placeholderMatch;\n\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExtension)) {\n                    allowedExtensions.push(allowedExtension);\n                }\n            });\n\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\n\n            r(\"{file}\", this._options.formatFileName(name));\n            r(\"{extensions}\", extensionsForMessage);\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\n\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\n            if (placeholderMatch !== null) {\n                qq.each(placeholderMatch, function(idx, placeholder) {\n                    r(placeholder, names[idx]);\n                });\n            }\n\n            this._options.callbacks.onError(null, name, message, undefined);\n\n            return message;\n        },\n\n        /**\n         * Conditionally orders a manual retry of a failed upload.\n         *\n         * @param id File ID of the failed upload\n         * @param callback Optional callback to invoke if a retry is prudent.\n         * In lieu of asking the upload handler to retry.\n         * @returns {boolean} true if a manual retry will occur\n         * @private\n         */\n        _manualRetry: function(id, callback) {\n            if (this._onBeforeManualRetry(id)) {\n                this._netUploadedOrQueued++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n\n                if (callback) {\n                    callback(id);\n                }\n                else {\n                    this._handler.retry(id);\n                }\n\n                return true;\n            }\n        },\n\n        _maybeAllComplete: function(id, status) {\n            var self = this,\n                notFinished = this._getNotFinished();\n\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\n                this._succeededSinceLastAllComplete.push(id);\n            }\n            else if (status === qq.status.UPLOAD_FAILED) {\n                this._failedSinceLastAllComplete.push(id);\n            }\n\n            if (notFinished === 0 &&\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\n                setTimeout(function() {\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\n                }, 0);\n            }\n        },\n\n        _maybeHandleIos8SafariWorkaround: function() {\n            var self = this;\n\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n                setTimeout(function() {\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\n                }, 0);\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\n            }\n        },\n\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\n            // Assuming no one will actually set the response code to something other than 200\n            // and still set 'success' to true...\n            if (!response.success) {\n                if (xhr && xhr.status !== 200 && !response.error) {\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\n                }\n                else {\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\n                }\n            }\n        },\n\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\n            var self = this;\n\n            if (items.length > index) {\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\n                    setTimeout(function() {\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\n                            buttonId = self._getButtonId(items[index].file),\n                            button = self._getButton(buttonId);\n\n                        self._handleCheckedCallback({\n                            name: \"onValidate\",\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\n                        });\n                    }, 0);\n                }\n                else if (!validItem) {\n                    for (; index < items.length; index++) {\n                        self._fileOrBlobRejected(items[index].id);\n                    }\n                }\n            }\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\n\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n        },\n\n        /**\n         * Attempt to automatically retry a failed upload.\n         *\n         * @param id The file ID of the failed upload\n         * @param name The name of the file associated with the failed upload\n         * @param responseJSON Response from the server, parsed into a javascript object\n         * @param xhr Ajax transport used to send the failed request\n         * @param callback Optional callback to be invoked if a retry is prudent.\n         * Invoked in lieu of asking the upload handler to retry.\n         * @returns {boolean} true if an auto-retry will occur\n         * @private\n         */\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\n            var self = this;\n\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\n\n            if (self._shouldAutoRetry(id)) {\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\n\n                self._maybeParseAndSendUploadError.apply(self, arguments);\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\n                self._onBeforeAutoRetry(id, name);\n\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n                self._retryTimeouts[id] = setTimeout(function() {\n                    self.log(\"Starting retry for \" + name + \"...\");\n\n                    if (callback) {\n                        callback(id);\n                    }\n                    else {\n                        self._handler.retry(id);\n                    }\n                }, retryWaitPeriod);\n\n                return true;\n            }\n        },\n\n        _onBeforeAutoRetry: function(id, name) {\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            var itemLimit = this._currentItemLimit,\n                fileName;\n\n            if (this._preventRetries[id]) {\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\n                return false;\n            }\n            else if (this._handler.isValid(id)) {\n                fileName = this.getName(id);\n\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\n                    return false;\n                }\n\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\n                    this._itemError(\"retryFailTooManyItems\");\n                    return false;\n                }\n\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\n                return true;\n            }\n            else {\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\n                return false;\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._netUploadedOrQueued--;\n\n            clearTimeout(this._retryTimeouts[id]);\n\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\n                this._storedIds.splice(storedItemIndex, 1);\n            }\n\n            this._uploadData.setStatus(id, qq.status.CANCELED);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            if (!result.success) {\n                this._netUploadedOrQueued--;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\n\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\n                    this._preventRetries[id] = true;\n                }\n            }\n            else {\n                if (result.thumbnailUrl) {\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\n                }\n\n                this._netUploaded++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\n            }\n\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\n\n            return result.success ? true : false;\n        },\n\n        _onDelete: function(id) {\n            this._uploadData.setStatus(id, qq.status.DELETING);\n        },\n\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\n            var name = this.getName(id);\n\n            if (isError) {\n                this._handleDeleteFailed(id, xhrOrXdr);\n            }\n            else {\n                this._handleDeleteSuccess(id);\n            }\n        },\n\n        _onInputChange: function(input) {\n            var fileIndex;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\n                    this._annotateWithButtonId(input.files[fileIndex], input);\n                }\n\n                this.addFiles(input.files);\n            }\n            // Android 2.3.x will fire `onchange` even if no file has been selected\n            else if (input.value.length > 0) {\n                this.addFiles(input);\n            }\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n        },\n\n        _onProgress: function(id, name, loaded, total) {\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\n        },\n\n        _onSubmit: function(id, name) {\n            //nothing to do yet in core uploader\n        },\n\n        _onSubmitCallbackSuccess: function(id, name) {\n            this._onSubmit.apply(this, arguments);\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\n            this._onSubmitted.apply(this, arguments);\n\n            if (this._options.autoUpload) {\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n                this._uploadFile(id);\n            }\n            else {\n                this._storeForLater(id);\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n            }\n        },\n\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\n            var uuid = this.getUuid(id),\n                adjustedOnSuccessCallback;\n\n            if (onSuccessCallback) {\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\n            }\n\n            if (this._isDeletePossible()) {\n                this._handleCheckedCallback({\n                    name: \"onSubmitDelete\",\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\n                    onSuccess: adjustedOnSuccessCallback ||\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\n                    identifier: id\n                });\n                return true;\n            }\n            else {\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\n                return false;\n            }\n        },\n\n        _onSubmitted: function(id) {\n            //nothing to do in the base uploader\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._options.callbacks.onTotalProgress(loaded, total);\n        },\n\n        _onUploadPrep: function(id) {\n            // nothing to do in the core uploader for now\n        },\n\n        _onUpload: function(id, name) {\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            //nothing to do in the base uploader\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\n            if (newStatus === qq.status.PAUSED) {\n                clearTimeout(this._retryTimeouts[id]);\n            }\n        },\n\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\n            var self = this;\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                self._fileOrBlobRejected(fileWrapper.id);\n            });\n        },\n\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\n            var errorMessage,\n                itemLimit = this._currentItemLimit,\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\n\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\n                if (items.length > 0) {\n                    this._handleCheckedCallback({\n                        name: \"onValidate\",\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\n                    });\n                }\n                else {\n                    this._itemError(\"noFilesError\");\n                }\n            }\n            else {\n                this._onValidateBatchCallbackFailure(items);\n                errorMessage = this._options.messages.tooManyItemsError\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\n                this._batchError(errorMessage);\n            }\n        },\n\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\n            var nextIndex = index + 1;\n\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\n\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n        },\n\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\n            var self = this,\n                nextIndex = index + 1,\n                validationDescriptor = this._getValidationDescriptor(items[index]);\n\n            this._validateFileOrBlobData(items[index], validationDescriptor)\n                .then(\n                function() {\n                    self._upload(items[index].id, params, endpoint);\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\n                },\n                function() {\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n                }\n            );\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            if (items.length === 0) {\n                this._itemError(\"noFilesError\");\n                return;\n            }\n\n            var validationDescriptors = this._getValidationDescriptors(items),\n                buttonId = this._getButtonId(items[0].file),\n                button = this._getButton(buttonId);\n\n            this._handleCheckedCallback({\n                name: \"onValidateBatch\",\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\n                identifier: \"batch validation\"\n            });\n        },\n\n        _preventLeaveInProgress: function() {\n            var self = this;\n\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\n                if (self.getInProgress()) {\n                    e = e || window.event;\n                    // for ie, ff\n                    e.returnValue = self._options.messages.onLeave;\n                    // for webkit\n                    return self._options.messages.onLeave;\n                }\n            });\n        },\n\n        // Attempts to refresh session data only if the `qq.Session` module exists\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\n        // callback will be invoked once the refresh is complete.\n        _refreshSessionData: function() {\n            var self = this,\n                options = this._options.session;\n\n            /* jshint eqnull:true */\n            if (qq.Session && this._options.session.endpoint != null) {\n                if (!this._session) {\n                    qq.extend(options, {cors: this._options.cors});\n\n                    options.log = qq.bind(this.log, this);\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\n\n                    this._session = new qq.Session(options);\n                }\n\n                setTimeout(function() {\n                    self._session.refresh().then(function(response, xhrOrXdr) {\n                        self._sessionRequestComplete();\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\n\n                    }, function(response, xhrOrXdr) {\n\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\n                    });\n                }, 0);\n            }\n        },\n\n        _sessionRequestComplete: function() {},\n\n        _setSize: function(id, newSize) {\n            this._uploadData.updateSize(id, newSize);\n            this._totalProgress && this._totalProgress.onNewSize(id);\n        },\n\n        _shouldAutoRetry: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            /*jshint laxbreak: true */\n            if (!this._preventRetries[id]\n                && this._options.retry.enableAuto\n                && uploadData.status !== qq.status.PAUSED) {\n\n                if (this._autoRetries[id] === undefined) {\n                    this._autoRetries[id] = 0;\n                }\n\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\n                    this._autoRetries[id] += 1;\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        _storeForLater: function(id) {\n            this._storedIds.push(id);\n        },\n\n        // Maps a file with the button that was used to select it.\n        _trackButton: function(id) {\n            var buttonId;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                buttonId = this._handler.getFile(id).qqButtonId;\n            }\n            else {\n                buttonId = this._getButtonId(this._handler.getInput(id));\n            }\n\n            if (buttonId) {\n                this._buttonIdsForFileIds[id] = buttonId;\n            }\n        },\n\n        _updateFormSupportAndParams: function(formElementOrId) {\n            this._options.form.element = formElementOrId;\n\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n                );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this.setEndpoint(this._formSupport.newEndpoint);\n                }\n            }\n        },\n\n        _upload: function(id, params, endpoint) {\n            var name = this.getName(id);\n\n            if (params) {\n                this.setParams(params, id);\n            }\n\n            if (endpoint) {\n                this.setEndpoint(endpoint, id);\n            }\n\n            this._handleCheckedCallback({\n                name: \"onSubmit\",\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\n                identifier: id\n            });\n        },\n\n        _uploadFile: function(id) {\n            if (!this._handler.upload(id)) {\n                this._uploadData.setStatus(id, qq.status.QUEUED);\n            }\n        },\n\n        _uploadStoredFiles: function() {\n            var idToUpload, stillSubmitting,\n                self = this;\n\n            while (this._storedIds.length) {\n                idToUpload = this._storedIds.shift();\n                this._uploadFile(idToUpload);\n            }\n\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\n            if (stillSubmitting) {\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\n                setTimeout(function() {\n                    self._uploadStoredFiles();\n                }, 1000);\n            }\n        },\n\n        /**\n         * Performs some internal validation checks on an item, defined in the `validation` option.\n         *\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\n         * @private\n         */\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\n            var self = this,\n                file = (function() {\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\n                        return fileWrapper.file.referenceBlob;\n                    }\n                    return fileWrapper.file;\n                }()),\n                name = validationDescriptor.name,\n                size = validationDescriptor.size,\n                buttonId = this._getButtonId(fileWrapper.file),\n                validationBase = this._getValidationBase(buttonId),\n                validityChecker = new qq.Promise();\n\n            validityChecker.then(\n                function() {},\n                function() {\n                    self._fileOrBlobRejected(fileWrapper.id, name);\n                });\n\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\n                this._itemError(\"typeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (!this._options.validation.allowEmpty && size === 0) {\n                this._itemError(\"emptyError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\n                this._itemError(\"sizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && size < validationBase.minSizeLimit) {\n                this._itemError(\"minSizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\n                    validityChecker.success,\n                    function(errorCode) {\n                        self._itemError(errorCode + \"ImageError\", name, file);\n                        validityChecker.failure();\n                    }\n                );\n            }\n            else {\n                validityChecker.success();\n            }\n\n            return validityChecker;\n        },\n\n        _wrapCallbacks: function() {\n            var self, safeCallback, prop;\n\n            self = this;\n\n            safeCallback = function(name, callback, args) {\n                var errorMsg;\n\n                try {\n                    return callback.apply(self, args);\n                }\n                catch (exception) {\n                    errorMsg = exception.message || exception.toString();\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\n                }\n            };\n\n            /* jshint forin: false, loopfunc: true */\n            for (prop in this._options.callbacks) {\n                (function() {\n                    var callbackName, callbackFunc;\n                    callbackName = prop;\n                    callbackFunc = self._options.callbacks[callbackName];\n                    self._options.callbacks[callbackName] = function() {\n                        return safeCallback(callbackName, callbackFunc, arguments);\n                    };\n                }());\n            }\n        }\n    };\n}());\n","/*globals qq*/\n(function() {\n    \"use strict\";\n\n    qq.FineUploaderBasic = function(o) {\n        var self = this;\n\n        // These options define FineUploaderBasic mode.\n        this._options = {\n            debug: false,\n            button: null,\n            multiple: true,\n            maxConnections: 3,\n            disableCancelForFormUploads: false,\n            autoUpload: true,\n\n            request: {\n                customHeaders: {},\n                endpoint: \"/server/upload\",\n                filenameParam: \"qqfilename\",\n                forceMultipart: true,\n                inputName: \"qqfile\",\n                method: \"POST\",\n                omitDefaultParams: false,\n                params: {},\n                paramsInBody: true,\n                requireSuccessJson: true,\n                totalFileSizeName: \"qqtotalfilesize\",\n                uuidName: \"qquuid\"\n            },\n\n            validation: {\n                allowedExtensions: [],\n                sizeLimit: 0,\n                minSizeLimit: 0,\n                itemLimit: 0,\n                stopOnFirstInvalidFile: true,\n                acceptFiles: null,\n                image: {\n                    maxHeight: 0,\n                    maxWidth: 0,\n                    minHeight: 0,\n                    minWidth: 0\n                },\n                allowEmpty: false\n            },\n\n            callbacks: {\n                onSubmit: function(id, name) {},\n                onSubmitted: function(id, name) {},\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\n                onAllComplete: function(successful, failed) {},\n                onCancel: function(id, name) {},\n                onUpload: function(id, name) {},\n                onUploadChunk: function(id, name, chunkData) {},\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\n                onResume: function(id, fileName, chunkData, customResumeData) {},\n                onProgress: function(id, name, loaded, total) {},\n                onTotalProgress: function(loaded, total) {},\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\n                onAutoRetry: function(id, name, attemptNumber) {},\n                onManualRetry: function(id, name) {},\n                onValidateBatch: function(fileOrBlobData) {},\n                onValidate: function(fileOrBlobData) {},\n                onSubmitDelete: function(id) {},\n                onDelete: function(id) {},\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\n                onPasteReceived: function(blob) {},\n                onStatusChange: function(id, oldStatus, newStatus) {},\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\n            },\n\n            messages: {\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\n                emptyError: \"{file} is empty, please select files again without it.\",\n                noFilesError: \"No files to upload.\",\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\n                maxHeightImageError: \"Image is too tall.\",\n                maxWidthImageError: \"Image is too wide.\",\n                minHeightImageError: \"Image is not tall enough.\",\n                minWidthImageError: \"Image is not wide enough.\",\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\n            },\n\n            retry: {\n                enableAuto: false,\n                maxAutoAttempts: 3,\n                autoAttemptDelay: 5,\n                preventRetryResponseProperty: \"preventRetry\"\n            },\n\n            classes: {\n                buttonHover: \"qq-upload-button-hover\",\n                buttonFocus: \"qq-upload-button-focus\"\n            },\n\n            chunking: {\n                enabled: false,\n                concurrent: {\n                    enabled: false\n                },\n                mandatory: false,\n                paramNames: {\n                    partIndex: \"qqpartindex\",\n                    partByteOffset: \"qqpartbyteoffset\",\n                    chunkSize: \"qqchunksize\",\n                    totalFileSize: \"qqtotalfilesize\",\n                    totalParts: \"qqtotalparts\"\n                },\n                partSize: 2000000,\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\n                success: {\n                    endpoint: null,\n\n                    headers: function(id) {\n                        return null;\n                    },\n\n                    jsonPayload: false,\n\n                    method: \"POST\",\n\n                    params: function(id) {\n                        return null;\n                    },\n\n                    resetOnStatus: []\n                }\n            },\n\n            resume: {\n                enabled: false,\n                recordsExpireIn: 7, //days\n                paramNames: {\n                    resuming: \"qqresume\"\n                },\n                customKeys: function(fileId) {\n                    return [];\n                }\n            },\n\n            formatFileName: function(fileOrBlobName) {\n                return fileOrBlobName;\n            },\n\n            text: {\n                defaultResponseError: \"Upload failure reason unknown\",\n                fileInputTitle: \"file input\",\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\n            },\n\n            deleteFile: {\n                enabled: false,\n                method: \"DELETE\",\n                endpoint: \"/server/upload\",\n                customHeaders: {},\n                params: {}\n            },\n\n            cors: {\n                expected: false,\n                sendCredentials: false,\n                allowXdr: false\n            },\n\n            blobs: {\n                defaultName: \"misc_data\"\n            },\n\n            paste: {\n                targetElement: null,\n                defaultName: \"pasted_image\"\n            },\n\n            camera: {\n                ios: false,\n\n                // if ios is true: button is null means target the default button, otherwise target the button specified\n                button: null\n            },\n\n            // This refers to additional upload buttons to be handled by Fine Uploader.\n            // Each element is an object, containing `element` as the only required\n            // property.  The `element` must be a container that will ultimately\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\n            // Optional properties of each object include `multiple`, `validation`,\n            // and `folders`.\n            extraButtons: [],\n\n            // Depends on the session module.  Used to query the server for an initial file list\n            // during initialization and optionally after a `reset`.\n            session: {\n                endpoint: null,\n                params: {},\n                customHeaders: {},\n                refreshOnReset: true\n            },\n\n            // Send parameters associated with an existing form along with the files\n            form: {\n                // Element ID, HTMLElement, or null\n                element: \"qq-form\",\n\n                // Overrides the base `autoUpload`, unless `element` is null.\n                autoUpload: false,\n\n                // true = upload files on form submission (and squelch submit event)\n                interceptSubmit: true\n            },\n\n            // scale images client side, upload a new file for each scaled version\n            scaling: {\n                customResizer: null,\n\n                // send the original file as well\n                sendOriginal: true,\n\n                // fox orientation for scaled images\n                orient: true,\n\n                // If null, scaled image type will match reference image type.  This value will be referred to\n                // for any size record that does not specific a type.\n                defaultType: null,\n\n                defaultQuality: 80,\n\n                failureText: \"Failed to scale\",\n\n                includeExif: false,\n\n                // metadata about each requested scaled version\n                sizes: []\n            },\n\n            workarounds: {\n                iosEmptyVideos: true,\n                ios8SafariUploads: true,\n                ios8BrowserCrash: false\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(this._options, o, true);\n\n        this._buttons = [];\n        this._extraButtonSpecs = {};\n        this._buttonIdsForFileIds = [];\n\n        this._wrapCallbacks();\n        this._disposeSupport =  new qq.DisposeSupport();\n\n        this._storedIds = [];\n        this._autoRetries = [];\n        this._retryTimeouts = [];\n        this._preventRetries = [];\n        this._thumbnailUrls = [];\n\n        this._netUploadedOrQueued = 0;\n        this._netUploaded = 0;\n        this._uploadData = this._createUploadDataTracker();\n\n        this._initFormSupportAndParams();\n\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\n\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\n\n        this._endpointStore = this._createStore(this._options.request.endpoint);\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\n\n        this._handler = this._createUploadHandler();\n\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\n\n        if (this._options.button) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._options.button,\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._generateExtraButtonSpecs();\n\n        this._handleCameraAccess();\n\n        if (this._options.paste.targetElement) {\n            if (qq.PasteSupport) {\n                this._pasteHandler = this._createPasteHandler();\n            }\n            else {\n                this.log(\"Paste support module not found\", \"error\");\n            }\n        }\n\n        this._preventLeaveInProgress();\n\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\n        this._refreshSessionData();\n\n        this._succeededSinceLastAllComplete = [];\n        this._failedSinceLastAllComplete = [];\n\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\n        if (this._scaler.enabled) {\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\n        }\n\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\n            this._totalProgress = new qq.TotalProgress(\n                qq.bind(this._onTotalProgress, this),\n\n                function(id) {\n                    var entry = self._uploadData.retrieve({id: id});\n                    return (entry && entry.size) || 0;\n                }\n            );\n        }\n\n        this._currentItemLimit = this._options.validation.itemLimit;\n\n        this._customResumeDataStore = this._createStore();\n    };\n\n    // Define the private & public API methods.\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\n}());\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Base upload handler module.  Controls more specific handlers.\n *\n * @param o Options.  Passed along to the specific handler submodule as well.\n * @param namespace [optional] Namespace for the specific handler.\n */\nqq.UploadHandlerController = function(o, namespace) {\n    \"use strict\";\n\n    var controller = this,\n        chunkingPossible = false,\n        concurrentChunkingPossible = false,\n        chunking, preventRetryResponse, log, handler,\n\n    options = {\n        paramsStore: {},\n        maxConnections: 3, // maximum number of concurrent uploads\n        chunking: {\n            enabled: false,\n            multiple: {\n                enabled: false\n            }\n        },\n        log: function(str, level) {},\n        onProgress: function(id, fileName, loaded, total) {},\n        onComplete: function(id, fileName, response, xhr) {},\n        onCancel: function(id, fileName) {},\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\n        onUpload: function(id, fileName) {},\n        onUploadChunk: function(id, fileName, chunkData) {},\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\n        onAutoRetry: function(id, fileName, response, xhr) {},\n        onResume: function(id, fileName, chunkData, customResumeData) {},\n        onUuidChanged: function(id, newUuid) {},\n        getName: function(id) {},\n        setSize: function(id, newSize) {},\n        isQueued: function(id) {},\n        getIdsInProxyGroup: function(id) {},\n        getIdsInBatch: function(id) {},\n        isInProgress: function(id) {}\n    },\n\n    chunked = {\n        // Called when each chunk has uploaded successfully\n        done: function(id, chunkIdx, response, xhr) {\n            var chunkData = handler._getChunkData(id, chunkIdx);\n\n            handler._getFileState(id).attemptingResume = false;\n\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\n            handler._getFileState(id).loaded += chunkData.size;\n\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\n        },\n\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\n        // logic associated with closing out the file, such as combining the chunks.\n        finalize: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id);\n\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\n            handler.finalizeChunks(id).then(\n                function(response, xhr) {\n                    log(\"Finalize successful for \" + id);\n\n                    var normaizedResponse = upload.normalizeResponse(response, true);\n\n                    options.onProgress(id, name, size, size);\n                    handler._maybeDeletePersistedChunkData(id);\n                    upload.cleanup(id, normaizedResponse, xhr);\n                },\n                function(response, xhr) {\n                    var normalizedResponse = upload.normalizeResponse(response, false);\n\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normalizedResponse.error, \"error\");\n\n                    if (\n                        normalizedResponse.reset\n                        || options.chunking.success.resetOnStatus.indexOf(xhr.status) >= 0\n                    ) {\n                        chunked.reset(id);\n                    }\n\n                    if (!options.onAutoRetry(id, name, normalizedResponse, xhr)) {\n                        upload.cleanup(id, normalizedResponse, xhr);\n                    }\n                }\n            );\n        },\n\n        handleFailure: function(chunkIdx, id, response, xhr) {\n            var name = options.getName(id);\n\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\n\n            handler.clearCachedChunk(id, chunkIdx);\n\n            var responseToReport = upload.normalizeResponse(response, false),\n                inProgressIdx;\n\n            if (responseToReport.reset) {\n                chunked.reset(id);\n            }\n            else {\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\n                if (inProgressIdx >= 0) {\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\n                }\n            }\n\n            // We may have aborted all other in-progress chunks for this file due to a failure.\n            // If so, ignore the failures associated with those aborts.\n            if (!handler._getFileState(id).temp.ignoreFailure) {\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\n                // chunks since they will be explicitly aborted\n                if (concurrentChunkingPossible) {\n                    handler._getFileState(id).temp.ignoreFailure = true;\n\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\n                        ckXhr.abort();\n                        // Flag the transport, in case we are waiting for some other async operation\n                        // to complete before attempting to upload the chunk\n                        ckXhr._cancelled = true;\n                    });\n\n                    // We must indicate that all aborted chunks are no longer in progress\n                    handler.moveInProgressToRemaining(id);\n\n                    // Free up any connections used by these chunks, but don't allow any\n                    // other files to take up the connections (until we have exhausted all auto-retries)\n                    connectionManager.free(id, true);\n                }\n\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\n                    // is a failure or not.\n                    upload.cleanup(id, responseToReport, xhr);\n                }\n            }\n        },\n\n        hasMoreParts: function(id) {\n            return !!handler._getFileState(id).chunking.remaining.length;\n        },\n\n        nextPart: function(id) {\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\n\n            if (nextIdx >= handler._getTotalChunks(id)) {\n                nextIdx = null;\n            }\n\n            return nextIdx;\n        },\n\n        reset: function(id) {\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\n\n            handler._maybeDeletePersistedChunkData(id);\n            handler.reevaluateChunking(id);\n            handler._getFileState(id).loaded = 0;\n        },\n\n        sendNext: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id),\n                chunkIdx = chunked.nextPart(id),\n                chunkData = handler._getChunkData(id, chunkIdx),\n                fileState = handler._getFileState(id),\n                resuming = fileState.attemptingResume,\n                inProgressChunks = fileState.chunking.inProgress || [];\n\n            if (fileState.loaded == null) {\n                fileState.loaded = 0;\n            }\n\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\n            if (resuming && options.onResume(id, name, chunkData, fileState.customResumeData) === false) {\n                chunked.reset(id);\n                chunkIdx = chunked.nextPart(id);\n                chunkData = handler._getChunkData(id, chunkIdx);\n                resuming = false;\n            }\n\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\n            if (chunkIdx == null && inProgressChunks.length === 0) {\n                chunked.finalize(id);\n            }\n\n            // Send the next chunk\n            else {\n                inProgressChunks.push(chunkIdx);\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\n\n                if (concurrentChunkingPossible) {\n                    connectionManager.open(id, chunkIdx);\n                }\n\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\n                    chunked.sendNext(id);\n                }\n\n                if (chunkData.blob.size === 0) {\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\n                }\n\n                var onUploadChunkPromise = options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\n\n                onUploadChunkPromise.then(\n                    function(requestOverrides) {\n                        if (!options.isInProgress(id)) {\n                            log(qq.format(\"Not sending chunked upload request for item {}.{} - no longer in progress.\", id, chunkIdx));\n                        }\n                        else {\n                            log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\n\n                            var uploadChunkData = {\n                                chunkIdx: chunkIdx,\n                                id: id,\n                                overrides: requestOverrides,\n                                resuming: resuming\n                            };\n\n                            handler.uploadChunk(uploadChunkData).then(\n                                // upload chunk success\n                                function success(response, xhr) {\n                                    log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\n\n                                    handler.clearCachedChunk(id, chunkIdx);\n\n                                    var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\n                                        responseToReport = upload.normalizeResponse(response, true),\n                                        inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\n\n                                    log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\n\n                                    chunked.done(id, chunkIdx, responseToReport, xhr);\n\n                                    if (inProgressChunkIdx >= 0) {\n                                        inProgressChunks.splice(inProgressChunkIdx, 1);\n                                    }\n\n                                    handler._maybePersistChunkedState(id);\n\n                                    if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\n                                        chunked.finalize(id);\n                                    }\n                                    else if (chunked.hasMoreParts(id)) {\n                                        chunked.sendNext(id);\n                                    }\n                                    else {\n                                        log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\n                                    }\n                                },\n\n                                // upload chunk failure\n                                function failure(response, xhr) {\n                                    chunked.handleFailure(chunkIdx, id, response, xhr);\n                                }\n                            )\n                                .done(function () {\n                                    handler.clearXhr(id, chunkIdx);\n                                });\n                        }\n                    },\n\n                    function(error) {\n                        chunked.handleFailure(chunkIdx, id, error, null);\n                    }\n                );\n            }\n        }\n    },\n\n    connectionManager = {\n        _open: [],\n        _openChunks: {},\n        _waiting: [],\n\n        available: function() {\n            var max = options.maxConnections,\n                openChunkEntriesCount = 0,\n                openChunksCount = 0;\n\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\n                openChunkEntriesCount++;\n                openChunksCount += openChunkIndexes.length;\n            });\n\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\n        },\n\n        /**\n         * Removes element from queue, starts upload of next\n         */\n        free: function(id, dontAllowNext) {\n            var allowNext = !dontAllowNext,\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\n                nextId;\n\n            delete connectionManager._openChunks[id];\n\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\n                delete handler._getFileState(id).file;\n            }\n\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\n            if (waitingIndex >= 0) {\n                connectionManager._waiting.splice(waitingIndex, 1);\n            }\n            // If this file was consuming a connection, allow the next file to be uploaded\n            else if (allowNext && connectionsIndex >= 0) {\n                connectionManager._open.splice(connectionsIndex, 1);\n\n                nextId = connectionManager._waiting.shift();\n                if (nextId >= 0) {\n                    connectionManager._open.push(nextId);\n                    upload.start(nextId);\n                }\n            }\n        },\n\n        getWaitingOrConnected: function() {\n            var waitingOrConnected = [];\n\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\n                if (chunks && chunks.length) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // For non-chunked files, only one connection will be consumed per file.\n            // This is where we aggregate those file IDs.\n            qq.each(connectionManager._open, function(idx, fileId) {\n                if (!connectionManager._openChunks[fileId]) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // There may be files waiting for a connection.\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\n\n            return waitingOrConnected;\n        },\n\n        isUsingConnection: function(id) {\n            return qq.indexOf(connectionManager._open, id) >= 0;\n        },\n\n        open: function(id, chunkIdx) {\n            if (chunkIdx == null) {\n                connectionManager._waiting.push(id);\n            }\n\n            if (connectionManager.available()) {\n                if (chunkIdx == null) {\n                    connectionManager._waiting.pop();\n                    connectionManager._open.push(id);\n                }\n                else {\n                    (function() {\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\n                        openChunksEntry.push(chunkIdx);\n                        connectionManager._openChunks[id] = openChunksEntry;\n                    }());\n                }\n\n                return true;\n            }\n\n            return false;\n        },\n\n        reset: function() {\n            connectionManager._waiting = [];\n            connectionManager._open = [];\n        }\n    },\n\n    simple = {\n        send: function(id, name) {\n            handler._getFileState(id).loaded = 0;\n\n            log(\"Sending simple upload request for \" + id);\n            handler.uploadFile(id).then(\n                function(response, optXhr) {\n                    log(\"Simple upload request succeeded for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, true),\n                        size = options.getSize(id);\n\n                    options.onProgress(id, name, size, size);\n                    upload.maybeNewUuid(id, responseToReport);\n                    upload.cleanup(id, responseToReport, optXhr);\n                },\n\n                function(response, optXhr) {\n                    log(\"Simple upload request failed for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, false);\n\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\n                        upload.cleanup(id, responseToReport, optXhr);\n                    }\n                }\n            );\n        }\n    },\n\n    upload = {\n        cancel: function(id) {\n            log(\"Cancelling \" + id);\n            options.paramsStore.remove(id);\n            connectionManager.free(id);\n        },\n\n        cleanup: function(id, response, optXhr) {\n            var name = options.getName(id);\n\n            options.onComplete(id, name, response, optXhr);\n\n            if (handler._getFileState(id)) {\n                handler._clearXhrs && handler._clearXhrs(id);\n            }\n\n            connectionManager.free(id);\n        },\n\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\n        // if none of these are available for the ID\n        getProxyOrBlob: function(id) {\n            return (handler.getProxy && handler.getProxy(id)) ||\n                (handler.getFile && handler.getFile(id));\n        },\n\n        initHandler: function() {\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\n\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\n                options,\n                {\n                    getCustomResumeData: options.getCustomResumeData,\n                    getDataByUuid: options.getDataByUuid,\n                    getName: options.getName,\n                    getSize: options.getSize,\n                    getUuid: options.getUuid,\n                    log: log,\n                    onCancel: options.onCancel,\n                    onProgress: options.onProgress,\n                    onUuidChanged: options.onUuidChanged\n                }\n            );\n\n            if (handler._removeExpiredChunkingRecords) {\n                handler._removeExpiredChunkingRecords();\n            }\n        },\n\n        isDeferredEligibleForUpload: function(id) {\n            return options.isQueued(id);\n        },\n\n        // For Blobs that are part of a group of generated images, along with a reference image,\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\n        // even if some async processing must be completed on one or more Blobs first.\n        maybeDefer: function(id, blob) {\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\n            // and then submit the upload to the specific handler once the blob is available.\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\n\n                // Blob creation may take some time, so the caller may want to update the\n                // UI to indicate that an operation is in progress, even before the actual\n                // upload begins and an onUpload callback is invoked.\n                options.onUploadPrep(id);\n\n                log(\"Attempting to generate a blob on-demand for \" + id);\n                blob.create().then(function(generatedBlob) {\n                    log(\"Generated an on-demand blob for \" + id);\n\n                    // Update record associated with this file by providing the generated Blob\n                    handler.updateBlob(id, generatedBlob);\n\n                    // Propagate the size for this generated Blob\n                    options.setSize(id, generatedBlob.size);\n\n                    // Order handler to recalculate chunking possibility, if applicable\n                    handler.reevaluateChunking(id);\n\n                    upload.maybeSendDeferredFiles(id);\n                },\n\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\n                function(errorMessage) {\n                    var errorResponse = {};\n\n                    if (errorMessage) {\n                        errorResponse.error = errorMessage;\n                    }\n\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\n\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\n                    upload.maybeSendDeferredFiles(id);\n                    connectionManager.free(id);\n                });\n            }\n            else {\n                return upload.maybeSendDeferredFiles(id);\n            }\n\n            return false;\n        },\n\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\n        maybeSendDeferredFiles: function(id) {\n            var idsInGroup = options.getIdsInProxyGroup(id),\n                uploadedThisId = false;\n\n            if (idsInGroup && idsInGroup.length) {\n                log(\"Maybe ready to upload proxy group file \" + id);\n\n                qq.each(idsInGroup, function(idx, idInGroup) {\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\n                        uploadedThisId = idInGroup === id;\n                        upload.now(idInGroup);\n                    }\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\n                        return false;\n                    }\n                });\n            }\n            else {\n                uploadedThisId = true;\n                upload.now(id);\n            }\n\n            return uploadedThisId;\n        },\n\n        maybeNewUuid: function(id, response) {\n            if (response.newUuid !== undefined) {\n                options.onUuidChanged(id, response.newUuid);\n            }\n        },\n\n        // The response coming from handler implementations may be in various formats.\n        // Instead of hoping a promise nested 5 levels deep will always return an object\n        // as its first param, let's just normalize the response here.\n        normalizeResponse: function(originalResponse, successful) {\n            var response = originalResponse;\n\n            // The passed \"response\" param may not be a response at all.\n            // It could be a string, detailing the error, for example.\n            if (!qq.isObject(originalResponse)) {\n                response = {};\n\n                if (qq.isString(originalResponse) && !successful) {\n                    response.error = originalResponse;\n                }\n            }\n\n            response.success = successful;\n\n            return response;\n        },\n\n        now: function(id) {\n            var name = options.getName(id);\n\n            if (!controller.isValid(id)) {\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\n            }\n\n            var onUploadPromise = options.onUpload(id, name);\n\n            onUploadPromise.then(\n                function() {\n                    if (chunkingPossible && handler._shouldChunkThisFile(id)) {\n                        chunked.sendNext(id);\n                    }\n                    else {\n                        simple.send(id, name);\n                    }\n                },\n\n                function(error) {\n                    error = error || {};\n\n                    log(id + \" upload start aborted due to rejected onUpload Promise - details: \" + error, \"error\");\n\n                    if (!options.onAutoRetry(id, name, error.responseJSON || {})) {\n                        var response = upload.normalizeResponse(error.responseJSON, false);\n                        upload.cleanup(id, response);\n                    }\n                }\n            );\n        },\n\n        start: function(id) {\n            var blobToUpload = upload.getProxyOrBlob(id);\n\n            if (blobToUpload) {\n                return upload.maybeDefer(id, blobToUpload);\n            }\n            else {\n                upload.now(id);\n                return true;\n            }\n        }\n    };\n\n    qq.extend(this, {\n        /**\n         * Adds file or file input to the queue\n         **/\n        add: function(id, file) {\n            handler.add.apply(this, arguments);\n        },\n\n        /**\n         * Sends the file identified by id\n         */\n        upload: function(id) {\n            if (connectionManager.open(id)) {\n                return upload.start(id);\n            }\n            return false;\n        },\n\n        retry: function(id) {\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\n            // any more failures at this point.\n            if (concurrentChunkingPossible) {\n                handler._getFileState(id).temp.ignoreFailure = false;\n            }\n\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\n            // Just go ahead and ask the handler to upload again.\n            if (connectionManager.isUsingConnection(id)) {\n                return upload.start(id);\n            }\n\n            // If we are attempting to retry a file that is not currently consuming a connection,\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\n            // before the retry commences.\n            else {\n                return controller.upload(id);\n            }\n        },\n\n        /**\n         * Cancels file upload by id\n         */\n        cancel: function(id) {\n            var cancelRetVal = handler.cancel(id);\n\n            if (qq.isGenericPromise(cancelRetVal)) {\n                cancelRetVal.then(function() {\n                    upload.cancel(id);\n                });\n            }\n            else if (cancelRetVal !== false) {\n                upload.cancel(id);\n            }\n        },\n\n        /**\n         * Cancels all queued or in-progress uploads\n         */\n        cancelAll: function() {\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\n                i;\n\n            // ensure files are cancelled in reverse order which they were added\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\n            if (waitingOrConnected.length) {\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\n                    controller.cancel(waitingOrConnected[i]);\n                }\n            }\n\n            connectionManager.reset();\n        },\n\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\n        // Undefined if no file record is available.\n        getFile: function(id) {\n            if (handler.getProxy && handler.getProxy(id)) {\n                return handler.getProxy(id).referenceBlob;\n            }\n\n            return handler.getFile && handler.getFile(id);\n        },\n\n        // Returns true if the Blob associated with the ID is related to a proxy s\n        isProxied: function(id) {\n            return !!(handler.getProxy && handler.getProxy(id));\n        },\n\n        getInput: function(id) {\n            if (handler.getInput) {\n                return handler.getInput(id);\n            }\n        },\n\n        reset: function() {\n            log(\"Resetting upload handler\");\n            controller.cancelAll();\n            connectionManager.reset();\n            handler.reset();\n        },\n\n        expunge: function(id) {\n            if (controller.isValid(id)) {\n                return handler.expunge(id);\n            }\n        },\n\n        /**\n         * Determine if the file exists.\n         */\n        isValid: function(id) {\n            return handler.isValid(id);\n        },\n\n        getResumableFilesData: function() {\n            if (handler.getResumableFilesData) {\n                return handler.getResumableFilesData();\n            }\n            return [];\n        },\n\n        /**\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\n         * will be undefined.\n         *\n         * @param id Internal file ID\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\n         */\n        getThirdPartyFileId: function(id) {\n            if (controller.isValid(id)) {\n                return handler.getThirdPartyFileId(id);\n            }\n        },\n\n        /**\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\n         * @param id ID of the upload/file to pause\n         * @returns {boolean} true if the upload was paused\n         */\n        pause: function(id) {\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\n                connectionManager.free(id);\n                handler.moveInProgressToRemaining(id);\n                return true;\n            }\n            return false;\n        },\n\n        isAttemptingResume: function(id) {\n            return !!handler.isAttemptingResume && handler.isAttemptingResume(id);\n        },\n\n        // True if the file is eligible for pause/resume.\n        isResumable: function(id) {\n            return !!handler.isResumable && handler.isResumable(id);\n        }\n    });\n\n    qq.extend(options, o);\n    log = options.log;\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\n\n    preventRetryResponse = (function() {\n        var response = {};\n\n        response[options.preventRetryParam] = true;\n\n        return response;\n    }());\n\n    upload.initHandler();\n};\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log,\n        getCustomResumeData = proxy.getCustomResumeData;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                if (uploadData.customResumeData) {\n                    data.customResumeData = uploadData.customResumeData;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isAttemptingResume: function(id) {\n            return handler._getFileState(id).attemptingResume;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id)\n                && !handler._getFileState(id).notResumable\n                && handler._getFileState(id).loaded > 0;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = chunking.partSize,\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = chunking.partSize,\n                endpoint = getEndpoint(id),\n                customKeys = resume.customKeys(id),\n                localStorageId = qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n\n            customKeys.forEach(function(key) {\n                localStorageId += \"-\" + key;\n            });\n\n            return localStorageId;\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = chunking.partSize;\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.customResumeData = persistedData.customResumeData;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                var customResumeData = getCustomResumeData(id);\n\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now(),\n                };\n\n                if (customResumeData) {\n                    persistedData.customResumeData = customResumeData;\n                }\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*globals qq*/\n/**\n * Upload handler used that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to\n * a generic server.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.traditional = qq.traditional || {};\nqq.traditional.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log;\n\n    /**\n     * Returns json object received by iframe from server.\n     */\n    function getIframeContentJson(id, iframe) {\n        /*jshint evil: true*/\n\n        var response, doc, innerHtml;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            log(\"converting iframe's innerHTML to JSON\");\n            log(\"innerHTML = \" + innerHtml);\n            //plain text response may be wrapped in <pre> tag\n            if (innerHtml && innerHtml.match(/^<pre/i)) {\n                innerHtml = doc.body.firstChild.firstChild.nodeValue;\n            }\n\n            response = handler._parseJsonResponse(innerHtml);\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n            response = {success: false};\n        }\n\n        return response;\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var params = options.paramsStore.get(id),\n            method = options.method.toLowerCase() === \"get\" ? \"GET\" : \"POST\",\n            endpoint = options.endpointStore.get(id),\n            name = getName(id);\n\n        params[options.uuidName] = getUuid(id);\n        params[options.filenameParam] = name;\n\n        return handler._initFormForUpload({\n            method: method,\n            endpoint: endpoint,\n            params: params,\n            paramsInBody: options.paramsInBody,\n            targetName: iframe.name\n        });\n    }\n\n    this.uploadFile = function(id) {\n        var input = handler.getInput(id),\n            iframe = handler._createIframe(id),\n            promise = new qq.Promise(),\n            form;\n\n        form = createForm(id, iframe);\n        form.appendChild(input);\n\n        handler._attachLoadEvent(iframe, function(responseFromMessage) {\n            log(\"iframe loaded\");\n\n            var response = responseFromMessage ? responseFromMessage : getIframeContentJson(id, iframe);\n\n            handler._detachLoadEvent(id);\n\n            //we can't remove an iframe if the iframe doesn't belong to the same domain\n            if (!options.cors.expected) {\n                qq(iframe).remove();\n            }\n\n            if (response.success) {\n                promise.success(response);\n            }\n            else {\n                promise.failure(response);\n            }\n        });\n\n        log(\"Sending upload request for \" + id);\n        form.submit();\n        qq(form).remove();\n\n        return promise;\n    };\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: options.cors.expected,\n            inputName: options.inputName\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n};\n","/*globals qq*/\n/**\n * Upload handler used to upload to traditional endpoints.  It depends on File API support, and, therefore,\n * makes use of `XMLHttpRequest` level 2 to upload `File`s and `Blob`s to a generic server.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.traditional = qq.traditional || {};\nqq.traditional.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        multipart = spec.forceMultipart || spec.paramsInBody,\n\n        addChunkingSpecificParams = function(id, params, chunkData) {\n            var size = getSize(id),\n                name = getName(id);\n\n            if (!spec.omitDefaultParams) {\n                params[spec.chunking.paramNames.partIndex] = chunkData.part;\n                params[spec.chunking.paramNames.partByteOffset] = chunkData.start;\n                params[spec.chunking.paramNames.chunkSize] = chunkData.size;\n                params[spec.chunking.paramNames.totalParts] = chunkData.count;\n                params[spec.totalFileSizeName] = size;\n            }\n\n            /**\n             * When a Blob is sent in a multipart request, the filename value in the content-disposition header is either \"blob\"\n             * or an empty string.  So, we will need to include the actual file name as a param in this case.\n             */\n            if (multipart && !spec.omitDefaultParams) {\n                params[spec.filenameParam] = name;\n            }\n        },\n\n        allChunksDoneRequester = new qq.traditional.AllChunksDoneAjaxRequester({\n            cors: spec.cors,\n            endpoint: spec.chunking.success.endpoint,\n            headers: spec.chunking.success.headers,\n            jsonPayload: spec.chunking.success.jsonPayload,\n            log: log,\n            method: spec.chunking.success.method,\n            params: spec.chunking.success.params\n        }),\n\n        createReadyStateChangedHandler = function(id, xhr) {\n            var promise = new qq.Promise();\n\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    var result = onUploadOrChunkComplete(id, xhr);\n\n                    if (result.success) {\n                        promise.success(result.response, xhr);\n                    }\n                    else {\n                        promise.failure(result.response, xhr);\n                    }\n                }\n            };\n\n            return promise;\n        },\n\n        getChunksCompleteParams = function(id) {\n            var params = spec.paramsStore.get(id),\n                name = getName(id),\n                size = getSize(id);\n\n            params[spec.uuidName] = getUuid(id);\n            params[spec.filenameParam] = name;\n            params[spec.totalFileSizeName] = size;\n            params[spec.chunking.paramNames.totalParts] = handler._getTotalChunks(id);\n\n            return params;\n        },\n\n        isErrorUploadResponse = function(xhr, response) {\n            return qq.indexOf([200, 201, 202, 203, 204], xhr.status) < 0 ||\n                (spec.requireSuccessJson && !response.success) ||\n                response.reset;\n        },\n\n        onUploadOrChunkComplete = function(id, xhr) {\n            var response;\n\n            log(\"xhr - server response received for \" + id);\n            log(\"responseText = \" + xhr.responseText);\n\n            response = parseResponse(true, xhr);\n\n            return {\n                success: !isErrorUploadResponse(xhr, response),\n                response: response\n            };\n        },\n\n        // If this is an upload response, we require a JSON payload, otherwise, it is optional.\n        parseResponse = function(upload, xhr) {\n            var response = {};\n\n            try {\n                log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\n                response = qq.parseJson(xhr.responseText);\n            }\n            catch (error) {\n                upload && spec.requireSuccessJson && log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        },\n\n        sendChunksCompleteRequest = function(id) {\n            var promise = new qq.Promise();\n\n            allChunksDoneRequester.complete(\n                    id,\n                    handler._createXhr(id),\n                    getChunksCompleteParams(id),\n                    spec.customHeaders.get(id)\n                )\n                .then(function(xhr) {\n                    promise.success(parseResponse(false, xhr), xhr);\n                }, function(xhr) {\n                    promise.failure(parseResponse(false, xhr), xhr);\n                });\n\n            return promise;\n        },\n\n        setParamsAndGetEntityToSend = function(entityToSendParams) {\n            var fileOrBlob = entityToSendParams.fileOrBlob;\n            var id = entityToSendParams.id;\n            var xhr = entityToSendParams.xhr;\n            var xhrOverrides = entityToSendParams.xhrOverrides || {};\n\n            var params = xhrOverrides.params || entityToSendParams.params;\n\n            var formData = multipart ? new FormData() : null,\n                method = xhrOverrides.method || spec.method,\n                endpoint = xhrOverrides.endpoint || spec.endpointStore.get(id),\n                name = getName(id),\n                size = getSize(id);\n\n            if (!spec.omitDefaultParams) {\n                params[spec.uuidName] = getUuid(id);\n                params[spec.filenameParam] = name;\n            }\n\n            if (multipart && !spec.omitDefaultParams) {\n                params[spec.totalFileSizeName] = size;\n            }\n\n            //build query string\n            if (!spec.paramsInBody) {\n                if (!multipart && !spec.omitDefaultParams) {\n                    params[spec.inputName] = name;\n                }\n                endpoint = qq.obj2url(params, endpoint);\n            }\n\n            xhr.open(method, endpoint, true);\n\n            if (spec.cors.expected && spec.cors.sendCredentials) {\n                xhr.withCredentials = true;\n            }\n\n            if (multipart) {\n                if (spec.paramsInBody) {\n                    qq.obj2FormData(params, formData);\n                }\n\n                formData.append(spec.inputName, fileOrBlob);\n                return formData;\n            }\n\n            return fileOrBlob;\n        },\n\n        setUploadHeaders = function(headersOptions) {\n            var headerOverrides = headersOptions.headerOverrides;\n            var id = headersOptions.id;\n            var xhr = headersOptions.xhr;\n\n            if (headerOverrides) {\n                qq.each(headerOverrides, function(headerName, headerValue) {\n                    xhr.setRequestHeader(headerName, headerValue);\n                });\n            }\n            else {\n                var extraHeaders = spec.customHeaders.get(id),\n                    fileOrBlob = handler.getFile(id);\n\n                xhr.setRequestHeader(\"Accept\", \"application/json\");\n                xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n\n                if (!multipart) {\n                    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n                    //NOTE: return mime type in xhr works on chrome 16.0.9 firefox 11.0a2\n                    xhr.setRequestHeader(\"X-Mime-Type\", fileOrBlob.type);\n                }\n\n                qq.each(extraHeaders, function(name, val) {\n                    xhr.setRequestHeader(name, val);\n                });\n            }\n        };\n\n    qq.extend(this, {\n        uploadChunk: function(uploadChunkParams) {\n            var id = uploadChunkParams.id;\n            var chunkIdx = uploadChunkParams.chunkIdx;\n            var overrides = uploadChunkParams.overrides || {};\n            var resuming = uploadChunkParams.resuming;\n\n            var chunkData = handler._getChunkData(id, chunkIdx),\n                xhr = handler._createXhr(id, chunkIdx),\n                promise, toSend, params;\n\n            promise = createReadyStateChangedHandler(id, xhr);\n            handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n            params = spec.paramsStore.get(id);\n            addChunkingSpecificParams(id, params, chunkData);\n\n            if (resuming && !spec.omitDefaultParams) {\n                params[spec.resume.paramNames.resuming] = true;\n            }\n\n            toSend = setParamsAndGetEntityToSend({\n                fileOrBlob: chunkData.blob,\n                id: id,\n                params: params,\n                xhr: xhr,\n                xhrOverrides: overrides\n            });\n\n            setUploadHeaders({\n                headerOverrides: overrides.headers,\n                id: id,\n                xhr: xhr\n            });\n\n            xhr.send(toSend);\n\n            return promise;\n        },\n\n        uploadFile: function(id) {\n            var fileOrBlob = handler.getFile(id),\n                promise, xhr, params, toSend;\n\n            xhr = handler._createXhr(id);\n            handler._registerProgressHandler(id);\n            promise = createReadyStateChangedHandler(id, xhr);\n            params = spec.paramsStore.get(id);\n\n            toSend = setParamsAndGetEntityToSend({\n                fileOrBlob: fileOrBlob,\n                id: id,\n                params: params,\n                xhr: xhr\n            });\n\n            setUploadHeaders({\n                id: id,\n                xhr: xhr\n            });\n\n            xhr.send(toSend);\n\n            return promise;\n        }\n    });\n\n    qq.extend(this, new qq.XhrUploadHandler({\n        options: qq.extend({namespace: \"traditional\"}, spec),\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n    }));\n\n    qq.override(this, function(super_) {\n        return {\n            finalizeChunks: function(id) {\n                if (spec.chunking.success.endpoint) {\n                    return sendChunksCompleteRequest(id);\n                }\n                else {\n                    return super_.finalizeChunks(id, qq.bind(parseResponse, this, true));\n                }\n            }\n        };\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send a POST to a traditional endpoint once all chunks for a specific file have uploaded\n * successfully.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.traditional.AllChunksDoneAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            cors: {\n                allowXdr: false,\n                expected: false,\n                sendCredentials: false\n            },\n            endpoint: null,\n            log: function(str, level) {},\n            method: \"POST\"\n        },\n        promises = {},\n        endpointHandler = {\n            get: function(id) {\n                if (qq.isFunction(options.endpoint)) {\n                    return options.endpoint(id);\n                }\n\n                return options.endpoint;\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        contentType: options.jsonPayload ? \"application/json\" : \"application/x-www-form-urlencoded\",\n        validMethods: [options.method],\n        method: options.method,\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: options.cors,\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete promises[id];\n\n            if (isError) {\n                promise.failure(xhr);\n            }\n            else {\n                promise.success(xhr);\n            }\n        }\n    }));\n\n    qq.extend(this, {\n        complete: function(id, xhr, params, headers) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting All Chunks Done request for \" + id);\n\n            promises[id] = promise;\n\n            requester.initTransport(id)\n                .withParams(options.params(id) || params)\n                .withHeaders(options.headers(id) || headers)\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                var name = entry.name,\n                    fullPath = entry.fullPath,\n                    indexOfNameInFullPath = fullPath.indexOf(name);\n\n                // remove file name from full path string\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n                // remove leading slash in full path string\n                if (fullPath.charAt(0) === \"/\") {\n                    fullPath = fullPath.substr(1);\n                }\n\n                file.qqPath = fullPath;\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.firefox()) {\n            return !e.relatedTarget;\n        }\n\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            e.preventDefault();\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n        // dt.types.contains check is for firefox\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains(\"Files\")));\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Defines the public API for FineUploader mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.uiPublicApi = {\n        addInitialFiles: function(cannedFileList) {\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\n            this._templating.addCacheToDom();\n        },\n\n        clearStoredFiles: function() {\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\n            this._templating.clearFiles();\n        },\n\n        addExtraDropzone: function(element) {\n            this._dnd && this._dnd.setupExtraDropzone(element);\n        },\n\n        removeExtraDropzone: function(element) {\n            if (this._dnd) {\n                return this._dnd.removeDropzone(element);\n            }\n        },\n\n        getItemByFileId: function(id) {\n            if (!this._templating.isHiddenForever(id)) {\n                return this._templating.getFileContainer(id);\n            }\n        },\n\n        reset: function() {\n            this._parent.prototype.reset.apply(this, arguments);\n            this._templating.reset();\n\n            if (!this._options.button && this._templating.getButton()) {\n                this._defaultButtonId = this._createUploadButton({\n                    element: this._templating.getButton(),\n                    title: this._options.text.fileInputTitle\n                }).getButtonId();\n            }\n\n            if (this._dnd) {\n                this._dnd.dispose();\n                this._dnd = this._setupDragAndDrop();\n            }\n\n            this._totalFilesInBatch = 0;\n            this._filesInBatchAddedToUi = 0;\n\n            this._setupClickAndEditEventHandlers();\n        },\n\n        setName: function(id, newName) {\n            var formattedFilename = this._options.formatFileName(newName);\n\n            this._parent.prototype.setName.apply(this, arguments);\n            this._templating.updateFilename(id, formattedFilename);\n        },\n\n        pauseUpload: function(id) {\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\n\n            paused && this._templating.uploadPaused(id);\n            return paused;\n        },\n\n        continueUpload: function(id) {\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\n\n            continued && this._templating.uploadContinued(id);\n            return continued;\n        },\n\n        getId: function(fileContainerOrChildEl) {\n            return this._templating.getFileId(fileContainerOrChildEl);\n        },\n\n        getDropTarget: function(fileId) {\n            var file = this.getFile(fileId);\n\n            return file.qqDropTarget;\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploader mode.\n     */\n    qq.uiPrivateApi = {\n        _getButton: function(buttonId) {\n            var button = this._parent.prototype._getButton.apply(this, arguments);\n\n            if (!button) {\n                if (buttonId === this._defaultButtonId) {\n                    button = this._templating.getButton();\n                }\n            }\n\n            return button;\n        },\n\n        _removeFileItem: function(fileId) {\n            this._templating.removeFile(fileId);\n        },\n\n        _setupClickAndEditEventHandlers: function() {\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\n\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\n            this._focusinEventSupported = !qq.firefox();\n\n            if (this._isEditFilenameEnabled())\n            {\n                this._filenameClickHandler = this._bindFilenameClickEvent();\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\n            }\n        },\n\n        _setupDragAndDrop: function() {\n            var self = this,\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\n                templating = this._templating,\n                defaultDropZone = templating.getDropZone();\n\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\n\n            return new qq.DragAndDrop({\n                dropZoneElements: dropZoneElements,\n                allowMultipleItems: this._options.multiple,\n                classes: {\n                    dropActive: this._options.classes.dropActive\n                },\n                callbacks: {\n                    processingDroppedFiles: function() {\n                        templating.showDropProcessing();\n                    },\n                    processingDroppedFilesComplete: function(files, targetEl) {\n                        templating.hideDropProcessing();\n\n                        qq.each(files, function(idx, file) {\n                            file.qqDropTarget = targetEl;\n                        });\n\n                        if (files.length) {\n                            self.addFiles(files, null, null);\n                        }\n                    },\n                    dropError: function(code, errorData) {\n                        self._itemError(code, errorData);\n                    },\n                    dropLog: function(message, level) {\n                        self.log(message, level);\n                    }\n                }\n            });\n        },\n\n        _bindFileButtonsClickEvent: function() {\n            var self = this;\n\n            return new qq.FileButtonsClickHandler({\n                templating: this._templating,\n\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n\n                onDeleteFile: function(fileId) {\n                    self.deleteFile(fileId);\n                },\n\n                onCancel: function(fileId) {\n                    self.cancel(fileId);\n                },\n\n                onRetry: function(fileId) {\n                    self.retry(fileId);\n                },\n\n                onPause: function(fileId) {\n                    self.pauseUpload(fileId);\n                },\n\n                onContinue: function(fileId) {\n                    self.continueUpload(fileId);\n                },\n\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                }\n            });\n        },\n\n        _isEditFilenameEnabled: function() {\n            /*jshint -W014 */\n            return this._templating.isEditFilenamePossible()\n                && !this._options.autoUpload\n                && qq.FilenameClickHandler\n                && qq.FilenameInputFocusHandler\n                && qq.FilenameInputFocusHandler;\n        },\n\n        _filenameEditHandler: function() {\n            var self = this,\n                templating = this._templating;\n\n            return {\n                templating: templating,\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n                onGetUploadStatus: function(fileId) {\n                    return self.getUploads({id: fileId}).status;\n                },\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                },\n                onSetName: function(id, newName) {\n                    self.setName(id, newName);\n                },\n                onEditingStatusChange: function(id, isEditing) {\n                    var qqInput = qq(templating.getEditInput(id)),\n                        qqFileContainer = qq(templating.getFileContainer(id));\n\n                    if (isEditing) {\n                        qqInput.addClass(\"qq-editing\");\n                        templating.hideFilename(id);\n                        templating.hideEditIcon(id);\n                    }\n                    else {\n                        qqInput.removeClass(\"qq-editing\");\n                        templating.showFilename(id);\n                        templating.showEditIcon(id);\n                    }\n\n                    // Force IE8 and older to repaint\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\n                }\n            };\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\n\n            if (this._isEditFilenameEnabled()) {\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\n                    this._templating.markFilenameEditable(id);\n                    this._templating.hideEditIcon(id);\n                }\n            }\n\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\n                this._templating.hideRetry(id);\n                this._templating.setStatusText(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\n            }\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\n                this._templating.hidePause(id);\n            }\n        },\n\n        _bindFilenameInputFocusInEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusInHandler(spec);\n        },\n\n        _bindFilenameInputFocusEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusHandler(spec);\n        },\n\n        _bindFilenameClickEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameClickHandler(spec);\n        },\n\n        _storeForLater: function(id) {\n            this._parent.prototype._storeForLater.apply(this, arguments);\n            this._templating.hideSpinner(id);\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._parent.prototype._onAllComplete.apply(this, arguments);\n            this._templating.resetTotalProgress();\n        },\n\n        _onSubmit: function(id, name) {\n            var file = this.getFile(id);\n\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\n                this._paramsStore.addReadOnly(id, {\n                    qqpath: file.qqPath\n                });\n            }\n\n            this._parent.prototype._onSubmit.apply(this, arguments);\n            this._addToList(id, name);\n        },\n\n        // The file item has been added to the DOM.\n        _onSubmitted: function(id) {\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\n            if (this._isEditFilenameEnabled()) {\n                this._templating.markFilenameEditable(id);\n                this._templating.showEditIcon(id);\n\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\n                if (!this._focusinEventSupported) {\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\n                }\n            }\n        },\n\n        // Update the progress bar & percentage as the file is uploaded\n        _onProgress: function(id, name, loaded, total) {\n            this._parent.prototype._onProgress.apply(this, arguments);\n\n            this._templating.updateProgress(id, loaded, total);\n\n            if (total === 0 || Math.round(loaded / total * 100) === 100) {\n                this._templating.hideCancel(id);\n                this._templating.hidePause(id);\n                this._templating.hideProgress(id);\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\n\n                // If ~last byte was sent, display total file size\n                this._displayFileSize(id);\n            }\n            else {\n                // If still uploading, display percentage - total size is actually the total request(s) size\n                this._displayFileSize(id, loaded, total);\n            }\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\n            this._templating.updateTotalProgress(loaded, total);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\n                templating = this._templating,\n                fileContainer = templating.getFileContainer(id),\n                self = this;\n\n            function completeUpload(result) {\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\n                // If so, don't perform any UI-related tasks related to this file.\n                if (!fileContainer) {\n                    return;\n                }\n\n                templating.setStatusText(id);\n\n                qq(fileContainer).removeClass(self._classes.retrying);\n                templating.hideProgress(id);\n\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\n                    templating.hideCancel(id);\n                }\n                templating.hideSpinner(id);\n\n                if (result.success) {\n                    self._markFileAsSuccessful(id);\n                }\n                else {\n                    qq(fileContainer).addClass(self._classes.fail);\n                    templating.showCancel(id);\n\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\n                        qq(fileContainer).addClass(self._classes.retryable);\n                        templating.showRetry(id);\n                    }\n                    self._controlFailureTextDisplay(id, result);\n                }\n            }\n\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\n            if (parentRetVal instanceof qq.Promise) {\n                parentRetVal.done(function(newResult) {\n                    completeUpload(newResult);\n                });\n\n            }\n            else {\n                completeUpload(result);\n            }\n\n            return parentRetVal;\n        },\n\n        _markFileAsSuccessful: function(id) {\n            var templating = this._templating;\n\n            if (this._isDeletePossible()) {\n                templating.showDeleteButton(id);\n            }\n\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\n\n            this._maybeUpdateThumbnail(id);\n        },\n\n        _onUploadPrep: function(id) {\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\n            this._templating.showSpinner(id);\n        },\n\n        _onUpload: function(id, name) {\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\n\n            this._templating.showSpinner(id);\n\n            return parentRetVal;\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\n\n            // Only display the pause button if we have finished uploading at least one chunk\n            // & this file can be resumed\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\n                this._templating.allowPause(id);\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._parent.prototype._onCancel.apply(this, arguments);\n            this._removeFileItem(id);\n\n            if (this._getNotFinished() === 0) {\n                this._templating.resetTotalProgress();\n            }\n        },\n\n        _onBeforeAutoRetry: function(id) {\n            var retryNumForDisplay, maxAuto, retryNote;\n\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\n\n            this._showCancelLink(id);\n\n            if (this._options.retry.showAutoRetryNote) {\n                retryNumForDisplay = this._autoRetries[id];\n                maxAuto = this._options.retry.maxAutoAttempts;\n\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\n\n                this._templating.setStatusText(id, retryNote);\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\n            }\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\n                this._templating.resetProgress(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\n                this._templating.setStatusText(id);\n                this._templating.showSpinner(id);\n                this._showCancelLink(id);\n                return true;\n            }\n            else {\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\n                this._templating.showRetry(id);\n                return false;\n            }\n        },\n\n        _onSubmitDelete: function(id) {\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\n\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\n        },\n\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\n            if (this._options.deleteFile.forceConfirm) {\n                this._showDeleteConfirm.apply(this, arguments);\n            }\n            else {\n                this._sendDeleteRequest.apply(this, arguments);\n            }\n        },\n\n        _onDeleteComplete: function(id, xhr, isError) {\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\n\n            this._templating.hideSpinner(id);\n\n            if (isError) {\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\n                this._templating.showDeleteButton(id);\n            }\n            else {\n                this._removeFileItem(id);\n            }\n        },\n\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\n            this._templating.hideDeleteButton(id);\n            this._templating.showSpinner(id);\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\n            this._deleteHandler.sendDelete.apply(this, arguments);\n        },\n\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\n            /*jshint -W004 */\n            var fileName = this.getName(id),\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\n                uuid = this.getUuid(id),\n                deleteRequestArgs = arguments,\n                self = this,\n                retVal;\n\n            retVal = this._options.showConfirm(confirmMessage);\n\n            if (qq.isGenericPromise(retVal)) {\n                retVal.then(function() {\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\n                });\n            }\n            else if (retVal !== false) {\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\n            }\n        },\n\n        _addToList: function(id, name, canned) {\n            var prependData,\n                prependIndex = 0,\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\n                record;\n\n            if (this._options.display.prependFiles) {\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\n                    prependIndex = this._filesInBatchAddedToUi - 1;\n                }\n\n                prependData = {\n                    index: prependIndex\n                };\n            }\n\n            if (!canned) {\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\n                    this._templating.disableCancel();\n                }\n\n                // Cancel all existing (previous) files and clear the list if this file is not part of\n                // a scaled file group that has already been accepted, or if this file is not part of\n                // a scaled file group at all.\n                if (!this._options.multiple) {\n                    record = this.getUploads({id: id});\n\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\n\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\n                        this._handler.cancelAll();\n                        this._clearList();\n                        this._handledProxyGroup = null;\n                    }\n                }\n            }\n\n            if (canned) {\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\n            }\n            else {\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\n            }\n\n            this._filesInBatchAddedToUi += 1;\n\n            if (canned ||\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\n\n                this._displayFileSize(id);\n            }\n        },\n\n        _clearList: function() {\n            this._templating.clearFiles();\n            this.clearStoredFiles();\n        },\n\n        _displayFileSize: function(id, loadedSize, totalSize) {\n            var size = this.getSize(id),\n                sizeForDisplay = this._formatSize(size);\n\n            if (size >= 0) {\n                if (loadedSize !== undefined && totalSize !== undefined) {\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\n                }\n\n                this._templating.updateSize(id, sizeForDisplay);\n            }\n        },\n\n        _formatProgress: function(uploadedSize, totalSize) {\n            var message = this._options.text.formatProgress;\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\n            r(\"{total_size}\", this._formatSize(totalSize));\n            return message;\n        },\n\n        _controlFailureTextDisplay: function(id, response) {\n            var mode, responseProperty, failureReason;\n\n            mode = this._options.failedUploadTextDisplay.mode;\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\n\n            if (mode === \"custom\") {\n                failureReason = response[responseProperty];\n                if (!failureReason) {\n                    failureReason = this._options.text.failUpload;\n                }\n\n                this._templating.setStatusText(id, failureReason);\n\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\n                    this._showTooltip(id, failureReason);\n                }\n            }\n            else if (mode === \"default\") {\n                this._templating.setStatusText(id, this._options.text.failUpload);\n            }\n            else if (mode !== \"none\") {\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\n            }\n        },\n\n        _showTooltip: function(id, text) {\n            this._templating.getFileContainer(id).title = text;\n        },\n\n        _showCancelLink: function(id) {\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\n                this._templating.showCancel(id);\n            }\n        },\n\n        _itemError: function(code, name, item) {\n            var message = this._parent.prototype._itemError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _batchError: function(message) {\n            this._parent.prototype._batchError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _setupPastePrompt: function() {\n            var self = this;\n\n            this._options.callbacks.onPasteReceived = function() {\n                var message = self._options.paste.namePromptMessage,\n                    defaultVal = self._options.paste.defaultName;\n\n                return self._options.showPrompt(message, defaultVal);\n            };\n        },\n\n        _fileOrBlobRejected: function(id, name) {\n            this._totalFilesInBatch -= 1;\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            this._totalFilesInBatch = items.length;\n            this._filesInBatchAddedToUi = 0;\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\n        },\n\n        _maybeUpdateThumbnail: function(fileId) {\n            var thumbnailUrl = this._thumbnailUrls[fileId],\n                fileStatus = this.getUploads({id: fileId}).status;\n\n            if (fileStatus !== qq.status.DELETED &&\n                (thumbnailUrl ||\n                this._options.thumbnails.placeholders.waitUntilResponse ||\n                !qq.supportedFeatures.imagePreviews)) {\n\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\n                // if called with a null thumbnailUrl.\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\n\n            this._addToList(id, this.getName(id), true);\n            this._templating.hideSpinner(id);\n            this._templating.hideCancel(id);\n            this._markFileAsSuccessful(id);\n\n            return id;\n        },\n\n        _setSize: function(id, newSize) {\n            this._parent.prototype._setSize.apply(this, arguments);\n\n            this._templating.updateSize(id, this._formatSize(newSize));\n        },\n\n        _sessionRequestComplete: function() {\n            this._templating.addCacheToDom();\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateHtml,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListHtml,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListHtml = fileListNode.innerHTML;\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: qq.trimStr(tempTemplateEl.innerHTML),\n                fileTemplate: qq.trimStr(fileListHtml)\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateHtml = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.innerHTML = templateHtml.template;\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = qq.toElement(templateHtml.fileTemplate),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n"]}