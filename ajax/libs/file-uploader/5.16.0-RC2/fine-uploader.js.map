{"version":3,"sources":["?","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/traditional/traditional.form.upload.handler.js","../client/js/traditional/traditional.xhr.upload.handler.js","../client/js/traditional/all-chunks-done.ajax.requester.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js"],"names":["global","qq","element","hide","style","display","this","attach","type","fn","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","name","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","each","idx","val","push","getFirstByClass","children","child","firstChild","nodeType","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","exec","getAttribute","undefined","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","data","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","length","Uint8Array","character","charCodeAt","log","message","level","console","isObject","variable","Object","prototype","toString","call","isFunction","isArray","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","args","Array","slice","arguments","newStr","nextIdxToReplace","strBefore","substring","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","toLowerCase","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","error","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","prop","override","target","sourceFn","super_","source","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","retVal","Storage","key","getItem","charAt","bind","oldFunc","context","newArgs","concat","apply","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome14OrHigher","match","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","self","disposeSupport","options","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","index","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onBeforeStatusChange","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","params","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","_options","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","isResumable","hasResumeRecord","debug","pauseUpload","removeFileRef","expunge","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","_customResumeDataStore","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setCustomResumeData","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","fileRecord","_onDeleteComplete","errorMessage","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","callbacks","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","toUpperCase","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","namespace","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadResult","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkResult","partIndex","onUploadChunkSuccess","_onUploadChunkSuccess","onResume","customResumeData","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","isInProgress","getCustomResumeData","_getCustomResumeData","UploadHandlerController","_fileOrBlobRejected","_formatSize","sizeSymbols","max","toFixed","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_handleDeleteSuccess","_handleDeleteFailed","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","enableAuto","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","allowEmpty","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","warnBeforeUnload","filenameParam","forceMultipart","omitDefaultParams","paramsInBody","requireSuccessJson","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","jsonPayload","resetOnStatus","recordsExpireIn","resuming","customKeys","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","normalizedResponse","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","onUploadChunkPromise","requestOverrides","uploadChunkData","overrides","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","_getLocalStorageId","isAttemptingResume","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","getChunkSize","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","chunkingState","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","formatVersion","localStorageId","forEach","_getMimeType","_getPersistableData","ceil","_markNotResumable","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","el","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","getIframeContentJson","doc","innerHtml","contentWindow","nodeValue","createForm","responseFromMessage","multipart","addChunkingSpecificParams","allChunksDoneRequester","AllChunksDoneAjaxRequester","createReadyStateChangedHandler","onUploadOrChunkComplete","getChunksCompleteParams","isErrorUploadResponse","parseResponse","sendChunksCompleteRequest","complete","setParamsAndGetEntityToSend","entityToSendParams","xhrOverrides","customParams","defaultParams","xhrOverrideParams","setUploadHeaders","headersOptions","headerOverrides","headerName","headerValue","extraHeaders","uploadChunkParams","toSend","promises","endpointHandler","DragAndDrop","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","dropZoneElements","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","includes","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","relatedTarget","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","FineUploader","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","content","createDocumentFragment","map","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","uploader","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateDom","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","update","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListEl","defaultButton","dropTextEl","uploaderEl","cloneNode","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"fine-uploader.js","sourcesContent":[null,"/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\nqq.version = \"5.16.0-RC2\";\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    // adapted from https://stackoverflow.com/a/23278460/486979\n    supportsFolderDrop = supportsFileDrop && (function() {\n        var input = document.createElement(\"input\");\n\n        input.type = \"file\";\n        return !!(\"webkitdirectory\" in (input || document.querySelectorAll(\"input[type=file]\")[0]));\n    }());\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         * - onBeforeStatusChange(fileId): callback that is executed before the status change is broadcast\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            spec.onBeforeStatusChange && spec.onBeforeStatusChange(id);\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\n/**\n * Defines the public API for FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.basePublicApi = {\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\n        addBlobs: function(blobDataOrArray, params, endpoint) {\n            this.addFiles(blobDataOrArray, params, endpoint);\n        },\n\n        addInitialFiles: function(cannedFileList) {\n            var self = this;\n\n            qq.each(cannedFileList, function(index, cannedFile) {\n                self._addCannedFile(cannedFile);\n            });\n        },\n\n        addFiles: function(data, params, endpoint) {\n            this._maybeHandleIos8SafariWorkaround();\n\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\n\n                processBlob = qq.bind(function(blob) {\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processBlobData = qq.bind(function(blobData) {\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\n                }, this),\n\n                processCanvas = qq.bind(function(canvas) {\n                    var blob = qq.canvasToBlob(canvas);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName + \".png\"\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processCanvasData = qq.bind(function(canvasData) {\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: canvasData.name\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processFileOrInput = qq.bind(function(fileOrInput) {\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\n                        var files = Array.prototype.slice.call(fileOrInput.files),\n                            self = this;\n\n                        qq.each(files, function(idx, file) {\n                            self._handleNewFile(file, batchId, verifiedFiles);\n                        });\n                    }\n                    else {\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\n                    }\n                }, this),\n\n                normalizeData = function() {\n                    if (qq.isFileList(data)) {\n                        data = Array.prototype.slice.call(data);\n                    }\n                    data = [].concat(data);\n                },\n\n                self = this,\n                verifiedFiles = [];\n\n            this._currentBatchId = batchId;\n\n            if (data) {\n                normalizeData();\n\n                qq.each(data, function(idx, fileContainer) {\n                    if (qq.isFileOrInput(fileContainer)) {\n                        processFileOrInput(fileContainer);\n                    }\n                    else if (qq.isBlob(fileContainer)) {\n                        processBlob(fileContainer);\n                    }\n                    else if (qq.isObject(fileContainer)) {\n                        if (fileContainer.blob && fileContainer.name) {\n                            processBlobData(fileContainer);\n                        }\n                        else if (fileContainer.canvas && fileContainer.name) {\n                            processCanvasData(fileContainer);\n                        }\n                    }\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\n                        processCanvas(fileContainer);\n                    }\n                    else {\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\n                    }\n                });\n\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\n            }\n        },\n\n        cancel: function(id) {\n            this._handler.cancel(id);\n        },\n\n        cancelAll: function() {\n            var storedIdsCopy = [],\n                self = this;\n\n            qq.extend(storedIdsCopy, this._storedIds);\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\n                self.cancel(storedFileId);\n            });\n\n            this._handler.cancelAll();\n        },\n\n        clearStoredFiles: function() {\n            this._storedIds = [];\n        },\n\n        continueUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            if (uploadData.status === qq.status.PAUSED) {\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\n                this._uploadFile(id);\n                return true;\n            }\n            else {\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        deleteFile: function(id) {\n            return this._onSubmitDelete(id);\n        },\n\n        // TODO document?\n        doesExist: function(fileOrBlobId) {\n            return this._handler.isValid(fileOrBlobId);\n        },\n\n        // Generate a variable size thumbnail on an img or canvas,\n        // returning a promise that is fulfilled when the attempt completes.\n        // Thumbnail can either be based off of a URL for an image returned\n        // by the server in the upload response, or the associated `Blob`.\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\n            var promiseToReturn = new qq.Promise(),\n                fileOrUrl, options;\n\n            if (this._imageGenerator) {\n                fileOrUrl = this._thumbnailUrls[fileId];\n                options = {\n                    customResizeFunction: customResizeFunction,\n                    maxSize: maxSize > 0 ? maxSize : null,\n                    scale: maxSize > 0\n                };\n\n                // If client-side preview generation is possible\n                // and we are not specifically looking for the image URl returned by the server...\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\n                    fileOrUrl = this.getFile(fileId);\n                }\n\n                /* jshint eqeqeq:false,eqnull:true */\n                if (fileOrUrl == null) {\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\n                }\n                else {\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\n                        function success(modifiedContainer) {\n                            promiseToReturn.success(modifiedContainer);\n                        },\n\n                        function failure(container, reason) {\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\n                        }\n                    );\n                }\n            }\n            else {\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\n            }\n\n            return promiseToReturn;\n        },\n\n        getButton: function(fileId) {\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\n        },\n\n        getEndpoint: function(fileId) {\n            return this._endpointStore.get(fileId);\n        },\n\n        getFile: function(fileOrBlobId) {\n            return this._handler.getFile(fileOrBlobId) || null;\n        },\n\n        getInProgress: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED\n                ]\n            }).length;\n        },\n\n        getName: function(id) {\n            return this._uploadData.retrieve({id: id}).name;\n        },\n\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\n        getParentId: function(id) {\n            var uploadDataEntry = this.getUploads({id: id}),\n                parentId = null;\n\n            if (uploadDataEntry) {\n                if (uploadDataEntry.parentId !== undefined) {\n                    parentId = uploadDataEntry.parentId;\n                }\n            }\n\n            return parentId;\n        },\n\n        getResumableFilesData: function() {\n            return this._handler.getResumableFilesData();\n        },\n\n        getSize: function(id) {\n            return this._uploadData.retrieve({id: id}).size;\n        },\n\n        getNetUploads: function() {\n            return this._netUploaded;\n        },\n\n        getRemainingAllowedItems: function() {\n            var allowedItems = this._currentItemLimit;\n\n            if (allowedItems > 0) {\n                return allowedItems - this._netUploadedOrQueued;\n            }\n\n            return null;\n        },\n\n        getUploads: function(optionalFilter) {\n            return this._uploadData.retrieve(optionalFilter);\n        },\n\n        getUuid: function(id) {\n            return this._uploadData.retrieve({id: id}).uuid;\n        },\n\n        isResumable: function(id) {\n            return this._handler.hasResumeRecord(id);\n        },\n\n        log: function(str, level) {\n            if (this._options.debug && (!level || level === \"info\")) {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\n            }\n            else if (level && level !== \"info\") {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\n\n            }\n        },\n\n        pauseUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            // Pause only really makes sense if the file is uploading or retrying\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\n                if (this._handler.pause(id)) {\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\n                    return true;\n                }\n                else {\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\n                }\n            }\n            else {\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        removeFileRef: function(id) {\n            this._handler.expunge(id);\n        },\n\n        reset: function() {\n            this.log(\"Resetting uploader...\");\n\n            this._handler.reset();\n            this._storedIds = [];\n            this._autoRetries = [];\n            this._retryTimeouts = [];\n            this._preventRetries = [];\n            this._thumbnailUrls = [];\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n\n            this._paramsStore.reset();\n            this._endpointStore.reset();\n            this._netUploadedOrQueued = 0;\n            this._netUploaded = 0;\n            this._uploadData.reset();\n            this._buttonIdsForFileIds = [];\n\n            this._pasteHandler && this._pasteHandler.reset();\n            this._options.session.refreshOnReset && this._refreshSessionData();\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n\n            this._totalProgress && this._totalProgress.reset();\n\n            this._customResumeDataStore.reset();\n        },\n\n        retry: function(id) {\n            return this._manualRetry(id);\n        },\n\n        scaleImage: function(id, specs) {\n            var self = this;\n\n            return qq.Scaler.prototype.scaleImage(id, specs, {\n                log: qq.bind(self.log, self),\n                getFile: qq.bind(self.getFile, self),\n                uploadData: self._uploadData\n            });\n        },\n\n        setCustomHeaders: function(headers, id) {\n            this._customHeadersStore.set(headers, id);\n        },\n\n        setCustomResumeData: function(id, data) {\n            this._customResumeDataStore.set(data, id);\n        },\n\n        setDeleteFileCustomHeaders: function(headers, id) {\n            this._deleteFileCustomHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileEndpoint: function(endpoint, id) {\n            this._deleteFileEndpointStore.set(endpoint, id);\n        },\n\n        setDeleteFileParams: function(params, id) {\n            this._deleteFileParamsStore.set(params, id);\n        },\n\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\n        setEndpoint: function(endpoint, id) {\n            this._endpointStore.set(endpoint, id);\n        },\n\n        setForm: function(elementOrId) {\n            this._updateFormSupportAndParams(elementOrId);\n        },\n\n        setItemLimit: function(newItemLimit) {\n            this._currentItemLimit = newItemLimit;\n        },\n\n        setName: function(id, newName) {\n            this._uploadData.updateName(id, newName);\n        },\n\n        setParams: function(params, id) {\n            this._paramsStore.set(params, id);\n        },\n\n        setUuid: function(id, newUuid) {\n            return this._uploadData.uuidChanged(id, newUuid);\n        },\n\n        /**\n         * Expose the internal status of a file id to the public api for manual state changes\n         * @public\n         *\n         * @param {Number} id,\n         * @param {String} newStatus\n         *\n         * @todo Implement the remaining methods\n         */\n        setStatus: function(id, newStatus) {\n            var fileRecord = this.getUploads({id: id});\n            if (!fileRecord) {\n                throw new qq.Error(id + \" is not a valid file ID.\");\n            }\n\n            switch (newStatus) {\n                case qq.status.DELETED:\n                    this._onDeleteComplete(id, null, false);\n                    break;\n                case qq.status.DELETE_FAILED:\n                    this._onDeleteComplete(id, null, true);\n                    break;\n                default:\n                    var errorMessage = \"Method setStatus called on '\" + name + \"' not implemented yet for \" + newStatus;\n                    this.log(errorMessage);\n                    throw new qq.Error(errorMessage);\n            }\n        },\n\n        uploadStoredFiles: function() {\n            if (this._storedIds.length === 0) {\n                this._itemError(\"noFilesError\");\n            }\n            else {\n                this._uploadStoredFiles();\n            }\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploaderBasic mode.\n     */\n    qq.basePrivateApi = {\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\n        _addCannedFile: function(sessionData) {\n            var self = this;\n\n            return this._uploadData.addFile({\n                uuid: sessionData.uuid,\n                name: sessionData.name,\n                size: sessionData.size,\n                status: qq.status.UPLOAD_SUCCESSFUL,\n                onBeforeStatusChange: function(id) {\n                    sessionData.deleteFileEndpoint && self.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\n                    sessionData.deleteFileParams && self.setDeleteFileParams(sessionData.deleteFileParams, id);\n\n                    if (sessionData.thumbnailUrl) {\n                        self._thumbnailUrls[id] = sessionData.thumbnailUrl;\n                    }\n\n                    self._netUploaded++;\n                    self._netUploadedOrQueued++;\n                }\n            });\n        },\n\n        _annotateWithButtonId: function(file, associatedInput) {\n            if (qq.isFile(file)) {\n                file.qqButtonId = this._getButtonId(associatedInput);\n            }\n        },\n\n        _batchError: function(message) {\n            this._options.callbacks.onError(null, null, message, undefined);\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return new qq.DeleteFileAjaxRequester({\n                method: this._options.deleteFile.method.toUpperCase(),\n                maxConnections: this._options.maxConnections,\n                uuidParamName: this._options.request.uuidName,\n                customHeaders: this._deleteFileCustomHeadersStore,\n                paramsStore: this._deleteFileParamsStore,\n                endpointStore: this._deleteFileEndpointStore,\n                cors: this._options.cors,\n                log: qq.bind(self.log, self),\n                onDelete: function(id) {\n                    self._onDelete(id);\n                    self._options.callbacks.onDelete(id);\n                },\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                }\n\n            });\n        },\n\n        _createPasteHandler: function() {\n            var self = this;\n\n            return new qq.PasteSupport({\n                targetElement: this._options.paste.targetElement,\n                callbacks: {\n                    log: qq.bind(self.log, self),\n                    pasteReceived: function(blob) {\n                        self._handleCheckedCallback({\n                            name: \"onPasteReceived\",\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\n                            identifier: \"pasted image\"\n                        });\n                    }\n                }\n            });\n        },\n\n        _createStore: function(initialValue, _readOnlyValues_) {\n            var store = {},\n                catchall = initialValue,\n                perIdReadOnlyValues = {},\n                readOnlyValues = _readOnlyValues_,\n                copy = function(orig) {\n                    if (qq.isObject(orig)) {\n                        return qq.extend({}, orig);\n                    }\n                    return orig;\n                },\n                getReadOnlyValues = function() {\n                    if (qq.isFunction(readOnlyValues)) {\n                        return readOnlyValues();\n                    }\n                    return readOnlyValues;\n                },\n                includeReadOnlyValues = function(id, existing) {\n                    if (readOnlyValues && qq.isObject(existing)) {\n                        qq.extend(existing, getReadOnlyValues());\n                    }\n\n                    if (perIdReadOnlyValues[id]) {\n                        qq.extend(existing, perIdReadOnlyValues[id]);\n                    }\n                };\n\n            return {\n                set: function(val, id) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id == null) {\n                        store = {};\n                        catchall = copy(val);\n                    }\n                    else {\n                        store[id] = copy(val);\n                    }\n                },\n\n                get: function(id) {\n                    var values;\n\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id != null && store[id]) {\n                        values = store[id];\n                    }\n                    else {\n                        values = copy(catchall);\n                    }\n\n                    includeReadOnlyValues(id, values);\n\n                    return copy(values);\n                },\n\n                addReadOnly: function(id, values) {\n                    // Only applicable to Object stores\n                    if (qq.isObject(store)) {\n                        // If null ID, apply readonly values to all files\n                        if (id === null) {\n                            if (qq.isFunction(values)) {\n                                readOnlyValues = values;\n                            }\n                            else {\n                                readOnlyValues = readOnlyValues || {};\n                                qq.extend(readOnlyValues, values);\n                            }\n                        }\n                        else {\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\n                            qq.extend(perIdReadOnlyValues[id], values);\n                        }\n                    }\n                },\n\n                remove: function(fileId) {\n                    return delete store[fileId];\n                },\n\n                reset: function() {\n                    store = {};\n                    perIdReadOnlyValues = {};\n                    catchall = initialValue;\n                }\n            };\n        },\n\n        _createUploadDataTracker: function() {\n            var self = this;\n\n            return new qq.UploadData({\n                getName: function(id) {\n                    return self.getName(id);\n                },\n                getUuid: function(id) {\n                    return self.getUuid(id);\n                },\n                getSize: function(id) {\n                    return self.getSize(id);\n                },\n                onStatusChange: function(id, oldStatus, newStatus) {\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\n                    self._maybeAllComplete(id, newStatus);\n\n                    if (self._totalProgress) {\n                        setTimeout(function() {\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\n                        }, 0);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Generate a tracked upload button.\n         *\n         * @param spec Object containing a required `element` property\n         * along with optional `multiple`, `accept`, and `folders`.\n         * @returns {qq.UploadButton}\n         * @private\n         */\n        _createUploadButton: function(spec) {\n            var self = this,\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\n                button;\n\n            function allowMultiple() {\n                if (qq.supportedFeatures.ajaxUploading) {\n                    // Workaround for bug in iOS7+ (see #1039)\n                    if (self._options.workarounds.iosEmptyVideos &&\n                        qq.ios() &&\n                        !qq.ios6() &&\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\n\n                        return false;\n                    }\n\n                    if (spec.multiple === undefined) {\n                        return self._options.multiple;\n                    }\n\n                    return spec.multiple;\n                }\n\n                return false;\n            }\n\n            button = new qq.UploadButton({\n                acceptFiles: acceptFiles,\n                element: spec.element,\n                focusClass: this._options.classes.buttonFocus,\n                folders: spec.folders,\n                hoverClass: this._options.classes.buttonHover,\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\n                multiple: allowMultiple(),\n                name: this._options.request.inputName,\n                onChange: function(input) {\n                    self._onInputChange(input);\n                },\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\n            });\n\n            this._disposeSupport.addDisposer(function() {\n                button.dispose();\n            });\n\n            self._buttons.push(button);\n\n            return button;\n        },\n\n        _createUploadHandler: function(additionalOptions, namespace) {\n            var self = this,\n                lastOnProgress = {},\n                options = {\n                    debug: this._options.debug,\n                    maxConnections: this._options.maxConnections,\n                    cors: this._options.cors,\n                    paramsStore: this._paramsStore,\n                    endpointStore: this._endpointStore,\n                    chunking: this._options.chunking,\n                    resume: this._options.resume,\n                    blobs: this._options.blobs,\n                    log: qq.bind(self.log, self),\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\n                    onProgress: function(id, name, loaded, total) {\n                        if (loaded < 0 || total < 0) {\n                            return;\n                        }\n\n                        if (lastOnProgress[id]) {\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\n                                self._onProgress(id, name, loaded, total);\n                                self._options.callbacks.onProgress(id, name, loaded, total);\n                            }\n                        }\n                        else {\n                            self._onProgress(id, name, loaded, total);\n                            self._options.callbacks.onProgress(id, name, loaded, total);\n                        }\n\n                        lastOnProgress[id] = {loaded: loaded, total: total};\n\n                    },\n                    onComplete: function(id, name, result, xhr) {\n                        delete lastOnProgress[id];\n\n                        var status = self.getUploads({id: id}).status,\n                            retVal;\n\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\n                        // invoked by the browser multiple times for the same XHR instance with the same state\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\n                        // done this.\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\n                            return;\n                        }\n\n                        retVal = self._onComplete(id, name, result, xhr);\n\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\n                        // until the promise has been fulfilled.\n                        if (retVal instanceof  qq.Promise) {\n                            retVal.done(function() {\n                                self._options.callbacks.onComplete(id, name, result, xhr);\n                            });\n                        }\n                        else {\n                            self._options.callbacks.onComplete(id, name, result, xhr);\n                        }\n                    },\n                    onCancel: function(id, name, cancelFinalizationEffort) {\n                        var promise = new qq.Promise();\n\n                        self._handleCheckedCallback({\n                            name: \"onCancel\",\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\n                            onFailure: promise.failure,\n                            onSuccess: function() {\n                                cancelFinalizationEffort.then(function() {\n                                    self._onCancel(id, name);\n                                });\n\n                                promise.success();\n                            },\n                            identifier: id\n                        });\n\n                        return promise;\n                    },\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\n                    onUpload: function(id, name) {\n                        self._onUpload(id, name);\n                        var onUploadResult = self._options.callbacks.onUpload(id, name);\n\n                        if (qq.isGenericPromise(onUploadResult)) {\n                            self.log(qq.format(\"onUpload for {} returned a Promise - waiting for resolution.\", id));\n                            return onUploadResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunk: function(id, name, chunkData) {\n                        self._onUploadChunk(id, chunkData);\n                        var onUploadChunkResult = self._options.callbacks.onUploadChunk(id, name, chunkData);\n\n                        if (qq.isGenericPromise(onUploadChunkResult)) {\n                            self.log(qq.format(\"onUploadChunk for {}.{} returned a Promise - waiting for resolution.\", id, chunkData.partIndex));\n                            return onUploadChunkResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\n                        self._onUploadChunkSuccess(id, chunkData);\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\n                    },\n                    onResume: function(id, name, chunkData, customResumeData) {\n                        return self._options.callbacks.onResume(id, name, chunkData, customResumeData);\n                    },\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\n                        return self._onAutoRetry.apply(self, arguments);\n                    },\n                    onUuidChanged: function(id, newUuid) {\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\n                        self.setUuid(id, newUuid);\n                    },\n                    getName: qq.bind(self.getName, self),\n                    getUuid: qq.bind(self.getUuid, self),\n                    getSize: qq.bind(self.getSize, self),\n                    setSize: qq.bind(self._setSize, self),\n                    getDataByUuid: function(uuid) {\n                        return self.getUploads({uuid: uuid});\n                    },\n                    isQueued: function(id) {\n                        var status = self.getUploads({id: id}).status;\n                        return status === qq.status.QUEUED ||\n                            status === qq.status.SUBMITTED ||\n                            status === qq.status.UPLOAD_RETRYING ||\n                            status === qq.status.PAUSED;\n                    },\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\n                    getIdsInBatch: self._uploadData.getIdsInBatch,\n                    isInProgress: function(id) {\n                        return self.getUploads({id: id}).status === qq.status.UPLOADING;\n                    },\n                    getCustomResumeData: qq.bind(self._getCustomResumeData, self),\n                    setStatus: function(id, status) {\n                        self._uploadData.setStatus(id, status);\n                    }\n                };\n\n            qq.each(this._options.request, function(prop, val) {\n                options[prop] = val;\n            });\n\n            options.customHeaders = this._customHeadersStore;\n\n            if (additionalOptions) {\n                qq.each(additionalOptions, function(key, val) {\n                    options[key] = val;\n                });\n            }\n\n            return new qq.UploadHandlerController(options, namespace);\n        },\n\n        _fileOrBlobRejected: function(id) {\n            this._netUploadedOrQueued--;\n            this._uploadData.setStatus(id, qq.status.REJECTED);\n        },\n\n        _formatSize: function(bytes) {\n            if (bytes === 0) {\n                return bytes + this._options.text.sizeSymbols[0];\n            }\n            var i = -1;\n            do {\n                bytes = bytes / 1000;\n                i++;\n            } while (bytes > 999);\n\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\n        },\n\n        // Creates an internal object that tracks various properties of each extra button,\n        // and then actually creates the extra button.\n        _generateExtraButtonSpecs: function() {\n            var self = this;\n\n            this._extraButtonSpecs = {};\n\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\n                var multiple = extraButtonOptionEntry.multiple,\n                    validation = qq.extend({}, self._options.validation, true),\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\n\n                if (multiple === undefined) {\n                    multiple = self._options.multiple;\n                }\n\n                if (extraButtonSpec.validation) {\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\n                }\n\n                qq.extend(extraButtonSpec, {\n                    multiple: multiple,\n                    validation: validation\n                }, true);\n\n                self._initExtraButton(extraButtonSpec);\n            });\n        },\n\n        _getButton: function(buttonId) {\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\n\n            if (extraButtonsSpec) {\n                return extraButtonsSpec.element;\n            }\n            else if (buttonId === this._defaultButtonId) {\n                return this._options.button;\n            }\n        },\n\n        /**\n         * Gets the internally used tracking ID for a button.\n         *\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\n         * @private\n         */\n        _getButtonId: function(buttonOrFileInputOrFile) {\n            var inputs, fileInput,\n                fileBlobOrInput = buttonOrFileInputOrFile;\n\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\n            }\n\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\n                if (qq.isFile(fileBlobOrInput)) {\n                    return fileBlobOrInput.qqButtonId;\n                }\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\n\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\n\n                qq.each(inputs, function(idx, input) {\n                    if (input.getAttribute(\"type\") === \"file\") {\n                        fileInput = input;\n                        return false;\n                    }\n                });\n\n                if (fileInput) {\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n            }\n        },\n\n        _getCustomResumeData: function(fileId) {\n            return this._customResumeDataStore.get(fileId);\n        },\n\n        _getNotFinished: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED,\n                    qq.status.SUBMITTING,\n                    qq.status.SUBMITTED,\n                    qq.status.PAUSED\n                ]\n            }).length;\n        },\n\n        // Get the validation options for this button.  Could be the default validation option\n        // or a specific one assigned to this particular button.\n        _getValidationBase: function(buttonId) {\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\n\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\n        },\n\n        _getValidationDescriptor: function(fileWrapper) {\n            if (fileWrapper.file instanceof qq.BlobProxy) {\n                return {\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\n                    size: fileWrapper.file.referenceBlob.size\n                };\n            }\n\n            return {\n                name: this.getUploads({id: fileWrapper.id}).name,\n                size: this.getUploads({id: fileWrapper.id}).size\n            };\n        },\n\n        _getValidationDescriptors: function(fileWrappers) {\n            var self = this,\n                fileDescriptors = [];\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\n            });\n\n            return fileDescriptors;\n        },\n\n        // Allows camera access on either the default or an extra button for iOS devices.\n        _handleCameraAccess: function() {\n            if (this._options.camera.ios && qq.ios()) {\n                var acceptIosCamera = \"image/*;capture=camera\",\n                    button = this._options.camera.button,\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\n                    optionRoot = this._options;\n\n                // If we are not targeting the default button, it is an \"extra\" button\n                if (buttonId && buttonId !== this._defaultButtonId) {\n                    optionRoot = this._extraButtonSpecs[buttonId];\n                }\n\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\n                optionRoot.multiple = false;\n\n                // update the options\n                if (optionRoot.validation.acceptFiles === null) {\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\n                }\n                else {\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\n                }\n\n                // update the already-created button\n                qq.each(this._buttons, function(idx, button) {\n                    if (button.getButtonId() === buttonId) {\n                        button.setMultiple(optionRoot.multiple);\n                        button.setAcceptFiles(optionRoot.acceptFiles);\n\n                        return false;\n                    }\n                });\n            }\n        },\n\n        _handleCheckedCallback: function(details) {\n            var self = this,\n                callbackRetVal = details.callback();\n\n            if (qq.isGenericPromise(callbackRetVal)) {\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\n                return callbackRetVal.then(\n                    function(successParam) {\n                        self.log(details.name + \" promise success for \" + details.identifier);\n                        details.onSuccess(successParam);\n                    },\n                    function() {\n                        if (details.onFailure) {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                            details.onFailure();\n                        }\n                        else {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                        }\n                    });\n            }\n\n            if (callbackRetVal !== false) {\n                details.onSuccess(callbackRetVal);\n            }\n            else {\n                if (details.onFailure) {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\n                    details.onFailure();\n                }\n                else {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\n                }\n            }\n\n            return callbackRetVal;\n        },\n\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\n            var self = this,\n                uuid = qq.getUniqueId(),\n                size = -1,\n                name = qq.getFilename(file),\n                actualFile = file.blob || file,\n                handler = this._customNewFileHandler ?\n                    this._customNewFileHandler :\n                    qq.bind(self._handleNewFileGeneric, self);\n\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\n                size = actualFile.size;\n            }\n\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\n                uploadData: self._uploadData,\n                paramsStore: self._paramsStore,\n                addFileToHandler: function(id, file) {\n                    self._handler.add(id, file);\n                    self._netUploadedOrQueued++;\n                    self._trackButton(id);\n                }\n            });\n        },\n\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\n            var self = this;\n            var id = this._uploadData.addFile({\n                uuid: uuid,\n                name: name,\n                size: size,\n                batchId: batchId,\n\n                onBeforeStatusChange: function(id) {\n                    self._handler.add(id, file);\n                }\n            });\n\n            this._trackButton(id);\n\n            this._netUploadedOrQueued++;\n\n            fileList.push({id: id, file: file});\n        },\n\n        _handlePasteSuccess: function(blob, extSuppliedName) {\n            var extension = blob.type.split(\"/\")[1],\n                name = extSuppliedName;\n\n            /*jshint eqeqeq: true, eqnull: true*/\n            if (name == null) {\n                name = this._options.paste.defaultName;\n            }\n\n            name += \".\" + extension;\n\n            this.addFiles({\n                name: name,\n                blob: blob\n            });\n        },\n\n        _handleDeleteSuccess: function(id) {\n            if (this.getUploads({id: id}).status !== qq.status.DELETED) {\n                var name = this.getName(id);\n\n                this._netUploadedOrQueued--;\n                this._netUploaded--;\n                this._handler.expunge(id);\n                this._uploadData.setStatus(id, qq.status.DELETED);\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\n            }\n        },\n\n        _handleDeleteFailed: function(id, xhrOrXdr) {\n            var name = this.getName(id);\n\n            this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\n            this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\n\n            // Check first if xhrOrXdr is actually passed or valid\n            // For error reporting, we only have access to the response status if this is not\n            // an `XDomainRequest`.\n            if (!xhrOrXdr || xhrOrXdr.withCredentials === undefined) {\n                this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\n            }\n            else {\n                this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\n            }\n        },\n\n        // Creates an extra button element\n        _initExtraButton: function(spec) {\n            var button = this._createUploadButton({\n                accept: spec.validation.acceptFiles,\n                allowedExtensions: spec.validation.allowedExtensions,\n                element: spec.element,\n                folders: spec.folders,\n                multiple: spec.multiple,\n                title: spec.fileInputTitle\n            });\n\n            this._extraButtonSpecs[button.getButtonId()] = spec;\n        },\n\n        _initFormSupportAndParams: function() {\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n            );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore = this._createStore(\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\n                );\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\n                }\n            }\n            else {\n                this._paramsStore = this._createStore(this._options.request.params);\n            }\n        },\n\n        _isDeletePossible: function() {\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\n                return false;\n            }\n\n            if (this._options.cors.expected) {\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\n                    return true;\n                }\n\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            return true;\n        },\n\n        _isAllowedExtension: function(allowed, fileName) {\n            var valid = false;\n\n            if (!allowed.length) {\n                return true;\n            }\n\n            qq.each(allowed, function(idx, allowedExt) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExt)) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\n\n                    if (fileName.match(extRegex) != null) {\n                        valid = true;\n                        return false;\n                    }\n                }\n            });\n\n            return valid;\n        },\n\n        /**\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\n         *\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\n         * @param maybeNameOrNames names of the items that have failed, if applicable\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\n         * @private\n         */\n        _itemError: function(code, maybeNameOrNames, item) {\n            var message = this._options.messages[code],\n                allowedExtensions = [],\n                names = [].concat(maybeNameOrNames),\n                name = names[0],\n                buttonId = this._getButtonId(item),\n                validationBase = this._getValidationBase(buttonId),\n                extensionsForMessage, placeholderMatch;\n\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExtension)) {\n                    allowedExtensions.push(allowedExtension);\n                }\n            });\n\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\n\n            r(\"{file}\", this._options.formatFileName(name));\n            r(\"{extensions}\", extensionsForMessage);\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\n\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\n            if (placeholderMatch !== null) {\n                qq.each(placeholderMatch, function(idx, placeholder) {\n                    r(placeholder, names[idx]);\n                });\n            }\n\n            this._options.callbacks.onError(null, name, message, undefined);\n\n            return message;\n        },\n\n        /**\n         * Conditionally orders a manual retry of a failed upload.\n         *\n         * @param id File ID of the failed upload\n         * @param callback Optional callback to invoke if a retry is prudent.\n         * In lieu of asking the upload handler to retry.\n         * @returns {boolean} true if a manual retry will occur\n         * @private\n         */\n        _manualRetry: function(id, callback) {\n            if (this._onBeforeManualRetry(id)) {\n                this._netUploadedOrQueued++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n\n                if (callback) {\n                    callback(id);\n                }\n                else {\n                    this._handler.retry(id);\n                }\n\n                return true;\n            }\n        },\n\n        _maybeAllComplete: function(id, status) {\n            var self = this,\n                notFinished = this._getNotFinished();\n\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\n                this._succeededSinceLastAllComplete.push(id);\n            }\n            else if (status === qq.status.UPLOAD_FAILED) {\n                this._failedSinceLastAllComplete.push(id);\n            }\n\n            if (notFinished === 0 &&\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\n                setTimeout(function() {\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\n                }, 0);\n            }\n        },\n\n        _maybeHandleIos8SafariWorkaround: function() {\n            var self = this;\n\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n                setTimeout(function() {\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\n                }, 0);\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\n            }\n        },\n\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\n            // Assuming no one will actually set the response code to something other than 200\n            // and still set 'success' to true...\n            if (!response.success) {\n                if (xhr && xhr.status !== 200 && !response.error) {\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\n                }\n                else {\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\n                }\n            }\n        },\n\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\n            var self = this;\n\n            if (items.length > index) {\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\n                    setTimeout(function() {\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\n                            buttonId = self._getButtonId(items[index].file),\n                            button = self._getButton(buttonId);\n\n                        self._handleCheckedCallback({\n                            name: \"onValidate\",\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\n                        });\n                    }, 0);\n                }\n                else if (!validItem) {\n                    for (; index < items.length; index++) {\n                        self._fileOrBlobRejected(items[index].id);\n                    }\n                }\n            }\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\n\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n        },\n\n        /**\n         * Attempt to automatically retry a failed upload.\n         *\n         * @param id The file ID of the failed upload\n         * @param name The name of the file associated with the failed upload\n         * @param responseJSON Response from the server, parsed into a javascript object\n         * @param xhr Ajax transport used to send the failed request\n         * @param callback Optional callback to be invoked if a retry is prudent.\n         * Invoked in lieu of asking the upload handler to retry.\n         * @returns {boolean} true if an auto-retry will occur\n         * @private\n         */\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\n            var self = this;\n\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\n\n            if (self._shouldAutoRetry(id)) {\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\n\n                self._maybeParseAndSendUploadError.apply(self, arguments);\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\n                self._onBeforeAutoRetry(id, name);\n\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n                self._retryTimeouts[id] = setTimeout(function() {\n                    self.log(\"Starting retry for \" + name + \"...\");\n\n                    if (callback) {\n                        callback(id);\n                    }\n                    else {\n                        self._handler.retry(id);\n                    }\n                }, retryWaitPeriod);\n\n                return true;\n            }\n        },\n\n        _onBeforeAutoRetry: function(id, name) {\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            var itemLimit = this._currentItemLimit,\n                fileName;\n\n            if (this._preventRetries[id]) {\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\n                return false;\n            }\n            else if (this._handler.isValid(id)) {\n                fileName = this.getName(id);\n\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\n                    return false;\n                }\n\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\n                    this._itemError(\"retryFailTooManyItems\");\n                    return false;\n                }\n\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\n                return true;\n            }\n            else {\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\n                return false;\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._netUploadedOrQueued--;\n\n            clearTimeout(this._retryTimeouts[id]);\n\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\n                this._storedIds.splice(storedItemIndex, 1);\n            }\n\n            this._uploadData.setStatus(id, qq.status.CANCELED);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            if (!result.success) {\n                this._netUploadedOrQueued--;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\n\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\n                    this._preventRetries[id] = true;\n                }\n            }\n            else {\n                if (result.thumbnailUrl) {\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\n                }\n\n                this._netUploaded++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\n            }\n\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\n\n            return result.success ? true : false;\n        },\n\n        _onDelete: function(id) {\n            this._uploadData.setStatus(id, qq.status.DELETING);\n        },\n\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\n            var name = this.getName(id);\n\n            if (isError) {\n                this._handleDeleteFailed(id, xhrOrXdr);\n            }\n            else {\n                this._handleDeleteSuccess(id);\n            }\n        },\n\n        _onInputChange: function(input) {\n            var fileIndex;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\n                    this._annotateWithButtonId(input.files[fileIndex], input);\n                }\n\n                this.addFiles(input.files);\n            }\n            // Android 2.3.x will fire `onchange` even if no file has been selected\n            else if (input.value.length > 0) {\n                this.addFiles(input);\n            }\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n        },\n\n        _onProgress: function(id, name, loaded, total) {\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\n        },\n\n        _onSubmit: function(id, name) {\n            //nothing to do yet in core uploader\n        },\n\n        _onSubmitCallbackSuccess: function(id, name) {\n            this._onSubmit.apply(this, arguments);\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\n            this._onSubmitted.apply(this, arguments);\n\n            if (this._options.autoUpload) {\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n                this._uploadFile(id);\n            }\n            else {\n                this._storeForLater(id);\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n            }\n        },\n\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\n            var uuid = this.getUuid(id),\n                adjustedOnSuccessCallback;\n\n            if (onSuccessCallback) {\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\n            }\n\n            if (this._isDeletePossible()) {\n                this._handleCheckedCallback({\n                    name: \"onSubmitDelete\",\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\n                    onSuccess: adjustedOnSuccessCallback ||\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\n                    identifier: id\n                });\n                return true;\n            }\n            else {\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\n                return false;\n            }\n        },\n\n        _onSubmitted: function(id) {\n            //nothing to do in the base uploader\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._options.callbacks.onTotalProgress(loaded, total);\n        },\n\n        _onUploadPrep: function(id) {\n            // nothing to do in the core uploader for now\n        },\n\n        _onUpload: function(id, name) {\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            //nothing to do in the base uploader\n        },\n\n        _onUploadChunkSuccess: function(id, chunkData) {\n            if (!this._preventRetries[id] && this._options.retry.enableAuto) {\n                this._autoRetries[id] = 0;\n            }\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\n            if (newStatus === qq.status.PAUSED) {\n                clearTimeout(this._retryTimeouts[id]);\n            }\n        },\n\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\n            var self = this;\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                self._fileOrBlobRejected(fileWrapper.id);\n            });\n        },\n\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\n            var errorMessage,\n                itemLimit = this._currentItemLimit,\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\n\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\n                if (items.length > 0) {\n                    this._handleCheckedCallback({\n                        name: \"onValidate\",\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\n                    });\n                }\n                else {\n                    this._itemError(\"noFilesError\");\n                }\n            }\n            else {\n                this._onValidateBatchCallbackFailure(items);\n                errorMessage = this._options.messages.tooManyItemsError\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\n                this._batchError(errorMessage);\n            }\n        },\n\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\n            var nextIndex = index + 1;\n\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\n\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n        },\n\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\n            var self = this,\n                nextIndex = index + 1,\n                validationDescriptor = this._getValidationDescriptor(items[index]);\n\n            this._validateFileOrBlobData(items[index], validationDescriptor)\n                .then(\n                function() {\n                    self._upload(items[index].id, params, endpoint);\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\n                },\n                function() {\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n                }\n            );\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            if (items.length === 0) {\n                this._itemError(\"noFilesError\");\n                return;\n            }\n\n            var validationDescriptors = this._getValidationDescriptors(items),\n                buttonId = this._getButtonId(items[0].file),\n                button = this._getButton(buttonId);\n\n            this._handleCheckedCallback({\n                name: \"onValidateBatch\",\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\n                identifier: \"batch validation\"\n            });\n        },\n\n        _preventLeaveInProgress: function() {\n            var self = this;\n\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\n                if (self.getInProgress()) {\n                    e = e || window.event;\n                    // for ie, ff\n                    e.returnValue = self._options.messages.onLeave;\n                    // for webkit\n                    return self._options.messages.onLeave;\n                }\n            });\n        },\n\n        // Attempts to refresh session data only if the `qq.Session` module exists\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\n        // callback will be invoked once the refresh is complete.\n        _refreshSessionData: function() {\n            var self = this,\n                options = this._options.session;\n\n            /* jshint eqnull:true */\n            if (qq.Session && this._options.session.endpoint != null) {\n                if (!this._session) {\n                    qq.extend(options, {cors: this._options.cors});\n\n                    options.log = qq.bind(this.log, this);\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\n\n                    this._session = new qq.Session(options);\n                }\n\n                setTimeout(function() {\n                    self._session.refresh().then(function(response, xhrOrXdr) {\n                        self._sessionRequestComplete();\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\n\n                    }, function(response, xhrOrXdr) {\n\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\n                    });\n                }, 0);\n            }\n        },\n\n        _sessionRequestComplete: function() {},\n\n        _setSize: function(id, newSize) {\n            this._uploadData.updateSize(id, newSize);\n            this._totalProgress && this._totalProgress.onNewSize(id);\n        },\n\n        _shouldAutoRetry: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            /*jshint laxbreak: true */\n            if (!this._preventRetries[id]\n                && this._options.retry.enableAuto\n                && uploadData.status !== qq.status.PAUSED) {\n\n                if (this._autoRetries[id] === undefined) {\n                    this._autoRetries[id] = 0;\n                }\n\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\n                    this._autoRetries[id] += 1;\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        _storeForLater: function(id) {\n            this._storedIds.push(id);\n        },\n\n        // Maps a file with the button that was used to select it.\n        _trackButton: function(id) {\n            var buttonId;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                buttonId = this._handler.getFile(id).qqButtonId;\n            }\n            else {\n                buttonId = this._getButtonId(this._handler.getInput(id));\n            }\n\n            if (buttonId) {\n                this._buttonIdsForFileIds[id] = buttonId;\n            }\n        },\n\n        _updateFormSupportAndParams: function(formElementOrId) {\n            this._options.form.element = formElementOrId;\n\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n                );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this.setEndpoint(this._formSupport.newEndpoint);\n                }\n            }\n        },\n\n        _upload: function(id, params, endpoint) {\n            var name = this.getName(id);\n\n            if (params) {\n                this.setParams(params, id);\n            }\n\n            if (endpoint) {\n                this.setEndpoint(endpoint, id);\n            }\n\n            this._handleCheckedCallback({\n                name: \"onSubmit\",\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\n                identifier: id\n            });\n        },\n\n        _uploadFile: function(id) {\n            if (!this._handler.upload(id)) {\n                this._uploadData.setStatus(id, qq.status.QUEUED);\n            }\n        },\n\n        _uploadStoredFiles: function() {\n            var idToUpload, stillSubmitting,\n                self = this;\n\n            while (this._storedIds.length) {\n                idToUpload = this._storedIds.shift();\n                this._uploadFile(idToUpload);\n            }\n\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\n            if (stillSubmitting) {\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\n                setTimeout(function() {\n                    self._uploadStoredFiles();\n                }, 1000);\n            }\n        },\n\n        /**\n         * Performs some internal validation checks on an item, defined in the `validation` option.\n         *\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\n         * @private\n         */\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\n            var self = this,\n                file = (function() {\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\n                        return fileWrapper.file.referenceBlob;\n                    }\n                    return fileWrapper.file;\n                }()),\n                name = validationDescriptor.name,\n                size = validationDescriptor.size,\n                buttonId = this._getButtonId(fileWrapper.file),\n                validationBase = this._getValidationBase(buttonId),\n                validityChecker = new qq.Promise();\n\n            validityChecker.then(\n                function() {},\n                function() {\n                    self._fileOrBlobRejected(fileWrapper.id, name);\n                });\n\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\n                this._itemError(\"typeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (!this._options.validation.allowEmpty && size === 0) {\n                this._itemError(\"emptyError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\n                this._itemError(\"sizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && size < validationBase.minSizeLimit) {\n                this._itemError(\"minSizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\n                    validityChecker.success,\n                    function(errorCode) {\n                        self._itemError(errorCode + \"ImageError\", name, file);\n                        validityChecker.failure();\n                    }\n                );\n            }\n            else {\n                validityChecker.success();\n            }\n\n            return validityChecker;\n        },\n\n        _wrapCallbacks: function() {\n            var self, safeCallback, prop;\n\n            self = this;\n\n            safeCallback = function(name, callback, args) {\n                var errorMsg;\n\n                try {\n                    return callback.apply(self, args);\n                }\n                catch (exception) {\n                    errorMsg = exception.message || exception.toString();\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\n                }\n            };\n\n            /* jshint forin: false, loopfunc: true */\n            for (prop in this._options.callbacks) {\n                (function() {\n                    var callbackName, callbackFunc;\n                    callbackName = prop;\n                    callbackFunc = self._options.callbacks[callbackName];\n                    self._options.callbacks[callbackName] = function() {\n                        return safeCallback(callbackName, callbackFunc, arguments);\n                    };\n                }());\n            }\n        }\n    };\n}());\n","/*globals qq*/\n(function() {\n    \"use strict\";\n\n    qq.FineUploaderBasic = function(o) {\n        var self = this;\n\n        // These options define FineUploaderBasic mode.\n        this._options = {\n            debug: false,\n            button: null,\n            multiple: true,\n            maxConnections: 3,\n            disableCancelForFormUploads: false,\n            autoUpload: true,\n            warnBeforeUnload: true,\n\n            request: {\n                customHeaders: {},\n                endpoint: \"/server/upload\",\n                filenameParam: \"qqfilename\",\n                forceMultipart: true,\n                inputName: \"qqfile\",\n                method: \"POST\",\n                omitDefaultParams: false,\n                params: {},\n                paramsInBody: true,\n                requireSuccessJson: true,\n                totalFileSizeName: \"qqtotalfilesize\",\n                uuidName: \"qquuid\"\n            },\n\n            validation: {\n                allowedExtensions: [],\n                sizeLimit: 0,\n                minSizeLimit: 0,\n                itemLimit: 0,\n                stopOnFirstInvalidFile: true,\n                acceptFiles: null,\n                image: {\n                    maxHeight: 0,\n                    maxWidth: 0,\n                    minHeight: 0,\n                    minWidth: 0\n                },\n                allowEmpty: false\n            },\n\n            callbacks: {\n                onSubmit: function(id, name) {},\n                onSubmitted: function(id, name) {},\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\n                onAllComplete: function(successful, failed) {},\n                onCancel: function(id, name) {},\n                onUpload: function(id, name) {},\n                onUploadChunk: function(id, name, chunkData) {},\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\n                onResume: function(id, fileName, chunkData, customResumeData) {},\n                onProgress: function(id, name, loaded, total) {},\n                onTotalProgress: function(loaded, total) {},\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\n                onAutoRetry: function(id, name, attemptNumber) {},\n                onManualRetry: function(id, name) {},\n                onValidateBatch: function(fileOrBlobData) {},\n                onValidate: function(fileOrBlobData) {},\n                onSubmitDelete: function(id) {},\n                onDelete: function(id) {},\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\n                onPasteReceived: function(blob) {},\n                onStatusChange: function(id, oldStatus, newStatus) {},\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\n            },\n\n            messages: {\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\n                emptyError: \"{file} is empty, please select files again without it.\",\n                noFilesError: \"No files to upload.\",\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\n                maxHeightImageError: \"Image is too tall.\",\n                maxWidthImageError: \"Image is too wide.\",\n                minHeightImageError: \"Image is not tall enough.\",\n                minWidthImageError: \"Image is not wide enough.\",\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\n            },\n\n            retry: {\n                enableAuto: false,\n                maxAutoAttempts: 3,\n                autoAttemptDelay: 5,\n                preventRetryResponseProperty: \"preventRetry\"\n            },\n\n            classes: {\n                buttonHover: \"qq-upload-button-hover\",\n                buttonFocus: \"qq-upload-button-focus\"\n            },\n\n            chunking: {\n                enabled: false,\n                concurrent: {\n                    enabled: false\n                },\n                mandatory: false,\n                paramNames: {\n                    partIndex: \"qqpartindex\",\n                    partByteOffset: \"qqpartbyteoffset\",\n                    chunkSize: \"qqchunksize\",\n                    totalFileSize: \"qqtotalfilesize\",\n                    totalParts: \"qqtotalparts\"\n                },\n                partSize: function(id) {\n                    return 2000000;\n                },\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\n                success: {\n                    endpoint: null,\n\n                    headers: function(id) {\n                        return null;\n                    },\n\n                    jsonPayload: false,\n\n                    method: \"POST\",\n\n                    params: function(id) {\n                        return null;\n                    },\n\n                    resetOnStatus: []\n                }\n            },\n\n            resume: {\n                enabled: false,\n                recordsExpireIn: 7, //days\n                paramNames: {\n                    resuming: \"qqresume\"\n                },\n                customKeys: function(fileId) {\n                    return [];\n                }\n            },\n\n            formatFileName: function(fileOrBlobName) {\n                return fileOrBlobName;\n            },\n\n            text: {\n                defaultResponseError: \"Upload failure reason unknown\",\n                fileInputTitle: \"file input\",\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\n            },\n\n            deleteFile: {\n                enabled: false,\n                method: \"DELETE\",\n                endpoint: \"/server/upload\",\n                customHeaders: {},\n                params: {}\n            },\n\n            cors: {\n                expected: false,\n                sendCredentials: false,\n                allowXdr: false\n            },\n\n            blobs: {\n                defaultName: \"misc_data\"\n            },\n\n            paste: {\n                targetElement: null,\n                defaultName: \"pasted_image\"\n            },\n\n            camera: {\n                ios: false,\n\n                // if ios is true: button is null means target the default button, otherwise target the button specified\n                button: null\n            },\n\n            // This refers to additional upload buttons to be handled by Fine Uploader.\n            // Each element is an object, containing `element` as the only required\n            // property.  The `element` must be a container that will ultimately\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\n            // Optional properties of each object include `multiple`, `validation`,\n            // and `folders`.\n            extraButtons: [],\n\n            // Depends on the session module.  Used to query the server for an initial file list\n            // during initialization and optionally after a `reset`.\n            session: {\n                endpoint: null,\n                params: {},\n                customHeaders: {},\n                refreshOnReset: true\n            },\n\n            // Send parameters associated with an existing form along with the files\n            form: {\n                // Element ID, HTMLElement, or null\n                element: \"qq-form\",\n\n                // Overrides the base `autoUpload`, unless `element` is null.\n                autoUpload: false,\n\n                // true = upload files on form submission (and squelch submit event)\n                interceptSubmit: true\n            },\n\n            // scale images client side, upload a new file for each scaled version\n            scaling: {\n                customResizer: null,\n\n                // send the original file as well\n                sendOriginal: true,\n\n                // fox orientation for scaled images\n                orient: true,\n\n                // If null, scaled image type will match reference image type.  This value will be referred to\n                // for any size record that does not specific a type.\n                defaultType: null,\n\n                defaultQuality: 80,\n\n                failureText: \"Failed to scale\",\n\n                includeExif: false,\n\n                // metadata about each requested scaled version\n                sizes: []\n            },\n\n            workarounds: {\n                iosEmptyVideos: true,\n                ios8SafariUploads: true,\n                ios8BrowserCrash: false\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(this._options, o, true);\n\n        this._buttons = [];\n        this._extraButtonSpecs = {};\n        this._buttonIdsForFileIds = [];\n\n        this._wrapCallbacks();\n        this._disposeSupport =  new qq.DisposeSupport();\n\n        this._storedIds = [];\n        this._autoRetries = [];\n        this._retryTimeouts = [];\n        this._preventRetries = [];\n        this._thumbnailUrls = [];\n\n        this._netUploadedOrQueued = 0;\n        this._netUploaded = 0;\n        this._uploadData = this._createUploadDataTracker();\n\n        this._initFormSupportAndParams();\n\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\n\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\n\n        this._endpointStore = this._createStore(this._options.request.endpoint);\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\n\n        this._handler = this._createUploadHandler();\n\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\n\n        if (this._options.button) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._options.button,\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._generateExtraButtonSpecs();\n\n        this._handleCameraAccess();\n\n        if (this._options.paste.targetElement) {\n            if (qq.PasteSupport) {\n                this._pasteHandler = this._createPasteHandler();\n            }\n            else {\n                this.log(\"Paste support module not found\", \"error\");\n            }\n        }\n\n        this._options.warnBeforeUnload && this._preventLeaveInProgress();\n\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\n        this._refreshSessionData();\n\n        this._succeededSinceLastAllComplete = [];\n        this._failedSinceLastAllComplete = [];\n\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\n        if (this._scaler.enabled) {\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\n        }\n\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\n            this._totalProgress = new qq.TotalProgress(\n                qq.bind(this._onTotalProgress, this),\n\n                function(id) {\n                    var entry = self._uploadData.retrieve({id: id});\n                    return (entry && entry.size) || 0;\n                }\n            );\n        }\n\n        this._currentItemLimit = this._options.validation.itemLimit;\n\n        this._customResumeDataStore = this._createStore();\n    };\n\n    // Define the private & public API methods.\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\n}());\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Base upload handler module.  Controls more specific handlers.\n *\n * @param o Options.  Passed along to the specific handler submodule as well.\n * @param namespace [optional] Namespace for the specific handler.\n */\nqq.UploadHandlerController = function(o, namespace) {\n    \"use strict\";\n\n    var controller = this,\n        chunkingPossible = false,\n        concurrentChunkingPossible = false,\n        chunking, preventRetryResponse, log, handler,\n\n    options = {\n        paramsStore: {},\n        maxConnections: 3, // maximum number of concurrent uploads\n        chunking: {\n            enabled: false,\n            multiple: {\n                enabled: false\n            }\n        },\n        log: function(str, level) {},\n        onProgress: function(id, fileName, loaded, total) {},\n        onComplete: function(id, fileName, response, xhr) {},\n        onCancel: function(id, fileName) {},\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\n        onUpload: function(id, fileName) {},\n        onUploadChunk: function(id, fileName, chunkData) {},\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\n        onAutoRetry: function(id, fileName, response, xhr) {},\n        onResume: function(id, fileName, chunkData, customResumeData) {},\n        onUuidChanged: function(id, newUuid) {},\n        getName: function(id) {},\n        setSize: function(id, newSize) {},\n        isQueued: function(id) {},\n        getIdsInProxyGroup: function(id) {},\n        getIdsInBatch: function(id) {},\n        isInProgress: function(id) {}\n    },\n\n    chunked = {\n        // Called when each chunk has uploaded successfully\n        done: function(id, chunkIdx, response, xhr) {\n            var chunkData = handler._getChunkData(id, chunkIdx);\n\n            handler._getFileState(id).attemptingResume = false;\n\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\n            handler._getFileState(id).loaded += chunkData.size;\n\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\n        },\n\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\n        // logic associated with closing out the file, such as combining the chunks.\n        finalize: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id);\n\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\n            handler.finalizeChunks(id).then(\n                function(response, xhr) {\n                    log(\"Finalize successful for \" + id);\n\n                    var normaizedResponse = upload.normalizeResponse(response, true);\n\n                    options.onProgress(id, name, size, size);\n                    handler._maybeDeletePersistedChunkData(id);\n                    upload.cleanup(id, normaizedResponse, xhr);\n                },\n                function(response, xhr) {\n                    var normalizedResponse = upload.normalizeResponse(response, false);\n\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normalizedResponse.error, \"error\");\n\n                    if (\n                        normalizedResponse.reset ||\n                        (xhr && options.chunking.success.resetOnStatus.indexOf(xhr.status) >= 0)\n                    ) {\n                        chunked.reset(id);\n                    }\n\n                    if (!options.onAutoRetry(id, name, normalizedResponse, xhr)) {\n                        upload.cleanup(id, normalizedResponse, xhr);\n                    }\n                }\n            );\n        },\n\n        handleFailure: function(chunkIdx, id, response, xhr) {\n            var name = options.getName(id);\n\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\n\n            handler.clearCachedChunk(id, chunkIdx);\n\n            var responseToReport = upload.normalizeResponse(response, false),\n                inProgressIdx;\n\n            if (responseToReport.reset) {\n                chunked.reset(id);\n            }\n            else {\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\n                if (inProgressIdx >= 0) {\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\n                }\n            }\n\n            // We may have aborted all other in-progress chunks for this file due to a failure.\n            // If so, ignore the failures associated with those aborts.\n            if (!handler._getFileState(id).temp.ignoreFailure) {\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\n                // chunks since they will be explicitly aborted\n                if (concurrentChunkingPossible) {\n                    handler._getFileState(id).temp.ignoreFailure = true;\n\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\n                        ckXhr.abort();\n                        // Flag the transport, in case we are waiting for some other async operation\n                        // to complete before attempting to upload the chunk\n                        ckXhr._cancelled = true;\n                    });\n\n                    // We must indicate that all aborted chunks are no longer in progress\n                    handler.moveInProgressToRemaining(id);\n\n                    // Free up any connections used by these chunks, but don't allow any\n                    // other files to take up the connections (until we have exhausted all auto-retries)\n                    connectionManager.free(id, true);\n                }\n\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\n                    // is a failure or not.\n                    upload.cleanup(id, responseToReport, xhr);\n                }\n            }\n        },\n\n        hasMoreParts: function(id) {\n            return !!handler._getFileState(id).chunking.remaining.length;\n        },\n\n        nextPart: function(id) {\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\n\n            if (nextIdx >= handler._getTotalChunks(id)) {\n                nextIdx = null;\n            }\n\n            return nextIdx;\n        },\n\n        reset: function(id) {\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\n\n            handler._maybeDeletePersistedChunkData(id);\n            handler.reevaluateChunking(id);\n            handler._getFileState(id).loaded = 0;\n            handler._getFileState(id).attemptingResume = false;\n        },\n\n        sendNext: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id),\n                chunkIdx = chunked.nextPart(id),\n                chunkData = handler._getChunkData(id, chunkIdx),\n                fileState = handler._getFileState(id),\n                resuming = fileState.attemptingResume,\n                inProgressChunks = fileState.chunking.inProgress || [];\n\n            if (fileState.loaded == null) {\n                fileState.loaded = 0;\n            }\n\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\n            if (resuming && options.onResume(id, name, chunkData, fileState.customResumeData) === false) {\n                chunked.reset(id);\n                chunkIdx = chunked.nextPart(id);\n                chunkData = handler._getChunkData(id, chunkIdx);\n                resuming = false;\n            }\n\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\n            if (chunkIdx == null && inProgressChunks.length === 0) {\n                chunked.finalize(id);\n            }\n\n            // Send the next chunk\n            else {\n                inProgressChunks.push(chunkIdx);\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\n\n                if (concurrentChunkingPossible) {\n                    connectionManager.open(id, chunkIdx);\n                }\n\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\n                    chunked.sendNext(id);\n                }\n\n                if (chunkData.blob.size === 0) {\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\n                }\n\n                var onUploadChunkPromise = options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\n\n                onUploadChunkPromise.then(\n                    function(requestOverrides) {\n                        if (!options.isInProgress(id)) {\n                            log(qq.format(\"Not sending chunked upload request for item {}.{} - no longer in progress.\", id, chunkIdx));\n                        }\n                        else {\n                            log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\n\n                            var uploadChunkData = {\n                                chunkIdx: chunkIdx,\n                                id: id,\n                                overrides: requestOverrides,\n                                resuming: resuming\n                            };\n\n                            handler.uploadChunk(uploadChunkData).then(\n                                // upload chunk success\n                                function success(response, xhr) {\n                                    log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\n\n                                    handler.clearCachedChunk(id, chunkIdx);\n\n                                    var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\n                                        responseToReport = upload.normalizeResponse(response, true),\n                                        inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\n\n                                    log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\n\n                                    chunked.done(id, chunkIdx, responseToReport, xhr);\n\n                                    if (inProgressChunkIdx >= 0) {\n                                        inProgressChunks.splice(inProgressChunkIdx, 1);\n                                    }\n\n                                    handler._maybePersistChunkedState(id);\n\n                                    if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\n                                        chunked.finalize(id);\n                                    }\n                                    else if (chunked.hasMoreParts(id)) {\n                                        chunked.sendNext(id);\n                                    }\n                                    else {\n                                        log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\n                                    }\n                                },\n\n                                // upload chunk failure\n                                function failure(response, xhr) {\n                                    chunked.handleFailure(chunkIdx, id, response, xhr);\n                                }\n                            )\n                                .done(function () {\n                                    handler.clearXhr(id, chunkIdx);\n                                });\n                        }\n                    },\n\n                    function(error) {\n                        chunked.handleFailure(chunkIdx, id, error, null);\n                    }\n                );\n            }\n        }\n    },\n\n    connectionManager = {\n        _open: [],\n        _openChunks: {},\n        _waiting: [],\n\n        available: function() {\n            var max = options.maxConnections,\n                openChunkEntriesCount = 0,\n                openChunksCount = 0;\n\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\n                openChunkEntriesCount++;\n                openChunksCount += openChunkIndexes.length;\n            });\n\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\n        },\n\n        /**\n         * Removes element from queue, starts upload of next\n         */\n        free: function(id, dontAllowNext) {\n            var allowNext = !dontAllowNext,\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\n                nextId;\n\n            delete connectionManager._openChunks[id];\n\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\n                delete handler._getFileState(id).file;\n            }\n\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\n            if (waitingIndex >= 0) {\n                connectionManager._waiting.splice(waitingIndex, 1);\n            }\n            // If this file was consuming a connection, allow the next file to be uploaded\n            else if (allowNext && connectionsIndex >= 0) {\n                connectionManager._open.splice(connectionsIndex, 1);\n\n                nextId = connectionManager._waiting.shift();\n                if (nextId >= 0) {\n                    connectionManager._open.push(nextId);\n                    upload.start(nextId);\n                }\n            }\n        },\n\n        getWaitingOrConnected: function() {\n            var waitingOrConnected = [];\n\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\n                if (chunks && chunks.length) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // For non-chunked files, only one connection will be consumed per file.\n            // This is where we aggregate those file IDs.\n            qq.each(connectionManager._open, function(idx, fileId) {\n                if (!connectionManager._openChunks[fileId]) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // There may be files waiting for a connection.\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\n\n            return waitingOrConnected;\n        },\n\n        isUsingConnection: function(id) {\n            return qq.indexOf(connectionManager._open, id) >= 0;\n        },\n\n        open: function(id, chunkIdx) {\n            if (chunkIdx == null) {\n                connectionManager._waiting.push(id);\n            }\n\n            if (connectionManager.available()) {\n                if (chunkIdx == null) {\n                    connectionManager._waiting.pop();\n                    connectionManager._open.push(id);\n                }\n                else {\n                    (function() {\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\n                        openChunksEntry.push(chunkIdx);\n                        connectionManager._openChunks[id] = openChunksEntry;\n                    }());\n                }\n\n                return true;\n            }\n\n            return false;\n        },\n\n        reset: function() {\n            connectionManager._waiting = [];\n            connectionManager._open = [];\n        }\n    },\n\n    simple = {\n        send: function(id, name) {\n            handler._getFileState(id).loaded = 0;\n\n            log(\"Sending simple upload request for \" + id);\n            handler.uploadFile(id).then(\n                function(response, optXhr) {\n                    log(\"Simple upload request succeeded for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, true),\n                        size = options.getSize(id);\n\n                    options.onProgress(id, name, size, size);\n                    upload.maybeNewUuid(id, responseToReport);\n                    upload.cleanup(id, responseToReport, optXhr);\n                },\n\n                function(response, optXhr) {\n                    log(\"Simple upload request failed for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, false);\n\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\n                        upload.cleanup(id, responseToReport, optXhr);\n                    }\n                }\n            );\n        }\n    },\n\n    upload = {\n        cancel: function(id) {\n            log(\"Cancelling \" + id);\n            options.paramsStore.remove(id);\n            connectionManager.free(id);\n        },\n\n        cleanup: function(id, response, optXhr) {\n            var name = options.getName(id);\n\n            options.onComplete(id, name, response, optXhr);\n\n            if (handler._getFileState(id)) {\n                handler._clearXhrs && handler._clearXhrs(id);\n            }\n\n            connectionManager.free(id);\n        },\n\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\n        // if none of these are available for the ID\n        getProxyOrBlob: function(id) {\n            return (handler.getProxy && handler.getProxy(id)) ||\n                (handler.getFile && handler.getFile(id));\n        },\n\n        initHandler: function() {\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\n\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\n                options,\n                {\n                    getCustomResumeData: options.getCustomResumeData,\n                    getDataByUuid: options.getDataByUuid,\n                    getName: options.getName,\n                    getSize: options.getSize,\n                    getUuid: options.getUuid,\n                    log: log,\n                    onCancel: options.onCancel,\n                    onProgress: options.onProgress,\n                    onUuidChanged: options.onUuidChanged\n                }\n            );\n\n            if (handler._removeExpiredChunkingRecords) {\n                handler._removeExpiredChunkingRecords();\n            }\n        },\n\n        isDeferredEligibleForUpload: function(id) {\n            return options.isQueued(id);\n        },\n\n        // For Blobs that are part of a group of generated images, along with a reference image,\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\n        // even if some async processing must be completed on one or more Blobs first.\n        maybeDefer: function(id, blob) {\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\n            // and then submit the upload to the specific handler once the blob is available.\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\n\n                // Blob creation may take some time, so the caller may want to update the\n                // UI to indicate that an operation is in progress, even before the actual\n                // upload begins and an onUpload callback is invoked.\n                options.onUploadPrep(id);\n\n                log(\"Attempting to generate a blob on-demand for \" + id);\n                blob.create().then(function(generatedBlob) {\n                    log(\"Generated an on-demand blob for \" + id);\n\n                    // Update record associated with this file by providing the generated Blob\n                    handler.updateBlob(id, generatedBlob);\n\n                    // Propagate the size for this generated Blob\n                    options.setSize(id, generatedBlob.size);\n\n                    // Order handler to recalculate chunking possibility, if applicable\n                    handler.reevaluateChunking(id);\n\n                    upload.maybeSendDeferredFiles(id);\n                },\n\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\n                function(errorMessage) {\n                    var errorResponse = {};\n\n                    if (errorMessage) {\n                        errorResponse.error = errorMessage;\n                    }\n\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\n\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\n                    upload.maybeSendDeferredFiles(id);\n                    connectionManager.free(id);\n                });\n            }\n            else {\n                return upload.maybeSendDeferredFiles(id);\n            }\n\n            return false;\n        },\n\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\n        maybeSendDeferredFiles: function(id) {\n            var idsInGroup = options.getIdsInProxyGroup(id),\n                uploadedThisId = false;\n\n            if (idsInGroup && idsInGroup.length) {\n                log(\"Maybe ready to upload proxy group file \" + id);\n\n                qq.each(idsInGroup, function(idx, idInGroup) {\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\n                        uploadedThisId = idInGroup === id;\n                        upload.now(idInGroup);\n                    }\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\n                        return false;\n                    }\n                });\n            }\n            else {\n                uploadedThisId = true;\n                upload.now(id);\n            }\n\n            return uploadedThisId;\n        },\n\n        maybeNewUuid: function(id, response) {\n            if (response.newUuid !== undefined) {\n                options.onUuidChanged(id, response.newUuid);\n            }\n        },\n\n        // The response coming from handler implementations may be in various formats.\n        // Instead of hoping a promise nested 5 levels deep will always return an object\n        // as its first param, let's just normalize the response here.\n        normalizeResponse: function(originalResponse, successful) {\n            var response = originalResponse;\n\n            // The passed \"response\" param may not be a response at all.\n            // It could be a string, detailing the error, for example.\n            if (!qq.isObject(originalResponse)) {\n                response = {};\n\n                if (qq.isString(originalResponse) && !successful) {\n                    response.error = originalResponse;\n                }\n            }\n\n            response.success = successful;\n\n            return response;\n        },\n\n        now: function(id) {\n            var name = options.getName(id);\n\n            if (!controller.isValid(id)) {\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\n            }\n\n            options.onUpload(id, name).then(\n                function(response) {\n                    if (response && response.pause) {\n                        options.setStatus(id, qq.status.PAUSED);\n                        handler.pause(id);\n                        connectionManager.free(id);\n                    }\n                    else {\n                        if (chunkingPossible && handler._shouldChunkThisFile(id)) {\n                            chunked.sendNext(id);\n                        }\n                        else {\n                            simple.send(id, name);\n                        }\n                    }\n                },\n\n                function(error) {\n                    error = error || {};\n\n                    log(id + \" upload start aborted due to rejected onUpload Promise - details: \" + error, \"error\");\n\n                    if (!options.onAutoRetry(id, name, error.responseJSON || {})) {\n                        var response = upload.normalizeResponse(error.responseJSON, false);\n                        upload.cleanup(id, response);\n                    }\n                }\n            );\n        },\n\n        start: function(id) {\n            var blobToUpload = upload.getProxyOrBlob(id);\n\n            if (blobToUpload) {\n                return upload.maybeDefer(id, blobToUpload);\n            }\n            else {\n                upload.now(id);\n                return true;\n            }\n        }\n    };\n\n    qq.extend(this, {\n        /**\n         * Adds file or file input to the queue\n         **/\n        add: function(id, file) {\n            handler.add.apply(this, arguments);\n        },\n\n        /**\n         * Sends the file identified by id\n         */\n        upload: function(id) {\n            if (connectionManager.open(id)) {\n                return upload.start(id);\n            }\n            return false;\n        },\n\n        retry: function(id) {\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\n            // any more failures at this point.\n            if (concurrentChunkingPossible) {\n                handler._getFileState(id).temp.ignoreFailure = false;\n            }\n\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\n            // Just go ahead and ask the handler to upload again.\n            if (connectionManager.isUsingConnection(id)) {\n                return upload.start(id);\n            }\n\n            // If we are attempting to retry a file that is not currently consuming a connection,\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\n            // before the retry commences.\n            else {\n                return controller.upload(id);\n            }\n        },\n\n        /**\n         * Cancels file upload by id\n         */\n        cancel: function(id) {\n            var cancelRetVal = handler.cancel(id);\n\n            if (qq.isGenericPromise(cancelRetVal)) {\n                cancelRetVal.then(function() {\n                    upload.cancel(id);\n                });\n            }\n            else if (cancelRetVal !== false) {\n                upload.cancel(id);\n            }\n        },\n\n        /**\n         * Cancels all queued or in-progress uploads\n         */\n        cancelAll: function() {\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\n                i;\n\n            // ensure files are cancelled in reverse order which they were added\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\n            if (waitingOrConnected.length) {\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\n                    controller.cancel(waitingOrConnected[i]);\n                }\n            }\n\n            connectionManager.reset();\n        },\n\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\n        // Undefined if no file record is available.\n        getFile: function(id) {\n            if (handler.getProxy && handler.getProxy(id)) {\n                return handler.getProxy(id).referenceBlob;\n            }\n\n            return handler.getFile && handler.getFile(id);\n        },\n\n        // Returns true if the Blob associated with the ID is related to a proxy s\n        isProxied: function(id) {\n            return !!(handler.getProxy && handler.getProxy(id));\n        },\n\n        getInput: function(id) {\n            if (handler.getInput) {\n                return handler.getInput(id);\n            }\n        },\n\n        reset: function() {\n            log(\"Resetting upload handler\");\n            controller.cancelAll();\n            connectionManager.reset();\n            handler.reset();\n        },\n\n        expunge: function(id) {\n            if (controller.isValid(id)) {\n                return handler.expunge(id);\n            }\n        },\n\n        /**\n         * Determine if the file exists.\n         */\n        isValid: function(id) {\n            return handler.isValid(id);\n        },\n\n        hasResumeRecord: function(id) {\n            var key = handler.isValid(id) &&\n                handler._getLocalStorageId &&\n                handler._getLocalStorageId(id);\n\n            if (key) {\n                return !!localStorage.getItem(key);\n            }\n\n            return false;\n        },\n\n        getResumableFilesData: function() {\n            if (handler.getResumableFilesData) {\n                return handler.getResumableFilesData();\n            }\n            return [];\n        },\n\n        /**\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\n         * will be undefined.\n         *\n         * @param id Internal file ID\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\n         */\n        getThirdPartyFileId: function(id) {\n            if (controller.isValid(id)) {\n                return handler.getThirdPartyFileId(id);\n            }\n        },\n\n        /**\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\n         * @param id ID of the upload/file to pause\n         * @returns {boolean} true if the upload was paused\n         */\n        pause: function(id) {\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\n                connectionManager.free(id);\n                handler.moveInProgressToRemaining(id);\n                return true;\n            }\n            return false;\n        },\n\n        isAttemptingResume: function(id) {\n            return !!handler.isAttemptingResume && handler.isAttemptingResume(id);\n        },\n\n        // True if the file is eligible for pause/resume.\n        isResumable: function(id) {\n            return !!handler.isResumable && handler.isResumable(id);\n        }\n    });\n\n    qq.extend(options, o);\n    log = options.log;\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\n\n    preventRetryResponse = (function() {\n        var response = {};\n\n        response[options.preventRetryParam] = true;\n\n        return response;\n    }());\n\n    upload.initHandler();\n};\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        getChunkSize = function(id) {\n            var fileState = handler._getFileState(id);\n\n            if (fileState.chunkSize) {\n                return fileState.chunkSize;\n            }\n\n            else {\n                var chunkSize = chunking.partSize;\n\n                if (qq.isFunction(chunkSize)) {\n                    chunkSize = chunkSize(id, getSize(id));\n                }\n\n                fileState.chunkSize = chunkSize;\n                return chunkSize;\n            }\n        },\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log,\n        getCustomResumeData = proxy.getCustomResumeData;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                if (uploadData.customResumeData) {\n                    data.customResumeData = uploadData.customResumeData;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isAttemptingResume: function(id) {\n            return handler._getFileState(id).attemptingResume;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) &&\n                !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var fileState = handler._getFileState(id) || {},\n                chunkingState =  fileState.chunking || {},\n                inProgress = optInProgress || chunkingState.inProgress,\n                remaining = optRemaining || chunkingState.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = getChunkSize(id),\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/FineUploader/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = getChunkSize(id),\n                endpoint = getEndpoint(id),\n                customKeys = resume.customKeys(id),\n                localStorageId = qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n\n            customKeys.forEach(function(key) {\n                localStorageId += \"-\" + key;\n            });\n\n            return localStorageId;\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = getChunkSize(id);\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.customResumeData = persistedData.customResumeData;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                var customResumeData = getCustomResumeData(id);\n\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now(),\n                };\n\n                if (customResumeData) {\n                    persistedData.customResumeData = customResumeData;\n                }\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*globals qq*/\n/**\n * Upload handler used that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to\n * a generic server.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.traditional = qq.traditional || {};\nqq.traditional.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log;\n\n    /**\n     * Returns json object received by iframe from server.\n     */\n    function getIframeContentJson(id, iframe) {\n        /*jshint evil: true*/\n\n        var response, doc, innerHtml;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            log(\"converting iframe's innerHTML to JSON\");\n            log(\"innerHTML = \" + innerHtml);\n            //plain text response may be wrapped in <pre> tag\n            if (innerHtml && innerHtml.match(/^<pre/i)) {\n                innerHtml = doc.body.firstChild.firstChild.nodeValue;\n            }\n\n            response = handler._parseJsonResponse(innerHtml);\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n            response = {success: false};\n        }\n\n        return response;\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var params = options.paramsStore.get(id),\n            method = options.method.toLowerCase() === \"get\" ? \"GET\" : \"POST\",\n            endpoint = options.endpointStore.get(id),\n            name = getName(id);\n\n        params[options.uuidName] = getUuid(id);\n        params[options.filenameParam] = name;\n\n        return handler._initFormForUpload({\n            method: method,\n            endpoint: endpoint,\n            params: params,\n            paramsInBody: options.paramsInBody,\n            targetName: iframe.name\n        });\n    }\n\n    this.uploadFile = function(id) {\n        var input = handler.getInput(id),\n            iframe = handler._createIframe(id),\n            promise = new qq.Promise(),\n            form;\n\n        form = createForm(id, iframe);\n        form.appendChild(input);\n\n        handler._attachLoadEvent(iframe, function(responseFromMessage) {\n            log(\"iframe loaded\");\n\n            var response = responseFromMessage ? responseFromMessage : getIframeContentJson(id, iframe);\n\n            handler._detachLoadEvent(id);\n\n            //we can't remove an iframe if the iframe doesn't belong to the same domain\n            if (!options.cors.expected) {\n                qq(iframe).remove();\n            }\n\n            if (response.success) {\n                promise.success(response);\n            }\n            else {\n                promise.failure(response);\n            }\n        });\n\n        log(\"Sending upload request for \" + id);\n        form.submit();\n        qq(form).remove();\n\n        return promise;\n    };\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: options.cors.expected,\n            inputName: options.inputName\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n};\n","/*globals qq*/\n/**\n * Upload handler used to upload to traditional endpoints.  It depends on File API support, and, therefore,\n * makes use of `XMLHttpRequest` level 2 to upload `File`s and `Blob`s to a generic server.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.traditional = qq.traditional || {};\nqq.traditional.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        multipart = spec.forceMultipart || spec.paramsInBody,\n\n        addChunkingSpecificParams = function(id, params, chunkData) {\n            var size = getSize(id),\n                name = getName(id);\n\n            if (!spec.omitDefaultParams) {\n                params[spec.chunking.paramNames.partIndex] = chunkData.part;\n                params[spec.chunking.paramNames.partByteOffset] = chunkData.start;\n                params[spec.chunking.paramNames.chunkSize] = chunkData.size;\n                params[spec.chunking.paramNames.totalParts] = chunkData.count;\n                params[spec.totalFileSizeName] = size;\n            }\n\n            /**\n             * When a Blob is sent in a multipart request, the filename value in the content-disposition header is either \"blob\"\n             * or an empty string.  So, we will need to include the actual file name as a param in this case.\n             */\n            if (multipart && !spec.omitDefaultParams) {\n                params[spec.filenameParam] = name;\n            }\n        },\n\n        allChunksDoneRequester = new qq.traditional.AllChunksDoneAjaxRequester({\n            cors: spec.cors,\n            endpoint: spec.chunking.success.endpoint,\n            headers: spec.chunking.success.headers,\n            jsonPayload: spec.chunking.success.jsonPayload,\n            log: log,\n            method: spec.chunking.success.method,\n            params: spec.chunking.success.params\n        }),\n\n        createReadyStateChangedHandler = function(id, xhr) {\n            var promise = new qq.Promise();\n\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    var result = onUploadOrChunkComplete(id, xhr);\n\n                    if (result.success) {\n                        promise.success(result.response, xhr);\n                    }\n                    else {\n                        promise.failure(result.response, xhr);\n                    }\n                }\n            };\n\n            return promise;\n        },\n\n        getChunksCompleteParams = function(id) {\n            var params = spec.paramsStore.get(id),\n                name = getName(id),\n                size = getSize(id);\n\n            params[spec.uuidName] = getUuid(id);\n            params[spec.filenameParam] = name;\n            params[spec.totalFileSizeName] = size;\n            params[spec.chunking.paramNames.totalParts] = handler._getTotalChunks(id);\n\n            return params;\n        },\n\n        isErrorUploadResponse = function(xhr, response) {\n            return qq.indexOf([200, 201, 202, 203, 204], xhr.status) < 0 ||\n                (spec.requireSuccessJson && !response.success) ||\n                response.reset;\n        },\n\n        onUploadOrChunkComplete = function(id, xhr) {\n            var response;\n\n            log(\"xhr - server response received for \" + id);\n            log(\"responseText = \" + xhr.responseText);\n\n            response = parseResponse(true, xhr);\n\n            return {\n                success: !isErrorUploadResponse(xhr, response),\n                response: response\n            };\n        },\n\n        // If this is an upload response, we require a JSON payload, otherwise, it is optional.\n        parseResponse = function(upload, xhr) {\n            var response = {};\n\n            try {\n                log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\n                response = qq.parseJson(xhr.responseText);\n            }\n            catch (error) {\n                upload && spec.requireSuccessJson && log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        },\n\n        sendChunksCompleteRequest = function(id) {\n            var promise = new qq.Promise();\n\n            allChunksDoneRequester.complete(\n                    id,\n                    handler._createXhr(id),\n                    getChunksCompleteParams(id),\n                    spec.customHeaders.get(id)\n                )\n                .then(function(xhr) {\n                    promise.success(parseResponse(false, xhr), xhr);\n                }, function(xhr) {\n                    promise.failure(parseResponse(false, xhr), xhr);\n                });\n\n            return promise;\n        },\n\n        setParamsAndGetEntityToSend = function(entityToSendParams) {\n            var fileOrBlob = entityToSendParams.fileOrBlob;\n            var id = entityToSendParams.id;\n            var xhr = entityToSendParams.xhr;\n            var xhrOverrides = entityToSendParams.xhrOverrides || {};\n            var customParams = entityToSendParams.customParams || {};\n            var defaultParams = entityToSendParams.params || {};\n            var xhrOverrideParams = xhrOverrides.params || {};\n            var params;\n\n            var formData = multipart ? new FormData() : null,\n                method = xhrOverrides.method || spec.method,\n                endpoint = xhrOverrides.endpoint || spec.endpointStore.get(id),\n                name = getName(id),\n                size = getSize(id);\n\n            if (spec.omitDefaultParams) {\n                params = qq.extend({}, customParams);\n                qq.extend(params, xhrOverrideParams);\n            }\n            else {\n                params = qq.extend({}, customParams);\n                qq.extend(params, xhrOverrideParams);\n                qq.extend(params, defaultParams);\n\n                params[spec.uuidName] = getUuid(id);\n                params[spec.filenameParam] = name;\n\n                if (multipart) {\n                    params[spec.totalFileSizeName] = size;\n                }\n                else if (!spec.paramsInBody) {\n                    params[spec.inputName] = name;\n                }\n            }\n\n            //build query string\n            if (!spec.paramsInBody) {\n                endpoint = qq.obj2url(params, endpoint);\n            }\n\n            xhr.open(method, endpoint, true);\n\n            if (spec.cors.expected && spec.cors.sendCredentials) {\n                xhr.withCredentials = true;\n            }\n\n            if (multipart) {\n                if (spec.paramsInBody) {\n                    qq.obj2FormData(params, formData);\n                }\n\n                formData.append(spec.inputName, fileOrBlob);\n                return formData;\n            }\n\n            return fileOrBlob;\n        },\n\n        setUploadHeaders = function(headersOptions) {\n            var headerOverrides = headersOptions.headerOverrides;\n            var id = headersOptions.id;\n            var xhr = headersOptions.xhr;\n\n            if (headerOverrides) {\n                qq.each(headerOverrides, function(headerName, headerValue) {\n                    xhr.setRequestHeader(headerName, headerValue);\n                });\n            }\n            else {\n                var extraHeaders = spec.customHeaders.get(id),\n                    fileOrBlob = handler.getFile(id);\n\n                xhr.setRequestHeader(\"Accept\", \"application/json\");\n                xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n\n                if (!multipart) {\n                    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n                    //NOTE: return mime type in xhr works on chrome 16.0.9 firefox 11.0a2\n                    xhr.setRequestHeader(\"X-Mime-Type\", fileOrBlob.type);\n                }\n\n                qq.each(extraHeaders, function(name, val) {\n                    xhr.setRequestHeader(name, val);\n                });\n            }\n        };\n\n    qq.extend(this, {\n        uploadChunk: function(uploadChunkParams) {\n            var id = uploadChunkParams.id;\n            var chunkIdx = uploadChunkParams.chunkIdx;\n            var overrides = uploadChunkParams.overrides || {};\n            var resuming = uploadChunkParams.resuming;\n\n            var chunkData = handler._getChunkData(id, chunkIdx),\n                xhr = handler._createXhr(id, chunkIdx),\n                promise, toSend, customParams, params = {};\n\n            promise = createReadyStateChangedHandler(id, xhr);\n            handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n            customParams = spec.paramsStore.get(id);\n            addChunkingSpecificParams(id, params, chunkData);\n\n            if (resuming) {\n                params[spec.resume.paramNames.resuming] = true;\n            }\n\n            toSend = setParamsAndGetEntityToSend({\n                fileOrBlob: chunkData.blob,\n                id: id,\n                customParams: customParams,\n                params: params,\n                xhr: xhr,\n                xhrOverrides: overrides\n            });\n\n            setUploadHeaders({\n                headerOverrides: overrides.headers,\n                id: id,\n                xhr: xhr\n            });\n\n            xhr.send(toSend);\n\n            return promise;\n        },\n\n        uploadFile: function(id) {\n            var fileOrBlob = handler.getFile(id),\n                promise, xhr, customParams, toSend;\n\n            xhr = handler._createXhr(id);\n            handler._registerProgressHandler(id);\n            promise = createReadyStateChangedHandler(id, xhr);\n            customParams = spec.paramsStore.get(id);\n\n            toSend = setParamsAndGetEntityToSend({\n                fileOrBlob: fileOrBlob,\n                id: id,\n                customParams: customParams,\n                xhr: xhr\n            });\n\n            setUploadHeaders({\n                id: id,\n                xhr: xhr\n            });\n\n            xhr.send(toSend);\n\n            return promise;\n        }\n    });\n\n    qq.extend(this, new qq.XhrUploadHandler({\n        options: qq.extend({namespace: \"traditional\"}, spec),\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n    }));\n\n    qq.override(this, function(super_) {\n        return {\n            finalizeChunks: function(id) {\n                if (spec.chunking.success.endpoint) {\n                    return sendChunksCompleteRequest(id);\n                }\n                else {\n                    return super_.finalizeChunks(id, qq.bind(parseResponse, this, true));\n                }\n            }\n        };\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send a POST to a traditional endpoint once all chunks for a specific file have uploaded\n * successfully.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.traditional.AllChunksDoneAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            cors: {\n                allowXdr: false,\n                expected: false,\n                sendCredentials: false\n            },\n            endpoint: null,\n            log: function(str, level) {},\n            method: \"POST\"\n        },\n        promises = {},\n        endpointHandler = {\n            get: function(id) {\n                if (qq.isFunction(options.endpoint)) {\n                    return options.endpoint(id);\n                }\n\n                return options.endpoint;\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        contentType: options.jsonPayload ? \"application/json\" : \"application/x-www-form-urlencoded\",\n        validMethods: [options.method],\n        method: options.method,\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: options.cors,\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete promises[id];\n\n            if (isError) {\n                promise.failure(xhr);\n            }\n            else {\n                promise.success(xhr);\n            }\n        }\n    }));\n\n    qq.extend(this, {\n        complete: function(id, xhr, params, headers) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting All Chunks Done request for \" + id);\n\n            promises[id] = promise;\n\n            requester.initTransport(id)\n                .withParams(options.params(id) || params)\n                .withHeaders(options.headers(id) || headers)\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                var name = entry.name,\n                    fullPath = entry.fullPath,\n                    indexOfNameInFullPath = fullPath.indexOf(name);\n\n                // remove file name from full path string\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n                // remove leading slash in full path string\n                if (fullPath.charAt(0) === \"/\") {\n                    fullPath = fullPath.substr(1);\n                }\n\n                file.qqPath = fullPath;\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            if (isFileDrag(e)) {\n                e.preventDefault();\n                maybeHideDropZones();\n            }\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest &&\n                (\n                    (dt.files && dt.files.length) ||                                     // Valid for drop events with files\n                    (!isSafari && dt.types.contains && dt.types.contains(\"Files\")) ||  // Valid in Chrome/Firefox\n                    (dt.types.includes && dt.types.includes(\"Files\"))               // Valid in IE\n                );\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n\n    this._testing = {};\n    this._testing.isValidFileDrag = isValidFileDrag;\n};\n","/*globals qq */\n/**\n * Defines the public API for FineUploader mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.uiPublicApi = {\n        addInitialFiles: function(cannedFileList) {\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\n            this._templating.addCacheToDom();\n        },\n\n        clearStoredFiles: function() {\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\n            this._templating.clearFiles();\n        },\n\n        addExtraDropzone: function(element) {\n            this._dnd && this._dnd.setupExtraDropzone(element);\n        },\n\n        removeExtraDropzone: function(element) {\n            if (this._dnd) {\n                return this._dnd.removeDropzone(element);\n            }\n        },\n\n        getItemByFileId: function(id) {\n            if (!this._templating.isHiddenForever(id)) {\n                return this._templating.getFileContainer(id);\n            }\n        },\n\n        reset: function() {\n            this._parent.prototype.reset.apply(this, arguments);\n            this._templating.reset();\n\n            if (!this._options.button && this._templating.getButton()) {\n                this._defaultButtonId = this._createUploadButton({\n                    element: this._templating.getButton(),\n                    title: this._options.text.fileInputTitle\n                }).getButtonId();\n            }\n\n            if (this._dnd) {\n                this._dnd.dispose();\n                this._dnd = this._setupDragAndDrop();\n            }\n\n            this._totalFilesInBatch = 0;\n            this._filesInBatchAddedToUi = 0;\n\n            this._setupClickAndEditEventHandlers();\n        },\n\n        setName: function(id, newName) {\n            var formattedFilename = this._options.formatFileName(newName);\n\n            this._parent.prototype.setName.apply(this, arguments);\n            this._templating.updateFilename(id, formattedFilename);\n        },\n\n        pauseUpload: function(id) {\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\n\n            paused && this._templating.uploadPaused(id);\n            return paused;\n        },\n\n        continueUpload: function(id) {\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\n\n            continued && this._templating.uploadContinued(id);\n            return continued;\n        },\n\n        getId: function(fileContainerOrChildEl) {\n            return this._templating.getFileId(fileContainerOrChildEl);\n        },\n\n        getDropTarget: function(fileId) {\n            var file = this.getFile(fileId);\n\n            return file.qqDropTarget;\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploader mode.\n     */\n    qq.uiPrivateApi = {\n        _getButton: function(buttonId) {\n            var button = this._parent.prototype._getButton.apply(this, arguments);\n\n            if (!button) {\n                if (buttonId === this._defaultButtonId) {\n                    button = this._templating.getButton();\n                }\n            }\n\n            return button;\n        },\n\n        _removeFileItem: function(fileId) {\n            this._templating.removeFile(fileId);\n        },\n\n        _setupClickAndEditEventHandlers: function() {\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\n\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\n            this._focusinEventSupported = !qq.firefox();\n\n            if (this._isEditFilenameEnabled())\n            {\n                this._filenameClickHandler = this._bindFilenameClickEvent();\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\n            }\n        },\n\n        _setupDragAndDrop: function() {\n            var self = this,\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\n                templating = this._templating,\n                defaultDropZone = templating.getDropZone();\n\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\n\n            return new qq.DragAndDrop({\n                dropZoneElements: dropZoneElements,\n                allowMultipleItems: this._options.multiple,\n                classes: {\n                    dropActive: this._options.classes.dropActive\n                },\n                callbacks: {\n                    processingDroppedFiles: function() {\n                        templating.showDropProcessing();\n                    },\n                    processingDroppedFilesComplete: function(files, targetEl) {\n                        templating.hideDropProcessing();\n\n                        qq.each(files, function(idx, file) {\n                            file.qqDropTarget = targetEl;\n                        });\n\n                        if (files.length) {\n                            self.addFiles(files, null, null);\n                        }\n                    },\n                    dropError: function(code, errorData) {\n                        self._itemError(code, errorData);\n                    },\n                    dropLog: function(message, level) {\n                        self.log(message, level);\n                    }\n                }\n            });\n        },\n\n        _bindFileButtonsClickEvent: function() {\n            var self = this;\n\n            return new qq.FileButtonsClickHandler({\n                templating: this._templating,\n\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n\n                onDeleteFile: function(fileId) {\n                    self.deleteFile(fileId);\n                },\n\n                onCancel: function(fileId) {\n                    self.cancel(fileId);\n                },\n\n                onRetry: function(fileId) {\n                    self.retry(fileId);\n                },\n\n                onPause: function(fileId) {\n                    self.pauseUpload(fileId);\n                },\n\n                onContinue: function(fileId) {\n                    self.continueUpload(fileId);\n                },\n\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                }\n            });\n        },\n\n        _isEditFilenameEnabled: function() {\n            /*jshint -W014 */\n            return this._templating.isEditFilenamePossible()\n                && !this._options.autoUpload\n                && qq.FilenameClickHandler\n                && qq.FilenameInputFocusHandler\n                && qq.FilenameInputFocusHandler;\n        },\n\n        _filenameEditHandler: function() {\n            var self = this,\n                templating = this._templating;\n\n            return {\n                templating: templating,\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n                onGetUploadStatus: function(fileId) {\n                    return self.getUploads({id: fileId}).status;\n                },\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                },\n                onSetName: function(id, newName) {\n                    self.setName(id, newName);\n                },\n                onEditingStatusChange: function(id, isEditing) {\n                    var qqInput = qq(templating.getEditInput(id)),\n                        qqFileContainer = qq(templating.getFileContainer(id));\n\n                    if (isEditing) {\n                        qqInput.addClass(\"qq-editing\");\n                        templating.hideFilename(id);\n                        templating.hideEditIcon(id);\n                    }\n                    else {\n                        qqInput.removeClass(\"qq-editing\");\n                        templating.showFilename(id);\n                        templating.showEditIcon(id);\n                    }\n\n                    // Force IE8 and older to repaint\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\n                }\n            };\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\n\n            if (this._isEditFilenameEnabled()) {\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\n                    this._templating.markFilenameEditable(id);\n                    this._templating.hideEditIcon(id);\n                }\n            }\n\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\n                this._templating.hideRetry(id);\n                this._templating.setStatusText(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\n            }\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\n                this._templating.hidePause(id);\n            }\n        },\n\n        _bindFilenameInputFocusInEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusInHandler(spec);\n        },\n\n        _bindFilenameInputFocusEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusHandler(spec);\n        },\n\n        _bindFilenameClickEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameClickHandler(spec);\n        },\n\n        _storeForLater: function(id) {\n            this._parent.prototype._storeForLater.apply(this, arguments);\n            this._templating.hideSpinner(id);\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._parent.prototype._onAllComplete.apply(this, arguments);\n            this._templating.resetTotalProgress();\n        },\n\n        _onSubmit: function(id, name) {\n            var file = this.getFile(id);\n\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\n                this._paramsStore.addReadOnly(id, {\n                    qqpath: file.qqPath\n                });\n            }\n\n            this._parent.prototype._onSubmit.apply(this, arguments);\n            this._addToList(id, name);\n        },\n\n        // The file item has been added to the DOM.\n        _onSubmitted: function(id) {\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\n            if (this._isEditFilenameEnabled()) {\n                this._templating.markFilenameEditable(id);\n                this._templating.showEditIcon(id);\n\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\n                if (!this._focusinEventSupported) {\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\n                }\n            }\n        },\n\n        // Update the progress bar & percentage as the file is uploaded\n        _onProgress: function(id, name, loaded, total) {\n            this._parent.prototype._onProgress.apply(this, arguments);\n\n            this._templating.updateProgress(id, loaded, total);\n\n            if (total === 0 || Math.round(loaded / total * 100) === 100) {\n                this._templating.hideCancel(id);\n                this._templating.hidePause(id);\n                this._templating.hideProgress(id);\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\n\n                // If ~last byte was sent, display total file size\n                this._displayFileSize(id);\n            }\n            else {\n                // If still uploading, display percentage - total size is actually the total request(s) size\n                this._displayFileSize(id, loaded, total);\n            }\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\n            this._templating.updateTotalProgress(loaded, total);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\n                templating = this._templating,\n                fileContainer = templating.getFileContainer(id),\n                self = this;\n\n            function completeUpload(result) {\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\n                // If so, don't perform any UI-related tasks related to this file.\n                if (!fileContainer) {\n                    return;\n                }\n\n                templating.setStatusText(id);\n\n                qq(fileContainer).removeClass(self._classes.retrying);\n                templating.hideProgress(id);\n\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\n                    templating.hideCancel(id);\n                }\n                templating.hideSpinner(id);\n\n                if (result.success) {\n                    self._markFileAsSuccessful(id);\n                }\n                else {\n                    qq(fileContainer).addClass(self._classes.fail);\n                    templating.showCancel(id);\n\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\n                        qq(fileContainer).addClass(self._classes.retryable);\n                        templating.showRetry(id);\n                    }\n                    self._controlFailureTextDisplay(id, result);\n                }\n            }\n\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\n            if (parentRetVal instanceof qq.Promise) {\n                parentRetVal.done(function(newResult) {\n                    completeUpload(newResult);\n                });\n\n            }\n            else {\n                completeUpload(result);\n            }\n\n            return parentRetVal;\n        },\n\n        _markFileAsSuccessful: function(id) {\n            var templating = this._templating;\n\n            if (this._isDeletePossible()) {\n                templating.showDeleteButton(id);\n            }\n\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\n\n            this._maybeUpdateThumbnail(id);\n        },\n\n        _onUploadPrep: function(id) {\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\n            this._templating.showSpinner(id);\n        },\n\n        _onUpload: function(id, name) {\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\n\n            this._templating.showSpinner(id);\n\n            return parentRetVal;\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\n\n            // Only display the pause button if we have finished uploading at least one chunk\n            // & this file can be resumed\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\n                this._templating.allowPause(id);\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._parent.prototype._onCancel.apply(this, arguments);\n            this._removeFileItem(id);\n\n            if (this._getNotFinished() === 0) {\n                this._templating.resetTotalProgress();\n            }\n        },\n\n        _onBeforeAutoRetry: function(id) {\n            var retryNumForDisplay, maxAuto, retryNote;\n\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\n\n            this._showCancelLink(id);\n\n            if (this._options.retry.showAutoRetryNote) {\n                retryNumForDisplay = this._autoRetries[id];\n                maxAuto = this._options.retry.maxAutoAttempts;\n\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\n\n                this._templating.setStatusText(id, retryNote);\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\n            }\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\n                this._templating.resetProgress(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\n                this._templating.setStatusText(id);\n                this._templating.showSpinner(id);\n                this._showCancelLink(id);\n                return true;\n            }\n            else {\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\n                this._templating.showRetry(id);\n                return false;\n            }\n        },\n\n        _onSubmitDelete: function(id) {\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\n\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\n        },\n\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\n            if (this._options.deleteFile.forceConfirm) {\n                this._showDeleteConfirm.apply(this, arguments);\n            }\n            else {\n                this._sendDeleteRequest.apply(this, arguments);\n            }\n        },\n\n        _onDeleteComplete: function(id, xhr, isError) {\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\n\n            this._templating.hideSpinner(id);\n\n            if (isError) {\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\n                this._templating.showDeleteButton(id);\n            }\n            else {\n                this._removeFileItem(id);\n            }\n        },\n\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\n            this._templating.hideDeleteButton(id);\n            this._templating.showSpinner(id);\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\n            this._deleteHandler.sendDelete.apply(this, arguments);\n        },\n\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\n            /*jshint -W004 */\n            var fileName = this.getName(id),\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\n                uuid = this.getUuid(id),\n                deleteRequestArgs = arguments,\n                self = this,\n                retVal;\n\n            retVal = this._options.showConfirm(confirmMessage);\n\n            if (qq.isGenericPromise(retVal)) {\n                retVal.then(function() {\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\n                });\n            }\n            else if (retVal !== false) {\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\n            }\n        },\n\n        _addToList: function(id, name, canned) {\n            var prependData,\n                prependIndex = 0,\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\n                record;\n\n            if (this._options.display.prependFiles) {\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\n                    prependIndex = this._filesInBatchAddedToUi - 1;\n                }\n\n                prependData = {\n                    index: prependIndex\n                };\n            }\n\n            if (!canned) {\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\n                    this._templating.disableCancel();\n                }\n\n                // Cancel all existing (previous) files and clear the list if this file is not part of\n                // a scaled file group that has already been accepted, or if this file is not part of\n                // a scaled file group at all.\n                if (!this._options.multiple) {\n                    record = this.getUploads({id: id});\n\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\n\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\n                        this._handler.cancelAll();\n                        this._clearList();\n                        this._handledProxyGroup = null;\n                    }\n                }\n            }\n\n            if (canned) {\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\n            }\n            else {\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\n            }\n\n            this._filesInBatchAddedToUi += 1;\n\n            if (canned ||\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\n\n                this._displayFileSize(id);\n            }\n        },\n\n        _clearList: function() {\n            this._templating.clearFiles();\n            this.clearStoredFiles();\n        },\n\n        _displayFileSize: function(id, loadedSize, totalSize) {\n            var size = this.getSize(id),\n                sizeForDisplay = this._formatSize(size);\n\n            if (size >= 0) {\n                if (loadedSize !== undefined && totalSize !== undefined) {\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\n                }\n\n                this._templating.updateSize(id, sizeForDisplay);\n            }\n        },\n\n        _formatProgress: function(uploadedSize, totalSize) {\n            var message = this._options.text.formatProgress;\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\n            r(\"{total_size}\", this._formatSize(totalSize));\n            return message;\n        },\n\n        _controlFailureTextDisplay: function(id, response) {\n            var mode, responseProperty, failureReason;\n\n            mode = this._options.failedUploadTextDisplay.mode;\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\n\n            if (mode === \"custom\") {\n                failureReason = response[responseProperty];\n                if (!failureReason) {\n                    failureReason = this._options.text.failUpload;\n                }\n\n                this._templating.setStatusText(id, failureReason);\n\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\n                    this._showTooltip(id, failureReason);\n                }\n            }\n            else if (mode === \"default\") {\n                this._templating.setStatusText(id, this._options.text.failUpload);\n            }\n            else if (mode !== \"none\") {\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\n            }\n        },\n\n        _showTooltip: function(id, text) {\n            this._templating.getFileContainer(id).title = text;\n        },\n\n        _showCancelLink: function(id) {\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\n                this._templating.showCancel(id);\n            }\n        },\n\n        _itemError: function(code, name, item) {\n            var message = this._parent.prototype._itemError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _batchError: function(message) {\n            this._parent.prototype._batchError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _setupPastePrompt: function() {\n            var self = this;\n\n            this._options.callbacks.onPasteReceived = function() {\n                var message = self._options.paste.namePromptMessage,\n                    defaultVal = self._options.paste.defaultName;\n\n                return self._options.showPrompt(message, defaultVal);\n            };\n        },\n\n        _fileOrBlobRejected: function(id, name) {\n            this._totalFilesInBatch -= 1;\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            this._totalFilesInBatch = items.length;\n            this._filesInBatchAddedToUi = 0;\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\n        },\n\n        _maybeUpdateThumbnail: function(fileId) {\n            var thumbnailUrl = this._thumbnailUrls[fileId],\n                fileStatus = this.getUploads({id: fileId}).status;\n\n            if (fileStatus !== qq.status.DELETED &&\n                (thumbnailUrl ||\n                this._options.thumbnails.placeholders.waitUntilResponse ||\n                !qq.supportedFeatures.imagePreviews)) {\n\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\n                // if called with a null thumbnailUrl.\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\n\n            this._addToList(id, this.getName(id), true);\n            this._templating.hideSpinner(id);\n            this._templating.hideCancel(id);\n            this._markFileAsSuccessful(id);\n\n            return id;\n        },\n\n        _setSize: function(id, newSize) {\n            this._parent.prototype._setSize.apply(this, arguments);\n\n            this._templating.updateSize(id, this._formatSize(newSize));\n        },\n\n        _sessionRequestComplete: function() {\n            this._templating.addCacheToDom();\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateDom,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListEl,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListEl = fileListNode.children[0].cloneNode(true);\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: tempTemplateEl,\n                fileTemplate: fileListEl\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateDom = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.appendChild(templateDom.template.cloneNode(true));\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            container.innerHTML = \"\";\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = templateDom.fileTemplate.cloneNode(true),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n"]}