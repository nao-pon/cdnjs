{"version":3,"sources":["types.js","defaults.js","support.js","../../node_modules/loadjs/dist/loadjs.umd.js","utils.js","console.js","fullscreen.js","captions.js","i18n.js","ui.js","html5.js","controls.js","listeners.js","storage.js","plugins/ads.js","plugins/youtube.js","plugins/vimeo.js","media.js","source.js","plyr.js"],"names":["providers","types","defaults","window","navigator","language","split","range","factory","devnull","bundleIdCache","bundleResultCache","bundleCallbackQueue","publish","bundleId","pathsNotFound","q","length","splice","executeCallbacks","args","depsNotFound","call","success","error","loadFile","path","callbackFn","numTries","isCss","e","doc","document","async","maxTries","numRetries","beforeCallbackFn","before","pathStripped","replace","test","createElement","rel","href","src","undefined","onload","onerror","onbeforeload","ev","result","type","sheet","cssText","x","defaultPrevented","head","appendChild","loadjs","paths","arg1","arg2","trim","fn","i","numWaiting","push","loadFiles","ready","deps","bundleIds","r","subscribe","done","reset","isDefined","module","exports","utils","input","this","instanceof","Plyr","getConstructor","Object","Number","isNaN","String","Boolean","Function","nullOrUndefined","Array","isArray","WeakMap","NodeList","Element","Text","Event","TextTrackCue","VTTCue","TextTrack","string","kind","array","nodeList","object","keys","constructor","documentMode","documentElement","style","userAgent","platform","url","responseType","arguments","Promise","resolve","reject","request","XMLHttpRequest","addEventListener","JSON","parse","responseText","response","Error","statusText","open","send","id","is","hasId","exists","querySelectorAll","container","toggleHidden","setAttribute","support","storage","cached","localStorage","getItem","data","content","fetch","then","empty","setItem","stringify","catch","injectSprite","innerHTML","body","insertBefore","childNodes","prefix","Math","floor","random","elements","wrapper","targets","from","reverse","forEach","element","index","child","cloneNode","parent","parentNode","sibling","nextSibling","attributes","text","setAttributes","textContent","target","removeElement","removeChild","lastChild","newChild","oldChild","replaceChild","entries","_ref","key","_ref2","value","sel","existingAttributes","existing","s","selector","className","parts","charAt","class","toggle","contains","classList","removeAttribute","prototype","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","includes","querySelector","controls","getElement","config","selectors","buttons","getElements","play","pause","restart","rewind","fastForward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","currentTime","seekTooltip","classNames","tooltip","debug","warn","toggleNativeControls","focused","activeElement","focusable","first","last","trap","event","keyCode","getFocusElement","shiftKey","focus","preventDefault","on","off","callback","passive","capture","function","Node","toggleListener","events","options","passiveListeners","bubbles","detail","CustomEvent","assign","plyr","dispatchEvent","toggleState","pressed","getAttribute","state","boolean","current","max","toFixed","parseInt","time","displayHours","inverted","number","formatTime","format","slice","hours","getHours","mins","getMinutes","secs","getSeconds","find","RegExp","toString","toUpperCase","substr","toLowerCase","replaceAll","toTitleCase","toPascalCase","sources","_len","_key","source","shift","defineProperty","extend","apply","concat","toConsumableArray","filter","item","indexOf","youtube","vimeo","match","$2","parser","search","startsWith","parseUrl","reduce","params","hash","_hash$split2","val","decodeURIComponent","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","innerText","width","height","ratio","getRatio","w","h","offsetHeight","provider","inline","api","ui","browser","getBrowser","playsInline","isIPhone","video","rangeInput","audio","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","supported","transitionEndEvent","matchMedia","noop","Console","enabled","console","log","bind","onChange","button","player","active","isIos","trapFocus","toggleFallback","scrollPosition","scrollX","scrollY","scrollTo","y","overflow","toggleClass","fallback","Fullscreen","name","_this","stopPropagation","update","native","iosNative","playing","webkitEnterFullscreen","requestFullscreen","webkitExitFullscreen","action","cancelFullScreen","exit","enter","fullscreenElement","hasClass","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","exitFullscreen","some","pre","stored","get","isYouTube","textTracks","setCaptionsMenu","getAttributesFromSelector","insertAfter","getTracks","tracks","isIE","URL","track","hostname","location","protocol","blob","createObjectURL","setLanguage","show","setCue","mode","currentTrack","getCurrentTrack","activeCues","isVimeo","embed","enableTextTrack","_this2","cue","setText","getCueAsHTML","emptyElement","caption","i18n","seekTime","title","uiSupported","listeners","inject","setup","muted","speed","loop","quality","updateVolume","timeUpdate","checkPlaying","setTitle","label","isEmbed","iframe","stopped","paused","toggleControls","loading","timers","setTimeout","failed","networkState","_this3","setRange","updateRangeFill","getElementsByTagName","nodeValue","getPercentage","setProgress","buffered","invert","invertTime","updateTimeDisplay","seeking","updateProgress","hasDuration","displayDuration","updateSeekTooltip","html5","getSources","sizes","dedupe","mime","load","blankVideo","isWebkit","setProperty","iconUrl","svg4everybody","getIconUrl","iconPath","absolute","iconPrefix","icon","createElementNS","use","setAttributeNS","attr","hidden","badge","menu","buttonType","toCamelCase","labelPressed","iconPressed","control","createIcon","createLabel","suffix","list","checked","radio","faux","aria-hidden","insertAdjacentHTML","tooltips","percent","clientRect","getBoundingClientRect","visible","_toggle","touch","pageX","left","parseFloat","setting","tab","tabs","pane","panes","toggleTab","sort","a","b","sorting","getLabel","createMenuItem","createBadge","getBadge","updateSetting","getLanguage","default","hasTracks","unshift","_this4","checkMenu","values","form","isMenuItem","isButton","clone","position","opacity","scrollWidth","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","createButton","createRange","createProgress","createTime","inner","home","_this5","back","setSpeedMenu","setQualityMenu","getQualityOptions","loadSprite","create","findElements","repaint","labels","_this6","Listeners","lastKey","handleKey","toggleMenu","firstTouch","code","which","repeat","altKey","ctrlKey","metaKey","editable","togglePlay","increaseVolume","decreaseVolume","forward","toggleCaptions","isTouch","keyboard","global","tabFocus","hideControls","durationUpdate","hasAudio","showPosterOnEnd","checkLoading","ads","initialized","managerPromise","clickToPlay","ended","disableContextMenu","set","inputEvent","proxy","defaultHandler","customHandlerKey","customHandler","returned","hasCustomHandler","showTab","toggleInvert","hover","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","Storage","store","json","removeItem","Ads","publisherId","manager","loader","cuePoints","safetyTimer","countdownTimer","google","ima","loadScript","urls","googleIMA","trigger","startSafetyTimer","clearSafetyTimer","setupIMA","setVpaidMode","ImaSdkSettings","VpaidMode","ENABLED","setLocale","displayContainer","AdDisplayContainer","requestAds","AdsLoader","AdsManagerLoadedEvent","Type","ADS_MANAGER_LOADED","onAdsManagerLoaded","AdErrorEvent","AD_ERROR","onAdError","AdsRequest","adTagUrl","tagUrl","linearAdSlotWidth","offsetWidth","linearAdSlotHeight","nonLinearAdSlotWidth","nonLinearAdSlotHeight","forceNonLinearFullSlot","setInterval","getRemainingTime","AdsRenderingSettings","restoreCustomPlaybackStateOnAdBreakComplete","enablePreloading","getAdsManager","getCuePoints","cuePoint","seekElement","cuePercentage","cues","setVolume","AdEvent","onAdEvent","ad","getAd","_this7","LOADED","pollCountdown","isLinear","ALL_ADS_COMPLETED","loadAds","CONTENT_PAUSE_REQUESTED","pauseContent","CONTENT_RESUME_REQUESTED","resumeContent","STARTED","MIDPOINT","COMPLETE","IMPRESSION","CLICK","cancel","contentComplete","_this8","seekedTime","discardAdBreak","resize","ViewMode","NORMAL","initialize","_this9","init","start","adError","zIndex","_this10","destroy","handlers","handler","_this11","Date","now","base","buildUrlParams","mapQualityUnit","setAspectRatio","YT","Player","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","videoId","getVideoData","items","snippet","paddingBottom","currentId","parseYouTubeId","generateId","replaceElement","autoplay","message","instance","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stop","stopVideo","getDuration","getCurrentTime","seekTo","setPlaybackRate","getPlaybackQuality","setPlaybackQuality","getVideoUrl","getAvailablePlaybackRates","buffering","getVideoLoadedFraction","lastBuffered","build","levels","getAvailableQualityLevels","level","Vimeo","padding","offset","transform","parseVimeoId","setCurrentTime","selected","setLoop","currentSrc","all","getVideoWidth","getVideoHeight","dimensions","getAspectRatio","setAutopause","autopause","getVideoTitle","getTextTracks","stripHTML","seconds","wrap","insertElement","attribute","cancelRequests","check","crossorigin","poster","addStyleHook","insertElements","jQuery","original","tagName","getProviderByUrl","getUrlParams","truthy","playsinline","hasAttribute","step","webkitShowPlaybackTargetPicker","delay","isEnterFullscreen","noTransition","soft","clear","unload","readyState","targetTime","end","fauxDuration","realDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","change","states","webkitPresentationMode"],"mappings":"uLAIA,IAAaA,SACF,gBACE,gBACF,SAGEC,SACF,cACA,SCRLC,YAEO,QAGF,UAGA,YAGG,aAGC,WAGD,UAGF,SACD,WAGG,sBAIO,cAGL,gBAGE,QAGP,oBAGM,gBAGC,mBAGG,sBAGG,cAGR,aACA,eACH,uDAGG,wDAIC,aAEL,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,0BAMI,mBAOE,WAEN,GACA,IACA,EACA,KACA,IACA,KACA,uBAMK,UACD,uBAKE,QACJ,qBAKE,WACEC,OAAOC,UAAUC,SAASC,MAAM,KAAK,yBAKtC,YACC,aACC,qBAKF,MACJ,kBAKL,+BAMA,eACA,OACA,SACA,WACA,WACA,MACA,UACA,wBAGA,WACA,UACA,uBAKS,iBACD,8BACF,aACC,oBACM,+BACP,cACE,kBACE,uBACG,wBACH,kBACF,cACF,cACE,wBACQ,kCACC,mCACA,kCACD,6BACJ,8BACF,oBACA,iBACH,gBACE,eACH,aACC,YACF,UACA,YACE,iBACG,yBACK,uBAMN,uDAGA,qDAGA,uEAMH,UACA,WACC,aACE,YACD,iBACK,UACP,YACE,cACE,gBACE,SACP,aACI,WACF,aACE,UACH,cACI,sBAQV,WACA,UACA,UACA,UACA,UACA,iBACA,YACA,aACA,iBACA,aACA,eACA,OACA,QACA,QACA,UACA,SACA,UACA,aACA,8BAIA,iBACA,kBACA,mBACA,iBACA,iBACA,gBACA,sBAIA,gBACA,+BAIA,kBACA,mBACA,YACA,cACA,cACA,iBACA,gBACA,gCAMU,uDACC,4BAEI,aACF,0BAEL,4BAEE,2BACC,8BACE,+BACD,mCACK,kCACP,8BACI,oCACE,+BACP,4BACI,iCACC,8BACJ,mCAGA,4BACE,6BACD,+BACG,iCACD,8CAGI,gCACH,+BACF,iCACA,+BACF,+BACE,mCAEF,2BACA,gCAEG,oDAMN,4BACA,wBACF,oBACI,qBACH,qBACI,oBACD,wBACA,wBACA,sBACF,wBACA,sBACE,qBACH,oBACE,6BACM,4BACP,uBACE,6BACI,6BACC,kCAEH,0BACA,mB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","file":"plyr.min.js","sourcesContent":["// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\nexport default { providers, types };\n","// ==========================================================================\n// Plyr default config\n// ==========================================================================\n\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Revert to poster on finish (HTML5 - will cause reload)\n    showPosterOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/3.1.0-beta.1/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 720,\n        options: [\n            4320,\n            2880,\n            2160,\n            1440,\n            1080,\n            720,\n            576,\n            480,\n            360,\n            240,\n            'default', // YouTube's \"auto\"\n        ],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [\n            0.5,\n            0.75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n        ],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: window.navigator.language.split('-')[0],\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n        iosNative: false, // Use the native fullscreen in iOS (disables custom controls)\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        // 'restart',\n        // 'rewind',\n        'play',\n        // 'fast-forward',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: [\n        'captions',\n        'quality',\n        'speed',\n    ],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime} secs',\n        play: 'Play',\n        pause: 'Pause',\n        fastForward: 'Forward {seektime} secs',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        disabled: 'Disabled',\n        advertisement: 'Ad',\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            api: 'https://player.vimeo.com/api/player.js',\n        },\n        youtube: {\n            api: 'https://www.youtube.com/iframe_api',\n        },\n        googleIMA: {\n            api: 'https://imasdk.googleapis.com/js/sdkloader/ima3.js',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        fastForward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n\n        // Ads\n        'adsloaded',\n        'adscontentpause',\n        'adscontentresume',\n        'adstarted',\n        'adsmidpoint',\n        'adscomplete',\n        'adsallcomplete',\n        'adsimpression',\n        'adsclick',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            fastForward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress--buffer',\n            played: '.plyr__progress--played',\n            loop: '.plyr__progress--loop',\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        ads: 'plyr__ads',\n        control: 'plyr__control',\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        stopped: 'plyr--stopped',\n        playing: 'plyr--playing',\n        loading: 'plyr--loading',\n        error: 'plyr--has-error',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        cues: 'plyr__cues',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // Embed attributes\n    attributes: {\n        embed: {\n            provider: 'data-plyr-provider',\n            id: 'data-plyr-embed-id',\n        },\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n\n    // Advertisements plugin\n    // Register for an account here: http://vi.ai/publisher-video-monetization/?aid=plyrio\n    ads: {\n        enabled: false,\n        publisherId: '',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, inline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const playsInline = browser.isIPhone && inline && support.inline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    inline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Check directly if codecs specified\n            if (type.includes('codecs=')) {\n                return media.canPlayType(type).replace(/no/, '');\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // NOTE: Remember a device can be mouse + touch enabled so we check on first touch event\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEndEvent !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.loadjs = factory();\n  }\n}(this, function() {\n/**\n * Global dependencies.\n * @global {Object} document - DOM\n */\n\nvar devnull = function() {},\n    bundleIdCache = {},\n    bundleResultCache = {},\n    bundleCallbackQueue = {};\n\n\n/**\n * Subscribe to bundle load event.\n * @param {string[]} bundleIds - Bundle ids\n * @param {Function} callbackFn - The callback function\n */\nfunction subscribe(bundleIds, callbackFn) {\n  // listify\n  bundleIds = bundleIds.push ? bundleIds : [bundleIds];\n\n  var depsNotFound = [],\n      i = bundleIds.length,\n      numWaiting = i,\n      fn,\n      bundleId,\n      r,\n      q;\n\n  // define callback function\n  fn = function (bundleId, pathsNotFound) {\n    if (pathsNotFound.length) depsNotFound.push(bundleId);\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(depsNotFound);\n  };\n\n  // register callback\n  while (i--) {\n    bundleId = bundleIds[i];\n\n    // execute callback if in result cache\n    r = bundleResultCache[bundleId];\n    if (r) {\n      fn(bundleId, r);\n      continue;\n    }\n\n    // add to callback queue\n    q = bundleCallbackQueue[bundleId] = bundleCallbackQueue[bundleId] || [];\n    q.push(fn);\n  }\n}\n\n\n/**\n * Publish bundle load event.\n * @param {string} bundleId - Bundle id\n * @param {string[]} pathsNotFound - List of files not found\n */\nfunction publish(bundleId, pathsNotFound) {\n  // exit if id isn't defined\n  if (!bundleId) return;\n\n  var q = bundleCallbackQueue[bundleId];\n\n  // cache result\n  bundleResultCache[bundleId] = pathsNotFound;\n\n  // exit if queue is empty\n  if (!q) return;\n\n  // empty callback queue\n  while (q.length) {\n    q[0](bundleId, pathsNotFound);\n    q.splice(0, 1);\n  }\n}\n\n\n/**\n * Execute callbacks.\n * @param {Object or Function} args - The callback args\n * @param {string[]} depsNotFound - List of dependencies not found\n */\nfunction executeCallbacks(args, depsNotFound) {\n  // accept function as argument\n  if (args.call) args = {success: args};\n\n  // success and error callbacks\n  if (depsNotFound.length) (args.error || devnull)(depsNotFound);\n  else (args.success || devnull)(args);\n}\n\n\n/**\n * Load individual file.\n * @param {string} path - The file path\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFile(path, callbackFn, args, numTries) {\n  var doc = document,\n      async = args.async,\n      maxTries = (args.numRetries || 0) + 1,\n      beforeCallbackFn = args.before || devnull,\n      pathStripped = path.replace(/^(css|img)!/, ''),\n      isCss,\n      e;\n\n  numTries = numTries || 0;\n\n  if (/(^css!|\\.css$)/.test(path)) {\n    isCss = true;\n\n    // css\n    e = doc.createElement('link');\n    e.rel = 'stylesheet';\n    e.href = pathStripped; //.replace(/^css!/, '');  // remove \"css!\" prefix\n  } else if (/(^img!|\\.(png|gif|jpg|svg)$)/.test(path)) {\n    // image\n    e = doc.createElement('img');\n    e.src = pathStripped;    \n  } else {\n    // javascript\n    e = doc.createElement('script');\n    e.src = path;\n    e.async = async === undefined ? true : async;\n  }\n\n  e.onload = e.onerror = e.onbeforeload = function (ev) {\n    var result = ev.type[0];\n\n    // Note: The following code isolates IE using `hideFocus` and treats empty\n    // stylesheets as failures to get around lack of onerror support\n    if (isCss && 'hideFocus' in e) {\n      try {\n        if (!e.sheet.cssText.length) result = 'e';\n      } catch (x) {\n        // sheets objects created from load errors don't allow access to\n        // `cssText`\n        result = 'e';\n      }\n    }\n\n    // handle retries in case of load failure\n    if (result == 'e') {\n      // increment counter\n      numTries += 1;\n\n      // exit function and try again\n      if (numTries < maxTries) {\n        return loadFile(path, callbackFn, args, numTries);\n      }\n    }\n\n    // execute callback\n    callbackFn(path, result, ev.defaultPrevented);\n  };\n\n  // add to document (unless callback returns `false`)\n  if (beforeCallbackFn(path, e) !== false) doc.head.appendChild(e);\n}\n\n\n/**\n * Load multiple files.\n * @param {string[]} paths - The file paths\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFiles(paths, callbackFn, args) {\n  // listify paths\n  paths = paths.push ? paths : [paths];\n\n  var numWaiting = paths.length,\n      x = numWaiting,\n      pathsNotFound = [],\n      fn,\n      i;\n\n  // define callback function\n  fn = function(path, result, defaultPrevented) {\n    // handle error\n    if (result == 'e') pathsNotFound.push(path);\n\n    // handle beforeload event. If defaultPrevented then that means the load\n    // will be blocked (ex. Ghostery/ABP on Safari)\n    if (result == 'b') {\n      if (defaultPrevented) pathsNotFound.push(path);\n      else return;\n    }\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(pathsNotFound);\n  };\n\n  // load scripts\n  for (i=0; i < x; i++) loadFile(paths[i], fn, args);\n}\n\n\n/**\n * Initiate script load and register bundle.\n * @param {(string|string[])} paths - The file paths\n * @param {(string|Function)} [arg1] - The bundleId or success callback\n * @param {Function} [arg2] - The success or error callback\n * @param {Function} [arg3] - The error callback\n */\nfunction loadjs(paths, arg1, arg2) {\n  var bundleId,\n      args;\n\n  // bundleId (if string)\n  if (arg1 && arg1.trim) bundleId = arg1;\n\n  // args (default is {})\n  args = (bundleId ? arg2 : arg1) || {};\n\n  // throw error if bundle is already defined\n  if (bundleId) {\n    if (bundleId in bundleIdCache) {\n      throw \"LoadJS\";\n    } else {\n      bundleIdCache[bundleId] = true;\n    }\n  }\n\n  // load scripts\n  loadFiles(paths, function (pathsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, pathsNotFound);\n\n    // publish bundle load event\n    publish(bundleId, pathsNotFound);\n  }, args);\n}\n\n\n/**\n * Execute callbacks when dependencies have been satisfied.\n * @param {(string|string[])} deps - List of bundle ids\n * @param {Object} args - success/error arguments\n */\nloadjs.ready = function ready(deps, args) {\n  // subscribe to bundle load event\n  subscribe(deps, function (depsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, depsNotFound);\n  });\n\n  return loadjs;\n};\n\n\n/**\n * Manually satisfy bundle dependencies.\n * @param {string} bundleId - The bundle id\n */\nloadjs.done = function done(bundleId) {\n  publish(bundleId, []);\n};\n\n\n/**\n * Reset loadjs dependencies statuses\n */\nloadjs.reset = function reset() {\n  bundleIdCache = {};\n  bundleResultCache = {};\n  bundleCallbackQueue = {};\n};\n\n\n/**\n * Determine if bundle has already been defined\n * @param String} bundleId - The bundle id\n */\nloadjs.isDefined = function isDefined(bundleId) {\n  return bundleId in bundleIdCache;\n};\n\n\n// export\nreturn loadjs;\n\n}));\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport loadjs from 'loadjs';\n\nimport support from './support';\nimport { providers } from './types';\n\nconst utils = {\n    // Check variable types\n    is: {\n        plyr(input) {\n            return this.instanceof(input, window.Plyr);\n        },\n        object(input) {\n            return this.getConstructor(input) === Object;\n        },\n        number(input) {\n            return this.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return this.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return this.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return this.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !this.nullOrUndefined(input) && Array.isArray(input);\n        },\n        weakMap(input) {\n            return this.instanceof(input, window.WeakMap);\n        },\n        nodeList(input) {\n            return this.instanceof(input, window.NodeList);\n        },\n        element(input) {\n            return this.instanceof(input, window.Element);\n        },\n        textNode(input) {\n            return this.getConstructor(input) === Text;\n        },\n        event(input) {\n            return this.instanceof(input, window.Event);\n        },\n        cue(input) {\n            return this.instanceof(input, window.TextTrackCue) || this.instanceof(input, window.VTTCue);\n        },\n        track(input) {\n            return this.instanceof(input, TextTrack) || (!this.nullOrUndefined(input) && this.string(input.kind));\n        },\n        url(input) {\n            return !this.nullOrUndefined(input) && /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/.test(input);\n        },\n        nullOrUndefined(input) {\n            return input === null || typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                this.nullOrUndefined(input) ||\n                ((this.string(input) || this.array(input) || this.nodeList(input)) && !input.length) ||\n                (this.object(input) && !Object.keys(input).length)\n            );\n        },\n        instanceof(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n        getConstructor(input) {\n            return !this.nullOrUndefined(input) ? input.constructor : null;\n        },\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Fetch wrapper\n    // Using XHR to avoid issues with older browsers\n    fetch(url, responseType = 'text') {\n        return new Promise((resolve, reject) => {\n            try {\n                const request = new XMLHttpRequest();\n\n                // Check for CORS support\n                if (!('withCredentials' in request)) {\n                    return;\n                }\n\n                request.addEventListener('load', () => {\n                    if (responseType === 'text') {\n                        try {\n                            resolve(JSON.parse(request.responseText));\n                        } catch (e) {\n                            resolve(request.responseText);\n                        }\n                    } else {\n                        resolve(request.response);\n                    }\n                });\n\n                request.addEventListener('error', () => {\n                    throw new Error(request.statusText);\n                });\n\n                request.open('GET', url, true);\n\n                // Set the required response type\n                request.responseType = responseType;\n\n                request.send();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    },\n\n    // Load an external script\n    loadScript(url) {\n        return new Promise((resolve, reject) => {\n            loadjs(url, {\n                success: resolve,\n                error: reject,\n            });\n        });\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (!utils.is.string(url)) {\n            return;\n        }\n\n        const prefix = 'cache-';\n        const hasId = utils.is.string(id);\n        let isCached = false;\n\n        const exists = () => document.querySelectorAll(`#${id}`).length;\n\n        function injectSprite(data) {\n            // Check again incase of race condition\n            if (hasId && exists()) {\n                return;\n            }\n\n            // Inject content\n            this.innerHTML = data;\n\n            // Inject the SVG to the body\n            document.body.insertBefore(this, document.body.childNodes[0]);\n        }\n\n        // Only load once if ID set\n        if (!hasId || !exists()) {\n            // Create container\n            const container = document.createElement('div');\n            utils.toggleHidden(container, true);\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (support.storage) {\n                const cached = window.localStorage.getItem(prefix + id);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    injectSprite.call(container, data.content);\n                    return;\n                }\n            }\n\n            // Get the sprite\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.empty(result)) {\n                        return;\n                    }\n\n                    if (support.storage) {\n                        window.localStorage.setItem(\n                            prefix + id,\n                            JSON.stringify({\n                                content: result,\n                            }),\n                        );\n                    }\n\n                    injectSprite.call(container, result);\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.textContent = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove an element\n    removeElement(element) {\n        if (!utils.is.element(element) || !utils.is.element(element.parentNode)) {\n            return;\n        }\n\n        if (utils.is.nodeList(element) || utils.is.array(element)) {\n            Array.from(element).forEach(utils.removeElement);\n            return;\n        }\n\n        element.parentNode.removeChild(element);\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Replace element\n    replaceElement(newChild, oldChild) {\n        if (!utils.is.element(oldChild) || !utils.is.element(oldChild.parentNode) || !utils.is.element(newChild)) {\n            return null;\n        }\n\n        oldChild.parentNode.replaceChild(newChild, oldChild);\n\n        return newChild;\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        if (!utils.is.element(element) || utils.is.empty(attributes)) {\n            return;\n        }\n\n        Object.entries(attributes).forEach(([\n            key,\n            value,\n        ]) => {\n            element.setAttribute(key, value);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle class on an element\n    toggleClass(element, className, toggle) {\n        if (utils.is.element(element)) {\n            const contains = element.classList.contains(className);\n\n            element.classList[toggle ? 'add' : 'remove'](className);\n\n            return (toggle && !contains) || (!toggle && contains);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.element(element) && element.classList.contains(className);\n    },\n\n    // Toggle hidden attribute on an element\n    toggleHidden(element, toggle) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        if (toggle) {\n            element.setAttribute('hidden', '');\n        } else {\n            element.removeAttribute('hidden');\n        }\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                fastForward: utils.getElement.call(this, this.config.selectors.buttons.fastForward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n            };\n\n            // Seek tooltip\n            if (utils.is.element(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.debug.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus(element = null, toggle = false) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        const focusable = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = focusable[0];\n        const last = focusable[focusable.length - 1];\n\n        const trap = event => {\n            // Bail if not tab key or not fullscreen\n            if (event.key !== 'Tab' || event.keyCode !== 9) {\n                return;\n            }\n\n            // Get the current focused element\n            const focused = utils.getFocusElement();\n\n            if (focused === last && !event.shiftKey) {\n                // Move focus to first element that can be tabbed if Shift isn't used\n                first.focus();\n                event.preventDefault();\n            } else if (focused === first && event.shiftKey) {\n                // Move focus to last element that can be tabbed if Shift is used\n                last.focus();\n                event.preventDefault();\n            }\n        };\n\n        if (toggle) {\n            utils.on(this.elements.container, 'keydown', trap, false);\n        } else {\n            utils.off(this.elements.container, 'keydown', trap, false);\n        }\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle = false, passive = true, capture = false) {\n        // Bail if no elemetns, event, or callback\n        if (utils.is.empty(elements) || utils.is.empty(event) || !utils.is.function(callback)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements) || utils.is.array(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just the capture boolean for browsers with no passive listener support\n        let options = capture;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive,\n                // Whether the listener is a capturing listener or not\n                capture,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events = '', callback, passive = true, capture = false) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events = '', callback, passive = true, capture = false) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type = '', bubbles = false, detail = {}) {\n        // Bail if no element\n        if (!utils.is.element(element) || utils.is.empty(type)) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles,\n            detail: Object.assign({}, detail, {\n                plyr: utils.is.plyr(this) ? this : null,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(element, input) {\n        // If multiple elements passed\n        if (utils.is.array(element) || utils.is.nodeList(element)) {\n            Array.from(element).forEach(target => utils.toggleState(target, input));\n            return;\n        }\n\n        // Bail if no target\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        // Get state\n        const pressed = element.getAttribute('aria-pressed') === 'true';\n        const state = utils.is.boolean(input) ? input : !pressed;\n\n        // Set the attribute on target\n        element.setAttribute('aria-pressed', state);\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Time helpers\n    getHours(value) {\n        return parseInt((value / 60 / 60) % 60, 10);\n    },\n    getMinutes(value) {\n        return parseInt((value / 60) % 60, 10);\n    },\n    getSeconds(value) {\n        return parseInt(value % 60, 10);\n    },\n\n    // Format time to UI friendly string\n    formatTime(time = 0, displayHours = false, inverted = false) {\n        // Bail if the value isn't a number\n        if (!utils.is.number(time)) {\n            return this.formatTime(null, displayHours, inverted);\n        }\n\n        // Format time component to add leading zero\n        const format = value => `0${value}`.slice(-2);\n\n        // Breakdown to hours, mins, secs\n        let hours = this.getHours(time);\n        const mins = this.getMinutes(time);\n        const secs = this.getSeconds(time);\n\n        // Do we need to display hours?\n        if (displayHours || hours > 0) {\n            hours = `${hours}:`;\n        } else {\n            hours = '';\n        }\n\n        // Render\n        return `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n    },\n\n    // Replace all occurances of a string in a string\n    replaceAll(input = '', find = '', replace = '') {\n        return input.replace(new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'), replace.toString());\n    },\n\n    // Convert to title case\n    toTitleCase(input = '') {\n        return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n    },\n\n    // Convert string to pascalCase\n    toPascalCase(input = '') {\n        let string = input.toString();\n\n        // Convert kebab case\n        string = utils.replaceAll(string, '-', ' ');\n\n        // Convert snake case\n        string = utils.replaceAll(string, '_', ' ');\n\n        // Convert to title case\n        string = utils.toTitleCase(string);\n\n        // Convert to pascal case\n        return utils.replaceAll(string, ' ', '');\n    },\n\n    // Convert string to pascalCase\n    toCamelCase(input = '') {\n        let string = input.toString();\n\n        // Convert to pascal case\n        string = utils.toPascalCase(string);\n\n        // Convert first character to lowercase\n        return string.charAt(0).toLowerCase() + string.slice(1);\n    },\n\n    // Deep extend destination object with N more objects\n    extend(target = {}, ...sources) {\n        if (!sources.length) {\n            return target;\n        }\n\n        const source = sources.shift();\n\n        if (!utils.is.object(source)) {\n            return target;\n        }\n\n        Object.keys(source).forEach(key => {\n            if (utils.is.object(source[key])) {\n                if (!Object.keys(target).includes(key)) {\n                    Object.assign(target, { [key]: {} });\n                }\n\n                utils.extend(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        });\n\n        return utils.extend(target, ...sources);\n    },\n\n    // Remove duplicates in an array\n    dedupe(array) {\n        if (!utils.is.array(array)) {\n            return array;\n        }\n\n        return array.filter((item, index) => array.indexOf(item) === index);\n    },\n\n    // Get the provider for a given URL\n    getProviderByUrl(url) {\n        // YouTube\n        if (/^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/.test(url)) {\n            return providers.youtube;\n        }\n\n        // Vimeo\n        if (/^https?:\\/\\/player.vimeo.com\\/video\\/\\d{8,}(?=\\b|\\/)/.test(url)) {\n            return providers.vimeo;\n        }\n\n        return null;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert a URL to a location object\n    parseUrl(url) {\n        const parser = document.createElement('a');\n        parser.href = url;\n        return parser;\n    },\n\n    // Get URL query parameters\n    getUrlParams(input) {\n        let search = input;\n\n        // Parse URL if needed\n        if (input.startsWith('http://') || input.startsWith('https://')) {\n            ({ search } = this.parseUrl(input));\n        }\n\n        if (this.is.empty(search)) {\n            return null;\n        }\n\n        const hashes = search.slice(search.indexOf('?') + 1).split('&');\n\n        return hashes.reduce((params, hash) => {\n            const [\n                key,\n                val,\n            ] = hash.split('=');\n\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\n        }, {});\n    },\n\n    // Convert object to URL parameters\n    buildUrlParams(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    get transitionEndEvent() {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return utils.is.string(type) ? events[type] : false;\n    },\n\n    // Force repaint of element\n    repaint(element) {\n        setTimeout(() => {\n            utils.toggleHidden(element, true);\n            element.offsetHeight; // eslint-disable-line\n            utils.toggleHidden(element, false);\n        }, 0);\n    },\n};\n\nexport default utils;\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// ==========================================================================\n// Fullscreen wrapper\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API#prefixing\n// ==========================================================================\n\nimport utils from './utils';\n\nconst browser = utils.getBrowser();\n\nfunction onChange() {\n    if (!this.enabled) {\n        return;\n    }\n\n    // Update toggle button\n    const button = this.player.elements.buttons.fullscreen;\n    if (utils.is.element(button)) {\n        utils.toggleState(button, this.active);\n    }\n\n    // Trigger an event\n    utils.dispatchEvent(this.target, this.active ? 'enterfullscreen' : 'exitfullscreen', true);\n\n    // Trap focus in container\n    if (!browser.isIos) {\n        utils.trapFocus.call(this.player, this.target, this.active);\n    }\n}\n\nfunction toggleFallback(toggle = false) {\n    // Store or restore scroll position\n    if (toggle) {\n        this.scrollPosition = {\n            x: window.scrollX || 0,\n            y: window.scrollY || 0,\n        };\n    } else {\n        window.scrollTo(this.scrollPosition.x, this.scrollPosition.y);\n    }\n\n    // Toggle scroll\n    document.body.style.overflow = toggle ? 'hidden' : '';\n\n    // Toggle class hook\n    utils.toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, toggle);\n\n    // Toggle button and fire events\n    onChange.call(this);\n}\n\nclass Fullscreen {\n    constructor(player) {\n        // Keep reference to parent\n        this.player = player;\n\n        // Get prefix\n        this.prefix = Fullscreen.prefix;\n        this.name = Fullscreen.name;\n\n        // Scroll position\n        this.scrollPosition = { x: 0, y: 0 };\n\n        // Register event listeners\n        // Handle event (incase user presses escape etc)\n        utils.on(document, this.prefix === 'ms' ? 'MSFullscreenChange' : `${this.prefix}fullscreenchange`, () => {\n            // TODO: Filter for target??\n            onChange.call(this);\n        });\n\n        // Fullscreen toggle on double click\n        utils.on(this.player.elements.container, 'dblclick', () => {\n            this.toggle();\n        });\n\n        // Prevent double click on controls bubbling up\n        utils.on(this.player.elements.controls, 'dblclick', event => event.stopPropagation());\n\n        // Update the UI\n        this.update();\n    }\n\n    // Determine if native supported\n    static get native() {\n        return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);\n    }\n\n    // Get the prefix for handlers\n    static get prefix() {\n        // No prefix\n        if (utils.is.function(document.exitFullscreen)) {\n            return false;\n        }\n\n        // Check for fullscreen support by vendor prefix\n        let value = '';\n        const prefixes = [\n            'webkit',\n            'moz',\n            'ms',\n        ];\n\n        prefixes.some(pre => {\n            if (utils.is.function(document[`${pre}ExitFullscreen`]) || utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            }\n\n            return false;\n        });\n\n        return value;\n    }\n\n    static get name() {\n        return this.prefix === 'moz' ? 'FullScreen' : 'Fullscreen';\n    }\n\n    // Determine if fullscreen is enabled\n    get enabled() {\n        return (\n            (Fullscreen.native || this.player.config.fullscreen.fallback) &&\n            this.player.config.fullscreen.enabled &&\n            this.player.supported.ui &&\n            this.player.isVideo\n        );\n    }\n\n    // Get active state\n    get active() {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Fallback using classname\n        if (!Fullscreen.native) {\n            return utils.hasClass(this.target, this.player.config.classNames.fullscreen.fallback);\n        }\n\n        const element = !this.prefix ? document.fullscreenElement : document[`${this.prefix}${this.name}Element`];\n\n        return element === this.target;\n    }\n\n    // Get target element\n    get target() {\n        return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.container;\n    }\n\n    // Update UI\n    update() {\n        if (this.enabled) {\n            this.player.debug.log(`${Fullscreen.native ? 'Native' : 'Fallback'} fullscreen enabled`);\n        } else {\n            this.player.debug.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Add styling hook to show button\n        utils.toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.enabled);\n    }\n\n    // Make an element fullscreen\n    enter() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen doesn't need the request step\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            if (this.player.playing) {\n                this.target.webkitEnterFullscreen();\n            }\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, true);\n        } else if (!this.prefix) {\n            this.target.requestFullscreen();\n        } else if (!utils.is.empty(this.prefix)) {\n            this.target[`${this.prefix}Request${this.name}`]();\n        }\n    }\n\n    // Bail from fullscreen\n    exit() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            this.target.webkitExitFullscreen();\n            this.player.play();\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, false);\n        } else if (!this.prefix) {\n            document.cancelFullScreen();\n        } else if (!utils.is.empty(this.prefix)) {\n            const action = this.prefix === 'moz' ? 'Cancel' : 'Exit';\n            document[`${this.prefix}${action}${this.name}`]();\n        }\n    }\n\n    // Toggle state\n    toggle() {\n        if (!this.active) {\n            this.enter();\n        } else {\n            this.exit();\n        }\n    }\n}\n\nexport default Fullscreen;\n","// ==========================================================================\n// Plyr Captions\n// TODO: Create as class\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Set default language if not set\n        const stored = this.storage.get('language');\n\n        if (!utils.is.empty(stored)) {\n            this.captions.language = stored;\n        }\n\n        if (utils.is.empty(this.captions.language)) {\n            this.captions.language = this.config.captions.language.toLowerCase();\n        }\n\n        // Set captions enabled state if not set\n        if (!utils.is.boolean(this.captions.active)) {\n            const active = this.storage.get('captions');\n\n            if (utils.is.boolean(active)) {\n                this.captions.active = active;\n            } else {\n                this.captions.active = this.config.captions.active;\n            }\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (utils.is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n        // Inject the container\n        if (!utils.is.element(this.elements.captions)) {\n            this.elements.captions = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.captions));\n\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Set the class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.enabled, !utils.is.empty(captions.getTracks.call(this)));\n\n        // Get tracks\n        const tracks = captions.getTracks.call(this);\n\n        // If no caption file exists, hide container for caption text\n        if (utils.is.empty(tracks)) {\n            return;\n        }\n\n        // Get browser info\n        const browser = utils.getBrowser();\n\n        // Fix IE captions if CORS is used\n        // Fetch captions and inject as blobs instead (data URIs not supported!)\n        if (browser.isIE && window.URL) {\n            const elements = this.media.querySelectorAll('track');\n\n            Array.from(elements).forEach(track => {\n                const src = track.getAttribute('src');\n                const href = utils.parseUrl(src);\n\n                if (href.hostname !== window.location.href.hostname && [\n                    'http:',\n                    'https:',\n                ].includes(href.protocol)) {\n                    utils\n                        .fetch(src, 'blob')\n                        .then(blob => {\n                            track.setAttribute('src', window.URL.createObjectURL(blob));\n                        })\n                        .catch(() => {\n                            utils.removeElement(track);\n                        });\n                }\n            });\n        }\n\n        // Set language\n        captions.setLanguage.call(this);\n\n        // Enable UI\n        captions.show.call(this);\n\n        // Set available languages in list\n        if (utils.is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    // Set the captions language\n    setLanguage() {\n        // Setup HTML5 track rendering\n        if (this.isHTML5 && this.isVideo) {\n            captions.getTracks.call(this).forEach(track => {\n                // Show track\n                utils.on(track, 'cuechange', event => captions.setCue.call(this, event));\n\n                // Turn off native caption rendering to avoid double captions\n                // eslint-disable-next-line\n                track.mode = 'hidden';\n            });\n\n            // Get current track\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            // Check if suported kind\n            if (utils.is.track(currentTrack)) {\n                // If we change the active track while a cue is already displayed we need to update it\n                if (Array.from(currentTrack.activeCues || []).length) {\n                    captions.setCue.call(this, currentTrack);\n                }\n            }\n        } else if (this.isVimeo && this.captions.active) {\n            this.embed.enableTextTrack(this.language);\n        }\n    },\n\n    // Get the tracks\n    getTracks() {\n        // Return empty array at least\n        if (utils.is.nullOrUndefined(this.media)) {\n            return [];\n        }\n\n        // Only get accepted kinds\n        return Array.from(this.media.textTracks || []).filter(track => [\n            'captions',\n            'subtitles',\n        ].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack() {\n        return captions.getTracks.call(this).find(track => track.language.toLowerCase() === this.language);\n    },\n\n    // Display active caption if it contains text\n    setCue(input) {\n        // Get the track from the event if needed\n        const track = utils.is.event(input) ? input.target : input;\n        const { activeCues } = track;\n        const active = activeCues.length && activeCues[0];\n        const currentTrack = captions.getCurrentTrack.call(this);\n\n        // Only display current track\n        if (track !== currentTrack) {\n            return;\n        }\n\n        // Display a cue, if there is one\n        if (utils.is.cue(active)) {\n            captions.setText.call(this, active.getCueAsHTML());\n        } else {\n            captions.setText.call(this, null);\n        }\n\n        utils.dispatchEvent.call(this, this.media, 'cuechange');\n    },\n\n    // Set the current caption\n    setText(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (utils.is.element(this.elements.captions)) {\n            const content = utils.createElement('span');\n\n            // Empty the container\n            utils.emptyElement(this.elements.captions);\n\n            // Default to empty\n            const caption = !utils.is.nullOrUndefined(input) ? input : '';\n\n            // Set the span content\n            if (utils.is.string(caption)) {\n                content.textContent = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            this.elements.captions.appendChild(content);\n        } else {\n            this.debug.warn('No captions element to render to');\n        }\n    },\n\n    // Display captions container and button (for initialization)\n    show() {\n        // If there's no caption toggle, bail\n        if (!utils.is.element(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // Try to load the value from storage\n        let active = this.storage.get('captions');\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        } else {\n            this.captions.active = active;\n        }\n\n        if (active) {\n            utils.toggleClass(this.elements.container, this.config.classNames.captions.active, true);\n            utils.toggleState(this.elements.buttons.captions, true);\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// Plyr internationalization\n// ==========================================================================\n\nimport utils from './utils';\n\nconst i18n = {\n    get(key = '', config = {}) {\n        if (utils.is.empty(key) || utils.is.empty(config) || !Object.keys(config.i18n).includes(key)) {\n            return '';\n        }\n\n        let string = config.i18n[key];\n\n        const replace = {\n            '{seektime}': config.seekTime,\n            '{title}': config.title,\n        };\n\n        Object.entries(replace).forEach(([\n            key,\n            value,\n        ]) => {\n            string = utils.replaceAll(string, key, value);\n        });\n\n        return string;\n    },\n};\n\nexport default i18n;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport utils from './utils';\nimport captions from './captions';\nimport controls from './controls';\nimport i18n from './i18n';\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling?\n        this.listeners.media();\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.debug.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.element(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            this.listeners.controls();\n        }\n\n        // If there's no controls, bail\n        if (!utils.is.element(this.elements.controls)) {\n            return;\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Captions\n        captions.setup.call(this);\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality setting\n        this.quality = null;\n\n        // Reset volume display\n        ui.updateVolume.call(this);\n\n        // Reset time display\n        ui.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        setTimeout(() => {\n            utils.dispatchEvent.call(this, this.media, 'ready');\n        }, 0);\n\n        // Set the title\n        ui.setTitle.call(this);\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = i18n.get('play', this.config);\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.element(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n\n            iframe.setAttribute('title', i18n.get('frameTitle', this.config));\n        }\n    },\n\n    // Check playing state\n    checkPlaying() {\n        // Class hooks\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.paused);\n\n        // Set ARIA state\n        utils.toggleState(this.elements.buttons.play, this.playing);\n\n        // Toggle controls\n        this.toggleControls(!this.playing);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = [\n            'stalled',\n            'waiting',\n        ].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Check if media failed to load\n    checkFailed() {\n        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState\n        this.failed = this.media.networkState === 3;\n\n        if (this.failed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, false);\n            utils.toggleClass(this.elements.container, this.config.classNames.error, true);\n        }\n\n        // Clear timer\n        clearTimeout(this.timers.failed);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (utils.is.element(this.elements.inputs.volume)) {\n            ui.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (utils.is.element(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!utils.is.element(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Set <progress> value\n    setProgress(target, input) {\n        const value = utils.is.number(input) ? input : 0;\n        const progress = utils.is.element(target) ? target : this.elements.display.buffer;\n\n        // Update value and label\n        if (utils.is.element(progress)) {\n            progress.value = value;\n\n            // Update text label inside\n            const label = progress.getElementsByTagName('span')[0];\n            if (utils.is.element(label)) {\n                label.childNodes[0].nodeValue = value;\n            }\n        }\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !utils.is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        ui.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    ui.setProgress.call(this, this.elements.display.buffer, this.buffered * 100);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!utils.is.element(target) || !utils.is.number(time)) {\n            return;\n        }\n\n        // Always display hours if duration is over an hour\n        const displayHours = utils.getHours(this.duration) > 0;\n\n        // eslint-disable-next-line no-param-reassign\n        target.textContent = utils.formatTime(time, displayHours, inverted);\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !utils.is.element(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        ui.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        ui.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded\n    durationUpdate() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If there's a spot to display duration\n        const hasDuration = utils.is.element(this.elements.display.duration);\n\n        // If there's only one time display, display duration there\n        if (!hasDuration && this.config.displayDuration && this.paused) {\n            ui.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (hasDuration) {\n            ui.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr HTML5 helpers\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\n\nconst html5 = {\n    getSources() {\n        if (!this.isHTML5) {\n            return null;\n        }\n\n        return this.media.querySelectorAll('source');\n    },\n\n    // Get quality levels\n    getQualityOptions() {\n        if (!this.isHTML5) {\n            return null;\n        }\n\n        // Get sources\n        const sources = html5.getSources.call(this);\n\n        if (utils.is.empty(sources)) {\n            return null;\n        }\n\n        // Get <source> with size attribute\n        const sizes = Array.from(sources).filter(source => !utils.is.empty(source.getAttribute('size')));\n\n        // If none, bail\n        if (utils.is.empty(sizes)) {\n            return null;\n        }\n\n        // Reduce to unique list\n        return utils.dedupe(sizes.map(source => Number(source.getAttribute('size'))));\n    },\n\n    extend() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        const player = this;\n\n        // Quality\n        Object.defineProperty(player.media, 'quality', {\n            get() {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                if (utils.is.empty(sources)) {\n                    return null;\n                }\n\n                const matches = Array.from(sources).filter(source => source.getAttribute('src') === player.source);\n\n                if (utils.is.empty(matches)) {\n                    return null;\n                }\n\n                return Number(matches[0].getAttribute('size'));\n            },\n            set(input) {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                if (utils.is.empty(sources)) {\n                    return;\n                }\n\n                // Get matches for requested size\n                const matches = Array.from(sources).filter(source => Number(source.getAttribute('size')) === input);\n\n                // No matches for requested size\n                if (utils.is.empty(matches)) {\n                    return;\n                }\n\n                // Get supported sources\n                const supported = matches.filter(source => support.mime.call(player, source.getAttribute('type')));\n\n                // No supported sources\n                if (utils.is.empty(supported)) {\n                    return;\n                }\n\n                // Trigger change event\n                utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                    quality: input,\n                });\n\n                // Get current state\n                const { currentTime, playing } = player;\n\n                // Set new source\n                player.media.src = supported[0].getAttribute('src');\n\n                // Load new source\n                player.media.load();\n\n                // Resume playing\n                if (playing) {\n                    player.play();\n                }\n\n                // Restore time\n                player.currentTime = currentTime;\n\n                // Trigger change event\n                utils.dispatchEvent.call(player, player.media, 'qualitychange', false, {\n                    quality: input,\n                });\n            },\n        });\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        utils.removeElement(html5.getSources());\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.debug.log('Cancelled network requests');\n    },\n};\n\nexport default html5;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport ui from './ui';\nimport i18n from './i18n';\nimport captions from './captions';\nimport html5 from './html5';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.element(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Set CSS custom property\n        range.style.setProperty('--value', `${range.value / range.max * 100}%`);\n    },\n\n    // Get icon URL\n    getIconUrl() {\n        return {\n            url: this.config.iconUrl,\n            absolute: this.config.iconUrl.indexOf('http') === 0 || (browser.isIE && !window.svg4everybody),\n        };\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.absolute ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n            }),\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = i18n.get(type, this.config);\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return utils.createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (utils.is.empty(text)) {\n            return null;\n        }\n\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text,\n            ),\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = utils.toCamelCase(buttonType);\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (buttonType) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = buttonType;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n            attributes['aria-label'] = i18n.get(label, this.config);\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        utils.setAttributes(button, attributes);\n\n        // We have multiple play buttons\n        if (type === 'play') {\n            if (!utils.is.array(this.elements.buttons[type])) {\n                this.elements.buttons[type] = [];\n            }\n\n            this.elements.buttons[type].push(button);\n        } else {\n            this.elements.buttons[type] = button;\n        }\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                class: this.config.classNames.hidden,\n            },\n            i18n.get(type, this.config),\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                },\n                attributes,\n            ),\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                },\n                attributes,\n            ),\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = i18n.get('played', this.config);\n                    break;\n\n                case 'buffer':\n                    suffix = i18n.get('buffered', this.config);\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.textContent = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const container = utils.createElement('div', {\n            class: 'plyr__time',\n        });\n\n        container.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.hidden,\n                },\n                i18n.get(type, this.config),\n            ),\n        );\n\n        container.appendChild(utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.display[type]), '00:00'));\n\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem(value, list, type, title, badge = null, checked = false) {\n        const item = utils.createElement('li');\n\n        const label = utils.createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = utils.createElement(\n            'input',\n            utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            }),\n        );\n\n        const faux = utils.createElement('span', { 'aria-hidden': true });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (utils.is.element(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.element(this.elements.inputs.seek) ||\n            !utils.is.element(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.inputs.seek.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        const toggle = toggle => {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, toggle);\n        };\n\n        // Hide on touch\n        if (this.touch) {\n            toggle(false);\n            return;\n        }\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        ui.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && [\n            'mouseenter',\n            'mouseleave',\n        ].includes(event.type)) {\n            toggle(event.type === 'mouseenter');\n        }\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        const tab = this.elements.settings.tabs[setting];\n        const pane = this.elements.settings.panes[setting];\n\n        utils.toggleHidden(tab, !toggle);\n        utils.toggleHidden(pane, !toggle);\n    },\n\n    // Set the quality menu\n    // TODO: Vimeo support\n    setQualityMenu(options) {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.quality)) {\n            return;\n        }\n\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.options.quality.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            let label = '';\n\n            switch (quality) {\n                case 2160:\n                    label = '4K';\n                    break;\n\n                case 1440:\n                    label = 'WQHD';\n                    break;\n\n                case 1080:\n                    label = 'HD';\n                    break;\n\n                case 720:\n                    label = 'HD';\n                    break;\n\n                case 576:\n                    label = 'SD';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        // Sort options by the config and then render options\n        this.options.quality.sort((a, b) => {\n            const sorting = this.config.quality.options;\n            return sorting.indexOf(a) > sorting.indexOf(b) ? 1 : -1;\n        }).forEach(quality => {\n            const label = controls.getLabel.call(this, 'quality', quality);\n            controls.createMenuItem.call(this, quality, list, type, label, getBadge(quality));\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    // TODO: Localisation\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? 'Normal' : `${value}&times;`;\n\n            case 'quality':\n                if (utils.is.number(value)) {\n                    return `${value}p`;\n                }\n                return utils.toTitleCase(value);\n\n            case 'captions':\n                return controls.getLanguage.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container, input) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.captions.active ? this.captions.language : i18n.get('disabled', this.config);\n                break;\n\n            default:\n                value = !utils.is.empty(input) ? input : this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!utils.is.empty(this.options[setting]) && !this.options[setting].includes(value)) {\n                    this.debug.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.debug.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.element(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // Update the label\n        if (!utils.is.empty(value)) {\n            const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n            label.innerHTML = controls.getLabel.call(this, setting, value);\n        }\n\n        // Find the radio option\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (utils.is.element(target)) {\n            // Check it\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.loop)) {\n            return;\n        }\n\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.loop, false);\n        utils.toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                i18n.get(option, this.config)\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n    getLanguage() {\n        if (!this.supported.ui) {\n            return null;\n        }\n\n        if (support.textTracks && captions.getTracks.call(this).length && this.captions.active) {\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            if (utils.is.track(currentTrack)) {\n                return currentTrack.label;\n            }\n        }\n\n        return i18n.get('disabled', this.config);\n    },\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n\n        // Toggle the pane and tab\n        const hasTracks = captions.getTracks.call(this).length;\n        controls.toggleTab.call(this, type, hasTracks);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // If there's no captions, bail\n        if (!hasTracks) {\n            return;\n        }\n\n        // Re-map the tracks into just the data we need\n        const tracks = captions.getTracks.call(this).map(track => ({\n            language: track.language,\n            label: !utils.is.empty(track.label) ? track.label : track.language.toUpperCase(),\n        }));\n\n        // Add the \"Disabled\" option to turn off captions\n        tracks.unshift({\n            language: '',\n            label: i18n.get('disabled', this.config),\n        });\n\n        // Generate options\n        tracks.forEach(track => {\n            controls.createMenuItem.call(\n                this,\n                track.language,\n                list,\n                'language',\n                track.label || track.language,\n                controls.createBadge.call(this, track.language.toUpperCase()),\n                track.language.toLowerCase() === this.captions.language.toLowerCase(),\n            );\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu(options) {\n        // Do nothing if not selected\n        if (!this.config.controls.includes('settings') || !this.config.settings.includes('speed')) {\n            return;\n        }\n\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.speed)) {\n            return;\n        }\n\n        const type = 'speed';\n\n        // Set the speed options\n        if (!utils.is.array(options)) {\n            this.options.speed = [\n                0.5,\n                0.75,\n                1,\n                1.25,\n                1.5,\n                1.75,\n                2,\n            ];\n        } else {\n            this.options.speed = options;\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed);\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.speed, false);\n        utils.toggleHidden(this.elements.settings.panes.speed, false);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => controls.createMenuItem.call(this, speed, list, type, controls.getLabel.call(this, 'speed', speed)));\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Check if we need to hide/show the settings menu\n    checkMenu() {\n        const { tabs } = this.elements.settings;\n        const visible = !utils.is.empty(tabs) && Object.values(tabs).some(tab => !tab.hidden);\n\n        utils.toggleHidden(this.elements.settings.menu, !visible);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n\n        // Menu and button are required\n        if (!utils.is.element(form) || !utils.is.element(button)) {\n            return;\n        }\n\n        const show = utils.is.boolean(event) ? event : utils.is.element(form) && form.getAttribute('aria-hidden') === 'true';\n\n        if (utils.is.event(event)) {\n            const isMenuItem = utils.is.element(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (utils.is.element(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (utils.is.element(form)) {\n            form.setAttribute('aria-hidden', !show);\n            utils.toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.setAttribute('aria-hidden', false);\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(event) {\n        const { menu } = this.elements.settings;\n        const tab = event.target;\n        const show = tab.getAttribute('aria-expanded') === 'false';\n        const pane = document.getElementById(tab.getAttribute('aria-controls'));\n\n        // Nothing to show, bail\n        if (!utils.is.element(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"][aria-hidden=\"false\"]');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || ![\n                    'width',\n                    'height',\n                ].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEndEvent, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEndEvent, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        current.setAttribute('aria-hidden', true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        pane.setAttribute('aria-hidden', !show);\n        tab.setAttribute('aria-expanded', show);\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        role: 'tooltip',\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00',\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('div', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                }),\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                }),\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                'aria-hidden': true,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-hidden': false,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    i18n.get(type, this.config),\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    'aria-hidden': true,\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                    hidden: '',\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    i18n.get(type, this.config),\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        controls.setSpeedMenu.call(this);\n\n        if (this.isHTML5) {\n            controls.setQualityMenu.call(this, html5.getQualityOptions.call(this));\n        }\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.absolute) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n        this.elements.controls = null;\n\n        // HTML or Element passed as the option\n        if (utils.is.string(this.config.controls) || utils.is.element(this.config.controls)) {\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls({\n                id: this.id,\n                seektime: this.config.seekTime,\n                title: this.config.title,\n            });\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: controls.getLanguage.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.element(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.element(container)) {\n            target.appendChild(container);\n        } else {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (!utils.is.element(this.elements.controls)) {\n            utils.findElements.call(this);\n        }\n\n        // Edge sometimes doesn't finish the paint so force a redraw\n        if (window.navigator.userAgent.includes('Edge')) {\n            utils.repaint(target);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join(''),\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nclass Listeners {\n    constructor(player) {\n        this.player = player;\n        this.lastKey = null;\n\n        this.handleKey = this.handleKey.bind(this);\n        this.toggleMenu = this.toggleMenu.bind(this);\n        this.firstTouch = this.firstTouch.bind(this);\n    }\n\n    // Handle key presses\n    handleKey(event) {\n        const code = event.keyCode ? event.keyCode : event.which;\n        const pressed = event.type === 'keydown';\n        const repeat = pressed && code === this.lastKey;\n\n        // Bail if a modifier key is set\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n            return;\n        }\n\n        // If the event is bubbled from the media element\n        // Firefox doesn't get the keycode for whatever reason\n        if (!utils.is.number(code)) {\n            return;\n        }\n\n        // Seek by the number keys\n        const seekByKey = () => {\n            // Divide the max duration into 10th's and times by the number value\n            this.player.currentTime = this.player.duration / 10 * (code - 48);\n        };\n\n        // Handle the key on keydown\n        // Reset on keyup\n        if (pressed) {\n            // Which keycodes should we prevent default\n            const preventDefault = [\n                48,\n                49,\n                50,\n                51,\n                52,\n                53,\n                54,\n                56,\n                57,\n                32,\n                75,\n                38,\n                40,\n                77,\n                39,\n                37,\n                70,\n                67,\n                73,\n                76,\n                79,\n            ];\n\n            // Check focused element\n            // and if the focused element is not editable (e.g. text input)\n            // and any that accept key input http://webaim.org/techniques/keyboard/\n            const focused = utils.getFocusElement();\n            if (utils.is.element(focused) && utils.matches(focused, this.player.config.selectors.editable)) {\n                return;\n            }\n\n            // If the code is found prevent default (e.g. prevent scrolling for arrows)\n            if (preventDefault.includes(code)) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n            switch (code) {\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                    // 0-9\n                    if (!repeat) {\n                        seekByKey();\n                    }\n                    break;\n\n                case 32:\n                case 75:\n                    // Space and K key\n                    if (!repeat) {\n                        this.player.togglePlay();\n                    }\n                    break;\n\n                case 38:\n                    // Arrow up\n                    this.player.increaseVolume(0.1);\n                    break;\n\n                case 40:\n                    // Arrow down\n                    this.player.decreaseVolume(0.1);\n                    break;\n\n                case 77:\n                    // M key\n                    if (!repeat) {\n                        this.player.muted = !this.player.muted;\n                    }\n                    break;\n\n                case 39:\n                    // Arrow forward\n                    this.player.forward();\n                    break;\n\n                case 37:\n                    // Arrow back\n                    this.player.rewind();\n                    break;\n\n                case 70:\n                    // F key\n                    this.player.fullscreen.toggle();\n                    break;\n\n                case 67:\n                    // C key\n                    if (!repeat) {\n                        this.player.toggleCaptions();\n                    }\n                    break;\n\n                case 76:\n                    // L key\n                    this.player.loop = !this.player.loop;\n                    break;\n\n                /* case 73:\n                    this.setLoop('start');\n                    break;\n\n                case 76:\n                    this.setLoop();\n                    break;\n\n                case 79:\n                    this.setLoop('end');\n                    break; */\n\n                default:\n                    break;\n            }\n\n            // Escape is handle natively when in full screen\n            // So we only need to worry about non native\n            if (!this.player.fullscreen.enabled && this.player.fullscreen.active && code === 27) {\n                this.player.fullscreen.toggle();\n            }\n\n            // Store last code for next cycle\n            this.lastKey = code;\n        } else {\n            this.lastKey = null;\n        }\n    }\n\n    // Toggle menu\n    toggleMenu(event) {\n        controls.toggleMenu.call(this.player, event);\n    }\n\n    // Device is touch enabled\n    firstTouch() {\n        this.player.touch = true;\n\n        // Add touch class\n        utils.toggleClass(this.player.elements.container, this.player.config.classNames.isTouch, true);\n\n        // Clean up\n        utils.off(document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Global window & document listeners\n    global(toggle = true) {\n        // Keyboard shortcuts\n        if (this.player.config.keyboard.global) {\n            utils.toggleListener(window, 'keydown keyup', this.handleKey, toggle, false);\n        }\n\n        // Click anywhere closes menu\n        utils.toggleListener(document.body, 'click', this.toggleMenu, toggle);\n\n        // Detect touch by events\n        utils.on(document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Container listeners\n    container() {\n        // Keyboard shortcuts\n        if (!this.player.config.keyboard.global && this.player.config.keyboard.focused) {\n            utils.on(this.player.elements.container, 'keydown keyup', this.handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.player.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.player.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.player.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.player.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls visibility based on mouse movement\n        if (this.player.config.hideControls) {\n            // Toggle controls on mouse events and entering fullscreen\n            utils.on(this.player.elements.container, 'mouseenter mouseleave mousemove touchstart touchend touchmove enterfullscreen exitfullscreen', event => {\n                this.player.toggleControls(event);\n            });\n        }\n    }\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.player.media, 'timeupdate seeking', event => ui.timeUpdate.call(this.player, event));\n\n        // Display duration\n        utils.on(this.player.media, 'durationchange loadedmetadata', event => ui.durationUpdate.call(this.player, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        utils.on(this.player.media, 'loadeddata', () => {\n            utils.toggleHidden(this.player.elements.volume, !this.player.hasAudio);\n            utils.toggleHidden(this.player.elements.buttons.mute, !this.player.hasAudio);\n        });\n\n        // Handle the media finishing\n        utils.on(this.player.media, 'ended', () => {\n            // Show poster on end\n            if (this.player.isHTML5 && this.player.isVideo && this.player.config.showPosterOnEnd) {\n                // Restart\n                this.player.restart();\n\n                // Re-load media\n                this.player.media.load();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.player.media, 'progress playing', event => ui.updateProgress.call(this.player, event));\n\n        // Handle volume changes\n        utils.on(this.player.media, 'volumechange', event => ui.updateVolume.call(this.player, event));\n\n        // Handle play/pause\n        utils.on(this.player.media, 'playing play pause ended emptied', event => ui.checkPlaying.call(this.player, event));\n\n        // Loading state\n        utils.on(this.player.media, 'waiting canplay seeked playing', event => ui.checkLoading.call(this.player, event));\n\n        // Check if media failed to load\n        // utils.on(this.player.media, 'play', event => ui.checkFailed.call(this.player, event));\n\n        // If autoplay, then load advertisement if required\n        // TODO: Show some sort of loading state while the ad manager loads else there's a delay before ad shows\n        utils.on(this.player.media, 'playing', () => {\n            // If ads are enabled, wait for them first\n            if (this.player.ads.enabled && !this.player.ads.initialized) {\n                // Wait for manager response\n                this.player.ads.managerPromise.then(() => this.player.ads.play()).catch(() => this.player.play());\n            }\n        });\n\n        // Click video\n        if (this.player.supported.ui && this.player.config.clickToPlay && !this.player.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this.player, `.${this.player.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!utils.is.element(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.player.config.hideControls && this.player.touch && !this.player.paused) {\n                    return;\n                }\n\n                if (this.player.paused) {\n                    this.player.play();\n                } else if (this.player.ended) {\n                    this.player.restart();\n                    this.player.play();\n                } else {\n                    this.player.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.player.supported.ui && this.player.config.disableContextMenu) {\n            utils.on(\n                this.player.media,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false,\n            );\n        }\n\n        // Volume change\n        utils.on(this.player.media, 'volumechange', () => {\n            // Save to storage\n            this.player.storage.set({ volume: this.player.volume, muted: this.player.muted });\n        });\n\n        // Speed change\n        utils.on(this.player.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'speed');\n\n            // Save to storage\n            this.player.storage.set({ speed: this.player.speed });\n        });\n\n        // Quality request\n        utils.on(this.player.media, 'qualityrequested', event => {\n            // Save to storage\n            this.player.storage.set({ quality: event.detail.quality });\n        });\n\n        // Quality change\n        utils.on(this.player.media, 'qualitychange', event => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'quality', null, event.detail.quality);\n        });\n\n        // Caption language change\n        utils.on(this.player.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ language: this.player.language });\n        });\n\n        // Captions toggle\n        utils.on(this.player.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ captions: this.player.captions.active });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.player.media, this.player.config.events.concat([\n            'keyup',\n            'keydown',\n        ]).join(' '), event => {\n            let detail = {};\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.player.media.error;\n            }\n\n            utils.dispatchEvent.call(this.player, this.player.elements.container, event.type, true, detail);\n        });\n    }\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Run default and custom handlers\n        const proxy = (event, defaultHandler, customHandlerKey) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = utils.is.function(customHandler);\n            let returned = true;\n\n            // Execute custom handler\n            if (hasCustomHandler) {\n                returned = customHandler.call(this.player, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (returned && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this.player, event);\n            }\n        };\n\n        // Trigger custom and default handlers\n        const on = (element, type, defaultHandler, customHandlerKey, passive = true) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = utils.is.function(customHandler);\n\n            utils.on(element, type, event => proxy(event, defaultHandler, customHandlerKey), passive && !hasCustomHandler);\n        };\n\n        // Play/pause toggle\n        on(this.player.elements.buttons.play, 'click', this.player.togglePlay, 'play');\n\n        // Pause\n        on(this.player.elements.buttons.restart, 'click', this.player.restart, 'restart');\n\n        // Rewind\n        on(this.player.elements.buttons.rewind, 'click', this.player.rewind, 'rewind');\n\n        // Rewind\n        on(this.player.elements.buttons.fastForward, 'click', this.player.forward, 'fastForward');\n\n        // Mute toggle\n        on(\n            this.player.elements.buttons.mute,\n            'click',\n            () => {\n                this.player.muted = !this.player.muted;\n            },\n            'mute',\n        );\n\n        // Captions toggle\n        on(this.player.elements.buttons.captions, 'click', this.player.toggleCaptions);\n\n        // Fullscreen toggle\n        on(\n            this.player.elements.buttons.fullscreen,\n            'click',\n            () => {\n                this.player.fullscreen.toggle();\n            },\n            'fullscreen',\n        );\n\n        // Picture-in-Picture\n        on(\n            this.player.elements.buttons.pip,\n            'click',\n            () => {\n                this.player.pip = 'toggle';\n            },\n            'pip',\n        );\n\n        // Airplay\n        on(this.player.elements.buttons.airplay, 'click', this.player.airplay, 'airplay');\n\n        // Settings menu\n        on(this.player.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this.player, event);\n        });\n\n        // Settings menu\n        on(this.player.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (utils.matches(event.target, this.player.config.selectors.inputs.language)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.language = event.target.value;\n                    },\n                    'language',\n                );\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.quality)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.quality = event.target.value;\n                    },\n                    'quality',\n                );\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.speed)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.speed = parseFloat(event.target.value);\n                    },\n                    'speed',\n                );\n            } else {\n                controls.showTab.call(this.player, event);\n            }\n        });\n\n        // Seek\n        on(\n            this.player.elements.inputs.seek,\n            inputEvent,\n            event => {\n                this.player.currentTime = event.target.value / event.target.max * this.player.duration;\n            },\n            'seek',\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.player.config.toggleInvert && !utils.is.element(this.player.elements.display.duration)) {\n            on(this.player.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.player.currentTime === 0) {\n                    return;\n                }\n\n                this.player.config.invertTime = !this.player.config.invertTime;\n                ui.timeUpdate.call(this.player);\n            });\n        }\n\n        // Volume\n        on(\n            this.player.elements.inputs.volume,\n            inputEvent,\n            event => {\n                this.player.volume = event.target.value;\n            },\n            'volume',\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            on(utils.getElements.call(this.player, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this.player, event.target);\n            });\n        }\n\n        // Seek tooltip\n        on(this.player.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this.player, event));\n\n        // Toggle controls visibility based on mouse movement\n        if (this.player.config.hideControls) {\n            // Watch for cursor over controls so they don't hide when trying to interact\n            on(this.player.elements.controls, 'mouseenter mouseleave', event => {\n                this.player.elements.controls.hover = !this.player.touch && event.type === 'mouseenter';\n            });\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            on(this.player.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n                this.player.elements.controls.pressed = [\n                    'mousedown',\n                    'touchstart',\n                ].includes(event.type);\n            });\n\n            // Focus in/out on controls\n            on(this.player.elements.controls, 'focusin focusout', event => {\n                this.player.toggleControls(event);\n            });\n        }\n\n        // Mouse wheel for volume\n        on(\n            this.player.elements.inputs.volume,\n            'wheel',\n            event => {\n                // Detect \"natural\" scroll - suppored on OS X Safari only\n                // Other browsers on OS X will be inverted until support improves\n                const inverted = event.webkitDirectionInvertedFromDevice;\n                const step = 1 / 50;\n                let direction = 0;\n\n                // Scroll down (or up on natural) to decrease\n                if (event.deltaY < 0 || event.deltaX > 0) {\n                    if (inverted) {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    } else {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    }\n                }\n\n                // Scroll up (or down on natural) to increase\n                if (event.deltaY > 0 || event.deltaX < 0) {\n                    if (inverted) {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    } else {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    }\n                }\n\n                // Don't break page scrolling at max and min\n                if ((direction === 1 && this.player.media.volume < 1) || (direction === -1 && this.player.media.volume > 0)) {\n                    event.preventDefault();\n                }\n            },\n            'volume',\n            false,\n        );\n    }\n\n    // Reset on destroy\n    clear() {\n        this.global(false);\n    }\n}\n\nexport default Listeners;\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport utils from './utils';\n\nclass Storage {\n    constructor(player) {\n        this.enabled = player.config.storage.enabled;\n        this.key = player.config.storage.key;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        try {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            const test = '___test';\n\n            // Try to use it (it might be disabled, e.g. user is in private mode)\n            // see: https://github.com/sampotts/plyr/issues/131\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        if (!Storage.supported) {\n            return null;\n        }\n\n        const store = window.localStorage.getItem(this.key);\n\n        if (utils.is.empty(store)) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return utils.is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!utils.is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (utils.is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        utils.extend(storage, object);\n\n        // Update storage\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n    }\n}\n\nexport default Storage;\n","// ==========================================================================\n// Advertisement plugin using Google IMA HTML5 SDK\n// Create an account with our ad partner, vi here:\n// https://www.vi.ai/publisher-video-monetization/\n// ==========================================================================\n\n/* global google */\n\nimport utils from '../utils';\nimport i18n from '../i18n';\n\nclass Ads {\n    /**\n     * Ads constructor.\n     * @param {object} player\n     * @return {Ads}\n     */\n    constructor(player) {\n        this.player = player;\n        this.publisherId = player.config.ads.publisherId;\n        this.enabled = player.isHTML5 && player.isVideo && player.config.ads.enabled && utils.is.string(this.publisherId) && this.publisherId.length;\n        this.playing = false;\n        this.initialized = false;\n        this.elements = {\n            container: null,\n            displayContainer: null,\n        };\n        this.manager = null;\n        this.loader = null;\n        this.cuePoints = null;\n        this.events = {};\n        this.safetyTimer = null;\n        this.countdownTimer = null;\n\n        // Setup a promise to resolve when the IMA manager is ready\n        this.managerPromise = new Promise((resolve, reject) => {\n            // The ad is loaded and ready\n            this.on('loaded', resolve);\n\n            // Ads failed\n            this.on('error', reject);\n        });\n\n        this.load();\n    }\n\n    /**\n     * Load the IMA SDK\n     */\n    load() {\n        if (this.enabled) {\n            // Check if the Google IMA3 SDK is loaded or load it ourselves\n            if (!utils.is.object(window.google) || !utils.is.object(window.google.ima)) {\n                utils\n                    .loadScript(this.player.config.urls.googleIMA.api)\n                    .then(() => {\n                        this.ready();\n                    })\n                    .catch(() => {\n                        // Script failed to load or is blocked\n                        this.trigger('error', new Error('Google IMA SDK failed to load'));\n                    });\n            } else {\n                this.ready();\n            }\n        }\n    }\n\n    /**\n     * Get the ads instance ready\n     */\n    ready() {\n        // Start ticking our safety timer. If the whole advertisement\n        // thing doesn't resolve within our set time; we bail\n        this.startSafetyTimer(12000, 'ready()');\n\n        // Clear the safety timer\n        this.managerPromise.then(() => {\n            this.clearSafetyTimer('onAdsManagerLoaded()');\n        });\n\n        // Set listeners on the Plyr instance\n        this.listeners();\n\n        // Setup the IMA SDK\n        this.setupIMA();\n    }\n\n    // Build the default tag URL\n    get tagUrl() {\n        const params = {\n            AV_PUBLISHERID: '58c25bb0073ef448b1087ad6',\n            AV_CHANNELID: '5a0458dc28a06145e4519d21',\n            AV_URL: location.hostname,\n            cb: Date.now(),\n            AV_WIDTH: 640,\n            AV_HEIGHT: 480,\n            AV_CDIM2: this.publisherId,\n        };\n\n        const base = 'https://go.aniview.com/api/adserver6/vast/';\n\n        return `${base}?${utils.buildUrlParams(params)}`;\n    }\n\n    /**\n     * In order for the SDK to display ads for our video, we need to tell it where to put them,\n     * so here we define our ad container. This div is set up to render on top of the video player.\n     * Using the code below, we tell the SDK to render ads within that div. We also provide a\n     * handle to the content video player - the SDK will poll the current time of our player to\n     * properly place mid-rolls. After we create the ad display container, we initialize it. On\n     * mobile devices, this initialization is done as the result of a user action.\n     */\n    setupIMA() {\n        // Create the container for our advertisements\n        this.elements.container = utils.createElement('div', {\n            class: this.player.config.classNames.ads,\n        });\n        this.player.elements.container.appendChild(this.elements.container);\n\n        // So we can run VPAID2\n        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);\n\n        // Set language\n        google.ima.settings.setLocale(this.player.config.ads.language);\n\n        // We assume the adContainer is the video container of the plyr element\n        // that will house the ads\n        this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container);\n\n        // Request video ads to be pre-loaded\n        this.requestAds();\n    }\n\n    /**\n     * Request advertisements\n     */\n    requestAds() {\n        const { container } = this.player.elements;\n\n        try {\n            // Create ads loader\n            this.loader = new google.ima.AdsLoader(this.elements.displayContainer);\n\n            // Listen and respond to ads loaded and error events\n            this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, event => this.onAdsManagerLoaded(event), false);\n            this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error), false);\n\n            // Request video ads\n            const request = new google.ima.AdsRequest();\n            request.adTagUrl = this.tagUrl;\n\n            // Specify the linear and nonlinear slot sizes. This helps the SDK\n            // to select the correct creative if multiple are returned\n            request.linearAdSlotWidth = container.offsetWidth;\n            request.linearAdSlotHeight = container.offsetHeight;\n            request.nonLinearAdSlotWidth = container.offsetWidth;\n            request.nonLinearAdSlotHeight = container.offsetHeight;\n\n            // We only overlay ads as we only support video.\n            request.forceNonLinearFullSlot = false;\n\n            this.loader.requestAds(request);\n        } catch (e) {\n            this.onAdError(e);\n        }\n    }\n\n    /**\n     * Update the ad countdown\n     * @param {boolean} start\n     */\n    pollCountdown(start = false) {\n        if (!start) {\n            clearInterval(this.countdownTimer);\n            this.elements.container.removeAttribute('data-badge-text');\n            return;\n        }\n\n        const update = () => {\n            const time = utils.formatTime(Math.max(this.manager.getRemainingTime(), 0));\n            const label = `${i18n.get('advertisement', this.player.config)} - ${time}`;\n            this.elements.container.setAttribute('data-badge-text', label);\n        };\n\n        this.countdownTimer = setInterval(update, 100);\n    }\n\n    /**\n     * This method is called whenever the ads are ready inside the AdDisplayContainer\n     * @param {Event} adsManagerLoadedEvent\n     */\n    onAdsManagerLoaded(event) {\n        // Get the ads manager\n        const settings = new google.ima.AdsRenderingSettings();\n\n        // Tell the SDK to save and restore content video state on our behalf\n        settings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n        settings.enablePreloading = true;\n\n        // The SDK is polling currentTime on the contentPlayback. And needs a duration\n        // so it can determine when to start the mid- and post-roll\n        this.manager = event.getAdsManager(this.player, settings);\n\n        // Get the cue points for any mid-rolls by filtering out the pre- and post-roll\n        this.cuePoints = this.manager.getCuePoints();\n\n        // Add advertisement cue's within the time line if available\n        if (!utils.is.empty(this.cuePoints)) {\n            this.cuePoints.forEach(cuePoint => {\n                if (cuePoint !== 0 && cuePoint !== -1 && cuePoint < this.player.duration) {\n                    const seekElement = this.player.elements.progress;\n\n                    if (utils.is.element(seekElement)) {\n                        const cuePercentage = 100 / this.player.duration * cuePoint;\n                        const cue = utils.createElement('span', {\n                            class: this.player.config.classNames.cues,\n                        });\n\n                        cue.style.left = `${cuePercentage.toString()}%`;\n                        seekElement.appendChild(cue);\n                    }\n                }\n            });\n        }\n\n        // Get skippable state\n        // TODO: Skip button\n        // this.manager.getAdSkippableState();\n\n        // Set volume to match player\n        this.manager.setVolume(this.player.volume);\n\n        // Add listeners to the required events\n        // Advertisement error events\n        this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error));\n\n        // Advertisement regular events\n        Object.keys(google.ima.AdEvent.Type).forEach(type => {\n            this.manager.addEventListener(google.ima.AdEvent.Type[type], event => this.onAdEvent(event));\n        });\n\n        // Resolve our adsManager\n        this.trigger('loaded');\n    }\n\n    /**\n     * This is where all the event handling takes place. Retrieve the ad from the event. Some\n     * events (e.g. ALL_ADS_COMPLETED) don't have the ad object associated\n     * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type\n     * @param {Event} event\n     */\n    onAdEvent(event) {\n        const { container } = this.player.elements;\n\n        // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)\n        // don't have ad object associated\n        const ad = event.getAd();\n\n        // Proxy event\n        const dispatchEvent = type => {\n            const event = `ads${type.replace(/_/g, '').toLowerCase()}`;\n            utils.dispatchEvent.call(this.player, this.player.media, event);\n        };\n\n        switch (event.type) {\n            case google.ima.AdEvent.Type.LOADED:\n                // This is the first event sent for an ad - it is possible to determine whether the\n                // ad is a video ad or an overlay\n                this.trigger('loaded');\n\n                // Bubble event\n                dispatchEvent(event.type);\n\n                // Start countdown\n                this.pollCountdown(true);\n\n                if (!ad.isLinear()) {\n                    // Position AdDisplayContainer correctly for overlay\n                    ad.width = container.offsetWidth;\n                    ad.height = container.offsetHeight;\n                }\n\n                // console.info('Ad type: ' + event.getAd().getAdPodInfo().getPodIndex());\n                // console.info('Ad time: ' + event.getAd().getAdPodInfo().getTimeOffset());\n                break;\n\n            case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:\n                // All ads for the current videos are done. We can now request new advertisements\n                // in case the video is re-played\n\n                // Fire event\n                dispatchEvent(event.type);\n\n                // TODO: Example for what happens when a next video in a playlist would be loaded.\n                // So here we load a new video when all ads are done.\n                // Then we load new ads within a new adsManager. When the video\n                // Is started - after - the ads are loaded, then we get ads.\n                // You can also easily test cancelling and reloading by running\n                // player.ads.cancel() and player.ads.play from the console I guess.\n                // this.player.source = {\n                //     type: 'video',\n                //     title: 'View From A Blue Moon',\n                //     sources: [{\n                //         src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.mp4', type:\n                // 'video/mp4', }], poster:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg', tracks:\n                // [ { kind: 'captions', label: 'English', srclang: 'en', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt',\n                // default: true, }, { kind: 'captions', label: 'French', srclang: 'fr', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', }, ],\n                // };\n\n                // TODO: So there is still this thing where a video should only be allowed to start\n                // playing when the IMA SDK is ready or has failed\n\n                this.loadAds();\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:\n                // This event indicates the ad has started - the video player can adjust the UI,\n                // for example display a pause button and remaining time. Fired when content should\n                // be paused. This usually happens right before an ad is about to cover the content\n\n                dispatchEvent(event.type);\n\n                this.pauseContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:\n                // This event indicates the ad has finished - the video player can perform\n                // appropriate UI actions, such as removing the timer for remaining time detection.\n                // Fired when content should be resumed. This usually happens when an ad finishes\n                // or collapses\n\n                dispatchEvent(event.type);\n\n                this.pollCountdown();\n\n                this.resumeContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.STARTED:\n            case google.ima.AdEvent.Type.MIDPOINT:\n            case google.ima.AdEvent.Type.COMPLETE:\n            case google.ima.AdEvent.Type.IMPRESSION:\n            case google.ima.AdEvent.Type.CLICK:\n                dispatchEvent(event.type);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Any ad error handling comes through here\n     * @param {Event} event\n     */\n    onAdError(event) {\n        this.cancel();\n        this.player.debug.warn('Ads error', event);\n    }\n\n    /**\n     * Setup hooks for Plyr and window events. This ensures\n     * the mid- and post-roll launch at the correct time. And\n     * resize the advertisement when the player resizes\n     */\n    listeners() {\n        const { container } = this.player.elements;\n        let time;\n\n        // Add listeners to the required events\n        this.player.on('ended', () => {\n            this.loader.contentComplete();\n        });\n\n        this.player.on('seeking', () => {\n            time = this.player.currentTime;\n            return time;\n        });\n\n        this.player.on('seeked', () => {\n            const seekedTime = this.player.currentTime;\n\n            if (utils.is.empty(this.cuePoints)) {\n                return;\n            }\n\n            this.cuePoints.forEach((cuePoint, index) => {\n                if (time < cuePoint && cuePoint < seekedTime) {\n                    this.manager.discardAdBreak();\n                    this.cuePoints.splice(index, 1);\n                }\n            });\n        });\n\n        // Listen to the resizing of the window. And resize ad accordingly\n        // TODO: eventually implement ResizeObserver\n        window.addEventListener('resize', () => {\n            if (this.manager) {\n                this.manager.resize(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n            }\n        });\n    }\n\n    /**\n     * Initialize the adsManager and start playing advertisements\n     */\n    play() {\n        const { container } = this.player.elements;\n\n        if (!this.managerPromise) {\n            this.resumeContent();\n        }\n\n        // Play the requested advertisement whenever the adsManager is ready\n        this.managerPromise\n            .then(() => {\n                // Initialize the container. Must be done via a user action on mobile devices\n                this.elements.displayContainer.initialize();\n\n                try {\n                    if (!this.initialized) {\n                        // Initialize the ads manager. Ad rules playlist will start at this time\n                        this.manager.init(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n\n                        // Call play to start showing the ad. Single video and overlay ads will\n                        // start at this time; the call will be ignored for ad rules\n                        this.manager.start();\n                    }\n\n                    this.initialized = true;\n                } catch (adError) {\n                    // An error may be thrown if there was a problem with the\n                    // VAST response\n                    this.onAdError(adError);\n                }\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Resume our video\n     */\n    resumeContent() {\n        // Hide the advertisement container\n        this.elements.container.style.zIndex = '';\n\n        // Ad is stopped\n        this.playing = false;\n\n        // Play our video\n        if (this.player.currentTime < this.player.duration) {\n            this.player.play();\n        }\n    }\n\n    /**\n     * Pause our video\n     */\n    pauseContent() {\n        // Show the advertisement container\n        this.elements.container.style.zIndex = 3;\n\n        // Ad is playing.\n        this.playing = true;\n\n        // Pause our video.\n        this.player.pause();\n    }\n\n    /**\n     * Destroy the adsManager so we can grab new ads after this. If we don't then we're not\n     * allowed to call new ads based on google policies, as they interpret this as an accidental\n     * video requests. https://developers.google.com/interactive-\n     * media-ads/docs/sdks/android/faq#8\n     */\n    cancel() {\n        // Pause our video\n        if (this.initialized) {\n            this.resumeContent();\n        }\n\n        // Tell our instance that we're done for now\n        this.trigger('error');\n\n        // Re-create our adsManager\n        this.loadAds();\n    }\n\n    /**\n     * Re-create our adsManager\n     */\n    loadAds() {\n        // Tell our adsManager to go bye bye\n        this.managerPromise\n            .then(() => {\n                // Destroy our adsManager\n                if (this.manager) {\n                    this.manager.destroy();\n                }\n\n                // Re-set our adsManager promises\n                this.managerPromise = new Promise(resolve => {\n                    this.on('loaded', resolve);\n                    this.player.debug.log(this.manager);\n                });\n\n                // Now request some new advertisements\n                this.requestAds();\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Handles callbacks after an ad event was invoked\n     * @param {string} event - Event type\n     */\n    trigger(event, ...args) {\n        const handlers = this.events[event];\n\n        if (utils.is.array(handlers)) {\n            handlers.forEach(handler => {\n                if (utils.is.function(handler)) {\n                    handler.apply(this, args);\n                }\n            });\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     * @return {Ads}\n     */\n    on(event, callback) {\n        if (!utils.is.array(this.events[event])) {\n            this.events[event] = [];\n        }\n\n        this.events[event].push(callback);\n\n        return this;\n    }\n\n    /**\n     * Setup a safety timer for when the ad network doesn't respond for whatever reason.\n     * The advertisement has 12 seconds to get its things together. We stop this timer when the\n     * advertisement is playing, or when a user action is required to start, then we clear the\n     * timer on ad ready\n     * @param {number} time\n     * @param {string} from\n     */\n    startSafetyTimer(time, from) {\n        this.player.debug.log(`Safety timer invoked from: ${from}`);\n\n        this.safetyTimer = setTimeout(() => {\n            this.cancel();\n            this.clearSafetyTimer('startSafetyTimer()');\n        }, time);\n    }\n\n    /**\n     * Clear our safety timer(s)\n     * @param {string} from\n     */\n    clearSafetyTimer(from) {\n        if (!utils.is.nullOrUndefined(this.safetyTimer)) {\n            this.player.debug.log(`Safety timer cleared from: ${from}`);\n\n            clearTimeout(this.safetyTimer);\n            this.safetyTimer = null;\n        }\n    }\n}\n\nexport default Ads;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport controls from './../controls';\nimport ui from './../ui';\n\n// Standardise YouTube quality unit\nfunction mapQualityUnit(input) {\n    switch (input) {\n        case 'hd2160':\n            return 2160;\n\n        case 2160:\n            return 'hd2160';\n\n        case 'hd1440':\n            return 1440;\n\n        case 1440:\n            return 'hd1440';\n\n        case 'hd1080':\n            return 1080;\n\n        case 1080:\n            return 'hd1080';\n\n        case 'hd720':\n            return 720;\n\n        case 720:\n            return 'hd720';\n\n        case 'large':\n            return 480;\n\n        case 480:\n            return 'large';\n\n        case 'medium':\n            return 360;\n\n        case 360:\n            return 'medium';\n\n        case 'small':\n            return 240;\n\n        case 240:\n            return 'small';\n\n        default:\n            return 'default';\n    }\n}\n\nfunction mapQualityUnits(levels) {\n    if (utils.is.empty(levels)) {\n        return levels;\n    }\n\n    return utils.dedupe(levels.map(level => mapQualityUnit(level)));\n}\n\nconst youtube = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Setup API\n        if (utils.is.object(window.YT) && utils.is.function(window.YT.Player)) {\n            youtube.ready.call(this);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.api).catch(error => {\n                this.debug.warn('YouTube API failed to load', error);\n            });\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle(videoId) {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (utils.is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (utils.is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        if (utils.is.string(key) && !utils.is.empty(key)) {\n            const url = `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${key}&fields=items(snippet(title))&part=snippet`;\n\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready() {\n        const player = this;\n\n        // Ignore already setup (race condition)\n        const currentId = player.media.getAttribute('id');\n        if (!utils.is.empty(currentId) && currentId.startsWith('youtube-')) {\n            return;\n        }\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(this.config.attributes.embed.id);\n        }\n\n        // Replace the <iframe> with a <div> due to YouTube API issues\n        const videoId = utils.parseYouTubeId(source);\n        const id = utils.generateId(player.provider);\n        const container = utils.createElement('div', { id });\n        player.media = utils.replaceElement(container, player.media);\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                // origin: window ? `${window.location.protocol}//${window.location.host}` : null,\n                widget_referrer: window ? window.location.href : null,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: player.captions.active ? 1 : 0,\n                cc_lang_pref: player.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (utils.is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    utils.dispatchEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange() {\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange', false, {\n                        quality: player.media.quality,\n                    });\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player, videoId);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        instance.playVideo();\n                    };\n\n                    player.media.pause = () => {\n                        instance.pauseVideo();\n                    };\n\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                    };\n\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // Set seeking flag\n                            player.media.seeking = true;\n\n                            // Trigger seeking\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return mapQualityUnit(instance.getPlaybackQuality());\n                        },\n                        set(input) {\n                            const quality = input;\n\n                            // Set via API\n                            instance.setPlaybackQuality(mapQualityUnit(quality));\n\n                            // Trigger request event\n                            utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                                quality,\n                            });\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    const options = instance.getAvailablePlaybackRates();\n                    controls.setSpeedMenu.call(player, options);\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    clearInterval(player.timers.playing);\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case -1:\n                            // Update scrubber\n                            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n\n                            // Get loaded % from YouTube\n                            player.media.buffered = instance.getVideoLoadedFraction();\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n\n                            break;\n\n                        case 0:\n                            player.media.paused = true;\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // If we were seeking, fire seeked event\n                            if (player.media.seeking) {\n                                utils.dispatchEvent.call(player, player.media, 'seeked');\n                            }\n                            player.media.seeking = false;\n\n                            // Only fire play if paused before\n                            if (player.media.paused) {\n                                utils.dispatchEvent.call(player, player.media, 'play');\n                            }\n                            player.media.paused = false;\n\n                            utils.dispatchEvent.call(player, player.media, 'playing');\n\n                            // Poll to get playback progress\n                            player.timers.playing = setInterval(() => {\n                                utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                            }, 50);\n\n                            // Check duration again due to YouTube bug\n                            // https://github.com/sampotts/plyr/issues/374\n                            // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                            if (player.media.duration !== instance.getDuration()) {\n                                player.media.duration = instance.getDuration();\n                                utils.dispatchEvent.call(player, player.media, 'durationchange');\n                            }\n\n                            // Get quality\n                            controls.setQualityMenu.call(player, mapQualityUnits(instance.getAvailableQualityLevels()));\n\n                            break;\n\n                        case 2:\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'pause');\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport captions from './../captions';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst vimeo = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils\n                .loadScript(this.config.urls.vimeo.api)\n                .then(() => {\n                    vimeo.ready.call(this);\n                })\n                .catch(error => {\n                    this.debug.warn('Vimeo API failed to load', error);\n                });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        const height = 240;\n        const offset = (height - padding) / (height / 50);\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n        this.media.style.transform = `translateY(-${offset}%)`;\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n        };\n        const params = utils.buildUrlParams(options);\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(this.config.attributes.embed.id);\n        }\n\n        const id = utils.parseVimeoId(source);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = `https://player.vimeo.com/video/${id}?${params}`;\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        iframe.setAttribute('allowtransparency', '');\n        iframe.setAttribute('allow', 'autoplay');\n\n        // Inject the package\n        const wrapper = utils.createElement('div');\n        wrapper.appendChild(iframe);\n        player.media = utils.replaceElement(wrapper, player.media);\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe);\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            player.embed.play().then(() => {\n                player.media.paused = false;\n            });\n        };\n\n        player.media.pause = () => {\n            player.embed.pause().then(() => {\n                player.media.paused = true;\n            });\n        };\n\n        player.media.stop = () => {\n            player.pause();\n            player.currentTime = 0;\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Get current paused state\n                // Vimeo will automatically play on seek\n                const { paused } = player.media;\n\n                // Set seeking flag\n                player.media.seeking = true;\n\n                // Trigger seeking\n                utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                // Seek after events\n                player.embed.setCurrentTime(time);\n\n                // Restore pause state\n                if (paused) {\n                    player.pause();\n                }\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed\n                    .setPlaybackRate(input)\n                    .then(() => {\n                        speed = input;\n                        utils.dispatchEvent.call(player, player.media, 'ratechange');\n                    })\n                    .catch(error => {\n                        // Hide menu item (and menu if empty)\n                        if (error.name === 'Error') {\n                            controls.setSpeedMenu.call(player, []);\n                        }\n                    });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed\n            .getVideoUrl()\n            .then(value => {\n                currentSrc = value;\n            })\n            .catch(error => {\n                this.debug.warn(error);\n            });\n\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([\n            player.embed.getVideoWidth(),\n            player.embed.getVideoHeight(),\n        ]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', data => {\n            let cue = null;\n\n            if (data.cues.length) {\n                cue = utils.stripHTML(data.cues[0].text);\n            }\n\n            captions.setText.call(player, cue);\n        });\n\n        player.embed.on('loaded', () => {\n            if (utils.is.element(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            // Only fire play if paused before\n            if (player.media.paused) {\n                utils.dispatchEvent.call(player, player.media, 'play');\n            }\n            player.media.paused = false;\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'pause');\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n            utils.dispatchEvent.call(player, player.media, 'play');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            utils.dispatchEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport youtube from './plugins/youtube';\nimport vimeo from './plugins/vimeo';\nimport html5 from './html5';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.debug.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        utils.toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        if (this.supported.ui) {\n            // Check for picture-in-picture support\n            utils.toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n            // Check for airplay support\n            utils.toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n            // If there's no autoplay attribute, assume the video is stopped and add state class\n            utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.config.autoplay);\n\n            // Add iOS class\n            utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n            // Add touch class\n            utils.toggleClass(this.elements.container, this.config.classNames.isTouch, this.touch);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            ui.setTitle.call(this);\n\n            html5.extend.call(this);\n        }\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport { providers } from './types';\nimport utils from './utils';\nimport html5 from './html5';\nimport media from './media';\nimport ui from './ui';\nimport support from './support';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.debug.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        html5.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // Reset quality options\n                this.options.quality = [];\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.element(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !utils.is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.inline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = utils.createElement('div', {\n                            src: input.sources[0].src,\n                        });\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if ('poster' in input) {\n                        this.media.setAttribute('poster', input.poster);\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.inline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hook\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n\n                // Update the fullscreen support\n                this.fullscreen.update();\n            },\n            true,\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.1.0-beta.1\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport { providers, types } from './types';\nimport defaults from './defaults';\nimport support from './support';\nimport utils from './utils';\n\nimport Console from './console';\nimport Fullscreen from './fullscreen';\nimport Listeners from './listeners';\nimport Storage from './storage';\nimport Ads from './plugins/ads';\n\nimport captions from './captions';\nimport controls from './controls';\nimport media from './media';\nimport source from './source';\nimport ui from './ui';\n\n// Private properties\n// TODO: Use a WeakMap for private globals\n// const globals = new WeakMap();\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n\n        // State\n        this.ready = false;\n        this.loading = false;\n        this.failed = false;\n\n        // Touch device\n        this.touch = support.touch;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || utils.is.nodeList(this.media) || utils.is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            options,\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return {};\n                }\n            })(),\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            active: null,\n            currentTrack: null,\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        // TODO: move to globals\n        this.debug = new Console(this.config.debug);\n\n        // Log config options and support\n        this.debug.log('Config', this.config);\n        this.debug.log('Support', support);\n\n        // We need an element to setup\n        if (utils.is.nullOrUndefined(this.media) || !utils.is.element(this.media)) {\n            this.debug.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.debug.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.debug.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        // TODO: Investigate a better solution as I suspect this causes reported double load issues?\n        setTimeout(() => {\n            const clone = this.media.cloneNode(true);\n\n            // Prevent the clone autoplaying\n            if (clone.getAttribute('autoplay')) {\n                clone.pause();\n            }\n\n            this.elements.original = clone;\n        }, 0);\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed properties\n        let iframe = null;\n        let url = null;\n        let params = null;\n\n        // Different setup based on type\n        switch (type) {\n            case 'div':\n                // Find the frame\n                iframe = this.media.querySelector('iframe');\n\n                // <iframe> type\n                if (utils.is.element(iframe)) {\n                    // Detect provider\n                    url = iframe.getAttribute('src');\n                    this.provider = utils.getProviderByUrl(url);\n\n                    // Rework elements\n                    this.elements.container = this.media;\n                    this.media = iframe;\n\n                    // Reset classname\n                    this.elements.container.className = '';\n\n                    // Get attributes from URL and set config\n                    params = utils.getUrlParams(url);\n                    if (!utils.is.empty(params)) {\n                        const truthy = [\n                            '1',\n                            'true',\n                        ];\n\n                        if (truthy.includes(params.autoplay)) {\n                            this.config.autoplay = true;\n                        }\n                        if (truthy.includes(params.playsinline)) {\n                            this.config.inline = true;\n                        }\n                        if (truthy.includes(params.loop)) {\n                            this.config.loop.active = true;\n                        }\n                    }\n                } else {\n                    // <div> with attributes\n                    this.provider = this.media.getAttribute(this.config.attributes.embed.provider);\n\n                    // Remove attribute\n                    this.media.removeAttribute(this.config.attributes.embed.provider);\n                }\n\n                // Unsupported or missing provider\n                if (utils.is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.debug.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Audio will come later for external providers\n                this.type = types.video;\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                // Get config from attributes\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.inline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.debug.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.inline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Create listeners\n        this.listeners = new Listeners(this);\n\n        // Setup local storage for user settings\n        this.storage = new Storage(this);\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        if (!utils.is.element(this.elements.container)) {\n            this.elements.container = utils.createElement('div');\n            utils.wrap(this.media, this.elements.container);\n        }\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.debug.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n\n        // Container listeners\n        this.listeners.container();\n\n        // Global listeners\n        this.listeners.global();\n\n        // Setup fullscreen\n        this.fullscreen = new Fullscreen(this);\n\n        // Setup ads if provided\n        this.ads = new Ads(this);\n\n        // Autoplay if required\n        if (this.config.autoplay) {\n            this.play();\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return Boolean(this.provider === providers.html5);\n    }\n    get isEmbed() {\n        return Boolean(this.isYouTube || this.isVimeo);\n    }\n    get isYouTube() {\n        return Boolean(this.provider === providers.youtube);\n    }\n    get isVimeo() {\n        return Boolean(this.provider === providers.vimeo);\n    }\n    get isVideo() {\n        return Boolean(this.type === types.video);\n    }\n    get isAudio() {\n        return Boolean(this.type === types.audio);\n    }\n\n    /**\n     * Play the media, or play the advertisement (if they are not blocked)\n     */\n    play() {\n        if (!utils.is.function(this.media.play)) {\n            return null;\n        }\n\n        // If ads are enabled, wait for them first\n        /* if (this.ads.enabled && !this.ads.initialized) {\n            return this.ads.managerPromise.then(() => this.ads.play()).catch(() => this.media.play());\n        } */\n\n        // Return the promise (for HTML5)\n        return this.media.play();\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if (!this.playing || !utils.is.function(this.media.pause)) {\n            return;\n        }\n\n        this.media.pause();\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return Boolean(this.media.paused);\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return Boolean(!this.paused && !this.ended && (this.isHTML5 ? this.media.readyState > 2 : true));\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return Boolean(this.media.ended);\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} input\n     */\n    togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        const toggle = utils.is.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        if (this.isHTML5) {\n            this.media.load();\n        } else if (utils.is.function(this.media.stop)) {\n            this.media.stop();\n        }\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        let targetTime = 0;\n\n        if (utils.is.number(input)) {\n            targetTime = input;\n        }\n\n        // Normalise targetTime\n        if (targetTime < 0) {\n            targetTime = 0;\n        } else if (targetTime > this.duration) {\n            targetTime = this.duration;\n        }\n\n        // Set\n        this.media.currentTime = parseFloat(targetTime.toFixed(4));\n\n        // Logging\n        this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get buffered\n     */\n    get buffered() {\n        const { buffered } = this.media;\n\n        // YouTube / Vimeo return a float between 0-1\n        if (utils.is.number(buffered)) {\n            return buffered;\n        }\n\n        // HTML5\n        // TODO: Handle buffered chunks of the media\n        // (i.e. seek to another section buffers only that section)\n        if (buffered && buffered.length && this.duration > 0) {\n            return buffered.end(0) / this.duration;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return Boolean(this.media.seeking);\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseInt(this.config.duration, 10);\n\n        // True duration\n        const realDuration = this.media ? Number(this.media.duration) : 0;\n\n        // If custom duration is funky, use regular duration\n        return !Number.isNaN(fauxDuration) ? fauxDuration : realDuration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            volume = this.storage.get('volume');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume manually, reset muted state\n        if (!utils.is.empty(value) && this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return Number(this.media.volume);\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.storage.get('muted');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return Boolean(this.media.muted);\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        if (this.isAudio) {\n            return true;\n        }\n\n        // Get audio tracks\n        return (\n            Boolean(this.media.mozHasAudio) ||\n            Boolean(this.media.webkitAudioDecodedByteCount) ||\n            Boolean(this.media.audioTracks && this.media.audioTracks.length)\n        );\n    }\n\n    /**\n     * Set playback speed\n     * @param {number} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (utils.is.number(input)) {\n            speed = input;\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.storage.get('speed');\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.debug.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return Number(this.media.playbackRate);\n    }\n\n    /**\n     * Set playback quality\n     * Currently HTML5 & YouTube only\n     * @param {number} input - Quality level\n     */\n    set quality(input) {\n        let quality = null;\n\n        if (!utils.is.empty(input)) {\n            quality = Number(input);\n        }\n\n        if (!utils.is.number(quality) || quality === 0) {\n            quality = this.storage.get('quality');\n        }\n\n        if (!utils.is.number(quality)) {\n            quality = this.config.quality.selected;\n        }\n\n        if (!utils.is.number(quality)) {\n            quality = this.config.quality.default;\n        }\n\n        if (!this.options.quality.includes(quality)) {\n            this.debug.warn(`Unsupported quality option (${quality})`);\n            return;\n        }\n\n        // Update config\n        this.config.quality.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return Boolean(this.media.loop);\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a HTML5 video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isHTML5 || !this.isVideo) {\n            this.debug.warn('Poster can only be set on HTML5 video');\n            return;\n        }\n\n        if (utils.is.string(input)) {\n            this.media.setAttribute('poster', input);\n        }\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isHTML5 || !this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return Boolean(this.config.autoplay);\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support, or there's no caption toggle\n        if (!this.supported.ui || !utils.is.element(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const show = utils.is.boolean(input) ? input : this.elements.container.className.indexOf(this.config.classNames.captions.active) === -1;\n\n        // Nothing to change...\n        if (this.captions.active === show) {\n            return;\n        }\n\n        // Set global\n        this.captions.active = show;\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, this.captions.active);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.captions.active);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.captions.active ? 'captionsenabled' : 'captionsdisabled');\n    }\n\n    /**\n     * Set the captions language\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        // Nothing specified\n        if (!utils.is.string(input)) {\n            return;\n        }\n\n        // Toggle captions based on input\n        this.toggleCaptions(!utils.is.empty(input));\n\n        // If empty string is passed, assume disable captions\n        if (utils.is.empty(input)) {\n            return;\n        }\n\n        // Normalize\n        const language = input.toLowerCase();\n\n        // If nothing to change, bail\n        if (this.language === language) {\n            return;\n        }\n\n        // Update config\n        this.captions.language = language;\n\n        // Clear caption\n        captions.setText.call(this, null);\n\n        // Update captions\n        captions.setLanguage.call(this);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, 'languagechange');\n    }\n\n    /**\n     * Get the current captions language\n     */\n    get language() {\n        return this.captions.language;\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n            this.media.webkitShowPlaybackTargetPicker();\n        }\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} toggle - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // We need controls of course...\n        if (!utils.is.element(this.elements.controls)) {\n            return;\n        }\n\n        // Don't hide if no UI support or it's audio\n        if (!this.supported.ui || this.isAudio) {\n            return;\n        }\n\n        let delay = 0;\n        let show = toggle;\n        let isEnterFullscreen = false;\n\n        // Get toggle state if not set\n        if (!utils.is.boolean(toggle)) {\n            if (utils.is.event(toggle)) {\n                // Is the enter fullscreen event\n                isEnterFullscreen = toggle.type === 'enterfullscreen';\n\n                // Events that show the controls\n                const showEvents = [\n                    'touchstart',\n                    'touchmove',\n                    'mouseenter',\n                    'mousemove',\n                    'focusin',\n                ];\n\n                // Events that delay hiding\n                const delayEvents = [\n                    'touchmove',\n                    'touchend',\n                    'mousemove',\n                ];\n\n                // Whether to show controls\n                show = showEvents.includes(toggle.type);\n\n                // Delay hiding on move events\n                if (delayEvents.includes(toggle.type)) {\n                    delay = 2000;\n                }\n\n                // Delay a little more for keyboard users\n                if (!this.touch && toggle.type === 'focusin') {\n                    delay = 3000;\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, true);\n                }\n            } else {\n                show = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n            }\n        }\n\n        // Clear timer on every call\n        clearTimeout(this.timers.controls);\n\n        // If the mouse is not over the controls, set a timeout to hide them\n        if (show || this.paused || this.loading) {\n            // Check if controls toggled\n            const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, false);\n\n            // Trigger event\n            if (toggled) {\n                utils.dispatchEvent.call(this, this.media, 'controlsshown');\n            }\n\n            // Always show controls when paused or if touch\n            if (this.paused || this.loading) {\n                return;\n            }\n\n            // Delay for hiding on touch\n            if (this.touch) {\n                delay = 3000;\n            }\n        }\n\n        // If toggle is false or if we're playing (regardless of toggle),\n        // then set the timer to hide the controls\n        if (!show || this.playing) {\n            this.timers.controls = setTimeout(() => {\n                // We need controls of course...\n                if (!utils.is.element(this.elements.controls)) {\n                    return;\n                }\n\n                // If the mouse is over the controls (and not entering fullscreen), bail\n                if ((this.elements.controls.pressed || this.elements.controls.hover) && !isEnterFullscreen) {\n                    return;\n                }\n\n                // Restore transition behaviour\n                if (!utils.hasClass(this.elements.container, this.config.classNames.hideControls)) {\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, false);\n                }\n\n                // Check if controls toggled\n                const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, true);\n\n                // Trigger event and close menu\n                if (toggled) {\n                    utils.dispatchEvent.call(this, this.media, 'controlshidden');\n\n                    if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                        controls.toggleMenu.call(this, false);\n                    }\n                }\n            }, delay);\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n    }\n\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        if (!this.ready) {\n            return;\n        }\n\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove elements\n                    utils.removeElement(this.elements.buttons.play);\n                    utils.removeElement(this.elements.captions);\n                    utils.removeElement(this.elements.controls);\n                    utils.removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Unbind listeners\n                this.listeners.clear();\n\n                // Replace the container with the original element provided\n                utils.replaceElement(this.elements.original, this.elements.container);\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Reset state\n                this.ready = false;\n\n                // Clear for garbage collection\n                setTimeout(() => {\n                    this.elements = null;\n                    this.media = null;\n                }, 200);\n            }\n        };\n\n        // Stop playback\n        this.stop();\n\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Clear timeout\n                clearTimeout(this.timers.loading);\n\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                clearInterval(this.timers.buffering);\n                clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                if (this.embed !== null && utils.is.function(this.embed.destroy)) {\n                    this.embed.destroy();\n                }\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                if (this.embed !== null) {\n                    this.embed.unload().then(done);\n                }\n\n                // Vimeo does not always return\n                setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Check for support\n     * @param {string} type - Player type (audio/video)\n     * @param {string} provider - Provider (html5/youtube/vimeo)\n     * @param {bool} inline - Where player has `playsinline` sttribute\n     */\n    static supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n    }\n\n    /**\n     * Load an SVG sprite into the page\n     * @param {string} url - URL for the SVG sprite\n     * @param {string} [id] - Unique ID\n     */\n    static loadSprite(url, id) {\n        return utils.loadSprite(url, id);\n    }\n}\n\nexport default Plyr;\n"]}