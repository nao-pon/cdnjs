!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("react"),require("react-dom"));else if("function"==typeof define&&define.amd)define(["react","react-dom"],t);else{var r="object"==typeof exports?t(require("react"),require("react-dom")):t(e.react,e["react-dom"]);for(var o in r)("object"==typeof exports?exports:e)[o]=r[o]}}(this,function(__WEBPACK_EXTERNAL_MODULE_1__,__WEBPACK_EXTERNAL_MODULE_4__){return function(e){function t(o){if(r[o])return r[o].exports;var n=r[o]={exports:{},id:o,loaded:!1};return e[o].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){e.exports=r(2)},function(e,t){e.exports=__WEBPACK_EXTERNAL_MODULE_1__},function(e,t,r){!function(){function e(e,t){t.forceUpdate=e.forceUpdate.bind(e)}function o(e,t){i.extend(t,e)}var n=document.registerElement||document.register;if(!n)throw new Error("No custom element support or polyfill found!");n=n.bind(document);var a=window.React||r(1),c=window.ReactDOM||r(4),i=r(3);t.registerReact=function(t,r){function p(e,t){var o=a.createElement(r,t);return e.reactiveElement=o,c.render(o,e,t.onRender)}var u,s=Object.create(HTMLElement.prototype);s.createdCallback=function(){var t=i.getProps(this);t.children=i.getChildren(this),u=p(this,t),null!==u&&(o(u,u.props.container),e(u,u.props.container),i.getterSetter(this,"props",function(){return u.props},function(e){u=p(this,e)}))},s.detachedCallback=function(){c.unmountComponentAtNode(this)},s.attributeChangedCallback=function(e,t,r){var o=i.getProps(this);u=p(this,o)},n(t,{prototype:s})},t.utils=i,document.registerReact=t.registerReact}()},function(module,exports,__webpack_require__){var React=window.React||__webpack_require__(1),getAllProperties=function(e){for(var t={};e&&e!==React.Component.prototype&&e!==Object.prototype;){for(var r=Object.getOwnPropertyNames(e),o=0;o<r.length;o++)t[r[o]]=null;e=Object.getPrototypeOf(e)}return delete t.constructor,Object.keys(t)};exports.extend=function(e,t){for(var r=getAllProperties(t),o=0;o<r.length;o++){var n=r[o];if(!(n in e)){var a=t[n];e[n]=a}}},exports.getProps=function(e){for(var t={},r=0;r<e.attributes.length;r++){var o=e.attributes[r],n=exports.attributeNameToPropertyName(o.name);t[n]=exports.parseAttributeValue(o.value)}return t.container=e,t},exports.getterSetter=function(e,t,r,o){Object.defineProperty?Object.defineProperty(e,t,{get:r,set:o}):document.__defineGetter__&&(e.__defineGetter__(t,r),e.__defineSetter__(t,o)),e["get"+t]=r,e["set"+t]=o},exports.attributeNameToPropertyName=function(e){return e.replace(/^(x|data)[-_:]/i,"").replace(/[-_:](.)/g,function(e,t){return t.toUpperCase()})},exports.parseAttributeValue=function(value){if(!value)return null;value=value.replace(/[\n\r]/g,"");var pointerRegexp=/^{.*?}$/i,jsonRegexp=/^{{2}.*}{2}$/,jsonArrayRegexp=/^{\[.*\]}$/,pointerMatches=value.match(pointerRegexp),jsonMatches=value.match(jsonRegexp)||value.match(jsonArrayRegexp);return jsonMatches?value=JSON.parse(jsonMatches[0].replace(/^{|}$/g,"")):pointerMatches&&(value=eval(pointerMatches[0].replace(/[{}]/g,""))),value},exports.getChildren=function(e){for(var t=document.createDocumentFragment();e.childNodes.length;)t.appendChild(e.childNodes[0]);return t},exports.shallowCopy=function(e,t){for(var r in t)e[r]=t[r];return e}},function(e,t){e.exports=__WEBPACK_EXTERNAL_MODULE_4__}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,