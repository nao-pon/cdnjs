/*! sass.js - v0.11.0-beta.1 (ff51bc1) - built 2018-02-06
  providing libsass 3.4.9 (6de5050d)
  via emscripten 1.37.33 ()
 */

(function (root, factory) {
  'use strict';
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.Sass = factory();
  }
}(this, function () {/*global document, location, SASSJS_RELATIVE_PATH*/
// identify the path sass.js is located at in case we're loaded by a simple
// <script src="path/to/sass.js"></script>
// this path can be used to identify the location of
// * sass.worker.js from sass.js
// * libsass.js.mem from sass.sync.js
// see https://github.com/medialize/sass.js/pull/32#issuecomment-103142214
// see https://github.com/medialize/sass.js/issues/33
var _SASSJS_RELATIVE_PATH = typeof SASSJS_RELATIVE_PATH !== 'undefined' && SASSJS_RELATIVE_PATH
var SASSJS_RELATIVE_PATH = _SASSJS_RELATIVE_PATH || (function() {
  'use strict';

  var path = null;

  // in Node things are rather simple
  if (typeof __dirname !== 'undefined') {
    return __dirname;
  }

  // in a WebWorker we're always relative to the the worker itself
  if (typeof WorkerLocation !== 'undefined') {
    path = location.href;
    if (path.slice(-15) === '/sass.worker.js') {
      return path.slice(0, -15);
    }
  }

  // we can only run this test in the browser,
  // so make sure we actually have a DOM to work with.
  if (typeof document === 'undefined' || !document.getElementsByTagName) {
    return null;
  }

  // http://www.2ality.com/2014/05/current-script.html
  var currentScript = document.currentScript || (function() {
    var scripts = document.getElementsByTagName('script');
    return scripts[scripts.length - 1];
  })();

  path = currentScript && currentScript.src;
  if (!path) {
    return null;
  }

  // [worker] make sure we're not running in some concatenated thing
  if (path.slice(-8) === '/sass.js') {
    return path.slice(0, -8);
  }

  // [sync] make sure we're not running in some concatenated thing
  if (path.slice(-13) === '/sass.sync.js') {
    return path.slice(0, -13);
  }

  return null;
})() || '.';

var Module=typeof Module!=="undefined"?Module:{};var _SASSJS_RELATIVE_PATH=typeof SASSJS_RELATIVE_PATH!=="undefined"&&SASSJS_RELATIVE_PATH;var SASSJS_RELATIVE_PATH=_SASSJS_RELATIVE_PATH||(function(){"use strict";var path=null;if(typeof __dirname!=="undefined"){return __dirname}if(typeof WorkerLocation!=="undefined"){path=location.href;if(path.slice(-15)==="/sass.worker.js"){return path.slice(0,-15)}}if(typeof document==="undefined"||!document.getElementsByTagName){return null}var currentScript=document.currentScript||(function(){var scripts=document.getElementsByTagName("script");return scripts[scripts.length-1]})();path=currentScript&&currentScript.src;if(!path){return null}if(path.slice(-8)==="/sass.js"){return path.slice(0,-8)}if(path.slice(-13)==="/sass.sync.js"){return path.slice(0,-13)}return null})()||".";var Module={locateFile:(function(path){return SASSJS_RELATIVE_PATH+"/"+path}),onRuntimeInitialized:(function(){setTimeout(Sass._ready)})};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}Module["arguments"]=[];Module["thisProgram"]="./this.program";Module["quit"]=(function(status,toThrow){throw toThrow});Module["preRun"]=[];Module["postRun"]=[];var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;if(Module["ENVIRONMENT"]){if(Module["ENVIRONMENT"]==="WEB"){ENVIRONMENT_IS_WEB=true}else if(Module["ENVIRONMENT"]==="WORKER"){ENVIRONMENT_IS_WORKER=true}else if(Module["ENVIRONMENT"]==="NODE"){ENVIRONMENT_IS_NODE=true}else if(Module["ENVIRONMENT"]==="SHELL"){ENVIRONMENT_IS_SHELL=true}else{throw new Error("Module['ENVIRONMENT'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.")}}else{ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof require==="function"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER}if(ENVIRONMENT_IS_NODE){var nodeFS;var nodePath;Module["read"]=function shell_read(filename,binary){var ret;if(!nodeFS)nodeFS=require("fs");if(!nodePath)nodePath=require("path");filename=nodePath["normalize"](filename);ret=nodeFS["readFileSync"](filename);return binary?ret:ret.toString()};Module["readBinary"]=function readBinary(filename){var ret=Module["read"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process["argv"].length>1){Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/")}Module["arguments"]=process["argv"].slice(2);if(typeof module!=="undefined"){module["exports"]=Module}process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));process["on"]("unhandledRejection",(function(reason,p){process["exit"](1)}));Module["inspect"]=(function(){return"[Emscripten Module object]"})}else if(ENVIRONMENT_IS_SHELL){if(typeof read!="undefined"){Module["read"]=function shell_read(f){return read(f)}}Module["readBinary"]=function readBinary(f){var data;if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs}else if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof quit==="function"){Module["quit"]=(function(status,toThrow){quit(status)})}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module["read"]=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){Module["readBinary"]=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}}Module["readAsync"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)};if(typeof arguments!="undefined"){Module["arguments"]=arguments}Module["setWindowTitle"]=(function(title){document.title=title})}Module["print"]=typeof console!=="undefined"?console.log:typeof print!=="undefined"?print:null;Module["printErr"]=typeof printErr!=="undefined"?printErr:typeof console!=="undefined"&&console.warn||Module["print"];Module.print=Module["print"];Module.printErr=Module["printErr"];for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var STACK_ALIGN=16;function staticAlloc(size){assert(!staticSealed);var ret=STATICTOP;STATICTOP=STATICTOP+size+15&-16;return ret}function dynamicAlloc(size){assert(DYNAMICTOP_PTR);var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=ret+size+15&-16;HEAP32[DYNAMICTOP_PTR>>2]=end;if(end>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){HEAP32[DYNAMICTOP_PTR>>2]=ret;return 0}}return ret}function alignMemory(size,factor){if(!factor)factor=STACK_ALIGN;var ret=size=Math.ceil(size/factor)*factor;return ret}function getNativeTypeSize(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return 4}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}function warnOnce(text){if(!warnOnce.shown)warnOnce.shown={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;Module.printErr(text)}}var functionPointers=new Array(0);function addFunction(func){for(var i=0;i<functionPointers.length;i++){if(!functionPointers[i]){functionPointers[i]=func;return 1+i}}throw"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."}var GLOBAL_BASE=1024;var ABORT=0;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}function getCFunc(ident){var func=Module["_"+ident];assert(func,"Cannot call unknown function "+ident+", make sure it is exported");return func}var JSfuncs={"stackSave":(function(){stackSave()}),"stackRestore":(function(){stackRestore()}),"arrayToC":(function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),"stringToC":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret})};var toC={"string":JSfuncs["stringToC"],"array":JSfuncs["arrayToC"]};function ccall(ident,returnType,argTypes,args,opts){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType==="string")ret=Pointer_stringify(ret);if(stack!==0){if(opts&&opts.async){EmterpreterAsync.asyncFinalizers.push((function(){stackRestore(stack)}));return}stackRestore(stack)}return ret}function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for getValue: "+type)}return null}var ALLOC_NORMAL=0;var ALLOC_STATIC=2;var ALLOC_NONE=4;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[typeof _malloc==="function"?_malloc:staticAlloc,stackAlloc,staticAlloc,dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var stop;ptr=ret;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];type=singleType||types[i];if(type===0){i++;continue}if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}function getMemory(size){if(!staticSealed)return staticAlloc(size);if(!runtimeInitialized)return dynamicAlloc(size);return _malloc(size)}function Pointer_stringify(ptr,length){if(length===0||!ptr)return"";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return UTF8ToString(ptr)}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(u8Array,idx){var endPtr=idx;while(u8Array[endPtr])++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var u0,u1,u2,u3,u4,u5;var str="";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}}function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function demangle(func){return func}function demangleAll(text){var regex=/__Z[\w\d_]+/g;return text.replace(regex,(function(x){var y=demangle(x);return x===y?x:x+" ["+y+"]"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}function stackTrace(){var js=jsStackTrace();if(Module["extraStackTrace"])js+="\n"+Module["extraStackTrace"]();return demangleAll(js)}var WASM_PAGE_SIZE=65536;var ASMJS_PAGE_SIZE=16777216;var MIN_TOTAL_MEMORY=16777216;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBuffer(buf){Module["buffer"]=buffer=buf}function updateGlobalBufferViews(){Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer)}var STATIC_BASE,STATICTOP,staticSealed;var STACK_BASE,STACKTOP,STACK_MAX;var DYNAMIC_BASE,DYNAMICTOP_PTR;STATIC_BASE=STATICTOP=STACK_BASE=STACKTOP=STACK_MAX=DYNAMIC_BASE=DYNAMICTOP_PTR=0;staticSealed=false;function abortOnCannotGrowMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+TOTAL_MEMORY+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}if(!Module["reallocBuffer"])Module["reallocBuffer"]=(function(size){var ret;try{if(ArrayBuffer.transfer){ret=ArrayBuffer.transfer(buffer,size)}else{var oldHEAP8=HEAP8;ret=new ArrayBuffer(size);var temp=new Int8Array(ret);temp.set(oldHEAP8)}}catch(e){return false}var success=_emscripten_replace_memory(ret);if(!success)return false;return ret});function enlargeMemory(){var PAGE_MULTIPLE=Module["usingWasm"]?WASM_PAGE_SIZE:ASMJS_PAGE_SIZE;var LIMIT=2147483648-PAGE_MULTIPLE;if(HEAP32[DYNAMICTOP_PTR>>2]>LIMIT){return false}var OLD_TOTAL_MEMORY=TOTAL_MEMORY;TOTAL_MEMORY=Math.max(TOTAL_MEMORY,MIN_TOTAL_MEMORY);while(TOTAL_MEMORY<HEAP32[DYNAMICTOP_PTR>>2]){if(TOTAL_MEMORY<=536870912){TOTAL_MEMORY=alignUp(2*TOTAL_MEMORY,PAGE_MULTIPLE)}else{TOTAL_MEMORY=Math.min(alignUp((3*TOTAL_MEMORY+2147483648)/4,PAGE_MULTIPLE),LIMIT)}}var replacement=Module["reallocBuffer"](TOTAL_MEMORY);if(!replacement||replacement.byteLength!=TOTAL_MEMORY){TOTAL_MEMORY=OLD_TOTAL_MEMORY;return false}updateGlobalBuffer(replacement);updateGlobalBufferViews();return true}var byteLength;try{byteLength=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,"byteLength").get);byteLength(new ArrayBuffer(4))}catch(e){byteLength=(function(buffer){return buffer.byteLength})}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||16777216;if(TOTAL_MEMORY<TOTAL_STACK)Module.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+TOTAL_MEMORY+"! (TOTAL_STACK="+TOTAL_STACK+")");if(Module["buffer"]){buffer=Module["buffer"]}else{if(typeof WebAssembly==="object"&&typeof WebAssembly.Memory==="function"){Module["wasmMemory"]=new WebAssembly.Memory({"initial":TOTAL_MEMORY/WASM_PAGE_SIZE});buffer=Module["wasmMemory"].buffer}else{buffer=new ArrayBuffer(TOTAL_MEMORY)}Module["buffer"]=buffer}updateGlobalBufferViews();function getTotalMemory(){return TOTAL_MEMORY}HEAP32[0]=1668509029;HEAP16[1]=25459;if(HEAPU8[2]!==115||HEAPU8[3]!==99)throw"Runtime error: expected the system to be little-endian!";function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func)}else{Module["dynCall_vi"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_round=Math.round;var Math_min=Math.min;var Math_max=Math.max;var Math_clz32=Math.clz32;var Math_trunc=Math.trunc;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}function integrateWasmJS(){var wasmTextFile="libsass.wast";var wasmBinaryFile="libsass.wasm";var asmjsCodeFile="libsass.temp.asm.js";if(typeof Module["locateFile"]==="function"){if(!isDataURI(wasmTextFile)){wasmTextFile=Module["locateFile"](wasmTextFile)}if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=Module["locateFile"](wasmBinaryFile)}if(!isDataURI(asmjsCodeFile)){asmjsCodeFile=Module["locateFile"](asmjsCodeFile)}}var wasmPageSize=64*1024;var info={"global":null,"env":null,"asm2wasm":{"f64-rem":(function(x,y){return x%y}),"debugger":(function(){debugger})},"parent":Module};var exports=null;function mergeMemory(newBuffer){var oldBuffer=Module["buffer"];if(newBuffer.byteLength<oldBuffer.byteLength){Module["printErr"]("the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here")}var oldView=new Int8Array(oldBuffer);var newView=new Int8Array(newBuffer);newView.set(oldView);updateGlobalBuffer(newBuffer);updateGlobalBufferViews()}function fixImports(imports){return imports}function getBinary(){try{if(Module["wasmBinary"]){return new Uint8Array(Module["wasmBinary"])}if(Module["readBinary"]){return Module["readBinary"](wasmBinaryFile)}else{throw"on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)"}}catch(err){abort(err)}}function getBinaryPromise(){if(!Module["wasmBinary"]&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then((function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()})).catch((function(){return getBinary()}))}return new Promise((function(resolve,reject){resolve(getBinary())}))}function doNativeWasm(global,env,providedBuffer){if(typeof WebAssembly!=="object"){Module["printErr"]("no native wasm support detected");return false}if(!(Module["wasmMemory"]instanceof WebAssembly.Memory)){Module["printErr"]("no native wasm Memory in use");return false}env["memory"]=Module["wasmMemory"];info["global"]={"NaN":NaN,"Infinity":Infinity};info["global.Math"]=Math;info["env"]=env;function receiveInstance(instance,module){exports=instance.exports;if(exports.memory)mergeMemory(exports.memory);Module["asm"]=exports;Module["usingWasm"]=true;removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");if(Module["instantiateWasm"]){try{return Module["instantiateWasm"](info,receiveInstance)}catch(e){Module["printErr"]("Module.instantiateWasm callback failed with error: "+e);return false}}function receiveInstantiatedSource(output){receiveInstance(output["instance"],output["module"])}function instantiateArrayBuffer(receiver){getBinaryPromise().then((function(binary){return WebAssembly.instantiate(binary,info)})).then(receiver).catch((function(reason){Module["printErr"]("failed to asynchronously prepare wasm: "+reason);abort(reason)}))}if(!Module["wasmBinary"]&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&typeof fetch==="function"){WebAssembly.instantiateStreaming(fetch(wasmBinaryFile,{credentials:"same-origin"}),info).then(receiveInstantiatedSource).catch((function(reason){Module["printErr"]("wasm streaming compile failed: "+reason);Module["printErr"]("falling back to ArrayBuffer instantiation");instantiateArrayBuffer(receiveInstantiatedSource)}))}else{instantiateArrayBuffer(receiveInstantiatedSource)}return{}}Module["asmPreload"]=Module["asm"];var asmjsReallocBuffer=Module["reallocBuffer"];var wasmReallocBuffer=(function(size){var PAGE_MULTIPLE=Module["usingWasm"]?WASM_PAGE_SIZE:ASMJS_PAGE_SIZE;size=alignUp(size,PAGE_MULTIPLE);var old=Module["buffer"];var oldSize=old.byteLength;if(Module["usingWasm"]){try{var result=Module["wasmMemory"].grow((size-oldSize)/wasmPageSize);if(result!==(-1|0)){return Module["buffer"]=Module["wasmMemory"].buffer}else{return null}}catch(e){return null}}});Module["reallocBuffer"]=(function(size){if(finalMethod==="asmjs"){return asmjsReallocBuffer(size)}else{return wasmReallocBuffer(size)}});var finalMethod="";Module["asm"]=(function(global,env,providedBuffer){env=fixImports(env);if(!env["table"]){var TABLE_SIZE=Module["wasmTableSize"];if(TABLE_SIZE===undefined)TABLE_SIZE=1024;var MAX_TABLE_SIZE=Module["wasmMaxTableSize"];if(typeof WebAssembly==="object"&&typeof WebAssembly.Table==="function"){if(MAX_TABLE_SIZE!==undefined){env["table"]=new WebAssembly.Table({"initial":TABLE_SIZE,"maximum":MAX_TABLE_SIZE,"element":"anyfunc"})}else{env["table"]=new WebAssembly.Table({"initial":TABLE_SIZE,element:"anyfunc"})}}else{env["table"]=new Array(TABLE_SIZE)}Module["wasmTable"]=env["table"]}if(!env["memoryBase"]){env["memoryBase"]=Module["STATIC_BASE"]}if(!env["tableBase"]){env["tableBase"]=0}var exports;exports=doNativeWasm(global,env,providedBuffer);if(!exports)abort("no binaryen method succeeded. consider enabling more options, like interpreting, if you want that: https://github.com/kripken/emscripten/wiki/WebAssembly#binaryen-methods");return exports})}integrateWasmJS();var ASM_CONSTS=[(function($0,$1,$2){Sass._sassCompileEmscriptenSuccess(pointerToString($0),pointerToJson($1),pointerToStringArray($2))}),(function($0,$1){Sass._sassCompileEmscriptenError(pointerToJson($0),pointerToString($1))}),(function($0,$1){Importer.find(pointerToString($0),pointerToString($1))}),(function($0){return Number(Importer.finished())}),(function($0){return Number(Importer.error())}),(function($0){return Number(Importer.path())}),(function($0){return Number(Importer.content())})];function _emscripten_asm_const_iii(code,a0,a1){return ASM_CONSTS[code](a0,a1)}function _emscripten_asm_const_iiii(code,a0,a1,a2){return ASM_CONSTS[code](a0,a1,a2)}function _emscripten_asm_const_ii(code,a0){return ASM_CONSTS[code](a0)}STATIC_BASE=GLOBAL_BASE;STATICTOP=STATIC_BASE+89680;__ATINIT__.push({func:(function(){__GLOBAL__I_000101()})},{func:(function(){__GLOBAL__sub_I_node_cpp()})},{func:(function(){__GLOBAL__sub_I_context_cpp()})},{func:(function(){__GLOBAL__sub_I_functions_cpp()})},{func:(function(){__GLOBAL__sub_I_color_maps_cpp()})},{func:(function(){__GLOBAL__sub_I_environment_cpp()})},{func:(function(){__GLOBAL__sub_I_ast_fwd_decl_cpp()})},{func:(function(){__GLOBAL__sub_I_bind_cpp()})},{func:(function(){__GLOBAL__sub_I_file_cpp()})},{func:(function(){__GLOBAL__sub_I_util_cpp()})},{func:(function(){__GLOBAL__sub_I_units_cpp()})},{func:(function(){__GLOBAL__sub_I_values_cpp()})},{func:(function(){__GLOBAL__sub_I_parser_cpp()})},{func:(function(){__GLOBAL__sub_I_eval_cpp()})},{func:(function(){__GLOBAL__sub_I_expand_cpp()})},{func:(function(){__GLOBAL__sub_I_listize_cpp()})},{func:(function(){__GLOBAL__sub_I_cssize_cpp()})},{func:(function(){__GLOBAL__sub_I_extend_cpp()})},{func:(function(){__GLOBAL__sub_I_output_cpp()})},{func:(function(){__GLOBAL__sub_I_inspect_cpp()})},{func:(function(){__GLOBAL__sub_I_emitter_cpp()})},{func:(function(){__GLOBAL__sub_I_check_nesting_cpp()})},{func:(function(){__GLOBAL__sub_I_remove_placeholders_cpp()})},{func:(function(){__GLOBAL__sub_I_sass_cpp()})},{func:(function(){__GLOBAL__sub_I_sass_util_cpp()})},{func:(function(){__GLOBAL__sub_I_sass_values_cpp()})},{func:(function(){__GLOBAL__sub_I_sass_context_cpp()})},{func:(function(){__GLOBAL__sub_I_sass_functions_cpp()})},{func:(function(){__GLOBAL__sub_I_sass2scss_cpp()})},{func:(function(){__GLOBAL__sub_I_to_c_cpp()})},{func:(function(){__GLOBAL__sub_I_to_value_cpp()})},{func:(function(){__GLOBAL__sub_I_source_map_cpp()})},{func:(function(){__GLOBAL__sub_I_subset_map_cpp()})},{func:(function(){__GLOBAL__sub_I_error_handling_cpp()})},{func:(function(){__GLOBAL__sub_I_ast_cpp()})},{func:(function(){__GLOBAL__sub_I_iostream_cpp()})});var STATIC_BUMP=89680;Module["STATIC_BASE"]=STATIC_BASE;Module["STATIC_BUMP"]=STATIC_BUMP;var tempDoublePtr=STATICTOP;STATICTOP+=16;var EMTSTACKTOP=getMemory(1048576);var EMT_STACK_MAX=EMTSTACKTOP+1048576;var eb=getMemory(62128);__ATPRERUN__.push((function(){HEAPU8.set([140,2,78,0,0,0,0,0,2,67,0,0,200,1,0,0,2,68,0,0,172,1,0,0,2,69,0,0,173,1,0,0,2,70,0,0,208,30,0,0,2,71,0,0,200,31,0,0,2,72,0,0,200,0,0,0,2,73,0,0,116,1,0,0,1,63,0,0,136,74,0,0,0,64,74,0,136,74,0,0,1,75,208,2,3,74,74,75,137,74,0,0,25,62,64,80,25,60,64,40,0,61,64,0,1,74,176,2,3,65,64,74,1,74,192,2,3,3,64,74,1,74,184,2,3,4,64,74,1,74,168,2,3,5,64,74,1,74,160,2,3,6,64,74,1,74,152,2,3,7,64,74,1,74,144,2,3,8,64,74,1,74,136,2,3,9,64,74,1,74,128,2,3,10,64,74,1,74,104,2,3,11,64,74,1,74,96,2,3,12,64,74,1,74,88,2,3,13,64,74,1,74,80,2,3,14,64,74,1,74,72,2,3,15,64,74,1,74,64,2,3,16,64,74,1,74,56,2,3,17,64,74,1,74,48,2,3,18,64,74,1,74,40,2,3,19,64,74,1,74,32,2,3,20,64,74,1,74,16,2,3,31,64,74,1,74,8,2,3,38,64,74,1,74,0,2,3,41,64,74,1,74,248,1,3,57,64,74,1,74,208,1,3,58,64,74,1,74,160,1,3,59,64,74,1,74,112,2,3,56,64,74,1,74,152,1,3,44,64,74,1,74,144,1,3,45,64,74,1,74,136,1,3,52,64,74,1,74,96,1,3,51,64,74,1,74,88,1,3,53,64,74,1,74,80,1,3,21,64,74,1,74,72,1,3,23,64,74,1,74,56,1,3,22,64,74,1,74,48,1,3,24,64,74,1,74,40,1,3,25,64,74,1,74,32,1,3,26,64,74,1,74,24,1,3,27,64,74,1,74,16,1,3,28,64,74,1,74,8,1,3,29,64,74,1,74,0,1,3,36,64,74,1,74,248,0,3,39,64,74,1,74,240,0,3,30,64,74,1,74,232,0,3,32,64,74,1,74,224,0,3,33,64,74,1,74,216,0,3,34,64,74,1,74,208,0,3,35,64,74,3,37,64,72,1,74,192,0,3,40,64,74,1,74,184,0,3,42,64,74,1,74,176,0,3,43,64,74,1,74,168,0,3,46,64,74,1,74,160,0,3,47,64,74,1,74,152,0,3,48,64,74,1,74,144,0,3,49,64,74,1,74,136,0,3,50,64,74,1,74,128,0,3,54,64,74,25,55,64,120,106,75,0,48,26,75,75,4,82,75,75,0,135,74,0,0,65,75,0,0,1,74,56,32,85,65,74,0,1,74,0,0,132,0,0,74,1,75,191,1,135,74,1,0,75,0,0,0,130,74,0,0,0,2,74,0,1,74,0,0,132,0,0,74,38,74,2,1,120,74,185,12,1,74,0,0,132,0,0,74,1,75,64,0,1,76,1,0,1,77,0,0,135,74,2,0,75,0,76,77,130,74,0,0,0,2,74,0,1,74,0,0,132,0,0,74,38,74,2,1,120,74,172,12,1,74,0,0,132,0,0,74,1,74,101,0,1,77,1,0,1,76,0,0,135,2,2,0,74,0,77,76,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,149,12,121,2,62,0,106,76,65,4,25,2,76,64,82,76,2,0,106,1,76,20,1,76,0,0,132,0,0,76,1,77,82,2,135,76,3,0,77,4,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,131,12,1,76,0,0,132,0,0,76,106,77,4,4,135,76,3,0,67,3,77,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,135,2,4,0,119,0,25,0,85,3,70,0,1,76,0,0,132,0,0,76,135,76,3,0,1,2,3,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,5,0,135,2,4,0,135,76,5,0,3,0,0,0,119,0,10,0,135,76,5,0,3,0,0,0,135,76,5,0,4,0,0,0,135,76,5,0,65,0,0,0,137,64,0,0,1,76,1,0,139,76,0,0,135,76,5,0,4,0,0,0,0,66,2,0,135,76,5,0,65,0,0,0,135,76,6,0,66,0,0,0,1,76,0,0,132,0,0,76,1,76,109,0,1,77,1,0,1,74,0,0,135,2,2,0,76,0,77,74,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,3,0,1,63,10,0,119,0,72,12,121,2,62,0,106,74,65,4,25,2,74,64,82,74,2,0,106,1,74,20,1,74,0,0,132,0,0,74,1,77,83,2,135,74,3,0,77,6,0,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,3,0,1,63,10,0,119,0,54,12,1,74,0,0,132,0,0,74,106,77,6,4,135,74,3,0,67,5,77,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,3,0,135,2,4,0,119,0,25,0,85,5,70,0,1,74,0,0,132,0,0,74,135,74,3,0,1,2,5,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,5,0,135,2,4,0,135,74,5,0,5,0,0,0,119,0,10,0,135,74,5,0,5,0,0,0,135,74,5,0,6,0,0,0,135,74,5,0,65,0,0,0,137,64,0,0,1,74,1,0,139,74,0,0,135,74,5,0,6,0,0,0,0,66,2,0,135,74,5,0,65,0,0,0,135,74,6,0,66,0,0,0,1,74,0,0,132,0,0,74,1,74,110,0,1,77,1,0,1,76,0,0,135,2,2,0,74,0,77,76,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,251,11,121,2,62,0,106,76,65,4,25,2,76,64,82,76,2,0,106,1,76,20,1,76,0,0,132,0,0,76,1,77,84,2,135,76,3,0,77,8,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,233,11,1,76,0,0,132,0,0,76,106,77,8,4,135,76,3,0,67,7,77,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,135,2,4,0,119,0,25,0,85,7,70,0,1,76,0,0,132,0,0,76,135,76,3,0,1,2,7,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,5,0,135,2,4,0,135,76,5,0,7,0,0,0,119,0,10,0,135,76,5,0,7,0,0,0,135,76,5,0,8,0,0,0,135,76,5,0,65,0,0,0,137,64,0,0,1,76,1,0,139,76,0,0,135,76,5,0,8,0,0,0,0,66,2,0,135,76,5,0,65,0,0,0,135,76,6,0,66,0,0,0,1,76,0,0,132,0,0,76,1,76,111,0,1,77,1,0,1,74,0,0,135,2,2,0,76,0,77,74,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,3,0,1,63,10,0,119,0,174,11,121,2,62,0,106,74,65,4,25,2,74,64,82,74,2,0,106,1,74,20,1,74,0,0,132,0,0,74,1,77,85,2,135,74,3,0,77,10,0,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,3,0,1,63,10,0,119,0,156,11,1,74,0,0,132,0,0,74,106,77,10,4,135,74,3,0,67,9,77,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,3,0,135,2,4,0,119,0,25,0,85,9,70,0,1,74,0,0,132,0,0,74,135,74,3,0,1,2,9,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,5,0,135,2,4,0,135,74,5,0,9,0,0,0,119,0,10,0,135,74,5,0,9,0,0,0,135,74,5,0,10,0,0,0,135,74,5,0,65,0,0,0,137,64,0,0,1,74,1,0,139,74,0,0,135,74,5,0,10,0,0,0,0,66,2,0,135,74,5,0,65,0,0,0,135,74,6,0,66,0,0,0,1,74,0,0,132,0,0,74,1,74,112,0,1,77,1,0,1,76,0,0,135,2,2,0,74,0,77,76,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,97,11,121,2,63,0,106,76,65,4,25,2,76,64,82,76,2,0,106,1,76,20,1,76,0,0,132,0,0,76,1,77,118,0,1,74,0,0,135,76,7,0,77,12,0,74,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,78,11,1,76,0,0,132,0,0,76,106,74,12,4,135,76,3,0,67,11,74,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,135,2,4,0,119,0,25,0,85,11,70,0,1,76,0,0,132,0,0,76,135,76,3,0,1,2,11,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,5,0,135,2,4,0,135,76,5,0,11,0,0,0,119,0,10,0,135,76,5,0,11,0,0,0,135,76,5,0,12,0,0,0,135,76,5,0,65,0,0,0,137,64,0,0,1,76,1,0,139,76,0,0,135,76,5,0,12,0,0,0,0,66,2,0,135,76,5,0,65,0,0,0,135,76,6,0,66,0,0,0,1,76,0,0,132,0,0,76,1,76,113,0,1,74,1,0,1,77,0,0,135,2,2,0,76,0,74,77,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,19,11,121,2,62,0,106,77,65,4,25,2,77,64,82,77,2,0,106,1,77,20,1,77,0,0,132,0,0,77,1,74,86,2,135,77,3,0,74,14,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,1,11,1,77,0,0,132,0,0,77,106,74,14,4,135,77,3,0,67,13,74,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,135,2,4,0,119,0,25,0,85,13,70,0,1,77,0,0,132,0,0,77,135,77,3,0,1,2,13,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,5,0,135,2,4,0,135,77,5,0,13,0,0,0,119,0,10,0,135,77,5,0,13,0,0,0,135,77,5,0,14,0,0,0,135,77,5,0,65,0,0,0,137,64,0,0,1,77,1,0,139,77,0,0,135,77,5,0,14,0,0,0,0,66,2,0,135,77,5,0,65,0,0,0,135,77,6,0,66,0,0,0,1,77,0,0,132,0,0,77,1,77,114,0,1,74,1,0,1,76,0,0,135,2,2,0,77,0,74,76,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,198,10,121,2,62,0,106,76,65,4,25,2,76,64,82,76,2,0,106,1,76,20,1,76,0,0,132,0,0,76,1,74,87,2,135,76,3,0,74,16,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,180,10,1,76,0,0,132,0,0,76,106,74,16,4,135,76,3,0,67,15,74,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,135,2,4,0,119,0,25,0,85,15,70,0,1,76,0,0,132,0,0,76,135,76,3,0,1,2,15,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,5,0,135,2,4,0,135,76,5,0,15,0,0,0,119,0,10,0,135,76,5,0,15,0,0,0,135,76,5,0,16,0,0,0,135,76,5,0,65,0,0,0,137,64,0,0,1,76,1,0,139,76,0,0,135,76,5,0,16,0,0,0,0,66,2,0,135,76,5,0,65,0,0,0,135,76,6,0,66,0,0,0,1,76,0,0,132,0,0,76,1,76,115,0,1,74,1,0,1,77,0,0,135,2,2,0,76,0,74,77,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,121,10,121,2,62,0,106,77,65,4,25,2,77,64,82,77,2,0,106,1,77,20,1,77,0,0,132,0,0,77,1,74,88,2,135,77,3,0,74,18,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,103,10,1,77,0,0,132,0,0,77,106,74,18,4,135,77,3,0,67,17,74,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,135,2,4,0,119,0,25,0,85,17,70,0,1,77,0,0,132,0,0,77,135,77,3,0,1,2,17,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,5,0,135,2,4,0,135,77,5,0,17,0,0,0,119,0,10,0,135,77,5,0,17,0,0,0,135,77,5,0,18,0,0,0,135,77,5,0,65,0,0,0,137,64,0,0,1,77,1,0,139,77,0,0,135,77,5,0,18,0,0,0,0,66,2,0,135,77,5,0,65,0,0,0,135,77,6,0,66,0,0,0,1,77,0,0,132,0,0,77,1,77,116,0,1,74,1,0,1,76,0,0,135,2,2,0,77,0,74,76,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,44,10,121,2,62,0,106,76,65,4,25,2,76,64,82,76,2,0,106,1,76,20,1,76,0,0,132,0,0,76,1,74,89,2,135,76,3,0,74,20,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,26,10,1,76,0,0,132,0,0,76,106,74,20,4,135,76,3,0,67,19,74,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,135,2,4,0,119,0,25,0,85,19,70,0,1,76,0,0,132,0,0,76,135,76,3,0,1,2,19,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,5,0,135,2,4,0,135,76,5,0,19,0,0,0,119,0,10,0,135,76,5,0,19,0,0,0,135,76,5,0,20,0,0,0,135,76,5,0,65,0,0,0,137,64,0,0,1,76,1,0,139,76,0,0,135,76,5,0,20,0,0,0,0,66,2,0,135,76,5,0,65,0,0,0,135,76,6,0,66,0,0,0,1,76,0,0,132,0,0,76,1,76,117,0,1,74,1,0,1,77,0,0,135,2,2,0,76,0,74,77,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,223,9,121,2,238,1,106,2,0,60,106,77,0,56,46,77,77,2,80,16,0,0,26,77,2,4,82,77,77,0,1,74,0,0,1,76,7,0,138,77,74,76,8,14,0,0,4,14,0,0,12,14,0,0,16,14,0,0,4,14,0,0,4,14,0,0,20,14,0,0,119,0,5,0,119,0,146,0,119,0,145,0,119,0,144,0,119,0,143,0,25,2,0,76,1,77,0,0,132,0,0,77,1,77,85,1,82,74,2,0,135,1,8,0,77,74,0,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,120,74,125,0,25,3,0,80,32,77,1,0,121,77,4,0,1,77,1,0,0,74,77,0,119,0,4,0,82,77,3,0,16,77,77,1,0,74,77,0,121,74,2,0,82,1,2,0,1,74,0,0,132,0,0,74,1,74,86,1,135,2,8,0,74,1,0,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,120,74,103,0,1,74,0,0,132,0,0,74,1,74,106,1,125,77,2,2,1,0,0,0,135,2,8,0,74,77,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,120,77,90,0,32,74,2,0,121,74,4,0,1,74,1,0,0,77,74,0,119,0,4,0,82,74,3,0,16,74,74,2,0,77,74,0,120,77,2,0,119,0,85,0,1,77,0,0,85,31,77,0,1,74,0,0,109,31,4,74,1,77,0,0,109,31,8,77,1,77,0,0,132,0,0,77,1,77,58,1,1,74,80,0,135,2,8,0,77,74,0,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,120,74,62,0,85,31,2,0,2,77,0,0,80,0,0,128,109,31,8,77,1,74,70,0,109,31,4,74,0,17,2,0,2,18,0,0,233,190,0,0,25,19,17,70,78,74,18,0,83,17,74,0,25,17,17,1,25,18,18,1,54,74,17,19,112,15,0,0,1,77,0,0,107,2,70,77,25,66,0,108,1,77,0,0,132,0,0,77,116,62,66,0,106,74,66,4,109,62,4,74,106,77,66,8,109,62,8,77,1,74,109,0,135,77,7,0,74,0,31,62,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,120,77,9,0,1,77,0,0,102,74,31,11,56,77,77,74,80,16,0,0,82,74,31,0,135,77,9,0,74,0,0,0,119,0,24,0,135,2,4,0,1,77,0,0,102,74,31,11,49,77,77,74,28,16,0,0,0,66,2,0,135,77,5,0,65,0,0,0,135,77,6,0,66,0,0,0,82,74,31,0,135,77,9,0,74,0,0,0,0,66,2,0,135,77,5,0,65,0,0,0,135,77,6,0,66,0,0,0,135,66,4,0,135,77,5,0,65,0,0,0,135,77,6,0,66,0,0,0,1,77,0,0,132,0,0,77,1,74,90,2,135,77,3,0,74,62,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,135,2,4,0,119,0,57,1,25,16,62,4,82,2,16,0,106,77,2,64,106,74,2,68,45,77,77,74,164,16,0,0,1,63,115,0,119,0,56,0,106,77,65,4,25,1,77,64,82,77,1,0,106,3,77,20,1,77,0,0,132,0,0,77,135,77,3,0,67,41,2,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,135,2,4,0,119,0,40,0,1,77,40,68,85,41,77,0,1,77,0,0,132,0,0,77,106,74,41,4,135,77,3,0,67,38,74,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,135,2,4,0,119,0,23,0,85,38,70,0,1,77,0,0,132,0,0,77,135,77,3,0,3,1,38,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,5,0,135,2,4,0,135,77,5,0,38,0,0,0,119,0,8,0,135,77,5,0,38,0,0,0,135,77,5,0,41,0,0,0,82,2,16,0,1,63,115,0,119,0,3,0,135,77,5,0,41,0,0,0,32,77,63,115,121,77,246,0,106,77,2,80,106,74,2,76,4,66,77,74,28,6,66,48,121,66,234,0,25,7,65,4,25,3,0,108,25,8,59,36,25,9,8,11,25,10,59,24,25,11,10,11,25,12,59,12,25,13,12,11,25,14,59,11,1,1,0,0,82,74,7,0,25,4,74,64,82,74,4,0,106,5,74,20,1,74,0,0,132,0,0,74,1,74,58,1,1,77,112,0,135,15,8,0,74,77,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,118,0,119,0,137,0,0,17,58,0,0,18,3,0,25,19,17,40,116,17,18,0,25,17,17,4,25,18,18,4,54,77,17,19,24,18,0,0,1,77,0,0,132,0,0,77,1,74,210,1,82,76,16,0,106,76,76,76,27,75,1,48,3,76,76,75,135,77,3,0,74,59,76,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,135,0,119,0,112,0,0,17,61,0,0,18,58,0,25,19,17,40,116,17,18,0,25,17,17,4,25,18,18,4,54,77,17,19,124,18,0,0,1,77,0,0,132,0,0,77,1,76,170,1,135,77,1,0,76,15,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,4,0,1,2,1,0,1,63,136,0,119,0,90,0,25,17,15,12,0,18,61,0,25,19,17,40,116,17,18,0,25,17,17,4,25,18,18,4,54,77,17,19,212,18,0,0,25,2,15,52,1,77,0,0,85,2,77,0,1,76,0,0,109,15,56,76,1,77,0,0,107,15,60,77,1,77,120,35,85,15,77,0,1,77,0,0,132,0,0,77,1,76,210,1,25,74,15,64,135,77,3,0,76,74,59,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,123,0,119,0,59,0,1,77,11,0,85,2,77,0,1,77,0,0,132,0,0,77,135,77,3,0,67,57,15,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,4,0,1,2,0,0,1,63,136,0,119,0,44,0,85,57,70,0,1,77,0,0,132,0,0,77,135,77,3,0,5,4,57,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,138,0,119,0,31,0,135,77,5,0,57,0,0,0,78,77,9,0,34,77,77,0,121,77,4,0,82,74,8,0,135,77,9,0,74,0,0,0,78,77,11,0,34,77,77,0,121,77,4,0,82,74,10,0,135,77,9,0,74,0,0,0,78,77,13,0,34,77,77,0,121,77,4,0,82,74,12,0,135,77,9,0,74,0,0,0,78,77,14,0,34,77,77,0,121,77,4,0,82,74,59,0,135,77,9,0,74,0,0,0,25,1,1,1,57,77,6,1,64,21,0,0,119,0,103,255,32,77,63,118,121,77,3,0,135,2,4,0,119,0,73,0,32,77,63,123,121,77,5,0,135,2,4,0,1,1,1,0,1,63,137,0,119,0,22,0,1,77,135,0,45,77,63,77,104,20,0,0,135,2,4,0,119,0,17,0,1,77,136,0,45,77,63,77,136,20,0,0,135,66,4,0,0,1,2,0,0,2,66,0,1,63,137,0,119,0,9,0,1,77,138,0,45,77,63,77,168,20,0,0,135,2,4,0,135,77,5,0,57,0,0,0,1,1,0,0,1,63,139,0,1,77,137,0,45,77,63,77,184,20,0,0,1,63,139,0,1,77,139,0,45,77,63,77,52,21,0,0,78,77,9,0,34,77,77,0,121,77,4,0,82,74,8,0,135,77,9,0,74,0,0,0,78,77,11,0,34,77,77,0,121,77,4,0,82,74,10,0,135,77,9,0,74,0,0,0,78,77,13,0,34,77,77,0,121,77,4,0,82,74,12,0,135,77,9,0,74,0,0,0,78,77,14,0,34,77,77,0,121,77,6,0,82,74,59,0,135,77,9,0,74,0,0,0,121,1,14,0,119,0,3,0,121,1,12,0,119,0,1,0,135,77,9,0,15,0,0,0,119,0,8,0,135,77,5,0,62,0,0,0,135,77,5,0,65,0,0,0,137,64,0,0,1,77,1,0,139,77,0,0,135,77,5,0,62,0,0,0,0,66,2,0,135,77,5,0,65,0,0,0,135,77,6,0,66,0,0,0,1,77,0,0,132,0,0,77,1,77,118,0,1,74,1,0,1,76,0,0,135,2,2,0,77,0,74,76,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,226,7,121,2,111,2,1,76,0,0,132,0,0,76,1,74,119,0,106,77,0,76,135,76,7,0,74,61,0,77,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,172,0,119,0,88,2,106,3,61,8,121,3,71,0,1,76,0,0,132,0,0,76,1,76,86,1,135,2,8,0,76,3,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,172,0,119,0,73,2,125,66,2,2,3,0,0,0,78,77,66,0,32,77,77,59,121,77,4,0,25,77,66,1,0,76,77,0,119,0,3,0,1,77,0,0,0,76,77,0,0,66,76,0,25,2,0,80,32,77,66,0,121,77,4,0,1,77,1,0,0,76,77,0,119,0,4,0,82,77,2,0,16,77,77,66,0,76,77,0,120,76,3,0,85,61,3,0,119,0,35,0,1,76,0,0,132,0,0,76,1,76,86,1,135,1,8,0,76,3,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,172,0,119,0,37,2,125,66,1,1,3,0,0,0,78,77,66,0,32,77,77,125,121,77,4,0,25,77,66,1,0,76,77,0,119,0,3,0,1,77,0,0,0,76,77,0,0,66,76,0,32,77,66,0,121,77,4,0,1,77,1,0,0,76,77,0,119,0,4,0,82,77,2,0,16,77,77,66,0,76,77,0,120,76,2,0,85,61,3,0,82,3,61,0,120,3,167,0,1,76,0,0,85,62,76,0,1,77,0,0,109,62,4,77,1,76,0,0,109,62,8,76,1,76,0,0,132,0,0,76,1,76,58,1,1,77,16,0,135,2,8,0,76,77,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,135,2,4,0,119,0,250,1,85,62,2,0,2,76,0,0,16,0,0,128,109,62,8,76,1,77,11,0,109,62,4,77,0,17,2,0,2,18,0,0,239,172,0,0,25,19,17,11,78,77,18,0,83,17,77,0,25,17,17,1,25,18,18,1,54,77,17,19,144,23,0,0,1,76,0,0,107,2,11,76,1,77,0,0,109,60,8,77,25,1,60,11,1,77,7,0,83,1,77,0,2,77,0,0,251,172,0,0,78,77,77,0,83,60,77,0,2,76,0,0,252,172,0,0,78,76,76,0,107,60,1,76,2,77,0,0,253,172,0,0,78,77,77,0,107,60,2,77,2,76,0,0,254,172,0,0,78,76,76,0,107,60,3,76,2,77,0,0,255,172,0,0,78,77,77,0,107,60,4,77,2,76,0,0,0,173,0,0,78,76,76,0,107,60,5,76,2,77,0,0,1,173,0,0,78,77,77,0,107,60,6,77,1,76,0,0,107,60,7,76,1,76,0,0,85,56,76,0,1,77,0,0,109,56,4,77,1,76,0,0,109,56,8,76,1,76,0,0,132,0,0,76,1,76,58,1,1,77,32,0,135,2,8,0,76,77,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,135,2,4,0,119,0,60,0,85,56,2,0,2,76,0,0,32,0,0,128,109,56,8,76,1,77,25,0,109,56,4,77,0,17,2,0,2,18,0,0,3,173,0,0,25,19,17,25,78,77,18,0,83,17,77,0,25,17,17,1,25,18,18,1,54,77,17,19,180,24,0,0,1,76,0,0,107,2,25,76,1,76,0,0,132,0,0,76,1,77,10,0,1,74,1,0,135,76,10,0,77,0,62,60,56,74,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,10,0,135,2,4,0,1,76,0,0,102,74,56,11,56,76,76,74,120,25,0,0,82,74,56,0,135,76,9,0,74,0,0,0,119,0,20,0,102,76,56,11,34,76,76,0,121,76,4,0,82,74,56,0,135,76,9,0,74,0,0,0,78,76,1,0,34,76,76,0,121,76,4,0,82,74,60,0,135,76,9,0,74,0,0,0,102,76,62,11,34,76,76,0,121,76,19,0,82,74,62,0,135,76,9,0,74,0,0,0,119,0,15,0,78,76,1,0,34,76,76,0,121,76,4,0,82,74,60,0,135,76,9,0,74,0,0,0,1,76,0,0,102,74,62,11,56,76,76,74,76,31,0,0,82,74,62,0,135,76,9,0,74,0,0,0,119,0,104,1,1,76,0,0,132,0,0,76,1,74,0,0,135,76,3,0,67,56,74,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,135,2,4,0,119,0,91,1,85,56,71,0,102,76,61,13,120,76,41,0,1,76,0,0,132,0,0,76,1,74,107,0,1,77,1,0,135,76,7,0,74,62,0,77,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,135,2,4,0,119,0,177,0,25,2,56,4,82,76,2,0,121,76,16,0,1,76,0,0,132,0,0,76,135,76,1,0,68,56,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,120,76,2,0,119,0,5,0,135,2,4,0,135,76,5,0,62,0,0,0,119,0,159,0,25,63,62,4,116,2,63,0,1,76,0,0,85,63,76,0,135,76,5,0,62,0,0,0,1,63,209,0,119,0,151,0,1,76,0,0,132,0,0,76,1,76,58,1,1,77,112,0,135,2,8,0,76,77,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,203,0,119,0,133,0,1,77,0,0,132,0,0,77,0,17,62,0,25,18,0,108,25,19,17,40,116,17,18,0,25,17,17,4,25,18,18,4,54,77,17,19,220,26,0,0,1,76,81,0,1,74,0,0,135,77,7,0,76,2,62,74,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,6,0,135,66,4,0,135,77,9,0,2,0,0,0,0,2,66,0,119,0,108,0,1,77,0,0,132,0,0,77,135,77,3,0,67,60,2,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,203,0,119,0,96,0,85,60,71,0,25,2,56,4,82,77,2,0,121,77,16,0,1,77,0,0,132,0,0,77,135,77,1,0,68,56,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,120,77,2,0,119,0,5,0,135,2,4,0,135,77,5,0,60,0,0,0,119,0,77,0,25,66,60,4,116,2,66,0,1,77,0,0,85,66,77,0,135,77,5,0,60,0,0,0,82,2,2,0,1,77,0,0,132,0,0,77,1,74,28,0,1,76,1,0,135,77,11,0,74,45,0,3,76,0,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,207,0,119,0,59,0,25,1,2,92,25,2,2,96,82,77,2,0,120,77,3,0,1,63,200,0,119,0,12,0,1,77,0,0,132,0,0,77,135,77,1,0,68,1,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,120,77,2,0,1,63,200,0,45,77,63,72,200,28,0,0,25,77,45,4,116,2,77,0,1,77,0,0,132,0,0,77,135,77,1,0,69,1,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,120,77,20,0,1,77,0,0,132,0,0,77,82,76,2,0,135,77,3,0,67,44,76,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,120,77,9,0,1,77,112,66,85,44,77,0,135,77,5,0,44,0,0,0,135,77,5,0,45,0,0,0,1,63,209,0,119,0,9,0,135,2,4,0,135,77,5,0,45,0,0,0,119,0,5,0,1,77,203,0,45,77,63,77,232,28,0,0,135,2,4,0,1,77,209,0,45,77,63,77,52,31,0,0,106,77,65,4,25,3,77,64,82,77,3,0,106,4,77,20,1,77,0,0,132,0,0,77,1,77,58,1,1,76,72,0,135,5,8,0,77,76,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,207,0,119,0,127,0,0,17,51,0,25,18,0,108,25,19,17,40,116,17,18,0,25,17,17,4,25,18,18,4,54,76,17,19,72,29,0,0,1,76,0,0,132,0,0,76,106,77,56,4,135,76,3,0,67,53,77,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,135,2,4,0,119,0,104,0,85,53,71,0,0,17,60,0,0,18,51,0,25,19,17,40,116,17,18,0,25,17,17,4,25,18,18,4,54,76,17,19,160,29,0,0,1,76,0,0,132,0,0,76,1,77,170,1,135,76,1,0,77,5,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,1,1,0,119,0,77,0,25,17,5,12,0,18,60,0,25,19,17,40,116,17,18,0,25,17,17,4,25,18,18,4,54,76,17,19,244,29,0,0,25,2,5,52,1,76,0,0,85,2,76,0,1,77,0,0,109,5,56,77,1,76,0,0,107,5,60,76,1,76,56,39,85,5,76,0,25,1,5,64,1,76,0,0,132,0,0,76,106,77,53,4,135,76,3,0,67,1,77,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,5,0,135,2,4,0,135,76,5,0,53,0,0,0,119,0,49,0,85,1,71,0,1,76,16,0,85,2,76,0,1,76,0,0,132,0,0,76,135,76,3,0,67,52,5,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,1,0,0,119,0,29,0,85,52,70,0,1,76,0,0,132,0,0,76,135,76,3,0,4,3,52,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,7,0,135,2,4,0,135,76,5,0,52,0,0,0,135,76,5,0,53,0,0,0,119,0,19,0,135,76,5,0,52,0,0,0,135,76,5,0,53,0,0,0,135,76,5,0,56,0,0,0,135,76,5,0,65,0,0,0,137,64,0,0,1,76,1,0,139,76,0,0,135,2,4,0,135,76,5,0,53,0,0,0,120,1,2,0,119,0,3,0,135,76,9,0,5,0,0,0,1,76,207,0,45,76,63,76,68,31,0,0,135,2,4,0,135,76,5,0,56,0,0,0,1,76,172,0,45,76,63,76,92,31,0,0,135,2,4,0,0,66,2,0,135,76,5,0,65,0,0,0,135,76,6,0,66,0,0,0,25,6,0,76,1,76,0,0,132,0,0,76,1,77,119,0,82,74,6,0,135,76,7,0,77,62,0,74,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,6,0,135,66,4,0,135,76,5,0,65,0,0,0,135,76,6,0,66,0,0,0,25,4,62,8,82,3,4,0,106,4,4,4,106,76,62,4,120,76,75,0,106,76,65,4,25,2,76,64,82,76,2,0,106,1,76,20,116,22,62,0,1,74,0,0,109,22,4,74,25,66,22,8,85,66,3,0,109,66,4,4,1,74,0,0,132,0,0,74,116,62,22,0,106,76,22,4,109,62,4,76,106,74,22,8,109,62,8,74,106,76,22,12,109,62,12,76,1,74,120,0,135,76,7,0,74,23,0,62,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,62,5,1,76,0,0,132,0,0,76,106,74,23,4,135,76,3,0,67,21,74,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,135,2,4,0,119,0,25,0,85,21,70,0,1,76,0,0,132,0,0,76,135,76,3,0,1,2,21,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,5,0,135,2,4,0,135,76,5,0,21,0,0,0,119,0,10,0,135,76,5,0,21,0,0,0,135,76,5,0,23,0,0,0,135,76,5,0,65,0,0,0,137,64,0,0,1,76,1,0,139,76,0,0,135,76,5,0,23,0,0,0,0,66,2,0,135,76,5,0,65,0,0,0,135,76,6,0,66,0,0,0,1,76,0,0,132,0,0,76,1,76,119,0,1,74,1,0,1,77,0,0,135,2,2,0,76,0,74,77,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,3,5,121,2,62,0,106,77,65,4,25,2,77,64,82,77,2,0,106,1,77,20,1,77,0,0,132,0,0,77,1,74,91,2,135,77,3,0,74,25,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,241,4,1,77,0,0,132,0,0,77,106,74,25,4,135,77,3,0,67,24,74,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,135,2,4,0,119,0,25,0,85,24,70,0,1,77,0,0,132,0,0,77,135,77,3,0,1,2,24,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,5,0,135,2,4,0,135,77,5,0,24,0,0,0,119,0,10,0,135,77,5,0,24,0,0,0,135,77,5,0,25,0,0,0,135,77,5,0,65,0,0,0,137,64,0,0,1,77,1,0,139,77,0,0,135,77,5,0,25,0,0,0,0,66,2,0,135,77,5,0,65,0,0,0,135,77,6,0,66,0,0,0,1,77,0,0,132,0,0,77,1,77,120,0,1,74,1,0,1,76,0,0,135,2,2,0,77,0,74,76,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,182,4,121,2,62,0,106,76,65,4,25,2,76,64,82,76,2,0,106,1,76,20,1,76,0,0,132,0,0,76,1,74,92,2,135,76,3,0,74,27,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,164,4,1,76,0,0,132,0,0,76,106,74,27,4,135,76,3,0,67,26,74,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,135,2,4,0,119,0,25,0,85,26,70,0,1,76,0,0,132,0,0,76,135,76,3,0,1,2,26,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,5,0,135,2,4,0,135,76,5,0,26,0,0,0,119,0,10,0,135,76,5,0,26,0,0,0,135,76,5,0,27,0,0,0,135,76,5,0,65,0,0,0,137,64,0,0,1,76,1,0,139,76,0,0,135,76,5,0,27,0,0,0,0,66,2,0,135,76,5,0,65,0,0,0,135,76,6,0,66,0,0,0,1,76,0,0,132,0,0,76,1,76,121,0,1,74,1,0,1,77,0,0,135,2,2,0,76,0,74,77,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,105,4,121,2,62,0,106,77,65,4,25,2,77,64,82,77,2,0,106,1,77,20,1,77,0,0,132,0,0,77,1,74,93,2,135,77,3,0,74,29,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,87,4,1,77,0,0,132,0,0,77,106,74,29,4,135,77,3,0,67,28,74,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,135,2,4,0,119,0,25,0,85,28,70,0,1,77,0,0,132,0,0,77,135,77,3,0,1,2,28,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,5,0,135,2,4,0,135,77,5,0,28,0,0,0,119,0,10,0,135,77,5,0,28,0,0,0,135,77,5,0,29,0,0,0,135,77,5,0,65,0,0,0,137,64,0,0,1,77,1,0,139,77,0,0,135,77,5,0,29,0,0,0,0,66,2,0,135,77,5,0,65,0,0,0,135,77,6,0,66,0,0,0,1,77,0,0,132,0,0,77,1,77,122,0,1,74,1,0,1,76,0,0,135,2,2,0,77,0,74,76,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,28,4,121,2,118,0,106,76,65,4,25,2,76,64,82,76,2,0,106,1,76,20,1,76,0,0,132,0,0,76,1,76,58,1,1,74,68,0,135,3,8,0,76,74,0,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,3,0,1,63,10,0,119,0,9,4,0,17,62,0,25,18,0,108,25,19,17,40,116,17,18,0,25,17,17,4,25,18,18,4,54,74,17,19,36,37,0,0,1,74,0,0,132,0,0,74,1,76,170,1,135,74,1,0,76,3,0,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,5,0,135,2,4,0,135,74,9,0,3,0,0,0,119,0,242,3,25,17,3,12,0,18,62,0,25,19,17,40,116,17,18,0,25,17,17,4,25,18,18,4,54,74,17,19,128,37,0,0,1,76,0,0,109,3,56,76,1,74,0,0,107,3,60,74,1,74,120,40,85,3,74,0,1,76,0,0,109,3,64,76,1,74,7,0,109,3,52,74,1,74,0,0,132,0,0,74,135,74,3,0,67,39,3,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,3,0,1,63,10,0,119,0,212,3,1,74,212,69,85,39,74,0,1,74,0,0,132,0,0,74,106,76,39,4,135,74,3,0,67,36,76,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,3,0,135,2,4,0,119,0,25,0,85,36,70,0,1,74,0,0,132,0,0,74,135,74,3,0,1,2,36,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,5,0,135,2,4,0,135,74,5,0,36,0,0,0,119,0,10,0,135,74,5,0,36,0,0,0,135,74,5,0,39,0,0,0,135,74,5,0,65,0,0,0,137,64,0,0,1,74,1,0,139,74,0,0,135,74,5,0,39,0,0,0,0,66,2,0,135,74,5,0,65,0,0,0,135,74,6,0,66,0,0,0,1,74,0,0,132,0,0,74,1,74,123,0,1,76,1,0,1,77,0,0,135,2,2,0,74,0,76,77,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,151,3,121,2,62,0,106,77,65,4,25,2,77,64,82,77,2,0,106,1,77,20,1,77,0,0,132,0,0,77,1,76,94,2,135,77,3,0,76,32,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,133,3,1,77,0,0,132,0,0,77,106,76,32,4,135,77,3,0,67,30,76,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,135,2,4,0,119,0,25,0,85,30,70,0,1,77,0,0,132,0,0,77,135,77,3,0,1,2,30,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,5,0,135,2,4,0,135,77,5,0,30,0,0,0,119,0,10,0,135,77,5,0,30,0,0,0,135,77,5,0,32,0,0,0,135,77,5,0,65,0,0,0,137,64,0,0,1,77,1,0,139,77,0,0,135,77,5,0,32,0,0,0,0,66,2,0,135,77,5,0,65,0,0,0,135,77,6,0,66,0,0,0,1,77,0,0,132,0,0,77,1,77,124,0,1,76,1,0,1,74,0,0,135,2,2,0,77,0,76,74,130,74,0,0,0,66,74,0,1,74,0,0],eb+0);HEAPU8.set([132,0,0,74,38,74,66,1,121,74,3,0,1,63,10,0,119,0,74,3,121,2,63,0,106,74,65,4,25,2,74,64,82,74,2,0,106,1,74,20,1,74,0,0,132,0,0,74,1,76,121,0,1,77,0,0,135,74,7,0,76,34,0,77,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,3,0,1,63,10,0,119,0,55,3,1,74,0,0,132,0,0,74,106,77,34,4,135,74,3,0,67,33,77,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,3,0,135,2,4,0,119,0,25,0,85,33,70,0,1,74,0,0,132,0,0,74,135,74,3,0,1,2,33,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,5,0,135,2,4,0,135,74,5,0,33,0,0,0,119,0,10,0,135,74,5,0,33,0,0,0,135,74,5,0,34,0,0,0,135,74,5,0,65,0,0,0,137,64,0,0,1,74,1,0,139,74,0,0,135,74,5,0,34,0,0,0,0,66,2,0,135,74,5,0,65,0,0,0,135,74,6,0,66,0,0,0,1,74,0,0,132,0,0,74,1,74,125,0,1,77,1,0,1,76,0,0,135,2,2,0,74,0,77,76,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,252,2,121,2,63,0,106,76,65,4,25,2,76,64,82,76,2,0,106,1,76,20,1,76,0,0,132,0,0,76,1,77,121,0,1,74,1,0,135,76,7,0,77,37,0,74,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,233,2,1,76,0,0,132,0,0,76,106,74,37,4,135,76,3,0,67,35,74,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,135,2,4,0,119,0,25,0,85,35,70,0,1,76,0,0,132,0,0,76,135,76,3,0,1,2,35,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,5,0,135,2,4,0,135,76,5,0,35,0,0,0,119,0,10,0,135,76,5,0,35,0,0,0,135,76,5,0,37,0,0,0,135,76,5,0,65,0,0,0,137,64,0,0,1,76,1,0,139,76,0,0,135,76,5,0,37,0,0,0,0,66,2,0,135,76,5,0,65,0,0,0,135,76,6,0,66,0,0,0,1,76,0,0,132,0,0,76,1,76,126,0,1,74,1,0,1,77,0,0,135,2,2,0,76,0,74,77,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,174,2,121,2,21,0,1,77,0,0,132,0,0,77,1,74,127,0,1,76,1,0,1,75,0,0,135,77,2,0,74,0,76,75,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,158,2,135,77,5,0,65,0,0,0,137,64,0,0,1,77,1,0,139,77,0,0,1,77,0,0,132,0,0,77,1,77,128,0,1,75,1,0,1,76,0,0,135,2,2,0,77,0,75,76,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,138,2,121,2,62,0,106,76,65,4,25,2,76,64,82,76,2,0,106,1,76,20,1,76,0,0,132,0,0,76,1,75,95,2,135,76,3,0,75,42,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,120,2,1,76,0,0,132,0,0,76,106,75,42,4,135,76,3,0,67,40,75,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,135,2,4,0,119,0,25,0,85,40,70,0,1,76,0,0,132,0,0,76,135,76,3,0,1,2,40,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,5,0,135,2,4,0,135,76,5,0,40,0,0,0,119,0,10,0,135,76,5,0,40,0,0,0,135,76,5,0,42,0,0,0,135,76,5,0,65,0,0,0,137,64,0,0,1,76,1,0,139,76,0,0,135,76,5,0,42,0,0,0,0,66,2,0,135,76,5,0,65,0,0,0,135,76,6,0,66,0,0,0,1,76,0,0,132,0,0,76,1,76,129,0,1,75,1,0,1,77,0,0,135,2,2,0,76,0,75,77,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,61,2,121,2,62,0,106,77,65,4,25,2,77,64,82,77,2,0,106,1,77,20,1,77,0,0,132,0,0,77,1,75,96,2,135,77,3,0,75,46,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,10,0,119,0,43,2,1,77,0,0,132,0,0,77,106,75,46,4,135,77,3,0,67,43,75,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,135,2,4,0,119,0,25,0,85,43,70,0,1,77,0,0,132,0,0,77,135,77,3,0,1,2,43,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,5,0,135,2,4,0,135,77,5,0,43,0,0,0,119,0,10,0,135,77,5,0,43,0,0,0,135,77,5,0,46,0,0,0,135,77,5,0,65,0,0,0,137,64,0,0,1,77,1,0,139,77,0,0,135,77,5,0,46,0,0,0,0,66,2,0,135,77,5,0,65,0,0,0,135,77,6,0,66,0,0,0,1,77,0,0,132,0,0,77,1,77,130,0,1,75,1,0,1,76,0,0,135,2,2,0,77,0,75,76,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,240,1,121,2,62,0,106,76,65,4,25,2,76,64,82,76,2,0,106,1,76,20,1,76,0,0,132,0,0,76,1,75,97,2,135,76,3,0,75,48,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,222,1,1,76,0,0,132,0,0,76,106,75,48,4,135,76,3,0,67,47,75,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,135,2,4,0,119,0,25,0,85,47,70,0,1,76,0,0,132,0,0,76,135,76,3,0,1,2,47,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,5,0,135,2,4,0,135,76,5,0,47,0,0,0,119,0,10,0,135,76,5,0,47,0,0,0,135,76,5,0,48,0,0,0,135,76,5,0,65,0,0,0,137,64,0,0,1,76,1,0,139,76,0,0,135,76,5,0,48,0,0,0,0,66,2,0,135,76,5,0,65,0,0,0,135,76,6,0,66,0,0,0,121,1,199,0,1,76,0,0,132,0,0,76,1,75,64,0,1,77,1,0,1,74,0,0,135,76,2,0,75,0,77,74,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,1,63,10,0,119,0,162,1,106,76,0,80,82,74,6,0,50,76,76,74,216,46,0,0,135,76,5,0,65,0,0,0,137,64,0,0,1,76,1,0,139,76,0,0,1,76,0,0,85,62,76,0,1,74,0,0,109,62,4,74,1,76,0,0,109,62,8,76,1,76,0,0,132,0,0,76,1,76,58,1,1,74,16,0,135,2,8,0,76,74,0,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,3,0,135,2,4,0,119,0,150,0,85,62,2,0,2,76,0,0,16,0,0,128,109,62,8,76,1,74,11,0,109,62,4,74,0,17,2,0,2,18,0,0,239,172,0,0,25,19,17,11,78,74,18,0,83,17,74,0,25,17,17,1,25,18,18,1,54,74,17,19,80,47,0,0,1,76,0,0,107,2,11,76,1,74,0,0,109,60,8,74,25,1,60,11,1,74,7,0,83,1,74,0,2,74,0,0,251,172,0,0,78,74,74,0,83,60,74,0,2,76,0,0,252,172,0,0,78,76,76,0,107,60,1,76,2,74,0,0,253,172,0,0,78,74,74,0,107,60,2,74,2,76,0,0,254,172,0,0,78,76,76,0,107,60,3,76,2,74,0,0,255,172,0,0,78,74,74,0,107,60,4,74,2,76,0,0,0,173,0,0,78,76,76,0,107,60,5,76,2,74,0,0,1,173,0,0,78,74,74,0,107,60,6,74,1,76,0,0,107,60,7,76,1,76,0,0,85,61,76,0,1,74,0,0,109,61,4,74,1,76,0,0,109,61,8,76,1,76,0,0,132,0,0,76,1,76,58,1,1,74,48,0,135,2,8,0,76,74,0,0,130,74,0,0,0,66,74,0,1,74,0,0,132,0,0,74,38,74,66,1,121,74,3,0,135,2,4,0,119,0,64,0,85,61,2,0,2,76,0,0,48,0,0,128,109,61,8,76,1,74,38,0,109,61,4,74,0,17,2,0,2,18,0,0,106,177,0,0,25,19,17,38,78,74,18,0,83,17,74,0,25,17,17,1,25,18,18,1,54,74,17,19,116,48,0,0,1,76,0,0,107,2,38,76,1,76,0,0,132,0,0,76,1,74,10,0,1,77,1,0,135,76,10,0,74,0,62,60,61,77,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,10,0,135,2,4,0,1,76,0,0,102,77,61,11,56,76,76,77,72,49,0,0,82,77,61,0,135,76,9,0,77,0,0,0,119,0,24,0,102,76,61,11,34,76,76,0,121,76,4,0,82,77,61,0,135,76,9,0,77,0,0,0,78,76,1,0,34,76,76,0,121,76,4,0,82,77,60,0,135,76,9,0,77,0,0,0,102,76,62,11,34,76,76,0,121,76,4,0,82,77,62,0,135,76,9,0,77,0,0,0,135,76,5,0,65,0,0,0,137,64,0,0,1,76,1,0,139,76,0,0,78,76,1,0,34,76,76,0,121,76,4,0,82,77,60,0,135,76,9,0,77,0,0,0,1,76,0,0,102,77,62,11,56,76,76,77,124,49,0,0,82,77,62,0,135,76,9,0,77,0,0,0,0,66,2,0,135,76,5,0,65,0,0,0,135,76,6,0,66,0,0,0,1,76,0,0,132,0,0,76,1,77,98,2,135,76,3,0,77,62,0,0,130,76,0,0,0,66,76,0,1,76,0,0,132,0,0,76,38,76,66,1,121,76,3,0,135,2,4,0,119,0,217,0,25,4,62,4,82,66,4,0,1,76,148,0,3,5,0,76,82,77,5,0,109,66,56,77,106,77,65,4,25,2,77,64,82,77,2,0,106,1,77,20,1,77,0,0,132,0,0,77,135,77,3,0,67,50,66,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,105,1,119,0,189,0,1,77,228,69,85,50,77,0,1,77,0,0,132,0,0,77,106,76,50,4,135,77,3,0,67,49,76,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,135,2,4,0,119,0,172,0,85,49,70,0,1,77,0,0,132,0,0,77,135,77,3,0,1,2,49,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,5,0,135,2,4,0,135,77,5,0,49,0,0,0,119,0,157,0,135,77,5,0,49,0,0,0,135,77,5,0,50,0,0,0,82,2,6,0,1,77,0,0,132,0,0,77,1,77,86,1,135,1,8,0,77,2,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,105,1,119,0,141,0,125,66,1,1,2,0,0,0,78,76,66,0,32,76,76,123,121,76,4,0,25,76,66,1,0,77,76,0,119,0,3,0,1,76,0,0,0,77,76,0,0,66,77,0,32,76,66,0,121,76,4,0,1,76,1,0,0,77,76,0,119,0,4,0,106,76,0,80,16,76,76,66,0,77,76,0,120,77,112,0,82,2,4,0,102,77,2,89,121,77,4,0,82,77,5,0,25,77,77,1,85,5,77,0,1,77,5,0,85,60,77,0,25,3,0,60,82,1,3,0,106,77,0,64,48,77,1,77,116,51,0,0,1,77,5,0,85,1,77,0,25,77,1,4,85,3,77,0,119,0,17,0,1,77,0,0,132,0,0,77,1,76,53,2,25,74,0,56,135,77,3,0,76,74,60,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,135,2,4,0,119,0,89,0,82,2,4,0,119,0,1,0,1,77,0,0,132,0,0,77,1,74,122,0,1,76,0,0,135,77,7,0,74,55,0,76,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,121,77,3,0,1,63,105,1,119,0,73,0,25,1,2,64,25,2,2,68,82,77,2,0,120,77,3,0,1,63,116,1,119,0,12,0,1,77,0,0,132,0,0,77,135,77,1,0,68,1,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,120,77,2,0,1,63,116,1,45,77,63,73,216,52,0,0,25,77,55,4,116,2,77,0,1,77,0,0,132,0,0,77,135,77,1,0,69,1,0,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,120,77,29,0,1,77,0,0,132,0,0,77,82,76,2,0,135,77,3,0,67,54,76,0,130,77,0,0,0,66,77,0,1,77,0,0,132,0,0,77,38,77,66,1,120,77,18,0,1,77,56,32,85,54,77,0,135,77,5,0,54,0,0,0,135,77,5,0,55,0,0,0,82,77,3,0,26,77,77,4,85,3,77,0,82,77,4,0,102,77,77,89,120,77,2,0,119,0,9,0,82,77,5,0,26,77,77,1,85,5,77,0,119,0,5,0,135,2,4,0,135,77,5,0,55,0,0,0,119,0,10,0,135,77,5,0,62,0,0,0,135,77,5,0,65,0,0,0,137,64,0,0,1,77,1,0,139,77,0,0,135,77,5,0,50,0,0,0,1,77,105,1,45,77,63,77,28,53,0,0,135,2,4,0,135,77,5,0,62,0,0,0,0,66,2,0,135,77,5,0,65,0,0,0,135,77,6,0,66,0,0,0,32,77,63,10,121,77,2,0,135,2,4,0,0,66,2,0,135,77,5,0,65,0,0,0,135,77,6,0,66,0,0,0,135,66,4,0,135,77,5,0,65,0,0,0,135,77,6,0,66,0,0,0,1,77,0,0,139,77,0,0,140,2,107,0,0,0,0,0,2,92,0,0,200,1,0,0,2,93,0,0,58,1,0,0,2,94,0,0,161,0,0,0,2,95,0,0,216,33,0,0,2,96,0,0,112,44,0,0,2,97,0,0,160,0,0,0,2,98,0,0,159,0,0,0,2,99,0,0,158,0,0,0,2,100,0,0,162,0,0,0,2,101,0,0,37,1,0,0,136,102,0,0,0,86,102,0,136,102,0,0,1,103,128,2,3,102,102,103,137,102,0,0,1,102,80,2,3,87,86,102,1,102,4,2,3,89,86,102,1,102,248,1,3,88,86,102,1,102,224,1,3,82,86,102,1,102,168,1,3,78,86,102,25,50,86,80,25,51,86,40,0,91,86,0,1,102,40,2,3,54,86,102,1,102,24,2,3,81,86,102,1,102,240,1,3,77,86,102,1,102,216,1,3,57,86,102,1,102,208,1,3,58,86,102,1,102,128,1,3,47,86,102,1,102,120,1,3,68,86,102,1,102,104,1,3,69,86,102,1,102,96,1,3,59,86,102,1,102,56,1,3,48,86,102,1,102,48,1,3,70,86,102,1,102,40,1,3,71,86,102,1,102,24,1,3,72,86,102,1,102,16,1,3,60,86,102,1,102,232,0,3,49,86,102,1,102,224,0,3,73,86,102,1,102,208,0,3,74,86,102,1,102,196,0,3,64,86,102,1,102,184,0,3,65,86,102,1,102,172,0,3,66,86,102,3,67,86,97,1,102,152,0,3,79,86,102,1,102,144,0,3,80,86,102,1,102,136,0,3,84,86,102,25,85,86,120,1,102,96,0,135,8,12,0,102,0,0,0,25,83,1,108,0,6,91,0,0,7,83,0,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,102,6,9,244,54,0,0,1,102,0,0,132,0,0,102,1,103,170,1,135,102,1,0,103,8,0,0,130,102,0,0,0,90,102,0,1,102,0,0,132,0,0,102,38,102,90,1,121,102,3,0,135,2,4,0,119,0,244,12,25,6,8,12,0,7,91,0,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,102,6,9,72,55,0,0,25,2,8,52,1,102,0,0,85,2,102,0,1,103,0,0,109,8,56,103,1,102,0,0,107,8,60,102,1,102,24,35,85,8,102,0,25,6,8,64,25,7,8,68,25,3,8,88,1,102,0,0,85,6,102,0,1,103,0,0,109,6,4,103,1,102,0,0,109,6,8,102,1,103,0,0,109,6,12,103,1,102,0,0,109,6,16,102,1,103,0,0,109,6,20,103,1,103,0,0,132,0,0,103,1,102,0,0,135,103,3,0,92,3,102,0,130,103,0,0,0,90,103,0,1,103,0,0,132,0,0,103,38,103,90,1,121,103,27,0,135,2,4,0,128,103,0,0,0,5,103,0,25,102,8,76,135,103,13,0,102,0,0,0,82,3,6,0,121,3,193,12,82,4,7,0,46,103,4,3,68,56,0,0,26,91,4,8,85,7,91,0,82,102,91,0,82,102,102,0,1,104,255,1,19,102,102,104,135,103,14,0,102,91,0,0,82,4,7,0,53,103,4,3,20,56,0,0,82,3,6,0,135,103,9,0,3,0,0,0,119,0,175,12,1,103,104,33,85,3,103,0,1,103,12,0,85,2,103,0,135,103,0,0,0,8,0,0,1,103,40,68,85,0,103,0,1,103,0,0,85,91,103,0,25,90,91,4,1,103,0,0,85,90,103,0,1,102,0,0,109,91,8,102,25,16,66,8,25,17,66,4,25,42,66,11,25,18,67,8,25,19,67,4,25,43,67,11,25,75,81,11,25,20,81,3,25,21,89,4,25,22,77,4,25,23,82,4,25,41,1,76,25,62,1,80,25,24,64,8,25,25,64,4,25,44,64,11,25,26,78,4,25,52,74,11,25,27,71,4,25,53,72,11,25,28,65,8,25,29,65,4,25,45,65,11,25,63,87,11,25,30,87,12,25,31,88,4,25,32,91,8,25,33,87,16,25,55,87,12,1,102,156,0,3,38,1,102,25,34,57,4,25,35,82,4,25,56,69,11,25,39,1,84,25,40,1,96,3,36,1,97,1,102,164,0,3,37,1,102,25,76,89,11,25,10,87,12,25,11,88,4,25,12,87,16,25,46,87,12,25,61,87,11,25,13,89,8,25,14,89,4,25,15,81,4,1,3,1,0,1,102,0,0,132,0,0,102,1,102,57,0,1,103,1,0,1,104,0,0,135,2,2,0,102,1,103,104,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,16,0,119,0,140,5,33,104,2,0,120,104,240,255,1,104,0,0,132,0,0,104,1,104,73,0,1,103,1,0,1,102,0,0,135,2,2,0,104,1,103,102,130,102,0,0,0,9,102,0,1,102,0,0,132,0,0,102,38,102,9,1,121,102,3,0,1,25,16,0,119,0,123,5,120,2,159,4,1,102,0,0,132,0,0,102,1,102,92,0,1,103,1,0,1,104,0,0,135,2,2,0,102,1,103,104,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,16,0,119,0,107,5,120,2,128,0,121,3,64,0,1,104,0,0,85,66,104,0,1,103,0,0,109,66,4,103,1,104,0,0,109,66,8,104,1,104,0,0,132,0,0,104,1,104,48,0,135,2,8,0,93,104,0,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,16,0,119,0,86,5,85,66,2,0,2,104,0,0,48,0,0,128,85,16,104,0,1,104,47,0,85,17,104,0,0,6,2,0,2,7,0,0,186,181,0,0,25,9,6,47,78,104,7,0,83,6,104,0,25,6,6,1,25,7,7,1,54,104,6,9,140,58,0,0,1,103,0,0,107,2,47,103,1,103,0,0,132,0,0,103,116,87,83,0,106,104,83,4,109,87,4,104,106,103,83,8,109,87,8,103,1,104,109,0,135,103,7,0,104,1,66,87,130,103,0,0,0,9,103,0,1,103,0,0,132,0,0,103,38,103,9,1,121,103,3,0,1,25,211,0,119,0,50,5,1,103,0,0,78,104,42,0,56,103,103,104,204,78,0,0,82,104,66,0,135,103,9,0,104,0,0,0,119,0,239,4,1,103,0,0,85,67,103,0,1,104,0,0,109,67,4,104,1,103,0,0,109,67,8,103,1,103,0,0,132,0,0,103,1,103,64,0,135,2,8,0,93,103,0,0,130,103,0,0,0,9,103,0,1,103,0,0,132,0,0,103,38,103,9,1,121,103,3,0,1,25,16,0,119,0,23,5,85,67,2,0,2,103,0,0,64,0,0,128,85,18,103,0,1,103,52,0,85,19,103,0,0,6,2,0,2,7,0,0,234,181,0,0,25,9,6,52,78,103,7,0,83,6,103,0,25,6,6,1,25,7,7,1,54,103,6,9,136,59,0,0,1,104,0,0,107,2,52,104,1,104,0,0,132,0,0,104,116,87,83,0,106,103,83,4,109,87,4,103,106,104,83,8,109,87,8,104,1,103,109,0,135,104,7,0,103,1,67,87,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,217,0,119,0,243,4,1,104,0,0,78,103,43,0,56,104,104,103,204,78,0,0,82,103,67,0,135,104,9,0,103,0,0,0,119,0,176,4,1,104,0,0,132,0,0,104,1,104,84,0,135,8,8,0,93,104,0,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,91,0,119,0,222,4,0,6,51,0,0,7,83,0,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,104,6,9,80,60,0,0,1,104,0,0,132,0,0,104,1,103,170,1,135,104,1,0,103,8,0,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,92,0,119,0,201,4,25,6,8,12,0,7,51,0,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,104,6,9,164,60,0,0,1,104,168,44,85,8,104,0,1,103,0,0,107,8,52,103,1,104,0,0,107,8,53,104,1,103,0,0,107,8,54,103,1,104,0,0,109,8,56,104,25,2,8,60,1,104,128,44,85,2,104,0,25,7,8,64,1,104,0,0,85,7,104,0,1,103,0,0,109,7,4,103,1,104,0,0,109,7,8,104,1,103,0,0,109,7,12,103,1,103,0,0,132,0,0,103,1,104,35,2,1,102,0,0,135,103,3,0,104,7,102,0,130,103,0,0,0,9,103,0,1,103,0,0,132,0,0,103,38,103,9,1,121,103,3,0,1,25,60,0,119,0,157,4,1,103,200,43,85,8,103,0,1,103,72,44,85,2,103,0,1,102,0,0,107,8,80,102,1,103,0,0,107,8,81,103,1,102,0,0,107,8,82,102,1,102,0,0,132,0,0,102,135,102,3,0,92,89,8,0,130,102,0,0,0,9,102,0,1,102,0,0,132,0,0,102,38,102,9,1,121,102,3,0,1,25,91,0,119,0,135,4,1,102,104,40,85,89,102,0,1,102,0,0,132,0,0,102,1,102,92,0,135,5,8,0,93,102,0,0,130,102,0,0,0,9,102,0,1,102,0,0,132,0,0,102,38,102,9,1,121,102,3,0,1,25,94,0,119,0,120,4,0,6,54,0,0,7,83,0,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,102,6,9,232,61,0,0,0,9,15,0,1,102,0,0,85,9,102,0,1,103,0,0,109,9,4,103,1,103,3,0,83,75,103,0,2,103,0,0,244,189,0,0,78,103,103,0,83,81,103,0,2,102,0,0,245,189,0,0,78,102,102,0,107,81,1,102,2,103,0,0,246,189,0,0,78,103,103,0,107,81,2,103,1,103,0,0,83,20,103,0,1,103,0,0,132,0,0,103,82,102,21,0,135,103,3,0,92,77,102,0,130,103,0,0,0,9,103,0,1,103,0,0,132,0,0,103,38,103,9,1,121,103,3,0,1,25,95,0,119,0,78,4,1,103,104,40,85,77,103,0,0,6,50,0,0,7,54,0,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,103,6,9,152,62,0,0,1,103,0,0,132,0,0,103,1,102,170,1,135,103,1,0,102,5,0,0,130,103,0,0,0,9,103,0,1,103,0,0,132,0,0,103,38,103,9,1,121,103,4,0,1,4,1,0,1,25,96,0,119,0,54,4,25,6,5,12,0,7,50,0,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,103,6,9,240,62,0,0,1,102,0,0,107,5,52,102,1,103,0,0,107,5,53,103,1,102,0,0,107,5,54,102,25,2,5,56,1,102,0,0,85,2,102,0,1,102,36,45,85,5,102,0,25,4,5,60,1,102,0,0,132,0,0,102,1,103,197,1,135,102,3,0,103,4,81,0,130,102,0,0,0,9,102,0,1,102,0,0,132,0,0,102,38,102,9,1,121,102,3,0,1,25,72,0,119,0,21,4,25,3,5,72,1,102,0,0,132,0,0,102,82,103,22,0,135,102,3,0,92,3,103,0,130,102,0,0,0,9,102,0,1,102,0,0,132,0,0,102,38,102,9,1,121,102,3,0,1,25,73,0,119,0,7,4,1,102,104,40,85,3,102,0,1,103,0,0,107,5,80,103,1,102,0,0,109,5,84,102,1,103,0,0,109,5,88,103,1,103,11,0,85,2,103,0,1,103,0,0,132,0,0,103,135,103,3,0,92,88,5,0,130,103,0,0,0,9,103,0,1,103,0,0,132,0,0,103,38,103,9,1,121,103,4,0,1,4,0,0,1,25,96,0,119,0,240,3,1,103,220,68,85,88,103,0,135,103,5,0,77,0,0,0,78,103,75,0,34,103,103,0,121,103,4,0,82,102,81,0,135,103,9,0,102,0,0,0,1,103,0,0,132,0,0,103,1,103,73,0,1,102,1,0,1,104,0,0,135,2,2,0,103,1,102,104,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,102,0,119,0,215,3,120,2,203,1,1,104,0,0,132,0,0,104,1,102,78,2,135,104,3,0,102,82,1,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,126,0,119,0,201,3,82,2,23,0,120,2,63,1,82,2,41,0,1,104,0,0,132,0,0,104,1,104,86,1,135,3,8,0,104,2,0,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,127,0,119,0,185,3,125,2,3,3,2,0,0,0,78,3,2,0,41,104,3,24,42,104,104,24,121,104,236,0,1,4,0,0,1,5,0,0,1,6,0,0,41,104,3,24,42,104,104,24,1,102,34,0,1,103,59,0,138,104,102,103,104,66,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,116,66,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,252,65,0,0,128,66,0,0,121,4,3,0,1,4,1,0,119,0,33,0,121,5,4,0,1,4,0,0,1,5,1,0,119,0,29,0,41,102,3,24,42,102,102,24,1,103,40,0,1,105,2,0,138,102,103,105,64,66,0,0,80,66,0,0,1,4,0,0,1,5,0,0,119,0,19,0,1,4,0,0,1,5,0,0,25,6,6,1,119,0,15,0,120,6,2,0,119,0,19,0,1,4,0,0,1,5,0,0,26,6,6,1,119,0,9,0,40,102,4,1,0,4,102,0,119,0,6,0,40,102,5,1,0,5,102,0,119,0,3,0,25,2,2,1,119,0,1,0,25,2,2,1,78,3,2,0,41,104,3,24,42,104,104,24,120,104,153,255,119,0,128,0,82,104,62,0,25,102,2,1,55,104,104,102,156,68,0,0,1,104,0,0,132,0,0,104,1,102,112,0,1,103,0,0,135,104,7,0,102,78,1,103,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,158,0,119,0,53,3,82,104,21,0,25,2,104,60,82,104,2,0,106,3,104,20,1,104,0,0,132,0,0,104,1,104,88,0,135,5,8,0,93,104,0,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,159,0,119,0,36,3,82,4,26,0,0,6,49,0,25,7,4,12,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,104,6,9,60,67,0,0,1,104,0,0,132,0,0,104,135,104,3,0,92,73,4,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,160,0,119,0,15,3,85,73,95,0,1,104,0,0,85,74,104,0,1,103,0,0,109,74,4,103,1,104,0,0,109,74,8,104,1,104,0,0,132,0,0,104,0,6,87,0,0,7,49,0,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,104,6,9,176,67,0,0,1,103,12,0,1,102,0,0,1,105,0,0,135,104,15,0,103,5,87,73,74,102,105,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,4,0,1,2,1,0,1,25,161,0,119,0,239,2,1,104,0,0,132,0,0,104,135,104,3,0,92,60,5,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,4,0,1,2,0,0,1,25,161,0,119,0,226,2,85,60,96,0,1,104,0,0,132,0,0,104,135,104,3,0,3,2,60,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,162,0,119,0,213,2,135,104,5,0,60,0,0,0,78,104,52,0,34,104,104,0,121,104,4,0,82,105,74,0,135,104,9,0,105,0,0,0,135,104,5,0,73,0,0,0,135,104,5,0,78,0,0,0,119,0,186,0,1,104,0,0,85,64,104,0,1,105,0,0,109,64,4,105,1,104,0,0,109,64,8,104,1,104,0,0,132,0,0,104,1,104,16,0,135,2,8,0,93,104,0,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,127,0,119,0,181,2,85,64,2,0,2,104,0,0,16,0,0,128,85,24,104,0,1,104,13,0,85,25,104,0,0,6,2,0,2,7,0,0,153,181,0,0,25,9,6,13,78,104,7,0,83,6,104,0,25,6,6,1,25,7,7,1,54,104,6,9,16,69,0,0,1,105,0,0,107,2,13,105,1,105,0,0,132,0,0,105,116,87,83,0,106,104,83,4,109,87,4,104,106,105,83,8,109,87,8,105,1,104,109,0,135,105,7,0,104,1,64,87,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,3,0,1,25,173,0,119,0,145,2,1,105,0,0,78,104,44,0,56,105,105,104,128,71,0,0,82,104,64,0,135,105,9,0,104,0,0,0,119,0,123,0,82,105,21,0,25,3,105,60,82,105,3,0,106,4,105,20,1,105,0,0,132,0,0,105,1,105,88,0,135,5,8,0,93,105,0,0,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,3,0,1,25,127,0,119,0,120,2,0,6,48,0,25,7,2,12,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,105,6,9,232,69,0,0,1,105,0,0,132,0,0,105,135,105,3,0,92,71,2,0,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,3,0,1,25,128,0,119,0,100,2,1,105,168,34,85,71,105,0,1,105,0,0,132,0,0,105,82,104,27,0,135,105,3,0,92,70,104,0,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,3,0,1,25,129,0,119,0,85,2,85,70,95,0,1,105,0,0,85,72,105,0,1,104,0,0,109,72,4,104,1,105,0,0,109,72,8,105,1,105,0,0,132,0,0,105,0,6,87,0,0,7,48,0,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,105,6,9,152,70,0,0,1,104,12,0,1,102,0,0,1,103,0,0,135,105,15,0,104,5,87,70,72,102,103,0,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,4,0,1,4,1,0,1,25,130,0,119,0,53,2,1,105,0,0,132,0,0,105,135,105,3,0,92,59,5,0,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,4,0,1,4,0,0,1,25,130,0,119,0,40,2,85,59,96,0,1,105,0,0,132,0,0,105,135,105,3,0,4,3,59,0,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,3,0,1,25,131,0,119,0,27,2,135,105,5,0,59,0,0,0,78,105,53,0,34,105,105,0,121,105,4,0,82,103,72,0,135,105,9,0,103,0,0,0,135,105,5,0,70,0,0,0,135,105,5,0,71,0,0,0,135,105,5,0,82,0,0,0,119,0,145,0,1,105,0,0,132,0,0,105,116,87,38,0,106,103,38,4,109,87,4,103,106,105,38,8,109,87,8,105,1,103,26,0,1,102,0,0,135,105,11,0,103,57,1,87,102,0,0,0,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,3,0,1,25,103,0,119,0,248,1,1,105,0,0,132,0,0,105,82,102,34,0,135,105,3,0,92,82,102,0,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,3,0,1,25,104,0,119,0,235,1,85,82,95,0,135,105,5,0,57,0,0,0,82,105,21,0,25,2,105,60,82,105,2,0,106,3,105,20,1,105,0,0,132,0,0,105,1,105,88,0,135,5,8,0,93,105,0,0,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,3,0,1,25,105,0,119,0,215,1,82,4,35,0,0,6,47,0,25,7,4,12,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,105,6,9,112,72,0,0,1,105,0,0,132,0,0,105,135,105,3,0,92,68,4,0,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,3,0,1,25,106,0,119,0,194,1,85,68,95,0,1,105,0,0,85,69,105,0,1,102,0,0,109,69,4,102,1,105,0,0,109,69,8,105,1,105,0,0,132,0,0,105,0,6,87,0,0,7,47,0,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,105,6,9,228,72,0,0,1,102,12,0,1,103,0,0,1,104,0,0,135,105,15,0,102,5,87,68,69,103,104,0,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,4,0,1,2,1,0,1,25,107,0,119,0,162,1,1,105,0,0,132,0,0,105,135,105,3,0,92,58,5,0,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,4,0,1,2,0,0,1,25,107,0,119,0,149,1,85,58,96,0,1,105,0,0,132,0,0,105,135,105,3,0,3,2,58,0,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,3,0,1,25,108,0,119,0,136,1,135,105,5,0,58,0,0,0,78,105,56,0,34,105,105,0,121,105,4,0,82,104,69,0,135,105,9,0,104,0,0,0,135,105,5,0,68,0,0,0,135,105,5,0,82,0,0,0,1,105,0,0,132,0,0,105,1,105,68,0,1,104,1,0,1,103,0,0,135,2,2,0,105,1,104,103,130,103,0,0,0,9,103,0,1,103,0,0,132,0,0,103,38,103,9,1,121,103,3,0,1,25,102,0,119,0,109,1,120,2,63,0,1,103,0,0,85,65,103,0,1,104,0,0,109,65,4,104,1,103,0,0,109,65,8,103,1,103,0,0,132,0,0,103,1,103,32,0,135,2,8,0,93,103,0,0,130,103,0,0,0,9,103,0,1,103,0,0,132,0,0,103,38,103,9,1,121,103,3,0,1,25,102,0,119,0,89,1,85,65,2,0,2,103,0,0,32,0,0,128,85,28,103,0,1,103,18,0,85,29,103,0,0,6,2,0,2,7,0,0,167,181,0,0,25,9,6,18,78,103,7,0,83,6,103,0,25,6,6,1,25,7,7,1,54,103,6,9,128,74,0,0,1,104,0,0,107,2,18,104,1,104,0,0,132,0,0,104,116,87,83,0,106,103,83,4,109,87,4,103,106,104,83,8,109,87,8,104,1,103,109,0,135,104,7,0,103,1,65,87,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,184,0,119,0,53,1,1,104,0,0,78,103,45,0,56,104,104,103,4,75,0,0,82,103,65,0,135,104,9,0,103,0,0,0,1,104,0,0,85,87,104,0,1,103,0,0,109,87,4,103,1,104,0,0,109,87,8,104,1,104,0,0,132,0,0,104,82,103,31,0,135,104,3,0,92,30,103,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,187,0,119,0,27,1,1,104,220,68,85,30,104,0,82,4,90,0,82,104,32,0,48,104,4,104,228,75,0,0,116,4,87,0,106,103,87,4,109,4,4,103,106,104,87,8,109,4,8,104,1,104,0,0,85,87,104,0,1,103,0,0,109,87,4,103,1,104,0,0,109,87,8,104,25,2,4,12,1,104,0,0,132,0,0,104,82,103,33,0,135,104,3,0,92,2,103,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,191,0,119,0,252,0,1,104,220,68,85,2,104,0,82,104,90,0,25,104,104,20,85,90,104,0,119,0,14,0,1,104,0,0,132,0,0,104,1,103,100,2,135,104,3,0,103,91,87,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,199,0,119,0,233,0,135,104,5,0,55,0,0,0,78,104,63,0,34,104,104,0,121,104,4,0,82,103,87,0,135,104,9,0,103,0,0,0,135,104,5,0,88,0,0,0,135,104,5,0,89,0,0,0,119,0,161,0,82,3,36,0,82,5,37,0,1,104,0,0,85,89,104,0,1,103,0,0,109,89,4,103,1,104,0,0,109,89,8,104,4,6,5,3,1,104,239,255,48,104,104,6,132,76,0,0,1,25,20,0,119,0,206,0,35,104,6,11,121,104,4,0,83,76,6,0,0,2,89,0,119,0,22,0,25,104,6,16,38,104,104,240,0,4,104,0,1,104,0,0,132,0,0,104,135,2,8,0,93,4,0,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,44,0,119,0,186,0,85,89,2,0,2,104,0,0,0,0,0,128,20,104,4,104,85,13,104,0,85,14,6,0,46,104,3,5,24,77,0,0,0,4,2,0,78,104,3,0,83,4,104,0,25,3,3,1,52,104,3,5,20,77,0,0,25,4,4,1,119,0,250,255,3,2,2,6,1,104,0,0,83,2,104,0,1,104,0,0,132,0,0,104,1,103,0,0,135,104,3,0,92,88,103,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,45,0,119,0,154,0,1,104,220,68,85,88,104,0,1,104,0,0,132,0,0,104,1,103,197,1,135,104,3,0,103,87,89,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,46,0,119,0,139,0,1,104,0,0,132,0,0,104,82,103,11,0,135,104,3,0,92,10,103,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,31,0,119,0,126,0,1,104,220,68,85,10,104,0,82,4,90,0,82,104,32,0,48,104,4,104,88,78,0,0,116,4,87,0,106,103,87,4,109,4,4,103,106,104,87,8,109,4,8,104,1,104,0,0,85,87,104,0,1,103,0,0,109,87,4,103,1,104,0,0,109,87,8,104,25,2,4,12,1,104,0,0,132,0,0,104,82,103,12,0,135,104,3,0,92,2,103,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,35,0,119,0,95,0,1,104,220,68,85,2,104,0,82,104,90,0,25,104,104,20,85,90,104,0,119,0,14,0,1,104,0,0,132,0,0,104,1,103,100,2,135,104,3,0,103,91,87,0,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,48,0,119,0,76,0,135,104,5,0,46,0,0,0,78,104,61,0,34,104,104,0,121,104,4,0,82,103,87,0,135,104,9,0,103,0,0,0,135,104,5,0,88,0,0,0,78,104,76,0,34,104,104,0,121,104,4,0,82,103,89,0,135,104,9,0,103,0,0,0,116,89,38,0,106,103,38,4,109,89,4,103,106,104,38,8,109,89,8,104,82,3,41,0,116,88,39,0,106,103,39,4,109,88,4,103,106,104,39,8,109,88,8,104,116,82,40,0,106,103,40,4,109,82,4,103,106,104,40,8,109,82,8,104,0,6,78,0,0,7,83,0,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,104,6,9,24,79,0,0,1,104,0,0,132,0,0,104,1,103,54,0,1,105,1,0,1,102,0,0,135,104,2,0,103,1,105,102,130,104,0,0,0,9,104,0,1,104,0,0,132,0,0,104,38,104,9,1,121,104,3,0,1,25,16,0,119,0,21,0,1,104,0,0,132,0,0,104,1,104,55,0,1,102,1,0,1,105,0,0,135,2,2,0,104,1,102,105,130,105,0,0,0,9,105,0,1,105,0,0,132,0,0,105,38,105,9,1,121,105,3,0,1,25,16,0,119,0,6,0,120,2,3,0,1,25,222,0,119,0,3,0,1,3,0,0,119,0,103,250,1,105,20,0,1,103,203,0,138,25,105,103,244,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,24,83,0,0,240,82,0,0,240,82,0,0,240,82,0,0],eb+10240);HEAPU8.set([76,83,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,128,83,0,0,148,83,0,0,240,82,0,0,168,83,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,188,83,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,36,84,0,0,56,84,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,108,84,0,0,128,84,0,0,240,82,0,0,148,84,0,0,168,84,0,0,192,84,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,212,84,0,0,232,84,0,0,252,84,0,0,24,85,0,0,44,85,0,0,64,85,0,0,88,85,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,120,85,0,0,140,85,0,0,160,85,0,0,180,85,0,0,208,85,0,0,228,85,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,4,86,0,0,24,86,0,0,44,86,0,0,64,86,0,0,88,86,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,120,86,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,172,86,0,0,240,82,0,0,240,82,0,0,224,86,0,0,240,82,0,0,240,82,0,0,240,82,0,0,12,87,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,64,87,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,84,87,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,136,87,0,0,240,82,0,0,240,82,0,0,240,82,0,0,240,82,0,0,188,87,0,0,119,0,89,4,1,105,0,0,132,0,0,105,1,102,171,1,135,105,1,0,102,89,0,0,1,105,0,0,132,0,0,105,1,25,44,0,119,0,80,4,135,3,4,0,128,105,0,0,0,2,105,0,78,105,61,0,34,105,105,0,121,105,6,0,82,102,87,0,135,105,9,0,102,0,0,0,1,25,47,0,119,0,69,4,1,25,47,0,119,0,67,4,135,3,4,0,128,105,0,0,0,2,105,0,102,105,4,11,34,105,105,0,121,105,6,0,82,102,4,0,135,105,9,0,102,0,0,0,1,25,49,0,119,0,56,4,1,25,49,0,119,0,54,4,135,3,4,0,128,105,0,0,0,2,105,0,1,25,52,0,119,0,49,4,135,3,4,0,128,105,0,0,0,2,105,0,1,25,47,0,119,0,44,4,135,3,4,0,128,105,0,0,0,2,105,0,1,25,49,0,119,0,39,4,135,3,4,0,128,105,0,0,0,6,105,0,25,5,8,68,82,2,7,0,121,2,18,0,82,4,5,0,46,105,4,2,16,84,0,0,26,89,4,8,85,5,89,0,82,102,89,0,82,102,102,0,1,104,255,1,19,102,102,104,135,105,14,0,102,89,0,0,82,4,5,0,53,105,4,2,224,83,0,0,82,2,7,0,135,105,9,0,2,0,0,0,0,2,6,0,1,25,93,0,119,0,13,4,135,3,4,0,128,105,0,0,0,2,105,0,1,25,75,0,119,0,8,4,135,3,4,0,128,105,0,0,0,2,105,0,102,105,5,71,34,105,105,0,121,105,6,0,82,102,4,0,135,105,9,0,102,0,0,0,1,25,75,0,119,0,253,3,1,25,75,0,119,0,251,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,205,0,119,0,246,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,93,0,119,0,241,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,204,0,119,0,236,3,135,3,4,0,1,4,1,0,128,105,0,0,0,2,105,0,1,25,98,0,119,0,230,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,97,0,119,0,225,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,203,0,119,0,220,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,114,0,119,0,215,3,135,3,4,0,128,105,0,0,0,2,105,0,135,105,5,0,57,0,0,0,1,25,114,0,119,0,208,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,113,0,119,0,203,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,112,0,119,0,198,3,135,3,4,0,0,4,2,0,128,105,0,0,0,2,105,0,1,25,109,0,119,0,192,3,135,3,4,0,128,105,0,0,0,2,105,0,135,105,5,0,58,0,0,0,1,4,0,0,1,25,109,0,119,0,184,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,177,0,119,0,179,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,176,0,119,0,174,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,135,0,119,0,169,3,135,3,4,0,128,105,0,0,0,2,105,0,135,105,5,0,71,0,0,0,1,25,135,0,119,0,162,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,132,0,119,0,157,3,135,3,4,0,128,105,0,0,0,2,105,0,135,105,5,0,59,0,0,0,1,4,0,0,1,25,132,0,119,0,149,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,168,0,119,0,144,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,167,0,119,0,139,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,166,0,119,0,134,3,135,3,4,0,0,4,2,0,128,105,0,0,0,2,105,0,1,25,163,0,119,0,128,3,135,3,4,0,128,105,0,0,0,2,105,0,135,105,5,0,60,0,0,0,1,4,0,0,1,25,163,0,119,0,120,3,135,3,4,0,128,105,0,0,0,2,105,0,78,105,44,0,34,105,105,0,121,105,6,0,82,102,64,0,135,105,9,0,102,0,0,0,1,25,176,0,119,0,109,3,1,25,176,0,119,0,107,3,135,3,4,0,128,105,0,0,0,2,105,0,78,105,45,0,34,105,105,0,121,105,6,0,82,102,65,0,135,105,9,0,102,0,0,0,1,25,203,0,119,0,96,3,1,25,203,0,119,0,94,3,135,3,4,0,128,105,0,0,0,2,105,0,78,105,63,0,34,105,105,0,121,105,4,0,82,102,87,0,135,105,9,0,102,0,0,0,1,25,202,0,119,0,83,3,135,3,4,0,128,105,0,0,0,2,105,0,102,105,4,11,34,105,105,0,121,105,6,0,82,102,4,0,135,105,9,0,102,0,0,0,1,25,200,0,119,0,72,3,1,25,200,0,119,0,70,3,135,3,4,0,128,105,0,0,0,2,105,0,1,25,200,0,119,0,65,3,135,3,4,0,128,105,0,0,0,2,105,0,78,105,42,0,34,105,105,0,121,105,6,0,82,102,66,0,135,105,9,0,102,0,0,0,0,6,2,0,119,0,54,3,0,6,2,0,119,0,52,3,135,3,4,0,128,105,0,0,0,2,105,0,78,105,43,0,34,105,105,0,121,105,6,0,82,102,67,0,135,105,9,0,102,0,0,0,0,6,2,0,119,0,41,3,0,6,2,0,119,0,39,3,0,6,83,0,0,7,78,0,25,9,6,40,116,6,7,0,25,6,6,4,25,7,7,4,54,105,6,9,200,87,0,0,116,38,89,0,106,102,89,4,109,38,4,102,106,105,89,8,109,38,8,105,85,41,3,0,116,40,82,0,106,102,82,4,109,40,4,102,106,105,82,8,109,40,8,105,116,39,88,0,106,102,88,4,109,39,4,102,106,105,88,8,109,39,8,105,1,105,0,0,132,0,0,105,1,105,85,1,135,2,8,0,105,3,0,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,121,105,3,0,1,25,16,0,119,0,2,3,32,102,2,0,121,102,4,0,1,102,1,0,0,105,102,0,119,0,4,0,82,102,62,0,16,102,102,2,0,105,102,0,121,105,2,0,82,2,41,0,1,105,0,0,132,0,0,105,1,105,86,1,135,3,8,0,105,2,0,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,121,105,3,0,1,25,16,0,119,0,235,2,125,2,3,3,2,0,0,0,78,105,2,0,1,102,59,0,1,104,67,0,138,105,102,104,4,90,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,208,89,0,0,8,90,0,0,1,102,0,0,132,0,0,102,1,102,87,1,135,2,8,0,102,2,0,0,130,102,0,0,0,82,102,0,1,102,0,0,132,0,0,102,38,102,82,1,121,102,6,0,1,25,16,0,119,0,149,2,119,0,1,0,25,2,2,1,119,0,1,0,32,102,2,0,121,102,4,0,1,102,1,0,0,105,102,0,119,0,4,0,82,102,62,0,16,102,102,2,0,105,102,0,121,105,97,0,1,105,0,0,132,0,0,105,1,102,101,2,135,105,3,0,102,87,1,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,121,105,5,0,135,3,4,0,128,105,0,0,0,2,105,0,119,0,80,0,106,2,0,4,1,105,0,0,132,0,0,105,106,102,87,4,135,105,3,0,92,80,102,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,121,105,5,0,135,3,4,0,128,105,0,0,0,2,105,0,119,0,62,0,1,105,104,33,85,80,105,0,25,3,2,88,25,2,2,92,82,105,2,0,120,105,3,0,1,25,233,0,119,0,13,0,1,105,0,0,132,0,0,105,1,102,172,1,135,105,1,0,102,3,0,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,120,105,2,0,1,25,233,0,1,105,233,0,45,105,25,105,144,91,0,0,25,105,80,4,116,2,105,0,1,105,0,0,132,0,0,105,1,102,173,1,135,105,1,0,102,3,0,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,120,105,21,0,1,105,0,0,132,0,0,105,82,102,2,0,135,105,3,0,92,79,102,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,120,105,10,0,1,105,104,33,85,79,105,0,135,105,5,0,79,0,0,0,135,105,5,0,80,0,0,0,135,105,5,0,87,0,0,0,119,0,10,0,135,3,4,0,128,105,0,0,0,2,105,0,135,105,5,0,80,0,0,0,135,105,5,0,87,0,0,0,0,6,2,0,119,0,41,2,82,2,91,0,82,15,90,0,46,105,2,15,236,99,0,0,25,16,89,12,25,17,89,16,25,18,1,40,25,9,1,12,25,10,0,4,25,22,88,11,25,19,87,11,25,20,85,11,25,11,87,8,25,12,87,4,25,21,87,4,25,23,89,12,25,24,89,11,25,13,84,4,25,14,87,4,1,105,0,0,132,0,0,105,1,102,197,1,135,105,3,0,102,89,2,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,121,105,3,0,1,25,8,1,119,0,12,1,1,105,0,0,132,0,0,105,106,102,2,16,135,105,3,0,92,16,102,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,121,105,3,0,1,25,254,0,119,0,255,0,1,105,220,68,85,16,105,0,82,3,17,0,120,3,167,0,82,3,18,0,1,105,0,0,132,0,0,105,1,102,5,0,1,104,0,0,1,103,0,0,1,106,1,0,135,105,10,0,102,88,89,104,103,106,0,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,121,105,3,0,1,25,43,1,119,0,233,0,82,4,9,0,82,5,10,0,1,105,0,0,132,0,0,105,1,106,28,2,1,103,108,1,3,103,3,103,135,105,3,0,106,87,103,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,121,105,3,0,1,25,44,1,119,0,216,0,1,105,0,0,132,0,0,105,1,105,87,0,1,103,1,0,135,3,16,0,105,3,88,4,83,5,87,103,130,103,0,0,0,82,103,0,1,103,0,0,132,0,0,103,38,103,82,1,121,103,3,0,1,25,23,1,119,0,201,0,82,4,87,0,121,4,13,0,82,5,21,0,46,103,5,4,112,93,0,0,26,103,5,4,4,103,103,4,43,103,103,2,11,103,103,0,41,103,103,2,3,103,5,103,85,21,103,0,135,103,9,0,4,0,0,0,78,103,22,0,34,103,103,0,121,103,4,0,82,105,88,0,135,103,9,0,105,0,0,0,120,3,166,0,82,6,18,0,82,7,10,0,1,103,0,0,132,0,0,103,1,105,197,1,135,103,3,0,105,85,89,0,130,103,0,0,0,82,103,0,1,103,0,0,132,0,0,103,38,103,82,1,121,103,3,0,1,25,10,1,119,0,165,0,82,5,9,0,1,103,0,0,85,87,103,0,1,105,0,0,109,87,4,105,1,103,0,0,109,87,8,103,135,8,17,0,5,0,0,0,1,103,239,255,48,103,103,8,8,94,0,0,1,25,32,1,119,0,151,0,35,103,8,11,121,103,8,0,83,19,8,0,120,8,3,0,0,3,87,0,119,0,26,0,0,3,87,0,1,25,37,1,119,0,23,0,25,103,8,16,38,103,103,240,0,4,103,0,1,103,0,0,132,0,0,103,135,3,8,0,93,4,0,0,130,103,0,0,0,82,103,0,1,103,0,0,132,0,0,103,38,103,82,1,121,103,3,0,1,25,48,1,119,0,127,0,85,87,3,0,2,103,0,0,0,0,0,128,20,103,4,103,85,11,103,0,85,12,8,0,1,25,37,1,45,103,25,101,152,94,0,0,1,25,0,0,135,103,18,0,3,5,8,0,1,105,0,0,95,3,8,105,1,105,0,0,132,0,0,105,1,103,20,0,135,105,11,0,103,6,7,85,87,0,0,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,121,105,3,0,1,25,49,1,119,0,99,0,78,105,19,0,34,105,105,0,121,105,4,0,82,103,87,0,135,105,9,0,103,0,0,0,1,105,0,0,78,103,20,0,56,105,105,103,40,96,0,0,82,103,85,0,135,105,9,0,103,0,0,0,119,0,71,0,82,5,10,0,25,6,5,64,1,105,0,0,132,0,0,105,135,105,3,0,92,84,3,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,121,105,3,0,1,25,11,1,119,0,71,0,1,105,220,68,85,84,105,0,1,105,0,0,132,0,0,105,82,103,13,0,135,105,3,0,92,87,103,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,121,105,3,0,1,25,12,1,119,0,56,0,85,87,95,0,25,3,5,68,82,4,3,0,106,105,5,72,48,105,4,105,228,95,0,0,1,105,0,0,132,0,0,105,82,103,14,0,135,105,3,0,92,4,103,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,121,105,3,0,1,25,13,1,119,0,37,0,85,4,95,0,82,105,3,0,25,105,105,8,85,3,105,0,119,0,14,0,1,105,0,0,132,0,0,105,1,103,33,2,135,105,3,0,103,6,87,0,130,105,0,0,0,82,105,0,1,105,0,0,132,0,0,105,38,105,82,1,121,105,3,0,1,25,13,1,119,0,19,0,135,105,5,0,87,0,0,0,135,105,5,0,84,0,0,0,135,105,5,0,23,0,0,0,78,105,24,0,34,105,105,0,121,105,4,0,82,103,89,0,135,105,9,0,103,0,0,0,25,2,2,20,45,105,2,15,92,96,0,0,1,25,243,0,119,0,2,0,119,0,233,254,1,105,243,0,1,103,63,0,138,25,105,103,108,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,116,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,168,97,0,0,104,97,0,0,188,97,0,0,208,97,0,0,228,97,0,0,248,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,20,98,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,98,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,140,98,0,0,160,98,0,0,104,97,0,0,104,97,0,0,104,97,0,0,104,97,0,0,180,98,0,0,119,0,96,0,82,2,91,0,119,0,159,0,135,3,4,0,128,105,0,0,0,2,105,0,78,105,24,0,34,105,105,0,121,105,6,0,82,103,89,0,135,105,9,0,103,0,0,0,1,25,9,1,119,0,83,0,1,25,9,1,119,0,81,0,135,3,4,0,128,105,0,0,0,2,105,0,1,25,9,1,119,0,76,0,135,3,4,0,128,105,0,0,0,2,105,0,1,25,56,1,119,0,71,0,135,3,4,0,128,105,0,0,0,2,105,0,1,25,15,1,119,0,66,0,135,3,4,0,128,105,0,0,0,2,105,0,1,25,14,1,119,0,61,0,135,3,4,0,128,105,0,0,0,2,105,0,135,105,5,0,87,0,0,0,1,25,14,1,119,0,54,0,135,3,4,0,128,105,0,0,0,2,105,0,82,4,87,0,120,4,3,0,1,25,45,1,119,0,47,0,82,5,21,0,46,105,5,4,88,98,0,0,26,105,5,4,4,105,105,4,43,105,105,2,11,105,105,0,41,105,105,2,3,105,5,105,85,21,105,0,135,105,9,0,4,0,0,0,1,25,45,1,119,0,33,0,1,105,0,0,132,0,0,105,1,103,171,1,135,105,1,0,103,87,0,0,1,105,0,0,132,0,0,105,1,25,48,1,119,0,24,0,135,3,4,0,128,105,0,0,0,2,105,0,1,25,47,1,119,0,19,0,135,3,4,0,128,105,0,0,0,2,105,0,1,25,45,1,119,0,14,0,135,3,4,0,128,105,0,0,0,2,105,0,78,105,19,0,34,105,105,0,121,105,6,0,82,103,87,0,135,105,9,0,103,0,0,0,1,25,51,1,119,0,3,0,1,25,51,1,119,0,1,0,1,105,9,1,46,105,25,105,96,99,0,0,1,105,14,1,45,105,25,105,16,99,0,0,135,105,5,0,84,0,0,0,1,25,15,1,119,0,21,0,1,105,45,1,45,105,25,105,68,99,0,0,78,105,22,0,34,105,105,0,121,105,6,0,82,103,88,0,135,105,9,0,103,0,0,0,1,25,47,1,119,0,10,0,1,25,47,1,119,0,8,0,1,105,48,1,45,105,25,105,96,99,0,0,135,3,4,0,128,105,0,0,0,2,105,0,1,25,51,1,1,105,15,1,45,105,25,105,116,99,0,0,1,25,56,1,119,0,18,0,1,105,47,1,45,105,25,105,136,99,0,0,1,25,56,1,119,0,13,0,1,105,51,1,45,105,25,105,184,99,0,0,78,105,20,0,34,105,105,0,121,105,6,0,82,103,85,0,135,105,9,0,103,0,0,0,1,25,56,1,119,0,2,0,1,25,56,1,1,105,56,1,45,105,25,105,228,99,0,0,135,105,5,0,23,0,0,0,78,105,24,0,34,105,105,0,121,105,4,0,82,103,89,0,135,105,9,0,103,0,0,0,0,6,2,0,119,0,27,0,120,2,3,0,137,86,0,0,139,0,0,0,82,3,90,0,46,105,3,2,64,100,0,0,26,4,3,20,85,90,4,0,26,103,3,8,135,105,5,0,103,0,0,0,102,105,4,11,34,105,105,0,121,105,4,0,82,103,4,0,135,105,9,0,103,0,0,0,82,3,90,0,53,105,3,2,4,100,0,0,82,2,91,0,135,105,9,0,2,0,0,0,137,86,0,0,139,0,0,0,119,0,1,0,1,105,16,0,1,103,185,0,138,25,105,103,72,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,88,103,0,0,68,103,0,0,68,103,0,0,108,103,0,0,68,103,0,0,116,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,164,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,176,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,192,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,16,104,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,76,104,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,68,103,0,0,156,104,0,0,119,0,98,0,135,3,4,0,128,105,0,0,0,6,105,0,119,0,94,0,135,3,4,0,128,105,0,0,0,2,105,0,1,25,54,0,119,0,89,0,1,25,51,0,119,0,87,0,135,105,5,0,46,0,0,0,78,105,61,0,34,105,105,0,121,105,6,0,82,103,87,0,135,105,9,0,103,0,0,0,1,25,51,0,119,0,77,0,1,25,51,0,119,0,75,0,1,4,1,0,1,25,97,0,119,0,72,0,135,105,9,0,8,0,0,0,1,25,205,0,119,0,68,0,78,105,56,0,34,105,105,0,121,105,11,0,82,103,69,0,135,105,9,0,103,0,0,0,135,105,5,0,68,0,0,0,121,4,3,0,1,25,112,0,119,0,57,0,1,25,113,0,119,0,55,0,135,105,5,0,68,0,0,0,121,4,3,0,1,25,112,0,119,0,50,0,1,25,113,0,119,0,48,0,78,105,53,0,34,105,105,0,121,105,4,0,82,103,72,0,135,105,9,0,103,0,0,0,135,105,5,0,70,0,0,0,135,105,5,0,71,0,0,0,121,4,3,0,1,25,135,0,119,0,35,0,1,25,176,0,119,0,33,0,78,105,52,0,34,105,105,0,121,105,11,0,82,103,74,0,135,105,9,0,103,0,0,0,135,105,5,0,73,0,0,0,121,4,3,0,1,25,166,0,119,0,22,0,1,25,167,0,119,0,20,0,135,105,5,0,73,0,0,0,121,4,3,0,1,25,166,0,119,0,15,0,1,25,167,0,119,0,13,0,135,105,5,0,55,0,0,0,78,105,63,0,34,105,105,0,121,105,6,0,82,103,87,0,135,105,9,0,103,0,0,0,1,25,202,0,119,0,3,0,1,25,202,0,119,0,1,0,32,105,25,51,121,105,5,0,135,105,5,0,88,0,0,0,1,25,52,0,119,0,31,0,32,105,25,97,121,105,5,0,135,105,5,0,77,0,0,0,1,25,98,0,119,0,25,0,32,105,25,112,121,105,5,0,135,105,9,0,5,0,0,0,1,25,113,0,119,0,19,0,1,105,135,0,45,105,25,105,48,105,0,0,135,105,9,0,5,0,0,0,1,25,176,0,119,0,12,0,1,105,166,0,45,105,25,105,76,105,0,0,135,105,9,0,5,0,0,0,1,25,167,0,119,0,5,0,1,105,202,0,45,105,25,105,92,105,0,0,1,25,203,0,32,105,25,52,121,105,11,0,78,105,76,0,34,105,105,0,121,105,6,0,82,103,89,0,135,105,9,0,103,0,0,0,1,25,54,0,119,0,33,0,1,25,54,0,119,0,31,0,32,105,25,98,121,105,17,0,78,105,75,0,34,105,105,0,121,105,7,0,82,103,81,0,135,105,9,0,103,0,0,0,120,4,6,0,1,25,204,0,119,0,20,0,120,4,3,0,1,25,204,0,119,0,17,0,135,105,9,0,5,0,0,0,1,25,204,0,119,0,13,0,32,105,25,113,121,105,5,0,135,105,5,0,82,0,0,0,1,25,114,0,119,0,7,0,1,105,167,0,45,105,25,105,4,106,0,0,135,105,5,0,78,0,0,0,1,25,168,0,32,105,25,54,121,105,3,0,0,6,2,0,119,0,9,0,32,105,25,114,121,105,3,0,1,25,203,0,119,0,5,0,1,105,168,0,45,105,25,105,52,106,0,0,1,25,176,0,1,105,176,0,45,105,25,105,76,106,0,0,135,105,5,0,82,0,0,0,1,25,177,0,1,105,177,0,45,105,25,105,92,106,0,0,1,25,203,0,1,105,203,0,45,105,25,105,116,106,0,0,135,105,5,0,88,0,0,0,1,25,204,0,1,105,204,0,45,105,25,105,140,106,0,0,135,105,5,0,89,0,0,0,1,25,205,0,1,105,205,0,45,105,25,105,156,106,0,0,0,6,2,0,82,2,91,0,121,2,21,0,82,4,90,0,46,105,4,2,236,106,0,0,26,5,4,20,85,90,5,0,26,103,4,8,135,105,5,0,103,0,0,0,102,105,5,11,34,105,105,0,121,105,4,0,82,103,5,0,135,105,9,0,103,0,0,0,82,4,90,0,53,105,4,2,176,106,0,0,82,2,91,0,135,105,9,0,2,0,0,0,135,105,5,0,0,0,0,0,0,91,3,0,135,105,6,0,91,0,0,0,135,105,9,0,8,0,0,0,0,91,2,0,135,105,6,0,91,0,0,0,139,0,0,0,140,4,54,0,0,0,0,0,2,43,0,0,137,0,0,0,2,44,0,0,216,33,0,0,2,45,0,0,200,1,0,0,2,46,0,0,33,2,0,0,2,47,0,0,104,40,0,0,1,38,0,0,136,48,0,0,0,36,48,0,136,48,0,0,1,49,240,1,3,48,48,49,137,48,0,0,25,33,36,88,25,34,36,48,0,37,36,0,1,48,192,1,3,30,36,48,1,48,140,1,3,41,36,48,1,48,76,1,3,42,36,48,1,48,232,1,3,13,36,48,1,48,152,1,3,14,36,48,1,48,128,1,3,22,36,48,1,48,88,1,3,18,36,48,1,48,64,1,3,20,36,48,1,48,24,1,3,23,36,48,1,48,16,1,3,24,36,48,1,48,4,1,3,25,36,48,1,48,248,0,3,35,36,48,1,48,240,0,3,28,36,48,1,48,200,0,3,29,36,48,1,48,184,0,3,32,36,48,1,48,176,0,3,31,36,48,1,48,164,0,3,21,36,48,1,48,152,0,3,19,36,48,1,48,128,0,3,26,36,48,1,48,140,0,3,27,36,48,25,15,1,12,0,4,30,0,0,9,15,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,48,4,11,40,108,0,0,1,49,0,0,1,50,0,0,1,51,1,0,135,48,19,0,41,2,49,50,51,0,0,0,1,48,0,0,85,42,48,0,1,51,0,0,109,42,4,51,1,48,0,0,109,42,8,48,25,39,42,11,1,48,4,0,83,39,48,0,2,48,0,0,102,105,108,101,85,42,48,0,25,9,42,4,1,48,0,0,83,9,48,0,25,40,41,11,1,48,0,0,132,0,0,48,1,48,67,1,78,50,40,0,34,50,50,0,121,50,4,0,82,50,41,0,0,51,50,0,119,0,2,0,0,51,41,0,135,7,8,0,48,51,0,0,130,51,0,0,0,11,51,0,1,51,0,0,132,0,0,51,38,51,11,1,121,51,3,0,135,4,4,0,119,0,215,5,121,7,113,0,78,51,7,0,32,51,51,58,121,51,110,0,102,51,7,1,32,51,51,47,121,51,107,0,102,51,7,2,32,51,51,47,121,51,104,0,78,48,40,0,34,48,48,0,121,48,4,0,82,48,41,0,0,51,48,0,119,0,2,0,0,51,41,0,0,5,51,0,1,51,0,0,85,33,51,0,1,48,0,0,109,33,4,48,1,51,0,0,109,33,8,51,4,8,7,5,1,51,239,255,48,51,51,8,116,109,0,0,1,51,0,0,132,0,0,51,1,48,171,1,135,51,1,0,48,33,0,0,1,51,0,0,132,0,0,51,119,0,76,0,35,51,8,11,121,51,4,0,107,33,11,8,0,4,33,0,119,0,21,0,25,51,8,16,38,51,51,240,0,6,51,0,1,51,0,0,132,0,0,51,1,51,58,1,135,4,8,0,51,6,0,0,130,51,0,0,0,11,51,0,1,51,0,0,132,0,0,51,38,51,11,1,120,51,57,0,85,33,4,0,2,48,0,0,0,0,0,128,20,48,6,48,109,33,8,48,109,33,4,8,46,48,5,7,4,110,0,0,0,6,4,0,78,48,5,0,83,6,48,0,25,5,5,1,52,48,5,7,0,110,0,0,25,6,6,1,119,0,250,255,3,4,4,8,1,48,0,0,83,4,48,0,78,48,39,0,34,48,48,0,121,48,7,0,82,48,42,0,1,51,0,0,83,48,51,0,1,51,0,0,85,9,51,0,119,0,5,0,1,51,0,0,83,42,51,0,1,51,0,0,83,39,51,0,1,51,0,0,132,0,0,51,1,48,239,1,1,50,0,0,135,51,3,0,48,42,50,0,130,51,0,0,0,11,51,0,1,51,0,0,132,0,0,51,38,51,11,1,121,51,7,0,1,51,0,0,135,38,20,0,51,0,0,0,135,51,21,0,38,0,0,0,119,0,7,0,116,42,33,0,106,50,33,4,109,42,4,50,106,51,33,8,109,42,8,51,119,0,3,0,135,4,4,0,119,0,102,5,1,51,0,0,132,0,0,51,106,50,1,92,135,51,3,0,45,13,50,0,130,51,0,0,0,11,51,0,1,51,0,0,132,0,0,51,38,51,11,1,121,51,3,0,135,4,4,0,119,0,89,5,1,51,104,33,85,13,51,0,106,51,13,4,120,51,173,4,78,11,39,0,41,50,11,24,42,50,50,24,34,50,50,0,121,50,4,0,82,50,9,0,0,51,50,0,119,0,4,0,1,50,255,0,19,50,11,50,0,51,50,0,32,51,51,4,121,51,158,4,1,51,0,0,132,0,0,51,1,51,21,0,1,50,0,0,1,48,255,255,2,49,0,0,70,205,0,0,1,52,4,0,135,4,22,0,51,42,50,48,49,52,0,0,130,52,0,0,0,11,52,0,1,52,0,0,132,0,0,52,38,52,11,1,121,52,6,0,1,52,0,0,135,11,20,0,52,0,0,0,135,52,21,0,11,0,0,0,120,4,133,4,1,52,0,0,132,0,0,52,1,49,4,0,1,48,0,0,1,50,2,0,135,52,10,0,49,33,41,48,50,41,0,0,130,52,0,0,0,11,52,0,1,52,0,0,132,0,0,52,38,52,11,1,121,52,5,0,135,4,4,0,135,52,5,0,13,0,0,0,119,0,31,5,25,5,33,11,78,4,5,0,41,50,4,24,42,50,50,24,34,50,50,0,121,50,4,0,106,50,33,4,0,52,50,0,119,0,4,0,1,50,255,0,19,50,4,50,0,52,50,0,32,52,52,2,121,52,27,0,1,52,0,0,132,0,0,52,1,52,21,0,1,50,0,0,1,48,255,255,2,49,0,0,51,201,0,0,1,51,2,0,135,4,22,0,52,33,50,48,49,51,0,0,130,51,0,0,0,11,51,0,1,51,0,0,132,0,0,51,38,51,11,1,121,51,7,0,1,51,0,0,135,11,20,0,51,0,0,0,135,51,21,0,11,0,0,0,119,0,6,0,78,10,5,0,32,12,4,0,119,0,3,0,0,10,4,0,1,12,0,0,41,51,10,24,42,51,51,24,34,51,51,0,121,51,4,0,82,49,33,0,135,51,9,0,49,0,0,0,135,51,5,0,13,0,0,0,121,12,3,0,1,38,38,0,119,0,66,4,78,4,40,0,41,49,4,24,42,49,49,24,34,49,49,0,121,49,4,0,106,49,41,4,0,51,49,0,119,0,4,0,1,49,255,0,19,49,4,49,0,51,49,0,0,4,51,0,1,51,4,0,48,51,51,4,136,123,0,0,1,51,0,0,132,0,0,51,1,49,4,0,26,48,4,4,1,50,4,0,135,51,10,0,49,33,41,48,50,41,0,0,130,51,0,0,0,22,51,0,1,51,0,0,132,0,0,51,38,51,22,1,121,51,3,0,135,4,4,0,119,0,202,4,25,5,33,11,78,4,5,0,41,50,4,24,42,50,50,24,34,50,50,0,121,50,4,0,106,50,33,4,0,51,50,0,119,0,4,0,1,50,255,0,19,50,4,50,0,51,50,0,32,51,51,4,121,51,27,0,1,51,0,0,132,0,0,51,1,51,21,0,1,50,0,0,1,48,255,255,2,49,0,0,125,142,0,0,1,52,4,0,135,4,22,0,51,33,50,48,49,52,0,0,130,52,0,0,0,22,52,0,1,52,0,0,132,0,0,52,38,52,22,1,121,52,7,0,1,52,0,0,135,22,20,0,52,0,0,0,135,52,21,0,22,0,0,0,119,0,6,0,32,16,4,0,78,17,5,0,119,0,3,0,1,16,0,0,0,17,4,0,41,52,17,24,42,52,52,24,34,52,52,0,121,52,4,0,82,49,33,0,135,52,9,0,49,0,0,0,121,16,107,2,1,52,0,0,132,0,0,52,1,52,58,1,1,49,80,0,135,5,8,0,52,49,0,0,130,49,0,0,0,27,49,0,1,49,0,0,132,0,0,49,38,49,27,1,121,49,3,0,135,4,4,0,119,0,138,4,0,4,18,0,0,9,30,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,49,4,11,36,114,0,0,1,49,0,0,132,0,0,49,1,52,5,0,1,48,0,0,1,50,0,0,1,51,1,0,135,49,10,0,52,20,2,48,50,51,0,0,130,49,0,0,0,27,49,0,1,49,0,0,132,0,0,49,38,49,27,1,121,49,3,0,135,4,4,0,119,0,65,2,0,4,37,0,0,9,18,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,49,4,11,136,114,0,0,1,49,0,0,132,0,0,49,1,51,170,1,135,49,1,0,51,5,0,0,130,49,0,0,0,27,49,0,1,49,0,0,132,0,0,49,38,49,27,1,121,49,3,0,135,4,4,0,119,0,37,2,25,4,5,12,0,9,37,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,49,4,11,220,114,0,0,1,51,0,0,107,5,52,51,1,49,0,0,107,5,53,49,1,51,0,0,107,5,54,51,1,49,4,0,109,5,56,49,1,49,192,48,85,5,49,0,1,51,0,0,107,5,60,51,1,49,0,0,107,5,61,49,1,49,0,0,132,0,0,49,1,51,34,2,25,50,5,64,135,49,3,0,51,50,20,0,130,49,0,0,0,27,49,0,1,49,0,0,132,0,0,49,38,49,27,1,121,49,3,0,135,4,4,0,119,0,1,2,1,50,0,0,109,5,76,50,102,50,20,11,34,50,50,0,121,50,4,0,82,49,20,0,135,50,9,0,49,0,0,0,1,50,0,0,132,0,0,50,1,50,58,1,1,49,88,0,135,7,8,0,50,49,0,0,130,49,0,0,0,27,49,0,1,49,0,0,132,0,0,49,38,49,27,1,121,49,3,0,135,4,4,0,119,0,34,4,0,4,23,0,0,9,30,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,49,4,11,196,115,0,0,1,49,0,0,132,0,0,49,135,49,3,0,45,24,5,0,130,49,0,0,0,27,49,0,1,49,0,0,132,0,0,49,38,49,27,1,121,49,3,0,135,4,4,0,119,0,212,1,85,24,44,0,25,6,25,11,1,49,0,0,85,25,49,0,1,50,0,0,109,25,4,50,1,49,0,0,109,25,8,49,1,49,0,0,132,0,0,49,0,4,33,0,0,9,23,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,49,4,11,60,116,0,0,1,50,12,0,1,51,0,0,1,48,0,0,135,49,15,0,50,7,33,24,25,51,48,0,130,49,0,0,0,27,49,0,1,49,0,0,132,0,0,49,38,49,27,1,121,49,3,0,1,5,1,0,119,0,165,1,1,49,0,0,132,0,0,49,135,49,3,0,45,37,7,0,130,49,0,0,0,27,49,0,1,49,0,0,132,0,0,49,38,49,27,1,121,49,3,0,1,5,0,0,119,0,153,1,1,49,112,44,85,37,49,0,78,49,6,0,34,49,49,0,121,49,4,0,82,48,25,0,135,49,9,0,48,0,0,0,135,49,5,0,24,0,0,0,1,49,0,0,132,0,0,49,1,49,58,1,1,48,84,0,135,10,8,0,49,48,0,0,130,48,0,0,0,27,48,0,1,48,0,0,132,0,0,48,38,48,27,1,121,48,3,0,1,38,124,0,119,0,123,1,0,4,34,0,0,9,30,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,48,4,11,36,117,0,0,1,48,0,0,132,0,0,48,1,49,170,1,135,48,1,0,49,10,0,0,130,48,0,0,0,27,48,0,1,48,0,0,132,0,0,48,38,48,27,1,121,48,3,0,135,4,4,0,119,0,100,1,25,4,10,12,0,9,34,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,48,4,11,120,117,0,0,1,48,168,44,85,10,48,0,1,49,0,0,107,10,52,49,1,48,0,0,107,10,53,48,1,49,0,0,107,10,54,49,1,48,0,0,109,10,56,48,25,4,10,60,1,48,128,44,85,4,48,0,25,8,10,64,25,9,10,68,1,48,0,0,85,8,48,0,1,49,0,0,109,8,4,49,1,48,0,0,109,8,8,48,1,49,0,0,109,8,12,49,1,49,0,0,132,0,0,49,1,48,35,2,1,51,0,0,135,49,3,0,48,8,51,0,130,49,0,0,0,34,49,0,1,49,0,0,132,0,0,49,38,49,34,1,121,49,24,0,135,4,4,0,128,49,0,0,0,7,49,0,82,5,8,0,121,5,52,1,82,6,9,0,46,49,6,5,104,118,0,0,26,36,6,8,85,9,36,0,82,51,36,0,82,51,51,0,1,48,255,1,19,51,51,48,135,49,14,0,51,36,0,0,82,6,9,0,53,49,6,5,56,118,0,0,82,5,8,0,135,49,9,0,5,0,0,0,119,0,34,1,1,49,200,43,85,10,49,0,1,49,72,44,85,4,49,0,1,51,0,0,107,10,80,51,1,49,0,0,107,10,81,49,1,51,0,0,107,10,82,51,1,51,0,0,132,0,0,51,135,51,3,0,45,35,10,0,130,51,0,0,0,34,51,0,1,51,0,0,132,0,0,51,38,51,34,1,121,51,3,0,1,38,124,0,119,0,14,1,85,35,47,0,25,6,35,4,82,51,6,0,25,4,51,60,82,51,4,0,106,5,51,20,1,51,0,0,132,0,0,51,106,49,37,4,135,51,3,0,45,28,49,0,130,51,0,0,0,34,51,0,1,51,0,0,132,0,0,51,38,51,34,1,121,51,3,0,135,4,4,0,119,0,246,0,1,51,112,44,85,28,51,0,1,51,0,0,132,0,0,51,135,51,3,0,5,4,28,0,130,51,0,0,0,34,51,0,1,51,0,0,132,0,0,51,38,51,34,1,121,51,5,0,135,4,4,0,135,51,5,0,28,0,0,0,119,0,230,0,135,51,5,0,28,0,0,0,1,51,0,0,132,0,0,51,1,51,58,1,1,49,92,0,135,8,8,0,51,49,0,0,130,49,0,0,0,34,49,0,1,49,0,0,132,0,0,49,38,49,34,1,121,49,3,0,135,4,4,0,119,0,214,0,0,4,29,0,0,9,30,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,49,4,11,164,119,0,0,25,7,32,4,1,49,0,0,85,7,49,0,1,51,0,0,109,7,4,51,25,7,32,11,1,51,3,0,83,7,51,0,2,51,0,0,244,189,0,0,78,51,51,0,83,32,51,0,2,49,0,0,245,189,0,0,78,49,49,0,107,32,1,49,2,51,0,0,246,189,0,0],eb+20480);HEAPU8.set([78,51,51,0,107,32,2,51,1,49,0,0,107,32,3,49,1,49,0,0,132,0,0,49,82,51,6,0,135,49,3,0,45,31,51,0,130,49,0,0,0,34,49,0,1,49,0,0,132,0,0,49,38,49,34,1,121,49,3,0,135,4,4,0,119,0,163,0,85,31,47,0,0,4,33,0,0,9,29,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,49,4,11,84,120,0,0,1,49,0,0,132,0,0,49,1,51,170,1,135,49,1,0,51,8,0,0,130,49,0,0,0,34,49,0,1,49,0,0,132,0,0,49,38,49,34,1,121,49,3,0,135,4,4,0,119,0,139,0,25,4,8,12,0,9,33,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,49,4,11,168,120,0,0,1,51,0,0,107,8,52,51,1,49,0,0,107,8,53,49,1,51,0,0,107,8,54,51,25,4,8,56,1,51,0,0,85,4,51,0,1,51,36,45,85,8,51,0,25,6,8,60,1,51,0,0,132,0,0,51,1,49,197,1,135,51,3,0,49,6,32,0,130,51,0,0,0,34,51,0,1,51,0,0,132,0,0,51,38,51,34,1,121,51,3,0,135,4,4,0,119,0,106,0,25,5,8,72,1,51,0,0,132,0,0,51,106,49,31,4,135,51,3,0,45,5,49,0,130,51,0,0,0,34,51,0,1,51,0,0,132,0,0,51,38,51,34,1,121,51,10,0,135,4,4,0,1,51,0,0,102,49,8,71,56,51,51,49,196,122,0,0,82,49,6,0,135,51,9,0,49,0,0,0,119,0,85,0,85,5,47,0,1,49,0,0,107,8,80,49,1,51,0,0,109,8,84,51,1,49,0,0,109,8,88,49,1,49,11,0,85,4,49,0,135,49,5,0,31,0,0,0,78,49,7,0,34,49,49,0,121,49,4,0,82,51,32,0,135,49,9,0,51,0,0,0,25,6,1,64,1,49,0,0,132,0,0,49,135,49,3,0,45,33,8,0,130,49,0,0,0,34,49,0,1,49,0,0,132,0,0,49,38,49,34,1,121,49,3,0,135,4,4,0,119,0,65,0,85,33,44,0,25,4,1,68,82,5,4,0,106,49,1,72,48,49,5,49,80,122,0,0,1,49,0,0,132,0,0,49,106,51,33,4,135,49,3,0,45,5,51,0,130,49,0,0,0,38,49,0,1,49,0,0,132,0,0,49,38,49,38,1,121,49,3,0,1,38,137,0,119,0,20,0,85,5,44,0,82,49,4,0,25,49,49,8,85,4,49,0,1,38,110,0,119,0,14,0,1,49,0,0,132,0,0,49,135,49,3,0,46,6,33,0,130,49,0,0,0,38,49,0,1,49,0,0,132,0,0,49,38,49,38,1,121,49,3,0,1,38,137,0,119,0,2,0,1,38,110,0,32,49,38,110,121,49,8,0,135,49,5,0,33,0,0,0,135,49,5,0,35,0,0,0,135,49,5,0,37,0,0,0,119,0,191,1,45,49,38,43,192,122,0,0,135,4,4,0,135,49,5,0,33,0,0,0,119,0,12,0,119,0,11,0,135,49,5,0,31,0,0,0,78,49,7,0,34,49,49,0,121,49,4,0,82,51,32,0,135,49,9,0,51,0,0,0,135,49,9,0,8,0,0,0,135,49,5,0,35,0,0,0,119,0,3,0,135,49,9,0,10,0,0,0,32,49,38,124,121,49,2,0,135,4,4,0,135,49,5,0,37,0,0,0,119,0,74,2,135,4,4,0,78,49,6,0,34,49,49,0,121,49,8,0,82,51,25,0,135,49,9,0,51,0,0,0,135,49,5,0,24,0,0,0,121,5,64,2,119,0,5,0,135,49,5,0,24,0,0,0,121,5,60,2,119,0,1,0,135,49,9,0,7,0,0,0,119,0,56,2,1,49,0,0,102,51,20,11,56,49,49,51,124,123,0,0,82,51,20,0,135,49,9,0,51,0,0,0,135,49,9,0,5,0,0,0,119,0,46,2,1,49,0,0,132,0,0,49,1,51,197,1,135,49,3,0,51,21,41,0,130,49,0,0,0,32,49,0,1,49,0,0,132,0,0,49,38,49,32,1,121,49,3,0,135,4,4,0,119,0,33,2,1,49,0,0,132,0,0,49,1,51,197,1,135,49,3,0,51,19,3,0,130,49,0,0,0,32,49,0,1,49,0,0,132,0,0,49,38,49,32,1,121,49,3,0,135,4,4,0,119,0,97,1,1,49,0,0,132,0,0,49,1,51,93,0,135,49,7,0,51,34,21,19,130,49,0,0,0,32,49,0,1,49,0,0,132,0,0,49,38,49,32,1,121,49,10,0,135,4,4,0,1,49,0,0,102,51,19,11,56,49,49,51,112,129,0,0,82,51,19,0,135,49,9,0,51,0,0,0,119,0,77,1,102,49,19,11,34,49,49,0,121,49,4,0,82,51,19,0,135,49,9,0,51,0,0,0,102,49,21,11,34,49,49,0,121,49,4,0,82,51,21,0,135,49,9,0,51,0,0,0,1,49,0,0,132,0,0,49,0,4,33,0,0,9,30,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,49,4,11,132,124,0,0,1,51,19,0,135,49,11,0,51,37,0,34,33,0,0,0,130,49,0,0,0,32,49,0,1,49,0,0,132,0,0,49,38,49,32,1,121,49,3,0,135,4,4,0,119,0,21,1,25,6,37,36,25,7,6,11,78,32,7,0,41,51,32,24,42,51,51,24,34,51,51,0,121,51,4,0,106,51,37,40,0,49,51,0,119,0,4,0,1,51,255,0,19,51,32,51,0,49,51,0,120,49,145,0,1,49,0,0,132,0,0,49,1,51,90,0,2,48,0,0,1,143,0,0,135,49,7,0,51,27,48,41,130,49,0,0,0,32,49,0,1,49,0,0,132,0,0,49,38,49,32,1,121,49,3,0,135,4,4,0,119,0,131,0,1,49,0,0,132,0,0,49,1,49,209,3,2,48,0,0,42,143,0,0,135,4,23,0,49,27,48,0,130,48,0,0,0,32,48,0,1,48,0,0,132,0,0,48,38,48,32,1,121,48,3,0,135,4,4,0,119,0,107,0,116,35,4,0,106,49,4,4,109,35,4,49,106,48,4,8,109,35,8,48,1,48,0,0,85,4,48,0,1,49,0,0,109,4,4,49,1,48,0,0,109,4,8,48,102,4,3,11,41,48,4,24,42,48,48,24,34,32,48,0,1,48,0,0,132,0,0,48,1,48,41,0,121,32,4,0,82,51,3,0,0,49,51,0,119,0,2,0,0,49,3,0,121,32,4,0,106,50,3,4,0,51,50,0,119,0,4,0,1,50,255,0,19,50,4,50,0,51,50,0,135,4,2,0,48,35,49,51,130,51,0,0,0,32,51,0,1,51,0,0,132,0,0,51,38,51,32,1,121,51,3,0,135,4,4,0,119,0,60,0,116,26,4,0,106,49,4,4,109,26,4,49,106,51,4,8,109,26,8,51,1,51,0,0,85,4,51,0,1,49,0,0,109,4,4,49,1,51,0,0,109,4,8,51,1,51,0,0,132,0,0,51,0,4,33,0,0,9,30,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,51,4,11,88,126,0,0,1,49,221,1,135,51,3,0,49,26,33,0,130,51,0,0,0,33,51,0,1,51,0,0,132,0,0,51,38,51,33,1,121,51,10,0,135,4,4,0,1,51,0,0,102,49,26,11,56,51,51,49,4,127,0,0,82,49,26,0,135,51,9,0,49,0,0,0,119,0,21,0,102,51,26,11,34,51,51,0,121,51,4,0,82,49,26,0,135,51,9,0,49,0,0,0,102,51,35,11,34,51,51,0,121,51,4,0,82,49,35,0,135,51,9,0,49,0,0,0,102,51,27,11,34,51,51,0,121,51,4,0,82,49,27,0,135,51,9,0,49,0,0,0,1,38,179,0,119,0,17,0,1,51,0,0,102,49,35,11,56,51,51,49,32,127,0,0,82,49,35,0,135,51,9,0,49,0,0,0,1,51,0,0,102,49,27,11,56,51,51,49,68,127,0,0,82,49,27,0,135,51,9,0,49,0,0,0,119,0,2,0,1,38,179,0,1,51,179,0,45,51,38,51,172,128,0,0,25,4,1,80,82,5,4,0,106,51,1,84,45,51,5,51,156,127,0,0,1,51,0,0,132,0,0,51,1,49,36,2,25,48,1,76,135,51,3,0,49,48,37,0,130,51,0,0,0,35,51,0,1,51,0,0,132,0,0,51,38,51,35,1,121,51,19,0,1,38,198,0,119,0,17,0,1,51,0,0,132,0,0,51,1,48,210,1,135,51,3,0,48,5,37,0,130,51,0,0,0,35,51,0,1,51,0,0,132,0,0,51,38,51,35,1,121,51,3,0,1,38,198,0,119,0,4,0,82,51,4,0,25,51,51,48,85,4,51,0,1,51,198,0,45,51,38,51,240,127,0,0,135,4,4,0,119,0,48,0,78,51,7,0,34,51,51,0,121,51,4,0,82,48,6,0,135,51,9,0,48,0,0,0,25,4,37,24,102,51,4,11,34,51,51,0,121,51,4,0,82,48,4,0,135,51,9,0,48,0,0,0,25,4,37,12,102,51,4,11,34,51,51,0,121,51,4,0,82,48,4,0,135,51,9,0,48,0,0,0,102,51,37,11,34,51,51,0,121,51,4,0,82,48,37,0,135,51,9,0,48,0,0,0,25,4,34,24,102,51,4,11,34,51,51,0,121,51,4,0,82,48,4,0,135,51,9,0,48,0,0,0,25,4,34,12,102,51,4,11,34,51,51,0,121,51,4,0,82,48,4,0,135,51,9,0,48,0,0,0,102,51,34,11,34,51,51,0,121,51,66,0,82,48,34,0,135,51,9,0,48,0,0,0,119,0,62,0,78,51,7,0,34,51,51,0,121,51,4,0,82,48,6,0,135,51,9,0,48,0,0,0,25,5,37,24,102,51,5,11,34,51,51,0,121,51,4,0,82,48,5,0,135,51,9,0,48,0,0,0,25,5,37,12,102,51,5,11,34,51,51,0,121,51,4,0,82,48,5,0,135,51,9,0,48,0,0,0,1,51,0,0,102,48,37,11,56,51,51,48,24,129,0,0,82,48,37,0,135,51,9,0,48,0,0,0,25,5,34,24,102,51,5,11,34,51,51,0,121,51,4,0,82,48,5,0,135,51,9,0,48,0,0,0,25,5,34,12,102,51,5,11,34,51,51,0,121,51,4,0,82,48,5,0,135,51,9,0,48,0,0,0,1,51,0,0,102,48,34,11,56,51,51,48,60,132,0,0,82,48,34,0,135,51,9,0,48,0,0,0,119,0,180,0,102,51,21,11,34,51,51,0,121,51,177,0,82,48,21,0,135,51,9,0,48,0,0,0,119,0,173,0,1,38,34,0,119,0,4,0,1,38,34,0,119,0,2,0,1,38,34,0,32,51,38,34,121,51,4,0,135,51,5,0,13,0,0,0,1,38,38,0,32,51,38,38,121,51,144,0,25,6,1,64,1,51,0,0,132,0,0,51,1,51,58,1,1,48,80,0,135,7,8,0,51,48,0,0,130,48,0,0,0,37,48,0,1,48,0,0,132,0,0,48,38,48,37,1,121,48,3,0,135,4,4,0,119,0,146,0,0,4,14,0,0,9,15,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,48,4,11,4,130,0,0,1,48,0,0,132,0,0,48,1,51,197,1,135,48,3,0,51,22,2,0,130,48,0,0,0,37,48,0,1,48,0,0,132,0,0,48,38,48,37,1,121,48,3,0,135,4,4,0,119,0,105,0,1,48,0,0,132,0,0,48,0,4,33,0,0,9,14,0,25,11,4,40,116,4,9,0,25,4,4,4,25,9,9,4,54,48,4,11,96,130,0,0,1,51,2,0,1,49,0,0,1,50,0,0,1,52,0,0,1,53,1,0,135,48,24,0,51,7,33,22,49,50,52,53,130,48,0,0,0,37,48,0,1,48,0,0,132,0,0,48,38,48,37,1,121,48,4,0,1,5,1,0,1,38,53,0,119,0,65,0,1,48,0,0,132,0,0,48,135,48,3,0,45,34,7,0,130,48,0,0,0,37,48,0,1,48,0,0,132,0,0,48,38,48,37,1,121,48,4,0,1,5,0,0,1,38,53,0,119,0,52,0,85,34,44,0,25,4,1,68,82,5,4,0,106,48,1,72,48,48,5,48,76,131,0,0,1,48,0,0,132,0,0,48,106,53,34,4,135,48,3,0,45,5,53,0,130,48,0,0,0,37,48,0,1,48,0,0,132,0,0,48,38,48,37,1,121,48,3,0,1,38,54,0,119,0,17,0,85,5,44,0,82,48,4,0,25,48,48,8,85,4,48,0,119,0,12,0,1,48,0,0,132,0,0,48,135,48,3,0,46,6,34,0,130,48,0,0,0,37,48,0,1,48,0,0,132,0,0,48,38,48,37,1,121,48,2,0,1,38,54,0,32,48,38,54,121,48,6,0,135,4,4,0,135,48,5,0,34,0,0,0,1,5,0,0,119,0,10,0,135,48,5,0,34,0,0,0,102,48,22,11,34,48,48,0,121,48,21,0,82,53,22,0,135,48,9,0,53,0,0,0,119,0,17,0,32,48,38,53,121,48,2,0,135,4,4,0,102,48,22,11,34,48,48,0,121,48,6,0,82,53,22,0,135,48,9,0,53,0,0,0,121,5,24,0,119,0,3,0,121,5,22,0,119,0,1,0,135,48,9,0,7,0,0,0,119,0,18,0,78,48,39,0,34,48,48,0,121,48,4,0,82,53,42,0,135,48,9,0,53,0,0,0,1,48,0,0,78,53,40,0,49,48,48,53,40,132,0,0,137,36,0,0,139,0,0,0,82,53,41,0,135,48,9,0,53,0,0,0,137,36,0,0,139,0,0,0,78,48,39,0,34,48,48,0,121,48,4,0,82,53,42,0,135,48,9,0,53,0,0,0,1,48,0,0,78,53,40,0,49,48,48,53,108,132,0,0,135,48,6,0,4,0,0,0,82,53,41,0,135,48,9,0,53,0,0,0,135,48,6,0,4,0,0,0,139,0,0,0,140,7,113,0,0,0,0,0,2,99,0,0,239,255,255,255,2,100,0,0,58,1,0,0,2,101,0,0,0,0,0,128,2,102,0,0,197,1,0,0,2,103,0,0,188,0,0,0,2,104,0,0,134,0,0,0,2,105,0,0,181,0,0,0,2,106,0,0,157,0,0,0,2,107,0,0,161,0,0,0,2,108,0,0,221,1,0,0,1,88,0,0,136,109,0,0,0,83,109,0,136,109,0,0,1,110,144,1,3,109,109,110,137,109,0,0,1,109,96,1,3,90,83,109,1,109,68,1,3,98,83,109,1,109,168,0,3,96,83,109,1,109,80,1,3,87,83,109,1,109,56,1,3,72,83,109,1,109,152,0,3,84,83,109,25,73,83,80,1,109,140,0,3,74,83,109,1,109,128,0,3,75,83,109,25,48,83,40,25,49,83,32,25,76,83,20,0,50,83,0,25,85,83,8,82,8,5,0,106,20,5,4,45,109,8,20,108,133,0,0,1,98,0,0,137,83,0,0,139,98,0,0,25,21,1,11,1,109,44,1,3,22,0,109,40,109,6,1,0,19,109,0,25,89,96,64,25,23,96,8,25,77,96,12,25,24,96,4,25,25,96,64,1,109,136,0,3,26,96,109,1,109,140,0,3,27,96,109,25,78,96,44,25,28,96,60,25,51,90,11,25,52,96,8,25,97,98,11,25,29,98,4,25,79,78,11,25,53,72,11,25,80,87,11,25,54,76,11,25,30,4,80,25,31,4,84,25,32,4,76,25,33,50,4,25,55,73,36,25,56,55,11,25,57,73,24,25,58,57,11,25,59,73,12,25,60,59,11,25,61,73,11,25,86,90,11,25,34,90,8,25,35,90,4,25,81,85,11,25,62,90,11,25,36,90,8,25,37,90,4,25,38,85,8,25,39,85,4,25,91,96,24,25,92,91,11,25,93,96,12,25,94,93,11,25,95,96,11,25,40,73,4,25,63,90,36,25,64,63,11,25,65,90,24,25,66,65,11,25,67,90,12,25,68,67,11,25,69,90,11,25,82,84,11,25,70,74,11,25,41,74,8,25,42,74,4,25,71,75,11,25,43,75,8,25,44,75,4,25,45,72,8,25,46,72,4,1,5,0,0,1,7,0,0,82,109,8,0,135,18,25,0,109,0,0,0,1,109,255,0,19,109,18,109,78,111,21,0,34,111,111,0,121,111,4,0,82,111,1,0,0,110,111,0,119,0,2,0,0,110,1,0,82,111,8,0,82,112,22,0,135,18,26,0,109,110,111,112,121,18,222,3,82,109,18,0,121,109,213,3,0,17,18,0,25,7,7,1,135,109,27,0,98,1,0,0,33,109,7,0,19,109,109,19,121,109,208,0,1,109,156,67,85,23,109,0,1,109,156,12,85,96,109,0,1,109,176,12,85,89,109,0,1,109,0,0,85,24,109,0,1,109,0,0,132,0,0,109,1,112,11,2,135,109,3,0,112,25,77,0,130,109,0,0,0,16,109,0,1,109,0,0,132,0,0,109,38,109,16,1,121,109,3,0,1,88,16,0,119,0,198,3,1,109,0,0,85,26,109,0,1,109,255,255,85,27,109,0,1,109,136,67,85,96,109,0,1,109,176,67,85,89,109,0,1,109,156,67,85,23,109,0,1,109,0,0,132,0,0,109,1,112,180,1,135,109,1,0,112,77,0,0,130,109,0,0,0,16,109,0,1,109,0,0,132,0,0,109,38,109,16,1,121,109,3,0,1,88,17,0,119,0,175,3,1,109,252,66,85,77,109,0,1,109,0,0,85,78,109,0,1,112,0,0,109,78,4,112,1,109,0,0,109,78,8,109,1,112,0,0,109,78,12,112,1,112,24,0,85,28,112,0,1,112,0,0,85,90,112,0,1,109,0,0,109,90,4,109,1,112,0,0,109,90,8,112,1,112,0,0,132,0,0,112,1,109,12,2,135,112,3,0,109,77,90,0,130,112,0,0,0,16,112,0,1,112,0,0,132,0,0,112,38,112,16,1,121,112,3,0,1,88,11,0,119,0,144,3,78,112,51,0,34,112,112,0,121,112,4,0,82,109,90,0,135,112,9,0,109,0,0,0,78,5,97,0,41,112,5,24,42,112,112,24,34,16,112,0,1,112,0,0,132,0,0,112,1,112,46,0,121,16,4,0,82,111,98,0,0,109,111,0,119,0,2,0,0,109,98,0,121,16,4,0,82,110,29,0,0,111,110,0,119,0,4,0,1,110,255,0,19,110,5,110,0,111,110,0,135,5,2,0,112,52,109,111,130,111,0,0,0,16,111,0,1,111,0,0,132,0,0,111,38,111,16,1,121,111,3,0,1,88,32,0,119,0,109,3,1,111,0,0,132,0,0,111,1,111,46,0,2,109,0,0,7,208,0,0,1,112,1,0,135,5,2,0,111,5,109,112,130,112,0,0,0,16,112,0,1,112,0,0,132,0,0,112,38,112,16,1,121,112,3,0,1,88,32,0,119,0,93,3,1,112,0,0,132,0,0,112,1,109,211,3,135,112,23,0,109,5,7,0,130,112,0,0,0,16,112,0,1,112,0,0,132,0,0,112,38,112,16,1,121,112,3,0,1,88,32,0,119,0,80,3,1,112,0,0,132,0,0,112,1,109,13,2,135,112,3,0,109,90,77,0,130,112,0,0,0,16,112,0,1,112,0,0,132,0,0,112,38,112,16,1,121,112,3,0,1,88,33,0,119,0,67,3,78,112,97,0,34,112,112,0,121,112,7,0,82,112,98,0,1,109,0,0,83,112,109,0,1,109,0,0,85,29,109,0,119,0,5,0,1,109,0,0,83,98,109,0,1,109,0,0,83,97,109,0,1,109,0,0,132,0,0,109,1,112,239,1,1,111,0,0,135,109,3,0,112,98,111,0,130,109,0,0,0,16,109,0,1,109,0,0,132,0,0,109,38,109,16,1,121,109,3,0,1,88,27,0,119,0,40,3,116,98,90,0,106,111,90,4,109,98,4,111,106,109,90,8,109,98,8,109,78,16,79,0,1,109,136,67,85,96,109,0,1,109,176,67,85,89,109,0,1,109,156,67,85,52,109,0,1,109,252,66,85,77,109,0,41,109,16,24,42,109,109,24,34,109,109,0,121,109,4,0,82,111,78,0,135,109,9,0,111,0,0,0,135,109,28,0,77,0,0,0,1,111,188,67,135,109,29,0,96,111,0,0,135,109,30,0,89,0,0,0,1,109,0,0,132,0,0,109,135,109,3,0,102,87,98,0,130,109,0,0,0,16,109,0,1,109,0,0,132,0,0,109,38,109,16,1,121,109,3,0,1,88,73,0,119,0,0,3,1,109,0,0,85,72,109,0,1,111,0,0,109,72,4,111,1,109,0,0,109,72,8,109,135,10,17,0,2,0,0,0,48,109,99,10,128,138,0,0,1,88,40,0,119,0,244,2,35,109,10,11,121,109,8,0,83,53,10,0,120,10,3,0,0,5,72,0,119,0,24,0,0,5,72,0,1,88,45,0,119,0,21,0,25,109,10,16,38,109,109,240,0,9,109,0,1,109,0,0,132,0,0,109,135,5,8,0,100,9,0,0,130,109,0,0,0,88,109,0,1,109,0,0,132,0,0,109,38,109,88,1,121,109,3,0,1,88,74,0,119,0,220,2,85,72,5,0,20,109,9,101,85,45,109,0,85,46,10,0,1,88,45,0,32,109,88,45,121,109,4,0,1,88,0,0,135,109,18,0,5,2,10,0,1,111,0,0,95,5,10,111,1,111,0,0,132,0,0,111,1,109,93,0,135,111,7,0,109,96,87,72,130,111,0,0,0,16,111,0,1,111,0,0,132,0,0,111,38,111,16,1,121,111,3,0,1,88,75,0,119,0,195,2,78,111,53,0,34,111,111,0,121,111,4,0,82,109,72,0,135,111,9,0,109,0,0,0,78,111,80,0,34,111,111,0,121,111,4,0,82,109,87,0,135,111,9,0,109,0,0,0,82,5,17,0,1,111,0,0,132,0,0,111,1,111,63,1,135,16,8,0,111,5,0,0,130,111,0,0,0,15,111,0,1,111,0,0,132,0,0,111,38,111,15,1,121,111,3,0,1,88,79,0,119,0,169,2,1,111,0,0,132,0,0,111,1,111,64,1,135,13,8,0,111,5,0,0,130,111,0,0,0,15,111,0,1,111,0,0,132,0,0,111,38,111,15,1,121,111,3,0,1,88,80,0,119,0,156,2,1,111,0,0,132,0,0,111,1,111,68,1,135,11,8,0,111,5,0,0,130,111,0,0,0,15,111,0,1,111,0,0,132,0,0,111,38,111,15,1,121,111,3,0,1,88,81,0,119,0,143,2,1,111,0,0,132,0,0,111,1,111,69,1,135,12,8,0,111,5,0,0,130,111,0,0,0,15,111,0,1,111,0,0,132,0,0,111,38,111,15,1,121,111,3,0,1,88,82,0,119,0,130,2,1,111,0,0,132,0,0,111,1,111,70,1,135,15,8,0,111,5,0,0,130,111,0,0,0,14,111,0,1,111,0,0,132,0,0,111,38,111,14,1,121,111,3,0,1,88,83,0,119,0,117,2,1,111,0,0,132,0,0,111,1,111,71,1,135,14,8,0,111,5,0,0,130,111,0,0,0,10,111,0,1,111,0,0,132,0,0,111,38,111,10,1,121,111,3,0,1,88,84,0,119,0,104,2,33,5,16,0,120,14,44,1,120,5,127,0,120,15,2,0,119,0,58,2,1,111,0,0,85,85,111,0,1,109,0,0,109,85,4,109,1,111,0,0,109,85,8,111,135,10,17,0,15,0,0,0,48,111,99,10,244,140,0,0,1,88,176,0,119,0,87,2,35,111,10,11,121,111,8,0,83,81,10,0,120,10,3,0,0,5,85,0,119,0,24,0,0,5,85,0,1,88,181,0,119,0,21,0,25,111,10,16,38,111,111,240,0,9,111,0,1,111,0,0,132,0,0,111,135,5,8,0,100,9,0,0,130,111,0,0,0,88,111,0,1,111,0,0,132,0,0,111,38,111,88,1,121,111,3,0,1,88,84,0,119,0,63,2,85,85,5,0,20,111,9,101,85,38,111,0,85,39,10,0,1,88,181,0,45,111,88,105,124,141,0,0,1,88,0,0,135,111,18,0,5,15,10,0,1,109,0,0,95,5,10,109,1,109,0,0,85,90,109,0,1,111,0,0,109,90,4,111,1,109,0,0,109,90,8,109,135,10,17,0,2,0,0,0,48,109,99,10,180,141,0,0,1,88,183,0,119,0,39,2,35,109,10,11,121,109,8,0,83,62,10,0,120,10,3,0,0,5,90,0,119,0,24,0,0,5,90,0,1,88,188,0,119,0,21,0,25,109,10,16,38,109,109,240,0,9,109,0,1,109,0,0,132,0,0,109,135,5,8,0,100,9,0,0,130,109,0,0,0,88,109,0,1,109,0,0,132,0,0,109,38,109,88,1,121,109,3,0,1,88,194,0,119,0,15,2,85,90,5,0,20,109,9,101,85,36,109,0,85,37,10,0,1,88,188,0,45,109,88,103,60,142,0,0,1,88,0,0,135,109,18,0,5,2,10,0,1,111,0,0,95,5,10,111,1,111,0,0,132,0,0,111,1,109,20,0,135,111,11,0,109,0,4,85,90,0,0,0,130,111,0,0,0,16,111,0,1,111,0,0,132,0,0,111,38,111,16,1,121,111,3,0,1,88,195,0,119,0,245,1,78,111,62,0,34,111,111,0,121,111,4,0,82,109,90,0,135,111,9,0,109,0,0,0,1,111,0,0,78,109,81,0,56,111,111,109,168,149,0,0,82,109,85,0,135,111,9,0,109,0,0,0,119,0,190,1,120,15,13,0,1,111,0,0,132,0,0,111,135,111,3,0,102,90,98,0,130,111,0,0,0,15,111,0,1,111,0,0,132,0,0,111,38,111,15,1,121,111,51,0,1,88,157,0,119,0,218,1,1,111,0,0,85,90,111,0,1,109,0,0,109,90,4,109,1,111,0,0,109,90,8,111,135,10,17,0,15,0,0,0,48,111,99,10,24,143,0,0,1,88,129,0,119,0,206,1,35,111,10,11,121,111,8,0,83,86,10,0,120,10,3,0,0,5,90,0,119,0,24,0,0,5,90,0,1,88,134,0,119,0,21,0,25,111,10,16,38,111,111,240,0,9,111,0,1,111,0,0,132,0,0,111,135,5,8,0,100,9,0,0,130,111,0,0,0,88,111,0,1,111,0,0,132,0,0,111,38,111,88,1,121,111,3,0,1,88,157,0,119,0,182,1,85,90,5,0,20,111,9,101,85,34,111,0,85,35,10,0,1,88,134,0,45,111,88,104,160,143,0,0,1,88,0,0,135,111,18,0,5,15,10,0,1,109,0,0,95,5,10,109,1,109,0,0,132,0,0,109,135,109,3,0,102,76,90,0,130,109,0,0,0,15,109,0,1,109,0,0,132,0,0,109,38,109,15,1,121,109,3,0,1,88,158,0,119,0,158,1,1,109,0,0,132,0,0,109,1,111,94,0,135,109,7,0,111,73,96,76,130,109,0,0,0,15,109,0,1,109,0,0,132,0,0,109,38,109,15,1,121,109,3,0,1,88,159,0,119,0,145,1,78,109,54,0,34,109,109,0,121,109,4,0,82,111,76,0,135,109,9,0,111,0,0,0,82,5,30,0,82,109,31,0,45,109,5,109,104,144,0,0,1,109,0,0,132,0,0,109,1,111,36,2,135,109,3,0,111,32,73,0,130,109,0,0,0,15,109,0,1,109,0,0,132,0,0,109,38,109,15,1,121,109,19,0,1,88,161,0,119,0,122,1,1,109,0,0,132,0,0,109,1,111,210,1,135,109,3,0,111,5,73,0,130,109,0,0,0,15,109,0,1,109,0,0,132,0,0,109,38,109,15,1,121,109,3,0,1,88,161,0,119,0,109,1,82,109,30,0,25,109,109,48,85,30,109,0,85,50,16,0,85,33,13,0,1,109,0,0,132,0,0,109,1,111,15,0,135,109,11,0,111,0,73,50,3,0,0,0,130,109,0,0,0,16,109,0,1,109,0,0,132,0,0,109,38,109,16,1,121,109,3,0,1,88,162,0,119,0,90,1,78,109,56,0,34,109,109,0,121,109,4,0,82,111,55,0,135,109,9,0,111,0,0,0,78,109,58,0,34,109,109,0,121,109,4,0,82,111,57,0,135,109,9,0,111,0,0,0,78,109,60,0,34,109,109,0,121,109,4,0,82,111,59,0,135,109,9,0,111,0,0,0,78,109,61,0,34,109,109,0,121,109,4,0,82,111,73,0,135,109,9,0,111,0,0,0,78,109,86,0,34,109,109,0,121,109,22,1,82,111,90,0,135,109,9,0,111,0,0,0,119,0,18,1,33,109,13,0,20,109,5,109,121,109,72,0,1,109,0,0,132,0,0,109,135,109,3,0,102,84,98,0,130,109,0,0,0,15,109,0,1,109,0,0,132,0,0,109,38,109,15,1,121,109,3,0,1,88,85,0,119,0,44,1,1,109,0,0,132,0,0,109,1,111,94,0,135,109,7,0,111,90,96,84,130,109,0,0,0,15,109,0,1,109,0,0,132,0,0,109,38,109,15,1,121,109,3,0,1,88,86,0,119,0,31,1,85,73,16,0,85,40,13,0,1,109,0,0,132,0,0,109,1,111,15,0,135,109,11,0,111,0,90,73,3,0,0,0,130,109,0,0,0,15,109,0,1,109,0,0,132,0,0,109,38,109,15,1,121,109,3,0,1,88,87,0,119,0,15,1,78,109,64,0,34,109,109,0,121,109,4,0,82,111,63,0,135,109,9,0,111,0,0,0,78,109,66,0,34,109,109,0,121,109,4,0,82,111,65,0,135,109,9,0,111,0,0,0,78,109,68,0,34,109,109,0,121,109,4,0,82,111,67,0,135,109,9,0,111,0,0,0,78,109,69,0,34,109,109,0,121,109,4,0,82,111,90,0,135,109,9,0,111,0,0,0,78,109,82,0,34,109,109,0,121,109,4,0,82,111,84,0,135,109,9,0,111,0,0,0,19,109,12,11,32,109,109,255,121,109,77,0,1,109,0,0,85,74,109,0,1,111,0,0,109,74,4,111,1,109,0,0,109,74,8,109,135,10,17,0,14,0,0,0,48,109,99,10,200,146,0,0,1,88,100,0,119,0,226,0,35,109,10,11,121,109,8,0,83,70,10,0,120,10,3,0,0,5,74,0,119,0,24,0,0,5,74,0,1,88,105,0,119,0,21,0,25,109,10,16,38,109,109,240,0,9,109,0,1,109,0,0,132,0,0,109,135,5,8,0,100,9,0,0,130,109,0,0,0,88,109,0,1,109,0,0,132,0,0,109,38,109,88,1,121,109,3,0,1,88,84,0,119,0,202,0,85,74,5,0,20,109,9,101,85,41,109,0,85,42,10,0,1,88,105,0,32,109,88,105,121,109,4,0,1,88,0,0,135,109,18,0,5,14,10,0,1,111,0,0,95,5,10,111,1,111,0,0,132,0,0,111,0,5,90,0,0,9,3,0,25,10,5,40,116,5,9,0,25,5,5,4,25,9,9,4,54,111,5,10,108,147,0,0,135,111,3,0,108,74,90,0,130,111,0,0,0,16,111,0,1,111,0,0,132,0,0,111,38,111,16,1,121,111,3,0,1,88,109,0,119,0,170,0,1,111,0,0,78,109,70,0,56,111,111,109,168,149,0,0,82,109,74,0,135,111,9,0,109,0,0,0,119,0,121,0,1,111,0,0,85,75,111,0,1,109,0,0,109,75,4,109,1,111,0,0,109,75,8,111,135,10,17,0,14,0,0,0,48,111,99,10,248,147,0,0,1,88,112,0,119,0,150,0,35,111,10,11,121,111,8,0,83,71,10,0,120,10,3,0,0,5,75,0,119,0,24,0,0,5,75,0,1,88,117,0,119,0,21,0,25,111,10,16,38,111,111,240,0,9,111,0,1,111,0,0,132,0,0,111,135,5,8,0,100,9,0,0,130,111,0,0,0,88,111,0,1,111,0,0,132,0,0,111,38,111,88,1,121,111,3,0,1,88,84,0,119,0,126,0,85,75,5,0,20,111,9,101,85,43,111,0,85,44,10,0,1,88,117,0,32,111,88,117,121,111,4,0,1,88,0,0,135,111,18,0,5,14,10,0,1,109,0,0,95,5,10,109,1,109,0,0,132,0,0,109,1,111,97,0,135,109,7,0,111,73,11,12,130,109,0,0,0,15,109,0,1,109,0,0,132,0,0,109,38,109,15,1,121,109,3,0,1,88,124,0,119,0,101,0,1,109,0,0,132,0,0,109,1,111,98,0,1,112,0,0,1,110,0,0,135,109,7,0,111,49,112,110,130,109,0,0,0,15,109,0,1,109,0,0,132,0,0,109,38,109,15,1,121,109,3,0,1,88,124,0,119,0,86,0,1,109,0,0,132,0,0,109,116,90,49,0,106,110,49,4,109,90,4,110,1,109,7,0,135,110,10,0,109,48,2,16,73,90,0,0,130,110,0,0,0,16,110,0,1,110,0,0,132,0,0,110,38,110,16,1,121,110,3,0,1,88,124,0,119,0,69,0,1,110,0,0,132,0,0,110,0,5,90,0,0,9,48,0,25,10,5,40,116,5,9,0,25,5,5,4,25,9,9,4,54,110,5,10,80,149,0,0,135,110,3,0,108,75,90,0,130,110,0,0,0,16,110,0,1,110,0,0,132,0,0,110,38,110,16,1,121,110,3,0,1,88,124,0,119,0,49,0,1,110,0,0,78,109,71,0,56,110,110,109,168,149,0,0,82,109,75,0,135,110,9,0,109,0,0,0,25,17,17,4,78,110,92,0,34,110,110,0,121,110,4,0,82,109,91,0,135,110,9,0,109,0,0,0,78,110,94,0,34,110,110,0,121,110,4,0,82,109,93,0,135,110,9,0,109,0,0,0,78,110,95,0,34,110,110,0,121,110,4,0,82,109,96,0,135,110,9,0,109,0,0,0,78,110,97,0,34,110,110,0,121,110,4,0,82,109,98,0,135,110,9,0,109,0,0,0,82,110,17,0,33,110,110,0,120,110,46,252,135,110,31,0,18,0,0,0,121,6,4,0,1,5,1,0,1,88,220,0,119,0,8,0,1,5,1,0,25,8,8,4,45,110,8,20,72,150,0,0,1,88,220,0,119,0,2,0,119,0,13,252,1,110,11,0,1,109,210,0,138,88,110,109,164,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,232,153,0,0,244,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,0,154,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,24,154,0,0,36,154,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,48,154,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,84,154,0,0,160,153,0,0,96,154,0,0,160,153,0,0,160,153,0,0,160,153,0,0,140,154,0,0,152,154,0,0,164,154,0,0,176,154,0,0,188,154,0,0,160,153,0,0,200,154,0,0,212,154,0,0,224,154,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,84,155,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,120,155,0,0,160,153,0,0,160,153,0,0,164,155,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,200,155,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,244,155,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,24,156,0,0,36,156,0,0,160,153,0,0,80,156,0,0,92,156,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,104,156,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,140,156,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,176,156,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,160,153,0,0,220,156,0,0,119,0,210,0,135,5,4,0,78,110,51,0,34,110,110,0,121,110,4,0,82,109,90,0,135,110,9,0,109,0,0,0,78,110,79,0,34,110,110,0,121,110,4,0,82,109,78,0,135,110,9,0,109,0,0,0,135,110,28,0,77,0,0,0,1,88,18,0,119,0,193,0,135,5,4,0,1,88,31,0,119,0,190,0,135,5,4,0,1,88,18,0,119,0,187,0,1,112,0,0,135,109,20,0,112,0,0,0,135,110,21,0,109,0,0,0,119,0,181,0,135,5,4,0,1,88,34,0,119,0,178,0,135,5,4,0,1,88,34,0,119,0,175,0,1,110,0,0,132,0,0,110,1,109,171,1,135,110,1,0,109,72,0,0,1,110,0,0,132,0,0,110,1,88,74,0,119,0,166,0,135,5,4,0,1,88,214,0,119,0,163,0,135,5,4,0,78,110,53,0,34,110,110,0,121,110,6,0,82,109,72,0,135,110,9,0,109,0,0,0,1,88,77,0,119,0,154,0,1,88,77,0,119,0,152,0,135,5,4,0,1,88,208,0,119,0,149,0,135,5,4,0,1,88,208,0,119,0,146,0,135,5,4,0,1,88,208,0,119,0,143,0,135,5,4,0,1,88,208,0,119,0,140,0,135,5,4,0,1,88,208,0,119,0,137,0,135,5,4,0,1,88,97,0,119,0,134,0,135,5,4,0,1,88,95,0,119,0,131,0,135,5,4,0,78,110,64,0,34,110,110,0,121,110,4,0,82,109,63,0,135,110,9,0,109,0,0,0,78,110,66,0,34,110,110,0,121,110,4,0,82,109,65,0,135,110,9,0,109,0,0,0,78,110,68,0,34,110,110,0,121,110,4,0,82,109,67,0,135,110,9,0,109,0,0,0,78,110,69,0,34,110,110,0,121,110,6,0,82,109,90,0,135,110,9,0,109,0,0,0,1,88,95,0,119,0,104,0,1,88,95,0,119,0,102,0,1,110,0,0,132,0,0,110,1,109,171,1,135,110,1,0,109,74,0,0,1,110,0,0,132,0,0,110,1,88,84,0,119,0,93,0,135,5,4,0,78,110,70,0,34,110,110,0,121,110,6,0,82,109,74,0,135,110,9,0,109,0,0,0,1,88,208,0,119,0,84,0,1,88,208,0,119,0,82,0,1,110,0,0,132,0,0,110,1,109,171,1,135,110,1,0,109,75,0,0,1,110,0,0,132,0,0,110,1,88,84,0,119,0,73,0,135,5,4,0,78,110,71,0,34,110,110,0,121,110,6,0,82,109,75,0,135,110,9,0,109,0,0,0,1,88,208,0,119,0,64,0,1,88,208,0,119,0,62,0,1,110,0,0,132,0,0,110,1,109,171,1,135,110,1,0,109,90,0,0,1,110,0,0,132,0,0,110,1,88,157,0,119,0,53,0,135,5,4,0,1,88,171,0,119,0,50,0,135,5,4,0,78,110,54,0,34,110,110,0,121,110,6,0,82,109,76,0,135,110,9,0,109,0,0,0,1,88,171,0,119,0,41,0,1,88,171,0,119,0,39,0,135,5,4,0,1,88,163,0,119,0,36,0,135,5,4,0,1,88,163,0,119,0,33,0,1,110,0,0,132,0,0,110,1,109,171,1,135,110,1,0,109,85,0,0,1,110,0,0,132,0,0,110,1,88,84,0,119,0,24,0,1,110,0,0,132,0,0,110,1,109,171,1,135,110,1,0,109,90,0,0,1,110,0,0,132,0,0,110,1,88,194,0,119,0,15,0,135,5,4,0,78,110,62,0,34,110,110,0,121,110,6,0,82,109,90,0,135,110,9,0,109,0,0,0,1,88,197,0,119,0,6,0,1,88,197,0,119,0,4,0,137,83,0,0,139,5,0,0,119,0,1,0,32,110,88,18,121,110,6,0,1,109,188,67,135,110,29,0,96,109,0,0,1,88,31,0,119,0,89,0,32,110,88,34,121,110,24,0,1,110,136,67,85,96,110,0,1,110,176,67,85,89,110,0,1,110,156,67,85,52,110,0,1,110,252,66,85,77,110,0,78,110,79,0,34,110,110,0,121,110,4,0,82,109,78,0,135,110,9,0,109,0,0,0,135,110,28,0,77,0,0,0,1,109,188,67,135,110,29,0,96,109,0,0,135,110,30,0,89,0,0,0,1,88,37,0,119,0,64,0,32,110,88,74,121,110,4,0,135,5,4,0,1,88,77,0,119,0,59,0,32,110,88,84,121,110,4,0,135,5,4,0,1,88,208,0,119,0,54,0,32,110,88,95,121,110,11,0,78,110,82,0,34,110,110,0,121,110,6,0,82,109,84,0,135,110,9,0,109,0,0,0,1,88,97,0,119,0,44,0,1,88,97,0,119,0,42,0,45,110,88,106,212,157,0,0,135,5,4,0,1,88,173,0,119,0,37,0,1,110,163,0,45,110,88,110,80,158,0,0,78,110,56,0,34,110,110,0,121,110,4,0,82,109,55,0,135,110,9,0,109,0,0,0,78,110,58,0,34,110,110,0,121,110,4,0,82,109,57,0,135,110,9,0,109,0,0,0,78,110,60,0,34,110,110,0,121,110,4,0,82,109,59,0,135,110,9,0,109,0,0,0,78,110,61,0,34,110,110,0,121,110,6,0,82,109,73,0,135,110,9,0,109,0,0,0,1,88,171,0,119,0,8,0,1,88,171,0,119,0,6,0,1,110,194,0,45,110,88,110,100,158,0,0,135,5,4,0,1,88,197,0,32,110,88,31,121,110,5,0,135,110,30,0,89,0,0,0,1,88,37,0,119,0,42,0,32,110,88,77,121,110,11,0,78,110,80,0,34,110,110,0,121,110,6,0,82,109,87,0,135,110,9,0,109,0,0,0,1,88,214,0,119,0,32,0,1,88,214,0,119,0,30,0,32,110,88,97,121,110,3,0,1,88,208,0,119,0,26,0,1,110,171,0,45,110,88,110,240,158,0,0,78,110,86,0,34,110,110,0,121,110,6,0,82,109,90,0,135,110,9,0,109,0,0,0,1,88,173,0,119,0,15,0,1,88,173,0,119,0,13,0,1,110,197,0,45,110,88,110,32,159,0,0,78,110,81,0,34,110,110,0,121,110,6,0,82,109,85,0,135,110,9,0,109,0,0,0,1,88,208,0,119,0,2,0,1,88,208,0,32,110,88,37,121,110,3,0,0,47,5,0,119,0,5,0,1,110,173,0,45,110,88,110,64,159,0,0,1,88,208,0,1,110,208,0,45,110,88,110,160,159,0,0,78,110,92,0,34,110,110,0,121,110,4,0,82,109,91,0,135,110,9,0,109,0,0,0,78,110,94,0,34,110,110,0,121,110,4,0,82,109,93,0,135,110,9,0,109,0,0,0,78,110,95,0,34,110,110,0,121,110,6,0,82,109,96,0,135,110,9,0,109,0,0,0,1,88,214,0,119,0,2,0,1,88,214,0,1,110,214,0,45,110,88,110,176,159,0,0,0,47,5,0,1,110,0,0,78,109,97,0,49,110,110,109,200,159,0,0,135,110,6,0,47,0,0,0,82,109,98,0,135,110,9,0,109,0,0,0,135,110,6,0,47,0,0,0,1,110,0,0,139,110,0,0,140,4,37,0,0,0,0,0,2,29,0,0,239,255,255,255,2,30,0,0,58,1,0,0,2,31,0,0],eb+30720);HEAPU8.set([255,0,0,0,1,26,0,0,136,32,0,0,0,15,32,0,136,32,0,0,1,33,128,1,3,32,32,33,137,32,0,0,0,23,15,0,1,32,116,1,3,24,15,32,1,32,112,1,3,13,15,32,1,32,72,1,3,19,15,32,25,28,15,104,25,27,15,80,25,25,15,52,25,21,15,40,1,32,32,1,3,20,15,32,1,32,16,1,3,22,15,32,25,14,15,96,1,32,228,0,3,7,0,32,1,32,232,0,3,4,0,32,82,32,4,0,82,33,7,0,4,32,32,33,42,32,32,3,0,8,32,0,25,33,0,76,135,32,32,0,33,8,0,0,82,5,4,0,1,32,236,0,94,32,0,32,45,32,5,32,176,160,0,0,135,32,33,0,7,2,0,0,119,0,9,0,0,16,2,0,106,17,16,4,0,18,5,0,116,18,16,0,109,18,4,17,82,32,4,0,25,32,32,8,85,4,32,0,25,12,1,36,1,32,52,1,3,4,0,32,82,5,4,0,1,32,56,1,94,32,0,32,45,32,5,32,4,161,0,0,1,33,48,1,3,33,0,33,135,32,34,0,33,12,0,0,119,0,6,0,135,32,27,0,5,12,0,0,82,32,4,0,25,32,32,12,85,4,32,0,1,33,180,1,3,33,0,33,25,34,0,4,135,32,35,0,23,12,33,34,1,32,64,1,3,4,0,32,82,5,4,0,1,32,68,1,94,32,0,32,48,32,5,32,132,161,0,0,116,5,23,0,106,34,23,4,109,5,4,34,106,32,23,8,109,5,8,32,1,32,0,0,85,23,32,0,1,34,0,0,109,23,4,34,1,32,0,0,109,23,8,32,82,32,4,0,25,32,32,12,85,4,32,0,119,0,32,0,1,32,0,0,132,0,0,32,1,34,22,2,1,33,60,1,3,33,0,33,135,32,3,0,34,33,23,0,130,32,0,0,0,18,32,0,1,32,0,0,132,0,0,32,38,32,18,1,120,32,9,0,1,32,0,0,102,33,23,11,56,32,32,33,0,162,0,0,82,33,23,0,135,32,9,0,33,0,0,0,119,0,11,0,135,4,4,0,102,32,23,11,34,32,32,0,121,32,4,0,82,33,23,0,135,32,9,0,33,0,0,0,0,28,4,0,135,32,6,0,28,0,0,0,25,6,12,11,102,33,1,11,34,33,33,0,121,33,4,0,82,33,1,0,0,32,33,0,119,0,2,0,0,32,1,0,78,34,6,0,34,34,34,0,121,34,4,0,82,34,12,0,0,33,34,0,119,0,2,0,0,33,12,0,82,34,2,0,106,35,2,4,135,4,36,0,32,33,34,35,85,13,4,0,1,35,20,1,3,18,0,35,1,35,24,1,3,10,0,35,82,5,10,0,1,35,28,1,94,35,0,35,45,35,5,35,128,162,0,0,135,35,37,0,18,13,0,0,119,0,5,0,85,5,4,0,82,35,10,0,25,35,35,4,85,10,35,0,82,35,7,0,41,34,8,3,94,9,35,34,78,34,6,0,34,34,34,0,121,34,4,0,82,34,12,0,0,35,34,0,119,0,2,0,0,35,12,0,135,4,38,0,35,0,0,0,85,23,4,0,1,35,220,0,3,5,0,35,82,6,5,0,1,35,224,0,94,35,0,35,48,35,6,35,244,162,0,0,85,6,4,0,82,35,5,0,25,4,35,4,85,5,4,0,119,0,6,0,1,34,216,0,3,34,0,34,135,35,39,0,34,23,0,0,82,4,5,0,26,34,4,4,82,34,34,0,135,35,40,0,19,34,9,8,82,11,18,0,82,35,10,0,4,4,35,11,32,35,4,8,121,35,3,0,1,26,20,0,119,0,7,2,82,35,13,0,106,6,35,4,42,35,4,2,26,5,35,2,1,8,0,0,41,34,8,2,94,34,11,34,106,34,34,4,135,35,41,0,34,6,0,0,120,35,2,0,119,0,8,0,25,4,8,1,48,35,4,5,120,163,0,0,0,8,4,0,119,0,245,255,1,26,20,0,119,0,244,1,1,35,32,0,135,4,12,0,35,0,0,0,85,24,4,0,2,34,0,0,32,0,0,128,109,24,8,34,1,35,31,0,109,24,4,35,0,5,4,0,2,1,0,0,0,142,0,0,25,7,5,31,78,35,1,0,83,5,35,0,25,5,5,1,25,1,1,1,54,35,5,7,180,163,0,0,1,34,0,0,107,4,31,34,25,13,8,2,1,34,254,255,48,34,8,34,220,169,0,0,25,17,25,11,25,14,21,11,25,8,21,4,25,0,23,11,25,9,23,4,25,15,28,11,25,16,27,11,25,10,21,8,25,12,25,8,25,2,25,4,106,34,11,4,82,5,34,0,1,34,0,0,85,25,34,0,1,35,0,0,109,25,4,35,1,34,0,0,109,25,8,34,135,4,17,0,5,0,0,0,48,34,29,4,68,164,0,0,1,26,28,0,119,0,89,1,1,7,1,0,0,1,4,0,35,34,1,11,121,34,8,0,83,17,1,0,120,1,3,0,0,4,25,0,119,0,26,0,0,4,25,0,1,26,33,0,119,0,23,0,25,34,1,16,38,34,34,240,0,6,34,0,1,34,0,0,132,0,0,34,135,4,8,0,30,6,0,0,130,34,0,0,0,26,34,0,1,34,0,0,132,0,0,34,38,34,26,1,121,34,3,0,1,26,57,0,119,0,63,1,85,25,4,0,2,34,0,0,0,0,0,128,20,34,6,34,85,12,34,0,85,2,1,0,1,26,33,0,32,34,26,33,121,34,4,0,1,26,0,0,135,34,18,0,4,5,1,0,1,35,0,0,95,4,1,35,1,35,0,0,132,0,0,35,1,35,45,0,1,34,0,0,2,33,0,0,32,142,0,0,135,4,2,0,35,25,34,33,130,33,0,0,0,11,33,0,1,33,0,0,132,0,0,33,38,33,11,1,121,33,3,0,1,26,58,0,119,0,211,0,116,27,4,0,106,34,4,4,109,27,4,34,106,33,4,8,109,27,8,33,1,33,0,0,85,4,33,0,1,34,0,0,109,4,4,34,1,33,0,0,109,4,8,33,1,33,0,0,132,0,0,33,1,33,209,3,2,34,0,0,38,142,0,0,135,4,23,0,33,27,34,0,130,34,0,0,0,11,34,0,1,34,0,0,132,0,0,34,38,34,11,1,121,34,3,0,1,26,59,0,119,0,185,0,116,28,4,0,106,33,4,4,109,28,4,33,106,34,4,8,109,28,8,34,1,34,0,0,85,4,34,0,1,33,0,0,109,4,4,33,1,34,0,0,109,4,8,34,25,7,7,1,82,34,18,0,41,33,7,2,94,34,34,33,82,6,34,0,1,34,0,0,85,21,34,0,1,33,0,0,109,21,4,33,1,34,0,0,109,21,8,34,135,1,17,0,6,0,0,0,48,34,29,1,252,165,0,0,1,26,37,0,119,0,157,0,35,34,1,11,121,34,8,0,83,14,1,0,120,1,3,0,0,4,21,0,119,0,26,0,0,4,21,0,1,26,42,0,119,0,23,0,25,34,1,16,38,34,34,240,0,5,34,0,1,34,0,0,132,0,0,34,135,4,8,0,30,5,0,0,130,34,0,0,0,26,34,0,1,34,0,0,132,0,0,34,38,34,26,1,121,34,3,0,1,26,60,0,119,0,133,0,85,21,4,0,2,34,0,0,0,0,0,128,20,34,5,34,85,10,34,0,85,8,1,0,1,26,42,0,32,34,26,42,121,34,4,0,1,26,0,0,135,34,18,0,4,6,1,0,1,33,0,0,95,4,1,33,78,4,14,0,41,33,4,24,42,33,33,24,34,11,33,0,1,33,0,0,132,0,0,33,1,33,41,0,121,11,4,0,82,35,21,0,0,34,35,0,119,0,2,0,0,34,21,0,121,11,4,0,82,32,8,0,0,35,32,0,119,0,3,0,19,32,4,31,0,35,32,0,135,4,2,0,33,28,34,35,130,35,0,0,0,11,35,0,1,35,0,0,132,0,0,35,38,35,11,1,121,35,3,0,1,26,61,0,119,0,91,0,116,23,4,0,106,34,4,4,109,23,4,34,106,35,4,8,109,23,8,35,1,35,0,0,85,4,35,0,1,34,0,0,109,4,4,34,1,35,0,0,109,4,8,35,78,11,0,0,41,35,11,24,42,35,35,24,34,1,35,0,1,35,0,0,132,0,0,35,1,34,41,0,121,1,4,0,82,32,23,0,0,33,32,0,119,0,2,0,0,33,23,0,121,1,4,0,82,36,9,0,0,32,36,0,119,0,3,0,19,36,11,31,0,32,36,0,135,35,2,0,34,24,33,32,130,35,0,0,0,11,35,0,1,35,0,0,132,0,0,35,38,35,11,1,121,35,3,0,1,26,62,0,119,0,52,0,78,35,0,0,34,35,35,0,121,35,4,0,82,32,23,0,135,35,9,0,32,0,0,0,78,35,14,0,34,35,35,0,121,35,4,0,82,32,21,0,135,35,9,0,32,0,0,0,78,35,15,0,34,35,35,0,121,35,4,0,82,32,28,0,135,35,9,0,32,0,0,0,78,35,16,0,34,35,35,0,121,35,4,0,82,32,27,0,135,35,9,0,32,0,0,0,78,35,17,0,34,35,35,0,121,35,4,0,82,32,25,0,135,35,9,0,32,0,0,0,50,35,13,7,40,168,0,0,1,26,27,0,119,0,111,0,82,35,18,0,41,32,7,2,94,35,35,32,82,5,35,0,1,35,0,0,85,25,35,0,1,32,0,0,109,25,4,32,1,35,0,0,109,25,8,35,135,1,17,0,5,0,0,0,48,35,29,1,104,168,0,0,1,26,28,0,119,0,80,0,119,0,249,254,32,35,26,37,121,35,10,0,1,35,0,0,132,0,0,35,1,32,171,1,135,35,1,0,32,21,0,0,1,35,0,0,132,0,0,35,1,26,60,0,119,0,27,0,32,35,26,58,121,35,3,0,135,4,4,0,119,0,23,0,32,35,26,59,121,35,4,0,135,4,4,0,1,26,68,0,119,0,18,0,32,35,26,61,121,35,4,0,135,4,4,0,1,26,64,0,119,0,13,0,32,35,26,62,121,35,11,0,135,4,4,0,78,35,0,0,34,35,35,0,121,35,6,0,82,32,23,0,135,35,9,0,32,0,0,0,1,26,64,0,119,0,2,0,1,26,64,0,32,35,26,60,121,35,4,0,135,4,4,0,1,26,66,0,119,0,12,0,32,35,26,64,121,35,10,0,78,35,14,0,34,35,35,0,121,35,6,0,82,32,21,0,135,35,9,0,32,0,0,0,1,26,66,0,119,0,2,0,1,26,66,0,32,35,26,66,121,35,10,0,78,35,15,0,34,35,35,0,121,35,6,0,82,32,28,0,135,35,9,0,32,0,0,0,1,26,68,0,119,0,2,0,1,26,68,0,32,35,26,68,121,35,7,0,78,35,16,0,34,35,35,0,121,35,4,0,82,32,27,0,135,35,9,0,32,0,0,0,78,35,17,0,34,35,35,0,121,35,4,0,82,32,25,0,135,35,9,0,32,0,0,0,32,35,26,28,121,35,9,0,1,35,0,0,132,0,0,35,1,32,171,1,135,35,1,0,32,25,0,0,1,35,0,0,132,0,0,35,1,26,57,0,32,35,26,57,121,35,4,0,135,4,4,0,119,0,2,0,1,26,27,0,32,35,26,27,121,35,84,0,0,5,28,0,125,1,3,3,19,0,0,0,25,7,5,40,116,5,1,0,25,5,5,4,25,1,1,4,54,35,5,7,248,169,0,0,1,35,76,0,135,6,42,0,35,0,0,0,0,5,20,0,0,1,28,0,25,7,5,40,116,5,1,0,25,5,5,4,25,1,1,4,54,35,5,7,36,170,0,0,1,35,0,0,132,0,0,35,1,32,197,1,135,35,3,0,32,22,24,0,130,35,0,0,0,28,35,0,1,35,0,0,132,0,0,35,38,35,28,1,121,35,4,0,135,4,4,0,1,26,79,0,119,0,46,0,1,35,0,0,132,0,0,35,0,5,23,0,0,1,20,0,25,7,5,40,116,5,1,0,25,5,5,4,25,1,1,4,54,35,5,7,132,170,0,0,1,32,16,0,135,35,11,0,32,6,23,22,18,0,0,0,130,35,0,0,0,28,35,0,1,35,0,0,132,0,0,35,38,35,28,1,121,35,3,0,1,5,1,0,119,0,11,0,1,35,0,0,132,0,0,35,1,32,74,0,1,33,64,13,1,34,177,0,135,35,7,0,32,6,33,34,1,35,0,0,132,0,0,35,1,5,0,0,135,4,4,0,102,35,22,11,34,35,35,0,121,35,7,0,82,34,22,0,135,35,9,0,34,0,0,0,121,5,6,0,1,26,79,0,119,0,4,0,121,5,3,0,1,26,79,0,119,0,1,0,32,35,26,79,121,35,3,0,135,35,43,0,6,0,0,0,102,35,24,11,34,35,35,0,121,35,4,0,82,34,24,0,135,35,9,0,34,0,0,0,32,35,26,20,121,35,78,1,0,5,23,0,0,1,19,0,25,7,5,40,116,5,1,0,25,5,5,4,25,1,1,4,54,35,5,7,96,171,0,0,1,34,0,0,135,35,44,0,28,9,0,23,34,0,0,0,1,35,0,0,132,0,0,35,1,34,63,1,82,33,13,0,135,35,8,0,34,33,0,0,130,35,0,0,0,22,35,0,1,35,0,0,132,0,0,35,38,35,22,1,121,35,3,0,1,26,112,0,119,0,11,1,1,35,0,0,132,0,0,35,1,33,64,1,82,34,13,0,135,35,8,0,33,34,0,0,130,35,0,0,0,22,35,0,1,35,0,0,132,0,0,35,38,35,22,1,121,35,3,0,1,26,112,0,119,0,253,0,1,35,0,0,132,0,0,35,1,34,23,2,135,35,3,0,34,27,28,0,130,35,0,0,0,22,35,0,1,35,0,0,132,0,0,35,38,35,22,1,121,35,5,0,135,4,4,0,128,35,0,0,0,5,35,0,119,0,237,0,1,35,0,0,132,0,0,35,1,34,177,1,82,33,10,0,26,33,33,4,82,33,33,0,135,35,1,0,34,33,0,0,130,35,0,0,0,22,35,0,1,35,0,0,132,0,0,35,38,35,22,1,121,35,5,0,135,4,4,0,128,35,0,0,0,5,35,0,119,0,217,0,82,35,10,0,26,35,35,4,85,10,35,0,1,35,0,0,132,0,0,35,1,33,200,1,106,34,27,4,135,35,3,0,33,14,34,0,130,35,0,0,0,22,35,0,1,35,0,0,132,0,0,35,38,35,22,1,121,35,6,0,135,4,4,0,128,35,0,0,0,5,35,0,1,26,120,0,119,0,197,0,1,35,56,32,85,14,35,0,0,21,2,0,106,22,21,4,0,4,23,0,116,4,21,0,109,4,4,22,25,4,23,8,1,35,0,0,132,0,0,35,1,34,200,1,106,33,14,4,135,35,3,0,34,4,33,0,130,35,0,0,0,22,35,0,1,35,0,0,132,0,0,35,38,35,22,1,121,35,5,0,135,4,4,0,128,35,0,0,0,5,35,0,119,0,170,0,1,35,56,32,85,4,35,0,1,35,0,0,132,0,0,35,1,33,197,1,135,35,3,0,33,25,12,0,130,35,0,0,0,22,35,0,1,35,0,0,132,0,0,35,38,35,22,1,121,35,5,0,135,4,4,0,128,35,0,0,0,5,35,0,119,0,150,0,0,21,23,0,106,22,21,4,25,4,25,12,116,4,21,0,109,4,4,22,25,4,25,20,1,35,0,0,132,0,0,35,1,33,200,1,106,34,23,12,135,35,3,0,33,4,34,0,130,35,0,0,0,22,35,0,1,35,0,0,132,0,0,35,38,35,22,1,121,35,12,0,135,4,4,0,128,35,0,0,0,5,35,0,1,35,0,0,102,34,25,11,56,35,35,34,192,175,0,0,82,34,25,0,135,35,9,0,34,0,0,0,119,0,121,0,1,35,56,32,85,4,35,0,25,34,23,8,135,35,5,0,34,0,0,0,135,35,5,0,14,0,0,0,1,35,240,0,3,6,0,35,1,35,0,0,132,0,0,35,1,35,47,0,135,1,2,0,35,6,23,25,130,35,0,0,0,22,35,0,1,35,0,0,132,0,0,35,38,35,22,1,120,35,87,0,82,35,1,0,120,35,34,0,1,35,0,0,132,0,0,35,1,34,95,0,135,35,7,0,34,24,6,25,130,35,0,0,0,22,35,0,1,35,0,0,132,0,0,35,38,35,22,1,120,35,74,0,82,5,23,0,82,4,24,0,1,35,0,0,85,4,35,0,1,34,0,0,109,4,4,34,109,4,8,5,85,1,4,0,82,34,6,0,82,5,34,0,121,5,3,0,85,6,5,0,82,4,1,0,1,35,244,0,94,35,0,35,135,34,45,0,35,4,0,0,1,34,248,0,3,26,0,34,82,34,26,0,25,34,34,1,85,26,34,0,25,35,25,20,135,34,5,0,35,0,0,0,102,34,25,11,34,34,34,0,121,34,4,0,82,35,25,0,135,34,9,0,35,0,0,0,135,34,5,0,27,0,0,0,106,4,28,56,121,4,14,0,25,5,28,60,82,6,5,0,46,34,6,4,28,175,0,0,26,34,6,4,4,34,34,4,43,34,34,2,11,34,34,0,41,34,34,2,3,34,6,34,85,5,34,0,135,34,9,0,4,0,0,0,25,1,28,44,82,4,1,0,120,4,3,0,137,15,0,0,139,0,0,0,25,6,28,48,82,5,6,0,46,34,5,4,120,175,0,0,26,28,5,8,85,6,28,0,82,35,28,0,82,35,35,0,1,33,255,1,19,35,35,33,135,34,14,0,35,28,0,0,82,5,6,0,53,34,5,4,72,175,0,0,82,4,1,0,135,34,9,0,4,0,0,0,137,15,0,0,139,0,0,0,135,4,4,0,128,34,0,0,0,5,34,0,25,35,25,20,135,34,5,0,35,0,0,0,1,34,0,0,102,35,25,11,56,34,34,35,216,175,0,0,82,35,25,0,135,34,9,0,35,0,0,0,119,0,7,0,25,35,23,8,135,34,5,0,35,0,0,0,135,34,5,0,14,0,0,0,1,26,120,0,135,34,5,0,27,0,0,0,0,8,5,0,32,34,26,112,121,34,4,0,135,4,4,0,128,34,0,0,0,8,34,0,106,5,28,56,121,5,14,0,25,6,28,60,82,1,6,0,46,34,1,5,44,176,0,0,26,34,1,4,4,34,34,5,43,34,34,2,11,34,34,0,41,34,34,2,3,34,1,34,85,6,34,0,135,34,9,0,5,0,0,0,25,7,28,44,82,5,7,0,121,5,19,0,25,1,28,48,82,6,1,0,46,34,6,5,128,176,0,0,26,28,6,8,85,1,28,0,82,35,28,0,82,35,35,0,1,33,255,1,19,35,35,33,135,34,14,0,35,28,0,0,82,6,1,0,53,34,6,5,80,176,0,0,82,5,7,0,135,34,9,0,5,0,0,0,0,28,4,0,135,34,6,0,28,0,0,0,139,0,0,0,140,3,37,0,0,0,0,0,2,30,0,0,200,1,0,0,2,31,0,0,200,31,0,0,2,32,0,0,173,1,0,0,1,27,0,0,136,33,0,0,0,25,33,0,136,33,0,0,1,34,240,0,3,33,33,34,137,33,0,0,1,33,200,0,3,19,25,33,1,33,160,0,3,3,25,33,1,33,144,0,3,6,25,33,1,33,136,0,3,26,25,33,25,4,25,96,25,10,25,80,25,11,25,72,25,13,25,64,25,12,25,56,25,18,25,88,25,14,25,48,25,15,25,40,25,16,25,32,25,17,25,24,25,22,25,16,25,23,25,8,0,24,25,0,1,33,152,0,3,28,1,33,82,29,28,0,25,21,29,1,85,28,21,0,1,33,0,2,48,33,33,21,140,178,0,0,1,33,76,0,135,5,42,0,33,0,0,0,0,7,3,0,25,8,1,108,25,9,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,33,7,9,96,177,0,0,1,33,0,0,132,0,0,33,1,34,197,1,2,35,0,0,216,56,1,0,135,33,3,0,34,6,35,0,130,33,0,0,0,27,33,0,1,33,0,0,132,0,0,33,38,33,27,1,121,33,3,0,135,3,4,0,119,0,50,0,1,33,0,0,132,0,0,33,0,7,19,0,0,8,3,0,25,9,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,33,7,9,196,177,0,0,1,35,23,0,1,34,0,0,135,33,11,0,35,5,19,6,34,0,0,0,130,33,0,0,0,27,33,0,1,33,0,0,132,0,0,33,38,33,27,1,121,33,3,0,1,4,1,0,119,0,11,0,1,33,0,0,132,0,0,33,1,34,74,0,1,35,128,16,1,36,177,0,135,33,7,0,34,5,35,36,1,33,0,0,132,0,0,33,1,4,0,0,135,3,4,0,102,33,6,11,34,33,33,0,121,33,9,0,82,36,6,0,135,33,9,0,36,0,0,0,120,4,9,0,85,28,29,0,135,33,6,0,3,0,0,0,119,0,5,0,120,4,4,0,85,28,29,0,135,33,6,0,3,0,0,0,135,33,43,0,5,0,0,0,0,27,3,0,85,28,29,0,135,33,6,0,27,0,0,0,1,33,0,0,132,0,0,33,106,36,1,48,26,36,36,4,82,36,36,0,135,33,3,0,30,26,36,0,130,33,0,0,0,21,33,0,1,33,0,0,132,0,0,33,38,33,21,1,121,33,3,0,135,3,4,0,119,0,51,2,1,33,56,32,85,26,33,0,106,3,26,4,120,3,3,0,1,20,0,0,119,0,2,0,102,20,3,84,1,33,0,0,132,0,0,33,1,36,139,0,1,35,0,0,1,34,1,0,135,33,2,0,36,1,35,34,130,33,0,0,0,21,33,0,1,33,0,0,132,0,0,33,38,33,21,1,121,33,3,0,1,27,27,0,119,0,24,2,1,33,0,0,132,0,0,33,1,33,58,1,1,34,84,0,135,5,8,0,33,34,0,0,130,34,0,0,0,21,34,0,1,34,0,0,132,0,0,34,38,34,21,1,121,34,3,0,1,27,27,0,119,0,10,2,25,21,1,108,0,7,4,0,0,8,21,0,25,9,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,34,7,9,104,179,0,0,1,34,0,0,132,0,0,34,1,33,0,0,135,34,3,0,30,10,33,0,130,34,0,0,0,9,34,0,1,34,0,0,132,0,0,34,38,34,9,1,121,34,3,0,135,3,4,0,119,0,242,1,85,10,31,0,1,34,0,0,132,0,0,34,1,33,0,0,135,34,3,0,30,11,33,0,130,34,0,0,0,9,34,0,1,34,0,0,132,0,0,34,38,34,9,1,121,34,5,0,135,3,4,0,135,34,5,0,10,0,0,0,119,0,226,1,1,34,56,32,85,11,34,0,1,34,0,0,132,0,0,34,0,7,19,0,0,8,4,0,25,9,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,34,7,9,12,180,0,0,1,33,31,0,135,34,11,0,33,5,19,10,11,0,0,0,130,34,0,0,0,9,34,0,1,34,0,0,132,0,0,34,38,34,9,1,121,34,3,0,1,4,1,0,119,0,195,1,1,34,0,0,132,0,0,34,135,34,3,0,30,0,5,0,130,34,0,0,0,9,34,0,1,34,0,0,132,0,0,34,38,34,9,1,121,34,3,0,1,4,0,0,119,0,183,1,1,34,52,70,85,0,34,0,135,34,5,0,11,0,0,0,135,34,5,0,10,0,0,0,102,34,2,12,120,34,203,0,1,34,0,0,132,0,0,34,1,34,58,1,1,33,112,0,135,3,8,0,34,33,0,0,130,33,0,0,0,13,33,0,1,33,0,0,132,0,0,33,38,33,13,1,121,33,3,0,1,27,48,0,119,0,185,0,1,33,0,0,132,0,0,33,0,7,19,0,0,8,21,0,25,9,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,33,7,9,236,180,0,0,1,34,81,0,1,35,0,0,135,33,7,0,34,3,19,35,130,33,0,0,0,13,33,0,1,33,0,0,132,0,0,33,38,33,13,1,121,33,6,0,135,25,4,0,135,33,9,0,3,0,0,0,0,3,25,0,119,0,160,0,1,33,0,0,132,0,0,33,135,33,3,0,30,18,3,0,130,33,0,0,0,13,33,0,1,33,0,0,132,0,0,33,38,33,13,1,121,33,3,0,1,27,48,0,119,0,148,0,85,18,31,0,25,5,18,4,82,3,5,0,1,33,0,0,132,0,0,33,1,35,28,0,106,34,2,8,1,36,0,0,135,33,11,0,35,15,1,34,36,0,0,0,130,33,0,0,0,13,33,0,1,33,0,0,132,0,0,33,38,33,13,1,121,33,3,0,1,27,50,0,119,0,124,0,25,4,3,92,25,3,3,96,82,33,3,0,120,33,3,0,1,27,40,0,119,0,13,0,1,33,0,0,132,0,0,33,1,36,172,1,135,33,1,0,36,4,0,0,130,33,0,0,0,13,33,0,1,33,0,0,132,0,0,33,38,33,13,1,120,33,2,0,1,27,40,0,32,33,27,40,121,33,101,0,25,33,15,4,116,3,33,0,1,33,0,0,132,0,0,33,135,33,1,0,32,4,0,0,130,33,0,0,0,13,33,0,1,33,0,0,132,0,0,33,38,33,13,1,120,33,89,0,1,33,0,0,132,0,0,33,82,36,3,0,135,33,3,0,30,14,36,0,130,33,0,0,0,13,33,0,1,33,0,0,132,0,0,33,38,33,13,1,120,33,78,0,1,33,112,66,85,14,33,0,135,33,5,0,14,0,0,0,135,33,5,0,15,0,0,0,106,3,0,4,1,33,0,0,132,0,0,33,82,36,5,0,135,33,3,0,30,17,36,0,130,33,0,0,0,15,33,0,1,33,0,0,132,0,0,33,38,33,15,1,121,33,3,0,1,27,50,0,119,0,61,0,85,17,31,0,25,4,3,72,25,3,3,76,82,33,3,0,120,33,3,0,1,27,45,0,119,0,13,0,1,33,0,0,132,0,0,33,1,36,172,1,135,33,1,0,36,4,0,0,130,33,0,0,0,15,33,0,1,33,0,0,132,0,0,33,38,33,15,1,120,33,2,0,1,27,45,0,32,33,27,45,121,33,33,0,25,33,17,4,116,3,33,0,1,33,0,0,132,0,0,33,135,33,1,0,32,4,0,0,130,33,0,0,0,15,33,0,1,33,0,0,132,0,0,33,38,33,15,1,120,33,21,0,1,33,0,0,132,0,0,33,82,36,3,0,135,33,3,0,30,16,36,0,130,33,0,0,0,15,33,0,1,33,0,0,132,0,0,33,38,33,15,1,120,33,10,0,85,16,31,0,135,33,5,0,16,0,0,0,135,33,5,0,17,0,0,0,135,33,5,0,18,0,0,0,1,27,55,0,119,0,85,0,135,3,4,0,135,33,5,0,17,0,0,0,119,0,4,0,135,3,4,0,135,33,5,0,15,0,0,0,32,33,27,50,121,33,2,0,135,3,4,0,135,33,5,0,18,0,0,0,32,33,27,48,121,33,71,0,135,3,4,0,119,0,69,0,106,3,0,4,1,33,0,0,132,0,0,33,1,36,107,0,1,34,0,0,135,33,7,0,36,12,1,34,130,33,0,0,0,18,33,0,1,33,0,0,132,0,0,33,38,33,18,1,121,33,3,0,1,27,32,0,119,0,54,0,25,4,3,72,25,3,3,76,82,33,3,0,120,33,3,0,1,27,23,0,119,0,13,0,1,33,0,0,132,0,0,33,1,34,172,1,135,33,1,0,34,4,0,0,130,33,0,0,0,18,33,0,1,33,0,0,132,0,0,33,38,33,18,1,120,33,2,0,1,27,23,0,32,33,27,23,121,33,31,0,25,33,12,4,116,3,33,0,1,33,0,0,132,0,0,33,135,33,1,0,32,4,0,0,130,33,0,0,0,18,33,0,1,33,0,0,132,0,0,33,38,33,18,1,120,33,19,0,1,33,0,0,132,0,0,33,82,34,3,0,135,33,3,0,30,13,34,0,130,33,0,0,0,18,33,0,1,33,0,0,132,0,0,33,38,33,18,1,120,33,8,0,85,13,31,0,135,33,5,0,13,0,0,0,135,33,5,0,12,0,0,0,1,27,55,0,119,0,4,0,135,3,4,0,135,33,5,0,12,0,0,0,32,33,27,55,121,33,153,0,1,33,6,0,85,19,33,0,25,6,1,60,82,3,6,0,106,33,1,64,48,33,3,33,16,185,0,0,1,33,6,0,85,3,33,0,25,33,3,4,85,6,33,0,119,0,15,0,1,33,0,0,132,0,0,33,1,34,53,2,25,36,1,56,135,33,3,0,34,36,19,0,130,33,0,0,0,19,33,0,1,33,0,0,132,0,0,33,38,33,19,1,121,33,3,0,135,3,4,0,119,0,127,0,25,5,0,4,82,3,5,0,1,33,0,0,132,0,0,33,1,36,122,0,1,34,0,0,135,33,7,0,36,23,1,34,130,33,0,0,0,1,33,0,1,33,0,0,132,0,0,33,38,33,1,1,121,33,3,0,1,27,32,0,119,0,111,0,25,4,3,64,25,3,3,68,82,33,3,0,120,33,3,0,1,27,61,0,119,0,13,0,1,33,0,0,132,0,0,33,1,34,172,1,135,33,1,0,34,4,0,0,130,33,0,0,0,1,33,0,1,33,0,0,132,0,0,33,38,33,1,1,120,33,2,0,1,27,61,0,32,33,27,61,121,33,88,0,25,33,23,4,116,3,33,0,1,33,0,0,132,0,0,33,135,33,1,0,32,4,0,0,130,33,0,0,0,1,33,0,1,33,0,0,132,0,0,33,38,33,1,1,120,33,76,0,1,33,0,0,132,0,0,33,82,34,3,0,135,33,3,0,30,22,34,0,130,33,0,0,0,1,33,0,1,33,0,0,132,0,0,33,38,33,1,1,120,33,65,0,1,33,56,32,85,22,33,0,135,33,5,0,22,0,0,0,135,33,5,0,23,0,0,0,82,33,6,0,26,33,33,4,85,6,33,0,1,33,0,0,132,0,0,33,1,34,54,2,82,36,5,0,135,33,3,0,34,36,21,0,130,33,0,0,0,23,33,0,1,33,0,0,132,0,0,33,38,33,23,1,121,33,3,0,1,27,32,0,119,0,45,0,1,33,0,0,132,0,0,33,82,36,5,0,106,36,36,68,135,33,3,0,30,24,36,0,130,33,0,0,0,23,33,0,1,33,0,0,132,0,0,33,38,33,23,1,121,33,3,0,1,27,32,0,119,0,31,0,1,33,56,32,85,24,33,0,1,33,0,0,132,0,0,33,1,36,54,2,106,34,24,4,135,33,3,0,36,34,21,0,130,33,0,0,0,23,33,0,1,33,0,0,132,0,0,33,38,33,23,1,121,33,5,0,135,3,4,0,135,33,5,0,24,0,0,0,119,0,13,0,135,33,5,0,24,0,0,0,82,33,5,0,107,33,80,20,135,33,5,0,26,0,0,0,85,28,29,0,137,25,0,0,139,0,0,0,135,3,4,0,135,33,5,0,23,0,0,0,32,33,27,32,121,33,2,0,135,3,4,0,135,33,5,0,0,0,0,0,119,0,10,0,135,3,4,0,135,33,5,0,11,0,0,0,135,33,5,0,10,0,0,0,120,4,2,0,119,0,3,0,135,33,9,0,5,0,0,0,32,33,27,27,121,33,2,0,135,3,4,0,135,33,5,0,26,0,0,0,0,27,3,0,85,28,29,0,135,33,6,0,27,0,0,0,139,0,0,0,140,3,28,0,0,0,0,0,2,21,0,0,32,0,0,128,2,22,0,0,114,175,0,0,2,23,0,0,58,1,0,0,136,24,0,0,0,18,24,0,136,24,0,0,1,25,128,0,3,24,24,25,137,24,0,0,25,19,18,104,25,20,18,92,25,17,18,80,25,14,18,40,0,5,18,0,1,24,156,0,3,15,1,24,116,19,15,0,106,25,15,4,109,19,4,25,106,24,15,8,109,19,8,24,25,16,1,76,82,3,16,0,25,11,1,84,116,20,11,0,106,25,11,4,109,20,4,25,106,24,11,8,109,20,8,24,25,12,1,96,116,17,12,0,106,25,12,4,109,17,4,25,106,24,12,8,109,17,8,24,25,13,1,108,0,7,14,0,0,8,13,0,25,10,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,24,7,10,84,188,0,0,1,25,1,0,1,26,0,0,135,24,46,0,1,25,26,0,1,26,1,0,1,25,0,0,135,24,47,0,1,26,25,0,120,24,172,0,0,7,13,0,0,8,14,0,25,10,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,24,7,10,152,188,0,0,116,15,19,0,106,25,19,4,109,15,4,25,106,24,19,8,109,15,8,24,85,16,3,0,116,12,17,0,106,25,17,4,109,12,4,25,106,24,17,8,109,12,8,24,116,11,20,0,106,25,20,4,109,11,4,25,106,24,20,8,109,11,8,24,1,24,16,0,135,3,12,0,24,0,0,0,85,19,3,0,2,25,0,0,16,0,0,128,109,19,8,25,1,24,11,0,109,19,4,24,0,7,3,0,2,8,0,0,239,172,0,0,25,10,7,11,78,24,8,0,83,7,24,0,25,7,7,1,25,8,8,1,54,24,7,10,32,189,0,0,1,25,0,0,107,3,11,25,1,24,0,0,109,20,8,24,25,4,20,11,1,24,7,0,83,4,24,0,2,24,0,0,251,172,0,0,78,24,24,0,83,20,24,0,2,25,0,0,252,172,0,0,78,25,25,0,107,20,1,25,2,24,0,0,253,172,0,0,78,24,24,0,107,20,2,24,2,25,0,0,254,172,0,0,78,25,25,0,107,20,3,25,2,24,0,0,255,172,0,0,78,24,24,0,107,20,4,24,2,25,0,0,0,173,0,0,78,25,25,0,107,20,5,25,2,24,0,0,1,173,0,0,78,24,24,0,107,20,6,24,1,25,0,0,107,20,7,25,1,25,0,0,85,17,25,0,1,24,0,0,109,17,4,24,1,25,0,0,109,17,8,25,1,25,0,0,132,0,0,25,1,25,32,0,135,3,8,0,23,25,0,0,130,25,0,0,0,10,25,0,1,25,0,0,132,0,0,25,38,25,10,1,121,25,3,0,135,3,4,0,119,0,58,0,85,17,3,0,109,17,8,21,1,24,20,0,109,17,4,24,0,7,3,0,2,8,0,0,145,177,0,0,25,10,7,20,78,24,8,0,83,7,24,0,25,7,7,1,25,8,8,1,54,24,7,10,56,190,0,0,1,25,0,0,107,3,20,25,1,25,0,0,132,0,0,25,1,24,10,0,1,26,1,0,135,25,10,0,24,1,19,20,17,26,0,0,130,25,0,0,0,10,25,0,1,25,0,0,132,0,0,25,38,25,10,1,121,25,10,0,135,3,4,0,1,25,0,0,102,26,17,11,56,25,25,26,252,190,0,0,82,26,17,0,135,25,9,0,26,0,0,0,119,0,20,0,102,25,17,11,34,25,25,0,121,25,4,0,82,26,17,0,135,25,9,0,26,0,0,0,78,25,4,0,34,25,25,0,121,25,4,0,82,26,20,0,135,25,9,0,26,0,0,0,102,25,19,11,34,25,25,0,121,25,20,0,82,26,19,0,135,25,9,0,26,0,0,0,119,0,16,0,78,25,4,0,34,25,25,0,121,25,4,0,82,26,20,0,135,25,9,0,26,0,0,0,102,25,19,11,34,25,25,0,121,25,4,0,82,26,19,0,135,25,9,0,26,0,0,0,0,20,3,0,135,25,6,0,20,0,0,0,1,25,88,0,135,9,12,0,25,0,0,0,0,7,5,0,0,8,13,0,25,10,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,25,7,10,80,191,0,0,1,25,0,0,132,0,0,25,1,26,170,1,135,25,1,0,26,9,0,0,130,25,0,0,0,10,25,0,1,25,0,0,132,0,0,25,38,25,10,1,121,25,3,0,135,3,4,0,119,0,138,1,25,7,9,12,0,8,5,0,25,10,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,25,7,10,164,191,0,0,1,25,8,31,85,9,25,0,1,26,0,0,109,9,52,26,1,25,0,0,109,9,56,25,1,26,0,0,107,9,60,26,25,3,9,64,1,26,224,30,85,3,26,0,25,7,9,68,25,8,9,72,1,26,0,0,85,7,26,0,1,25,0,0,109,7,4,25,1,26,0,0,109,7,8,26,1,25,0,0,109,7,12,25,1,25,0,0,132,0,0,25,1,26,51,2,1,24,0,0,135,25,3,0,26,7,24,0,130,25,0,0,0,10,25,0,1,25,0,0,132,0,0,25,38,25,10,1,121,25,24,0,135,3,4,0,128,25,0,0,0,6,25,0,82,4,7,0,121,4,92,1,82,5,8,0,46,25,5,4,140,192,0,0,26,20,5,8,85,8,20,0,82,24,20,0,82,24,24,0,1,26,255,1,19,24,24,26,135,25,14,0,24,20,0,0,82,5,8,0,53,25,5,4,92,192,0,0,82,4,7,0,135,25,9,0,4,0,0,0,119,0,74,1,1,25,68,30,85,9,25,0,1,25,168,30,85,3,25,0,38,24,2,1,107,9,84,24,135,24,0,0,0,9,0,0,1,24,56,32,85,0,24,0,25,5,1,48,82,3,5,0,106,24,1,52,45,24,3,24,20,193,0,0,1,24,0,0,132,0,0,24,1,25,52,2,25,26,1,44,135,24,3,0,25,26,0,0,130,24,0,0,0,10,24,0,1,24,0,0,132,0,0,24,38,24,10,1,121,24,3,0,1,6,35,0,119,0,23,0,1,6,32,0,119,0,21,0,1,24,0,0,132,0,0,24,1,26,200,1,106,25,0,4,135,24,3,0,26,3,25,0,130,24,0,0,0,10,24,0,1,24,0,0,132,0,0,24,38,24,10,1,121,24,3,0,1,6,35,0,119,0,7,0,1,24,56,32,85,3,24,0,82,24,5,0,25,24,24,8,85,5,24,0,1,6,32,0,32,24,6,32,121,24,13,1,1,24,0,0,132,0,0,24,1,25,247,3,135,24,23,0,25,1,2,0,130,24,0,0,0,10,24,0,1,24,0,0,132,0,0,24,38,24,10,1,121,24,3,0,1,6,35,0,119,0,0,1,116,19,15,0,106,25,15,4,109,19,4,25,106,24,15,8,109,19,8,24,82,4,16,0,116,20,11,0,106,25,11,4,109,20,4,25,106,24,11,8,109,20,8,24,116,17,12,0,106,25,12,4,109,17,4,25,106,24,12,8,109,17,8,24,0,7,14,0,0,8,13,0,25,10,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,24,7,10,236,193,0,0,1,24,0,0,132,0,0,24,1,25,54,0,1,26,1,0,1,27,0,0,135,24,2,0,25,1,26,27,130,24,0,0,0,10,24,0,1,24,0,0,132,0,0,24,38,24,10,1,121,24,3,0,1,6,35,0,119,0,217,0,1,24,0,0,132,0,0,24,1,24,144,0,1,27,1,0,1,26,0,0,135,3,2,0,24,1,27,26,130,26,0,0,0,10,26,0,1,26,0,0,132,0,0,26,38,26,10,1,121,26,3,0,1,6,35,0,119,0,202,0,120,3,186,0,0,7,13,0,0,8,14,0,25,10,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,26,7,10,136,194,0,0,116,15,19,0,106,27,19,4,109,15,4,27,106,26,19,8,109,15,8,26,85,16,4,0,116,12,17,0,106,27,17,4,109,12,4,27,106,26,17,8,109,12,8,26,116,11,20,0,106,27,20,4,109,11,4,27,106,26,20,8,109,11,8,26,1,26,0,0,85,19,26,0,1,27,0,0,109,19,4,27,1,26,0,0,109,19,8,26,1,26,0,0,132,0,0,26,1,26,16,0,135,3,8,0,23,26,0,0,130,26,0,0,0,16,26,0,1,26,0,0,132,0,0,26,38,26,16,1,121,26,3,0,135,3,4,0,119,0,158,0,85,19,3,0,2,27,0,0,16,0,0,128,109,19,8,27,1,26,11,0,109,19,4,26,0,7,3,0,2,8,0,0,239,172,0,0,25,10,7,11,78,26,8,0,83,7,26,0,25,7,7,1,25,8,8,1,54,26,7,10,80,195,0,0,1,27,0,0,107,3,11,27,1,26,0,0,109,20,8,26,25,4,20,11,1,26,7,0,83,4,26,0,2,26,0,0,251,172,0,0,78,26,26,0,83,20,26,0,2,27,0,0,252,172,0,0,78,27,27,0,107,20,1,27,2,26,0,0,253,172,0,0,78,26,26,0,107,20,2,26,2,27,0,0,254,172,0,0,78,27,27,0,107,20,3,27,2,26,0,0,255,172,0,0,78,26,26,0,107,20,4,26,2,27,0,0,0,173,0,0,78,27,27,0,107,20,5,27,2,26,0,0,1,173,0,0,78,26,26,0,107,20,6,26,1,27,0,0,107,20,7,27,1,27,0,0,85,17,27,0,1,26,0,0,109,17,4,26,1,27,0,0,109,17,8,27,1,27,0,0,132,0,0,27,1,27,32,0,135,3,8,0,23,27,0,0,130,27,0,0,0,16,27,0,1,27,0,0,132,0,0,27,38,27,16,1,121,27,3,0,135,3,4,0,119,0,58,0,85,17,3,0,109,17,8,21,1,26,20,0,109,17,4,26,0,7,3,0,2,8,0,0,114,175,0,0,25,10,7,20,78,26,8,0,83,7,26,0,25,7,7,1,25,8,8,1,54,26,7,10,104,196,0,0,1,27,0,0,107,3,20,27,1,27,0,0,132,0,0,27,1,26,10,0,1,24,1,0,135,27,10,0,26,1,19,20,17,24,0,0,130,27,0,0,0,1,27,0,1,27,0,0,132,0,0,27,38,27,1,1,121,27,10,0,135,3,4,0,1,27,0,0,102,24,17,11,56,27,27,24,44,197,0,0,82,24,17,0,135,27,9,0,24,0,0,0,119,0,20,0,102,27,17,11,34,27,27,0,121,27,4,0,82,24,17,0,135,27,9,0,24,0,0,0,78,27,4,0,34,27,27,0,121,27,4,0,82,24,20,0,135,27,9,0,24,0,0,0,102,27,19,11,34,27,27,0,121,27,18,0,82,24,19,0,135,27,9,0,24,0,0,0,119,0,14,0,78,27,4,0,34,27,27,0,121,27,4,0,82,24,20,0,135,27,9,0,24,0,0,0,102,27,19,11,34,27,27,0,121,27,20,0,82,24,19,0,135,27,9,0,24,0,0,0,119,0,16,0,82,4,5,0,26,3,4,8,26,20,4,8,85,5,20,0,82,24,20,0,82,24,24,0,1,26,255,1,19,24,24,26,135,27,14,0,24,20,0,0,82,4,5,0,53,27,4,3,104,197,0,0,137,18,0,0,139,0,0,0,32,27,6,35,121,27,2,0,135,3,4,0,135,27,5,0,0,0,0,0,0,20,3,0,135,27,6,0,20,0,0,0,135,27,9,0,9,0,0,0,0,20,3,0,135,27,6,0,20,0,0,0,139,0,0,0,140,4,28,0,0,0,0,0,2,21,0,0,232,208,0,0,2,22,0,0,255,0,0,0,2,23,0,0,13,199,0,0,1,13,0,0,136,24,0,0,0,15,24,0,136,24,0,0,1,25,224,0,3,24,24,25,137,24,0,0,1,24,184,0,3,14,15,24,1,24,172,0,3,17,15,24,25,12,15,16,1,24,160,0,3,10,15,24,0,16,15,0,135,24,48,0,17,1,2,0,25,6,17,4,82,4,17,0,82,24,6,0,4,5,24,4,1,24,1,0,28,25,5,48,48,24,24,25,8,205,0,0,25,11,12,64,25,4,12,8,1,24,156,67,85,4,24,0,25,9,12,12,1,24,156,12,85,12,24,0,1,24,176,12,85,11,24,0,1,25,0,0,109,12,4,25,1,25,0,0,132,0,0,25,1,24,11,2,25,26,12,64,135,25,3,0,24,26,9,0,130,25,0,0,0,8,25,0,1,25,0,0,132,0,0,25,38,25,8,1,121,25,4,0,135,4,4,0,1,13,25,0,119,0,137,1,1,25,136,0,1,26,0,0,97,12,25,26,1,26,140,0,1,25,255,255,97,12,26,25,1,25,136,67,85,12,25,0,1,25,176,67,85,11,25,0,1,25,156,67,85,4,25,0,1,25,0,0,132,0,0,25,1,26,180,1,135,25,1,0,26,9,0,0,130,25,0,0,0,8,25,0,1,25,0,0,132,0,0,25,38,25,8,1,121,25,3,0,135,4,4,0,119,0,108,1,1,25,252,66,85,9,25,0,25,8,12,44,1,25,0,0,85,8,25,0,1,26,0,0,109,8,4,26,1,25,0,0,109,8,8,25,1,26,0,0,109,8,12,26,1,25,24,0,109,12,60,25,1,25,0,0,85,14,25,0,1,26,0,0,109,14,4,26,1,25,0,0,109,14,8,25,1,25,0,0,132,0,0,25,1,26,12,2,135,25,3,0,26,9,14,0,130,25,0,0,0,7,25,0,1,25,0,0,132,0,0,25,38,25,7,1,121,25,17,0,135,4,4,0,102,25,14,11,34,25,25,0,121,25,4,0,82,26,14,0,135,25,9,0,26,0,0,0,102,25,8,11,34,25,25,0,121,25,4,0,82,26,8,0,135,25,9,0,26,0,0,0,135,25,28,0,9,0,0,0,119,0,62,1,102,25,14,11,34,25,25,0,121,25,4,0,82,26,14,0,135,25,9,0,26,0,0,0,25,7,12,8,1,25,0,0,132,0,0,25],eb+40960);HEAPU8.set([1,26,46,0,2,24,0,0,137,142,0,0,1,27,40,0,135,25,2,0,26,7,24,27,130,25,0,0,0,1,25,0,1,25,0,0,132,0,0,25,38,25,1,1,121,25,3,0,1,13,26,0,119,0,14,1,1,25,0,0,132,0,0,25,1,25,46,0,2,27,0,0,178,142,0,0,1,24,10,0,135,4,2,0,25,7,27,24,130,24,0,0,0,1,24,0,1,24,0,0,132,0,0,24,38,24,1,1,121,24,3,0,1,13,26,0,119,0,254,0,102,1,2,11,41,24,1,24,42,24,24,24,34,5,24,0,1,24,0,0,132,0,0,24,1,24,46,0,121,5,4,0,82,25,2,0,0,27,25,0,119,0,2,0,0,27,2,0,121,5,4,0,106,26,2,4,0,25,26,0,119,0,3,0,19,26,1,22,0,25,26,0,135,4,2,0,24,4,27,25,130,25,0,0,0,1,25,0,1,25,0,0,132,0,0,25,38,25,1,1,121,25,3,0,1,13,26,0,119,0,226,0,1,25,0,0,132,0,0,25,1,25,46,0,2,27,0,0,189,142,0,0,1,24,3,0,135,4,2,0,25,4,27,24,130,24,0,0,0,1,24,0,1,24,0,0,132,0,0,24,38,24,1,1,121,24,3,0,1,13,26,0,119,0,210,0,1,24,0,0,132,0,0,24,1,27,46,0,1,25,1,0,135,24,2,0,27,4,21,25,130,24,0,0,0,1,24,0,1,24,0,0,132,0,0,24,38,24,1,1,121,24,3,0,1,13,26,0,119,0,196,0,1,24,0,0,132,0,0,24,1,24,46,0,2,25,0,0,193,142,0,0,1,27,11,0,135,4,2,0,24,7,25,27,130,27,0,0,0,1,27,0,1,27,0,0,132,0,0,27,38,27,1,1,121,27,3,0,1,13,26,0,119,0,180,0,1,27,0,0,132,0,0,27,1,25,46,0,1,24,1,0,135,27,2,0,25,4,21,24,130,27,0,0,0,1,27,0,1,27,0,0,132,0,0,27,38,27,1,1,121,27,3,0,1,13,26,0,119,0,166,0,82,27,6,0,82,24,17,0,4,6,27,24,28,1,6,48,121,6,62,0,1,5,0,0,1,24,0,0,132,0,0,24,1,24,46,0,1,27,2,0,135,4,2,0,24,7,23,27,130,27,0,0,0,6,27,0,1,27,0,0,132,0,0,27,38,27,6,1,120,27,47,0,82,18,17,0,27,27,5,48,3,18,18,27,0,20,18,0,102,6,20,11,41,27,6,24,42,27,27,24,34,19,27,0,1,27,0,0,132,0,0,27,1,27,46,0,121,19,4,0,82,25,20,0,0,24,25,0,119,0,2,0,0,24,20,0,121,19,4,0,106,26,18,4,0,25,26,0,119,0,3,0,19,26,6,22,0,25,26,0,135,4,2,0,27,4,24,25,130,25,0,0,0,6,25,0,1,25,0,0,132,0,0,25,38,25,6,1,120,25,17,0,1,25,0,0,132,0,0,25,1,24,46,0,1,27,1,0,135,25,2,0,24,4,21,27,130,25,0,0,0,20,25,0,1,25,0,0,132,0,0,25,38,25,20,1,120,25,5,0,25,5,5,1,57,25,1,5,224,202,0,0,119,0,199,255,135,4,4,0,119,0,100,0,1,25,0,0,132,0,0,25,1,25,46,0,2,27,0,0,205,142,0,0,1,24,51,0,135,4,2,0,25,7,27,24,130,24,0,0,0,20,24,0,1,24,0,0,132,0,0,24,38,24,20,1,121,24,3,0,1,13,26,0,119,0,84,0,1,24,0,0,132,0,0,24,1,27,46,0,1,25,1,0,135,24,2,0,27,4,21,25,130,24,0,0,0,20,24,0,1,24,0,0,132,0,0,24,38,24,20,1,121,24,3,0,1,13,26,0,119,0,70,0,1,24,0,0,132,0,0,24,1,25,13,2,135,24,3,0,25,10,9,0,130,24,0,0,0,20,24,0,1,24,0,0,132,0,0,24,38,24,20,1,121,24,3,0,1,13,26,0,119,0,57,0,1,24,0,0,132,0,0,24,0,1,14,0,0,4,3,0,25,5,1,40,116,1,4,0,25,1,1,4,25,4,4,4,54,24,1,5,160,203,0,0,1,25,221,1,135,24,3,0,25,10,14,0,130,24,0,0,0,20,24,0,1,24,0,0,132,0,0,24,38,24,20,1,121,24,10,0,135,4,4,0,1,24,0,0,102,25,10,11,56,24,24,25,108,204,0,0,82,25,10,0,135,24,9,0,25,0,0,0,119,0,29,0,102,24,10,11,34,24,24,0,121,24,4,0,82,25,10,0,135,24,9,0,25,0,0,0,1,24,136,67,85,12,24,0,1,24,176,67,85,11,24,0,1,24,156,67,85,7,24,0,1,24,252,66,85,9,24,0,102,24,8,11,34,24,24,0,121,24,4,0,82,25,8,0,135,24,9,0,25,0,0,0,135,24,28,0,9,0,0,0,1,25,188,67,135,24,29,0,12,25,0,0,135,24,30,0,11,0,0,0,119,0,142,0,32,24,13,26,121,24,2,0,135,4,4,0,1,24,136,67,85,12,24,0,1,24,176,67,85,11,24,0,1,24,156,67,85,7,24,0,1,24,252,66,85,9,24,0,102,24,8,11,34,24,24,0,121,24,4,0,82,25,8,0,135,24,9,0,25,0,0,0,135,24,28,0,9,0,0,0,1,25,188,67,135,24,29,0,12,25,0,0,135,24,30,0,11,0,0,0,119,0,5,0,1,25,188,67,135,24,29,0,12,25,0,0,1,13,25,0,32,24,13,25,121,24,3,0,135,24,30,0,11,0,0,0,0,20,4,0,135,24,13,0,17,0,0,0,135,24,6,0,20,0,0,0,119,0,103,0,32,24,5,48,121,24,101,0,1,24,112,1,94,24,1,24,1,25,108,1,94,25,1,25,45,24,24,25,188,205,0,0,1,24,0,0,132,0,0,24,1,24,217,3,1,25,240,0,3,25,1,25,25,27,4,36,135,5,23,0,24,25,27,0,130,27,0,0,0,20,27,0,1,27,0,0,132,0,0,27,38,27,20,1,120,27,19,0,82,4,17,0,120,5,2,0,119,0,21,0,1,27,0,0,132,0,0,27,1,25,210,1,135,27,3,0,25,0,4,0,130,27,0,0,0,20,27,0,1,27,0,0,132,0,0,27,38,27,20,1,120,27,5,0,135,27,13,0,17,0,0,0,137,15,0,0,139,0,0,0,135,20,4,0,135,27,13,0,17,0,0,0,135,27,6,0,20,0,0,0,1,27,0,0,132,0,0,27,1,27,66,1,25,25,4,36,135,4,8,0,27,25,0,0,130,25,0,0,0,20,25,0,1,25,0,0,132,0,0,25,38,25,20,1,120,25,41,0,120,4,2,0,119,0,44,0,82,20,17,0,85,14,4,0,1,27,0,0,109,14,4,27,1,27,0,0,132,0,0,27,1,25,15,0,135,27,11,0,25,1,20,14,3,0,0,0,130,27,0,0,0,20,27,0,1,27,0,0,132,0,0,27,38,27,20,1,121,27,7,0,135,20,4,0,135,27,13,0,17,0,0,0,135,27,6,0,20,0,0,0,119,0,17,0,1,27,0,0,132,0,0,27,1,25,210,1,82,24,17,0,135,27,3,0,25,0,24,0,130,27,0,0,0,20,27,0,1,27,0,0,132,0,0,27,38,27,20,1,120,27,5,0,135,27,13,0,17,0,0,0,137,15,0,0,139,0,0,0,135,20,4,0,135,27,13,0,17,0,0,0,135,27,6,0,20,0,0,0,25,5,16,11,1,27,0,0,85,16,27,0,1,24,0,0,109,16,4,24,1,27,0,0,109,16,8,27,1,27,0,0,132,0,0,27,1,24,94,0,135,27,7,0,24,0,2,16,130,27,0,0,0,20,27,0,1,27,0,0,132,0,0,27,38,27,20,1,121,27,20,0,135,4,4,0,1,27,0,0,78,24,5,0,49,27,27,24,16,207,0,0,0,20,4,0,135,27,13,0,17,0,0,0,135,27,6,0,20,0,0,0,82,24,16,0,135,27,9,0,24,0,0,0,0,20,4,0,135,27,13,0,17,0,0,0,135,27,6,0,20,0,0,0,119,0,16,0,1,27,0,0,78,24,5,0,49,27,27,24,84,207,0,0,135,27,13,0,17,0,0,0,137,15,0,0,139,0,0,0,82,24,16,0,135,27,9,0,24,0,0,0,135,27,13,0,17,0,0,0,137,15,0,0,139,0,0,0,139,0,0,0,140,2,25,0,0,0,0,0,2,18,0,0,255,1,0,0,2,19,0,0,69,177,0,0,2,20,0,0,48,0,0,128,1,17,0,0,136,21,0,0,0,13,21,0,136,21,0,0,1,22,128,0,3,21,21,22,137,21,0,0,0,16,13,0,25,15,13,52,25,5,13,88,25,6,13,72,25,4,13,64,25,14,13,40,135,21,49,0,1,0,0,0,25,11,1,76,82,3,11,0,25,12,1,80,82,2,12,0,85,15,3,0,52,21,3,2,8,208,0,0,135,21,50,0,15,2,16,0,32,10,21,0,82,3,15,0,120,10,250,255,0,2,3,0,119,0,1,0,82,21,12,0,46,21,2,21,180,209,0,0,82,22,11,0,135,21,51,0,16,22,2,0,25,8,1,108,135,21,52,0,8,16,0,0,1,21,76,0,135,4,42,0,21,0,0,0,0,7,5,0,25,9,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,21,7,9,64,208,0,0,1,21,0,0,85,6,21,0,1,22,0,0,109,6,4,22,1,21,0,0,109,6,8,21,1,21,0,0,132,0,0,21,1,21,58,1,1,22,32,0,135,2,8,0,21,22,0,0,130,22,0,0,0,17,22,0,1,22,0,0,132,0,0,22,38,22,17,1,121,22,3,0,135,2,4,0,119,0,64,0,85,6,2,0,2,21,0,0,32,0,0,128,109,6,8,21,1,22,22,0,109,6,4,22,0,7,2,0,2,8,0,0,46,177,0,0,25,9,7,22,78,22,8,0,83,7,22,0,25,7,7,1,25,8,8,1,54,22,7,9,204,208,0,0,1,21,0,0,107,2,22,21,1,21,0,0,132,0,0,21,0,7,16,0,0,8,5,0,25,9,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,21,7,9,0,209,0,0,1,22,111,0,135,21,7,0,22,4,16,6,130,21,0,0,0,17,21,0,1,21,0,0,132,0,0,21,38,21,17,1,121,21,3,0,1,3,1,0,119,0,11,0,1,21,0,0,132,0,0,21,1,22,74,0,1,23,144,16,1,24,177,0,135,21,7,0,22,4,23,24,1,21,0,0,132,0,0,21,1,3,0,0,135,2,4,0,102,21,6,11,34,21,21,0,121,21,8,0,82,24,6,0,135,21,9,0,24,0,0,0,120,3,7,0,135,21,6,0,2,0,0,0,119,0,4,0,120,3,3,0,135,21,6,0,2,0,0,0,135,21,43,0,4,0,0,0,0,17,2,0,135,21,6,0,17,0,0,0,1,21,88,0,135,10,12,0,21,0,0,0,25,5,1,108,0,7,16,0,0,8,5,0,25,9,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,21,7,9,208,209,0,0,1,21,0,0,132,0,0,21,1,24,170,1,135,21,1,0,24,10,0,0,130,21,0,0,0,9,21,0,1,21,0,0,132,0,0,21,38,21,9,1,121,21,3,0,135,2,4,0,119,0,129,1,25,7,10,12,0,8,16,0,25,9,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,21,7,9,36,210,0,0,1,21,8,31,85,10,21,0,1,24,0,0,109,10,52,24,1,21,0,0,109,10,56,21,1,24,0,0,107,10,60,24,25,2,10,64,1,24,224,30,85,2,24,0,25,6,10,68,25,7,10,72,1,24,0,0,85,6,24,0,1,21,0,0,109,6,4,21,1,24,0,0,109,6,8,24,1,21,0,0,109,6,12,21,1,21,0,0,132,0,0,21,1,24,51,2,1,23,0,0,135,21,3,0,24,6,23,0,130,21,0,0,0,9,21,0,1,21,0,0,132,0,0,21,38,21,9,1,121,21,23,0,135,2,4,0,128,21,0,0,0,5,21,0,82,3,6,0,121,3,83,1,82,4,7,0,46,21,4,3,8,211,0,0,26,17,4,8,85,7,17,0,82,23,17,0,82,23,23,0,19,23,23,18,135,21,14,0,23,17,0,0,82,4,7,0,53,21,4,3,220,210,0,0,82,3,6,0,135,21,9,0,3,0,0,0,119,0,66,1,1,21,68,30,85,10,21,0,1,21,168,30,85,2,21,0,1,23,1,0,107,10,84,23,135,23,0,0,0,10,0,0,1,23,56,32,85,0,23,0,106,2,1,40,1,23,232,0,94,23,2,23,1,21,228,0,94,21,2,21,4,23,23,21,32,23,23,8,121,23,46,0,1,23,0,0,132,0,0,23,1,21,200,1,106,24,0,4,135,23,3,0,21,4,24,0,130,23,0,0,0,10,23,0,1,23,0,0,132,0,0,23,38,23,10,1,121,23,3,0,1,17,27,0,119,0,33,0,1,23,56,32,85,4,23,0,106,3,1,12,1,23,0,0,132,0,0,23,0,7,16,0,0,8,5,0,25,9,7,40,116,7,8,0,25,7,7,4,25,8,8,4,54,23,7,9,180,211,0,0,1,24,27,0,135,23,11,0,24,2,4,3,16,0,0,0,130,23,0,0,0,10,23,0,1,23,0,0,132,0,0,23,38,23,10,1,121,23,5,0,135,2,4,0,135,23,5,0,4,0,0,0,119,0,6,0,135,23,5,0,4,0,0,0,1,17,29,0,119,0,2,0,1,17,29,0,32,23,17,29,121,23,248,0,25,4,1,48,82,2,4,0,106,23,1,52,45,23,2,23,104,212,0,0,1,23,0,0,132,0,0,23,1,24,52,2,25,21,1,44,135,23,3,0,24,21,0,0,130,23,0,0,0,10,23,0,1,23,0,0,132,0,0,23,38,23,10,1,121,23,22,0,1,17,27,0,119,0,229,0,1,23,0,0,132,0,0,23,1,21,200,1,106,24,0,4,135,23,3,0,21,2,24,0,130,23,0,0,0,10,23,0,1,23,0,0,132,0,0,23,38,23,10,1,121,23,3,0,1,17,27,0,119,0,215,0,1,23,56,32,85,2,23,0,82,23,4,0,25,23,23,8,85,4,23,0,1,23,0,0,132,0,0,23,1,24,247,3,1,21,1,0,135,23,23,0,24,1,21,0,130,23,0,0,0,10,23,0,1,23,0,0,132,0,0,23,38,23,10,1,121,23,3,0,1,17,27,0,119,0,196,0,82,3,4,0,26,2,3,8,26,10,3,8,85,4,10,0,82,21,10,0,82,21,21,0,19,21,21,18,135,23,14,0,21,10,0,0,82,3,4,0,53,23,3,2,244,212,0,0,1,23,0,0,132,0,0,23,1,21,54,2,106,24,0,4,135,23,3,0,21,24,5,0,130,23,0,0,0,10,23,0,1,23,0,0,132,0,0,23,38,23,10,1,121,23,3,0,1,17,27,0,119,0,170,0,82,23,11,0,82,24,12,0,45,23,23,24,108,213,0,0,137,13,0,0,139,0,0,0,1,23,0,0,85,16,23,0,1,24,0,0,109,16,4,24,1,23,0,0,109,16,8,23,1,23,0,0,132,0,0,23,1,23,58,1,1,24,16,0,135,2,8,0,23,24,0,0,130,24,0,0,0,12,24,0,1,24,0,0,132,0,0,24,38,24,12,1,121,24,3,0,135,2,4,0,119,0,144,0,85,16,2,0,2,23,0,0,16,0,0,128,109,16,8,23,1,24,11,0,109,16,4,24,0,7,2,0,2,8,0,0,239,172,0,0,25,9,7,11,78,24,8,0,83,7,24,0,25,7,7,1,25,8,8,1,54,24,7,9,228,213,0,0,1,23,0,0,107,2,11,23,1,24,0,0,109,15,8,24,25,3,15,11,1,24,7,0,83,3,24,0,2,24,0,0,251,172,0,0,78,24,24,0,83,15,24,0,2,23,0,0,252,172,0,0,78,23,23,0,107,15,1,23,2,24,0,0,253,172,0,0,78,24,24,0,107,15,2,24,2,23,0,0,254,172,0,0,78,23,23,0,107,15,3,23,2,24,0,0,255,172,0,0,78,24,24,0,107,15,4,24,2,23,0,0,0,173,0,0,78,23,23,0,107,15,5,23,2,24,0,0,1,173,0,0,78,24,24,0,107,15,6,24,1,23,0,0,107,15,7,23,1,23,0,0,85,14,23,0,1,24,0,0,109,14,4,24,1,23,0,0,109,14,8,23,1,23,0,0,132,0,0,23,1,23,58,1,1,24,48,0,135,2,8,0,23,24,0,0,130,24,0,0,0,12,24,0,1,24,0,0,132,0,0,24,38,24,12,1,121,24,3,0,135,2,4,0,119,0,59,0,85,14,2,0,109,14,8,20,1,23,36,0,109,14,4,23,0,7,2,0,2,8,0,0,69,177,0,0,25,9,7,36,78,23,8,0,83,7,23,0,25,7,7,1,25,8,8,1,54,23,7,9,0,215,0,0,1,24,0,0,107,2,36,24,1,24,0,0,132,0,0,24,1,23,10,0,1,21,1,0,135,24,10,0,23,1,16,15,14,21,0,0,130,24,0,0,0,1,24,0,1,24,0,0,132,0,0,24,38,24,1,1,121,24,10,0,135,2,4,0,1,24,0,0,102,21,14,11,56,24,24,21,200,215,0,0,82,21,14,0,135,24,9,0,21,0,0,0,119,0,21,0,102,24,14,11,34,24,24,0,121,24,4,0,82,21,14,0,135,24,9,0,21,0,0,0,78,24,3,0,34,24,24,0,121,24,4,0,82,21,15,0,135,24,9,0,21,0,0,0,102,24,16,11,34,24,24,0,121,24,4,0,82,21,16,0,135,24,9,0,21,0,0,0,137,13,0,0,139,0,0,0,78,24,3,0,34,24,24,0,121,24,4,0,82,21,15,0,135,24,9,0,21,0,0,0,102,24,16,11,34,24,24,0,121,24,4,0,82,21,16,0,135,24,9,0,21,0,0,0,32,24,17,27,121,24,2,0,135,2,4,0,135,24,5,0,0,0,0,0,0,17,2,0,135,24,6,0,17,0,0,0,135,24,9,0,10,0,0,0,0,17,2,0,135,24,6,0,17,0,0,0,139,0,0,0,140,2,27,0,0,0,0,0,2,20,0,0,197,1,0,0,2,21,0,0,19,2,0,0,2,22,0,0,24,1,0,0,1,18,0,0,136,23,0,0,0,11,23,0,136,23,0,0,1,24,176,0,3,23,23,24,137,23,0,0,1,23,156,0,3,19,11,23,1,23,144,0,3,7,11,23,1,23,132,0,3,10,11,23,25,12,11,48,25,15,11,8,25,16,11,120,25,17,11,108,25,13,11,96,0,8,11,0,1,23,204,1,3,9,1,23,82,3,9,0,120,3,8,0,1,24,0,0,135,23,0,0,0,24,0,0,1,23,56,32,85,0,23,0,137,11,0,0,139,0,0,0,106,23,1,16,102,23,23,25,121,23,74,0,1,23,0,0,85,19,23,0,1,24,0,0,109,19,4,24,1,23,0,0,109,19,8,23,135,4,17,0,3,0,0,0,1,23,239,255,48,23,23,4,8,217,0,0,135,23,53,0,19,0,0,0,35,23,4,11,121,23,8,0,107,19,11,4,120,4,3,0,0,2,19,0,119,0,16,0,0,2,19,0,1,18,9,0,119,0,13,0,25,23,4,16,38,23,23,240,0,18,23,0,135,2,12,0,18,0,0,0,85,19,2,0,2,24,0,0,0,0,0,128,20,24,18,24,109,19,8,24,109,19,4,4,1,18,9,0,32,24,18,9,121,24,3,0,135,24,18,0,2,3,4,0,1,23,0,0,95,2,4,23,1,23,0,0,132,0,0,23,1,23,213,3,1,24,33,0,135,2,23,0,23,19,24,0,130,24,0,0,0,14,24,0,1,24,0,0,132,0,0,24,38,24,14,1,120,24,12,0,102,24,19,11,34,24,24,0,121,24,4,0,82,23,19,0,135,24,9,0,23,0,0,0,82,23,9,0,135,24,54,0,23,0,0,0,85,9,2,0,119,0,11,0,135,2,4,0,102,24,19,11,34,24,24,0,121,24,4,0,82,23,19,0,135,24,9,0,23,0,0,0,0,19,2,0,135,24,6,0,19,0,0,0,1,24,156,1,3,6,1,24,102,2,6,11,41,24,2,24,42,24,24,24,34,24,24,0,121,24,4,0,1,24,160,1,94,2,1,24,119,0,4,0,1,24,255,0,19,24,2,24,0,2,24,0,120,2,32,0,1,24,0,0,85,19,24,0,1,23,0,0,109,19,4,23,1,24,0,0,109,19,8,24,1,23,5,0,107,19,11,23,2,23,0,0,56,205,0,0,78,23,23,0,83,19,23,0,2,24,0,0,57,205,0,0,78,24,24,0,107,19,1,24,2,23,0,0,58,205,0,0,78,23,23,0,107,19,2,23,2,24,0,0,59,205,0,0,78,24,24,0,107,19,3,24,2,23,0,0,60,205,0,0,78,23,23,0,107,19,4,23,1,24,0,0,107,19,5,24,119,0,3,0,135,24,27,0,19,6,0,0,25,2,1,20,1,24,0,0,132,0,0,24,1,23,204,3,135,24,23,0,23,2,19,0,130,24,0,0,0,14,24,0,1,24,0,0,132,0,0,24,38,24,14,1,121,24,11,0,135,2,4,0,102,24,19,11,34,24,24,0,121,24,4,0,82,23,19,0,135,24,9,0,23,0,0,0,0,19,2,0,135,24,6,0,19,0,0,0,102,24,19,11,34,24,24,0,121,24,4,0,82,23,19,0,135,24,9,0,23,0,0,0,1,24,0,0,85,7,24,0,1,23,0,0,109,7,4,23,1,24,0,0,109,7,8,24,25,3,7,11,1,24,1,0,83,3,24,0,1,24,46,0,83,7,24,0,1,23,0,0,107,7,1,23,1,23,0,0,132,0,0,23,1,24,183,1,135,23,1,0,24,10,0,0,130,23,0,0,0,14,23,0,1,23,0,0,132,0,0,23,38,23,14,1,121,23,4,0,135,2,4,0,1,18,78,0,119,0,126,1,1,23,0,0,132,0,0,23,1,24,14,0,135,23,11,0,24,19,2,7,10,0,0,0,130,23,0,0,0,14,23,0,1,23,0,0,132,0,0,23,38,23,14,1,121,23,13,0,135,2,4,0,1,23,0,0,102,24,10,11,49,23,23,24,220,219,0,0,1,18,78,0,119,0,107,1,82,24,10,0,135,23,9,0,24,0,0,0,1,18,78,0,119,0,102,1,102,23,10,11,34,23,23,0,121,23,4,0,82,24,10,0,135,23,9,0,24,0,0,0,78,23,3,0,34,23,23,0,121,23,4,0,82,24,7,0,135,23,9,0,24,0,0,0,25,14,19,11,1,23,0,0,132,0,0,23,1,23,65,1,78,25,14,0,34,25,25,0,121,25,4,0,82,25,19,0,0,24,25,0,119,0,2,0,0,24,19,0,135,3,8,0,23,24,0,0,130,24,0,0,0,5,24,0,1,24,0,0,132,0,0,24,38,24,5,1,121,24,3,0,1,18,81,0,119,0,60,1,85,7,3,0,1,24,220,0,3,4,1,24,82,5,4,0,1,24,224,0,94,24,1,24,45,24,5,24,208,220,0,0,1,24,0,0,132,0,0,24,1,23,24,2,1,25,216,0,3,25,1,25,135,24,3,0,23,25,7,0,130,24,0,0,0,5,24,0,1,24,0,0,132,0,0,24,38,24,5,1,121,24,7,0,1,18,81,0,119,0,37,1,85,5,3,0,82,24,4,0,25,24,24,4,85,4,24,0,102,24,2,11,34,24,24,0,121,24,2,0,82,2,2,0,1,24,208,1,3,5,1,24,1,24,0,0,132,0,0,24,1,24,6,0,82,25,7,0,82,23,9,0,82,26,5,0,135,2,55,0,24,2,25,23,26,0,0,0,130,26,0,0,0,7,26,0,1,26,0,0,132,0,0,26,38,26,7,1,121,26,3,0,1,18,82,0,119,0,7,1,85,10,2,0,3,3,1,22,82,4,3,0,1,26,28,1,94,26,1,26,45,26,4,26,144,221,0,0,1,26,0,0,132,0,0,26,1,23,20,1,3,23,1,23,135,26,3,0,21,23,10,0,130,26,0,0,0,10,26,0,1,26,0,0,132,0,0,26,38,26,10,1,121,26,7,0,1,18,82,0,119,0,242,0,85,4,2,0,82,26,3,0,25,26,26,4,85,3,26,0,1,26,0,0,132,0,0,26,135,26,3,0,20,16,6,0,130,26,0,0,0,10,26,0,1,26,0,0,132,0,0,26,38,26,10,1,121,26,3,0,135,2,4,0,119,0,226,0,1,26,0,0,85,17,26,0,1,23,0,0,109,17,4,23,1,26,0,0,109,17,8,26,25,4,17,11,1,26,1,0,83,4,26,0,1,26,46,0,83,17,26,0,1,23,0,0,107,17,1,23,1,23,0,0,132,0,0,23,1,26,93,0,135,23,7,0,26,15,16,17,130,23,0,0,0,10,23,0,1,23,0,0,132,0,0,23,38,23,10,1,121,23,3,0,135,2,4,0,119,0,187,0,1,23,0,0,132,0,0,23,135,23,3,0,20,13,6,0,130,23,0,0,0,10,23,0,1,23,0,0,132,0,0,23,38,23,10,1,121,23,3,0,135,2,4,0,119,0,154,0,1,23,0,0,132,0,0,23,1,26,94,0,135,23,7,0,26,12,15,13,130,23,0,0,0,10,23,0,1,23,0,0,132,0,0,23,38,23,10,1,121,23,3,0,135,2,4,0,119,0,134,0,82,10,5,0,116,8,9,0,109,8,4,10,1,23,0,0,132,0,0,23,1,26,15,0,1,25,0,0,135,23,11,0,26,1,12,8,25,0,0,0,130,23,0,0,0,10,23,0,1,23,0,0,132,0,0,23,38,23,10,1,121,23,31,0,135,2,4,0,25,3,12,36,102,23,3,11,34,23,23,0,121,23,4,0,82,25,3,0,135,23,9,0,25,0,0,0,25,3,12,24,102,23,3,11,34,23,23,0,121,23,4,0,82,25,3,0,135,23,9,0,25,0,0,0,25,3,12,12,102,23,3,11,34,23,23,0,121,23,4,0,82,25,3,0,135,23,9,0,25,0,0,0,1,23,0,0,102,25,12,11,56,23,23,25,176,224,0,0,82,25,12,0,135,23,9,0,25,0,0,0,119,0,88,0,25,2,12,36,102,23,2,11,34,23,23,0,121,23,4,0,82,25,2,0,135,23,9,0,25,0,0,0,25,2,12,24,102,23,2,11,34,23,23,0,121,23,4,0,82,25,2,0,135,23,9,0,25,0,0,0,25,2,12,12,102,23,2,11,34,23,23,0,121,23,4,0,82,25,2,0,135,23,9,0,25,0,0,0,102,23,12,11,34,23,23,0,121,23,4,0,82,25,12,0,135,23,9,0,25,0,0,0,102,23,13,11,34,23,23,0,121,23,4,0,82,25,13,0,135,23,9,0,25,0,0,0,25,2,15,24,102,23,2,11,34,23,23,0,121,23,4,0,82,25,2,0,135,23,9,0,25,0,0,0,25,2,15,12,102,23,2,11,34,23,23,0,121,23,4,0,82,25,2,0,135,23,9,0,25,0,0,0,102,23,15,11,34,23,23,0,121,23,4,0,82,25,15,0,135,23,9,0,25,0,0,0,78,23,4,0,34,23,23,0,121,23,4,0,82,25,17,0,135,23,9,0,25,0,0,0,102,23,16,11,34,23,23,0,121,23,4,0,82,25,16,0,135,23,9,0,25,0,0,0,1,23,0,0,132,0,0,23,82,25,1,0,106,25,25,12,135,23,3,0,25,0,1,0,130,23,0,0,0,18,23,0,1,23,0,0,132,0,0,23,38,23,18,1,121,23,3,0,1,18,82,0,119,0,50,0,78,23,14,0,34,23,23,0,121,23,4,0,82,25,19,0,135,23,9,0,25,0,0,0,137,11,0,0,139,0,0,0,1,23,0,0,102,25,13,11,56,23,23,25,204,224,0,0,82,25,13,0,135,23,9,0,25,0,0,0,25,3,15,24,102,23,3,11,34,23,23,0,121,23,4,0,82,25,3,0,135,23,9,0,25,0,0,0,25,3,15,12,102,23,3,11,34,23,23,0,121,23,4,0,82,25,3,0,135,23,9,0,25,0,0,0,1,23,0,0,102,25,15,11,56,23,23,25,32,225,0,0,82,25,15,0,135,23,9,0,25,0,0,0,78,23,4,0,34,23,23,0,121,23,4,0,82,25,17,0,135,23,9,0,25,0,0,0,1,23,0,0,102,25,16,11,56,23,23,25,84,225,0,0,82,25,16,0,135,23,9,0,25,0,0,0,32,23,18,82,121,23,2,0,135,2,4,0,32,23,18,81,121,23,2,0,135,2,4,0,78,23,14,0,34,23,23,0,121,23,4,0,82,25,19,0,135,23,9,0,25,0,0,0,32,23,18,78,121,23,7,0,78,23,3,0,34,23,23,0,121,23,4,0,82,25,7,0,135,23,9,0,25,0,0,0,0,19,2,0,135,23,6,0,19,0,0,0,139,0,0,0,140,1,23,0,0,0,0,0,2,16,0,0,200,1,0,0,2,17,0,0,160,0,0,0,2,18,0,0,200,27,0,0,1,7,0,0,136,19,0,0,0,15,19,0,136,19,0,0,25,19,19,64,137,19,0,0,25,11,15,44,25,10,15,32,25,9,15,24,25,8,15,8,0,14,15,0,120,0,4,0,1,14,1,0,137,15,0,0,139,14,0,0,82,19,0,0,1,22,0,0,1,21,2,0,138,19,22,21,56,226,0,0,20,234,0,0,1,14,255,255,137,15,0,0,139,14,0,0,119,0,252,1,106,12,0,4,120,12,4,0,1,14,1,0,137,15,0,0,139,14,0,0,106,6,0,8,120,6,4,0,1,14,1,0,137,15,0,0,139,14,0,0,106,1,12,84,121,1,4,0,0,14,1,0,137,15,0,0,139,14,0,0,1,20,44,1,97,6,20,0,1,20,1,0,85,0,20,0,1,20,0,0,132,0,0,20,1,20,214,3,106,21,12,28,2,22,0,0,79,94,1,0,135,3,23,0,20,21,22,0,130,22,0,0,0,5,22,0,1,22,0,0,132,0,0,22,38,22,5,1,121,22,3,0,1,7,26,0,119,0,64,1,1,22,0,0,85,11,22,0,1,21,0,0,109,11,4,21,1,22,0,0,109,11,8,22,135,4,17,0,3,0,0,0,1,22,239,255,48,22,22,4,20,227,0,0,1,22,0,0,132,0,0,22,1,21,171,1,135,22,1,0,21,11,0,0,1,22,0,0,132,0,0,22,1,7,26,0,119,0,44,1,35,22,4,11,121,22,8,0,107,11,11,4,120,4,3,0,0,1,11,0,119,0,27,0,0,1,11,0,1,7,14,0,119,0,24,0,25,22,4,16,38,22,22,240,0,2,22,0,1,22,0,0,132,0,0,22,1,22,58,1,135,1,8,0,22,2,0,0,130,22,0,0,0,7,22,0,1,22,0,0,132,0,0,22,38,22,7,1,121,22,3,0,1,7,26,0,119,0,19,1,85,11,1,0,2,21,0,0,0,0,0,128,20,21,2,21,109,11,8,21,109,11,4,4,1,7,14,0,32,21,7,14,121,21,3,0,135,21,18,0,1,3,4,0,1,22,0,0,95,1,4,22,1,22,0,0,132,0,0,22,1,22,214,3,106,21,12,32,2,20,0,0,79,94,1,0,135,3,23,0,22,21,20,0,130,20,0,0,0,5,20,0,1,20,0,0,132,0,0,20,38,20,5,1,121,20,3,0,1,7,27,0,119,0,232,0,1,20,0,0,85,10,20,0,1,21,0,0,109,10,4,21,1,20,0,0,109,10,8,20,135,4,17,0,3,0,0,0,1,20,239,255,48,20,20,4,60,228,0,0,1,20,0,0,132,0,0,20,1,21,171,1,135,20,1,0,21,10,0,0,1,20,0,0,132,0,0,20,1,7,27,0,119,0,212,0,35,20,4,11,121,20,8,0,107,10,11,4,120,4,3,0,0,1,10,0,119,0,27,0,0,1,10,0,1,7,22,0,119,0,24,0,25,20,4,16,38,20,20,240,0,2,20,0,1,20,0,0,132,0,0,20,1,20,58,1,135,1,8,0,20,2,0,0,130,20,0,0,0,7,20,0,1,20,0,0,132,0,0,20,38,20,7,1,121,20,3,0,1,7,27,0,119,0,187,0,85,10,1,0,2,21,0,0,0,0,0,128,20,21,2,21,109,10,8,21,109,10,4,4,1,7,22,0,32,21,7,22,121,21,3,0,135,21,18,0,1,3,4,0,1,20,0,0,95,1,4,20,106,20,12,72,32,1,20,2,1,20,0,0,132,0,0,20,82,21,6,0,106,21,21,8,135,20,3,0,21,9,6,0,130,20,0,0,0,5,20,0,1,20,0,0,132,0,0,20,38,20,5,1,121,20,5,0,1,20,0,0,135,1,20,0,20,0,0,0,119,0,150,0,25,5,9,4,82,20,5,0,120,20,17,0,1,20,0,0,132,0,0,20,1,21,0,0,135,20,3,0,16,14,21,0,130,20,0,0,0,8,20,0,1,20,0,0,132,0,0,20,38,20,8,1,121,20,114,0,1,20,0,0,135,1,20,0,20,0,0,0,1,7,57,0,119,0,109,0,1,20,0,0,132,0,0,20,1,21,49,0,106,22,6,32,135,20,11,0,21,8,6,1,22,0,0,0,130,20,0,0,0,6,20,0,1,20,0,0,132,0,0,20,38,20,6,1,121,20,5,0,1,20,0,0,135,1,20,0,20,0,0,0,119,0,91,0,1,20,0,0,132,0,0,20,25,20,12,116,1,22,0,0,135,1,2,0,17,8,20,22,130,22,0,0,0,6,22,0,1,22,0,0,132,0,0,22,38,22,6,1,121,22,26,0,1,22,0,0,135,1,20,0,22,0,0,0,82,2,8,0,120,2,2,0,119,0,73,0,25,4,8,4,82,3,4,0,46,22,3,2,52,230,0,0,26,3,3,12,85,4,3,0,102,22,3,11,34,22,22,0,121,22,5,0,82,20,3,0,135,22,9,0,20,0,0,0,82,3,4,0,53,22,3,2,4,230,0,0,82,2,8,0,135,22,9,0,2,0,0,0,119,0,54,0,32,4,1,0,82,1,8,0,121,1,19,0,25,3,8,4,82,2,3,0,46,22,2,1,140,230,0,0,26,2,2,12,85,3,2,0,102,22,2,11,34,22,22,0,121,22,5,0,82,20,2,0,135,22,9,0,20,0,0,0,82,2,3,0,53,22,2,1,92,230,0,0,82,1,8,0,135,22,9,0,1,0,0,0,121,4,15,0,1,22,4,0,135,8,42,0,22,0,0,0,135,22,56,0,8,0,0,0,1,22,0,0,132,0,0,22,1,20,74,0,1,21,152,1,135,22,7,0,20,8,18,21,1,22,0,0,132,0,0,22,119,0,13,0,1,22,0,0,132,0,0,22,82,21,5,0,135,22,3,0,16,14,21,0,130,22,0,0,0,8,22,0,1,22,0,0,132,0,0,22,38,22,8,1,120,22,2,0,119,0,7,0,1,22,0,0,135,1,20,0,22,0,0,0,1,7,57,0,119,0,2,0,1,7,57,0,32,22,7,57,121,22,4,0,135,22,5,0,9,0,0,0,119,0,18,0,1,22,56,32,85,14,22,0,135,22,5,0,9,0,0,0,102,22,10,11,34,22,22,0,121,22,4,0,82,21,10,0,135,22,9,0,21,0,0,0,102,22,11,11,34,22,22,0,121,22,25,0,82,21,11,0,135,22,9,0,21,0,0,0,119,0,21,0,102,22,10,11,34,22,22,0,121,22,4,0,82,21,10,0,135,22,9,0,21,0,0,0,32,22,7,27,121,22,4,0,1,22,0,0,135,1,20,0,22,0,0,0,102,22,11,11,34,22,22,0,121,22,6,0,82,21,11,0,135,22,9,0,21,0,0,0,1,7,62,0,119,0,2,0,1,7,62,0,32,22,7,26,121,22,5,0,1,22,0,0,135,1,20,0,22,0,0,0,1,7,62,0,32,22,7,62,121,22,110,0,135,22,57,0,1,0,0,0,1,22,0,0,132,0,0,22,1,21,140,1,135,22,8,0,21,12,0,0,130,22,0,0,0,11,22,0,1,22,0,0,132,0,0,22,38,22,11,1,121,22,69,0,1,22,0,0,135,11,20,0,22,0,0,0,135,22,57,0,11,0,0,0,1,22,0,0,132,0,0,22,1,21,140,1,135,22,8,0,21,12,0,0,130,22,0,0,0,12,22,0,1,22,0,0,132,0,0,22,38,22,12,1,121,22,21,0,135,1,4,0,1,22,0,0,132,0,0,22,1,21,4,0,135,22,58,0,21,0,0,0,130,22,0,0,0,12,22,0,1,22,0,0,132,0,0,22,38,22,12,1,121,22,7,0,1,22,0,0,135,12,20,0,22,0,0,0,135,22,21,0,12,0,0,0,119,0,16,0,0,13,1,0,119,0,14,0,1,22,0,0,132,0,0,22,1,21,4,0,135,22,58,0,21,0,0,0,130,22,0,0,0,13,22,0,1,22,0,0,132,0,0,22,38,22,13,1,120,22,2,0,119,0,21,0,135,13,4,0,1,22,0,0,132,0,0,22,1,21,4,0,135,22,58,0,21,0,0,0,130,22,0,0,0,12,22,0,1,22,0,0,132,0,0,22,38,22,12,1,121,22,7,0,1,22,0,0,135,13,20,0,22,0,0,0,135,22,21,0,13,0,0,0,119,0,3,0,135,22,59,0,13,0,0,0,1,22,0,0,132,0,0,22,1,21,4,0,135,22,58,0,21,0,0,0,130,22,0,0,0,13,22,0,1,22,0,0,132,0,0,22,38,22,13,1,120,22,15,0,1,22,0,0,132,0,0,22,1,21,0,0,135,22,3,0,16,14,21,0,130,22,0,0,0,13,22,0,1,22,0,0,132,0,0,22,38,22,13,1,120,22,4,0,1,22,56,32,85,14,22,0,119,0,4,0,135,13,4,0,135,22,59,0,13,0,0,0,25,2,0,12,46,22,2,14,252,233,0,0,25,1,0,16,82,22,1,0,121,22,17,0,1,22,0,0,132,0,0,22,1,21,172,1,135,22,1,0,21,2,0,0,130,22,0,0,0,0,22,0,1,22,0,0,132,0,0,22,38,22,0,1,121,22,6,0,135,15,4,0,135,22,5,0,14,0,0,0,135,22,6,0,15,0,0,0,25,0,14,4,116,1,0,0,1,22,0,0,85,0,22,0,135,22,5,0,14,0,0,0,1,14,0,0,137,15,0,0,139,14,0,0,119,0,1,0,1,14,0,0,137,15,0,0,139,14,0,0,119,0,2,254,1,19,0,0,139,19,0,0,140,1,9,0,0,0,0,0,120,0,3,0,1,4,1,0,139,4,0,0,106,1,0,84,121,1,3,0,0,4,1,0,139,4,0,0,25,2,0,120,82,5,2,0,121,5,38,0,1,5,212,1,135,1,12,0,5,0,0,0,1,5,0,0,132,0,0,5,1,6,178,2,135,5,3,0,6,1,0,0,130,5,0,0,0,4,5,0,1,5,0,0,132,0,0,5,38,5,4,1,121,5,7,0,135,4,4,0,135,5,9,0,1,0,0,0,135,5,6,0,4,0,0,0,119,0,18,0,1,5,8,68,85,1,5,0,1,5,204,1,82,6,2,0,97,1,5,6,25,4,0,124,1,6,208,1,82,5,4,0,97,1,6,5,1,5,0,0,85,2,5,0,1,5,0,0,85,4,5,0,134,4,0,0,104,238,0,0,0,1,0,0,139,4,0,0,1,5,8,0,135,1,42,0,5,0,0,0,1,5,0,0,132,0,0,5,1,6,234,1,2,7,0,0,201,200,0,0,135,5,3,0,6,1,7,0,130,5,0,0,0,2,5,0,1,5,0,0,132,0,0,5,38,5,2,1,121,5,8,0,1,5,0,0,135,2,20,0,5,0,0,0,135,5,43,0,1,0,0,0,0,1,2,0,119,0,13,0,1,5,0,0,132,0,0,5,1,7,74,0,1,6,232,27,1,8,157,1,135,5,7,0,7,1,6,8,1,5,0,0,132,0,0,5,1,5,0,0,135,1,20,0,5,0,0,0,135,5,57,0,1,0,0,0,1,5,0,0,132,0,0,5,1,5,140,1,135,1,8,0,5,0,0,0,130,5,0,0,0,2,5,0,1,5,0,0,132,0,0,5,38,5,2,1,121,5,71,0,1,5,0,0,135,1,20,0,5,0,0,0,135,5,57,0,1,0,0,0,1,5,0,0,132,0,0,5,1,5,140,1,135,1,8,0,5,0,0,0,130,5,0,0,0,0,5,0,1,5,0,0,132,0,0,5,38,5,0,1,121,5,21,0,135,1,4,0,1,5,0,0,132,0,0,5,1,8,4,0,135,5,58,0,8,0,0,0,130,5,0,0,0,0,5,0,1,5,0,0,132,0,0,5,38,5,0,1,121,5,7,0,1,5,0,0,135,0,20,0,5,0,0,0,135,5,21,0,0,0,0,0,119,0,17,0,0,4,1,0,119,0,15,0,1,5,0,0,132,0,0,5,1,8,4,0,135,5,58,0,8,0,0,0,130,5,0,0,0,4,5,0,1,5,0,0,132,0,0,5,38,5,4,1,120,5,3,0,0,3,1,0,119,0,23,0,135,4,4,0,1,5,0,0,132,0,0,5,1,8,4,0,135,5,58,0,8,0,0,0,130,5,0,0,0,0,5,0,1,5,0,0,132,0,0,5,38,5,0,1,121,5,7,0,1,5,0,0,135,4,20,0,5,0,0,0,135,5,21,0,4,0,0,0,119,0,5,0,135,5,6,0,4,0,0,0,119,0,2,0,0,3,1,0,135,5,60,0,39,5,3,1,0,4,5,0,139,4,0,0,140,17,26,0,0,0,0,0,135,0,61,0,0,0,0,0,121,2,8,0,135,19,62,0,0,0,0,0,1,17,0,0,0,18,19,0,135,19,63,0,19,0,0,0,119,0,7,0,135,19,64,0,0,0,0,0,0,17,19,0,1,18,0,0,135,19,65,0,19,0,0,0,135,0,66,0,19,0,0,0,1,20,255,255,47,20,20,5,64,237,0,0,135,20,67,0,0,5,0,0,135,20,68,0,0,4,0,0,135,20,69,0,0,6,0,0,135,20,70,0,0,9,0,0,135,20,71,0,0,8,0,0,135,20,72,0,0,10,0,0,135,20,73,0,0,7,0,0,135,20,74,0,0,15,0,0,135,20,75,0,0,16,0,0,135,20,76,0,0,13,0,0,135,20,77,0,0,14,0,0,135,20,78,0,0,1,0,0,135,20,79,0,0,12,0,0,135,20,80,0,0,11,0,0,121,3,14,0,1,20,1,0,135,9,81,0,20,0,0,0,1,21,0,0,1,23,161,0,59,24,0,0,1,25,0,0,135,22,82,0,23,24,25,0,135,20,83,0,9,21,22,0,135,20,84,0,0,9,0,0,121,2,4,0,135,0,85,0,18,0,0,0,119,0,4,0,134,0,0,0,44,234,0,0,17,0,0,0,120,0,11,0,135,8,86,0,19,0,0,0,135,9,87,0,19,0,0,0,1,22,0,0,135,21,88,0,19,0,0,0,135,20,89,0,22,8,9,21,119,0,8,0,135,9,90,0,19,0,0,0,1,21,1,0,135,22,91,0,19,0,0,0,135,20,92,0,21,9,22,0,121,2,5,0,135,20,93,0,18,0,0,0,139,0,0,0,119,0,4,0,135,20,94,0,17,0,0,0,139,0,0,0,139,0,0,0,140,2,7,0,0,0,0,0,135,2,95,0,0,1,0,0,1,5,0,0,132,0,0,5,1,6,143,1,135,5,8,0,6,2,0,0,130,5,0,0,0,1,5,0,1,5,0,0,132,0,0,5,38,5,1,1,120,5,17,0,1,5,0,0,132,0,0,5,1,6,144,1,135,5,8,0,6,2,0,0,130,5,0,0,0,1,5,0,1,5,0,0,132,0,0,5,38,5,1,1,120,5,6,0,135,5,96,0,2,0,0,0,25,3,0,84,82,3,3,0,139,3,0,0,1,5,0,0,135,1,20,0,5,0,0,0,135,5,57,0,1,0,0,0,1,5,0,0,132,0,0,5,1,6,140,1,135,5,8,0,6,0,0,0,130,5,0,0,0,1,5,0,1,5,0,0,132,0,0,5,38,5,1,1,121,5,69,0,1,5,0,0,135,1,20,0,5,0,0,0,135,5,57,0,1,0,0,0,1,5,0,0,132,0,0,5,1,6,140,1,135,5,8,0,6,0,0,0,130,5,0,0,0,1,5,0,1,5,0,0,132,0,0,5,38,5,1,1,121,5,21,0,135,1,4,0,1,5,0,0,132,0,0,5,1,6,4,0,135,5,58,0,6,0,0,0,130,5,0,0,0,4,5,0,1,5,0,0,132,0,0,5,38,5,4,1,121,5,7,0,1,5,0,0,135,4,20,0,5,0,0,0,135,5,21,0,4,0,0,0,119,0,16,0,0,3,1,0,119,0,14,0,1,5,0,0,132,0,0,5,1,6,4,0,135,5,58,0,6,0,0,0,130,5,0,0,0,4,5,0,1,5,0,0,132,0,0,5,38,5,4,1,120,5,2,0,119,0,21,0,135,3,4,0,1,5,0,0,132,0,0,5,1,6,4,0,135,5,58,0,6,0,0,0,130,5,0,0],eb+51200);HEAPU8.set([0,4,5,0,1,5,0,0,132,0,0,5,38,5,4,1,121,5,7,0,1,5,0,0,135,4,20,0,5,0,0,0,135,5,21,0,4,0,0,0,119,0,3,0,135,5,6,0,3,0,0,0,135,5,60,0,135,5,96,0,2,0,0,0,25,4,0,84,82,4,4,0,139,4,0,0,140,2,9,0,0,0,0,0,25,2,0,76,25,3,0,80,82,6,3,0,82,7,2,0,50,6,6,7,116,240,0,0,1,6,1,0,139,6,0,0,135,6,97,0,0,0,0,0,1,7,1,0,1,8,0,0,135,6,98,0,0,7,8,0,1,8,1,0,1,7,0,0,135,6,99,0,0,8,7,0,120,6,47,0,82,4,2,0,135,5,100,0,4,0,0,0,125,6,5,5,4,0,0,0,135,4,101,0,6,0,0,0,32,7,4,0,121,7,4,0,1,7,1,0,0,6,7,0,119,0,4,0,82,7,3,0,16,7,7,4,0,6,7,0,120,6,3,0,1,0,7,0,119,0,36,0,82,5,2,0,135,4,100,0,5,0,0,0,125,5,4,4,5,0,0,0,78,7,5,0,32,7,7,125,121,7,4,0,25,7,5,1,0,6,7,0,119,0,3,0,1,7,0,0,0,6,7,0,0,5,6,0,32,7,5,0,121,7,4,0,1,7,1,0,0,6,7,0,119,0,4,0,82,7,3,0,16,7,7,5,0,6,7,0,120,6,3,0,1,0,7,0,119,0,11,0,134,6,0,0,0,0,0,0,0,1,0,0,82,6,3,0,82,7,2,0,50,6,6,7,112,241,0,0,1,0,7,0,119,0,2,0,119,0,193,255,32,6,0,7,121,6,3,0,1,6,1,0,139,6,0,0,1,6,0,0,139,6,0,0,140,3,9,0,0,0,0,0,1,6,2,0,135,8,102,0,2,0,0,0,135,7,103,0,8,0,0,0,135,5,92,0,6,0,7,0,1,7,3,0,1,6,0,0,135,5,104,0,7,6,0,0,120,5,9,0,1,6,20,0,135,5,105,0,6,0,0,0,1,6,3,0,1,7,0,0,135,5,104,0,6,7,0,0,121,5,249,255,1,5,4,0,1,7,0,0,135,1,104,0,5,7,0,0,121,1,17,0,1,7,1,0,135,4,106,0,7,0,0,0,1,7,0,0,1,5,0,0,135,0,107,0,0,7,5,0,85,4,0,0,135,7,61,0,1,0,0,0,1,6,0,0,1,8,0,0,135,5,108,0,0,7,6,8,0,0,4,0,139,0,0,0,1,5,5,0,1,8,0,0,135,1,104,0,5,8,0,0,1,8,6,0,1,5,0,0,135,3,104,0,8,5,0,0,20,5,3,1,120,5,3,0,1,0,0,0,139,0,0,0,1,5,1,0,135,4,106,0,5,0,0,0,125,5,1,1,0,0,0,0,135,2,61,0,5,0,0,0,120,3,3,0,1,1,0,0,119,0,3,0,135,1,61,0,3,0,0,0,1,5,0,0,135,0,107,0,2,1,5,0,85,4,0,0,0,0,4,0,139,0,0,0],eb+61440);var relocations=[];relocations=relocations.concat([3536,3560,3564,3568,3572,3576,3580,3584,3972,4064,4100,4248,4648,4748,4836,5156,5212,5232,5264,5296,5312,6052,6344,6424,6556,6892,7240,7392,7408,7512,7600,7684,7996,8020,9524,9616,11968,12132,12424,12504,12652,13148,13364,13588,14084,14168,14352,14396,15008,15104,15260,15356,15456,15540,15864,16040,16128,16656,16660,16664,16668,16672,16676,16680,16684,16688,16692,16696,16700,16704,16708,16712,16716,16720,16724,16728,16732,16736,16740,16744,16748,16752,16756,16760,16764,16768,16772,16776,16780,16784,16788,16792,16796,16800,16804,16808,16812,16816,16820,16824,16828,16832,16836,16840,16844,16848,16852,16856,16860,16864,16868,16872,16876,16880,16884,16888,16940,16944,17068,17228,17344,17700,17796,17912,18088,18560,18676,19092,19188,19300,19576,19696,19720,19928,20264,20420,20424,20428,20432,20436,20440,20444,20448,20452,20456,20460,20464,20468,20472,20476,20480,20484,20488,20492,20496,20500,20504,20508,20512,20516,20520,20524,20528,20532,20536,20540,20544,20548,20552,20556,20560,20564,20568,20572,20576,20580,20584,20588,20592,20596,20600,20604,20608,20612,20616,20620,20624,20628,20632,20636,20640,20644,20648,20652,20656,20660,20664,20668,20672,20676,20680,20684,20688,20692,20696,20700,20704,20708,20712,20716,20720,20724,20728,20732,20736,20740,20744,20748,20752,20756,20760,20764,20768,20772,20776,20780,20784,20788,20792,20796,20800,20804,20808,20812,20816,20820,20824,20828,20832,20836,20840,20844,20848,20852,20856,20860,20864,20868,20872,20876,20880,20884,20888,20892,20896,20900,20904,20908,20912,20916,20920,20924,20928,20932,20936,20940,20944,20948,20952,20956,20960,20964,20968,20972,20976,20980,20984,20988,20992,20996,21e3,21004,21008,21012,21016,21020,21024,21028,21032,21036,21040,21044,21048,21052,21056,21060,21064,21068,21072,21076,21080,21084,21088,21092,21096,21100,21104,21108,21112,21116,21120,21124,21128,21132,21136,21140,21144,21148,21152,21156,21160,21164,21168,21172,21176,21180,21184,21188,21192,21196,21200,21204,21208,21212,21216,21220,21224,21228,21468,21512,22488,22724,22728,22732,22736,22740,22744,22748,22752,22756,22760,22764,22768,22772,22776,22780,22784,22788,22792,22796,22800,22804,22808,22812,22816,22820,22824,22828,22832,22836,22840,22844,22848,22852,22856,22860,22864,22868,22872,22876,22880,22884,22888,22892,22896,22900,22904,22908,22912,22916,22920,22924,22928,22932,22936,22940,22944,22948,22952,22956,22960,22964,22968,22972,22976,22980,22984,22988,23304,23488,23888,24060,24200,24316,24472,24656,24684,24688,24692,24696,24700,24704,24708,24712,24716,24720,24724,24728,24732,24736,24740,24744,24748,24752,24756,24760,24764,24768,24772,24776,24780,24784,24788,24792,24796,24800,24804,24808,24812,24816,24820,24824,24828,24832,24836,24840,24844,24848,24852,24856,24860,24864,24868,24872,24876,24880,24884,24888,24892,24896,24900,24904,24908,24912,24916,24920,24924,24928,24932,25144,25328,25340,25368,25420,25448,25468,25488,25536,25600,25656,25696,25700,25704,25708,25712,25716,25720,25724,25728,25732,25736,25740,25744,25748,25752,25756,25760,25764,25768,25772,25776,25780,25784,25788,25792,25796,25800,25804,25808,25812,25816,25820,25824,25828,25832,25836,25840,25844,25848,25852,25856,25860,25864,25868,25872,25876,25880,25884,25888,25892,25896,25900,25904,25908,25912,25916,25920,25924,25928,25932,25936,25940,25944,25948,25952,25956,25960,25964,25968,25972,25976,25980,25984,25988,25992,25996,26e3,26004,26008,26012,26016,26020,26024,26028,26032,26036,26040,26044,26048,26052,26056,26060,26064,26068,26072,26076,26080,26084,26088,26092,26096,26100,26104,26108,26112,26116,26120,26124,26128,26132,26136,26140,26144,26148,26152,26156,26160,26164,26168,26172,26176,26180,26184,26188,26192,26196,26200,26204,26208,26212,26216,26220,26224,26228,26232,26236,26240,26244,26248,26252,26256,26260,26264,26268,26272,26276,26280,26284,26288,26292,26296,26300,26304,26308,26312,26316,26320,26324,26328,26332,26336,26340,26344,26348,26352,26356,26360,26364,26368,26372,26376,26380,26384,26388,26392,26396,26400,26404,26408,26412,26416,26420,26424,26428,26432,26908,26936,26964,27124,27180,27196,27220,27236,27260,27284,27308,27364,27704,27984,28124,28148,28884,29236,29336,29420,29652,29772,30004,30088,30260,30304,30644,30820,30904,31072,31232,31404,31596,31788,31892,32360,32416,32528,32556,32588,32608,32740,33032,33116,33300,33392,33536,33820,33888,34140,35444,36072,36204,36264,36396,36512,36620,36752,36912,37564,37756,37812,37868,38240,38296,38460,38488,38492,38496,38500,38504,38508,38512,38516,38520,38524,38528,38532,38536,38540,38544,38548,38552,38556,38560,38564,38568,38572,38576,38580,38584,38588,38592,38596,38600,38604,38608,38612,38616,38620,38624,38628,38632,38636,38640,38644,38648,38652,38656,38660,38664,38668,38672,38676,38680,38684,38688,38692,38696,38700,38704,38708,38712,38716,38720,38724,38728,38732,38736,38740,38744,38748,38752,38756,38760,38764,38768,38772,38776,38780,38784,38788,38792,38796,38800,38804,38808,38812,38816,38820,38824,38828,38832,38836,38840,38844,38848,38852,38856,38860,38864,38868,38872,38876,38880,38884,38888,38892,38896,38900,38904,38908,38912,38916,38920,38924,38928,38932,38936,38940,38944,38948,38952,38956,38960,38964,38968,38972,38976,38980,38984,38988,38992,38996,39e3,39004,39008,39012,39016,39020,39024,39028,39032,39036,39040,39044,39048,39052,39056,39060,39064,39068,39072,39076,39080,39084,39088,39092,39096,39100,39104,39108,39112,39116,39120,39124,39128,39132,39136,39140,39144,39148,39152,39156,39160,39164,39168,39172,39176,39180,39184,39188,39192,39196,39200,39204,39208,39212,39216,39220,39224,39228,39232,39236,39240,39244,39248,39252,39256,39260,39264,39268,39272,39276,39280,39284,39288,39292,39296,39300,39304,39308,39312,39316,39320,39324,40388,40412,40536,40644,40696,40760,40776,40872,40892,41120,41196,41284,41412,41584,41692,41836,41928,41952,42040,42480,43036,43100,43528,43572,43668,43888,44492,44796,44868,44912,44972,45068,45132,45176,45380,45424,45524,45944,46108,46332,47352,48228,48296,48436,48716,48796,48992,49076,49240,49284,49360,49660,49816,50020,50300,50380,50576,50772,51920,52144,52200,52516,52984,53056,53224,53264,53328,53472,53520,53728,53812,53976,54016,54212,54316,54552,54624,54776,55060,55140,55548,56272,56464,56660,57152,57532,57616,57668,57888,57892,58092,58388,58880,58924,58968,59012,59804,60724,61544,61796,60132,60916,61776]);for(var i=0;i<relocations.length;i++){HEAPU32[eb+relocations[i]>>2]=HEAPU32[eb+relocations[i]>>2]+eb}}));function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}function ___assert_fail(condition,filename,line,func){abort("Assertion failed: "+Pointer_stringify(condition)+", at: "+[filename?Pointer_stringify(filename):"unknown filename",line,func?Pointer_stringify(func):"unknown function"])}function ___cxa_allocate_exception(size){return _malloc(size)}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:(function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var ptr in EXCEPTIONS.infos){var info=EXCEPTIONS.infos[ptr];if(info.adjusted===adjusted){return ptr}}return adjusted}),addRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++}),decRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0&&!info.rethrown){if(info.destructor){Module["dynCall_vi"](info.destructor,ptr)}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}}),clearRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0})};function ___cxa_begin_catch(ptr){var info=EXCEPTIONS.infos[ptr];if(info&&!info.caught){info.caught=true;__ZSt18uncaught_exceptionv.uncaught_exception--}if(info)info.rethrown=false;EXCEPTIONS.caught.push(ptr);EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));return ptr}function ___cxa_call_unexpected(exception){Module.printErr("Unexpected exception thrown, this is not properly supported - aborting");ABORT=true;throw exception}function ___cxa_free_exception(ptr){try{return _free(ptr)}catch(e){}}function ___cxa_end_catch(){Module["setThrew"](0);var ptr=EXCEPTIONS.caught.pop();if(ptr){EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));EXCEPTIONS.last=0}}function ___cxa_find_matching_catch_2(){return ___cxa_find_matching_catch.apply(null,arguments)}function ___cxa_find_matching_catch_3(){return ___cxa_find_matching_catch.apply(null,arguments)}function ___cxa_find_matching_catch_4(){return ___cxa_find_matching_catch.apply(null,arguments)}function ___cxa_find_matching_catch_6(){return ___cxa_find_matching_catch.apply(null,arguments)}function ___cxa_find_matching_catch_8(){return ___cxa_find_matching_catch.apply(null,arguments)}function ___cxa_get_exception_ptr(ptr){return ptr}function ___cxa_pure_virtual(){ABORT=true;throw"Pure virtual function called!"}function ___cxa_rethrow(){var ptr=EXCEPTIONS.caught.pop();if(!EXCEPTIONS.infos[ptr].rethrown){EXCEPTIONS.caught.push(ptr);EXCEPTIONS.infos[ptr].rethrown=true}EXCEPTIONS.last=ptr;throw ptr}function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}throw ptr}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(setTempRet0(0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(setTempRet0(0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module["___cxa_is_pointer_type"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module["___cxa_can_catch"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted=thrown;return(setTempRet0(typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(setTempRet0(throwntype),thrown)|0}function ___cxa_throw(ptr,type,destructor){EXCEPTIONS.infos[ptr]={ptr:ptr,adjusted:ptr,type:type,destructor:destructor,refcount:0,caught:false,rethrown:false};EXCEPTIONS.last=ptr;if(!("uncaught_exception"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exception=1}else{__ZSt18uncaught_exceptionv.uncaught_exception++}throw ptr}function ___lock(){}var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;return value}function ___map_file(pathname,size){___setErrNo(ERRNO_CODES.EPERM);return-1}var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};var PATH={splitPath:(function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)}),normalizeArray:(function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts}),normalize:(function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter((function(p){return!!p})),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path}),dirname:(function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir}),basename:(function(path){if(path==="/")return"/";var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)}),extname:(function(path){return PATH.splitPath(path)[3]}),join:(function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))}),join2:(function(l,r){return PATH.normalize(l+"/"+r)}),resolve:(function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter((function(p){return!!p})),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."}),relative:(function(from,to){from=PATH.resolve(from).substr(1);to=PATH.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")})};var TTY={ttys:[],init:(function(){}),shutdown:(function(){}),register:(function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)}),stream_ops:{open:(function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}stream.tty=tty;stream.seekable=false}),close:(function(stream){stream.tty.ops.flush(stream.tty)}),flush:(function(stream){stream.tty.ops.flush(stream.tty)}),read:(function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(ERRNO_CODES.ENXIO)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead}),write:(function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(ERRNO_CODES.ENXIO)}for(var i=0;i<length;i++){try{stream.tty.ops.put_char(stream.tty,buffer[offset+i])}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}}if(length){stream.node.timestamp=Date.now()}return i})},default_tty_ops:{get_char:(function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=new Buffer(BUFSIZE);var bytesRead=0;var isPosixPlatform=process.platform!="win32";var fd=process.stdin.fd;if(isPosixPlatform){var usingDevice=false;try{fd=fs.openSync("/dev/stdin","r");usingDevice=true}catch(e){}}try{bytesRead=fs.readSync(fd,buf,0,BUFSIZE,null)}catch(e){if(e.toString().indexOf("EOF")!=-1)bytesRead=0;else throw e}if(usingDevice){fs.closeSync(fd)}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8")}else{result=null}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()}),put_char:(function(tty,val){if(val===null||val===10){Module["print"](UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}}),flush:(function(tty){if(tty.output&&tty.output.length>0){Module["print"](UTF8ArrayToString(tty.output,0));tty.output=[]}})},default_tty1_ops:{put_char:(function(tty,val){if(val===null||val===10){Module["printErr"](UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}}),flush:(function(tty){if(tty.output&&tty.output.length>0){Module["printErr"](UTF8ArrayToString(tty.output,0));tty.output=[]}})}};var MEMFS={ops_table:null,mount:(function(mount){return MEMFS.createNode(null,"/",16384|511,0)}),createNode:(function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node}return node}),getFileDataAsRegularArray:(function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr}return node.contents}),getFileDataAsTypedArray:(function(node){if(!node.contents)return new Uint8Array;if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)}),expandFileStorage:(function(node,newCapacity){if(node.contents&&node.contents.subarray&&newCapacity>node.contents.length){node.contents=MEMFS.getFileDataAsRegularArray(node);node.usedBytes=node.contents.length}if(!node.contents||node.contents.subarray){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)|0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return}if(!node.contents&&newCapacity>0)node.contents=[];while(node.contents.length<newCapacity)node.contents.push(0)}),resizeFileStorage:(function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(new ArrayBuffer(newSize));if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize;return}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize}),node_ops:{getattr:(function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr}),setattr:(function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}}),lookup:(function(parent,name){throw FS.genericErrors[ERRNO_CODES.ENOENT]}),mknod:(function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)}),rename:(function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir}),unlink:(function(parent,name){delete parent.contents[name]}),rmdir:(function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}delete parent.contents[name]}),readdir:(function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries}),symlink:(function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node}),readlink:(function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return node.link})},stream_ops:{read:(function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);assert(size>=0);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size}),write:(function(stream,buffer,offset,length,position,canOwn){if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=new Uint8Array(buffer.subarray(offset,offset+length));node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length}),llseek:(function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position}),allocate:(function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)}),mmap:(function(stream,buffer,offset,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&(contents.buffer===buffer||contents.buffer===buffer.buffer)){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<stream.node.usedBytes){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=_malloc(length);if(!ptr){throw new FS.ErrnoError(ERRNO_CODES.ENOMEM)}buffer.set(contents,ptr)}return{ptr:ptr,allocated:allocated}}),msync:(function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0})}};var IDBFS={dbs:{},indexedDB:(function(){if(typeof indexedDB!=="undefined")return indexedDB;var ret=null;if(typeof window==="object")ret=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB;assert(ret,"IDBFS used, but indexedDB not supported");return ret}),DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:(function(mount){return MEMFS.mount.apply(null,arguments)}),syncfs:(function(mount,populate,callback){IDBFS.getLocalSet(mount,(function(err,local){if(err)return callback(err);IDBFS.getRemoteSet(mount,(function(err,remote){if(err)return callback(err);var src=populate?remote:local;var dst=populate?local:remote;IDBFS.reconcile(src,dst,callback)}))}))}),getDB:(function(name,callback){var db=IDBFS.dbs[name];if(db){return callback(null,db)}var req;try{req=IDBFS.indexedDB().open(name,IDBFS.DB_VERSION)}catch(e){return callback(e)}if(!req){return callback("Unable to connect to IndexedDB")}req.onupgradeneeded=(function(e){var db=e.target.result;var transaction=e.target.transaction;var fileStore;if(db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)){fileStore=transaction.objectStore(IDBFS.DB_STORE_NAME)}else{fileStore=db.createObjectStore(IDBFS.DB_STORE_NAME)}if(!fileStore.indexNames.contains("timestamp")){fileStore.createIndex("timestamp","timestamp",{unique:false})}});req.onsuccess=(function(){db=req.result;IDBFS.dbs[name]=db;callback(null,db)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),getLocalSet:(function(mount,callback){var entries={};function isRealDir(p){return p!=="."&&p!==".."}function toAbsolute(root){return(function(p){return PATH.join2(root,p)})}var check=FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));while(check.length){var path=check.pop();var stat;try{stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){check.push.apply(check,FS.readdir(path).filter(isRealDir).map(toAbsolute(path)))}entries[path]={timestamp:stat.mtime}}return callback(null,{type:"local",entries:entries})}),getRemoteSet:(function(mount,callback){var entries={};IDBFS.getDB(mount.mountpoint,(function(err,db){if(err)return callback(err);try{var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readonly");transaction.onerror=(function(e){callback(this.error);e.preventDefault()});var store=transaction.objectStore(IDBFS.DB_STORE_NAME);var index=store.index("timestamp");index.openKeyCursor().onsuccess=(function(event){var cursor=event.target.result;if(!cursor){return callback(null,{type:"remote",db:db,entries:entries})}entries[cursor.primaryKey]={timestamp:cursor.key};cursor.continue()})}catch(e){return callback(e)}}))}),loadLocalEntry:(function(path,callback){var stat,node;try{var lookup=FS.lookupPath(path);node=lookup.node;stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){return callback(null,{timestamp:stat.mtime,mode:stat.mode})}else if(FS.isFile(stat.mode)){node.contents=MEMFS.getFileDataAsTypedArray(node);return callback(null,{timestamp:stat.mtime,mode:stat.mode,contents:node.contents})}else{return callback(new Error("node type not supported"))}}),storeLocalEntry:(function(path,entry,callback){try{if(FS.isDir(entry.mode)){FS.mkdir(path,entry.mode)}else if(FS.isFile(entry.mode)){FS.writeFile(path,entry.contents,{canOwn:true})}else{return callback(new Error("node type not supported"))}FS.chmod(path,entry.mode);FS.utime(path,entry.timestamp,entry.timestamp)}catch(e){return callback(e)}callback(null)}),removeLocalEntry:(function(path,callback){try{var lookup=FS.lookupPath(path);var stat=FS.stat(path);if(FS.isDir(stat.mode)){FS.rmdir(path)}else if(FS.isFile(stat.mode)){FS.unlink(path)}}catch(e){return callback(e)}callback(null)}),loadRemoteEntry:(function(store,path,callback){var req=store.get(path);req.onsuccess=(function(event){callback(null,event.target.result)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),storeRemoteEntry:(function(store,path,entry,callback){var req=store.put(entry,path);req.onsuccess=(function(){callback(null)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),removeRemoteEntry:(function(store,path,callback){var req=store.delete(path);req.onsuccess=(function(){callback(null)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),reconcile:(function(src,dst,callback){var total=0;var create=[];Object.keys(src.entries).forEach((function(key){var e=src.entries[key];var e2=dst.entries[key];if(!e2||e.timestamp>e2.timestamp){create.push(key);total++}}));var remove=[];Object.keys(dst.entries).forEach((function(key){var e=dst.entries[key];var e2=src.entries[key];if(!e2){remove.push(key);total++}}));if(!total){return callback(null)}var completed=0;var db=src.type==="remote"?src.db:dst.db;var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readwrite");var store=transaction.objectStore(IDBFS.DB_STORE_NAME);function done(err){if(err){if(!done.errored){done.errored=true;return callback(err)}return}if(++completed>=total){return callback(null)}}transaction.onerror=(function(e){done(this.error);e.preventDefault()});create.sort().forEach((function(path){if(dst.type==="local"){IDBFS.loadRemoteEntry(store,path,(function(err,entry){if(err)return done(err);IDBFS.storeLocalEntry(path,entry,done)}))}else{IDBFS.loadLocalEntry(path,(function(err,entry){if(err)return done(err);IDBFS.storeRemoteEntry(store,path,entry,done)}))}}));remove.sort().reverse().forEach((function(path){if(dst.type==="local"){IDBFS.removeLocalEntry(path,done)}else{IDBFS.removeRemoteEntry(store,path,done)}}))})};var NODEFS={isWindows:false,staticInit:(function(){NODEFS.isWindows=!!process.platform.match(/^win/);var flags=process["binding"]("constants");if(flags["fs"]){flags=flags["fs"]}NODEFS.flagsForNodeMap={"1024":flags["O_APPEND"],"64":flags["O_CREAT"],"128":flags["O_EXCL"],"0":flags["O_RDONLY"],"2":flags["O_RDWR"],"4096":flags["O_SYNC"],"512":flags["O_TRUNC"],"1":flags["O_WRONLY"]}}),bufferFrom:(function(arrayBuffer){return Buffer.alloc?Buffer.from(arrayBuffer):new Buffer(arrayBuffer)}),mount:(function(mount){assert(ENVIRONMENT_IS_NODE);return NODEFS.createNode(null,"/",NODEFS.getMode(mount.opts.root),0)}),createNode:(function(parent,name,mode,dev){if(!FS.isDir(mode)&&!FS.isFile(mode)&&!FS.isLink(mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node=FS.createNode(parent,name,mode);node.node_ops=NODEFS.node_ops;node.stream_ops=NODEFS.stream_ops;return node}),getMode:(function(path){var stat;try{stat=fs.lstatSync(path);if(NODEFS.isWindows){stat.mode=stat.mode|(stat.mode&292)>>2}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}return stat.mode}),realPath:(function(node){var parts=[];while(node.parent!==node){parts.push(node.name);node=node.parent}parts.push(node.mount.opts.root);parts.reverse();return PATH.join.apply(null,parts)}),flagsForNode:(function(flags){flags&=~2097152;flags&=~2048;flags&=~32768;flags&=~524288;var newFlags=0;for(var k in NODEFS.flagsForNodeMap){if(flags&k){newFlags|=NODEFS.flagsForNodeMap[k];flags^=k}}if(!flags){return newFlags}else{throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}}),node_ops:{getattr:(function(node){var path=NODEFS.realPath(node);var stat;try{stat=fs.lstatSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}if(NODEFS.isWindows&&!stat.blksize){stat.blksize=4096}if(NODEFS.isWindows&&!stat.blocks){stat.blocks=(stat.size+stat.blksize-1)/stat.blksize|0}return{dev:stat.dev,ino:stat.ino,mode:stat.mode,nlink:stat.nlink,uid:stat.uid,gid:stat.gid,rdev:stat.rdev,size:stat.size,atime:stat.atime,mtime:stat.mtime,ctime:stat.ctime,blksize:stat.blksize,blocks:stat.blocks}}),setattr:(function(node,attr){var path=NODEFS.realPath(node);try{if(attr.mode!==undefined){fs.chmodSync(path,attr.mode);node.mode=attr.mode}if(attr.timestamp!==undefined){var date=new Date(attr.timestamp);fs.utimesSync(path,date,date)}if(attr.size!==undefined){fs.truncateSync(path,attr.size)}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),lookup:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);var mode=NODEFS.getMode(path);return NODEFS.createNode(parent,name,mode)}),mknod:(function(parent,name,mode,dev){var node=NODEFS.createNode(parent,name,mode,dev);var path=NODEFS.realPath(node);try{if(FS.isDir(node.mode)){fs.mkdirSync(path,node.mode)}else{fs.writeFileSync(path,"",{mode:node.mode})}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}return node}),rename:(function(oldNode,newDir,newName){var oldPath=NODEFS.realPath(oldNode);var newPath=PATH.join2(NODEFS.realPath(newDir),newName);try{fs.renameSync(oldPath,newPath)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),unlink:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);try{fs.unlinkSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),rmdir:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);try{fs.rmdirSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),readdir:(function(node){var path=NODEFS.realPath(node);try{return fs.readdirSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),symlink:(function(parent,newName,oldPath){var newPath=PATH.join2(NODEFS.realPath(parent),newName);try{fs.symlinkSync(oldPath,newPath)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),readlink:(function(node){var path=NODEFS.realPath(node);try{path=fs.readlinkSync(path);path=NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root),path);return path}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}})},stream_ops:{open:(function(stream){var path=NODEFS.realPath(stream.node);try{if(FS.isFile(stream.node.mode)){stream.nfd=fs.openSync(path,NODEFS.flagsForNode(stream.flags))}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),close:(function(stream){try{if(FS.isFile(stream.node.mode)&&stream.nfd){fs.closeSync(stream.nfd)}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),read:(function(stream,buffer,offset,length,position){if(length===0)return 0;try{return fs.readSync(stream.nfd,NODEFS.bufferFrom(buffer.buffer),offset,length,position)}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),write:(function(stream,buffer,offset,length,position){try{return fs.writeSync(stream.nfd,NODEFS.bufferFrom(buffer.buffer),offset,length,position)}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),llseek:(function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){try{var stat=fs.fstatSync(stream.nfd);position+=stat.size}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position})}};var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:(function(mount){assert(ENVIRONMENT_IS_WORKER);if(!WORKERFS.reader)WORKERFS.reader=new FileReaderSync;var root=WORKERFS.createNode(null,"/",WORKERFS.DIR_MODE,0);var createdParents={};function ensureParent(path){var parts=path.split("/");var parent=root;for(var i=0;i<parts.length-1;i++){var curr=parts.slice(0,i+1).join("/");if(!createdParents[curr]){createdParents[curr]=WORKERFS.createNode(parent,parts[i],WORKERFS.DIR_MODE,0)}parent=createdParents[curr]}return parent}function base(path){var parts=path.split("/");return parts[parts.length-1]}Array.prototype.forEach.call(mount.opts["files"]||[],(function(file){WORKERFS.createNode(ensureParent(file.name),base(file.name),WORKERFS.FILE_MODE,0,file,file.lastModifiedDate)}));(mount.opts["blobs"]||[]).forEach((function(obj){WORKERFS.createNode(ensureParent(obj["name"]),base(obj["name"]),WORKERFS.FILE_MODE,0,obj["data"])}));(mount.opts["packages"]||[]).forEach((function(pack){pack["metadata"].files.forEach((function(file){var name=file.filename.substr(1);WORKERFS.createNode(ensureParent(name),base(name),WORKERFS.FILE_MODE,0,pack["blob"].slice(file.start,file.end))}))}));return root}),createNode:(function(parent,name,mode,dev,contents,mtime){var node=FS.createNode(parent,name,mode);node.mode=mode;node.node_ops=WORKERFS.node_ops;node.stream_ops=WORKERFS.stream_ops;node.timestamp=(mtime||new Date).getTime();assert(WORKERFS.FILE_MODE!==WORKERFS.DIR_MODE);if(mode===WORKERFS.FILE_MODE){node.size=contents.size;node.contents=contents}else{node.size=4096;node.contents={}}if(parent){parent.contents[name]=node}return node}),node_ops:{getattr:(function(node){return{dev:1,ino:undefined,mode:node.mode,nlink:1,uid:0,gid:0,rdev:undefined,size:node.size,atime:new Date(node.timestamp),mtime:new Date(node.timestamp),ctime:new Date(node.timestamp),blksize:4096,blocks:Math.ceil(node.size/4096)}}),setattr:(function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}}),lookup:(function(parent,name){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}),mknod:(function(parent,name,mode,dev){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),rename:(function(oldNode,newDir,newName){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),unlink:(function(parent,name){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),rmdir:(function(parent,name){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),readdir:(function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries}),symlink:(function(parent,newName,oldPath){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),readlink:(function(node){throw new FS.ErrnoError(ERRNO_CODES.EPERM)})},stream_ops:{read:(function(stream,buffer,offset,length,position){if(position>=stream.node.size)return 0;var chunk=stream.node.contents.slice(position,position+length);var ab=WORKERFS.reader.readAsArrayBuffer(chunk);buffer.set(new Uint8Array(ab),offset);return chunk.size}),write:(function(stream,buffer,offset,length,position){throw new FS.ErrnoError(ERRNO_CODES.EIO)}),llseek:(function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.size}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position})}};STATICTOP+=16;STATICTOP+=16;STATICTOP+=16;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:(function(e){if(!(e instanceof FS.ErrnoError))throw e+" : "+stackTrace();return ___setErrNo(e.errno)}),lookupPath:(function(path,opts){path=PATH.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key]}}if(opts.recurse_count>8){throw new FS.ErrnoError(ERRNO_CODES.ELOOP)}var parts=PATH.normalizeArray(path.split("/").filter((function(p){return!!p})),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(ERRNO_CODES.ELOOP)}}}}return{path:current_path,node:current}}),getPath:(function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}}),hashName:(function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length}),hashAddNode:(function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node}),hashRemoveNode:(function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}}),lookupNode:(function(parent,name){var err=FS.mayLookup(parent);if(err){throw new FS.ErrnoError(err,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)}),createNode:(function(parent,name,mode,rdev){if(!FS.FSNode){FS.FSNode=(function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev});FS.FSNode.prototype={};var readMode=292|73;var writeMode=146;Object.defineProperties(FS.FSNode.prototype,{read:{get:(function(){return(this.mode&readMode)===readMode}),set:(function(val){val?this.mode|=readMode:this.mode&=~readMode})},write:{get:(function(){return(this.mode&writeMode)===writeMode}),set:(function(val){val?this.mode|=writeMode:this.mode&=~writeMode})},isFolder:{get:(function(){return FS.isDir(this.mode)})},isDevice:{get:(function(){return FS.isChrdev(this.mode)})}})}var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node}),destroyNode:(function(node){FS.hashRemoveNode(node)}),isRoot:(function(node){return node===node.parent}),isMountpoint:(function(node){return!!node.mounted}),isFile:(function(mode){return(mode&61440)===32768}),isDir:(function(mode){return(mode&61440)===16384}),isLink:(function(mode){return(mode&61440)===40960}),isChrdev:(function(mode){return(mode&61440)===8192}),isBlkdev:(function(mode){return(mode&61440)===24576}),isFIFO:(function(mode){return(mode&61440)===4096}),isSocket:(function(mode){return(mode&49152)===49152}),flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:(function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags}),flagsToPermissionString:(function(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms}),nodePermissions:(function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return ERRNO_CODES.EACCES}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return ERRNO_CODES.EACCES}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return ERRNO_CODES.EACCES}return 0}),mayLookup:(function(dir){var err=FS.nodePermissions(dir,"x");if(err)return err;if(!dir.node_ops.lookup)return ERRNO_CODES.EACCES;return 0}),mayCreate:(function(dir,name){try{var node=FS.lookupNode(dir,name);return ERRNO_CODES.EEXIST}catch(e){}return FS.nodePermissions(dir,"wx")}),mayDelete:(function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var err=FS.nodePermissions(dir,"wx");if(err){return err}if(isdir){if(!FS.isDir(node.mode)){return ERRNO_CODES.ENOTDIR}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return ERRNO_CODES.EBUSY}}else{if(FS.isDir(node.mode)){return ERRNO_CODES.EISDIR}}return 0}),mayOpen:(function(node,flags){if(!node){return ERRNO_CODES.ENOENT}if(FS.isLink(node.mode)){return ERRNO_CODES.ELOOP}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return ERRNO_CODES.EISDIR}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))}),MAX_OPEN_FDS:4096,nextfd:(function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(ERRNO_CODES.EMFILE)}),getStream:(function(fd){return FS.streams[fd]}),createStream:(function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=(function(){});FS.FSStream.prototype={};Object.defineProperties(FS.FSStream.prototype,{object:{get:(function(){return this.node}),set:(function(val){this.node=val})},isRead:{get:(function(){return(this.flags&2097155)!==1})},isWrite:{get:(function(){return(this.flags&2097155)!==0})},isAppend:{get:(function(){return this.flags&1024})}})}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p]}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream}),closeStream:(function(fd){FS.streams[fd]=null}),chrdev_stream_ops:{open:(function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}}),llseek:(function(){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)})},major:(function(dev){return dev>>8}),minor:(function(dev){return dev&255}),makedev:(function(ma,mi){return ma<<8|mi}),registerDevice:(function(dev,ops){FS.devices[dev]={stream_ops:ops}}),getDevice:(function(dev){return FS.devices[dev]}),getMounts:(function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts}),syncfs:(function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){console.log("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work")}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(err){assert(FS.syncFSRequests>0);FS.syncFSRequests--;return callback(err)}function done(err){if(err){if(!done.errored){done.errored=true;return doCallback(err)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach((function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)}))}),mount:(function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot}),unmount:(function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach((function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current)}current=next}}));node.mounted=null;var idx=node.mount.mounts.indexOf(mount);assert(idx!==-1);node.mount.mounts.splice(idx,1)}),lookup:(function(parent,name){return parent.node_ops.lookup(parent,name)}),mknod:(function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var err=FS.mayCreate(parent,name);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return parent.node_ops.mknod(parent,name,mode,dev)}),create:(function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)}),mkdir:(function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)}),mkdirTree:(function(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=ERRNO_CODES.EEXIST)throw e}}}),mkdev:(function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)}),symlink:(function(oldpath,newpath){if(!PATH.resolve(oldpath)){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}var newname=PATH.basename(newpath);var err=FS.mayCreate(parent,newname);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return parent.node_ops.symlink(parent,newname,oldpath)}),rename:(function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;try{lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(!old_dir||!new_dir)throw new FS.ErrnoError(ERRNO_CODES.ENOENT);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(ERRNO_CODES.EXDEV)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}relative=PATH.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var err=FS.mayDelete(old_dir,old_name,isdir);if(err){throw new FS.ErrnoError(err)}err=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(err){throw new FS.ErrnoError(err)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(new_dir!==old_dir){err=FS.nodePermissions(old_dir,"w");if(err){throw new FS.ErrnoError(err)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path)}}catch(e){console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path)}catch(e){console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}}),rmdir:(function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,true);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}}),readdir:(function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}return node.node_ops.readdir(node)}),unlink:(function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,false);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}}),readlink:(function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(!link.node_ops.readlink){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return PATH.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))}),stat:(function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(!node.node_ops.getattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return node.node_ops.getattr(node)}),lstat:(function(path){return FS.stat(path,true)}),chmod:(function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})}),lchmod:(function(path,mode){FS.chmod(path,mode,true)}),fchmod:(function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}FS.chmod(stream.node,mode)}),chown:(function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}node.node_ops.setattr(node,{timestamp:Date.now()})}),lchown:(function(path,uid,gid){FS.chown(path,uid,gid,true)}),fchown:(function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}FS.chown(stream.node,uid,gid)}),truncate:(function(path,len){if(len<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var err=FS.nodePermissions(node,"w");if(err){throw new FS.ErrnoError(err)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})}),ftruncate:(function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}FS.truncate(stream.node,len)}),utime:(function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})}),open:(function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path==="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(ERRNO_CODES.EEXIST)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}if(!created){var err=FS.mayOpen(node,flags);if(err){throw new FS.ErrnoError(err)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;Module["printErr"]("read file: "+path)}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE}FS.trackingDelegate["onOpenFile"](path,trackingFlags)}}catch(e){console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message)}return stream}),close:(function(stream){if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}}),llseek:(function(stream,offset,whence){if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position}),read:(function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!stream.stream_ops.read){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead}),write:(function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!stream.stream_ops.write){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if(stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path)}catch(e){console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: "+e.message)}return bytesWritten}),allocate:(function(stream,offset,length){if(offset<0||length<=0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)}stream.stream_ops.allocate(stream,offset,length)}),mmap:(function(stream,buffer,offset,length,position,prot,flags){if((stream.flags&2097155)===1){throw new FS.ErrnoError(ERRNO_CODES.EACCES)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}return stream.stream_ops.mmap(stream,buffer,offset,length,position,prot,flags)}),msync:(function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)}),munmap:(function(stream){return 0}),ioctl:(function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(ERRNO_CODES.ENOTTY)}return stream.stream_ops.ioctl(stream,cmd,arg)}),readFile:(function(path,opts){opts=opts||{};opts.flags=opts.flags||"r";opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret}),writeFile:(function(path,data,opts){opts=opts||{};opts.flags=opts.flags||"w";var stream=FS.open(path,opts.flags,opts.mode);if(typeof data==="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error("Unsupported data type")}FS.close(stream)}),cwd:(function(){return FS.currentPath}),chdir:(function(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}var err=FS.nodePermissions(lookup.node,"x");if(err){throw new FS.ErrnoError(err)}FS.currentPath=lookup.path}),createDefaultDirectories:(function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")}),createDefaultDevices:(function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:(function(){return 0}),write:(function(stream,buffer,offset,length,pos){return length})});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device;if(typeof crypto!=="undefined"){var randomBuffer=new Uint8Array(1);random_device=(function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]})}else if(ENVIRONMENT_IS_NODE){random_device=(function(){return require("crypto")["randomBytes"](1)[0]})}else{random_device=(function(){return Math.random()*256|0})}FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")}),createSpecialDirectories:(function(){FS.mkdir("/proc");FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:(function(){var node=FS.createNode("/proc/self","fd",16384|511,73);node.node_ops={lookup:(function(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(ERRNO_CODES.EBADF);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:(function(){return stream.path})}};ret.parent=ret;return ret})};return node})},{},"/proc/self/fd")}),createStandardStreams:(function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin","r");assert(stdin.fd===0,"invalid handle for stdin ("+stdin.fd+")");var stdout=FS.open("/dev/stdout","w");assert(stdout.fd===1,"invalid handle for stdout ("+stdout.fd+")");var stderr=FS.open("/dev/stderr","w");assert(stderr.fd===2,"invalid handle for stderr ("+stderr.fd+")")}),ensureErrnoError:(function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=(function(errno){this.errno=errno;for(var key in ERRNO_CODES){if(ERRNO_CODES[key]===errno){this.code=key;break}}});this.setErrno(errno);this.message=ERRNO_MESSAGES[errno];if(this.stack)Object.defineProperty(this,"stack",{value:(new Error).stack,writable:true})};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[ERRNO_CODES.ENOENT].forEach((function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"}))}),staticInit:(function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS,"IDBFS":IDBFS,"NODEFS":NODEFS,"WORKERFS":WORKERFS}}),init:(function(input,output,error){assert(!FS.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()}),quit:(function(){FS.init.initialized=false;var fflush=Module["_fflush"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}}),getMode:(function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode}),joinPath:(function(parts,forceRelative){var path=PATH.join.apply(null,parts);if(forceRelative&&path[0]=="/")path=path.substr(1);return path}),absolutePath:(function(relative,base){return PATH.resolve(base,relative)}),standardizePath:(function(path){return PATH.normalize(path)}),findObject:(function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{___setErrNo(ret.error);return null}}),analyzePath:(function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret}),createFolder:(function(parent,name,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.mkdir(path,mode)}),createPath:(function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current}),createFile:(function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)}),createDataFile:(function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,"w");FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node}),createDevice:(function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:(function(stream){stream.seekable=false}),close:(function(stream){if(output&&output.buffer&&output.buffer.length){output(10)}}),read:(function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead}),write:(function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}}if(length){stream.node.timestamp=Date.now()}return i})});return FS.mkdev(path,mode,dev)}),createLink:(function(parent,name,target,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);return FS.symlink(target,path)}),forceLoadFile:(function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;var success=true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(Module["read"]){try{obj.contents=intArrayFromString(Module["read"](obj.url),true);obj.usedBytes=obj.contents.length}catch(e){success=false}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}if(!success)___setErrNo(ERRNO_CODES.EIO);return success}),createLazyFile:(function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=(function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||"",true)}});var lazyArray=this;lazyArray.setDataGetter((function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]}));if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;console.log("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!=="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:(function(){if(!this.lengthKnown){this.cacheLength()}return this._length})},chunkSize:{get:(function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize})}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:(function(){return this.contents.length})}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach((function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(ERRNO_CODES.EIO)}return fn.apply(null,arguments)}}));stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(ERRNO_CODES.EIO)}var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);assert(size>=0);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size};node.stream_ops=stream_ops;return node}),createPreloadedFile:(function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}var handled=false;Module["preloadPlugins"].forEach((function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,(function(){if(onerror)onerror();removeRunDependency(dep)}));handled=true}}));if(!handled)finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){Browser.asyncLoad(url,(function(byteArray){processData(byteArray)}),onerror)}else{processData(url)}}),indexedDB:(function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB}),DB_NAME:(function(){return"EM_FS_"+window.location.pathname}),DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(function(paths,onload,onerror){onload=onload||(function(){});onerror=onerror||(function(){});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){console.log("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach((function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish()};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish()}}));transaction.onerror=onerror};openRequest.onerror=onerror}),loadFilesFromDB:(function(paths,onload,onerror){onload=onload||(function(){});onerror=onerror||(function(){});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach((function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish()}}));transaction.onerror=onerror};openRequest.onerror=onerror})};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:(function(dirfd,path){if(path[0]!=="/"){var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(ERRNO_CODES.EBADF);dir=dirstream.path}path=PATH.join2(dir,path)}return path}),doStat:(function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-ERRNO_CODES.ENOTDIR}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;HEAP32[buf+36>>2]=stat.size;HEAP32[buf+40>>2]=4096;HEAP32[buf+44>>2]=stat.blocks;HEAP32[buf+48>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+52>>2]=0;HEAP32[buf+56>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ino;return 0}),doMsync:(function(addr,stream,len,flags){var buffer=new Uint8Array(HEAPU8.subarray(addr,addr+len));FS.msync(stream,buffer,0,len,flags)}),doMkdir:(function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0}),doMknod:(function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-ERRNO_CODES.EINVAL}FS.mknod(path,mode,dev);return 0}),doReadlink:(function(path,buf,bufsize){if(bufsize<=0)return-ERRNO_CODES.EINVAL;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len}),doAccess:(function(path,amode){if(amode&~7){return-ERRNO_CODES.EINVAL}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return-ERRNO_CODES.EACCES}return 0}),doDup:(function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd}),doReadv:(function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break}return ret}),doWritev:(function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret}),varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),getStreamFromFD:(function(){var stream=FS.getStream(SYSCALLS.get());if(!stream)throw new FS.ErrnoError(ERRNO_CODES.EBADF);return stream}),getSocketFromFD:(function(){var socket=SOCKFS.getSocket(SYSCALLS.get());if(!socket)throw new FS.ErrnoError(ERRNO_CODES.EBADF);return socket}),getSocketAddress:(function(allowNull){var addrp=SYSCALLS.get(),addrlen=SYSCALLS.get();if(allowNull&&addrp===0)return null;var info=__read_sockaddr(addrp,addrlen);if(info.errno)throw new FS.ErrnoError(info.errno);info.addr=DNS.lookup_addr(info.addr)||info.addr;return info}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall145(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();return SYSCALLS.doReadv(stream,iov,iovcnt)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();return SYSCALLS.doWritev(stream,iov,iovcnt)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall183(which,varargs){SYSCALLS.varargs=varargs;try{var buf=SYSCALLS.get(),size=SYSCALLS.get();if(size===0)return-ERRNO_CODES.EINVAL;var cwd=FS.cwd();var cwdLengthInBytes=lengthBytesUTF8(cwd);if(size<cwdLengthInBytes+1)return-ERRNO_CODES.ERANGE;stringToUTF8(cwd,buf,size);return buf}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall195(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr(),buf=SYSCALLS.get();return SYSCALLS.doStat(FS.stat,path,buf)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall220(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),dirp=SYSCALLS.get(),count=SYSCALLS.get();if(!stream.getdents){stream.getdents=FS.readdir(stream.path)}var pos=0;while(stream.getdents.length>0&&pos+268<=count){var id;var type;var name=stream.getdents.pop();if(name[0]==="."){id=1;type=4}else{var child=FS.lookupNode(stream.node,name);id=child.id;type=FS.isChrdev(child.mode)?2:FS.isDir(child.mode)?4:FS.isLink(child.mode)?10:8}HEAP32[dirp+pos>>2]=id;HEAP32[dirp+pos+4>>2]=stream.position;HEAP16[dirp+pos+8>>1]=268;HEAP8[dirp+pos+10>>0]=type;stringToUTF8(name,dirp+pos+11,256);pos+=268}return pos}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall221(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),cmd=SYSCALLS.get();switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-ERRNO_CODES.EINVAL}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd};case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0};case 12:case 12:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0};case 13:case 14:case 13:case 14:return 0;case 16:case 8:return-ERRNO_CODES.EINVAL;case 9:___setErrNo(ERRNO_CODES.EINVAL);return-1;default:{return-ERRNO_CODES.EINVAL}}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall3(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),buf=SYSCALLS.get(),count=SYSCALLS.get();return FS.read(stream,HEAP8,buf,count)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall5(which,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(),flags=SYSCALLS.get(),mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),op=SYSCALLS.get();switch(op){case 21509:case 21505:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return 0};case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return 0};case 21519:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0};case 21520:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return-ERRNO_CODES.EINVAL};case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp)};case 21523:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return 0};default:abort("bad ioctl syscall "+op)}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall91(which,varargs){SYSCALLS.varargs=varargs;try{var addr=SYSCALLS.get(),len=SYSCALLS.get();var info=SYSCALLS.mappings[addr];if(!info)return 0;if(len===info.len){var stream=FS.getStream(info.fd);SYSCALLS.doMsync(addr,stream,len,info.flags);FS.munmap(stream);SYSCALLS.mappings[addr]=null;if(info.allocated){_free(info.malloc)}}return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",ALLOC_STATIC);function ___unlock(){}function _abort(){Module["abort"]()}var DLFCN={error:null,errorMsg:null,loadedLibs:{},loadedLibNames:{}};function _dlclose(handle){if(!DLFCN.loadedLibs[handle]){DLFCN.errorMsg="Tried to dlclose() unopened handle: "+handle;return 1}else{var lib_record=DLFCN.loadedLibs[handle];if(--lib_record.refcount==0){if(lib_record.module.cleanups){lib_record.module.cleanups.forEach((function(cleanup){cleanup()}))}delete DLFCN.loadedLibNames[lib_record.name];delete DLFCN.loadedLibs[handle]}return 0}}function _dlerror(){if(DLFCN.errorMsg===null){return 0}else{if(DLFCN.error)_free(DLFCN.error);var msgArr=intArrayFromString(DLFCN.errorMsg);DLFCN.error=allocate(msgArr,"i8",ALLOC_NORMAL);DLFCN.errorMsg=null;return DLFCN.error}}var _environ=STATICTOP;STATICTOP+=16;function ___buildEnvironment(env){var MAX_ENV_VALUES=64;var TOTAL_ENV_SIZE=1024;var poolPtr;var envPtr;if(!___buildEnvironment.called){___buildEnvironment.called=true;ENV["USER"]=ENV["LOGNAME"]="web_user";ENV["PATH"]="/";ENV["PWD"]="/";ENV["HOME"]="/home/web_user";ENV["LANG"]="C.UTF-8";ENV["_"]=Module["thisProgram"];poolPtr=staticAlloc(TOTAL_ENV_SIZE);envPtr=staticAlloc(MAX_ENV_VALUES*4);HEAP32[envPtr>>2]=poolPtr;HEAP32[_environ>>2]=envPtr}else{envPtr=HEAP32[_environ>>2];poolPtr=HEAP32[envPtr>>2]}var strings=[];var totalSize=0;for(var key in env){if(typeof env[key]==="string"){var line=key+"="+env[key];strings.push(line);totalSize+=line.length}}if(totalSize>TOTAL_ENV_SIZE){throw new Error("Environment size exceeded TOTAL_ENV_SIZE!")}var ptrSize=4;for(var i=0;i<strings.length;i++){var line=strings[i];writeAsciiToMemory(line,poolPtr);HEAP32[envPtr+i*ptrSize>>2]=poolPtr;poolPtr+=line.length+1}HEAP32[envPtr+strings.length*ptrSize>>2]=0}var ENV={};function _dlopen(filename,flag){abort("To use dlopen, you need to use Emscripten's linking support, see https://github.com/kripken/emscripten/wiki/Linking");var searchpaths=[];if(filename===0){filename="__self__"}else{var strfilename=Pointer_stringify(filename);var isValidFile=(function(filename){var target=FS.findObject(filename);return target&&!target.isFolder&&!target.isDevice});if(isValidFile(strfilename)){filename=strfilename}else{if(ENV["LD_LIBRARY_PATH"]){searchpaths=ENV["LD_LIBRARY_PATH"].split(":")}for(var ident in searchpaths){var searchfile=PATH.join2(searchpaths[ident],strfilename);if(isValidFile(searchfile)){filename=searchfile;break}}}}if(DLFCN.loadedLibNames[filename]){var handle=DLFCN.loadedLibNames[filename];DLFCN.loadedLibs[handle].refcount++;return handle}if(filename==="__self__"){var handle=-1;var lib_module=Module;var cached_functions={}}else{var target=FS.findObject(filename);if(!target||target.isFolder||target.isDevice){DLFCN.errorMsg="Could not find dynamic lib: "+filename;return 0}FS.forceLoadFile(target);var lib_module;try{var lib_data=FS.readFile(filename,{encoding:"binary"});if(!(lib_data instanceof Uint8Array))lib_data=new Uint8Array(lib_data);lib_module=loadWebAssemblyModule(lib_data)}catch(e){DLFCN.errorMsg="Could not evaluate dynamic lib: "+filename+"\n"+e;return 0}var handle=1;for(var key in DLFCN.loadedLibs){if(DLFCN.loadedLibs.hasOwnProperty(key))handle++}if(flag&256){for(var ident in lib_module){if(lib_module.hasOwnProperty(ident)){if(ident[0]=="_"){Module[ident]=lib_module[ident]}}}}var cached_functions={}}DLFCN.loadedLibs[handle]={refcount:1,name:filename,module:lib_module,cached_functions:cached_functions};DLFCN.loadedLibNames[filename]=handle;return handle}function _dlsym(handle,symbol){symbol=Pointer_stringify(symbol);if(!DLFCN.loadedLibs[handle]){DLFCN.errorMsg="Tried to dlsym() from an unopened handle: "+handle;return 0}else{var lib=DLFCN.loadedLibs[handle];symbol="_"+symbol;if(lib.cached_functions.hasOwnProperty(symbol)){return lib.cached_functions[symbol]}if(!lib.module.hasOwnProperty(symbol)){DLFCN.errorMsg='Tried to lookup unknown symbol "'+symbol+'" in dynamic lib: '+lib.name;return 0}else{var result=lib.module[symbol];if(typeof result=="function"){result=addFunction(result);lib.cached_functions=result}return result}}}function _emscripten_set_main_loop_timing(mode,value){Browser.mainLoop.timingMode=mode;Browser.mainLoop.timingValue=value;if(!Browser.mainLoop.func){return 1}if(mode==0){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_setTimeout(){var timeUntilNextTick=Math.max(0,Browser.mainLoop.tickStartTime+value-_emscripten_get_now())|0;setTimeout(Browser.mainLoop.runner,timeUntilNextTick)};Browser.mainLoop.method="timeout"}else if(mode==1){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_rAF(){Browser.requestAnimationFrame(Browser.mainLoop.runner)};Browser.mainLoop.method="rAF"}else if(mode==2){if(typeof setImmediate==="undefined"){var setImmediates=[];var emscriptenMainLoopMessageId="setimmediate";function Browser_setImmediate_messageHandler(event){if(event.data===emscriptenMainLoopMessageId||event.data.target===emscriptenMainLoopMessageId){event.stopPropagation();setImmediates.shift()()}}addEventListener("message",Browser_setImmediate_messageHandler,true);setImmediate=function Browser_emulated_setImmediate(func){setImmediates.push(func);if(ENVIRONMENT_IS_WORKER){if(Module["setImmediates"]===undefined)Module["setImmediates"]=[];Module["setImmediates"].push(func);postMessage({target:emscriptenMainLoopMessageId})}else postMessage(emscriptenMainLoopMessageId,"*")}}Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_setImmediate(){setImmediate(Browser.mainLoop.runner)};Browser.mainLoop.method="immediate"}return 0}function _emscripten_get_now(){abort()}function _emscripten_set_main_loop(func,fps,simulateInfiniteLoop,arg,noSetTiming){Module["noExitRuntime"]=true;assert(!Browser.mainLoop.func,"emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");Browser.mainLoop.func=func;Browser.mainLoop.arg=arg;var browserIterationFunc;if(typeof arg!=="undefined"){browserIterationFunc=(function(){Module["dynCall_vi"](func,arg)})}else{browserIterationFunc=(function(){Module["dynCall_v"](func)})}var thisMainLoopId=Browser.mainLoop.currentlyRunningMainloop;Browser.mainLoop.runner=function Browser_mainLoop_runner(){if(ABORT)return;if(Browser.mainLoop.queue.length>0){var start=Date.now();var blocker=Browser.mainLoop.queue.shift();blocker.func(blocker.arg);if(Browser.mainLoop.remainingBlockers){var remaining=Browser.mainLoop.remainingBlockers;var next=remaining%1==0?remaining-1:Math.floor(remaining);if(blocker.counted){Browser.mainLoop.remainingBlockers=next}else{next=next+.5;Browser.mainLoop.remainingBlockers=(8*remaining+next)/9}}console.log('main loop blocker "'+blocker.name+'" took '+(Date.now()-start)+" ms");Browser.mainLoop.updateStatus();if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;setTimeout(Browser.mainLoop.runner,0);return}if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;Browser.mainLoop.currentFrameNumber=Browser.mainLoop.currentFrameNumber+1|0;if(Browser.mainLoop.timingMode==1&&Browser.mainLoop.timingValue>1&&Browser.mainLoop.currentFrameNumber%Browser.mainLoop.timingValue!=0){Browser.mainLoop.scheduler();return}else if(Browser.mainLoop.timingMode==0){Browser.mainLoop.tickStartTime=_emscripten_get_now()}if(Browser.mainLoop.method==="timeout"&&Module.ctx){Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");Browser.mainLoop.method=""}Browser.mainLoop.runIter(browserIterationFunc);if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;if(typeof SDL==="object"&&SDL.audio&&SDL.audio.queueNewAudioData)SDL.audio.queueNewAudioData();Browser.mainLoop.scheduler()};if(!noSetTiming){if(fps&&fps>0)_emscripten_set_main_loop_timing(0,1e3/fps);else _emscripten_set_main_loop_timing(1,1);Browser.mainLoop.scheduler()}if(simulateInfiniteLoop){throw"SimulateInfiniteLoop"}}var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:(function(){Browser.mainLoop.scheduler=null;Browser.mainLoop.currentlyRunningMainloop++}),resume:(function(){Browser.mainLoop.currentlyRunningMainloop++;var timingMode=Browser.mainLoop.timingMode;var timingValue=Browser.mainLoop.timingValue;var func=Browser.mainLoop.func;Browser.mainLoop.func=null;_emscripten_set_main_loop(func,0,false,Browser.mainLoop.arg,true);_emscripten_set_main_loop_timing(timingMode,timingValue);Browser.mainLoop.scheduler()}),updateStatus:(function(){if(Module["setStatus"]){var message=Module["statusMessage"]||"Please wait...";var remaining=Browser.mainLoop.remainingBlockers;var expected=Browser.mainLoop.expectedBlockers;if(remaining){if(remaining<expected){Module["setStatus"](message+" ("+(expected-remaining)+"/"+expected+")")}else{Module["setStatus"](message)}}else{Module["setStatus"]("")}}}),runIter:(function(func){if(ABORT)return;if(Module["preMainLoop"]){var preRet=Module["preMainLoop"]();if(preRet===false){return}}try{func()}catch(e){if(e instanceof ExitStatus){return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}if(Module["postMainLoop"])Module["postMainLoop"]()})},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:(function(){if(!Module["preloadPlugins"])Module["preloadPlugins"]=[];if(Browser.initted)return;Browser.initted=true;try{new Blob;Browser.hasBlobConstructor=true}catch(e){Browser.hasBlobConstructor=false;console.log("warning: no blob constructor, cannot create blobs with mimetypes")}Browser.BlobBuilder=typeof MozBlobBuilder!="undefined"?MozBlobBuilder:typeof WebKitBlobBuilder!="undefined"?WebKitBlobBuilder:!Browser.hasBlobConstructor?console.log("warning: no BlobBuilder"):null;Browser.URLObject=typeof window!="undefined"?window.URL?window.URL:window.webkitURL:undefined;if(!Module.noImageDecoding&&typeof Browser.URLObject==="undefined"){console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");Module.noImageDecoding=true}var imagePlugin={};imagePlugin["canHandle"]=function imagePlugin_canHandle(name){return!Module.noImageDecoding&&/\.(jpg|jpeg|png|bmp)$/i.test(name)};imagePlugin["handle"]=function imagePlugin_handle(byteArray,name,onload,onerror){var b=null;if(Browser.hasBlobConstructor){try{b=new Blob([byteArray],{type:Browser.getMimetype(name)});if(b.size!==byteArray.length){b=new Blob([(new Uint8Array(byteArray)).buffer],{type:Browser.getMimetype(name)})}}catch(e){warnOnce("Blob constructor present but fails: "+e+"; falling back to blob builder")}}if(!b){var bb=new Browser.BlobBuilder;bb.append((new Uint8Array(byteArray)).buffer);b=bb.getBlob()}var url=Browser.URLObject.createObjectURL(b);var img=new Image;img.onload=function img_onload(){assert(img.complete,"Image "+name+" could not be decoded");var canvas=document.createElement("canvas");canvas.width=img.width;canvas.height=img.height;var ctx=canvas.getContext("2d");ctx.drawImage(img,0,0);Module["preloadedImages"][name]=canvas;Browser.URLObject.revokeObjectURL(url);if(onload)onload(byteArray)};img.onerror=function img_onerror(event){console.log("Image "+url+" could not be decoded");if(onerror)onerror()};img.src=url};Module["preloadPlugins"].push(imagePlugin);var audioPlugin={};audioPlugin["canHandle"]=function audioPlugin_canHandle(name){return!Module.noAudioDecoding&&name.substr(-4)in{".ogg":1,".wav":1,".mp3":1}};audioPlugin["handle"]=function audioPlugin_handle(byteArray,name,onload,onerror){var done=false;function finish(audio){if(done)return;done=true;Module["preloadedAudios"][name]=audio;if(onload)onload(byteArray)}function fail(){if(done)return;done=true;Module["preloadedAudios"][name]=new Audio;if(onerror)onerror()}if(Browser.hasBlobConstructor){try{var b=new Blob([byteArray],{type:Browser.getMimetype(name)})}catch(e){return fail()}var url=Browser.URLObject.createObjectURL(b);var audio=new Audio;audio.addEventListener("canplaythrough",(function(){finish(audio)}),false);audio.onerror=function audio_onerror(event){if(done)return;console.log("warning: browser could not fully decode audio "+name+", trying slower base64 approach");function encode64(data){var BASE="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var PAD="=";var ret="";var leftchar=0;var leftbits=0;for(var i=0;i<data.length;i++){leftchar=leftchar<<8|data[i];leftbits+=8;while(leftbits>=6){var curr=leftchar>>leftbits-6&63;leftbits-=6;ret+=BASE[curr]}}if(leftbits==2){ret+=BASE[(leftchar&3)<<4];ret+=PAD+PAD}else if(leftbits==4){ret+=BASE[(leftchar&15)<<2];ret+=PAD}return ret}audio.src="data:audio/x-"+name.substr(-3)+";base64,"+encode64(byteArray);finish(audio)};audio.src=url;Browser.safeSetTimeout((function(){finish(audio)}),1e4)}else{return fail()}};Module["preloadPlugins"].push(audioPlugin);function pointerLockChange(){Browser.pointerLock=document["pointerLockElement"]===Module["canvas"]||document["mozPointerLockElement"]===Module["canvas"]||document["webkitPointerLockElement"]===Module["canvas"]||document["msPointerLockElement"]===Module["canvas"]}var canvas=Module["canvas"];if(canvas){canvas.requestPointerLock=canvas["requestPointerLock"]||canvas["mozRequestPointerLock"]||canvas["webkitRequestPointerLock"]||canvas["msRequestPointerLock"]||(function(){});canvas.exitPointerLock=document["exitPointerLock"]||document["mozExitPointerLock"]||document["webkitExitPointerLock"]||document["msExitPointerLock"]||(function(){});canvas.exitPointerLock=canvas.exitPointerLock.bind(document);document.addEventListener("pointerlockchange",pointerLockChange,false);document.addEventListener("mozpointerlockchange",pointerLockChange,false);document.addEventListener("webkitpointerlockchange",pointerLockChange,false);document.addEventListener("mspointerlockchange",pointerLockChange,false);if(Module["elementPointerLock"]){canvas.addEventListener("click",(function(ev){if(!Browser.pointerLock&&Module["canvas"].requestPointerLock){Module["canvas"].requestPointerLock();ev.preventDefault()}}),false)}}}),createContext:(function(canvas,useWebGL,setInModule,webGLContextAttributes){if(useWebGL&&Module.ctx&&canvas==Module.canvas)return Module.ctx;var ctx;var contextHandle;if(useWebGL){var contextAttributes={antialias:false,alpha:false};if(webGLContextAttributes){for(var attribute in webGLContextAttributes){contextAttributes[attribute]=webGLContextAttributes[attribute]}}contextHandle=GL.createContext(canvas,contextAttributes);if(contextHandle){ctx=GL.getContext(contextHandle).GLctx}}else{ctx=canvas.getContext("2d")}if(!ctx)return null;if(setInModule){if(!useWebGL)assert(typeof GLctx==="undefined","cannot set in module if GLctx is used, but we are a non-GL context that would replace it");Module.ctx=ctx;if(useWebGL)GL.makeContextCurrent(contextHandle);Module.useWebGL=useWebGL;Browser.moduleContextCreatedCallbacks.forEach((function(callback){callback()}));Browser.init()}return ctx}),destroyContext:(function(canvas,useWebGL,setInModule){}),fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:(function(lockPointer,resizeCanvas,vrDevice){Browser.lockPointer=lockPointer;Browser.resizeCanvas=resizeCanvas;Browser.vrDevice=vrDevice;if(typeof Browser.lockPointer==="undefined")Browser.lockPointer=true;if(typeof Browser.resizeCanvas==="undefined")Browser.resizeCanvas=false;if(typeof Browser.vrDevice==="undefined")Browser.vrDevice=null;var canvas=Module["canvas"];function fullscreenChange(){Browser.isFullscreen=false;var canvasContainer=canvas.parentNode;if((document["fullscreenElement"]||document["mozFullScreenElement"]||document["msFullscreenElement"]||document["webkitFullscreenElement"]||document["webkitCurrentFullScreenElement"])===canvasContainer){canvas.exitFullscreen=document["exitFullscreen"]||document["cancelFullScreen"]||document["mozCancelFullScreen"]||document["msExitFullscreen"]||document["webkitCancelFullScreen"]||(function(){});canvas.exitFullscreen=canvas.exitFullscreen.bind(document);if(Browser.lockPointer)canvas.requestPointerLock();Browser.isFullscreen=true;if(Browser.resizeCanvas)Browser.setFullscreenCanvasSize()}else{canvasContainer.parentNode.insertBefore(canvas,canvasContainer);canvasContainer.parentNode.removeChild(canvasContainer);if(Browser.resizeCanvas)Browser.setWindowedCanvasSize()}if(Module["onFullScreen"])Module["onFullScreen"](Browser.isFullscreen);if(Module["onFullscreen"])Module["onFullscreen"](Browser.isFullscreen);Browser.updateCanvasDimensions(canvas)}if(!Browser.fullscreenHandlersInstalled){Browser.fullscreenHandlersInstalled=true;document.addEventListener("fullscreenchange",fullscreenChange,false);document.addEventListener("mozfullscreenchange",fullscreenChange,false);document.addEventListener("webkitfullscreenchange",fullscreenChange,false);document.addEventListener("MSFullscreenChange",fullscreenChange,false)}var canvasContainer=document.createElement("div");canvas.parentNode.insertBefore(canvasContainer,canvas);canvasContainer.appendChild(canvas);canvasContainer.requestFullscreen=canvasContainer["requestFullscreen"]||canvasContainer["mozRequestFullScreen"]||canvasContainer["msRequestFullscreen"]||(canvasContainer["webkitRequestFullscreen"]?(function(){canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"])}):null)||(canvasContainer["webkitRequestFullScreen"]?(function(){canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"])}):null);if(vrDevice){canvasContainer.requestFullscreen({vrDisplay:vrDevice})}else{canvasContainer.requestFullscreen()}}),requestFullScreen:(function(lockPointer,resizeCanvas,vrDevice){Module.printErr("Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.");Browser.requestFullScreen=(function(lockPointer,resizeCanvas,vrDevice){return Browser.requestFullscreen(lockPointer,resizeCanvas,vrDevice)});return Browser.requestFullscreen(lockPointer,resizeCanvas,vrDevice)}),nextRAF:0,fakeRequestAnimationFrame:(function(func){var now=Date.now();if(Browser.nextRAF===0){Browser.nextRAF=now+1e3/60}else{while(now+2>=Browser.nextRAF){Browser.nextRAF+=1e3/60}}var delay=Math.max(Browser.nextRAF-now,0);setTimeout(func,delay)}),requestAnimationFrame:function requestAnimationFrame(func){if(typeof window==="undefined"){Browser.fakeRequestAnimationFrame(func)}else{if(!window.requestAnimationFrame){window.requestAnimationFrame=window["requestAnimationFrame"]||window["mozRequestAnimationFrame"]||window["webkitRequestAnimationFrame"]||window["msRequestAnimationFrame"]||window["oRequestAnimationFrame"]||Browser.fakeRequestAnimationFrame}window.requestAnimationFrame(func)}},safeCallback:(function(func){return(function(){if(!ABORT)return func.apply(null,arguments)})}),allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:(function(){Browser.allowAsyncCallbacks=false}),resumeAsyncCallbacks:(function(){Browser.allowAsyncCallbacks=true;if(Browser.queuedAsyncCallbacks.length>0){var callbacks=Browser.queuedAsyncCallbacks;Browser.queuedAsyncCallbacks=[];callbacks.forEach((function(func){func()}))}}),safeRequestAnimationFrame:(function(func){return Browser.requestAnimationFrame((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}}))}),safeSetTimeout:(function(func,timeout){Module["noExitRuntime"]=true;return setTimeout((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}}),timeout)}),safeSetInterval:(function(func,timeout){Module["noExitRuntime"]=true;return setInterval((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}}),timeout)}),getMimetype:(function(name){return{"jpg":"image/jpeg","jpeg":"image/jpeg","png":"image/png","bmp":"image/bmp","ogg":"audio/ogg","wav":"audio/wav","mp3":"audio/mpeg"}[name.substr(name.lastIndexOf(".")+1)]}),getUserMedia:(function(func){if(!window.getUserMedia){window.getUserMedia=navigator["getUserMedia"]||navigator["mozGetUserMedia"]}window.getUserMedia(func)}),getMovementX:(function(event){return event["movementX"]||event["mozMovementX"]||event["webkitMovementX"]||0}),getMovementY:(function(event){return event["movementY"]||event["mozMovementY"]||event["webkitMovementY"]||0}),getMouseWheelDelta:(function(event){var delta=0;switch(event.type){case"DOMMouseScroll":delta=event.detail;break;case"mousewheel":delta=event.wheelDelta;break;case"wheel":delta=event["deltaY"];break;default:throw"unrecognized mouse wheel event: "+event.type}return delta}),mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:(function(event){if(Browser.pointerLock){if(event.type!="mousemove"&&"mozMovementX"in event){Browser.mouseMovementX=Browser.mouseMovementY=0}else{Browser.mouseMovementX=Browser.getMovementX(event);Browser.mouseMovementY=Browser.getMovementY(event)}if(typeof SDL!="undefined"){Browser.mouseX=SDL.mouseX+Browser.mouseMovementX;Browser.mouseY=SDL.mouseY+Browser.mouseMovementY}else{Browser.mouseX+=Browser.mouseMovementX;Browser.mouseY+=Browser.mouseMovementY}}else{var rect=Module["canvas"].getBoundingClientRect();var cw=Module["canvas"].width;var ch=Module["canvas"].height;var scrollX=typeof window.scrollX!=="undefined"?window.scrollX:window.pageXOffset;var scrollY=typeof window.scrollY!=="undefined"?window.scrollY:window.pageYOffset;if(event.type==="touchstart"||event.type==="touchend"||event.type==="touchmove"){var touch=event.touch;if(touch===undefined){return}var adjustedX=touch.pageX-(scrollX+rect.left);var adjustedY=touch.pageY-(scrollY+rect.top);adjustedX=adjustedX*(cw/rect.width);adjustedY=adjustedY*(ch/rect.height);var coords={x:adjustedX,y:adjustedY};if(event.type==="touchstart"){Browser.lastTouches[touch.identifier]=coords;Browser.touches[touch.identifier]=coords}else if(event.type==="touchend"||event.type==="touchmove"){var last=Browser.touches[touch.identifier];if(!last)last=coords;Browser.lastTouches[touch.identifier]=last;Browser.touches[touch.identifier]=coords}return}var x=event.pageX-(scrollX+rect.left);var y=event.pageY-(scrollY+rect.top);x=x*(cw/rect.width);y=y*(ch/rect.height);Browser.mouseMovementX=x-Browser.mouseX;Browser.mouseMovementY=y-Browser.mouseY;Browser.mouseX=x;Browser.mouseY=y}}),asyncLoad:(function(url,onload,onerror,noRunDep){var dep=!noRunDep?getUniqueRunDependency("al "+url):"";Module["readAsync"](url,(function(arrayBuffer){assert(arrayBuffer,'Loading data file "'+url+'" failed (no arrayBuffer).');onload(new Uint8Array(arrayBuffer));if(dep)removeRunDependency(dep)}),(function(event){if(onerror){onerror()}else{throw'Loading data file "'+url+'" failed.'}}));if(dep)addRunDependency(dep)}),resizeListeners:[],updateResizeListeners:(function(){var canvas=Module["canvas"];Browser.resizeListeners.forEach((function(listener){listener(canvas.width,canvas.height)}))}),setCanvasSize:(function(width,height,noUpdates){var canvas=Module["canvas"];Browser.updateCanvasDimensions(canvas,width,height);if(!noUpdates)Browser.updateResizeListeners()}),windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:(function(){if(typeof SDL!="undefined"){var flags=HEAPU32[SDL.screen>>2];flags=flags|8388608;HEAP32[SDL.screen>>2]=flags}Browser.updateResizeListeners()}),setWindowedCanvasSize:(function(){if(typeof SDL!="undefined"){var flags=HEAPU32[SDL.screen>>2];flags=flags&~8388608;HEAP32[SDL.screen>>2]=flags}Browser.updateResizeListeners()}),updateCanvasDimensions:(function(canvas,wNative,hNative){if(wNative&&hNative){canvas.widthNative=wNative;canvas.heightNative=hNative}else{wNative=canvas.widthNative;hNative=canvas.heightNative}var w=wNative;var h=hNative;if(Module["forcedAspectRatio"]&&Module["forcedAspectRatio"]>0){if(w/h<Module["forcedAspectRatio"]){w=Math.round(h*Module["forcedAspectRatio"])}else{h=Math.round(w/Module["forcedAspectRatio"])}}if((document["fullscreenElement"]||document["mozFullScreenElement"]||document["msFullscreenElement"]||document["webkitFullscreenElement"]||document["webkitCurrentFullScreenElement"])===canvas.parentNode&&typeof screen!="undefined"){var factor=Math.min(screen.width/w,screen.height/h);w=Math.round(w*factor);h=Math.round(h*factor)}if(Browser.resizeCanvas){if(canvas.width!=w)canvas.width=w;if(canvas.height!=h)canvas.height=h;if(typeof canvas.style!="undefined"){canvas.style.removeProperty("width");canvas.style.removeProperty("height")}}else{if(canvas.width!=wNative)canvas.width=wNative;if(canvas.height!=hNative)canvas.height=hNative;if(typeof canvas.style!="undefined"){if(w!=wNative||h!=hNative){canvas.style.setProperty("width",w+"px","important");canvas.style.setProperty("height",h+"px","important")}else{canvas.style.removeProperty("width");canvas.style.removeProperty("height")}}}}),wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:(function(){var handle=Browser.nextWgetRequestHandle;Browser.nextWgetRequestHandle++;return handle})};var EmterpreterAsync={initted:false,state:0,saveStack:"",yieldCallbacks:[],postAsync:null,asyncFinalizers:[],ensureInit:(function(){if(this.initted)return;this.initted=true}),setState:(function(s){this.ensureInit();this.state=s;Module["setAsyncState"](s)}),handle:(function(doAsyncOp,yieldDuring){Module["noExitRuntime"]=true;if(EmterpreterAsync.state===0){var stack=new Int32Array(HEAP32.subarray(EMTSTACKTOP>>2,Module["emtStackSave"]()>>2));var stacktop=Module["stackSave"]();var resumedCallbacksForYield=false;function resumeCallbacksForYield(){if(resumedCallbacksForYield)return;resumedCallbacksForYield=true;EmterpreterAsync.yieldCallbacks.forEach((function(func){func()}));Browser.resumeAsyncCallbacks()}var callingDoAsyncOp=1;doAsyncOp(function resume(post){if(ABORT){return}if(callingDoAsyncOp){assert(callingDoAsyncOp===1);callingDoAsyncOp++;setTimeout((function(){resume(post)}),0);return}assert(EmterpreterAsync.state===1||EmterpreterAsync.state===3);EmterpreterAsync.setState(3);if(yieldDuring){resumeCallbacksForYield()}HEAP32.set(stack,EMTSTACKTOP>>2);EmterpreterAsync.setState(2);if(Browser.mainLoop.func){Browser.mainLoop.resume()}assert(!EmterpreterAsync.postAsync);EmterpreterAsync.postAsync=post||null;Module["emterpret"](stack[0]);if(!yieldDuring&&EmterpreterAsync.state===0){Browser.resumeAsyncCallbacks()}if(EmterpreterAsync.state===0){EmterpreterAsync.asyncFinalizers.forEach((function(func){func()}));EmterpreterAsync.asyncFinalizers.length=0}});callingDoAsyncOp=0;EmterpreterAsync.setState(1);if(Browser.mainLoop.func){Browser.mainLoop.pause()}if(yieldDuring){setTimeout((function(){resumeCallbacksForYield()}),0)}else{Browser.pauseAsyncCallbacks()}}else{assert(EmterpreterAsync.state===2);EmterpreterAsync.setState(0);if(EmterpreterAsync.postAsync){var ret=EmterpreterAsync.postAsync();EmterpreterAsync.postAsync=null;return ret}}})};function _emscripten_sleep(ms){EmterpreterAsync.handle((function(resume){setTimeout((function(){resume()}),ms)}))}function __exit(status){Module["exit"](status)}function _exit(status){__exit(status)}function _getenv(name){if(name===0)return 0;name=Pointer_stringify(name);if(!ENV.hasOwnProperty(name))return 0;if(_getenv.ret)_free(_getenv.ret);_getenv.ret=allocateUTF8(ENV[name]);return _getenv.ret}function _llvm_eh_typeid_for(type){return type}function _llvm_trap(){abort("trap!")}var _llvm_trunc_f64=Math_trunc;function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}function _pthread_cond_wait(){return 0}var PTHREAD_SPECIFIC={};function _pthread_getspecific(key){return PTHREAD_SPECIFIC[key]||0}var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key,destructor){if(key==0){return ERRNO_CODES.EINVAL}HEAP32[key>>2]=PTHREAD_SPECIFIC_NEXT_KEY;PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY]=0;PTHREAD_SPECIFIC_NEXT_KEY++;return 0}function _pthread_once(ptr,func){if(!_pthread_once.seen)_pthread_once.seen={};if(ptr in _pthread_once.seen)return;Module["dynCall_v"](func);_pthread_once.seen[ptr]=1}function _pthread_setspecific(key,value){if(!(key in PTHREAD_SPECIFIC)){return ERRNO_CODES.EINVAL}PTHREAD_SPECIFIC[key]=value;return 0}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]);return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?Pointer_stringify(tm_zone):""};var pattern=Pointer_stringify(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule])}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value==="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={"%a":(function(date){return WEEKDAYS[date.tm_wday].substring(0,3)}),"%A":(function(date){return WEEKDAYS[date.tm_wday]}),"%b":(function(date){return MONTHS[date.tm_mon].substring(0,3)}),"%B":(function(date){return MONTHS[date.tm_mon]}),"%C":(function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)}),"%d":(function(date){return leadingNulls(date.tm_mday,2)}),"%e":(function(date){return leadingSomething(date.tm_mday,2," ")}),"%g":(function(date){return getWeekBasedYear(date).toString().substring(2)}),"%G":(function(date){return getWeekBasedYear(date)}),"%H":(function(date){return leadingNulls(date.tm_hour,2)}),"%I":(function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)}),"%j":(function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)}),"%m":(function(date){return leadingNulls(date.tm_mon+1,2)}),"%M":(function(date){return leadingNulls(date.tm_min,2)}),"%n":(function(){return"\n"}),"%p":(function(date){if(date.tm_hour>=0&&date.tm_hour<12){return"AM"}else{return"PM"}}),"%S":(function(date){return leadingNulls(date.tm_sec,2)}),"%t":(function(){return"\t"}),"%u":(function(date){var day=new Date(date.tm_year+1900,date.tm_mon+1,date.tm_mday,0,0,0,0);return day.getDay()||7}),"%U":(function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?"01":"00"}),"%V":(function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return"53"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return"01"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)}),"%w":(function(date){var day=new Date(date.tm_year+1900,date.tm_mon+1,date.tm_mday,0,0,0,0);return day.getDay()}),"%W":(function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?"01":"00"}),"%y":(function(date){return(date.tm_year+1900).toString().substring(2)}),"%Y":(function(date){return date.tm_year+1900}),"%z":(function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?"+":"-")+String("0000"+off).slice(-4)}),"%Z":(function(date){return date.tm_zone}),"%%":(function(){return"%"})};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}FS.staticInit();__ATINIT__.unshift((function(){if(!Module["noFSInit"]&&!FS.init.initialized)FS.init()}));__ATMAIN__.push((function(){FS.ignorePermissions=false}));__ATEXIT__.push((function(){FS.quit()}));__ATINIT__.unshift((function(){TTY.init()}));__ATEXIT__.push((function(){TTY.shutdown()}));if(ENVIRONMENT_IS_NODE){var fs=require("fs");var NODEJS_PATH=require("path");NODEFS.staticInit()}___buildEnvironment(ENV);Module["requestFullScreen"]=function Module_requestFullScreen(lockPointer,resizeCanvas,vrDevice){Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead.");Module["requestFullScreen"]=Module["requestFullscreen"];Browser.requestFullScreen(lockPointer,resizeCanvas,vrDevice)};Module["requestFullscreen"]=function Module_requestFullscreen(lockPointer,resizeCanvas,vrDevice){Browser.requestFullscreen(lockPointer,resizeCanvas,vrDevice)};Module["requestAnimationFrame"]=function Module_requestAnimationFrame(func){Browser.requestAnimationFrame(func)};Module["setCanvasSize"]=function Module_setCanvasSize(width,height,noUpdates){Browser.setCanvasSize(width,height,noUpdates)};Module["pauseMainLoop"]=function Module_pauseMainLoop(){Browser.mainLoop.pause()};Module["resumeMainLoop"]=function Module_resumeMainLoop(){Browser.mainLoop.resume()};Module["getUserMedia"]=function Module_getUserMedia(){Browser.getUserMedia()};Module["createContext"]=function Module_createContext(canvas,useWebGL,setInModule,webGLContextAttributes){return Browser.createContext(canvas,useWebGL,setInModule,webGLContextAttributes)};if(ENVIRONMENT_IS_NODE){_emscripten_get_now=function _emscripten_get_now_actual(){var t=process["hrtime"]();return t[0]*1e3+t[1]/1e6}}else if(typeof dateNow!=="undefined"){_emscripten_get_now=dateNow}else if(typeof self==="object"&&self["performance"]&&typeof self["performance"]["now"]==="function"){_emscripten_get_now=(function(){return self["performance"]["now"]()})}else if(typeof performance==="object"&&typeof performance["now"]==="function"){_emscripten_get_now=(function(){return performance["now"]()})}else{_emscripten_get_now=Date.now}DYNAMICTOP_PTR=staticAlloc(4);STACK_BASE=STACKTOP=alignMemory(STATICTOP);STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=alignMemory(STACK_MAX);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;staticSealed=true;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}Module["wasmTableSize"]=5228;Module["wasmMaxTableSize"]=5228;function invoke_ddd(index,a1,a2){try{return Module["dynCall_ddd"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_ddi(index,a1,a2){try{return Module["dynCall_ddi"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_di(index,a1){try{return Module["dynCall_di"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_dii(index,a1,a2){try{return Module["dynCall_dii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_diii(index,a1,a2,a3){try{return Module["dynCall_diii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_diiiii(index,a1,a2,a3,a4,a5){try{return Module["dynCall_diiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_diiiiidd(index,a1,a2,a3,a4,a5,a6,a7){try{return Module["dynCall_diiiiidd"](index,a1,a2,a3,a4,a5,a6,a7)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_fiii(index,a1,a2,a3){try{return Module["dynCall_fiii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_i(index){try{return Module["dynCall_i"](index)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_id(index,a1){try{return Module["dynCall_id"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iddd(index,a1,a2,a3){try{return Module["dynCall_iddd"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iddddii(index,a1,a2,a3,a4,a5,a6){try{return Module["dynCall_iddddii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_idi(index,a1,a2){try{return Module["dynCall_idi"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_ii(index,a1){try{return Module["dynCall_ii"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iid(index,a1,a2){try{return Module["dynCall_iid"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iii(index,a1,a2){try{return Module["dynCall_iii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiii(index,a1,a2,a3){try{return Module["dynCall_iiii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiii(index,a1,a2,a3,a4){try{return Module["dynCall_iiiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiiid(index,a1,a2,a3,a4,a5){try{return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiiii(index,a1,a2,a3,a4,a5){try{return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6){try{return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7){try{return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8){try{return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){try{return Module["dynCall_iiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){try{return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){try{return Module["dynCall_iiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_v(index){try{Module["dynCall_v"](index)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_vi(index,a1){try{Module["dynCall_vi"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_vii(index,a1,a2){try{Module["dynCall_vii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_viidii(index,a1,a2,a3,a4,a5){try{Module["dynCall_viidii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_viii(index,a1,a2,a3){try{Module["dynCall_viii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_viiii(index,a1,a2,a3,a4){try{Module["dynCall_viiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_viiiii(index,a1,a2,a3,a4,a5){try{Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){try{Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7){try{Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8){try{Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){try{Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15){try{Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}Module.asmGlobalArg={};Module.asmLibraryArg={"abort":abort,"enlargeMemory":enlargeMemory,"getTotalMemory":getTotalMemory,"abortOnCannotGrowMemory":abortOnCannotGrowMemory,"invoke_ddd":invoke_ddd,"invoke_ddi":invoke_ddi,"invoke_di":invoke_di,"invoke_dii":invoke_dii,"invoke_diii":invoke_diii,"invoke_diiiii":invoke_diiiii,"invoke_diiiiidd":invoke_diiiiidd,"invoke_fiii":invoke_fiii,"invoke_i":invoke_i,"invoke_id":invoke_id,"invoke_iddd":invoke_iddd,"invoke_iddddii":invoke_iddddii,"invoke_idi":invoke_idi,"invoke_ii":invoke_ii,"invoke_iid":invoke_iid,"invoke_iii":invoke_iii,"invoke_iiii":invoke_iiii,"invoke_iiiii":invoke_iiiii,"invoke_iiiiid":invoke_iiiiid,"invoke_iiiiii":invoke_iiiiii,"invoke_iiiiiii":invoke_iiiiiii,"invoke_iiiiiiii":invoke_iiiiiiii,"invoke_iiiiiiiii":invoke_iiiiiiiii,"invoke_iiiiiiiiiii":invoke_iiiiiiiiiii,"invoke_iiiiiiiiiiii":invoke_iiiiiiiiiiii,"invoke_iiiiiiiiiiiii":invoke_iiiiiiiiiiiii,"invoke_v":invoke_v,"invoke_vi":invoke_vi,"invoke_vii":invoke_vii,"invoke_viidii":invoke_viidii,"invoke_viii":invoke_viii,"invoke_viiii":invoke_viiii,"invoke_viiiii":invoke_viiiii,"invoke_viiiiii":invoke_viiiiii,"invoke_viiiiiii":invoke_viiiiiii,"invoke_viiiiiiii":invoke_viiiiiiii,"invoke_viiiiiiiiii":invoke_viiiiiiiiii,"invoke_viiiiiiiiiiiiiii":invoke_viiiiiiiiiiiiiii,"__ZSt18uncaught_exceptionv":__ZSt18uncaught_exceptionv,"___assert_fail":___assert_fail,"___cxa_allocate_exception":___cxa_allocate_exception,"___cxa_begin_catch":___cxa_begin_catch,"___cxa_call_unexpected":___cxa_call_unexpected,"___cxa_end_catch":___cxa_end_catch,"___cxa_find_matching_catch_2":___cxa_find_matching_catch_2,"___cxa_find_matching_catch_3":___cxa_find_matching_catch_3,"___cxa_find_matching_catch_4":___cxa_find_matching_catch_4,"___cxa_find_matching_catch_6":___cxa_find_matching_catch_6,"___cxa_find_matching_catch_8":___cxa_find_matching_catch_8,"___cxa_free_exception":___cxa_free_exception,"___cxa_get_exception_ptr":___cxa_get_exception_ptr,"___cxa_pure_virtual":___cxa_pure_virtual,"___cxa_rethrow":___cxa_rethrow,"___cxa_throw":___cxa_throw,"___lock":___lock,"___map_file":___map_file,"___resumeException":___resumeException,"___setErrNo":___setErrNo,"___syscall140":___syscall140,"___syscall145":___syscall145,"___syscall146":___syscall146,"___syscall183":___syscall183,"___syscall195":___syscall195,"___syscall220":___syscall220,"___syscall221":___syscall221,"___syscall3":___syscall3,"___syscall5":___syscall5,"___syscall54":___syscall54,"___syscall6":___syscall6,"___syscall91":___syscall91,"___unlock":___unlock,"_abort":_abort,"_dlclose":_dlclose,"_dlerror":_dlerror,"_dlopen":_dlopen,"_dlsym":_dlsym,"_emscripten_asm_const_ii":_emscripten_asm_const_ii,"_emscripten_asm_const_iii":_emscripten_asm_const_iii,"_emscripten_asm_const_iiii":_emscripten_asm_const_iiii,"_emscripten_memcpy_big":_emscripten_memcpy_big,"_emscripten_sleep":_emscripten_sleep,"_exit":_exit,"_getenv":_getenv,"_llvm_eh_typeid_for":_llvm_eh_typeid_for,"_llvm_trap":_llvm_trap,"_llvm_trunc_f64":_llvm_trunc_f64,"_pthread_cond_wait":_pthread_cond_wait,"_pthread_getspecific":_pthread_getspecific,"_pthread_key_create":_pthread_key_create,"_pthread_once":_pthread_once,"_pthread_setspecific":_pthread_setspecific,"_strftime_l":_strftime_l,"DYNAMICTOP_PTR":DYNAMICTOP_PTR,"tempDoublePtr":tempDoublePtr,"STACKTOP":STACKTOP};Module.asmLibraryArg["EMTSTACKTOP"]=EMTSTACKTOP;Module.asmLibraryArg["EMT_STACK_MAX"]=EMT_STACK_MAX;Module.asmLibraryArg["eb"]=eb;var asm=Module["asm"](Module.asmGlobalArg,Module.asmLibraryArg,buffer);Module["asm"]=asm;var __GLOBAL__I_000101=Module["__GLOBAL__I_000101"]=(function(){return Module["asm"]["__GLOBAL__I_000101"].apply(null,arguments)});var __GLOBAL__sub_I_ast_cpp=Module["__GLOBAL__sub_I_ast_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_ast_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_ast_fwd_decl_cpp=Module["__GLOBAL__sub_I_ast_fwd_decl_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_ast_fwd_decl_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_bind_cpp=Module["__GLOBAL__sub_I_bind_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_bind_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_check_nesting_cpp=Module["__GLOBAL__sub_I_check_nesting_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_check_nesting_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_color_maps_cpp=Module["__GLOBAL__sub_I_color_maps_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_color_maps_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_context_cpp=Module["__GLOBAL__sub_I_context_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_context_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_cssize_cpp=Module["__GLOBAL__sub_I_cssize_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_cssize_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_emitter_cpp=Module["__GLOBAL__sub_I_emitter_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_emitter_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_environment_cpp=Module["__GLOBAL__sub_I_environment_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_environment_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_error_handling_cpp=Module["__GLOBAL__sub_I_error_handling_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_error_handling_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_eval_cpp=Module["__GLOBAL__sub_I_eval_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_eval_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_expand_cpp=Module["__GLOBAL__sub_I_expand_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_expand_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_extend_cpp=Module["__GLOBAL__sub_I_extend_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_extend_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_file_cpp=Module["__GLOBAL__sub_I_file_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_file_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_functions_cpp=Module["__GLOBAL__sub_I_functions_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_functions_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_inspect_cpp=Module["__GLOBAL__sub_I_inspect_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_inspect_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_iostream_cpp=Module["__GLOBAL__sub_I_iostream_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_iostream_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_listize_cpp=Module["__GLOBAL__sub_I_listize_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_listize_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_node_cpp=Module["__GLOBAL__sub_I_node_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_node_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_output_cpp=Module["__GLOBAL__sub_I_output_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_output_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_parser_cpp=Module["__GLOBAL__sub_I_parser_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_parser_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_remove_placeholders_cpp=Module["__GLOBAL__sub_I_remove_placeholders_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_remove_placeholders_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_sass2scss_cpp=Module["__GLOBAL__sub_I_sass2scss_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_sass2scss_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_sass_context_cpp=Module["__GLOBAL__sub_I_sass_context_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_sass_context_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_sass_cpp=Module["__GLOBAL__sub_I_sass_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_sass_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_sass_functions_cpp=Module["__GLOBAL__sub_I_sass_functions_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_sass_functions_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_sass_util_cpp=Module["__GLOBAL__sub_I_sass_util_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_sass_util_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_sass_values_cpp=Module["__GLOBAL__sub_I_sass_values_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_sass_values_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_source_map_cpp=Module["__GLOBAL__sub_I_source_map_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_source_map_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_subset_map_cpp=Module["__GLOBAL__sub_I_subset_map_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_subset_map_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_to_c_cpp=Module["__GLOBAL__sub_I_to_c_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_to_c_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_to_value_cpp=Module["__GLOBAL__sub_I_to_value_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_to_value_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_units_cpp=Module["__GLOBAL__sub_I_units_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_units_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_util_cpp=Module["__GLOBAL__sub_I_util_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_util_cpp"].apply(null,arguments)});var __GLOBAL__sub_I_values_cpp=Module["__GLOBAL__sub_I_values_cpp"]=(function(){return Module["asm"]["__GLOBAL__sub_I_values_cpp"].apply(null,arguments)});var ___cxa_can_catch=Module["___cxa_can_catch"]=(function(){return Module["asm"]["___cxa_can_catch"].apply(null,arguments)});var ___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=(function(){return Module["asm"]["___cxa_is_pointer_type"].apply(null,arguments)});var ___errno_location=Module["___errno_location"]=(function(){return Module["asm"]["___errno_location"].apply(null,arguments)});var _emscripten_replace_memory=Module["_emscripten_replace_memory"]=(function(){return Module["asm"]["_emscripten_replace_memory"].apply(null,arguments)});var _free=Module["_free"]=(function(){return Module["asm"]["_free"].apply(null,arguments)});var _malloc=Module["_malloc"]=(function(){return Module["asm"]["_malloc"].apply(null,arguments)});var _sass_compile_emscripten=Module["_sass_compile_emscripten"]=(function(){return Module["asm"]["_sass_compile_emscripten"].apply(null,arguments)});var emtStackSave=Module["emtStackSave"]=(function(){return Module["asm"]["emtStackSave"].apply(null,arguments)});var emterpret=Module["emterpret"]=(function(){return Module["asm"]["emterpret"].apply(null,arguments)});var setAsyncState=Module["setAsyncState"]=(function(){return Module["asm"]["setAsyncState"].apply(null,arguments)});var setTempRet0=Module["setTempRet0"]=(function(){return Module["asm"]["setTempRet0"].apply(null,arguments)});var setThrew=Module["setThrew"]=(function(){return Module["asm"]["setThrew"].apply(null,arguments)});var stackAlloc=Module["stackAlloc"]=(function(){return Module["asm"]["stackAlloc"].apply(null,arguments)});var stackRestore=Module["stackRestore"]=(function(){return Module["asm"]["stackRestore"].apply(null,arguments)});var stackSave=Module["stackSave"]=(function(){return Module["asm"]["stackSave"].apply(null,arguments)});var dynCall_ddd=Module["dynCall_ddd"]=(function(){return Module["asm"]["dynCall_ddd"].apply(null,arguments)});var dynCall_ddi=Module["dynCall_ddi"]=(function(){return Module["asm"]["dynCall_ddi"].apply(null,arguments)});var dynCall_di=Module["dynCall_di"]=(function(){return Module["asm"]["dynCall_di"].apply(null,arguments)});var dynCall_dii=Module["dynCall_dii"]=(function(){return Module["asm"]["dynCall_dii"].apply(null,arguments)});var dynCall_diii=Module["dynCall_diii"]=(function(){return Module["asm"]["dynCall_diii"].apply(null,arguments)});var dynCall_diiiii=Module["dynCall_diiiii"]=(function(){return Module["asm"]["dynCall_diiiii"].apply(null,arguments)});var dynCall_diiiiidd=Module["dynCall_diiiiidd"]=(function(){return Module["asm"]["dynCall_diiiiidd"].apply(null,arguments)});var dynCall_fiii=Module["dynCall_fiii"]=(function(){return Module["asm"]["dynCall_fiii"].apply(null,arguments)});var dynCall_i=Module["dynCall_i"]=(function(){return Module["asm"]["dynCall_i"].apply(null,arguments)});var dynCall_id=Module["dynCall_id"]=(function(){return Module["asm"]["dynCall_id"].apply(null,arguments)});var dynCall_iddd=Module["dynCall_iddd"]=(function(){return Module["asm"]["dynCall_iddd"].apply(null,arguments)});var dynCall_iddddii=Module["dynCall_iddddii"]=(function(){return Module["asm"]["dynCall_iddddii"].apply(null,arguments)});var dynCall_idi=Module["dynCall_idi"]=(function(){return Module["asm"]["dynCall_idi"].apply(null,arguments)});var dynCall_ii=Module["dynCall_ii"]=(function(){return Module["asm"]["dynCall_ii"].apply(null,arguments)});var dynCall_iid=Module["dynCall_iid"]=(function(){return Module["asm"]["dynCall_iid"].apply(null,arguments)});var dynCall_iii=Module["dynCall_iii"]=(function(){return Module["asm"]["dynCall_iii"].apply(null,arguments)});var dynCall_iiii=Module["dynCall_iiii"]=(function(){return Module["asm"]["dynCall_iiii"].apply(null,arguments)});var dynCall_iiiii=Module["dynCall_iiiii"]=(function(){return Module["asm"]["dynCall_iiiii"].apply(null,arguments)});var dynCall_iiiiid=Module["dynCall_iiiiid"]=(function(){return Module["asm"]["dynCall_iiiiid"].apply(null,arguments)});var dynCall_iiiiii=Module["dynCall_iiiiii"]=(function(){return Module["asm"]["dynCall_iiiiii"].apply(null,arguments)});var dynCall_iiiiiii=Module["dynCall_iiiiiii"]=(function(){return Module["asm"]["dynCall_iiiiiii"].apply(null,arguments)});var dynCall_iiiiiiii=Module["dynCall_iiiiiiii"]=(function(){return Module["asm"]["dynCall_iiiiiiii"].apply(null,arguments)});var dynCall_iiiiiiiii=Module["dynCall_iiiiiiiii"]=(function(){return Module["asm"]["dynCall_iiiiiiiii"].apply(null,arguments)});var dynCall_iiiiiiiiiii=Module["dynCall_iiiiiiiiiii"]=(function(){return Module["asm"]["dynCall_iiiiiiiiiii"].apply(null,arguments)});var dynCall_iiiiiiiiiiii=Module["dynCall_iiiiiiiiiiii"]=(function(){return Module["asm"]["dynCall_iiiiiiiiiiii"].apply(null,arguments)});var dynCall_iiiiiiiiiiiii=Module["dynCall_iiiiiiiiiiiii"]=(function(){return Module["asm"]["dynCall_iiiiiiiiiiiii"].apply(null,arguments)});var dynCall_v=Module["dynCall_v"]=(function(){return Module["asm"]["dynCall_v"].apply(null,arguments)});var dynCall_vi=Module["dynCall_vi"]=(function(){return Module["asm"]["dynCall_vi"].apply(null,arguments)});var dynCall_vii=Module["dynCall_vii"]=(function(){return Module["asm"]["dynCall_vii"].apply(null,arguments)});var dynCall_viidii=Module["dynCall_viidii"]=(function(){return Module["asm"]["dynCall_viidii"].apply(null,arguments)});var dynCall_viii=Module["dynCall_viii"]=(function(){return Module["asm"]["dynCall_viii"].apply(null,arguments)});var dynCall_viiii=Module["dynCall_viiii"]=(function(){return Module["asm"]["dynCall_viiii"].apply(null,arguments)});var dynCall_viiiii=Module["dynCall_viiiii"]=(function(){return Module["asm"]["dynCall_viiiii"].apply(null,arguments)});var dynCall_viiiiii=Module["dynCall_viiiiii"]=(function(){return Module["asm"]["dynCall_viiiiii"].apply(null,arguments)});var dynCall_viiiiiii=Module["dynCall_viiiiiii"]=(function(){return Module["asm"]["dynCall_viiiiiii"].apply(null,arguments)});var dynCall_viiiiiiii=Module["dynCall_viiiiiiii"]=(function(){return Module["asm"]["dynCall_viiiiiiii"].apply(null,arguments)});var dynCall_viiiiiiiiii=Module["dynCall_viiiiiiiiii"]=(function(){return Module["asm"]["dynCall_viiiiiiiiii"].apply(null,arguments)});var dynCall_viiiiiiiiiiiiiii=Module["dynCall_viiiiiiiiiiiiiii"]=(function(){return Module["asm"]["dynCall_viiiiiiiiiiiiiii"].apply(null,arguments)});Module["asm"]=asm;Module["ccall"]=ccall;Module["getValue"]=getValue;Module["Pointer_stringify"]=Pointer_stringify;Module["stringToUTF8"]=stringToUTF8;Module["lengthBytesUTF8"]=lengthBytesUTF8;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};function run(args){args=args||Module["arguments"];if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=run;function exit(status,implicit){if(implicit&&Module["noExitRuntime"]&&status===0){return}if(Module["noExitRuntime"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module["onExit"])Module["onExit"](status)}if(ENVIRONMENT_IS_NODE){process["exit"](status)}Module["quit"](status,new ExitStatus(status))}Module["exit"]=exit;function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}if(what!==undefined){Module.print(what);Module.printErr(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;throw"abort("+what+"). Build with -s ASSERTIONS=1 for more info."}Module["abort"]=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}Module["noExitRuntime"]=true;run()




/*global Module*/
/*jshint strict:false, unused:false*/

function noop(){}


function stripLeadingSlash(text) {
  return text.slice(0, 1) === '/' ? text.slice(1) : text;
}

function addLeadingSlash(text) {
  return text.slice(0, 1) !== '/' ? ('/' + text) : text;
}

function stripTrailingSlash(text) {
  return text.slice(-1) === '/' ? text.slice(0, -1) : text;
}

function addTrailingSlash(text) {
  return text.slice(-1) !== '/' ? (text + '/') : text;
}


function pointerToString(pointer) {
  /*jshint camelcase:false*/
  return pointer && Module.Pointer_stringify(pointer) || null;
}

function stringToPointer(text) {
  // a character like ” takes 3 bytes, while .length would return 1
  // see https://github.com/medialize/sass.js/issues/72#issuecomment-263916386
  var bytes = Module.lengthBytesUTF8(text);
  var buffer = Module._malloc(bytes + 1);
  Module.stringToUTF8(text, buffer, bytes + 1);
  return buffer;
}

function pointerToJson(pointer) {
  var test = pointerToString(pointer);
  return test && JSON.parse(test) || null;
}

function pointerToStringArray(pointer) {
  var list = [];
  if (!pointer) {
    return list;
  }

  // TODO: are we limited to 32bit?
  for (var i=0; true; i+=4) {
    var _pointer = Module.getValue(pointer + i, '*');
    if (!_pointer) {
      break;
    }

    var _item = pointerToString(_pointer);
    _item && list.push(_item);
  }

  return list;
}

/*jshint strict:false, unused:false*/

var BooleanNumber = function(input) {
  // in emscripten you pass booleans as integer 0 and 1
  return Number(Boolean(input));
};

// map of arguments required by the emscripten wrapper (order relevant!)
// to not have to touch various different spots in this file,
// everything is defined here and registered in the appropriate places.
var options = [
  {
    // int output_style,
    type: 'number',
    // Output style for the generated css code
    // using Sass.style.*
    key: 'style',
    initial: 0,
    coerce: Number,
  },
  {
    // int precision,
    type: 'number',
    // Precision for outputting fractional numbers
    // 0: use libsass default
    key: 'precision',
    initial: -1,
    coerce: Number,
  },
  {
    // bool source_comments,
    type: 'number',
    // If you want inline source comments
    key: 'comments',
    initial: 0,
    coerce: BooleanNumber,
  },
  {
    // bool is_indented_syntax_src,
    type: 'number',
    // Treat source_string as SASS (as opposed to SCSS)
    key: 'indentedSyntax',
    initial: 0,
    coerce: BooleanNumber,
  },
  {
    // bool source_map_contents,
    type: 'number',
    // embed include contents in maps
    key: 'sourceMapContents',
    initial: 1,
    coerce: BooleanNumber,
  },
  {
    // bool source_map_embed,
    type: 'number',
    // embed sourceMappingUrl as data uri
    key: 'sourceMapEmbed',
    initial: 0,
    coerce: BooleanNumber,
  },
  {
    // bool omit_source_map_url,
    type: 'number',
    // Disable sourceMappingUrl in css output
    key: 'sourceMapOmitUrl',
    initial: 1,
    coerce: BooleanNumber,
  },
  {
    // char *source_map_root,
    type: 'string',
    // Pass-through as sourceRoot property
    key: 'sourceMapRoot',
    initial: 'root',
    coerce: String,
  },
  {
    // char *source_map_file,
    type: 'string',
    // Path to source map file
    // Enables the source map generating
    // Used to create sourceMappingUrl
    key: 'sourceMapFile',
    initial: 'file',
    coerce: String,
  },
  {
    // char *input_path,
    type: 'string',
    // The input path is used for source map generation.
    // It can be used to define something with string
    // compilation or to overload the input file path.
    // It is set to "stdin" for data contexts
    // and to the input file on file contexts.
    key: 'inputPath',
    initial: 'stdin',
    coerce: String,
  },
  {
    // char *output_path,
    type: 'string',
    // The output path is used for source map generation.
    // Libsass will not write to this file, it is just
    // used to create information in source-maps etc.
    key: 'outputPath',
    initial: 'stdout',
    coerce: String,
  },
  {
    // char *indent,
    type: 'string',
    // String to be used for indentation
    key: 'indent',
    initial: '  ',
    coerce: String,
  },
  {
    // char *linefeed,
    type: 'string',
    // String to be used to for line feeds
    key: 'linefeed',
    initial: '\n',
    coerce: String,
  },
];

/*global FS, PATH, Sass, stringToPointer*/
/*jshint strict:false*/

var Importer = {
  _running: false,
  _result: null,

  find: function(current, previous) {
    if (!Sass._importer) {
      Importer._running = false;
      return;
    }

    Importer._running = true;
    Importer._result = null;

    var resolved = PATH.resolve(previous === 'stdin' ? Sass._path : PATH.dirname(previous), current);
    var found = Sass.findPathVariation(FS.stat, resolved);
    var done = function done(result) {
      Importer._result = result;
      Importer._running = false;
    };

    try {
      Sass._importer({
        current: current,
        previous: previous,
        resolved: resolved,
        path: found,
        options: Sass._options.importer || null,
      }, done);
    } catch(e) {
      // allow emscripten to resume libsass,
      // if only to have it stop gracefully
      done({ error: e.message });
      // but don't just swallow the JS error
      console.error(e.stack);
    }
  },

  finished: function() {
    return !Importer._running;
  },

  path: function() {
    return Importer._resultPointer('path');
  },

  content: function() {
    return Importer._resultPointer('content');
  },

  error: function() {
    return Importer._resultPointer('error');
  },

  _resultPointer: function(key) {
    return Importer._result && Importer._result[key] !== undefined && stringToPointer(Importer._result[key]) || 0;
  },

};
/*global Module, FS, PATH, stripLeadingSlash, addTrailingSlash, XMLHttpRequest, noop, options*/
/*jshint strict:false*/

var Sass = {
  style: {
    nested: 0,
    expanded: 1,
    compact: 2,
    compressed: 3,
  },
  comments: {
    'none': 0,
    'default': 1,
  },

  _options: {
    // filled by sass.options.js
  },
  _defaultOptions: {
    // filled by sass.options.js
  },
  _optionTypes: {
    // filled by sass.options.js
  },

  _files: {},
  _path: '/sass/',

  FS: FS,
  PATH: PATH,
  Module: Module,

  // track if emscripten is initialized
  _initialized: false,
  // allow calling .compile() before emscripten is ready by "buffering" the call
  // (i.e. have the client not care about its asynchronous init)
  _ready: function() {
    Sass._initialized = true;
    // we may have buffered compile() calls during execution,
    Sass._compileNext();
  },

  _compileNext: function() {
    if (!Sass._compileQueue.length) {
      return;
    }
    // first in first out
    var args = Sass._compileQueue.shift();
    Sass.compile.apply(Sass, args);
  },

  options: function(options, callback) {
    if (options === 'defaults') {
      Sass.options(Sass._defaultOptions, callback);
      return;
    }

    if (typeof options !== 'object') {
      return;
    }

    Object.keys(options).forEach(function(key) {
      var _type = Sass._optionTypes[key];

      if (key === 'importer') {
        // allow passing compile() time options
        // to the importer callback
        Sass._options[key] = options[key];
        return;
      }

      // no need to import crap
      if (!_type) {
        throw new Error('Unknown option "' + key + '"');
      }

      // force expected data type
      Sass._options[key] = _type(options[key]);
    });

    callback && callback();
  },

  _cloneOptions: function() {
    var o = {};
    Object.keys(Sass._options).forEach(function(key) {
      o[key] = Sass._options[key];
    });

    return o;
  },

  importer: function(importerCallback, callback) {
    if (typeof importerCallback !== 'function' && importerCallback !== null) {
      throw new Error('importer callback must either be a function or null');
    }

    Sass._importer = importerCallback;
    callback && callback();
  },

  _absolutePath: function(filename) {
    return Sass._path + stripLeadingSlash(filename);
  },

  _createPath: function(parts) {
    var base = [];

    while (parts.length) {
      var directory = parts.shift();
      try {
        FS.createFolder(base.join('/'), directory, true, true);
      } catch(e) {
        // IGNORE file exists errors
      }

      base.push(directory);
    }
  },

  _ensurePath: function(filename) {
    var parts = filename.split('/');
    parts.pop();

    if (!parts.length) {
      return;
    }

    try {
      FS.stat(parts.join('/'));
      return;
    } catch(e) {
      Sass._createPath(parts);
    }
  },

  writeFile: function(filename, text, callback) {
    if (typeof filename === 'object') {
      callback = text;
      text = null;

      var map = {};
      Object.keys(filename).forEach(function(file) {
        Sass.writeFile(file, filename[file], function(result) {
          map[file] = result;
        });
      });

      callback && callback(map);
      return;
    }

    var _absolute = filename.slice(0, 1) === '/';
    var path = Sass._absolutePath(filename);
    try {
      Sass._ensurePath(path);
      FS.writeFile(path, text);
      Sass._files[path] = filename;
      // create symlink for absolute path resolution
      if (_absolute) {
        Sass._ensurePath(filename);
        FS.symlink(path, filename);
      }
      callback && callback(true);
    } catch(e) {
      callback && callback(false);
    }
  },

  readFile: function(filename, callback) {
    if (Array.isArray(filename)) {
      var map = {};
      filename.forEach(function(file) {
        Sass.readFile(file, function(result) {
          map[file] = result;
        });
      });

      callback && callback(map);
      return;
    }

    var path = Sass._absolutePath(filename);
    var result;
    try {
      result = FS.readFile(path, {encoding: 'utf8'});
    } catch(e) {}

    callback && callback(result);
  },

  listFiles: function(callback) {
    var list = Object.keys(Sass._files).map(function(path) {
      return Sass._files[path];
    });

    callback && callback(list);
  },

  removeFile: function(filename, callback) {
    if (Array.isArray(filename)) {
      var map = {};
      filename.forEach(function(file) {
        Sass.removeFile(file, function(result) {
          map[file] = result;
        });
      });

      callback && callback(map);
      return;
    }

    var _absolute = filename.slice(0, 1) === '/';
    var path = Sass._absolutePath(filename);
    try {
      FS.unlink(path);
      delete Sass._files[path];

      // undo symlink for absolute path resolution
      if (_absolute && FS.lstat(filename)) {
        FS.unlink(filename);
      }

      callback && callback(true);
    } catch(e) {
      callback && callback(false);
    }
  },

  clearFiles: function(callback) {
    Sass.listFiles(function(list) {
      list.forEach(function(file) {
        Sass.removeFile(file);
      });

      callback && callback();
    });
  },

  _handleFiles: function(base, directory, files, callback) {
    var _root = Sass._absolutePath(directory || '');
    _root = addTrailingSlash(_root);
    base = addTrailingSlash(base);

    return files.map(function(file) {
      file = stripLeadingSlash(file);

      var parts = file.split('/');
      var _file = parts.pop();
      var _path = _root + parts.join('/');
      _path = addTrailingSlash(_path);

      return callback(_path, _file, base + file);
    }, Sass);
  },

  _handleLazyFile: function(path, file, url) {
    Sass._ensurePath(path + file);
    FS.createLazyFile(path, file, url, true, false);
  },

  _preloadingFiles: 0,
  _preloadingFilesCallback: null,
  _handlePreloadFile: function(path, file, url) {
    Sass._ensurePath(path + file);

    Sass._preloadingFiles++;
    var request = new XMLHttpRequest();
    request.onload = function() {
      Sass.writeFile(path.slice(Sass._path.length) + file, this.responseText);

      Sass._preloadingFiles--;
      if (!Sass._preloadingFiles) {
        Sass._preloadingFilesCallback();
        Sass._preloadingFilesCallback = null;
      }
    };

    request.open('get', url, true);
    request.send();
  },

  lazyFiles: function(base, directory, files, callback) {
    Sass._handleFiles(base, directory, files, Sass._handleLazyFile);
    callback && callback();
  },

  preloadFiles: function(base, directory, files, callback) {
    Sass._preloadingFilesCallback = callback || noop;
    Sass._handleFiles(base, directory, files, Sass._handlePreloadFile);
  },


  // allow concurrent task registration, even though we can only execute them in sequence
  _compileQueue: [],
  compile: function(text, _options, callback, _compileFile) {
    if (typeof _options === 'function') {
      callback = _options;
      _options = null;
    }

    if (!callback) {
      throw new Error('Sass.compile() requires callback function as second (or third) parameter!');
    }

    if (_options !== null && typeof _options !== 'object') {
      throw new Error('Sass.compile() requires second argument to be an object (options) or a function (callback)');
    }

    var _previousOptions = null;
    var done = function done(result) {
      var _cleanup = function() {
        // we're done, the next invocation may come
        Sass._sassCompileEmscriptenSuccess = null;
        Sass._sassCompileEmscriptenError = null;
        // we may have buffered compile() calls during execution,
        Sass._compileNext();
      };
      var _done = function() {
        // reset options to what they were before they got temporarily overwritten
        _previousOptions && Sass.options(_previousOptions);
        // make sure we cleanup regardless of what happenes in the callback
        (typeof setImmediate !== 'undefined' ? setImmediate : setTimeout)(_cleanup);
        // announce we're done while still buffering incoming compile() calls
        callback(result);
      };

      // give emscripten a chance to finish the C function and clean up
      // before we resume our JavaScript duties
      (typeof setImmediate !== 'undefined' ? setImmediate : setTimeout)(_done);
    };

    // only one Sass.compile() can run concurrently, wait for the currently running task to finish!
    // Also we need to delay .compile() to when emscripten is ready (if not already the case)
    // doing this *after* the initial sanity checks to maintain API behavior
    // in respect to when/how exceptions are thrown
    if (Sass._sassCompileEmscriptenSuccess || !Sass._initialized) {
      Sass._compileQueue.push([text, _options, callback, _compileFile]);
      return;
    }

    try {
      // temporarily - for the duration of this .compile() - overwrite options
      if (_options) {
        _previousOptions = Sass._cloneOptions();
        Sass.options(_options);
      }

      Sass._sassCompileEmscriptenSuccess = function(result, map, files) {
        done({
          status: 0,
          text: result,
          map: map,
          files: files,
        });
      };

      Sass._sassCompileEmscriptenError = function(error, message) {
        var result = error || {};
        result.formatted = message;
        done(result);
      };

      Module.ccall(
        // C function to call
        'sass_compile_emscripten',
        // return type
        null,
        // parameter types
        [
          'string',
          'string',
          'bool',
          'bool',
        ].concat(options.map(function(option) {
          return option.type;
        })),
        // arguments for invocation
        [
          text,
          Sass._path,
          Number(Boolean(_compileFile)),
          Number(Boolean(Sass._importer)),
        ].concat(options.map(function(option) {
          return Sass._options[option.key];
        })),
        // we're not expecting synchronous return value
        { async: true }
      );
    } catch(e) {
      done({
        status: 99,
        line: null,
        message: e.message,
        error: e
      });
    }
  },
  compileFile: function(filename, _options, callback) {
    var path = Sass._absolutePath(filename);
    if (typeof _options === 'function') {
      callback = _options;
      _options = {};
    }

    _options.sourceMapRoot = path;
    _options.inputPath = path;

    return Sass.compile(path, _options, callback, true);
  },
};

// register options maintained in sass.options.js
options.forEach(function(option) {
  Sass._options[option.key] = Sass._defaultOptions[option.key] = option.initial;
  Sass._optionTypes[option.key] = option.coerce;
});

/*global PATH, Sass*/
/*jshint strict:false*/

function isAbsolutePath (path) {
  return path[0] === '/';
}

Sass.getPathVariations = function(path) {
  // [importer,include_path] this is where we would add the ability to
  // examine the include_path (if we ever use that in Sass.js)
  path = PATH.normalize(path);
  var directory = PATH.dirname(path);
  var basename = PATH.basename(path);
  var extensions = ['.scss', '.sass', '.css'];
  // basically what is done by resolve_and_load() in file.cpp
  // Resolution order for ambiguous imports:
  var list = [
    // (1) filename as given
    path,
    // (2) underscore + given
    PATH.resolve(directory, '_' + basename)
  ].concat(extensions.map(function(extension) {
    // (3) underscore + given + extension
    return PATH.resolve(directory, '_' + basename + extension);
  })).concat(extensions.map(function(extension) {
    // (4) given + extension
    return PATH.resolve(directory, basename + extension);
  }));

  if (!isAbsolutePath(path)) {
    // PATH.resolve() makes everything absolute, revert that
    list = list.map(function(item) {
      return isAbsolutePath(item)
        ? item.slice(1)
        : item;
    });
  }

  return list;
};

Sass.findPathVariation = function(stat, path) {
  return Sass.getPathVariations(path).reduce(function(found, path) {
    if (found) {
      return found;
    }

    try {
      stat(path);
      return path;
    } catch(e) {
      return null;
    }
  }, null);
};
return Sass;
}));