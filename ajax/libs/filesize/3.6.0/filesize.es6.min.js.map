{"version":3,"sources":["filesize.es6.js"],"names":["Math","pow","floor","log","isNaN","Error","bits","unix","base","round","separator","spacer","symbols","suffixes","standard","output","fullform","fullforms","Array","exponent","toFixed","charAt","replace","test","value","suffix","symbol","length","toString","join","iec","bytes","jedec","partial","exports","define","amd","filesize","module","window","global"],"mappings":"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","file":"unknown","sourcesContent":["/**\r\n * filesize\r\n *\r\n * @copyright 2018 Jason Mulligan <jason.mulligan@avoidwork.com>\r\n * @license BSD-3-Clause\r\n * @version 3.6.0\r\n */\r\n(function (global) {\r\n\tconst b = /^(b|B)$/,\r\n\t\tsymbol = {\r\n\t\t\tiec: {\r\n\t\t\t\tbits: [\"b\", \"Kib\", \"Mib\", \"Gib\", \"Tib\", \"Pib\", \"Eib\", \"Zib\", \"Yib\"],\r\n\t\t\t\tbytes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"]\r\n\t\t\t},\r\n\t\t\tjedec: {\r\n\t\t\t\tbits: [\"b\", \"Kb\", \"Mb\", \"Gb\", \"Tb\", \"Pb\", \"Eb\", \"Zb\", \"Yb\"],\r\n\t\t\t\tbytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\r\n\t\t\t}\r\n\t\t},\r\n\t\tfullform = {\r\n\t\t\tiec: [\"\", \"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\r\n\t\t\tjedec: [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]\r\n\t\t};\r\n\r\n\t/**\r\n\t * filesize\r\n\t *\r\n\t * @method filesize\r\n\t * @param  {Mixed}   arg        String, Int or Float to transform\r\n\t * @param  {Object}  descriptor [Optional] Flags\r\n\t * @return {String}             Readable file size String\r\n\t */\r\n\tfunction filesize (arg, descriptor = {}) {\r\n\t\tlet result = [],\r\n\t\t\tval = 0,\r\n\t\t\te, base, bits, ceil, full, fullforms, neg, num, output, round, unix, separator, spacer, standard, symbols;\r\n\r\n\t\tif (isNaN(arg)) {\r\n\t\t\tthrow new Error(\"Invalid arguments\");\r\n\t\t}\r\n\r\n\t\tbits = descriptor.bits === true;\r\n\t\tunix = descriptor.unix === true;\r\n\t\tbase = descriptor.base || 2;\r\n\t\tround = descriptor.round !== void 0 ? descriptor.round : unix ? 1 : 2;\r\n\t\tseparator = descriptor.separator !== void 0 ? descriptor.separator || \"\" : \"\";\r\n\t\tspacer = descriptor.spacer !== void 0 ? descriptor.spacer : unix ? \"\" : \" \";\r\n\t\tsymbols = descriptor.symbols || descriptor.suffixes || {};\r\n\t\tstandard = base === 2 ? descriptor.standard || \"jedec\" : \"jedec\";\r\n\t\toutput = descriptor.output || \"string\";\r\n\t\tfull = descriptor.fullform === true;\r\n\t\tfullforms = descriptor.fullforms instanceof Array ? descriptor.fullforms : [];\r\n\t\te = descriptor.exponent !== void 0 ? descriptor.exponent : -1;\r\n\t\tnum = Number(arg);\r\n\t\tneg = num < 0;\r\n\t\tceil = base > 2 ? 1000 : 1024;\r\n\r\n\t\t// Flipping a negative number to determine the size\r\n\t\tif (neg) {\r\n\t\t\tnum = -num;\r\n\t\t}\r\n\r\n\t\t// Determining the exponent\r\n\t\tif (e === -1 || isNaN(e)) {\r\n\t\t\te = Math.floor(Math.log(num) / Math.log(ceil));\r\n\r\n\t\t\tif (e < 0) {\r\n\t\t\t\te = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Exceeding supported length, time to reduce & multiply\r\n\t\tif (e > 8) {\r\n\t\t\te = 8;\r\n\t\t}\r\n\r\n\t\t// Zero is now a special case because bytes divide by 1\r\n\t\tif (num === 0) {\r\n\t\t\tresult[0] = 0;\r\n\t\t\tresult[1] = unix ? \"\" : symbol[standard][bits ? \"bits\" : \"bytes\"][e];\r\n\t\t} else {\r\n\t\t\tval = num / (base === 2 ? Math.pow(2, e * 10) : Math.pow(1000, e));\r\n\r\n\t\t\tif (bits) {\r\n\t\t\t\tval = val * 8;\r\n\r\n\t\t\t\tif (val >= ceil && e < 8) {\r\n\t\t\t\t\tval = val / ceil;\r\n\t\t\t\t\te++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tresult[0] = Number(val.toFixed(e > 0 ? round : 0));\r\n\t\t\tresult[1] = base === 10 && e === 1 ? bits ? \"kb\" : \"kB\" : symbol[standard][bits ? \"bits\" : \"bytes\"][e];\r\n\r\n\t\t\tif (unix) {\r\n\t\t\t\tresult[1] = standard === \"jedec\" ? result[1].charAt(0) : e > 0 ? result[1].replace(/B$/, \"\") : result[1];\r\n\r\n\t\t\t\tif (b.test(result[1])) {\r\n\t\t\t\t\tresult[0] = Math.floor(result[0]);\r\n\t\t\t\t\tresult[1] = \"\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Decorating a 'diff'\r\n\t\tif (neg) {\r\n\t\t\tresult[0] = -result[0];\r\n\t\t}\r\n\r\n\t\t// Applying custom symbol\r\n\t\tresult[1] = symbols[result[1]] || result[1];\r\n\r\n\t\t// Returning Array, Object, or String (default)\r\n\t\tif (output === \"array\") {\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tif (output === \"exponent\") {\r\n\t\t\treturn e;\r\n\t\t}\r\n\r\n\t\tif (output === \"object\") {\r\n\t\t\treturn {value: result[0], suffix: result[1], symbol: result[1]};\r\n\t\t}\r\n\r\n\t\tif (full) {\r\n\t\t\tresult[1] = fullforms[e] ? fullforms[e] : fullform[standard][e] + (bits ? \"bit\" : \"byte\") + (result[0] === 1 ? \"\" : \"s\");\r\n\t\t}\r\n\r\n\t\tif (separator.length > 0) {\r\n\t\t\tresult[0] = result[0].toString().replace(\".\", separator);\r\n\t\t}\r\n\r\n\t\treturn result.join(spacer);\r\n\t}\r\n\r\n\t// Partial application for functional programming\r\n\tfilesize.partial = opt => arg => filesize(arg, opt);\r\n\r\n\t// CommonJS, AMD, script tag\r\n\tif (typeof exports !== \"undefined\") {\r\n\t\tmodule.exports = filesize;\r\n\t} else if (typeof define === \"function\" && define.amd) {\r\n\t\tdefine(() => {\r\n\t\t\treturn filesize;\r\n\t\t});\r\n\t} else {\r\n\t\tglobal.filesize = filesize;\r\n\t}\r\n}(typeof window !== \"undefined\" ? window : global));\r\n"]}