{"version":3,"sources":["../src/index.js"],"names":["outdent","str","replace","RegExp","match","encodeAttr","parse","md","tag","token","norm","end","context","length","desc","TAGS","flush","let","i","chunk","prev","inner","t","tokenizer","out","last","links","s","name","url","toLowerCase","exec","substring","index","lastIndex","charAt","trim","const","_","__","\n\n",">","*","#"],"mappings":"wKAYA,QAASA,GAAQC,GAChB,MAAOA,GAAIC,QAAQC,OAAO,KAAKF,EAAIG,MAAM,aAAe,IAAI,GAAI,MAAO,IAMxE,QAASC,GAAWJ,GACnB,MAAOA,GAAIC,QAAQ,KAAM,UAG1B,QAAwBI,GAAMC,GAS7B,QAASC,GAAIC,GACZ,GAAIC,GAAOD,EAAMP,QAAQ,MAAM,KAAKA,QAAQ,uBAAuB,QAClES,EAAMC,EAAQA,EAAQC,OAAO,KAAKJ,EAClCK,EAAOC,EAAKL,EACb,OAAKI,GACAA,EAAK,IACVF,EAAQD,EAAI,MAAM,QAAQF,GACnBK,EAAMH,EAAM,EAAI,IAFFG,EAAK,GADRL,EAMnB,QAASO,KAER,IAAKC,GADDhB,GAAM,GACDiB,EAAEN,EAAQC,OAAQK,KAC1BjB,GAAOO,EAAII,EAAQM,GAEpB,OAAOjB,GAtBRgB,GAKCE,GAAOC,EAAMX,EAAOY,EAAOC,EALxBC,EAAY,2SACfX,KACAY,EAAM,GACNC,EAAO,EACPC,IA0BD,KALAnB,EAAKA,EAAGL,QAAQ,aAAc,IAAIA,QAAQ,wBAAyB,SAACyB,EAAGC,EAAMC,GAE5E,MADAH,GAAME,EAAKE,eAAiBD,EACrB,KAGCpB,EAAMc,EAAUQ,KAAKxB,IAC7Ba,EAAOb,EAAGyB,UAAUP,EAAMhB,EAAMwB,OAChCR,EAAOF,EAAUW,UACjBf,EAAQV,EAAM,GACVW,EAAKhB,MAAM,qBAINK,EAAM,IAAMA,EAAM,GAC1BU,EAAQ,qBAAqBV,EAAM,GAAG,SAASA,EAAM,GAAGqB,eAAe,KAAK9B,GAASS,EAAM,IAAMA,EAAM,IAAIP,QAAQ,aAAc,KAAK,SAG9HO,EAAM,IACda,EAAIb,EAAM,GACiB,MAAvBa,EAAEa,OAAOb,EAAET,OAAO,KACrBS,EAAI,IACJb,EAAM,GAAKA,EAAM,GAAGP,QAAQ,SAAU,KAEvCmB,EAAQf,EAAMN,EAAQS,EAAM,GAAGP,QAAQ,gBAAiB,MAChD,MAAJoB,IACHA,EAAQ,MAAJA,EAAU,IAAM,IACpBD,EAAQA,EAAMnB,QAAQ,gBAAiB,gBAExCiB,EAAQJ,EAAKO,GAAG,GAAKD,EAAQN,EAAKO,GAAG,IAG7Bb,EAAM,GACdU,EAAQ,aAAad,EAAWI,EAAM,IAAG,UAAUJ,EAAWI,EAAM,IAAG,KAG/DA,EAAM,IACde,EAAMA,EAAItB,QAAQ,MAAO,YAAYG,EAAWI,EAAM,KAAOiB,EAAMN,EAAKU,gBAAe,MACvFX,EAAQH,IAAU,QAEVP,EAAM,GACdU,EAAQ,MAGAV,EAAM,KAAOA,EAAM,KAC3Ba,EAAI,KAAOb,EAAM,IAAMA,EAAM,IAAII,OAAyB,MAAfJ,EAAM,IAAI,GAAS,EAAE,GAChEU,EAAQ,IAAIG,EAAE,IAAMhB,EAAMG,EAAM,KAAOA,EAAM,KAAO,KAAKa,EAAE,KAGnDb,EAAM,IACdU,EAAQ,SAASV,EAAM,IAAI,UAGnBA,EAAM,MACdU,EAAQX,EAAIC,EAAM,OAEnBe,GAAOJ,EACPI,GAAOL,CAGR,QAAQK,EAAMjB,EAAGyB,UAAUP,GAAQT,KAASoB,OA7G7CC,GAAMtB,IACLuB,GAAK,OAAO,SACZC,IAAM,WAAW,aACjBC,QAAU,UACVC,KAAO,eAAe,iBACtBC,KAAO,OAAO,SACdC,KAAO,OAAO","file":"snarkdown.umd.js","sourcesContent":["const TAGS = {\n\t_ : ['<em>','</em>'],\n\t__ : ['<strong>','</strong>'],\n\t'\\n\\n' : ['<br />'],\n\t'>' : ['<blockquote>','</blockquote>'],\n\t'*' : ['<ul>','</ul>'],\n\t'#' : ['<ol>','</ol>']\n};\n\n/** Outdent a string based on the first indented line's leading whitespace\n *\t@private\n */\nfunction outdent(str) {\n\treturn str.replace(RegExp('^'+(str.match(/^(\\t| )+/) || '')[0], 'gm'), '');\n}\n\n/** Encode special attribute characters to HTML entities in a String.\n *\t@private\n */\nfunction encodeAttr(str) {\n\treturn str.replace(/\"/g, '&quot;');\n}\n\nexport default function parse(md) {\n\t// eslint-disable-next-line\n\tlet tokenizer = /(?:^```(\\w*)\\n([\\s\\S]*?)\\n```$)|((?:(?:^|\\n+)(?:\\t|  {2,}).+)+\\n*)|((?:(?:^|\\n)([>*+-]|\\d+\\.)\\s+.*)+)|(?:\\!\\[([^\\]]*?)\\]\\(([^\\)]+?)\\))|(\\[)|(\\](?:\\(([^\\)]+?)\\))?)|(?:(?:^|\\n+)([^\\s].*)\\n(\\-{3,}|={3,})(?:\\n+|$))|(?:(?:^|\\n+)(#{1,3})\\s*(.+)(?:\\n+|$))|(?:`([^`].*?)`)|(  \\n\\n*|\\n{2,}|__|\\*\\*|[_*])/gm,\n\t\tcontext = [],\n\t\tout = '',\n\t\tlast = 0,\n\t\tlinks = {},\n\t\tchunk, prev, token, inner, t;\n\n\tfunction tag(token) {\n\t\tvar norm = token.replace(/\\*/g,'_').replace(/^( {2}\\n\\n*|\\n{2,})/g,'\\n\\n'),\n\t\t\tend = context[context.length-1]===token,\n\t\t\tdesc = TAGS[norm];\n\t\tif (!desc) return token;\n\t\tif (!desc[1]) return desc[0];\n\t\tcontext[end?'pop':'push'](token);\n\t\treturn desc[ end ? 1 : 0 ];\n\t}\n\n\tfunction flush() {\n\t\tlet str = '';\n\t\tfor (let i=context.length; i--; ) {\n\t\t\tstr += tag(context[i]);\n\t\t}\n\t\treturn str;\n\t}\n\n\tmd = md.replace(/^\\n+|\\n+$/g, '').replace(/^\\[(.+?)\\]:\\s*(.+)$/gm, (s, name, url) => {\n\t\tlinks[name.toLowerCase()] = url;\n\t\treturn '';\n\t});\n\n\twhile ( (token=tokenizer.exec(md)) ) {\n\t\tprev = md.substring(last, token.index);\n\t\tlast = tokenizer.lastIndex;\n\t\tchunk = token[0];\n\t\tif (prev.match(/[^\\\\](\\\\\\\\)*\\\\$/)) {\n\t\t\t// escaped\n\t\t}\n\t\t// Code/Indent blocks:\n\t\telse if (token[2] || token[3]) {\n\t\t\tchunk = '<pre class=\"code '+(token[3]?'poetry':token[1].toLowerCase())+'\">'+outdent((token[2] || token[3]).replace(/^\\n+|\\n+$/g, ''))+'</pre>';\n\t\t}\n\t\t// > Quotes, -* lists:\n\t\telse if (token[5]) {\n\t\t\tt = token[5];\n\t\t\tif (t.charAt(t.length-1)==='.') {\n\t\t\t\tt = '.';\n\t\t\t\ttoken[4] = token[4].replace(/^\\d+/gm, '');\n\t\t\t}\n\t\t\tinner = parse(outdent(token[4].replace(/^\\s*[>*+.-]/gm, '')));\n\t\t\tif (t!=='>') {\n\t\t\t\tt = t==='.' ? '#' : '*';\n\t\t\t\tinner = inner.replace(/^(.*)(\\n|$)/gm, '<li>$1</li>');\n\t\t\t}\n\t\t\tchunk = TAGS[t][0] + inner + TAGS[t][1];\n\t\t}\n\t\t// Images:\n\t\telse if (token[7]) {\n\t\t\tchunk = `<img src=\"${encodeAttr(token[7])}\" alt=\"${encodeAttr(token[6])}\">`;\n\t\t}\n\t\t// Links:\n\t\telse if (token[9]) {\n\t\t\tout = out.replace('<a>', `<a href=\"${encodeAttr(token[10] || links[prev.toLowerCase()])}\">`);\n\t\t\tchunk = flush() + '</a>';\n\t\t}\n\t\telse if (token[8]) {\n\t\t\tchunk = '<a>';\n\t\t}\n\t\t// Headings:\n\t\telse if (token[11] || token[13]) {\n\t\t\tt = 'h' + (token[13] ? token[13].length : (token[12][0]==='='?1:2));\n\t\t\tchunk = '<'+t+'>' + parse(token[11] || token[14]) + '</'+t+'>';\n\t\t}\n\t\t// `code`:\n\t\telse if (token[15]) {\n\t\t\tchunk = '<code>'+token[15]+'</code>';\n\t\t}\n\t\t// Inline formatting: *em*, **strong** & friends\n\t\telse if (token[16]) {\n\t\t\tchunk = tag(token[16]);\n\t\t}\n\t\tout += prev;\n\t\tout += chunk;\n\t}\n\n\treturn (out + md.substring(last) + flush()).trim();\n}\n"]}