{"version":3,"sources":["../src/index.js"],"names":["tag","context","token","norm","replace","end","length","desc","TAGS","outdent","str","RegExp","match","encodeAttr","trim","parse","md","let","chunk","prev","inner","t","tokenizer","out","last","links","s","name","url","toLowerCase","exec","substring","index","lastIndex","ESCAPED","test","charAt","pop","const","_","__","\n\n",">","*","#"],"mappings":"wKAcA,QAASA,GAAIC,EAASC,GACrB,GAAIC,GAAOD,EAAME,QAAQ,MAAM,KAAKA,QAAQ,uBAAuB,QAClEC,EAAMJ,EAAQA,EAAQK,OAAO,KAAKJ,EAClCK,EAAOC,EAAKL,EACb,OAAKI,GACDA,EAAK,MAAK,EAAcA,EAAK,IACjCN,EAAQI,EAAI,MAAM,QAAQH,GACnBK,EAAMF,EAAM,EAAI,IAHLH,EASnB,QAASO,GAAQC,GAChB,MAAOA,GAAIN,QAAQ,GAAIO,QAAO,KAAKD,EAAIE,MAAM,aAAe,IAAI,GAAI,MAAO,IAM5E,QAASC,GAAWH,GACnB,MAAOA,GAAIN,QAAQ,KAAM,UAM1B,QAASU,GAAKJ,GACb,MAAOA,GAAIN,QAAQ,aAAc,IAGlC,QAAwBW,GAAMC,GAE7BC,GAKCC,GAAOC,EAAMjB,EAAOkB,EAAOC,EALxBC,EAAY,2SACfrB,KACAsB,EAAM,GACNC,EAAO,EACPC,IAQD,KALAT,EAAKF,EAAKE,GAAIZ,QAAQ,wBAAyB,SAACsB,EAAGC,EAAMC,GAExD,MADAH,GAAME,EAAKE,eAAiBD,EACrB,KAGC1B,EAAMoB,EAAUQ,KAAKd,IAC7BG,EAAOH,EAAGe,UAAUP,EAAMtB,EAAM8B,OAChCR,EAAOF,EAAUW,UACjBf,EAAQhB,EAAM,GACVgC,EAAQC,KAAKhB,KAIRjB,EAAM,IAAMA,EAAM,GAC1BgB,EAAQ,uBAAuBhB,EAAM,GAAG,SAASA,EAAM,GAAG2B,eAAe,KAAKpB,EAAQK,EAAKZ,EAAM,IAAMA,EAAM,KAAK,WAG1GA,EAAM,IACdmB,EAAInB,EAAM,GACiB,MAAvBmB,EAAEe,OAAOf,EAAEf,OAAO,KACrBe,EAAI,IACJnB,EAAM,GAAKA,EAAM,GAAGE,QAAQ,SAAU,KAEvCgB,EAAQL,EAAMN,EAAQP,EAAM,GAAGE,QAAQ,gBAAiB,MAChD,MAAJiB,IACHA,EAAQ,MAAJA,EAAU,IAAM,IACpBD,EAAQA,EAAMhB,QAAQ,WAAY,kBAEnCc,EAAQ,KAAKV,EAAKa,GAAG,GAAG,KAAOD,EAAQ,KAAKZ,EAAKa,GAAG,GAAG,MAG/CnB,EAAM,GACdgB,EAAQ,aAAaL,EAAWX,EAAM,IAAG,UAAUW,EAAWX,EAAM,IAAG,KAG/DA,EAAM,IACdqB,EAAMA,EAAInB,QAAQ,MAAO,YAAYS,EAAWX,EAAM,KAAOuB,EAAMN,EAAKU,gBAAe,MACvFX,EAAQ,QAEAhB,EAAM,GACdgB,EAAQ,MAGAhB,EAAM,KAAOA,EAAM,KAC3BmB,EAAI,KAAOnB,EAAM,IAAMA,EAAM,IAAII,OAAyB,MAAfJ,EAAM,IAAI,GAAS,EAAE,GAChEgB,EAAQ,QAAQG,EAAE,IAAMN,EAAMb,EAAM,KAAOA,EAAM,KAAO,KAAKmB,EAAE,OAGvDnB,EAAM,IACdgB,EAAQ,SAAShB,EAAM,IAAI,UAGnBA,EAAM,MACdgB,EAAQlB,EAAIC,EAASC,EAAM,OAE5BqB,GAAOJ,EACPI,GAAOL,CAKR,KAFAK,GAAOP,EAAGe,UAAUP,GAEZtB,EAAMD,EAAQoC,OACrBd,GAAOvB,EAAIC,EAASC,EAGrB,OAAOY,GAAKS,GAvHbe,GAAM9B,IACL+B,GAAK,OAAO,SACZC,IAAM,WAAW,aACjBC,QAAU,cAAc,GACxBC,KAAO,eAAe,iBACtBC,KAAO,OAAO,SACdC,KAAO,OAAO,UAGTV,EAAU","file":"snarkdown.umd.js","sourcesContent":["const TAGS = {\n\t_ : ['<em>','</em>'],\n\t__ : ['<strong>','</strong>'],\n\t'\\n\\n' : ['<br />\\n\\n', false],\n\t'>' : ['<blockquote>','</blockquote>'],\n\t'*' : ['<ul>','</ul>'],\n\t'#' : ['<ol>','</ol>']\n};\n\nconst ESCAPED = /[^\\\\](\\\\\\\\)*\\\\$/;\n\n/** Given a parser context and a Markdown token, returns an opening or closing tag corresponding to the token's type.\n *\t@private\n */\nfunction tag(context, token) {\n\tvar norm = token.replace(/\\*/g,'_').replace(/^( {2}\\n\\n*|\\n{2,})/g,'\\n\\n'),\n\t\tend = context[context.length-1]===token,\n\t\tdesc = TAGS[norm];\n\tif (!desc) return token;\n\tif (desc[1]===false) return desc[0];\n\tcontext[end?'pop':'push'](token);\n\treturn desc[ end ? 1 : 0 ];\n}\n\n/** Outdent a string based on the first indented line's leading whitespace\n *\t@private\n */\nfunction outdent(str) {\n\treturn str.replace(new RegExp('^'+(str.match(/^(\\t| )+/) || '')[0], 'gm'), '');\n}\n\n/** Encode special attribute characters to HTML entities in a String.\n *\t@private\n */\nfunction encodeAttr(str) {\n\treturn str.replace(/\"/g, '&quot;');\n}\n\n/** Trim leading/trailing newlines only\n *\t@private\n */\nfunction trim(str) {\n\treturn str.replace(/^\\n+|\\n+$/g, '');\n}\n\nexport default function parse(md) {\n\t// eslint-disable-next-line\n\tlet tokenizer = /(?:^```(\\w*)\\n([\\s\\S]*?)\\n```$)|((?:(?:^|\\n+)(?:\\t|  {2,}).+)+\\n*)|((?:(?:^|\\n)([>*+-]|\\d+\\.)\\s+.*)+)|(?:\\!\\[([^\\]]*?)\\]\\(([^\\)]+?)\\))|(\\[)|(\\](?:\\(([^\\)]+?)\\))?)|(?:(?:^|\\n+)([^\\s].*)\\n(\\-{3,}|={3,})(?:\\n+|$))|(?:(?:^|\\n+)(#{1,3})\\s*(.+)(?:\\n+|$))|(?:`([^`].*?)`)|(  \\n\\n*|\\n{2,}|__|\\*\\*|[_*])/gm,\n\t\tcontext = [],\n\t\tout = '',\n\t\tlast = 0,\n\t\tlinks = {},\n\t\tchunk, prev, token, inner, t;\n\n\tmd = trim(md).replace(/^\\[(.+?)\\]:\\s*(.+)$/gm, (s, name, url) => {\n\t\tlinks[name.toLowerCase()] = url;\n\t\treturn '';\n\t});\n\n\twhile ( (token=tokenizer.exec(md)) ) {\n\t\tprev = md.substring(last, token.index);\n\t\tlast = tokenizer.lastIndex;\n\t\tchunk = token[0];\n\t\tif (ESCAPED.test(prev)) {\n\t\t\t// escaped\n\t\t}\n\t\t// Code/Indent blocks:\n\t\telse if (token[2] || token[3]) {\n\t\t\tchunk = '\\n<pre class=\"code '+(token[3]?'poetry':token[1].toLowerCase())+'\">'+outdent(trim(token[2] || token[3]))+'</pre>\\n';\n\t\t}\n\t\t// > Quotes, -* lists:\n\t\telse if (token[5]) {\n\t\t\tt = token[5];\n\t\t\tif (t.charAt(t.length-1)==='.') {\n\t\t\t\tt = '.';\n\t\t\t\ttoken[4] = token[4].replace(/^\\d+/gm, '');\n\t\t\t}\n\t\t\tinner = parse(outdent(token[4].replace(/^\\s*[>*+.-]/gm, '')));\n\t\t\tif (t!=='>') {\n\t\t\t\tt = t==='.' ? '#' : '*';\n\t\t\t\tinner = inner.replace(/^(.*)$/gm, '\\t<li>$1</li>');\n\t\t\t}\n\t\t\tchunk = '\\n'+TAGS[t][0]+'\\n' + inner + '\\n'+TAGS[t][1]+'\\n';\n\t\t}\n\t\t// Images:\n\t\telse if (token[7]) {\n\t\t\tchunk = `<img src=\"${encodeAttr(token[7])}\" alt=\"${encodeAttr(token[6])}\">`;\n\t\t}\n\t\t// Links:\n\t\telse if (token[9]) {\n\t\t\tout = out.replace('<a>', `<a href=\"${encodeAttr(token[10] || links[prev.toLowerCase()])}\">`);\n\t\t\tchunk = '</a>';\n\t\t}\n\t\telse if (token[8]) {\n\t\t\tchunk = '<a>';\n\t\t}\n\t\t// Headings:\n\t\telse if (token[11] || token[13]) {\n\t\t\tt = 'h' + (token[13] ? token[13].length : (token[12][0]==='='?1:2));\n\t\t\tchunk = '\\n\\n<'+t+'>' + parse(token[11] || token[14]) + '</'+t+'>\\n';\n\t\t}\n\t\t// `code`:\n\t\telse if (token[15]) {\n\t\t\tchunk = '<code>'+token[15]+'</code>';\n\t\t}\n\t\t// Inline formatting: *em*, **strong** & friends\n\t\telse if (token[16]) {\n\t\t\tchunk = tag(context, token[16]);\n\t\t}\n\t\tout += prev;\n\t\tout += chunk;\n\t}\n\n\tout += md.substring(last);\n\n\twhile ((token=context.pop())) {\n\t\tout += tag(context, token);\n\t}\n\n\treturn trim(out);\n}\n"]}