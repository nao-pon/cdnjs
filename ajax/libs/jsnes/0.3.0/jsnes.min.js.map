{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///jsnes.min.js","webpack:///webpack/bootstrap fde755bc2c752acfc870","webpack:///./src/utils.js","webpack:///./src/controller.js","webpack:///./src/tile.js","webpack:///./src/index.js","webpack:///./src/nes.js","webpack:///./src/cpu.js","webpack:///./src/ppu.js","webpack:///./src/papu.js","webpack:///./src/rom.js","webpack:///./src/mappers.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","copyArrayElements","src","srcPos","dest","destPos","length","copyArray","Array","fromJSON","obj","state","JSON_PROPERTIES","toJSON","Controller","BUTTON_A","BUTTON_B","BUTTON_SELECT","BUTTON_START","BUTTON_UP","BUTTON_DOWN","BUTTON_LEFT","BUTTON_RIGHT","buttonDown","key","buttonUp","Tile","pix","fbIndex","tIndex","x","y","w","h","incX","incY","palIndex","tpri","initialized","opaque","setBuffer","scanline","setScanline","sline","b1","b2","render","buffer","srcx1","srcy1","srcx2","srcy2","dx","dy","palAdd","palette","flipHorizontal","flipVertical","pri","priTable","isTransparent","NES","CPU","PPU","PAPU","ROM","opts","onFrame","onAudioSample","onStatusUpdate","preferredFrameRate","emulateSound","sampleRate","frameTime","ui","writeFrame","updateStatus","cpu","ppu","papu","mmap","controllers","1","2","frame","bind","zapperMove","zapperFireDown","zapperFireUp","fpsFrameCount","romData","reset","lastFpsTime","startFrame","cycles","FRAMELOOP","cyclesToHalt","emulate","clockFrameCounter","curX","spr0HitX","f_spVisibility","spr0HitY","setStatusFlag","STATUS_SPRITE0HIT","requestEndFrame","nmiCounter","startVBlank","endScanline","controller","button","zapperX","zapperY","zapperFired","getFPS","now","Date","fps","reloadROM","loadROM","data","rom","load","createMapper","setMirroring","getMirroringType","setFramerate","rate","setSampleRate","utils","nes","mem","REG_ACC","REG_X","REG_Y","REG_SP","REG_PC","REG_PC_NEW","REG_STATUS","F_CARRY","F_DECIMAL","F_INTERRUPT","F_INTERRUPT_NEW","F_OVERFLOW","F_SIGN","F_ZERO","F_NOTUSED","F_NOTUSED_NEW","F_BRK","F_BRK_NEW","opdata","crash","irqRequested","irqType","IRQ_NORMAL","IRQ_NMI","IRQ_RESET","j","k","setStatus","OpData","temp","add","doIrq","doNonMaskableInterrupt","doResetInterrupt","opinf","cycleCount","cycleAdd","addrMode","opaddr","addr","load16bit","write","push","pull","stackWrap","stop","crashMessage","toString","val","requestIrq","type","value","pageCrossed","addr1","addr2","haltCycles","status","getStatus","st","setOp","INS_ADC","ADDR_IMM","ADDR_ZP","ADDR_ZPX","ADDR_ABS","ADDR_ABSX","ADDR_ABSY","ADDR_PREIDXIND","ADDR_POSTIDXIND","INS_AND","INS_ASL","ADDR_ACC","INS_BCC","ADDR_REL","INS_BCS","INS_BEQ","INS_BIT","INS_BMI","INS_BNE","INS_BPL","INS_BRK","ADDR_IMP","INS_BVC","INS_BVS","INS_CLC","INS_CLD","INS_CLI","INS_CLV","INS_CMP","INS_CPX","INS_CPY","INS_DEC","INS_DEX","INS_DEY","INS_EOR","INS_INC","INS_INX","INS_INY","INS_JMP","ADDR_INDABS","INS_JSR","INS_LDA","INS_LDX","ADDR_ZPY","INS_LDY","INS_LSR","INS_NOP","INS_ORA","INS_PHA","INS_PHP","INS_PLA","INS_PLP","INS_ROL","INS_ROR","INS_RTI","INS_RTS","INS_SBC","INS_SEC","INS_SED","INS_SEI","INS_STA","INS_STX","INS_STY","INS_TAX","INS_TAY","INS_TSX","INS_TXA","INS_TXS","INS_TYA","cycTable","instname","addrDesc","INS_DUMMY","inst","op","size","vramMem","spriteMem","vramAddress","vramTmpAddress","vramBufferedReadValue","firstWrite","sramAddress","currentMirroring","nmiOk","dummyCycleToggle","validTileData","scanlineAlreadyRendered","f_nmiOnVblank","f_spriteSize","f_bgPatternTable","f_spPatternTable","f_addrInc","f_nTblAddress","f_color","f_bgVisibility","f_spClipping","f_bgClipping","f_dispType","cntFV","cntV","cntH","cntVT","cntHT","regFV","regV","regH","regVT","regHT","regFH","regS","curNt","attrib","bgbuffer","pixrendered","scantile","lastRenderedScanline","sprX","sprY","sprTile","sprCol","vertFlip","horiFlip","bgPriority","hitSpr0","sprPalette","imgPalette","ptTile","ntable1","nameTable","vramMirrorTable","palTable","showSpr0Hit","clipToTvSize","STATUS_VRAMWRITE","STATUS_SLSPRITECOUNT","STATUS_VBLANK","NameTable","PaletteTable","loadNTSCPalette","updateControlReg1","updateControlReg2","mirroring","triggerRendering","defineMirrorRegion","HORIZONTAL_MIRRORING","VERTICAL_MIRRORING","SINGLESCREEN_MIRRORING","SINGLESCREEN_MIRRORING2","fromStart","toStart","renderFramePartially","endFrame","renderBgScanline","checkSprite0","clockIrqCounter","regsToAddress","cntsToAddress","bgColor","setEmphasis","updatePalettes","flag","readStatusRegister","tmp","writeSRAMAddress","address","sramLoad","sramWrite","spriteRamWriteUpdate","scrollWrite","writeVRAMAddress","latchAccess","vramLoad","mirroredLoad","cntsFromAddress","regsFromAddress","vramWrite","mirroredWrite","writeMem","sramDMA","baseAddress","incTileCounter","count","Error","startScan","scanCount","renderSpritesPartially","si","ei","destIndex","scan","baseTile","t","tpix","att","col","tscanoffset","targetBuffer","tile","getTileIndex","getAttrib","sx","startscan","scancount","bgPri","top","toffset","bufferIndex","tIndexAdd","patternWrite","nameTableWrite","attribTableWrite","getEntry","tileIndex","Math","floor","leftOver","index","writeAttrib","doNMI","isPixelWhite","width","height","tx","ty","basex","basey","sqy","sqx","curTable","emphTable","currentEmph","makeTables","loadPALPalette","r","g","b","rFactor","gFactor","bFactor","emph","getRed","getGreen","getBlue","getRgb","yiq","rgb","loadDefaultPalette","square1","ChannelSquare","square2","triangle","ChannelTriangle","noise","ChannelNoise","dmc","ChannelDM","frameIrqCounter","frameIrqCounterMax","initCounter","channelEnableValue","lengthLookup","dmcFreqLookup","noiseWavelengthLookup","square_table","tnd_table","frameIrqEnabled","frameIrqActive","frameClockNow","startedPlaying","recordOutput","initingHardware","masterFrameCounter","derivedFrameCounter","countSequence","sampleTimer","sampleTimerMax","sampleCount","triValue","smpSquare1","smpSquare2","smpTriangle","smpDmc","accCount","prevSampleL","prevSampleR","smpAccumL","smpAccumR","dacRange","dcValue","masterVolume","stereoPosLSquare1","stereoPosLSquare2","stereoPosLTriangle","stereoPosLNoise","stereoPosLDMC","stereoPosRSquare1","stereoPosRSquare2","stereoPosRTriangle","stereoPosRNoise","stereoPosRDMC","extraCycles","maxSample","minSample","panning","setPanning","initLengthLookup","initDmcFrequencyLookup","initNoiseWavelengthLookup","initDACtables","writeReg","updateChannelEnable","resetCounter","readReg","getLengthStatus","getIrqStatus","irqGenerated","frameCounterTick","setEnabled","nCycles","maxCycles","isEnabled","shiftCounter","dmaFrequency","clockDmc","progTimerMax","progTimerCount","linearCounter","lengthCounter","triangleCounter","sampleValue","squareCounter","updateSampleValue","acc_c","accValue","shiftReg","randomMode","randomBit","accSample","sample","sampleCondition","clockLengthCounter","clockSweep","clockEnvDecay","clockLinearCounter","sq_index","tnd_index","smpNoise","sampleValueL","sampleValueR","smpDiffL","smpDiffR","getLengthMax","getDmcFrequency","getNoiseWaveLength","pos","updateStereoPos","setMasterVolume","ival","max_sqr","max_tnd","MODE_NORMAL","MODE_LOOP","MODE_IRQ","hasSample","playMode","dmaCounter","deltaCounter","playStartAddress","playAddress","playLength","playLengthCounter","reg4012","reg4013","dacLsb","endOfSample","nextSample","envDecayDisable","envDecayLoopEnable","lengthCounterEnable","envReset","shiftNow","envDecayRate","envDecayCounter","envVolume","dutyLookup","impLookup","sqr1","sweepActive","sweepCarry","updateSweepPeriod","sweepCounter","sweepCounterMax","sweepMode","sweepShiftAmount","dutyMode","sweepResult","vol","addrAdd","lcHalt","lcControl","lcLoadValue","updateSampleCondition","clockProgrammableTimer","clockTriangleGenerator","Mappers","mapperName","FOURSCREEN_MIRRORING","SINGLESCREEN_MIRRORING3","SINGLESCREEN_MIRRORING4","CHRROM_MIRRORING","header","vrom","vromTile","romCount","vromCount","batteryRam","trainer","fourScreen","mapperType","valid","v","indexOf","charCodeAt","foundError","offset","getMapperName","mapperSupported","joy1StrobeState","joy2StrobeState","joypadLastWrite","regWrite","writelow","regLoad","joy1Read","joy2Read","ret","loadPRGROM","loadCHRROM","loadBatteryRam","loadRomBank","loadVromBank","ram","bank","load32kRomBank","load8kVromBank","bank4kStart","load1kVromBank","bank1k","bank4k","bankoffset","baseIndex","load2kVromBank","bank2k","load8kRomBank","bank8k","bank16k","apply","regBuffer","regBufferCounter","oneScreenMirroring","prgSwitchingArea","prgSwitchingSize","vromSwitchingSize","romSelectionReg0","romSelectionReg1","romBankSelect","arguments","getRegNumber","setReg","reg","baseBank","switchLowHighPrgRom","oldSetting","switch16to32","switch32to16","CMD_SEL_2_1K_VROM_0000","CMD_SEL_2_1K_VROM_0800","CMD_SEL_1K_VROM_1000","CMD_SEL_1K_VROM_1400","CMD_SEL_1K_VROM_1800","CMD_SEL_1K_VROM_1C00","CMD_SEL_ROM_PAGE1","CMD_SEL_ROM_PAGE2","command","prgAddressSelect","chrAddressSelect","pageNumber","irqCounter","irqLatchValue","irqEnable","prgAddressChanged","executeCommand","cmd","arg","prg_size","chr_size","sram_we_a","sram_we_b","graphic_mode","nametable_mode","nametable_type","fill_chr","fill_pal","SetBank_SRAM","SetBank_CPU","chr_mode","chr_page","SetBank_PPU","split_control","split_scroll","split_page","irq_line","ClearIRQ","irq_enable","mult_a","mult_b","exWrite","irq_status","prgbank1","prgbank2","console","log"],"mappings":"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","file":"jsnes.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jsnes\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsnes\"] = factory();\n\telse\n\t\troot[\"jsnes\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jsnes\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsnes\"] = factory();\n\telse\n\t\troot[\"jsnes\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 3);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = {\n  copyArrayElements: function(src, srcPos, dest, destPos, length) {\n    for (var i = 0; i < length; ++i) {\n      dest[destPos + i] = src[srcPos + i];\n    }\n  },\n\n  copyArray: function(src) {\n    var dest = new Array(src.length);\n    for (var i = 0; i < src.length; i++) {\n      dest[i] = src[i];\n    }\n    return dest;\n  },\n\n  fromJSON: function(obj, state) {\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\n      obj[obj.JSON_PROPERTIES[i]] = state[obj.JSON_PROPERTIES[i]];\n    }\n  },\n\n  toJSON: function(obj) {\n    var state = {};\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\n      state[obj.JSON_PROPERTIES[i]] = obj[obj.JSON_PROPERTIES[i]];\n    }\n    return state;\n  }\n};\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nvar Controller = function() {\n  this.state = new Array(8);\n  for (var i = 0; i < this.state.length; i++) {\n    this.state[i] = 0x40;\n  }\n};\n\nController.BUTTON_A = 0;\nController.BUTTON_B = 1;\nController.BUTTON_SELECT = 2;\nController.BUTTON_START = 3;\nController.BUTTON_UP = 4;\nController.BUTTON_DOWN = 5;\nController.BUTTON_LEFT = 6;\nController.BUTTON_RIGHT = 7;\n\nController.prototype = {\n  buttonDown: function(key) {\n    this.state[key] = 0x41;\n  },\n\n  buttonUp: function(key) {\n    this.state[key] = 0x40;\n  }\n};\n\nmodule.exports = Controller;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nvar Tile = function() {\n  // Tile data:\n  this.pix = new Array(64);\n\n  this.fbIndex = null;\n  this.tIndex = null;\n  this.x = null;\n  this.y = null;\n  this.w = null;\n  this.h = null;\n  this.incX = null;\n  this.incY = null;\n  this.palIndex = null;\n  this.tpri = null;\n  this.c = null;\n  this.initialized = false;\n  this.opaque = new Array(8);\n};\n\nTile.prototype = {\n  setBuffer: function(scanline) {\n    for (this.y = 0; this.y < 8; this.y++) {\n      this.setScanline(this.y, scanline[this.y], scanline[this.y + 8]);\n    }\n  },\n\n  setScanline: function(sline, b1, b2) {\n    this.initialized = true;\n    this.tIndex = sline << 3;\n    for (this.x = 0; this.x < 8; this.x++) {\n      this.pix[this.tIndex + this.x] =\n        ((b1 >> (7 - this.x)) & 1) + (((b2 >> (7 - this.x)) & 1) << 1);\n      if (this.pix[this.tIndex + this.x] === 0) {\n        this.opaque[sline] = false;\n      }\n    }\n  },\n\n  render: function(\n    buffer,\n    srcx1,\n    srcy1,\n    srcx2,\n    srcy2,\n    dx,\n    dy,\n    palAdd,\n    palette,\n    flipHorizontal,\n    flipVertical,\n    pri,\n    priTable\n  ) {\n    if (dx < -7 || dx >= 256 || dy < -7 || dy >= 240) {\n      return;\n    }\n\n    this.w = srcx2 - srcx1;\n    this.h = srcy2 - srcy1;\n\n    if (dx < 0) {\n      srcx1 -= dx;\n    }\n    if (dx + srcx2 >= 256) {\n      srcx2 = 256 - dx;\n    }\n\n    if (dy < 0) {\n      srcy1 -= dy;\n    }\n    if (dy + srcy2 >= 240) {\n      srcy2 = 240 - dy;\n    }\n\n    if (!flipHorizontal && !flipVertical) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 0;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              //console.log(\"Rendering upright tile to buffer\");\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex++;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n      }\n    } else if (flipHorizontal && !flipVertical) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 7;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex--;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n        this.tIndex += 16;\n      }\n    } else if (flipVertical && !flipHorizontal) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 56;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex++;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n        this.tIndex -= 16;\n      }\n    } else {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 63;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex--;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n      }\n    }\n  },\n\n  isTransparent: function(x, y) {\n    return this.pix[(y << 3) + x] === 0;\n  },\n\n  toJSON: function() {\n    return {\n      opaque: this.opaque,\n      pix: this.pix\n    };\n  },\n\n  fromJSON: function(s) {\n    this.opaque = s.opaque;\n    this.pix = s.pix;\n  }\n};\n\nmodule.exports = Tile;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = {\n  Controller: __webpack_require__(1),\n  NES: __webpack_require__(4),\n};\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar CPU = __webpack_require__(5);\nvar Controller = __webpack_require__(1);\nvar PPU = __webpack_require__(6);\nvar PAPU = __webpack_require__(7);\nvar ROM = __webpack_require__(8);\n\nvar NES = function(opts) {\n  this.opts = {\n    onFrame: function() {},\n    onAudioSample: null,\n    onStatusUpdate: function() {},\n\n    // FIXME: not actually used except for in PAPU\n    preferredFrameRate: 60,\n\n    emulateSound: true,\n    sampleRate: 44100 // Sound sample rate in hz\n  };\n  if (typeof opts !== \"undefined\") {\n    var key;\n    for (key in this.opts) {\n      if (typeof opts[key] !== \"undefined\") {\n        this.opts[key] = opts[key];\n      }\n    }\n  }\n\n  this.frameTime = 1000 / this.opts.preferredFrameRate;\n\n  this.ui = {\n    writeFrame: this.opts.onFrame,\n    updateStatus: this.opts.onStatusUpdate\n  };\n  this.cpu = new CPU(this);\n  this.ppu = new PPU(this);\n  this.papu = new PAPU(this);\n  this.mmap = null; // set in loadROM()\n  this.controllers = {\n    1: new Controller(),\n    2: new Controller(),\n  };\n\n  this.ui.updateStatus(\"Ready to load a ROM.\");\n\n  this.frame = this.frame.bind(this);\n  this.buttonDown = this.buttonDown.bind(this);\n  this.buttonUp = this.buttonUp.bind(this);\n  this.zapperMove = this.zapperMove.bind(this);\n  this.zapperFireDown = this.zapperFireDown.bind(this);\n  this.zapperFireUp = this.zapperFireUp.bind(this);\n};\n\nNES.prototype = {\n  fpsFrameCount: 0,\n  romData: null,\n\n  // Resets the system\n  reset: function() {\n    if (this.mmap !== null) {\n      this.mmap.reset();\n    }\n\n    this.cpu.reset();\n    this.ppu.reset();\n    this.papu.reset();\n\n    this.lastFpsTime = null;\n    this.fpsFrameCount = 0;\n  },\n\n  frame: function() {\n    this.ppu.startFrame();\n    var cycles = 0;\n    var emulateSound = this.opts.emulateSound;\n    var cpu = this.cpu;\n    var ppu = this.ppu;\n    var papu = this.papu;\n    FRAMELOOP: for (;;) {\n      if (cpu.cyclesToHalt === 0) {\n        // Execute a CPU instruction\n        cycles = cpu.emulate();\n        if (emulateSound) {\n          papu.clockFrameCounter(cycles);\n        }\n        cycles *= 3;\n      } else {\n        if (cpu.cyclesToHalt > 8) {\n          cycles = 24;\n          if (emulateSound) {\n            papu.clockFrameCounter(8);\n          }\n          cpu.cyclesToHalt -= 8;\n        } else {\n          cycles = cpu.cyclesToHalt * 3;\n          if (emulateSound) {\n            papu.clockFrameCounter(cpu.cyclesToHalt);\n          }\n          cpu.cyclesToHalt = 0;\n        }\n      }\n\n      for (; cycles > 0; cycles--) {\n        if (\n          ppu.curX === ppu.spr0HitX &&\n          ppu.f_spVisibility === 1 &&\n          ppu.scanline - 21 === ppu.spr0HitY\n        ) {\n          // Set sprite 0 hit flag:\n          ppu.setStatusFlag(ppu.STATUS_SPRITE0HIT, true);\n        }\n\n        if (ppu.requestEndFrame) {\n          ppu.nmiCounter--;\n          if (ppu.nmiCounter === 0) {\n            ppu.requestEndFrame = false;\n            ppu.startVBlank();\n            break FRAMELOOP;\n          }\n        }\n\n        ppu.curX++;\n        if (ppu.curX === 341) {\n          ppu.curX = 0;\n          ppu.endScanline();\n        }\n      }\n    }\n    this.fpsFrameCount++;\n  },\n\n  buttonDown: function(controller, button) {\n    this.controllers[controller].buttonDown(button);\n  },\n\n  buttonUp: function(controller, button) {\n    this.controllers[controller].buttonUp(button);\n  },\n\n  zapperMove: function(x, y) {\n    if (!this.mmap) return;\n    this.mmap.zapperX = x;\n    this.mmap.zapperY = y;\n  },\n\n  zapperFireDown: function() {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = true;\n  },\n\n  zapperFireUp: function() {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = false;\n  },\n\n  getFPS: function() {\n    var now = +new Date();\n    var fps = null;\n    if (this.lastFpsTime) {\n      fps = this.fpsFrameCount / ((now - this.lastFpsTime) / 1000);\n    }\n    this.fpsFrameCount = 0;\n    this.lastFpsTime = now;\n    return fps;\n  },\n\n  reloadROM: function() {\n    if (this.romData !== null) {\n      this.loadROM(this.romData);\n    }\n  },\n\n  // Loads a ROM file into the CPU and PPU.\n  // The ROM file is validated first.\n  loadROM: function(data) {\n    // Load ROM file:\n    this.rom = new ROM(this);\n    this.rom.load(data);\n\n    this.reset();\n    this.mmap = this.rom.createMapper();\n    this.mmap.loadROM();\n    this.ppu.setMirroring(this.rom.getMirroringType());\n    this.romData = data;\n  },\n\n  setFramerate: function(rate) {\n    this.opts.preferredFrameRate = rate;\n    this.frameTime = 1000 / rate;\n    this.papu.setSampleRate(this.opts.sampleRate, false);\n  },\n\n  toJSON: function() {\n    return {\n      romData: this.romData,\n      cpu: this.cpu.toJSON(),\n      mmap: this.mmap.toJSON(),\n      ppu: this.ppu.toJSON()\n    };\n  },\n\n  fromJSON: function(s) {\n    this.loadROM(s.romData);\n    this.cpu.fromJSON(s.cpu);\n    this.mmap.fromJSON(s.mmap);\n    this.ppu.fromJSON(s.ppu);\n  }\n};\n\nmodule.exports = NES;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar utils = __webpack_require__(0);\n\nvar CPU = function(nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.mem = null;\n  this.REG_ACC = null;\n  this.REG_X = null;\n  this.REG_Y = null;\n  this.REG_SP = null;\n  this.REG_PC = null;\n  this.REG_PC_NEW = null;\n  this.REG_STATUS = null;\n  this.F_CARRY = null;\n  this.F_DECIMAL = null;\n  this.F_INTERRUPT = null;\n  this.F_INTERRUPT_NEW = null;\n  this.F_OVERFLOW = null;\n  this.F_SIGN = null;\n  this.F_ZERO = null;\n  this.F_NOTUSED = null;\n  this.F_NOTUSED_NEW = null;\n  this.F_BRK = null;\n  this.F_BRK_NEW = null;\n  this.opdata = null;\n  this.cyclesToHalt = null;\n  this.crash = null;\n  this.irqRequested = null;\n  this.irqType = null;\n\n  this.reset();\n};\n\nCPU.prototype = {\n  // IRQ Types\n  IRQ_NORMAL: 0,\n  IRQ_NMI: 1,\n  IRQ_RESET: 2,\n\n  reset: function() {\n    // Main memory\n    this.mem = new Array(0x10000);\n\n    for (var i = 0; i < 0x2000; i++) {\n      this.mem[i] = 0xff;\n    }\n    for (var p = 0; p < 4; p++) {\n      var j = p * 0x800;\n      this.mem[j + 0x008] = 0xf7;\n      this.mem[j + 0x009] = 0xef;\n      this.mem[j + 0x00a] = 0xdf;\n      this.mem[j + 0x00f] = 0xbf;\n    }\n    for (var k = 0x2001; k < this.mem.length; k++) {\n      this.mem[k] = 0;\n    }\n\n    // CPU Registers:\n    this.REG_ACC = 0;\n    this.REG_X = 0;\n    this.REG_Y = 0;\n    // Reset Stack pointer:\n    this.REG_SP = 0x01ff;\n    // Reset Program counter:\n    this.REG_PC = 0x8000 - 1;\n    this.REG_PC_NEW = 0x8000 - 1;\n    // Reset Status register:\n    this.REG_STATUS = 0x28;\n\n    this.setStatus(0x28);\n\n    // Set flags:\n    this.F_CARRY = 0;\n    this.F_DECIMAL = 0;\n    this.F_INTERRUPT = 1;\n    this.F_INTERRUPT_NEW = 1;\n    this.F_OVERFLOW = 0;\n    this.F_SIGN = 0;\n    this.F_ZERO = 1;\n\n    this.F_NOTUSED = 1;\n    this.F_NOTUSED_NEW = 1;\n    this.F_BRK = 1;\n    this.F_BRK_NEW = 1;\n\n    this.opdata = new OpData().opdata;\n    this.cyclesToHalt = 0;\n\n    // Reset crash flag:\n    this.crash = false;\n\n    // Interrupt notification:\n    this.irqRequested = false;\n    this.irqType = null;\n  },\n\n  // Emulates a single CPU instruction, returns the number of cycles\n  emulate: function() {\n    var temp;\n    var add;\n\n    // Check interrupts:\n    if (this.irqRequested) {\n      temp =\n        this.F_CARRY |\n        ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n        (this.F_INTERRUPT << 2) |\n        (this.F_DECIMAL << 3) |\n        (this.F_BRK << 4) |\n        (this.F_NOTUSED << 5) |\n        (this.F_OVERFLOW << 6) |\n        (this.F_SIGN << 7);\n\n      this.REG_PC_NEW = this.REG_PC;\n      this.F_INTERRUPT_NEW = this.F_INTERRUPT;\n      switch (this.irqType) {\n        case 0: {\n          // Normal IRQ:\n          if (this.F_INTERRUPT !== 0) {\n            // console.log(\"Interrupt was masked.\");\n            break;\n          }\n          this.doIrq(temp);\n          // console.log(\"Did normal IRQ. I=\"+this.F_INTERRUPT);\n          break;\n        }\n        case 1: {\n          // NMI:\n          this.doNonMaskableInterrupt(temp);\n          break;\n        }\n        case 2: {\n          // Reset:\n          this.doResetInterrupt();\n          break;\n        }\n      }\n\n      this.REG_PC = this.REG_PC_NEW;\n      this.F_INTERRUPT = this.F_INTERRUPT_NEW;\n      this.F_BRK = this.F_BRK_NEW;\n      this.irqRequested = false;\n    }\n\n    var opinf = this.opdata[this.nes.mmap.load(this.REG_PC + 1)];\n    var cycleCount = opinf >> 24;\n    var cycleAdd = 0;\n\n    // Find address mode:\n    var addrMode = (opinf >> 8) & 0xff;\n\n    // Increment PC by number of op bytes:\n    var opaddr = this.REG_PC;\n    this.REG_PC += (opinf >> 16) & 0xff;\n\n    var addr = 0;\n    switch (addrMode) {\n      case 0: {\n        // Zero Page mode. Use the address given after the opcode,\n        // but without high byte.\n        addr = this.load(opaddr + 2);\n        break;\n      }\n      case 1: {\n        // Relative mode.\n        addr = this.load(opaddr + 2);\n        if (addr < 0x80) {\n          addr += this.REG_PC;\n        } else {\n          addr += this.REG_PC - 256;\n        }\n        break;\n      }\n      case 2: {\n        // Ignore. Address is implied in instruction.\n        break;\n      }\n      case 3: {\n        // Absolute mode. Use the two bytes following the opcode as\n        // an address.\n        addr = this.load16bit(opaddr + 2);\n        break;\n      }\n      case 4: {\n        // Accumulator mode. The address is in the accumulator\n        // register.\n        addr = this.REG_ACC;\n        break;\n      }\n      case 5: {\n        // Immediate mode. The value is given after the opcode.\n        addr = this.REG_PC;\n        break;\n      }\n      case 6: {\n        // Zero Page Indexed mode, X as index. Use the address given\n        // after the opcode, then add the\n        // X register to it to get the final address.\n        addr = (this.load(opaddr + 2) + this.REG_X) & 0xff;\n        break;\n      }\n      case 7: {\n        // Zero Page Indexed mode, Y as index. Use the address given\n        // after the opcode, then add the\n        // Y register to it to get the final address.\n        addr = (this.load(opaddr + 2) + this.REG_Y) & 0xff;\n        break;\n      }\n      case 8: {\n        // Absolute Indexed Mode, X as index. Same as zero page\n        // indexed, but with the high byte.\n        addr = this.load16bit(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_X;\n        break;\n      }\n      case 9: {\n        // Absolute Indexed Mode, Y as index. Same as zero page\n        // indexed, but with the high byte.\n        addr = this.load16bit(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_Y;\n        break;\n      }\n      case 10: {\n        // Pre-indexed Indirect mode. Find the 16-bit address\n        // starting at the given location plus\n        // the current X register. The value is the contents of that\n        // address.\n        addr = this.load(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_X;\n        addr &= 0xff;\n        addr = this.load16bit(addr);\n        break;\n      }\n      case 11: {\n        // Post-indexed Indirect mode. Find the 16-bit address\n        // contained in the given location\n        // (and the one following). Add to that address the contents\n        // of the Y register. Fetch the value\n        // stored at that adress.\n        addr = this.load16bit(this.load(opaddr + 2));\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_Y;\n        break;\n      }\n      case 12: {\n        // Indirect Absolute mode. Find the 16-bit address contained\n        // at the given location.\n        addr = this.load16bit(opaddr + 2); // Find op\n        if (addr < 0x1fff) {\n          addr =\n            this.mem[addr] +\n            (this.mem[(addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)] << 8); // Read from address given in op\n        } else {\n          addr =\n            this.nes.mmap.load(addr) +\n            (this.nes.mmap.load(\n              (addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)\n            ) <<\n              8);\n        }\n        break;\n      }\n    }\n    // Wrap around for addresses above 0xFFFF:\n    addr &= 0xffff;\n\n    // ----------------------------------------------------------------------------------------------------\n    // Decode & execute instruction:\n    // ----------------------------------------------------------------------------------------------------\n\n    // This should be compiled to a jump table.\n    switch (opinf & 0xff) {\n      case 0: {\n        // *******\n        // * ADC *\n        // *******\n\n        // Add with carry.\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\n\n        if (\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp > 255 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        this.REG_ACC = temp & 255;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 1: {\n        // *******\n        // * AND *\n        // *******\n\n        // AND memory with accumulator.\n        this.REG_ACC = this.REG_ACC & this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        //this.REG_ACC = temp;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 2: {\n        // *******\n        // * ASL *\n        // *******\n\n        // Shift left one bit\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          this.F_CARRY = (this.REG_ACC >> 7) & 1;\n          this.REG_ACC = (this.REG_ACC << 1) & 255;\n          this.F_SIGN = (this.REG_ACC >> 7) & 1;\n          this.F_ZERO = this.REG_ACC;\n        } else {\n          temp = this.load(addr);\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = (temp << 1) & 255;\n          this.F_SIGN = (temp >> 7) & 1;\n          this.F_ZERO = temp;\n          this.write(addr, temp);\n        }\n        break;\n      }\n      case 3: {\n        // *******\n        // * BCC *\n        // *******\n\n        // Branch on carry clear\n        if (this.F_CARRY === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 4: {\n        // *******\n        // * BCS *\n        // *******\n\n        // Branch on carry set\n        if (this.F_CARRY === 1) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 5: {\n        // *******\n        // * BEQ *\n        // *******\n\n        // Branch on zero\n        if (this.F_ZERO === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 6: {\n        // *******\n        // * BIT *\n        // *******\n\n        temp = this.load(addr);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        temp &= this.REG_ACC;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 7: {\n        // *******\n        // * BMI *\n        // *******\n\n        // Branch on negative result\n        if (this.F_SIGN === 1) {\n          cycleCount++;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 8: {\n        // *******\n        // * BNE *\n        // *******\n\n        // Branch on not zero\n        if (this.F_ZERO !== 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 9: {\n        // *******\n        // * BPL *\n        // *******\n\n        // Branch on positive result\n        if (this.F_SIGN === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 10: {\n        // *******\n        // * BRK *\n        // *******\n\n        this.REG_PC += 2;\n        this.push((this.REG_PC >> 8) & 255);\n        this.push(this.REG_PC & 255);\n        this.F_BRK = 1;\n\n        this.push(\n          this.F_CARRY |\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n            (this.F_INTERRUPT << 2) |\n            (this.F_DECIMAL << 3) |\n            (this.F_BRK << 4) |\n            (this.F_NOTUSED << 5) |\n            (this.F_OVERFLOW << 6) |\n            (this.F_SIGN << 7)\n        );\n\n        this.F_INTERRUPT = 1;\n        //this.REG_PC = load(0xFFFE) | (load(0xFFFF) << 8);\n        this.REG_PC = this.load16bit(0xfffe);\n        this.REG_PC--;\n        break;\n      }\n      case 11: {\n        // *******\n        // * BVC *\n        // *******\n\n        // Branch on overflow clear\n        if (this.F_OVERFLOW === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 12: {\n        // *******\n        // * BVS *\n        // *******\n\n        // Branch on overflow set\n        if (this.F_OVERFLOW === 1) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 13: {\n        // *******\n        // * CLC *\n        // *******\n\n        // Clear carry flag\n        this.F_CARRY = 0;\n        break;\n      }\n      case 14: {\n        // *******\n        // * CLD *\n        // *******\n\n        // Clear decimal flag\n        this.F_DECIMAL = 0;\n        break;\n      }\n      case 15: {\n        // *******\n        // * CLI *\n        // *******\n\n        // Clear interrupt flag\n        this.F_INTERRUPT = 0;\n        break;\n      }\n      case 16: {\n        // *******\n        // * CLV *\n        // *******\n\n        // Clear overflow flag\n        this.F_OVERFLOW = 0;\n        break;\n      }\n      case 17: {\n        // *******\n        // * CMP *\n        // *******\n\n        // Compare memory and accumulator:\n        temp = this.REG_ACC - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 18: {\n        // *******\n        // * CPX *\n        // *******\n\n        // Compare memory and index X:\n        temp = this.REG_X - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        break;\n      }\n      case 19: {\n        // *******\n        // * CPY *\n        // *******\n\n        // Compare memory and index Y:\n        temp = this.REG_Y - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        break;\n      }\n      case 20: {\n        // *******\n        // * DEC *\n        // *******\n\n        // Decrement memory by one:\n        temp = (this.load(addr) - 1) & 0xff;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.write(addr, temp);\n        break;\n      }\n      case 21: {\n        // *******\n        // * DEX *\n        // *******\n\n        // Decrement index X by one:\n        this.REG_X = (this.REG_X - 1) & 0xff;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 22: {\n        // *******\n        // * DEY *\n        // *******\n\n        // Decrement index Y by one:\n        this.REG_Y = (this.REG_Y - 1) & 0xff;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 23: {\n        // *******\n        // * EOR *\n        // *******\n\n        // XOR Memory with accumulator, store in accumulator:\n        this.REG_ACC = (this.load(addr) ^ this.REG_ACC) & 0xff;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 24: {\n        // *******\n        // * INC *\n        // *******\n\n        // Increment memory by one:\n        temp = (this.load(addr) + 1) & 0xff;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.write(addr, temp & 0xff);\n        break;\n      }\n      case 25: {\n        // *******\n        // * INX *\n        // *******\n\n        // Increment index X by one:\n        this.REG_X = (this.REG_X + 1) & 0xff;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 26: {\n        // *******\n        // * INY *\n        // *******\n\n        // Increment index Y by one:\n        this.REG_Y++;\n        this.REG_Y &= 0xff;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 27: {\n        // *******\n        // * JMP *\n        // *******\n\n        // Jump to new location:\n        this.REG_PC = addr - 1;\n        break;\n      }\n      case 28: {\n        // *******\n        // * JSR *\n        // *******\n\n        // Jump to new location, saving return address.\n        // Push return address on stack:\n        this.push((this.REG_PC >> 8) & 255);\n        this.push(this.REG_PC & 255);\n        this.REG_PC = addr - 1;\n        break;\n      }\n      case 29: {\n        // *******\n        // * LDA *\n        // *******\n\n        // Load accumulator with memory:\n        this.REG_ACC = this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 30: {\n        // *******\n        // * LDX *\n        // *******\n\n        // Load index X with memory:\n        this.REG_X = this.load(addr);\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 31: {\n        // *******\n        // * LDY *\n        // *******\n\n        // Load index Y with memory:\n        this.REG_Y = this.load(addr);\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 32: {\n        // *******\n        // * LSR *\n        // *******\n\n        // Shift right one bit:\n        if (addrMode === 4) {\n          // ADDR_ACC\n\n          temp = this.REG_ACC & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr) & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = 0;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 33: {\n        // *******\n        // * NOP *\n        // *******\n\n        // No OPeration.\n        // Ignore.\n        break;\n      }\n      case 34: {\n        // *******\n        // * ORA *\n        // *******\n\n        // OR memory with accumulator, store in accumulator.\n        temp = (this.load(addr) | this.REG_ACC) & 255;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.REG_ACC = temp;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 35: {\n        // *******\n        // * PHA *\n        // *******\n\n        // Push accumulator on stack\n        this.push(this.REG_ACC);\n        break;\n      }\n      case 36: {\n        // *******\n        // * PHP *\n        // *******\n\n        // Push processor status on stack\n        this.F_BRK = 1;\n        this.push(\n          this.F_CARRY |\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n            (this.F_INTERRUPT << 2) |\n            (this.F_DECIMAL << 3) |\n            (this.F_BRK << 4) |\n            (this.F_NOTUSED << 5) |\n            (this.F_OVERFLOW << 6) |\n            (this.F_SIGN << 7)\n        );\n        break;\n      }\n      case 37: {\n        // *******\n        // * PLA *\n        // *******\n\n        // Pull accumulator from stack\n        this.REG_ACC = this.pull();\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 38: {\n        // *******\n        // * PLP *\n        // *******\n\n        // Pull processor status from stack\n        temp = this.pull();\n        this.F_CARRY = temp & 1;\n        this.F_ZERO = ((temp >> 1) & 1) === 1 ? 0 : 1;\n        this.F_INTERRUPT = (temp >> 2) & 1;\n        this.F_DECIMAL = (temp >> 3) & 1;\n        this.F_BRK = (temp >> 4) & 1;\n        this.F_NOTUSED = (temp >> 5) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        this.F_SIGN = (temp >> 7) & 1;\n\n        this.F_NOTUSED = 1;\n        break;\n      }\n      case 39: {\n        // *******\n        // * ROL *\n        // *******\n\n        // Rotate one bit left\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          temp = this.REG_ACC;\n          add = this.F_CARRY;\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = ((temp << 1) & 0xff) + add;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr);\n          add = this.F_CARRY;\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = ((temp << 1) & 0xff) + add;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 40: {\n        // *******\n        // * ROR *\n        // *******\n\n        // Rotate one bit right\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          add = this.F_CARRY << 7;\n          this.F_CARRY = this.REG_ACC & 1;\n          temp = (this.REG_ACC >> 1) + add;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr);\n          add = this.F_CARRY << 7;\n          this.F_CARRY = temp & 1;\n          temp = (temp >> 1) + add;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 41: {\n        // *******\n        // * RTI *\n        // *******\n\n        // Return from interrupt. Pull status and PC from stack.\n\n        temp = this.pull();\n        this.F_CARRY = temp & 1;\n        this.F_ZERO = ((temp >> 1) & 1) === 0 ? 1 : 0;\n        this.F_INTERRUPT = (temp >> 2) & 1;\n        this.F_DECIMAL = (temp >> 3) & 1;\n        this.F_BRK = (temp >> 4) & 1;\n        this.F_NOTUSED = (temp >> 5) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        this.F_SIGN = (temp >> 7) & 1;\n\n        this.REG_PC = this.pull();\n        this.REG_PC += this.pull() << 8;\n        if (this.REG_PC === 0xffff) {\n          return;\n        }\n        this.REG_PC--;\n        this.F_NOTUSED = 1;\n        break;\n      }\n      case 42: {\n        // *******\n        // * RTS *\n        // *******\n\n        // Return from subroutine. Pull PC from stack.\n\n        this.REG_PC = this.pull();\n        this.REG_PC += this.pull() << 8;\n\n        if (this.REG_PC === 0xffff) {\n          return; // return from NSF play routine:\n        }\n        break;\n      }\n      case 43: {\n        // *******\n        // * SBC *\n        // *******\n\n        temp = this.REG_ACC - this.load(addr) - (1 - this.F_CARRY);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_ACC = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 44: {\n        // *******\n        // * SEC *\n        // *******\n\n        // Set carry flag\n        this.F_CARRY = 1;\n        break;\n      }\n      case 45: {\n        // *******\n        // * SED *\n        // *******\n\n        // Set decimal mode\n        this.F_DECIMAL = 1;\n        break;\n      }\n      case 46: {\n        // *******\n        // * SEI *\n        // *******\n\n        // Set interrupt disable status\n        this.F_INTERRUPT = 1;\n        break;\n      }\n      case 47: {\n        // *******\n        // * STA *\n        // *******\n\n        // Store accumulator in memory\n        this.write(addr, this.REG_ACC);\n        break;\n      }\n      case 48: {\n        // *******\n        // * STX *\n        // *******\n\n        // Store index X in memory\n        this.write(addr, this.REG_X);\n        break;\n      }\n      case 49: {\n        // *******\n        // * STY *\n        // *******\n\n        // Store index Y in memory:\n        this.write(addr, this.REG_Y);\n        break;\n      }\n      case 50: {\n        // *******\n        // * TAX *\n        // *******\n\n        // Transfer accumulator to index X:\n        this.REG_X = this.REG_ACC;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 51: {\n        // *******\n        // * TAY *\n        // *******\n\n        // Transfer accumulator to index Y:\n        this.REG_Y = this.REG_ACC;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 52: {\n        // *******\n        // * TSX *\n        // *******\n\n        // Transfer stack pointer to index X:\n        this.REG_X = this.REG_SP - 0x0100;\n        this.F_SIGN = (this.REG_SP >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 53: {\n        // *******\n        // * TXA *\n        // *******\n\n        // Transfer index X to accumulator:\n        this.REG_ACC = this.REG_X;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 54: {\n        // *******\n        // * TXS *\n        // *******\n\n        // Transfer index X to stack pointer:\n        this.REG_SP = this.REG_X + 0x0100;\n        this.stackWrap();\n        break;\n      }\n      case 55: {\n        // *******\n        // * TYA *\n        // *******\n\n        // Transfer index Y to accumulator:\n        this.REG_ACC = this.REG_Y;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      default: {\n        // *******\n        // * ??? *\n        // *******\n\n        this.nes.stop();\n        this.nes.crashMessage =\n          \"Game crashed, invalid opcode at address $\" + opaddr.toString(16);\n        break;\n      }\n    } // end of switch\n\n    return cycleCount;\n  },\n\n  load: function(addr) {\n    if (addr < 0x2000) {\n      return this.mem[addr & 0x7ff];\n    } else {\n      return this.nes.mmap.load(addr);\n    }\n  },\n\n  load16bit: function(addr) {\n    if (addr < 0x1fff) {\n      return this.mem[addr & 0x7ff] | (this.mem[(addr + 1) & 0x7ff] << 8);\n    } else {\n      return this.nes.mmap.load(addr) | (this.nes.mmap.load(addr + 1) << 8);\n    }\n  },\n\n  write: function(addr, val) {\n    if (addr < 0x2000) {\n      this.mem[addr & 0x7ff] = val;\n    } else {\n      this.nes.mmap.write(addr, val);\n    }\n  },\n\n  requestIrq: function(type) {\n    if (this.irqRequested) {\n      if (type === this.IRQ_NORMAL) {\n        return;\n      }\n      // console.log(\"too fast irqs. type=\"+type);\n    }\n    this.irqRequested = true;\n    this.irqType = type;\n  },\n\n  push: function(value) {\n    this.nes.mmap.write(this.REG_SP, value);\n    this.REG_SP--;\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n  },\n\n  stackWrap: function() {\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n  },\n\n  pull: function() {\n    this.REG_SP++;\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n    return this.nes.mmap.load(this.REG_SP);\n  },\n\n  pageCrossed: function(addr1, addr2) {\n    return (addr1 & 0xff00) !== (addr2 & 0xff00);\n  },\n\n  haltCycles: function(cycles) {\n    this.cyclesToHalt += cycles;\n  },\n\n  doNonMaskableInterrupt: function(status) {\n    if ((this.nes.mmap.load(0x2000) & 128) !== 0) {\n      // Check whether VBlank Interrupts are enabled\n\n      this.REG_PC_NEW++;\n      this.push((this.REG_PC_NEW >> 8) & 0xff);\n      this.push(this.REG_PC_NEW & 0xff);\n      //this.F_INTERRUPT_NEW = 1;\n      this.push(status);\n\n      this.REG_PC_NEW =\n        this.nes.mmap.load(0xfffa) | (this.nes.mmap.load(0xfffb) << 8);\n      this.REG_PC_NEW--;\n    }\n  },\n\n  doResetInterrupt: function() {\n    this.REG_PC_NEW =\n      this.nes.mmap.load(0xfffc) | (this.nes.mmap.load(0xfffd) << 8);\n    this.REG_PC_NEW--;\n  },\n\n  doIrq: function(status) {\n    this.REG_PC_NEW++;\n    this.push((this.REG_PC_NEW >> 8) & 0xff);\n    this.push(this.REG_PC_NEW & 0xff);\n    this.push(status);\n    this.F_INTERRUPT_NEW = 1;\n    this.F_BRK_NEW = 0;\n\n    this.REG_PC_NEW =\n      this.nes.mmap.load(0xfffe) | (this.nes.mmap.load(0xffff) << 8);\n    this.REG_PC_NEW--;\n  },\n\n  getStatus: function() {\n    return (\n      this.F_CARRY |\n      (this.F_ZERO << 1) |\n      (this.F_INTERRUPT << 2) |\n      (this.F_DECIMAL << 3) |\n      (this.F_BRK << 4) |\n      (this.F_NOTUSED << 5) |\n      (this.F_OVERFLOW << 6) |\n      (this.F_SIGN << 7)\n    );\n  },\n\n  setStatus: function(st) {\n    this.F_CARRY = st & 1;\n    this.F_ZERO = (st >> 1) & 1;\n    this.F_INTERRUPT = (st >> 2) & 1;\n    this.F_DECIMAL = (st >> 3) & 1;\n    this.F_BRK = (st >> 4) & 1;\n    this.F_NOTUSED = (st >> 5) & 1;\n    this.F_OVERFLOW = (st >> 6) & 1;\n    this.F_SIGN = (st >> 7) & 1;\n  },\n\n  JSON_PROPERTIES: [\n    \"mem\",\n    \"cyclesToHalt\",\n    \"irqRequested\",\n    \"irqType\",\n    // Registers\n    \"REG_ACC\",\n    \"REG_X\",\n    \"REG_Y\",\n    \"REG_SP\",\n    \"REG_PC\",\n    \"REG_PC_NEW\",\n    \"REG_STATUS\",\n    // Status\n    \"F_CARRY\",\n    \"F_DECIMAL\",\n    \"F_INTERRUPT\",\n    \"F_INTERRUPT_NEW\",\n    \"F_OVERFLOW\",\n    \"F_SIGN\",\n    \"F_ZERO\",\n    \"F_NOTUSED\",\n    \"F_NOTUSED_NEW\",\n    \"F_BRK\",\n    \"F_BRK_NEW\"\n  ],\n\n  toJSON: function() {\n    return utils.toJSON(this);\n  },\n\n  fromJSON: function(s) {\n    utils.fromJSON(this, s);\n  }\n};\n\n// Generates and provides an array of details about instructions\nvar OpData = function() {\n  this.opdata = new Array(256);\n\n  // Set all to invalid instruction (to detect crashes):\n  for (var i = 0; i < 256; i++) this.opdata[i] = 0xff;\n\n  // Now fill in all valid opcodes:\n\n  // ADC:\n  this.setOp(this.INS_ADC, 0x69, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ADC, 0x65, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ADC, 0x75, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ADC, 0x6d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ADC, 0x7d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ADC, 0x79, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ADC, 0x61, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ADC, 0x71, this.ADDR_POSTIDXIND, 2, 5);\n\n  // AND:\n  this.setOp(this.INS_AND, 0x29, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_AND, 0x25, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_AND, 0x35, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_AND, 0x2d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_AND, 0x3d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_AND, 0x39, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_AND, 0x21, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_AND, 0x31, this.ADDR_POSTIDXIND, 2, 5);\n\n  // ASL:\n  this.setOp(this.INS_ASL, 0x0a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ASL, 0x06, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ASL, 0x16, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ASL, 0x0e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ASL, 0x1e, this.ADDR_ABSX, 3, 7);\n\n  // BCC:\n  this.setOp(this.INS_BCC, 0x90, this.ADDR_REL, 2, 2);\n\n  // BCS:\n  this.setOp(this.INS_BCS, 0xb0, this.ADDR_REL, 2, 2);\n\n  // BEQ:\n  this.setOp(this.INS_BEQ, 0xf0, this.ADDR_REL, 2, 2);\n\n  // BIT:\n  this.setOp(this.INS_BIT, 0x24, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_BIT, 0x2c, this.ADDR_ABS, 3, 4);\n\n  // BMI:\n  this.setOp(this.INS_BMI, 0x30, this.ADDR_REL, 2, 2);\n\n  // BNE:\n  this.setOp(this.INS_BNE, 0xd0, this.ADDR_REL, 2, 2);\n\n  // BPL:\n  this.setOp(this.INS_BPL, 0x10, this.ADDR_REL, 2, 2);\n\n  // BRK:\n  this.setOp(this.INS_BRK, 0x00, this.ADDR_IMP, 1, 7);\n\n  // BVC:\n  this.setOp(this.INS_BVC, 0x50, this.ADDR_REL, 2, 2);\n\n  // BVS:\n  this.setOp(this.INS_BVS, 0x70, this.ADDR_REL, 2, 2);\n\n  // CLC:\n  this.setOp(this.INS_CLC, 0x18, this.ADDR_IMP, 1, 2);\n\n  // CLD:\n  this.setOp(this.INS_CLD, 0xd8, this.ADDR_IMP, 1, 2);\n\n  // CLI:\n  this.setOp(this.INS_CLI, 0x58, this.ADDR_IMP, 1, 2);\n\n  // CLV:\n  this.setOp(this.INS_CLV, 0xb8, this.ADDR_IMP, 1, 2);\n\n  // CMP:\n  this.setOp(this.INS_CMP, 0xc9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CMP, 0xc5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CMP, 0xd5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_CMP, 0xcd, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_CMP, 0xdd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_CMP, 0xd9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_CMP, 0xc1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_CMP, 0xd1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // CPX:\n  this.setOp(this.INS_CPX, 0xe0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPX, 0xe4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPX, 0xec, this.ADDR_ABS, 3, 4);\n\n  // CPY:\n  this.setOp(this.INS_CPY, 0xc0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPY, 0xc4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPY, 0xcc, this.ADDR_ABS, 3, 4);\n\n  // DEC:\n  this.setOp(this.INS_DEC, 0xc6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_DEC, 0xd6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_DEC, 0xce, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_DEC, 0xde, this.ADDR_ABSX, 3, 7);\n\n  // DEX:\n  this.setOp(this.INS_DEX, 0xca, this.ADDR_IMP, 1, 2);\n\n  // DEY:\n  this.setOp(this.INS_DEY, 0x88, this.ADDR_IMP, 1, 2);\n\n  // EOR:\n  this.setOp(this.INS_EOR, 0x49, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_EOR, 0x45, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_EOR, 0x55, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_EOR, 0x4d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_EOR, 0x5d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_EOR, 0x59, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_EOR, 0x41, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_EOR, 0x51, this.ADDR_POSTIDXIND, 2, 5);\n\n  // INC:\n  this.setOp(this.INS_INC, 0xe6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_INC, 0xf6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_INC, 0xee, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_INC, 0xfe, this.ADDR_ABSX, 3, 7);\n\n  // INX:\n  this.setOp(this.INS_INX, 0xe8, this.ADDR_IMP, 1, 2);\n\n  // INY:\n  this.setOp(this.INS_INY, 0xc8, this.ADDR_IMP, 1, 2);\n\n  // JMP:\n  this.setOp(this.INS_JMP, 0x4c, this.ADDR_ABS, 3, 3);\n  this.setOp(this.INS_JMP, 0x6c, this.ADDR_INDABS, 3, 5);\n\n  // JSR:\n  this.setOp(this.INS_JSR, 0x20, this.ADDR_ABS, 3, 6);\n\n  // LDA:\n  this.setOp(this.INS_LDA, 0xa9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDA, 0xa5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDA, 0xb5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDA, 0xad, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDA, 0xbd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_LDA, 0xb9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_LDA, 0xa1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_LDA, 0xb1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // LDX:\n  this.setOp(this.INS_LDX, 0xa2, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDX, 0xa6, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDX, 0xb6, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_LDX, 0xae, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDX, 0xbe, this.ADDR_ABSY, 3, 4);\n\n  // LDY:\n  this.setOp(this.INS_LDY, 0xa0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDY, 0xa4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDY, 0xb4, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDY, 0xac, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDY, 0xbc, this.ADDR_ABSX, 3, 4);\n\n  // LSR:\n  this.setOp(this.INS_LSR, 0x4a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_LSR, 0x46, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_LSR, 0x56, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_LSR, 0x4e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_LSR, 0x5e, this.ADDR_ABSX, 3, 7);\n\n  // NOP:\n  this.setOp(this.INS_NOP, 0xea, this.ADDR_IMP, 1, 2);\n\n  // ORA:\n  this.setOp(this.INS_ORA, 0x09, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ORA, 0x05, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ORA, 0x15, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ORA, 0x0d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ORA, 0x1d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ORA, 0x19, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ORA, 0x01, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ORA, 0x11, this.ADDR_POSTIDXIND, 2, 5);\n\n  // PHA:\n  this.setOp(this.INS_PHA, 0x48, this.ADDR_IMP, 1, 3);\n\n  // PHP:\n  this.setOp(this.INS_PHP, 0x08, this.ADDR_IMP, 1, 3);\n\n  // PLA:\n  this.setOp(this.INS_PLA, 0x68, this.ADDR_IMP, 1, 4);\n\n  // PLP:\n  this.setOp(this.INS_PLP, 0x28, this.ADDR_IMP, 1, 4);\n\n  // ROL:\n  this.setOp(this.INS_ROL, 0x2a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROL, 0x26, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROL, 0x36, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROL, 0x2e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROL, 0x3e, this.ADDR_ABSX, 3, 7);\n\n  // ROR:\n  this.setOp(this.INS_ROR, 0x6a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROR, 0x66, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROR, 0x76, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROR, 0x6e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROR, 0x7e, this.ADDR_ABSX, 3, 7);\n\n  // RTI:\n  this.setOp(this.INS_RTI, 0x40, this.ADDR_IMP, 1, 6);\n\n  // RTS:\n  this.setOp(this.INS_RTS, 0x60, this.ADDR_IMP, 1, 6);\n\n  // SBC:\n  this.setOp(this.INS_SBC, 0xe9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SBC, 0xe5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_SBC, 0xf5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_SBC, 0xed, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_SBC, 0xfd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_SBC, 0xf9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_SBC, 0xe1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_SBC, 0xf1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // SEC:\n  this.setOp(this.INS_SEC, 0x38, this.ADDR_IMP, 1, 2);\n\n  // SED:\n  this.setOp(this.INS_SED, 0xf8, this.ADDR_IMP, 1, 2);\n\n  // SEI:\n  this.setOp(this.INS_SEI, 0x78, this.ADDR_IMP, 1, 2);\n\n  // STA:\n  this.setOp(this.INS_STA, 0x85, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STA, 0x95, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STA, 0x8d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_STA, 0x9d, this.ADDR_ABSX, 3, 5);\n  this.setOp(this.INS_STA, 0x99, this.ADDR_ABSY, 3, 5);\n  this.setOp(this.INS_STA, 0x81, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_STA, 0x91, this.ADDR_POSTIDXIND, 2, 6);\n\n  // STX:\n  this.setOp(this.INS_STX, 0x86, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STX, 0x96, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_STX, 0x8e, this.ADDR_ABS, 3, 4);\n\n  // STY:\n  this.setOp(this.INS_STY, 0x84, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STY, 0x94, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STY, 0x8c, this.ADDR_ABS, 3, 4);\n\n  // TAX:\n  this.setOp(this.INS_TAX, 0xaa, this.ADDR_IMP, 1, 2);\n\n  // TAY:\n  this.setOp(this.INS_TAY, 0xa8, this.ADDR_IMP, 1, 2);\n\n  // TSX:\n  this.setOp(this.INS_TSX, 0xba, this.ADDR_IMP, 1, 2);\n\n  // TXA:\n  this.setOp(this.INS_TXA, 0x8a, this.ADDR_IMP, 1, 2);\n\n  // TXS:\n  this.setOp(this.INS_TXS, 0x9a, this.ADDR_IMP, 1, 2);\n\n  // TYA:\n  this.setOp(this.INS_TYA, 0x98, this.ADDR_IMP, 1, 2);\n\n  // prettier-ignore\n  this.cycTable = new Array(\n    /*0x00*/ 7,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,\n    /*0x10*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x20*/ 6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,\n    /*0x30*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x40*/ 6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,\n    /*0x50*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x60*/ 6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,\n    /*0x70*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x80*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\n    /*0x90*/ 2,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,\n    /*0xA0*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\n    /*0xB0*/ 2,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,\n    /*0xC0*/ 2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,\n    /*0xD0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0xE0*/ 2,6,3,8,3,3,5,5,2,2,2,2,4,4,6,6,\n    /*0xF0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7\n  );\n\n  this.instname = new Array(56);\n\n  // Instruction Names:\n  this.instname[0] = \"ADC\";\n  this.instname[1] = \"AND\";\n  this.instname[2] = \"ASL\";\n  this.instname[3] = \"BCC\";\n  this.instname[4] = \"BCS\";\n  this.instname[5] = \"BEQ\";\n  this.instname[6] = \"BIT\";\n  this.instname[7] = \"BMI\";\n  this.instname[8] = \"BNE\";\n  this.instname[9] = \"BPL\";\n  this.instname[10] = \"BRK\";\n  this.instname[11] = \"BVC\";\n  this.instname[12] = \"BVS\";\n  this.instname[13] = \"CLC\";\n  this.instname[14] = \"CLD\";\n  this.instname[15] = \"CLI\";\n  this.instname[16] = \"CLV\";\n  this.instname[17] = \"CMP\";\n  this.instname[18] = \"CPX\";\n  this.instname[19] = \"CPY\";\n  this.instname[20] = \"DEC\";\n  this.instname[21] = \"DEX\";\n  this.instname[22] = \"DEY\";\n  this.instname[23] = \"EOR\";\n  this.instname[24] = \"INC\";\n  this.instname[25] = \"INX\";\n  this.instname[26] = \"INY\";\n  this.instname[27] = \"JMP\";\n  this.instname[28] = \"JSR\";\n  this.instname[29] = \"LDA\";\n  this.instname[30] = \"LDX\";\n  this.instname[31] = \"LDY\";\n  this.instname[32] = \"LSR\";\n  this.instname[33] = \"NOP\";\n  this.instname[34] = \"ORA\";\n  this.instname[35] = \"PHA\";\n  this.instname[36] = \"PHP\";\n  this.instname[37] = \"PLA\";\n  this.instname[38] = \"PLP\";\n  this.instname[39] = \"ROL\";\n  this.instname[40] = \"ROR\";\n  this.instname[41] = \"RTI\";\n  this.instname[42] = \"RTS\";\n  this.instname[43] = \"SBC\";\n  this.instname[44] = \"SEC\";\n  this.instname[45] = \"SED\";\n  this.instname[46] = \"SEI\";\n  this.instname[47] = \"STA\";\n  this.instname[48] = \"STX\";\n  this.instname[49] = \"STY\";\n  this.instname[50] = \"TAX\";\n  this.instname[51] = \"TAY\";\n  this.instname[52] = \"TSX\";\n  this.instname[53] = \"TXA\";\n  this.instname[54] = \"TXS\";\n  this.instname[55] = \"TYA\";\n\n  this.addrDesc = new Array(\n    \"Zero Page           \",\n    \"Relative            \",\n    \"Implied             \",\n    \"Absolute            \",\n    \"Accumulator         \",\n    \"Immediate           \",\n    \"Zero Page,X         \",\n    \"Zero Page,Y         \",\n    \"Absolute,X          \",\n    \"Absolute,Y          \",\n    \"Preindexed Indirect \",\n    \"Postindexed Indirect\",\n    \"Indirect Absolute   \"\n  );\n};\n\nOpData.prototype = {\n  INS_ADC: 0,\n  INS_AND: 1,\n  INS_ASL: 2,\n\n  INS_BCC: 3,\n  INS_BCS: 4,\n  INS_BEQ: 5,\n  INS_BIT: 6,\n  INS_BMI: 7,\n  INS_BNE: 8,\n  INS_BPL: 9,\n  INS_BRK: 10,\n  INS_BVC: 11,\n  INS_BVS: 12,\n\n  INS_CLC: 13,\n  INS_CLD: 14,\n  INS_CLI: 15,\n  INS_CLV: 16,\n  INS_CMP: 17,\n  INS_CPX: 18,\n  INS_CPY: 19,\n\n  INS_DEC: 20,\n  INS_DEX: 21,\n  INS_DEY: 22,\n\n  INS_EOR: 23,\n\n  INS_INC: 24,\n  INS_INX: 25,\n  INS_INY: 26,\n\n  INS_JMP: 27,\n  INS_JSR: 28,\n\n  INS_LDA: 29,\n  INS_LDX: 30,\n  INS_LDY: 31,\n  INS_LSR: 32,\n\n  INS_NOP: 33,\n\n  INS_ORA: 34,\n\n  INS_PHA: 35,\n  INS_PHP: 36,\n  INS_PLA: 37,\n  INS_PLP: 38,\n\n  INS_ROL: 39,\n  INS_ROR: 40,\n  INS_RTI: 41,\n  INS_RTS: 42,\n\n  INS_SBC: 43,\n  INS_SEC: 44,\n  INS_SED: 45,\n  INS_SEI: 46,\n  INS_STA: 47,\n  INS_STX: 48,\n  INS_STY: 49,\n\n  INS_TAX: 50,\n  INS_TAY: 51,\n  INS_TSX: 52,\n  INS_TXA: 53,\n  INS_TXS: 54,\n  INS_TYA: 55,\n\n  INS_DUMMY: 56, // dummy instruction used for 'halting' the processor some cycles\n\n  // -------------------------------- //\n\n  // Addressing modes:\n  ADDR_ZP: 0,\n  ADDR_REL: 1,\n  ADDR_IMP: 2,\n  ADDR_ABS: 3,\n  ADDR_ACC: 4,\n  ADDR_IMM: 5,\n  ADDR_ZPX: 6,\n  ADDR_ZPY: 7,\n  ADDR_ABSX: 8,\n  ADDR_ABSY: 9,\n  ADDR_PREIDXIND: 10,\n  ADDR_POSTIDXIND: 11,\n  ADDR_INDABS: 12,\n\n  setOp: function(inst, op, addr, size, cycles) {\n    this.opdata[op] =\n      (inst & 0xff) |\n      ((addr & 0xff) << 8) |\n      ((size & 0xff) << 16) |\n      ((cycles & 0xff) << 24);\n  }\n};\n\nmodule.exports = CPU;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Tile = __webpack_require__(2);\nvar utils = __webpack_require__(0);\n\nvar PPU = function(nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.vramMem = null;\n  this.spriteMem = null;\n  this.vramAddress = null;\n  this.vramTmpAddress = null;\n  this.vramBufferedReadValue = null;\n  this.firstWrite = null;\n  this.sramAddress = null;\n  this.currentMirroring = null;\n  this.requestEndFrame = null;\n  this.nmiOk = null;\n  this.dummyCycleToggle = null;\n  this.validTileData = null;\n  this.nmiCounter = null;\n  this.scanlineAlreadyRendered = null;\n  this.f_nmiOnVblank = null;\n  this.f_spriteSize = null;\n  this.f_bgPatternTable = null;\n  this.f_spPatternTable = null;\n  this.f_addrInc = null;\n  this.f_nTblAddress = null;\n  this.f_color = null;\n  this.f_spVisibility = null;\n  this.f_bgVisibility = null;\n  this.f_spClipping = null;\n  this.f_bgClipping = null;\n  this.f_dispType = null;\n  this.cntFV = null;\n  this.cntV = null;\n  this.cntH = null;\n  this.cntVT = null;\n  this.cntHT = null;\n  this.regFV = null;\n  this.regV = null;\n  this.regH = null;\n  this.regVT = null;\n  this.regHT = null;\n  this.regFH = null;\n  this.regS = null;\n  this.curNt = null;\n  this.attrib = null;\n  this.buffer = null;\n  this.bgbuffer = null;\n  this.pixrendered = null;\n\n  this.validTileData = null;\n  this.scantile = null;\n  this.scanline = null;\n  this.lastRenderedScanline = null;\n  this.curX = null;\n  this.sprX = null;\n  this.sprY = null;\n  this.sprTile = null;\n  this.sprCol = null;\n  this.vertFlip = null;\n  this.horiFlip = null;\n  this.bgPriority = null;\n  this.spr0HitX = null;\n  this.spr0HitY = null;\n  this.hitSpr0 = null;\n  this.sprPalette = null;\n  this.imgPalette = null;\n  this.ptTile = null;\n  this.ntable1 = null;\n  this.currentMirroring = null;\n  this.nameTable = null;\n  this.vramMirrorTable = null;\n  this.palTable = null;\n\n  // Rendering Options:\n  this.showSpr0Hit = false;\n  this.clipToTvSize = true;\n\n  this.reset();\n};\n\nPPU.prototype = {\n  // Status flags:\n  STATUS_VRAMWRITE: 4,\n  STATUS_SLSPRITECOUNT: 5,\n  STATUS_SPRITE0HIT: 6,\n  STATUS_VBLANK: 7,\n\n  reset: function() {\n    var i;\n\n    // Memory\n    this.vramMem = new Array(0x8000);\n    this.spriteMem = new Array(0x100);\n    for (i = 0; i < this.vramMem.length; i++) {\n      this.vramMem[i] = 0;\n    }\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteMem[i] = 0;\n    }\n\n    // VRAM I/O:\n    this.vramAddress = null;\n    this.vramTmpAddress = null;\n    this.vramBufferedReadValue = 0;\n    this.firstWrite = true; // VRAM/Scroll Hi/Lo latch\n\n    // SPR-RAM I/O:\n    this.sramAddress = 0; // 8-bit only.\n\n    this.currentMirroring = -1;\n    this.requestEndFrame = false;\n    this.nmiOk = false;\n    this.dummyCycleToggle = false;\n    this.validTileData = false;\n    this.nmiCounter = 0;\n    this.scanlineAlreadyRendered = null;\n\n    // Control Flags Register 1:\n    this.f_nmiOnVblank = 0; // NMI on VBlank. 0=disable, 1=enable\n    this.f_spriteSize = 0; // Sprite size. 0=8x8, 1=8x16\n    this.f_bgPatternTable = 0; // Background Pattern Table address. 0=0x0000,1=0x1000\n    this.f_spPatternTable = 0; // Sprite Pattern Table address. 0=0x0000,1=0x1000\n    this.f_addrInc = 0; // PPU Address Increment. 0=1,1=32\n    this.f_nTblAddress = 0; // Name Table Address. 0=0x2000,1=0x2400,2=0x2800,3=0x2C00\n\n    // Control Flags Register 2:\n    this.f_color = 0; // Background color. 0=black, 1=blue, 2=green, 4=red\n    this.f_spVisibility = 0; // Sprite visibility. 0=not displayed,1=displayed\n    this.f_bgVisibility = 0; // Background visibility. 0=Not Displayed,1=displayed\n    this.f_spClipping = 0; // Sprite clipping. 0=Sprites invisible in left 8-pixel column,1=No clipping\n    this.f_bgClipping = 0; // Background clipping. 0=BG invisible in left 8-pixel column, 1=No clipping\n    this.f_dispType = 0; // Display type. 0=color, 1=monochrome\n\n    // Counters:\n    this.cntFV = 0;\n    this.cntV = 0;\n    this.cntH = 0;\n    this.cntVT = 0;\n    this.cntHT = 0;\n\n    // Registers:\n    this.regFV = 0;\n    this.regV = 0;\n    this.regH = 0;\n    this.regVT = 0;\n    this.regHT = 0;\n    this.regFH = 0;\n    this.regS = 0;\n\n    // These are temporary variables used in rendering and sound procedures.\n    // Their states outside of those procedures can be ignored.\n    // TODO: the use of this is a bit weird, investigate\n    this.curNt = null;\n\n    // Variables used when rendering:\n    this.attrib = new Array(32);\n    this.buffer = new Array(256 * 240);\n    this.bgbuffer = new Array(256 * 240);\n    this.pixrendered = new Array(256 * 240);\n\n    this.validTileData = null;\n\n    this.scantile = new Array(32);\n\n    // Initialize misc vars:\n    this.scanline = 0;\n    this.lastRenderedScanline = -1;\n    this.curX = 0;\n\n    // Sprite data:\n    this.sprX = new Array(64); // X coordinate\n    this.sprY = new Array(64); // Y coordinate\n    this.sprTile = new Array(64); // Tile Index (into pattern table)\n    this.sprCol = new Array(64); // Upper two bits of color\n    this.vertFlip = new Array(64); // Vertical Flip\n    this.horiFlip = new Array(64); // Horizontal Flip\n    this.bgPriority = new Array(64); // Background priority\n    this.spr0HitX = 0; // Sprite #0 hit X coordinate\n    this.spr0HitY = 0; // Sprite #0 hit Y coordinate\n    this.hitSpr0 = false;\n\n    // Palette data:\n    this.sprPalette = new Array(16);\n    this.imgPalette = new Array(16);\n\n    // Create pattern table tile buffers:\n    this.ptTile = new Array(512);\n    for (i = 0; i < 512; i++) {\n      this.ptTile[i] = new Tile();\n    }\n\n    // Create nametable buffers:\n    // Name table data:\n    this.ntable1 = new Array(4);\n    this.currentMirroring = -1;\n    this.nameTable = new Array(4);\n    for (i = 0; i < 4; i++) {\n      this.nameTable[i] = new NameTable(32, 32, \"Nt\" + i);\n    }\n\n    // Initialize mirroring lookup table:\n    this.vramMirrorTable = new Array(0x8000);\n    for (i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    this.palTable = new PaletteTable();\n    this.palTable.loadNTSCPalette();\n    //this.palTable.loadDefaultPalette();\n\n    this.updateControlReg1(0);\n    this.updateControlReg2(0);\n  },\n\n  // Sets Nametable mirroring.\n  setMirroring: function(mirroring) {\n    if (mirroring === this.currentMirroring) {\n      return;\n    }\n\n    this.currentMirroring = mirroring;\n    this.triggerRendering();\n\n    // Remove mirroring:\n    if (this.vramMirrorTable === null) {\n      this.vramMirrorTable = new Array(0x8000);\n    }\n    for (var i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    // Palette mirroring:\n    this.defineMirrorRegion(0x3f20, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f40, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f80, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3fc0, 0x3f00, 0x20);\n\n    // Additional mirroring:\n    this.defineMirrorRegion(0x3000, 0x2000, 0xf00);\n    this.defineMirrorRegion(0x4000, 0x0000, 0x4000);\n\n    if (mirroring === this.nes.rom.HORIZONTAL_MIRRORING) {\n      // Horizontal mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2800, 0x400);\n    } else if (mirroring === this.nes.rom.VERTICAL_MIRRORING) {\n      // Vertical mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING) {\n      // Single Screen mirroring\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 0;\n\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2000, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING2) {\n      this.ntable1[0] = 1;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2400, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else {\n      // Assume Four-screen mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 2;\n      this.ntable1[3] = 3;\n    }\n  },\n\n  // Define a mirrored area in the address lookup table.\n  // Assumes the regions don't overlap.\n  // The 'to' region is the region that is physically in memory.\n  defineMirrorRegion: function(fromStart, toStart, size) {\n    for (var i = 0; i < size; i++) {\n      this.vramMirrorTable[fromStart + i] = toStart + i;\n    }\n  },\n\n  startVBlank: function() {\n    // Do NMI:\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n\n    // Make sure everything is rendered:\n    if (this.lastRenderedScanline < 239) {\n      this.renderFramePartially(\n        this.lastRenderedScanline + 1,\n        240 - this.lastRenderedScanline\n      );\n    }\n\n    // End frame:\n    this.endFrame();\n\n    // Reset scanline counter:\n    this.lastRenderedScanline = -1;\n  },\n\n  endScanline: function() {\n    switch (this.scanline) {\n      case 19:\n        // Dummy scanline.\n        // May be variable length:\n        if (this.dummyCycleToggle) {\n          // Remove dead cycle at end of scanline,\n          // for next scanline:\n          this.curX = 1;\n          this.dummyCycleToggle = !this.dummyCycleToggle;\n        }\n        break;\n\n      case 20:\n        // Clear VBlank flag:\n        this.setStatusFlag(this.STATUS_VBLANK, false);\n\n        // Clear Sprite #0 hit flag:\n        this.setStatusFlag(this.STATUS_SPRITE0HIT, false);\n        this.hitSpr0 = false;\n        this.spr0HitX = -1;\n        this.spr0HitY = -1;\n\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Update counters:\n          this.cntFV = this.regFV;\n          this.cntV = this.regV;\n          this.cntH = this.regH;\n          this.cntVT = this.regVT;\n          this.cntHT = this.regHT;\n\n          if (this.f_bgVisibility === 1) {\n            // Render dummy scanline:\n            this.renderBgScanline(false, 0);\n          }\n        }\n\n        if (this.f_bgVisibility === 1 && this.f_spVisibility === 1) {\n          // Check sprite 0 hit for first scanline:\n          this.checkSprite0(0);\n        }\n\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Clock mapper IRQ Counter:\n          this.nes.mmap.clockIrqCounter();\n        }\n        break;\n\n      case 261:\n        // Dead scanline, no rendering.\n        // Set VINT:\n        this.setStatusFlag(this.STATUS_VBLANK, true);\n        this.requestEndFrame = true;\n        this.nmiCounter = 9;\n\n        // Wrap around:\n        this.scanline = -1; // will be incremented to 0\n\n        break;\n\n      default:\n        if (this.scanline >= 21 && this.scanline <= 260) {\n          // Render normally:\n          if (this.f_bgVisibility === 1) {\n            if (!this.scanlineAlreadyRendered) {\n              // update scroll:\n              this.cntHT = this.regHT;\n              this.cntH = this.regH;\n              this.renderBgScanline(true, this.scanline + 1 - 21);\n            }\n            this.scanlineAlreadyRendered = false;\n\n            // Check for sprite 0 (next scanline):\n            if (!this.hitSpr0 && this.f_spVisibility === 1) {\n              if (\n                this.sprX[0] >= -7 &&\n                this.sprX[0] < 256 &&\n                this.sprY[0] + 1 <= this.scanline - 20 &&\n                this.sprY[0] + 1 + (this.f_spriteSize === 0 ? 8 : 16) >=\n                  this.scanline - 20\n              ) {\n                if (this.checkSprite0(this.scanline - 20)) {\n                  this.hitSpr0 = true;\n                }\n              }\n            }\n          }\n\n          if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n            // Clock mapper IRQ Counter:\n            this.nes.mmap.clockIrqCounter();\n          }\n        }\n    }\n\n    this.scanline++;\n    this.regsToAddress();\n    this.cntsToAddress();\n  },\n\n  startFrame: function() {\n    // Set background color:\n    var bgColor = 0;\n\n    if (this.f_dispType === 0) {\n      // Color display.\n      // f_color determines color emphasis.\n      // Use first entry of image palette as BG color.\n      bgColor = this.imgPalette[0];\n    } else {\n      // Monochrome display.\n      // f_color determines the bg color.\n      switch (this.f_color) {\n        case 0:\n          // Black\n          bgColor = 0x00000;\n          break;\n        case 1:\n          // Green\n          bgColor = 0x00ff00;\n          break;\n        case 2:\n          // Blue\n          bgColor = 0xff0000;\n          break;\n        case 3:\n          // Invalid. Use black.\n          bgColor = 0x000000;\n          break;\n        case 4:\n          // Red\n          bgColor = 0x0000ff;\n          break;\n        default:\n          // Invalid. Use black.\n          bgColor = 0x0;\n      }\n    }\n\n    var buffer = this.buffer;\n    var i;\n    for (i = 0; i < 256 * 240; i++) {\n      buffer[i] = bgColor;\n    }\n    var pixrendered = this.pixrendered;\n    for (i = 0; i < pixrendered.length; i++) {\n      pixrendered[i] = 65;\n    }\n  },\n\n  endFrame: function() {\n    var i, x, y;\n    var buffer = this.buffer;\n\n    // Draw spr#0 hit coordinates:\n    if (this.showSpr0Hit) {\n      // Spr 0 position:\n      if (\n        this.sprX[0] >= 0 &&\n        this.sprX[0] < 256 &&\n        this.sprY[0] >= 0 &&\n        this.sprY[0] < 240\n      ) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.sprY[0] << 8) + i] = 0xff5555;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.sprX[0]] = 0xff5555;\n        }\n      }\n      // Hit position:\n      if (\n        this.spr0HitX >= 0 &&\n        this.spr0HitX < 256 &&\n        this.spr0HitY >= 0 &&\n        this.spr0HitY < 240\n      ) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.spr0HitY << 8) + i] = 0x55ff55;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.spr0HitX] = 0x55ff55;\n        }\n      }\n    }\n\n    // This is a bit lazy..\n    // if either the sprites or the background should be clipped,\n    // both are clipped after rendering is finished.\n    if (\n      this.clipToTvSize ||\n      this.f_bgClipping === 0 ||\n      this.f_spClipping === 0\n    ) {\n      // Clip left 8-pixels column:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + x] = 0;\n        }\n      }\n    }\n\n    if (this.clipToTvSize) {\n      // Clip right 8-pixels column too:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + 255 - x] = 0;\n        }\n      }\n    }\n\n    // Clip top and bottom 8 pixels:\n    if (this.clipToTvSize) {\n      for (y = 0; y < 8; y++) {\n        for (x = 0; x < 256; x++) {\n          buffer[(y << 8) + x] = 0;\n          buffer[((239 - y) << 8) + x] = 0;\n        }\n      }\n    }\n\n    this.nes.ui.writeFrame(buffer);\n  },\n\n  updateControlReg1: function(value) {\n    this.triggerRendering();\n\n    this.f_nmiOnVblank = (value >> 7) & 1;\n    this.f_spriteSize = (value >> 5) & 1;\n    this.f_bgPatternTable = (value >> 4) & 1;\n    this.f_spPatternTable = (value >> 3) & 1;\n    this.f_addrInc = (value >> 2) & 1;\n    this.f_nTblAddress = value & 3;\n\n    this.regV = (value >> 1) & 1;\n    this.regH = value & 1;\n    this.regS = (value >> 4) & 1;\n  },\n\n  updateControlReg2: function(value) {\n    this.triggerRendering();\n\n    this.f_color = (value >> 5) & 7;\n    this.f_spVisibility = (value >> 4) & 1;\n    this.f_bgVisibility = (value >> 3) & 1;\n    this.f_spClipping = (value >> 2) & 1;\n    this.f_bgClipping = (value >> 1) & 1;\n    this.f_dispType = value & 1;\n\n    if (this.f_dispType === 0) {\n      this.palTable.setEmphasis(this.f_color);\n    }\n    this.updatePalettes();\n  },\n\n  setStatusFlag: function(flag, value) {\n    var n = 1 << flag;\n    this.nes.cpu.mem[0x2002] =\n      (this.nes.cpu.mem[0x2002] & (255 - n)) | (value ? n : 0);\n  },\n\n  // CPU Register $2002:\n  // Read the Status Register.\n  readStatusRegister: function() {\n    var tmp = this.nes.cpu.mem[0x2002];\n\n    // Reset scroll & VRAM Address toggle:\n    this.firstWrite = true;\n\n    // Clear VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, false);\n\n    // Fetch status data:\n    return tmp;\n  },\n\n  // CPU Register $2003:\n  // Write the SPR-RAM address that is used for sramWrite (Register 0x2004 in CPU memory map)\n  writeSRAMAddress: function(address) {\n    this.sramAddress = address;\n  },\n\n  // CPU Register $2004 (R):\n  // Read from SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramLoad: function() {\n    /*short tmp = sprMem.load(sramAddress);\n        sramAddress++; // Increment address\n        sramAddress%=0x100;\n        return tmp;*/\n    return this.spriteMem[this.sramAddress];\n  },\n\n  // CPU Register $2004 (W):\n  // Write to SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramWrite: function(value) {\n    this.spriteMem[this.sramAddress] = value;\n    this.spriteRamWriteUpdate(this.sramAddress, value);\n    this.sramAddress++; // Increment address\n    this.sramAddress %= 0x100;\n  },\n\n  // CPU Register $2005:\n  // Write to scroll registers.\n  // The first write is the vertical offset, the second is the\n  // horizontal offset:\n  scrollWrite: function(value) {\n    this.triggerRendering();\n\n    if (this.firstWrite) {\n      // First write, horizontal scroll:\n      this.regHT = (value >> 3) & 31;\n      this.regFH = value & 7;\n    } else {\n      // Second write, vertical scroll:\n      this.regFV = value & 7;\n      this.regVT = (value >> 3) & 31;\n    }\n    this.firstWrite = !this.firstWrite;\n  },\n\n  // CPU Register $2006:\n  // Sets the adress used when reading/writing from/to VRAM.\n  // The first write sets the high byte, the second the low byte.\n  writeVRAMAddress: function(address) {\n    if (this.firstWrite) {\n      this.regFV = (address >> 4) & 3;\n      this.regV = (address >> 3) & 1;\n      this.regH = (address >> 2) & 1;\n      this.regVT = (this.regVT & 7) | ((address & 3) << 3);\n    } else {\n      this.triggerRendering();\n\n      this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\n      this.regHT = address & 31;\n\n      this.cntFV = this.regFV;\n      this.cntV = this.regV;\n      this.cntH = this.regH;\n      this.cntVT = this.regVT;\n      this.cntHT = this.regHT;\n\n      this.checkSprite0(this.scanline - 20);\n    }\n\n    this.firstWrite = !this.firstWrite;\n\n    // Invoke mapper latch:\n    this.cntsToAddress();\n    if (this.vramAddress < 0x2000) {\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n  },\n\n  // CPU Register $2007(R):\n  // Read from PPU memory. The address should be set first.\n  vramLoad: function() {\n    var tmp;\n\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    // If address is in range 0x0000-0x3EFF, return buffered values:\n    if (this.vramAddress <= 0x3eff) {\n      tmp = this.vramBufferedReadValue;\n\n      // Update buffered value:\n      if (this.vramAddress < 0x2000) {\n        this.vramBufferedReadValue = this.vramMem[this.vramAddress];\n      } else {\n        this.vramBufferedReadValue = this.mirroredLoad(this.vramAddress);\n      }\n\n      // Mapper latch access:\n      if (this.vramAddress < 0x2000) {\n        this.nes.mmap.latchAccess(this.vramAddress);\n      }\n\n      // Increment by either 1 or 32, depending on d2 of Control Register 1:\n      this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n\n      this.cntsFromAddress();\n      this.regsFromAddress();\n\n      return tmp; // Return the previous buffered value.\n    }\n\n    // No buffering in this mem range. Read normally.\n    tmp = this.mirroredLoad(this.vramAddress);\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n\n    this.cntsFromAddress();\n    this.regsFromAddress();\n\n    return tmp;\n  },\n\n  // CPU Register $2007(W):\n  // Write to PPU memory. The address should be set first.\n  vramWrite: function(value) {\n    this.triggerRendering();\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    if (this.vramAddress >= 0x2000) {\n      // Mirroring is used.\n      this.mirroredWrite(this.vramAddress, value);\n    } else {\n      // Write normally.\n      this.writeMem(this.vramAddress, value);\n\n      // Invoke mapper latch:\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n    this.regsFromAddress();\n    this.cntsFromAddress();\n  },\n\n  // CPU Register $4014:\n  // Write 256 bytes of main memory\n  // into Sprite RAM.\n  sramDMA: function(value) {\n    var baseAddress = value * 0x100;\n    var data;\n    for (var i = this.sramAddress; i < 256; i++) {\n      data = this.nes.cpu.mem[baseAddress + i];\n      this.spriteMem[i] = data;\n      this.spriteRamWriteUpdate(i, data);\n    }\n\n    this.nes.cpu.haltCycles(513);\n  },\n\n  // Updates the scroll registers from a new VRAM address.\n  regsFromAddress: function() {\n    var address = (this.vramTmpAddress >> 8) & 0xff;\n    this.regFV = (address >> 4) & 7;\n    this.regV = (address >> 3) & 1;\n    this.regH = (address >> 2) & 1;\n    this.regVT = (this.regVT & 7) | ((address & 3) << 3);\n\n    address = this.vramTmpAddress & 0xff;\n    this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\n    this.regHT = address & 31;\n  },\n\n  // Updates the scroll registers from a new VRAM address.\n  cntsFromAddress: function() {\n    var address = (this.vramAddress >> 8) & 0xff;\n    this.cntFV = (address >> 4) & 3;\n    this.cntV = (address >> 3) & 1;\n    this.cntH = (address >> 2) & 1;\n    this.cntVT = (this.cntVT & 7) | ((address & 3) << 3);\n\n    address = this.vramAddress & 0xff;\n    this.cntVT = (this.cntVT & 24) | ((address >> 5) & 7);\n    this.cntHT = address & 31;\n  },\n\n  regsToAddress: function() {\n    var b1 = (this.regFV & 7) << 4;\n    b1 |= (this.regV & 1) << 3;\n    b1 |= (this.regH & 1) << 2;\n    b1 |= (this.regVT >> 3) & 3;\n\n    var b2 = (this.regVT & 7) << 5;\n    b2 |= this.regHT & 31;\n\n    this.vramTmpAddress = ((b1 << 8) | b2) & 0x7fff;\n  },\n\n  cntsToAddress: function() {\n    var b1 = (this.cntFV & 7) << 4;\n    b1 |= (this.cntV & 1) << 3;\n    b1 |= (this.cntH & 1) << 2;\n    b1 |= (this.cntVT >> 3) & 3;\n\n    var b2 = (this.cntVT & 7) << 5;\n    b2 |= this.cntHT & 31;\n\n    this.vramAddress = ((b1 << 8) | b2) & 0x7fff;\n  },\n\n  incTileCounter: function(count) {\n    for (var i = count; i !== 0; i--) {\n      this.cntHT++;\n      if (this.cntHT === 32) {\n        this.cntHT = 0;\n        this.cntVT++;\n        if (this.cntVT >= 30) {\n          this.cntH++;\n          if (this.cntH === 2) {\n            this.cntH = 0;\n            this.cntV++;\n            if (this.cntV === 2) {\n              this.cntV = 0;\n              this.cntFV++;\n              this.cntFV &= 0x7;\n            }\n          }\n        }\n      }\n    }\n  },\n\n  // Reads from memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredLoad: function(address) {\n    return this.vramMem[this.vramMirrorTable[address]];\n  },\n\n  // Writes to memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredWrite: function(address, value) {\n    if (address >= 0x3f00 && address < 0x3f20) {\n      // Palette write mirroring.\n      if (address === 0x3f00 || address === 0x3f10) {\n        this.writeMem(0x3f00, value);\n        this.writeMem(0x3f10, value);\n      } else if (address === 0x3f04 || address === 0x3f14) {\n        this.writeMem(0x3f04, value);\n        this.writeMem(0x3f14, value);\n      } else if (address === 0x3f08 || address === 0x3f18) {\n        this.writeMem(0x3f08, value);\n        this.writeMem(0x3f18, value);\n      } else if (address === 0x3f0c || address === 0x3f1c) {\n        this.writeMem(0x3f0c, value);\n        this.writeMem(0x3f1c, value);\n      } else {\n        this.writeMem(address, value);\n      }\n    } else {\n      // Use lookup table for mirrored address:\n      if (address < this.vramMirrorTable.length) {\n        this.writeMem(this.vramMirrorTable[address], value);\n      } else {\n        throw new Error(\"Invalid VRAM address: \" + address.toString(16));\n      }\n    }\n  },\n\n  triggerRendering: function() {\n    if (this.scanline >= 21 && this.scanline <= 260) {\n      // Render sprites, and combine:\n      this.renderFramePartially(\n        this.lastRenderedScanline + 1,\n        this.scanline - 21 - this.lastRenderedScanline\n      );\n\n      // Set last rendered scanline:\n      this.lastRenderedScanline = this.scanline - 21;\n    }\n  },\n\n  renderFramePartially: function(startScan, scanCount) {\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, true);\n    }\n\n    if (this.f_bgVisibility === 1) {\n      var si = startScan << 8;\n      var ei = (startScan + scanCount) << 8;\n      if (ei > 0xf000) {\n        ei = 0xf000;\n      }\n      var buffer = this.buffer;\n      var bgbuffer = this.bgbuffer;\n      var pixrendered = this.pixrendered;\n      for (var destIndex = si; destIndex < ei; destIndex++) {\n        if (pixrendered[destIndex] > 0xff) {\n          buffer[destIndex] = bgbuffer[destIndex];\n        }\n      }\n    }\n\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, false);\n    }\n\n    this.validTileData = false;\n  },\n\n  renderBgScanline: function(bgbuffer, scan) {\n    var baseTile = this.regS === 0 ? 0 : 256;\n    var destIndex = (scan << 8) - this.regFH;\n\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n\n    this.cntHT = this.regHT;\n    this.cntH = this.regH;\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n\n    if (scan < 240 && scan - this.cntFV >= 0) {\n      var tscanoffset = this.cntFV << 3;\n      var scantile = this.scantile;\n      var attrib = this.attrib;\n      var ptTile = this.ptTile;\n      var nameTable = this.nameTable;\n      var imgPalette = this.imgPalette;\n      var pixrendered = this.pixrendered;\n      var targetBuffer = bgbuffer ? this.bgbuffer : this.buffer;\n\n      var t, tpix, att, col;\n\n      for (var tile = 0; tile < 32; tile++) {\n        if (scan >= 0) {\n          // Fetch tile & attrib data:\n          if (this.validTileData) {\n            // Get data from array:\n            t = scantile[tile];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = attrib[tile];\n          } else {\n            // Fetch data:\n            t =\n              ptTile[\n                baseTile +\n                  nameTable[this.curNt].getTileIndex(this.cntHT, this.cntVT)\n              ];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = nameTable[this.curNt].getAttrib(this.cntHT, this.cntVT);\n            scantile[tile] = t;\n            attrib[tile] = att;\n          }\n\n          // Render tile scanline:\n          var sx = 0;\n          var x = (tile << 3) - this.regFH;\n\n          if (x > -8) {\n            if (x < 0) {\n              destIndex -= x;\n              sx = -x;\n            }\n            if (t.opaque[this.cntFV]) {\n              for (; sx < 8; sx++) {\n                targetBuffer[destIndex] =\n                  imgPalette[tpix[tscanoffset + sx] + att];\n                pixrendered[destIndex] |= 256;\n                destIndex++;\n              }\n            } else {\n              for (; sx < 8; sx++) {\n                col = tpix[tscanoffset + sx];\n                if (col !== 0) {\n                  targetBuffer[destIndex] = imgPalette[col + att];\n                  pixrendered[destIndex] |= 256;\n                }\n                destIndex++;\n              }\n            }\n          }\n        }\n\n        // Increase Horizontal Tile Counter:\n        if (++this.cntHT === 32) {\n          this.cntHT = 0;\n          this.cntH++;\n          this.cntH %= 2;\n          this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n        }\n      }\n\n      // Tile data for one row should now have been fetched,\n      // so the data in the array is valid.\n      this.validTileData = true;\n    }\n\n    // update vertical scroll:\n    this.cntFV++;\n    if (this.cntFV === 8) {\n      this.cntFV = 0;\n      this.cntVT++;\n      if (this.cntVT === 30) {\n        this.cntVT = 0;\n        this.cntV++;\n        this.cntV %= 2;\n        this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n      } else if (this.cntVT === 32) {\n        this.cntVT = 0;\n      }\n\n      // Invalidate fetched data:\n      this.validTileData = false;\n    }\n  },\n\n  renderSpritesPartially: function(startscan, scancount, bgPri) {\n    if (this.f_spVisibility === 1) {\n      for (var i = 0; i < 64; i++) {\n        if (\n          this.bgPriority[i] === bgPri &&\n          this.sprX[i] >= 0 &&\n          this.sprX[i] < 256 &&\n          this.sprY[i] + 8 >= startscan &&\n          this.sprY[i] < startscan + scancount\n        ) {\n          // Show sprite.\n          if (this.f_spriteSize === 0) {\n            // 8x8 sprites\n\n            this.srcy1 = 0;\n            this.srcy2 = 8;\n\n            if (this.sprY[i] < startscan) {\n              this.srcy1 = startscan - this.sprY[i] - 1;\n            }\n\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              this.srcy2 = startscan + scancount - this.sprY[i] + 1;\n            }\n\n            if (this.f_spPatternTable === 0) {\n              this.ptTile[this.sprTile[i]].render(\n                this.buffer,\n                0,\n                this.srcy1,\n                8,\n                this.srcy2,\n                this.sprX[i],\n                this.sprY[i] + 1,\n                this.sprCol[i],\n                this.sprPalette,\n                this.horiFlip[i],\n                this.vertFlip[i],\n                i,\n                this.pixrendered\n              );\n            } else {\n              this.ptTile[this.sprTile[i] + 256].render(\n                this.buffer,\n                0,\n                this.srcy1,\n                8,\n                this.srcy2,\n                this.sprX[i],\n                this.sprY[i] + 1,\n                this.sprCol[i],\n                this.sprPalette,\n                this.horiFlip[i],\n                this.vertFlip[i],\n                i,\n                this.pixrendered\n              );\n            }\n          } else {\n            // 8x16 sprites\n            var top = this.sprTile[i];\n            if ((top & 1) !== 0) {\n              top = this.sprTile[i] - 1 + 256;\n            }\n\n            var srcy1 = 0;\n            var srcy2 = 8;\n\n            if (this.sprY[i] < startscan) {\n              srcy1 = startscan - this.sprY[i] - 1;\n            }\n\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              srcy2 = startscan + scancount - this.sprY[i];\n            }\n\n            this.ptTile[top + (this.vertFlip[i] ? 1 : 0)].render(\n              this.buffer,\n              0,\n              srcy1,\n              8,\n              srcy2,\n              this.sprX[i],\n              this.sprY[i] + 1,\n              this.sprCol[i],\n              this.sprPalette,\n              this.horiFlip[i],\n              this.vertFlip[i],\n              i,\n              this.pixrendered\n            );\n\n            srcy1 = 0;\n            srcy2 = 8;\n\n            if (this.sprY[i] + 8 < startscan) {\n              srcy1 = startscan - (this.sprY[i] + 8 + 1);\n            }\n\n            if (this.sprY[i] + 16 > startscan + scancount) {\n              srcy2 = startscan + scancount - (this.sprY[i] + 8);\n            }\n\n            this.ptTile[top + (this.vertFlip[i] ? 0 : 1)].render(\n              this.buffer,\n              0,\n              srcy1,\n              8,\n              srcy2,\n              this.sprX[i],\n              this.sprY[i] + 1 + 8,\n              this.sprCol[i],\n              this.sprPalette,\n              this.horiFlip[i],\n              this.vertFlip[i],\n              i,\n              this.pixrendered\n            );\n          }\n        }\n      }\n    }\n  },\n\n  checkSprite0: function(scan) {\n    this.spr0HitX = -1;\n    this.spr0HitY = -1;\n\n    var toffset;\n    var tIndexAdd = this.f_spPatternTable === 0 ? 0 : 256;\n    var x, y, t, i;\n    var bufferIndex;\n    var col;\n    var bgPri;\n\n    x = this.sprX[0];\n    y = this.sprY[0] + 1;\n\n    if (this.f_spriteSize === 0) {\n      // 8x8 sprites.\n\n      // Check range:\n      if (y <= scan && y + 8 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n        t = this.ptTile[this.sprTile[0] + tIndexAdd];\n        col = this.sprCol[0];\n        bgPri = this.bgPriority[0];\n\n        if (this.vertFlip[0]) {\n          toffset = 7 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n        toffset *= 8;\n\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    } else {\n      // 8x16 sprites:\n\n      // Check range:\n      if (y <= scan && y + 16 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n\n        if (this.vertFlip[0]) {\n          toffset = 15 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n\n        if (toffset < 8) {\n          // first half of sprite.\n          t = this.ptTile[\n            this.sprTile[0] +\n              (this.vertFlip[0] ? 1 : 0) +\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\n          ];\n        } else {\n          // second half of sprite.\n          t = this.ptTile[\n            this.sprTile[0] +\n              (this.vertFlip[0] ? 0 : 1) +\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\n          ];\n          if (this.vertFlip[0]) {\n            toffset = 15 - toffset;\n          } else {\n            toffset -= 8;\n          }\n        }\n        toffset *= 8;\n        col = this.sprCol[0];\n        bgPri = this.bgPriority[0];\n\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n\n  // This will write to PPU memory, and\n  // update internally buffered data\n  // appropriately.\n  writeMem: function(address, value) {\n    this.vramMem[address] = value;\n\n    // Update internally buffered data:\n    if (address < 0x2000) {\n      this.vramMem[address] = value;\n      this.patternWrite(address, value);\n    } else if (address >= 0x2000 && address < 0x23c0) {\n      this.nameTableWrite(this.ntable1[0], address - 0x2000, value);\n    } else if (address >= 0x23c0 && address < 0x2400) {\n      this.attribTableWrite(this.ntable1[0], address - 0x23c0, value);\n    } else if (address >= 0x2400 && address < 0x27c0) {\n      this.nameTableWrite(this.ntable1[1], address - 0x2400, value);\n    } else if (address >= 0x27c0 && address < 0x2800) {\n      this.attribTableWrite(this.ntable1[1], address - 0x27c0, value);\n    } else if (address >= 0x2800 && address < 0x2bc0) {\n      this.nameTableWrite(this.ntable1[2], address - 0x2800, value);\n    } else if (address >= 0x2bc0 && address < 0x2c00) {\n      this.attribTableWrite(this.ntable1[2], address - 0x2bc0, value);\n    } else if (address >= 0x2c00 && address < 0x2fc0) {\n      this.nameTableWrite(this.ntable1[3], address - 0x2c00, value);\n    } else if (address >= 0x2fc0 && address < 0x3000) {\n      this.attribTableWrite(this.ntable1[3], address - 0x2fc0, value);\n    } else if (address >= 0x3f00 && address < 0x3f20) {\n      this.updatePalettes();\n    }\n  },\n\n  // Reads data from $3f00 to $f20\n  // into the two buffered palettes.\n  updatePalettes: function() {\n    var i;\n\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.imgPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f00 + i] & 63\n        );\n      } else {\n        this.imgPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f00 + i] & 32\n        );\n      }\n    }\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.sprPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f10 + i] & 63\n        );\n      } else {\n        this.sprPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f10 + i] & 32\n        );\n      }\n    }\n  },\n\n  // Updates the internal pattern\n  // table buffers with this new byte.\n  // In vNES, there is a version of this with 4 arguments which isn't used.\n  patternWrite: function(address, value) {\n    var tileIndex = Math.floor(address / 16);\n    var leftOver = address % 16;\n    if (leftOver < 8) {\n      this.ptTile[tileIndex].setScanline(\n        leftOver,\n        value,\n        this.vramMem[address + 8]\n      );\n    } else {\n      this.ptTile[tileIndex].setScanline(\n        leftOver - 8,\n        this.vramMem[address - 8],\n        value\n      );\n    }\n  },\n\n  // Updates the internal name table buffers\n  // with this new byte.\n  nameTableWrite: function(index, address, value) {\n    this.nameTable[index].tile[address] = value;\n\n    // Update Sprite #0 hit:\n    //updateSpr0Hit();\n    this.checkSprite0(this.scanline - 20);\n  },\n\n  // Updates the internal pattern\n  // table buffers with this new attribute\n  // table byte.\n  attribTableWrite: function(index, address, value) {\n    this.nameTable[index].writeAttrib(address, value);\n  },\n\n  // Updates the internally buffered sprite\n  // data with this new byte of info.\n  spriteRamWriteUpdate: function(address, value) {\n    var tIndex = Math.floor(address / 4);\n\n    if (tIndex === 0) {\n      //updateSpr0Hit();\n      this.checkSprite0(this.scanline - 20);\n    }\n\n    if (address % 4 === 0) {\n      // Y coordinate\n      this.sprY[tIndex] = value;\n    } else if (address % 4 === 1) {\n      // Tile index\n      this.sprTile[tIndex] = value;\n    } else if (address % 4 === 2) {\n      // Attributes\n      this.vertFlip[tIndex] = (value & 0x80) !== 0;\n      this.horiFlip[tIndex] = (value & 0x40) !== 0;\n      this.bgPriority[tIndex] = (value & 0x20) !== 0;\n      this.sprCol[tIndex] = (value & 3) << 2;\n    } else if (address % 4 === 3) {\n      // X coordinate\n      this.sprX[tIndex] = value;\n    }\n  },\n\n  doNMI: function() {\n    // Set VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, true);\n    //nes.getCpu().doNonMaskableInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n  },\n\n  isPixelWhite: function(x, y) {\n    this.triggerRendering();\n    return this.nes.ppu.buffer[(y << 8) + x] === 0xffffff;\n  },\n\n  JSON_PROPERTIES: [\n    // Memory\n    \"vramMem\",\n    \"spriteMem\",\n    // Counters\n    \"cntFV\",\n    \"cntV\",\n    \"cntH\",\n    \"cntVT\",\n    \"cntHT\",\n    // Registers\n    \"regFV\",\n    \"regV\",\n    \"regH\",\n    \"regVT\",\n    \"regHT\",\n    \"regFH\",\n    \"regS\",\n    // VRAM addr\n    \"vramAddress\",\n    \"vramTmpAddress\",\n    // Control/Status registers\n    \"f_nmiOnVblank\",\n    \"f_spriteSize\",\n    \"f_bgPatternTable\",\n    \"f_spPatternTable\",\n    \"f_addrInc\",\n    \"f_nTblAddress\",\n    \"f_color\",\n    \"f_spVisibility\",\n    \"f_bgVisibility\",\n    \"f_spClipping\",\n    \"f_bgClipping\",\n    \"f_dispType\",\n    // VRAM I/O\n    \"vramBufferedReadValue\",\n    \"firstWrite\",\n    // Mirroring\n    \"currentMirroring\",\n    \"vramMirrorTable\",\n    \"ntable1\",\n    // SPR-RAM I/O\n    \"sramAddress\",\n    // Sprites. Most sprite data is rebuilt from spriteMem\n    \"hitSpr0\",\n    // Palettes\n    \"sprPalette\",\n    \"imgPalette\",\n    // Rendering progression\n    \"curX\",\n    \"scanline\",\n    \"lastRenderedScanline\",\n    \"curNt\",\n    \"scantile\",\n    // Used during rendering\n    \"attrib\",\n    \"buffer\",\n    \"bgbuffer\",\n    \"pixrendered\",\n    // Misc\n    \"requestEndFrame\",\n    \"nmiOk\",\n    \"dummyCycleToggle\",\n    \"nmiCounter\",\n    \"validTileData\",\n    \"scanlineAlreadyRendered\"\n  ],\n\n  toJSON: function() {\n    var i;\n    var state = utils.toJSON(this);\n\n    state.nameTable = [];\n    for (i = 0; i < this.nameTable.length; i++) {\n      state.nameTable[i] = this.nameTable[i].toJSON();\n    }\n\n    state.ptTile = [];\n    for (i = 0; i < this.ptTile.length; i++) {\n      state.ptTile[i] = this.ptTile[i].toJSON();\n    }\n\n    return state;\n  },\n\n  fromJSON: function(state) {\n    var i;\n\n    utils.fromJSON(this, state);\n\n    for (i = 0; i < this.nameTable.length; i++) {\n      this.nameTable[i].fromJSON(state.nameTable[i]);\n    }\n\n    for (i = 0; i < this.ptTile.length; i++) {\n      this.ptTile[i].fromJSON(state.ptTile[i]);\n    }\n\n    // Sprite data:\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteRamWriteUpdate(i, this.spriteMem[i]);\n    }\n  }\n};\n\nvar NameTable = function(width, height, name) {\n  this.width = width;\n  this.height = height;\n  this.name = name;\n\n  this.tile = new Array(width * height);\n  this.attrib = new Array(width * height);\n  for (var i = 0; i < width * height; i++) {\n    this.tile[i] = 0;\n    this.attrib[i] = 0;\n  }\n};\n\nNameTable.prototype = {\n  getTileIndex: function(x, y) {\n    return this.tile[y * this.width + x];\n  },\n\n  getAttrib: function(x, y) {\n    return this.attrib[y * this.width + x];\n  },\n\n  writeAttrib: function(index, value) {\n    var basex = (index % 8) * 4;\n    var basey = Math.floor(index / 8) * 4;\n    var add;\n    var tx, ty;\n    var attindex;\n\n    for (var sqy = 0; sqy < 2; sqy++) {\n      for (var sqx = 0; sqx < 2; sqx++) {\n        add = (value >> (2 * (sqy * 2 + sqx))) & 3;\n        for (var y = 0; y < 2; y++) {\n          for (var x = 0; x < 2; x++) {\n            tx = basex + sqx * 2 + x;\n            ty = basey + sqy * 2 + y;\n            attindex = ty * this.width + tx;\n            this.attrib[ty * this.width + tx] = (add << 2) & 12;\n          }\n        }\n      }\n    }\n  },\n\n  toJSON: function() {\n    return {\n      tile: this.tile,\n      attrib: this.attrib\n    };\n  },\n\n  fromJSON: function(s) {\n    this.tile = s.tile;\n    this.attrib = s.attrib;\n  }\n};\n\nvar PaletteTable = function() {\n  this.curTable = new Array(64);\n  this.emphTable = new Array(8);\n  this.currentEmph = -1;\n};\n\nPaletteTable.prototype = {\n  reset: function() {\n    this.setEmphasis(0);\n  },\n\n  loadNTSCPalette: function() {\n    // prettier-ignore\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n\n  loadPALPalette: function() {\n    // prettier-ignore\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n\n  makeTables: function() {\n    var r, g, b, col, i, rFactor, gFactor, bFactor;\n\n    // Calculate a table for each possible emphasis setting:\n    for (var emph = 0; emph < 8; emph++) {\n      // Determine color component factors:\n      rFactor = 1.0;\n      gFactor = 1.0;\n      bFactor = 1.0;\n\n      if ((emph & 1) !== 0) {\n        rFactor = 0.75;\n        bFactor = 0.75;\n      }\n      if ((emph & 2) !== 0) {\n        rFactor = 0.75;\n        gFactor = 0.75;\n      }\n      if ((emph & 4) !== 0) {\n        gFactor = 0.75;\n        bFactor = 0.75;\n      }\n\n      this.emphTable[emph] = new Array(64);\n\n      // Calculate table:\n      for (i = 0; i < 64; i++) {\n        col = this.curTable[i];\n        r = Math.floor(this.getRed(col) * rFactor);\n        g = Math.floor(this.getGreen(col) * gFactor);\n        b = Math.floor(this.getBlue(col) * bFactor);\n        this.emphTable[emph][i] = this.getRgb(r, g, b);\n      }\n    }\n  },\n\n  setEmphasis: function(emph) {\n    if (emph !== this.currentEmph) {\n      this.currentEmph = emph;\n      for (var i = 0; i < 64; i++) {\n        this.curTable[i] = this.emphTable[emph][i];\n      }\n    }\n  },\n\n  getEntry: function(yiq) {\n    return this.curTable[yiq];\n  },\n\n  getRed: function(rgb) {\n    return (rgb >> 16) & 0xff;\n  },\n\n  getGreen: function(rgb) {\n    return (rgb >> 8) & 0xff;\n  },\n\n  getBlue: function(rgb) {\n    return rgb & 0xff;\n  },\n\n  getRgb: function(r, g, b) {\n    return (r << 16) | (g << 8) | b;\n  },\n\n  loadDefaultPalette: function() {\n    this.curTable[0] = this.getRgb(117, 117, 117);\n    this.curTable[1] = this.getRgb(39, 27, 143);\n    this.curTable[2] = this.getRgb(0, 0, 171);\n    this.curTable[3] = this.getRgb(71, 0, 159);\n    this.curTable[4] = this.getRgb(143, 0, 119);\n    this.curTable[5] = this.getRgb(171, 0, 19);\n    this.curTable[6] = this.getRgb(167, 0, 0);\n    this.curTable[7] = this.getRgb(127, 11, 0);\n    this.curTable[8] = this.getRgb(67, 47, 0);\n    this.curTable[9] = this.getRgb(0, 71, 0);\n    this.curTable[10] = this.getRgb(0, 81, 0);\n    this.curTable[11] = this.getRgb(0, 63, 23);\n    this.curTable[12] = this.getRgb(27, 63, 95);\n    this.curTable[13] = this.getRgb(0, 0, 0);\n    this.curTable[14] = this.getRgb(0, 0, 0);\n    this.curTable[15] = this.getRgb(0, 0, 0);\n    this.curTable[16] = this.getRgb(188, 188, 188);\n    this.curTable[17] = this.getRgb(0, 115, 239);\n    this.curTable[18] = this.getRgb(35, 59, 239);\n    this.curTable[19] = this.getRgb(131, 0, 243);\n    this.curTable[20] = this.getRgb(191, 0, 191);\n    this.curTable[21] = this.getRgb(231, 0, 91);\n    this.curTable[22] = this.getRgb(219, 43, 0);\n    this.curTable[23] = this.getRgb(203, 79, 15);\n    this.curTable[24] = this.getRgb(139, 115, 0);\n    this.curTable[25] = this.getRgb(0, 151, 0);\n    this.curTable[26] = this.getRgb(0, 171, 0);\n    this.curTable[27] = this.getRgb(0, 147, 59);\n    this.curTable[28] = this.getRgb(0, 131, 139);\n    this.curTable[29] = this.getRgb(0, 0, 0);\n    this.curTable[30] = this.getRgb(0, 0, 0);\n    this.curTable[31] = this.getRgb(0, 0, 0);\n    this.curTable[32] = this.getRgb(255, 255, 255);\n    this.curTable[33] = this.getRgb(63, 191, 255);\n    this.curTable[34] = this.getRgb(95, 151, 255);\n    this.curTable[35] = this.getRgb(167, 139, 253);\n    this.curTable[36] = this.getRgb(247, 123, 255);\n    this.curTable[37] = this.getRgb(255, 119, 183);\n    this.curTable[38] = this.getRgb(255, 119, 99);\n    this.curTable[39] = this.getRgb(255, 155, 59);\n    this.curTable[40] = this.getRgb(243, 191, 63);\n    this.curTable[41] = this.getRgb(131, 211, 19);\n    this.curTable[42] = this.getRgb(79, 223, 75);\n    this.curTable[43] = this.getRgb(88, 248, 152);\n    this.curTable[44] = this.getRgb(0, 235, 219);\n    this.curTable[45] = this.getRgb(0, 0, 0);\n    this.curTable[46] = this.getRgb(0, 0, 0);\n    this.curTable[47] = this.getRgb(0, 0, 0);\n    this.curTable[48] = this.getRgb(255, 255, 255);\n    this.curTable[49] = this.getRgb(171, 231, 255);\n    this.curTable[50] = this.getRgb(199, 215, 255);\n    this.curTable[51] = this.getRgb(215, 203, 255);\n    this.curTable[52] = this.getRgb(255, 199, 255);\n    this.curTable[53] = this.getRgb(255, 199, 219);\n    this.curTable[54] = this.getRgb(255, 191, 179);\n    this.curTable[55] = this.getRgb(255, 219, 171);\n    this.curTable[56] = this.getRgb(255, 231, 163);\n    this.curTable[57] = this.getRgb(227, 255, 163);\n    this.curTable[58] = this.getRgb(171, 243, 191);\n    this.curTable[59] = this.getRgb(179, 255, 207);\n    this.curTable[60] = this.getRgb(159, 255, 243);\n    this.curTable[61] = this.getRgb(0, 0, 0);\n    this.curTable[62] = this.getRgb(0, 0, 0);\n    this.curTable[63] = this.getRgb(0, 0, 0);\n\n    this.makeTables();\n    this.setEmphasis(0);\n  }\n};\n\nmodule.exports = PPU;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nvar CPU_FREQ_NTSC = 1789772.5; //1789772.72727272d;\n// var CPU_FREQ_PAL = 1773447.4;\n\nvar PAPU = function(nes) {\n  this.nes = nes;\n\n  this.square1 = new ChannelSquare(this, true);\n  this.square2 = new ChannelSquare(this, false);\n  this.triangle = new ChannelTriangle(this);\n  this.noise = new ChannelNoise(this);\n  this.dmc = new ChannelDM(this);\n\n  this.frameIrqCounter = null;\n  this.frameIrqCounterMax = 4;\n  this.initCounter = 2048;\n  this.channelEnableValue = null;\n\n  this.sampleRate = 44100;\n\n  this.lengthLookup = null;\n  this.dmcFreqLookup = null;\n  this.noiseWavelengthLookup = null;\n  this.square_table = null;\n  this.tnd_table = null;\n\n  this.frameIrqEnabled = false;\n  this.frameIrqActive = null;\n  this.frameClockNow = null;\n  this.startedPlaying = false;\n  this.recordOutput = false;\n  this.initingHardware = false;\n\n  this.masterFrameCounter = null;\n  this.derivedFrameCounter = null;\n  this.countSequence = null;\n  this.sampleTimer = null;\n  this.frameTime = null;\n  this.sampleTimerMax = null;\n  this.sampleCount = null;\n  this.triValue = 0;\n\n  this.smpSquare1 = null;\n  this.smpSquare2 = null;\n  this.smpTriangle = null;\n  this.smpDmc = null;\n  this.accCount = null;\n\n  // DC removal vars:\n  this.prevSampleL = 0;\n  this.prevSampleR = 0;\n  this.smpAccumL = 0;\n  this.smpAccumR = 0;\n\n  // DAC range:\n  this.dacRange = 0;\n  this.dcValue = 0;\n\n  // Master volume:\n  this.masterVolume = 256;\n\n  // Stereo positioning:\n  this.stereoPosLSquare1 = null;\n  this.stereoPosLSquare2 = null;\n  this.stereoPosLTriangle = null;\n  this.stereoPosLNoise = null;\n  this.stereoPosLDMC = null;\n  this.stereoPosRSquare1 = null;\n  this.stereoPosRSquare2 = null;\n  this.stereoPosRTriangle = null;\n  this.stereoPosRNoise = null;\n  this.stereoPosRDMC = null;\n\n  this.extraCycles = null;\n\n  this.maxSample = null;\n  this.minSample = null;\n\n  // Panning:\n  this.panning = [80, 170, 100, 150, 128];\n  this.setPanning(this.panning);\n\n  // Initialize lookup tables:\n  this.initLengthLookup();\n  this.initDmcFrequencyLookup();\n  this.initNoiseWavelengthLookup();\n  this.initDACtables();\n\n  // Init sound registers:\n  for (var i = 0; i < 0x14; i++) {\n    if (i === 0x10) {\n      this.writeReg(0x4010, 0x10);\n    } else {\n      this.writeReg(0x4000 + i, 0);\n    }\n  }\n\n  this.reset();\n};\n\nPAPU.prototype = {\n  reset: function() {\n    this.sampleRate = this.nes.opts.sampleRate;\n    this.sampleTimerMax = Math.floor(\n      1024.0 *\n        CPU_FREQ_NTSC *\n        this.nes.opts.preferredFrameRate /\n        (this.sampleRate * 60.0)\n    );\n\n    this.frameTime = Math.floor(\n      14915.0 * this.nes.opts.preferredFrameRate / 60.0\n    );\n\n    this.sampleTimer = 0;\n\n    this.updateChannelEnable(0);\n    this.masterFrameCounter = 0;\n    this.derivedFrameCounter = 0;\n    this.countSequence = 0;\n    this.sampleCount = 0;\n    this.initCounter = 2048;\n    this.frameIrqEnabled = false;\n    this.initingHardware = false;\n\n    this.resetCounter();\n\n    this.square1.reset();\n    this.square2.reset();\n    this.triangle.reset();\n    this.noise.reset();\n    this.dmc.reset();\n\n    this.accCount = 0;\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n\n    this.frameIrqEnabled = false;\n    this.frameIrqCounterMax = 4;\n\n    this.channelEnableValue = 0xff;\n    this.startedPlaying = false;\n    this.prevSampleL = 0;\n    this.prevSampleR = 0;\n    this.smpAccumL = 0;\n    this.smpAccumR = 0;\n\n    this.maxSample = -500000;\n    this.minSample = 500000;\n  },\n\n  readReg: function(address) {\n    // Read 0x4015:\n    var tmp = 0;\n    tmp |= this.square1.getLengthStatus();\n    tmp |= this.square2.getLengthStatus() << 1;\n    tmp |= this.triangle.getLengthStatus() << 2;\n    tmp |= this.noise.getLengthStatus() << 3;\n    tmp |= this.dmc.getLengthStatus() << 4;\n    tmp |= (this.frameIrqActive && this.frameIrqEnabled ? 1 : 0) << 6;\n    tmp |= this.dmc.getIrqStatus() << 7;\n\n    this.frameIrqActive = false;\n    this.dmc.irqGenerated = false;\n\n    return tmp & 0xffff;\n  },\n\n  writeReg: function(address, value) {\n    if (address >= 0x4000 && address < 0x4004) {\n      // Square Wave 1 Control\n      this.square1.writeReg(address, value);\n      // console.log(\"Square Write\");\n    } else if (address >= 0x4004 && address < 0x4008) {\n      // Square 2 Control\n      this.square2.writeReg(address, value);\n    } else if (address >= 0x4008 && address < 0x400c) {\n      // Triangle Control\n      this.triangle.writeReg(address, value);\n    } else if (address >= 0x400c && address <= 0x400f) {\n      // Noise Control\n      this.noise.writeReg(address, value);\n    } else if (address === 0x4010) {\n      // DMC Play mode & DMA frequency\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4011) {\n      // DMC Delta Counter\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4012) {\n      // DMC Play code starting address\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4013) {\n      // DMC Play code length\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4015) {\n      // Channel enable\n      this.updateChannelEnable(value);\n\n      if (value !== 0 && this.initCounter > 0) {\n        // Start hardware initialization\n        this.initingHardware = true;\n      }\n\n      // DMC/IRQ Status\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4017) {\n      // Frame counter control\n      this.countSequence = (value >> 7) & 1;\n      this.masterFrameCounter = 0;\n      this.frameIrqActive = false;\n\n      if (((value >> 6) & 0x1) === 0) {\n        this.frameIrqEnabled = true;\n      } else {\n        this.frameIrqEnabled = false;\n      }\n\n      if (this.countSequence === 0) {\n        // NTSC:\n        this.frameIrqCounterMax = 4;\n        this.derivedFrameCounter = 4;\n      } else {\n        // PAL:\n        this.frameIrqCounterMax = 5;\n        this.derivedFrameCounter = 0;\n        this.frameCounterTick();\n      }\n    }\n  },\n\n  resetCounter: function() {\n    if (this.countSequence === 0) {\n      this.derivedFrameCounter = 4;\n    } else {\n      this.derivedFrameCounter = 0;\n    }\n  },\n\n  // Updates channel enable status.\n  // This is done on writes to the\n  // channel enable register (0x4015),\n  // and when the user enables/disables channels\n  // in the GUI.\n  updateChannelEnable: function(value) {\n    this.channelEnableValue = value & 0xffff;\n    this.square1.setEnabled((value & 1) !== 0);\n    this.square2.setEnabled((value & 2) !== 0);\n    this.triangle.setEnabled((value & 4) !== 0);\n    this.noise.setEnabled((value & 8) !== 0);\n    this.dmc.setEnabled((value & 16) !== 0);\n  },\n\n  // Clocks the frame counter. It should be clocked at\n  // twice the cpu speed, so the cycles will be\n  // divided by 2 for those counters that are\n  // clocked at cpu speed.\n  clockFrameCounter: function(nCycles) {\n    if (this.initCounter > 0) {\n      if (this.initingHardware) {\n        this.initCounter -= nCycles;\n        if (this.initCounter <= 0) {\n          this.initingHardware = false;\n        }\n        return;\n      }\n    }\n\n    // Don't process ticks beyond next sampling:\n    nCycles += this.extraCycles;\n    var maxCycles = this.sampleTimerMax - this.sampleTimer;\n    if (nCycles << 10 > maxCycles) {\n      this.extraCycles = ((nCycles << 10) - maxCycles) >> 10;\n      nCycles -= this.extraCycles;\n    } else {\n      this.extraCycles = 0;\n    }\n\n    var dmc = this.dmc;\n    var triangle = this.triangle;\n    var square1 = this.square1;\n    var square2 = this.square2;\n    var noise = this.noise;\n\n    // Clock DMC:\n    if (dmc.isEnabled) {\n      dmc.shiftCounter -= nCycles << 3;\n      while (dmc.shiftCounter <= 0 && dmc.dmaFrequency > 0) {\n        dmc.shiftCounter += dmc.dmaFrequency;\n        dmc.clockDmc();\n      }\n    }\n\n    // Clock Triangle channel Prog timer:\n    if (triangle.progTimerMax > 0) {\n      triangle.progTimerCount -= nCycles;\n      while (triangle.progTimerCount <= 0) {\n        triangle.progTimerCount += triangle.progTimerMax + 1;\n        if (triangle.linearCounter > 0 && triangle.lengthCounter > 0) {\n          triangle.triangleCounter++;\n          triangle.triangleCounter &= 0x1f;\n\n          if (triangle.isEnabled) {\n            if (triangle.triangleCounter >= 0x10) {\n              // Normal value.\n              triangle.sampleValue = triangle.triangleCounter & 0xf;\n            } else {\n              // Inverted value.\n              triangle.sampleValue = 0xf - (triangle.triangleCounter & 0xf);\n            }\n            triangle.sampleValue <<= 4;\n          }\n        }\n      }\n    }\n\n    // Clock Square channel 1 Prog timer:\n    square1.progTimerCount -= nCycles;\n    if (square1.progTimerCount <= 0) {\n      square1.progTimerCount += (square1.progTimerMax + 1) << 1;\n\n      square1.squareCounter++;\n      square1.squareCounter &= 0x7;\n      square1.updateSampleValue();\n    }\n\n    // Clock Square channel 2 Prog timer:\n    square2.progTimerCount -= nCycles;\n    if (square2.progTimerCount <= 0) {\n      square2.progTimerCount += (square2.progTimerMax + 1) << 1;\n\n      square2.squareCounter++;\n      square2.squareCounter &= 0x7;\n      square2.updateSampleValue();\n    }\n\n    // Clock noise channel Prog timer:\n    var acc_c = nCycles;\n    if (noise.progTimerCount - acc_c > 0) {\n      // Do all cycles at once:\n      noise.progTimerCount -= acc_c;\n      noise.accCount += acc_c;\n      noise.accValue += acc_c * noise.sampleValue;\n    } else {\n      // Slow-step:\n      while (acc_c-- > 0) {\n        if (--noise.progTimerCount <= 0 && noise.progTimerMax > 0) {\n          // Update noise shift register:\n          noise.shiftReg <<= 1;\n          noise.tmp =\n            ((noise.shiftReg << (noise.randomMode === 0 ? 1 : 6)) ^\n              noise.shiftReg) &\n            0x8000;\n          if (noise.tmp !== 0) {\n            // Sample value must be 0.\n            noise.shiftReg |= 0x01;\n            noise.randomBit = 0;\n            noise.sampleValue = 0;\n          } else {\n            // Find sample value:\n            noise.randomBit = 1;\n            if (noise.isEnabled && noise.lengthCounter > 0) {\n              noise.sampleValue = noise.masterVolume;\n            } else {\n              noise.sampleValue = 0;\n            }\n          }\n\n          noise.progTimerCount += noise.progTimerMax;\n        }\n\n        noise.accValue += noise.sampleValue;\n        noise.accCount++;\n      }\n    }\n\n    // Frame IRQ handling:\n    if (this.frameIrqEnabled && this.frameIrqActive) {\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n    }\n\n    // Clock frame counter at double CPU speed:\n    this.masterFrameCounter += nCycles << 1;\n    if (this.masterFrameCounter >= this.frameTime) {\n      // 240Hz tick:\n      this.masterFrameCounter -= this.frameTime;\n      this.frameCounterTick();\n    }\n\n    // Accumulate sample value:\n    this.accSample(nCycles);\n\n    // Clock sample timer:\n    this.sampleTimer += nCycles << 10;\n    if (this.sampleTimer >= this.sampleTimerMax) {\n      // Sample channels:\n      this.sample();\n      this.sampleTimer -= this.sampleTimerMax;\n    }\n  },\n\n  accSample: function(cycles) {\n    // Special treatment for triangle channel - need to interpolate.\n    if (this.triangle.sampleCondition) {\n      this.triValue = Math.floor(\n        (this.triangle.progTimerCount << 4) / (this.triangle.progTimerMax + 1)\n      );\n      if (this.triValue > 16) {\n        this.triValue = 16;\n      }\n      if (this.triangle.triangleCounter >= 16) {\n        this.triValue = 16 - this.triValue;\n      }\n\n      // Add non-interpolated sample value:\n      this.triValue += this.triangle.sampleValue;\n    }\n\n    // Now sample normally:\n    if (cycles === 2) {\n      this.smpTriangle += this.triValue << 1;\n      this.smpDmc += this.dmc.sample << 1;\n      this.smpSquare1 += this.square1.sampleValue << 1;\n      this.smpSquare2 += this.square2.sampleValue << 1;\n      this.accCount += 2;\n    } else if (cycles === 4) {\n      this.smpTriangle += this.triValue << 2;\n      this.smpDmc += this.dmc.sample << 2;\n      this.smpSquare1 += this.square1.sampleValue << 2;\n      this.smpSquare2 += this.square2.sampleValue << 2;\n      this.accCount += 4;\n    } else {\n      this.smpTriangle += cycles * this.triValue;\n      this.smpDmc += cycles * this.dmc.sample;\n      this.smpSquare1 += cycles * this.square1.sampleValue;\n      this.smpSquare2 += cycles * this.square2.sampleValue;\n      this.accCount += cycles;\n    }\n  },\n\n  frameCounterTick: function() {\n    this.derivedFrameCounter++;\n    if (this.derivedFrameCounter >= this.frameIrqCounterMax) {\n      this.derivedFrameCounter = 0;\n    }\n\n    if (this.derivedFrameCounter === 1 || this.derivedFrameCounter === 3) {\n      // Clock length & sweep:\n      this.triangle.clockLengthCounter();\n      this.square1.clockLengthCounter();\n      this.square2.clockLengthCounter();\n      this.noise.clockLengthCounter();\n      this.square1.clockSweep();\n      this.square2.clockSweep();\n    }\n\n    if (this.derivedFrameCounter >= 0 && this.derivedFrameCounter < 4) {\n      // Clock linear & decay:\n      this.square1.clockEnvDecay();\n      this.square2.clockEnvDecay();\n      this.noise.clockEnvDecay();\n      this.triangle.clockLinearCounter();\n    }\n\n    if (this.derivedFrameCounter === 3 && this.countSequence === 0) {\n      // Enable IRQ:\n      this.frameIrqActive = true;\n    }\n\n    // End of 240Hz tick\n  },\n\n  // Samples the channels, mixes the output together, then writes to buffer.\n  sample: function() {\n    var sq_index, tnd_index;\n\n    if (this.accCount > 0) {\n      this.smpSquare1 <<= 4;\n      this.smpSquare1 = Math.floor(this.smpSquare1 / this.accCount);\n\n      this.smpSquare2 <<= 4;\n      this.smpSquare2 = Math.floor(this.smpSquare2 / this.accCount);\n\n      this.smpTriangle = Math.floor(this.smpTriangle / this.accCount);\n\n      this.smpDmc <<= 4;\n      this.smpDmc = Math.floor(this.smpDmc / this.accCount);\n\n      this.accCount = 0;\n    } else {\n      this.smpSquare1 = this.square1.sampleValue << 4;\n      this.smpSquare2 = this.square2.sampleValue << 4;\n      this.smpTriangle = this.triangle.sampleValue;\n      this.smpDmc = this.dmc.sample << 4;\n    }\n\n    var smpNoise = Math.floor((this.noise.accValue << 4) / this.noise.accCount);\n    this.noise.accValue = smpNoise >> 4;\n    this.noise.accCount = 1;\n\n    // Stereo sound.\n\n    // Left channel:\n    sq_index =\n      (this.smpSquare1 * this.stereoPosLSquare1 +\n        this.smpSquare2 * this.stereoPosLSquare2) >>\n      8;\n    tnd_index =\n      (3 * this.smpTriangle * this.stereoPosLTriangle +\n        (smpNoise << 1) * this.stereoPosLNoise +\n        this.smpDmc * this.stereoPosLDMC) >>\n      8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueL =\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Right channel:\n    sq_index =\n      (this.smpSquare1 * this.stereoPosRSquare1 +\n        this.smpSquare2 * this.stereoPosRSquare2) >>\n      8;\n    tnd_index =\n      (3 * this.smpTriangle * this.stereoPosRTriangle +\n        (smpNoise << 1) * this.stereoPosRNoise +\n        this.smpDmc * this.stereoPosRDMC) >>\n      8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueR =\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Remove DC from left channel:\n    var smpDiffL = sampleValueL - this.prevSampleL;\n    this.prevSampleL += smpDiffL;\n    this.smpAccumL += smpDiffL - (this.smpAccumL >> 10);\n    sampleValueL = this.smpAccumL;\n\n    // Remove DC from right channel:\n    var smpDiffR = sampleValueR - this.prevSampleR;\n    this.prevSampleR += smpDiffR;\n    this.smpAccumR += smpDiffR - (this.smpAccumR >> 10);\n    sampleValueR = this.smpAccumR;\n\n    // Write:\n    if (sampleValueL > this.maxSample) {\n      this.maxSample = sampleValueL;\n    }\n    if (sampleValueL < this.minSample) {\n      this.minSample = sampleValueL;\n    }\n\n    if (this.nes.opts.onAudioSample) {\n      this.nes.opts.onAudioSample(sampleValueL / 32768, sampleValueR / 32768);\n    }\n\n    // Reset sampled values:\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n  },\n\n  getLengthMax: function(value) {\n    return this.lengthLookup[value >> 3];\n  },\n\n  getDmcFrequency: function(value) {\n    if (value >= 0 && value < 0x10) {\n      return this.dmcFreqLookup[value];\n    }\n    return 0;\n  },\n\n  getNoiseWaveLength: function(value) {\n    if (value >= 0 && value < 0x10) {\n      return this.noiseWavelengthLookup[value];\n    }\n    return 0;\n  },\n\n  setPanning: function(pos) {\n    for (var i = 0; i < 5; i++) {\n      this.panning[i] = pos[i];\n    }\n    this.updateStereoPos();\n  },\n\n  setMasterVolume: function(value) {\n    if (value < 0) {\n      value = 0;\n    }\n    if (value > 256) {\n      value = 256;\n    }\n    this.masterVolume = value;\n    this.updateStereoPos();\n  },\n\n  updateStereoPos: function() {\n    this.stereoPosLSquare1 = (this.panning[0] * this.masterVolume) >> 8;\n    this.stereoPosLSquare2 = (this.panning[1] * this.masterVolume) >> 8;\n    this.stereoPosLTriangle = (this.panning[2] * this.masterVolume) >> 8;\n    this.stereoPosLNoise = (this.panning[3] * this.masterVolume) >> 8;\n    this.stereoPosLDMC = (this.panning[4] * this.masterVolume) >> 8;\n\n    this.stereoPosRSquare1 = this.masterVolume - this.stereoPosLSquare1;\n    this.stereoPosRSquare2 = this.masterVolume - this.stereoPosLSquare2;\n    this.stereoPosRTriangle = this.masterVolume - this.stereoPosLTriangle;\n    this.stereoPosRNoise = this.masterVolume - this.stereoPosLNoise;\n    this.stereoPosRDMC = this.masterVolume - this.stereoPosLDMC;\n  },\n\n  initLengthLookup: function() {\n    // prettier-ignore\n    this.lengthLookup = [\n            0x0A, 0xFE,\n            0x14, 0x02,\n            0x28, 0x04,\n            0x50, 0x06,\n            0xA0, 0x08,\n            0x3C, 0x0A,\n            0x0E, 0x0C,\n            0x1A, 0x0E,\n            0x0C, 0x10,\n            0x18, 0x12,\n            0x30, 0x14,\n            0x60, 0x16,\n            0xC0, 0x18,\n            0x48, 0x1A,\n            0x10, 0x1C,\n            0x20, 0x1E\n        ];\n  },\n\n  initDmcFrequencyLookup: function() {\n    this.dmcFreqLookup = new Array(16);\n\n    this.dmcFreqLookup[0x0] = 0xd60;\n    this.dmcFreqLookup[0x1] = 0xbe0;\n    this.dmcFreqLookup[0x2] = 0xaa0;\n    this.dmcFreqLookup[0x3] = 0xa00;\n    this.dmcFreqLookup[0x4] = 0x8f0;\n    this.dmcFreqLookup[0x5] = 0x7f0;\n    this.dmcFreqLookup[0x6] = 0x710;\n    this.dmcFreqLookup[0x7] = 0x6b0;\n    this.dmcFreqLookup[0x8] = 0x5f0;\n    this.dmcFreqLookup[0x9] = 0x500;\n    this.dmcFreqLookup[0xa] = 0x470;\n    this.dmcFreqLookup[0xb] = 0x400;\n    this.dmcFreqLookup[0xc] = 0x350;\n    this.dmcFreqLookup[0xd] = 0x2a0;\n    this.dmcFreqLookup[0xe] = 0x240;\n    this.dmcFreqLookup[0xf] = 0x1b0;\n    //for(int i=0;i<16;i++)dmcFreqLookup[i]/=8;\n  },\n\n  initNoiseWavelengthLookup: function() {\n    this.noiseWavelengthLookup = new Array(16);\n\n    this.noiseWavelengthLookup[0x0] = 0x004;\n    this.noiseWavelengthLookup[0x1] = 0x008;\n    this.noiseWavelengthLookup[0x2] = 0x010;\n    this.noiseWavelengthLookup[0x3] = 0x020;\n    this.noiseWavelengthLookup[0x4] = 0x040;\n    this.noiseWavelengthLookup[0x5] = 0x060;\n    this.noiseWavelengthLookup[0x6] = 0x080;\n    this.noiseWavelengthLookup[0x7] = 0x0a0;\n    this.noiseWavelengthLookup[0x8] = 0x0ca;\n    this.noiseWavelengthLookup[0x9] = 0x0fe;\n    this.noiseWavelengthLookup[0xa] = 0x17c;\n    this.noiseWavelengthLookup[0xb] = 0x1fc;\n    this.noiseWavelengthLookup[0xc] = 0x2fa;\n    this.noiseWavelengthLookup[0xd] = 0x3f8;\n    this.noiseWavelengthLookup[0xe] = 0x7f2;\n    this.noiseWavelengthLookup[0xf] = 0xfe4;\n  },\n\n  initDACtables: function() {\n    var value, ival, i;\n    var max_sqr = 0;\n    var max_tnd = 0;\n\n    this.square_table = new Array(32 * 16);\n    this.tnd_table = new Array(204 * 16);\n\n    for (i = 0; i < 32 * 16; i++) {\n      value = 95.52 / (8128.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n\n      this.square_table[i] = ival;\n      if (ival > max_sqr) {\n        max_sqr = ival;\n      }\n    }\n\n    for (i = 0; i < 204 * 16; i++) {\n      value = 163.67 / (24329.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n\n      this.tnd_table[i] = ival;\n      if (ival > max_tnd) {\n        max_tnd = ival;\n      }\n    }\n\n    this.dacRange = max_sqr + max_tnd;\n    this.dcValue = this.dacRange / 2;\n  }\n};\n\nvar ChannelDM = function(papu) {\n  this.papu = papu;\n\n  this.MODE_NORMAL = 0;\n  this.MODE_LOOP = 1;\n  this.MODE_IRQ = 2;\n\n  this.isEnabled = null;\n  this.hasSample = null;\n  this.irqGenerated = false;\n\n  this.playMode = null;\n  this.dmaFrequency = null;\n  this.dmaCounter = null;\n  this.deltaCounter = null;\n  this.playStartAddress = null;\n  this.playAddress = null;\n  this.playLength = null;\n  this.playLengthCounter = null;\n  this.shiftCounter = null;\n  this.reg4012 = null;\n  this.reg4013 = null;\n  this.sample = null;\n  this.dacLsb = null;\n  this.data = null;\n\n  this.reset();\n};\n\nChannelDM.prototype = {\n  clockDmc: function() {\n    // Only alter DAC value if the sample buffer has data:\n    if (this.hasSample) {\n      if ((this.data & 1) === 0) {\n        // Decrement delta:\n        if (this.deltaCounter > 0) {\n          this.deltaCounter--;\n        }\n      } else {\n        // Increment delta:\n        if (this.deltaCounter < 63) {\n          this.deltaCounter++;\n        }\n      }\n\n      // Update sample value:\n      this.sample = this.isEnabled ? (this.deltaCounter << 1) + this.dacLsb : 0;\n\n      // Update shift register:\n      this.data >>= 1;\n    }\n\n    this.dmaCounter--;\n    if (this.dmaCounter <= 0) {\n      // No more sample bits.\n      this.hasSample = false;\n      this.endOfSample();\n      this.dmaCounter = 8;\n    }\n\n    if (this.irqGenerated) {\n      this.papu.nes.cpu.requestIrq(this.papu.nes.cpu.IRQ_NORMAL);\n    }\n  },\n\n  endOfSample: function() {\n    if (this.playLengthCounter === 0 && this.playMode === this.MODE_LOOP) {\n      // Start from beginning of sample:\n      this.playAddress = this.playStartAddress;\n      this.playLengthCounter = this.playLength;\n    }\n\n    if (this.playLengthCounter > 0) {\n      // Fetch next sample:\n      this.nextSample();\n\n      if (this.playLengthCounter === 0) {\n        // Last byte of sample fetched, generate IRQ:\n        if (this.playMode === this.MODE_IRQ) {\n          // Generate IRQ:\n          this.irqGenerated = true;\n        }\n      }\n    }\n  },\n\n  nextSample: function() {\n    // Fetch byte:\n    this.data = this.papu.nes.mmap.load(this.playAddress);\n    this.papu.nes.cpu.haltCycles(4);\n\n    this.playLengthCounter--;\n    this.playAddress++;\n    if (this.playAddress > 0xffff) {\n      this.playAddress = 0x8000;\n    }\n\n    this.hasSample = true;\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x4010) {\n      // Play mode, DMA Frequency\n      if (value >> 6 === 0) {\n        this.playMode = this.MODE_NORMAL;\n      } else if (((value >> 6) & 1) === 1) {\n        this.playMode = this.MODE_LOOP;\n      } else if (value >> 6 === 2) {\n        this.playMode = this.MODE_IRQ;\n      }\n\n      if ((value & 0x80) === 0) {\n        this.irqGenerated = false;\n      }\n\n      this.dmaFrequency = this.papu.getDmcFrequency(value & 0xf);\n    } else if (address === 0x4011) {\n      // Delta counter load register:\n      this.deltaCounter = (value >> 1) & 63;\n      this.dacLsb = value & 1;\n      this.sample = (this.deltaCounter << 1) + this.dacLsb; // update sample value\n    } else if (address === 0x4012) {\n      // DMA address load register\n      this.playStartAddress = (value << 6) | 0x0c000;\n      this.playAddress = this.playStartAddress;\n      this.reg4012 = value;\n    } else if (address === 0x4013) {\n      // Length of play code\n      this.playLength = (value << 4) + 1;\n      this.playLengthCounter = this.playLength;\n      this.reg4013 = value;\n    } else if (address === 0x4015) {\n      // DMC/IRQ Status\n      if (((value >> 4) & 1) === 0) {\n        // Disable:\n        this.playLengthCounter = 0;\n      } else {\n        // Restart:\n        this.playAddress = this.playStartAddress;\n        this.playLengthCounter = this.playLength;\n      }\n      this.irqGenerated = false;\n    }\n  },\n\n  setEnabled: function(value) {\n    if (!this.isEnabled && value) {\n      this.playLengthCounter = this.playLength;\n    }\n    this.isEnabled = value;\n  },\n\n  getLengthStatus: function() {\n    return this.playLengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n\n  getIrqStatus: function() {\n    return this.irqGenerated ? 1 : 0;\n  },\n\n  reset: function() {\n    this.isEnabled = false;\n    this.irqGenerated = false;\n    this.playMode = this.MODE_NORMAL;\n    this.dmaFrequency = 0;\n    this.dmaCounter = 0;\n    this.deltaCounter = 0;\n    this.playStartAddress = 0;\n    this.playAddress = 0;\n    this.playLength = 0;\n    this.playLengthCounter = 0;\n    this.sample = 0;\n    this.dacLsb = 0;\n    this.shiftCounter = 0;\n    this.reg4012 = 0;\n    this.reg4013 = 0;\n    this.data = 0;\n  }\n};\n\nvar ChannelNoise = function(papu) {\n  this.papu = papu;\n\n  this.isEnabled = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.lengthCounterEnable = null;\n  this.envReset = null;\n  this.shiftNow = null;\n\n  this.lengthCounter = null;\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.shiftReg = 1 << 14;\n  this.randomBit = null;\n  this.randomMode = null;\n  this.sampleValue = null;\n  this.accValue = 0;\n  this.accCount = 1;\n  this.tmp = null;\n\n  this.reset();\n};\n\nChannelNoise.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.isEnabled = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n    this.shiftNow = false;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.shiftReg = 1;\n    this.randomBit = 0;\n    this.randomMode = 0;\n    this.sampleValue = 0;\n    this.tmp = 0;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n\n  clockEnvDecay: function() {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n\n  updateSampleValue: function() {\n    if (this.isEnabled && this.lengthCounter > 0) {\n      this.sampleValue = this.randomBit * this.masterVolume;\n    }\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x400c) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n    } else if (address === 0x400e) {\n      // Programmable timer:\n      this.progTimerMax = this.papu.getNoiseWaveLength(value & 0xf);\n      this.randomMode = value >> 7;\n    } else if (address === 0x400f) {\n      // Length counter\n      this.lengthCounter = this.papu.getLengthMax(value & 248);\n      this.envReset = true;\n    }\n    // Update:\n    //updateSampleValue();\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  }\n};\n\nvar ChannelSquare = function(papu, square1) {\n  this.papu = papu;\n\n  // prettier-ignore\n  this.dutyLookup = [\n         0, 1, 0, 0, 0, 0, 0, 0,\n         0, 1, 1, 0, 0, 0, 0, 0,\n         0, 1, 1, 1, 1, 0, 0, 0,\n         1, 0, 0, 1, 1, 1, 1, 1\n    ];\n  // prettier-ignore\n  this.impLookup = [\n         1,-1, 0, 0, 0, 0, 0, 0,\n         1, 0,-1, 0, 0, 0, 0, 0,\n         1, 0, 0, 0,-1, 0, 0, 0,\n        -1, 0, 1, 0, 0, 0, 0, 0\n    ];\n\n  this.sqr1 = square1;\n  this.isEnabled = null;\n  this.lengthCounterEnable = null;\n  this.sweepActive = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.envReset = null;\n  this.sweepCarry = null;\n  this.updateSweepPeriod = null;\n\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.lengthCounter = null;\n  this.squareCounter = null;\n  this.sweepCounter = null;\n  this.sweepCounterMax = null;\n  this.sweepMode = null;\n  this.sweepShiftAmount = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.dutyMode = null;\n  this.sweepResult = null;\n  this.sampleValue = null;\n  this.vol = null;\n\n  this.reset();\n};\n\nChannelSquare.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.lengthCounter = 0;\n    this.squareCounter = 0;\n    this.sweepCounter = 0;\n    this.sweepCounterMax = 0;\n    this.sweepMode = 0;\n    this.sweepShiftAmount = 0;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.dutyMode = 0;\n    this.vol = 0;\n\n    this.isEnabled = false;\n    this.lengthCounterEnable = false;\n    this.sweepActive = false;\n    this.sweepCarry = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n\n  clockEnvDecay: function() {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n\n  clockSweep: function() {\n    if (--this.sweepCounter <= 0) {\n      this.sweepCounter = this.sweepCounterMax + 1;\n      if (\n        this.sweepActive &&\n        this.sweepShiftAmount > 0 &&\n        this.progTimerMax > 7\n      ) {\n        // Calculate result from shifter:\n        this.sweepCarry = false;\n        if (this.sweepMode === 0) {\n          this.progTimerMax += this.progTimerMax >> this.sweepShiftAmount;\n          if (this.progTimerMax > 4095) {\n            this.progTimerMax = 4095;\n            this.sweepCarry = true;\n          }\n        } else {\n          this.progTimerMax =\n            this.progTimerMax -\n            ((this.progTimerMax >> this.sweepShiftAmount) -\n              (this.sqr1 ? 1 : 0));\n        }\n      }\n    }\n\n    if (this.updateSweepPeriod) {\n      this.updateSweepPeriod = false;\n      this.sweepCounter = this.sweepCounterMax + 1;\n    }\n  },\n\n  updateSampleValue: function() {\n    if (this.isEnabled && this.lengthCounter > 0 && this.progTimerMax > 7) {\n      if (\n        this.sweepMode === 0 &&\n        this.progTimerMax + (this.progTimerMax >> this.sweepShiftAmount) > 4095\n      ) {\n        //if (this.sweepCarry) {\n        this.sampleValue = 0;\n      } else {\n        this.sampleValue =\n          this.masterVolume *\n          this.dutyLookup[(this.dutyMode << 3) + this.squareCounter];\n      }\n    } else {\n      this.sampleValue = 0;\n    }\n  },\n\n  writeReg: function(address, value) {\n    var addrAdd = this.sqr1 ? 0 : 4;\n    if (address === 0x4000 + addrAdd) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.dutyMode = (value >> 6) & 0x3;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n      this.updateSampleValue();\n    } else if (address === 0x4001 + addrAdd) {\n      // Sweep:\n      this.sweepActive = (value & 0x80) !== 0;\n      this.sweepCounterMax = (value >> 4) & 7;\n      this.sweepMode = (value >> 3) & 1;\n      this.sweepShiftAmount = value & 7;\n      this.updateSweepPeriod = true;\n    } else if (address === 0x4002 + addrAdd) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x4003 + addrAdd) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x7) << 8;\n\n      if (this.isEnabled) {\n        this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      }\n\n      this.envReset = true;\n    }\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  }\n};\n\nvar ChannelTriangle = function(papu) {\n  this.papu = papu;\n\n  this.isEnabled = null;\n  this.sampleCondition = null;\n  this.lengthCounterEnable = null;\n  this.lcHalt = null;\n  this.lcControl = null;\n\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.triangleCounter = null;\n  this.lengthCounter = null;\n  this.linearCounter = null;\n  this.lcLoadValue = null;\n  this.sampleValue = null;\n  this.tmp = null;\n\n  this.reset();\n};\n\nChannelTriangle.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.triangleCounter = 0;\n    this.isEnabled = false;\n    this.sampleCondition = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.linearCounter = 0;\n    this.lcLoadValue = 0;\n    this.lcHalt = true;\n    this.lcControl = false;\n    this.tmp = 0;\n    this.sampleValue = 0xf;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleCondition();\n      }\n    }\n  },\n\n  clockLinearCounter: function() {\n    if (this.lcHalt) {\n      // Load:\n      this.linearCounter = this.lcLoadValue;\n      this.updateSampleCondition();\n    } else if (this.linearCounter > 0) {\n      // Decrement:\n      this.linearCounter--;\n      this.updateSampleCondition();\n    }\n    if (!this.lcControl) {\n      // Clear halt flag:\n      this.lcHalt = false;\n    }\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n\n  readReg: function(address) {\n    return 0;\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x4008) {\n      // New values for linear counter:\n      this.lcControl = (value & 0x80) !== 0;\n      this.lcLoadValue = value & 0x7f;\n\n      // Length counter enable:\n      this.lengthCounterEnable = !this.lcControl;\n    } else if (address === 0x400a) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x400b) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x07) << 8;\n      this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      this.lcHalt = true;\n    }\n\n    this.updateSampleCondition();\n  },\n\n  clockProgrammableTimer: function(nCycles) {\n    if (this.progTimerMax > 0) {\n      this.progTimerCount += nCycles;\n      while (\n        this.progTimerMax > 0 &&\n        this.progTimerCount >= this.progTimerMax\n      ) {\n        this.progTimerCount -= this.progTimerMax;\n        if (\n          this.isEnabled &&\n          this.lengthCounter > 0 &&\n          this.linearCounter > 0\n        ) {\n          this.clockTriangleGenerator();\n        }\n      }\n    }\n  },\n\n  clockTriangleGenerator: function() {\n    this.triangleCounter++;\n    this.triangleCounter &= 0x1f;\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleCondition();\n  },\n\n  updateSampleCondition: function() {\n    this.sampleCondition =\n      this.isEnabled &&\n      this.progTimerMax > 7 &&\n      this.linearCounter > 0 &&\n      this.lengthCounter > 0;\n  }\n};\n\nmodule.exports = PAPU;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Mappers = __webpack_require__(9);\nvar Tile = __webpack_require__(2);\n\nvar ROM = function(nes) {\n  this.nes = nes;\n\n  this.mapperName = new Array(92);\n\n  for (var i = 0; i < 92; i++) {\n    this.mapperName[i] = \"Unknown Mapper\";\n  }\n  this.mapperName[0] = \"Direct Access\";\n  this.mapperName[1] = \"Nintendo MMC1\";\n  this.mapperName[2] = \"UNROM\";\n  this.mapperName[3] = \"CNROM\";\n  this.mapperName[4] = \"Nintendo MMC3\";\n  this.mapperName[5] = \"Nintendo MMC5\";\n  this.mapperName[6] = \"FFE F4xxx\";\n  this.mapperName[7] = \"AOROM\";\n  this.mapperName[8] = \"FFE F3xxx\";\n  this.mapperName[9] = \"Nintendo MMC2\";\n  this.mapperName[10] = \"Nintendo MMC4\";\n  this.mapperName[11] = \"Color Dreams Chip\";\n  this.mapperName[12] = \"FFE F6xxx\";\n  this.mapperName[15] = \"100-in-1 switch\";\n  this.mapperName[16] = \"Bandai chip\";\n  this.mapperName[17] = \"FFE F8xxx\";\n  this.mapperName[18] = \"Jaleco SS8806 chip\";\n  this.mapperName[19] = \"Namcot 106 chip\";\n  this.mapperName[20] = \"Famicom Disk System\";\n  this.mapperName[21] = \"Konami VRC4a\";\n  this.mapperName[22] = \"Konami VRC2a\";\n  this.mapperName[23] = \"Konami VRC2a\";\n  this.mapperName[24] = \"Konami VRC6\";\n  this.mapperName[25] = \"Konami VRC4b\";\n  this.mapperName[32] = \"Irem G-101 chip\";\n  this.mapperName[33] = \"Taito TC0190/TC0350\";\n  this.mapperName[34] = \"32kB ROM switch\";\n\n  this.mapperName[64] = \"Tengen RAMBO-1 chip\";\n  this.mapperName[65] = \"Irem H-3001 chip\";\n  this.mapperName[66] = \"GNROM switch\";\n  this.mapperName[67] = \"SunSoft3 chip\";\n  this.mapperName[68] = \"SunSoft4 chip\";\n  this.mapperName[69] = \"SunSoft5 FME-7 chip\";\n  this.mapperName[71] = \"Camerica chip\";\n  this.mapperName[78] = \"Irem 74HC161/32-based\";\n  this.mapperName[91] = \"Pirate HK-SF3 chip\";\n};\n\nROM.prototype = {\n  // Mirroring types:\n  VERTICAL_MIRRORING: 0,\n  HORIZONTAL_MIRRORING: 1,\n  FOURSCREEN_MIRRORING: 2,\n  SINGLESCREEN_MIRRORING: 3,\n  SINGLESCREEN_MIRRORING2: 4,\n  SINGLESCREEN_MIRRORING3: 5,\n  SINGLESCREEN_MIRRORING4: 6,\n  CHRROM_MIRRORING: 7,\n\n  header: null,\n  rom: null,\n  vrom: null,\n  vromTile: null,\n\n  romCount: null,\n  vromCount: null,\n  mirroring: null,\n  batteryRam: null,\n  trainer: null,\n  fourScreen: null,\n  mapperType: null,\n  valid: false,\n\n  load: function(data) {\n    var i, j, v;\n\n    if (data.indexOf(\"NES\\x1a\") === -1) {\n      throw new Error(\"Not a valid NES ROM.\");\n    }\n    this.header = new Array(16);\n    for (i = 0; i < 16; i++) {\n      this.header[i] = data.charCodeAt(i) & 0xff;\n    }\n    this.romCount = this.header[4];\n    this.vromCount = this.header[5] * 2; // Get the number of 4kB banks, not 8kB\n    this.mirroring = (this.header[6] & 1) !== 0 ? 1 : 0;\n    this.batteryRam = (this.header[6] & 2) !== 0;\n    this.trainer = (this.header[6] & 4) !== 0;\n    this.fourScreen = (this.header[6] & 8) !== 0;\n    this.mapperType = (this.header[6] >> 4) | (this.header[7] & 0xf0);\n    /* TODO\n        if (this.batteryRam)\n            this.loadBatteryRam();*/\n    // Check whether byte 8-15 are zero's:\n    var foundError = false;\n    for (i = 8; i < 16; i++) {\n      if (this.header[i] !== 0) {\n        foundError = true;\n        break;\n      }\n    }\n    if (foundError) {\n      this.mapperType &= 0xf; // Ignore byte 7\n    }\n    // Load PRG-ROM banks:\n    this.rom = new Array(this.romCount);\n    var offset = 16;\n    for (i = 0; i < this.romCount; i++) {\n      this.rom[i] = new Array(16384);\n      for (j = 0; j < 16384; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.rom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 16384;\n    }\n    // Load CHR-ROM banks:\n    this.vrom = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vrom[i] = new Array(4096);\n      for (j = 0; j < 4096; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.vrom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 4096;\n    }\n\n    // Create VROM tiles:\n    this.vromTile = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vromTile[i] = new Array(256);\n      for (j = 0; j < 256; j++) {\n        this.vromTile[i][j] = new Tile();\n      }\n    }\n\n    // Convert CHR-ROM banks to tiles:\n    var tileIndex;\n    var leftOver;\n    for (v = 0; v < this.vromCount; v++) {\n      for (i = 0; i < 4096; i++) {\n        tileIndex = i >> 4;\n        leftOver = i % 16;\n        if (leftOver < 8) {\n          this.vromTile[v][tileIndex].setScanline(\n            leftOver,\n            this.vrom[v][i],\n            this.vrom[v][i + 8]\n          );\n        } else {\n          this.vromTile[v][tileIndex].setScanline(\n            leftOver - 8,\n            this.vrom[v][i - 8],\n            this.vrom[v][i]\n          );\n        }\n      }\n    }\n\n    this.valid = true;\n  },\n\n  getMirroringType: function() {\n    if (this.fourScreen) {\n      return this.FOURSCREEN_MIRRORING;\n    }\n    if (this.mirroring === 0) {\n      return this.HORIZONTAL_MIRRORING;\n    }\n    return this.VERTICAL_MIRRORING;\n  },\n\n  getMapperName: function() {\n    if (this.mapperType >= 0 && this.mapperType < this.mapperName.length) {\n      return this.mapperName[this.mapperType];\n    }\n    return \"Unknown Mapper, \" + this.mapperType;\n  },\n\n  mapperSupported: function() {\n    return typeof Mappers[this.mapperType] !== \"undefined\";\n  },\n\n  createMapper: function() {\n    if (this.mapperSupported()) {\n      return new Mappers[this.mapperType](this.nes);\n    } else {\n      throw new Error(\n        \"This ROM uses a mapper not supported by JSNES: \" +\n          this.getMapperName() +\n          \"(\" +\n          this.mapperType +\n          \")\"\n      );\n    }\n  }\n};\n\nmodule.exports = ROM;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar utils = __webpack_require__(0);\n\nvar Mappers = {};\n\nMappers[0] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[0].prototype = {\n  reset: function() {\n    this.joy1StrobeState = 0;\n    this.joy2StrobeState = 0;\n    this.joypadLastWrite = 0;\n\n    this.zapperFired = false;\n    this.zapperX = null;\n    this.zapperY = null;\n  },\n\n  write: function(address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n      if (address >= 0x6000 && address < 0x8000) {\n        // Write to SaveRAM. Store in file:\n        // TODO: not yet\n        //if(this.nes.rom!=null)\n        //    this.nes.rom.writeBatteryRam(address,value);\n      }\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n\n  writelow: function(address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n\n  load: function(address) {\n    // Wrap around:\n    address &= 0xffff;\n\n    // Check address range:\n    if (address > 0x4017) {\n      // ROM:\n      return this.nes.cpu.mem[address];\n    } else if (address >= 0x2000) {\n      // I/O Ports.\n      return this.regLoad(address);\n    } else {\n      // RAM (mirrored)\n      return this.nes.cpu.mem[address & 0x7ff];\n    }\n  },\n\n  regLoad: function(address) {\n    switch (address >> 12) { // use fourth nibble (0xF000)\n      case 0:\n        break;\n\n      case 1:\n        break;\n\n      case 2:\n      // Fall through to case 3\n      case 3:\n        // PPU Registers\n        switch (address & 0x7) {\n          case 0x0:\n            // 0x2000:\n            // PPU Control Register 1.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2000];\n\n          case 0x1:\n            // 0x2001:\n            // PPU Control Register 2.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2001];\n\n          case 0x2:\n            // 0x2002:\n            // PPU Status Register.\n            // The value is stored in\n            // main memory in addition\n            // to as flags in the PPU.\n            // (not in the real NES)\n            return this.nes.ppu.readStatusRegister();\n\n          case 0x3:\n            return 0;\n\n          case 0x4:\n            // 0x2004:\n            // Sprite Memory read.\n            return this.nes.ppu.sramLoad();\n          case 0x5:\n            return 0;\n\n          case 0x6:\n            return 0;\n\n          case 0x7:\n            // 0x2007:\n            // VRAM read:\n            return this.nes.ppu.vramLoad();\n        }\n        break;\n      case 4:\n        // Sound+Joypad registers\n        switch (address - 0x4015) {\n          case 0:\n            // 0x4015:\n            // Sound channel enable, DMC Status\n            return this.nes.papu.readReg(address);\n\n          case 1:\n            // 0x4016:\n            // Joystick 1 + Strobe\n            return this.joy1Read();\n\n          case 2:\n            // 0x4017:\n            // Joystick 2 + Strobe\n            // https://wiki.nesdev.com/w/index.php/Zapper\n            var w;\n\n            if (\n              this.zapperX !== null &&\n              this.zapperY !== null &&\n              this.nes.ppu.isPixelWhite(this.zapperX, this.zapperY)\n            ) {\n              w = 0;\n            } else {\n              w = 0x1 << 3;\n            }\n\n            if (this.zapperFired) {\n              w |= 0x1 << 4;\n            }\n            return (this.joy2Read() | w) & 0xffff;\n        }\n        break;\n    }\n    return 0;\n  },\n\n  regWrite: function(address, value) {\n    switch (address) {\n      case 0x2000:\n        // PPU Control register 1\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg1(value);\n        break;\n\n      case 0x2001:\n        // PPU Control register 2\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg2(value);\n        break;\n\n      case 0x2003:\n        // Set Sprite RAM address:\n        this.nes.ppu.writeSRAMAddress(value);\n        break;\n\n      case 0x2004:\n        // Write to Sprite RAM:\n        this.nes.ppu.sramWrite(value);\n        break;\n\n      case 0x2005:\n        // Screen Scroll offsets:\n        this.nes.ppu.scrollWrite(value);\n        break;\n\n      case 0x2006:\n        // Set VRAM address:\n        this.nes.ppu.writeVRAMAddress(value);\n        break;\n\n      case 0x2007:\n        // Write to VRAM:\n        this.nes.ppu.vramWrite(value);\n        break;\n\n      case 0x4014:\n        // Sprite Memory DMA Access\n        this.nes.ppu.sramDMA(value);\n        break;\n\n      case 0x4015:\n        // Sound Channel Switch, DMC Status\n        this.nes.papu.writeReg(address, value);\n        break;\n\n      case 0x4016:\n        // Joystick 1 + Strobe\n        if ((value & 1) === 0 && (this.joypadLastWrite & 1) === 1) {\n          this.joy1StrobeState = 0;\n          this.joy2StrobeState = 0;\n        }\n        this.joypadLastWrite = value;\n        break;\n\n      case 0x4017:\n        // Sound channel frame sequencer:\n        this.nes.papu.writeReg(address, value);\n        break;\n\n      default:\n        // Sound registers\n        // console.log(\"write to sound reg\");\n        if (address >= 0x4000 && address <= 0x4017) {\n          this.nes.papu.writeReg(address, value);\n        }\n    }\n  },\n\n  joy1Read: function() {\n    var ret;\n\n    switch (this.joy1StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[1].state[this.joy1StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n\n    this.joy1StrobeState++;\n    if (this.joy1StrobeState === 24) {\n      this.joy1StrobeState = 0;\n    }\n\n    return ret;\n  },\n\n  joy2Read: function() {\n    var ret;\n\n    switch (this.joy2StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[2].state[this.joy2StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n\n    this.joy2StrobeState++;\n    if (this.joy2StrobeState === 24) {\n      this.joy2StrobeState = 0;\n    }\n\n    return ret;\n  },\n\n  loadROM: function() {\n    if (!this.nes.rom.valid || this.nes.rom.romCount < 1) {\n      throw new Error(\"NoMapper: Invalid ROM! Unable to load.\");\n    }\n\n    // Load ROM into memory:\n    this.loadPRGROM();\n\n    // Load CHR-ROM:\n    this.loadCHRROM();\n\n    // Load Battery RAM (if present):\n    this.loadBatteryRam();\n\n    // Reset IRQ:\n    //nes.getCpu().doResetInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n  },\n\n  loadPRGROM: function() {\n    if (this.nes.rom.romCount > 1) {\n      // Load the two first banks into memory.\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(1, 0xc000);\n    } else {\n      // Load the one bank into both memory locations:\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(0, 0xc000);\n    }\n  },\n\n  loadCHRROM: function() {\n    // console.log(\"Loading CHR ROM..\");\n    if (this.nes.rom.vromCount > 0) {\n      if (this.nes.rom.vromCount === 1) {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(0, 0x1000);\n      } else {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(1, 0x1000);\n      }\n    } else {\n      //System.out.println(\"There aren't any CHR-ROM banks..\");\n    }\n  },\n\n  loadBatteryRam: function() {\n    if (this.nes.rom.batteryRam) {\n      var ram = this.nes.rom.batteryRam;\n      if (ram !== null && ram.length === 0x2000) {\n        // Load Battery RAM into memory:\n        utils.copyArrayElements(ram, 0, this.nes.cpu.mem, 0x6000, 0x2000);\n      }\n    }\n  },\n\n  loadRomBank: function(bank, address) {\n    // Loads a ROM bank into the specified address.\n    bank %= this.nes.rom.romCount;\n    //var data = this.nes.rom.rom[bank];\n    //cpuMem.write(address,data,data.length);\n    utils.copyArrayElements(\n      this.nes.rom.rom[bank],\n      0,\n      this.nes.cpu.mem,\n      address,\n      16384\n    );\n  },\n\n  loadVromBank: function(bank, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank % this.nes.rom.vromCount],\n      0,\n      this.nes.ppu.vramMem,\n      address,\n      4096\n    );\n\n    var vromTile = this.nes.rom.vromTile[bank % this.nes.rom.vromCount];\n    utils.copyArrayElements(\n      vromTile,\n      0,\n      this.nes.ppu.ptTile,\n      address >> 4,\n      256\n    );\n  },\n\n  load32kRomBank: function(bank, address) {\n    this.loadRomBank((bank * 2) % this.nes.rom.romCount, address);\n    this.loadRomBank((bank * 2 + 1) % this.nes.rom.romCount, address + 16384);\n  },\n\n  load8kVromBank: function(bank4kStart, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    this.loadVromBank(bank4kStart % this.nes.rom.vromCount, address);\n    this.loadVromBank(\n      (bank4kStart + 1) % this.nes.rom.vromCount,\n      address + 4096\n    );\n  },\n\n  load1kVromBank: function(bank1k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    var bank4k = Math.floor(bank1k / 4) % this.nes.rom.vromCount;\n    var bankoffset = (bank1k % 4) * 1024;\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank4k],\n      0,\n      this.nes.ppu.vramMem,\n      bankoffset,\n      1024\n    );\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 64; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[((bank1k % 4) << 6) + i];\n    }\n  },\n\n  load2kVromBank: function(bank2k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    var bank4k = Math.floor(bank2k / 2) % this.nes.rom.vromCount;\n    var bankoffset = (bank2k % 2) * 2048;\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank4k],\n      bankoffset,\n      this.nes.ppu.vramMem,\n      address,\n      2048\n    );\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 128; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[((bank2k % 2) << 7) + i];\n    }\n  },\n\n  load8kRomBank: function(bank8k, address) {\n    var bank16k = Math.floor(bank8k / 2) % this.nes.rom.romCount;\n    var offset = (bank8k % 2) * 8192;\n\n    //this.nes.cpu.mem.write(address,this.nes.rom.rom[bank16k],offset,8192);\n    utils.copyArrayElements(\n      this.nes.rom.rom[bank16k],\n      offset,\n      this.nes.cpu.mem,\n      address,\n      8192\n    );\n  },\n\n  clockIrqCounter: function() {\n    // Does nothing. This is used by the MMC3 mapper.\n  },\n\n  latchAccess: function(address) {\n    // Does nothing. This is used by MMC2.\n  },\n\n  toJSON: function() {\n    return {\n      joy1StrobeState: this.joy1StrobeState,\n      joy2StrobeState: this.joy2StrobeState,\n      joypadLastWrite: this.joypadLastWrite\n    };\n  },\n\n  fromJSON: function(s) {\n    this.joy1StrobeState = s.joy1StrobeState;\n    this.joy2StrobeState = s.joy2StrobeState;\n    this.joypadLastWrite = s.joypadLastWrite;\n  }\n};\n\nMappers[1] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[1].prototype = new Mappers[0]();\n\nMappers[1].prototype.reset = function() {\n  Mappers[0].prototype.reset.apply(this);\n\n  // 5-bit buffer:\n  this.regBuffer = 0;\n  this.regBufferCounter = 0;\n\n  // Register 0:\n  this.mirroring = 0;\n  this.oneScreenMirroring = 0;\n  this.prgSwitchingArea = 1;\n  this.prgSwitchingSize = 1;\n  this.vromSwitchingSize = 0;\n\n  // Register 1:\n  this.romSelectionReg0 = 0;\n\n  // Register 2:\n  this.romSelectionReg1 = 0;\n\n  // Register 3:\n  this.romBankSelect = 0;\n};\n\nMappers[1].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  // See what should be done with the written value:\n  if ((value & 128) !== 0) {\n    // Reset buffering:\n    this.regBufferCounter = 0;\n    this.regBuffer = 0;\n\n    // Reset register:\n    if (this.getRegNumber(address) === 0) {\n      this.prgSwitchingArea = 1;\n      this.prgSwitchingSize = 1;\n    }\n  } else {\n    // Continue buffering:\n    //regBuffer = (regBuffer & (0xFF-(1<<regBufferCounter))) | ((value & (1<<regBufferCounter))<<regBufferCounter);\n    this.regBuffer =\n      (this.regBuffer & (0xff - (1 << this.regBufferCounter))) |\n      ((value & 1) << this.regBufferCounter);\n    this.regBufferCounter++;\n\n    if (this.regBufferCounter === 5) {\n      // Use the buffered value:\n      this.setReg(this.getRegNumber(address), this.regBuffer);\n\n      // Reset buffer:\n      this.regBuffer = 0;\n      this.regBufferCounter = 0;\n    }\n  }\n};\n\nMappers[1].prototype.setReg = function(reg, value) {\n  var tmp;\n\n  switch (reg) {\n    case 0:\n      // Mirroring:\n      tmp = value & 3;\n      if (tmp !== this.mirroring) {\n        // Set mirroring:\n        this.mirroring = tmp;\n        if ((this.mirroring & 2) === 0) {\n          // SingleScreen mirroring overrides the other setting:\n          this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n        } else if ((this.mirroring & 1) !== 0) {\n          // Not overridden by SingleScreen mirroring.\n          this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n        } else {\n          this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n        }\n      }\n\n      // PRG Switching Area;\n      this.prgSwitchingArea = (value >> 2) & 1;\n\n      // PRG Switching Size:\n      this.prgSwitchingSize = (value >> 3) & 1;\n\n      // VROM Switching Size:\n      this.vromSwitchingSize = (value >> 4) & 1;\n\n      break;\n\n    case 1:\n      // ROM selection:\n      this.romSelectionReg0 = (value >> 4) & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x0000:\n        if (this.vromSwitchingSize === 0) {\n          // Swap 8kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.load8kVromBank(value & 0xf, 0x0000);\n          } else {\n            this.load8kVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x0000\n            );\n          }\n        } else {\n          // Swap 4kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.loadVromBank(value & 0xf, 0x0000);\n          } else {\n            this.loadVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x0000\n            );\n          }\n        }\n      }\n\n      break;\n\n    case 2:\n      // ROM selection:\n      this.romSelectionReg1 = (value >> 4) & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x1000:\n        if (this.vromSwitchingSize === 1) {\n          // Swap 4kB of VROM:\n          if (this.romSelectionReg1 === 0) {\n            this.loadVromBank(value & 0xf, 0x1000);\n          } else {\n            this.loadVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x1000\n            );\n          }\n        }\n      }\n      break;\n\n    default:\n      // Select ROM bank:\n      // -------------------------\n      tmp = value & 0xf;\n      var bank;\n      var baseBank = 0;\n\n      if (this.nes.rom.romCount >= 32) {\n        // 1024 kB cart\n        if (this.vromSwitchingSize === 0) {\n          if (this.romSelectionReg0 === 1) {\n            baseBank = 16;\n          }\n        } else {\n          baseBank =\n            (this.romSelectionReg0 | (this.romSelectionReg1 << 1)) << 3;\n        }\n      } else if (this.nes.rom.romCount >= 16) {\n        // 512 kB cart\n        if (this.romSelectionReg0 === 1) {\n          baseBank = 8;\n        }\n      }\n\n      if (this.prgSwitchingSize === 0) {\n        // 32kB\n        bank = baseBank + (value & 0xf);\n        this.load32kRomBank(bank, 0x8000);\n      } else {\n        // 16kB\n        bank = baseBank * 2 + (value & 0xf);\n        if (this.prgSwitchingArea === 0) {\n          this.loadRomBank(bank, 0xc000);\n        } else {\n          this.loadRomBank(bank, 0x8000);\n        }\n      }\n  }\n};\n\n// Returns the register number from the address written to:\nMappers[1].prototype.getRegNumber = function(address) {\n  if (address >= 0x8000 && address <= 0x9fff) {\n    return 0;\n  } else if (address >= 0xa000 && address <= 0xbfff) {\n    return 1;\n  } else if (address >= 0xc000 && address <= 0xdfff) {\n    return 2;\n  } else {\n    return 3;\n  }\n};\n\nMappers[1].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC1: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000); //   First ROM bank..\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000); // ..and last ROM bank.\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\nMappers[1].prototype.switchLowHighPrgRom = function(oldSetting) {\n  // not yet.\n};\n\nMappers[1].prototype.switch16to32 = function() {\n  // not yet.\n};\n\nMappers[1].prototype.switch32to16 = function() {\n  // not yet.\n};\n\nMappers[1].prototype.toJSON = function() {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.mirroring = this.mirroring;\n  s.oneScreenMirroring = this.oneScreenMirroring;\n  s.prgSwitchingArea = this.prgSwitchingArea;\n  s.prgSwitchingSize = this.prgSwitchingSize;\n  s.vromSwitchingSize = this.vromSwitchingSize;\n  s.romSelectionReg0 = this.romSelectionReg0;\n  s.romSelectionReg1 = this.romSelectionReg1;\n  s.romBankSelect = this.romBankSelect;\n  s.regBuffer = this.regBuffer;\n  s.regBufferCounter = this.regBufferCounter;\n  return s;\n};\n\nMappers[1].prototype.fromJSON = function(s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.mirroring = s.mirroring;\n  this.oneScreenMirroring = s.oneScreenMirroring;\n  this.prgSwitchingArea = s.prgSwitchingArea;\n  this.prgSwitchingSize = s.prgSwitchingSize;\n  this.vromSwitchingSize = s.vromSwitchingSize;\n  this.romSelectionReg0 = s.romSelectionReg0;\n  this.romSelectionReg1 = s.romSelectionReg1;\n  this.romBankSelect = s.romBankSelect;\n  this.regBuffer = s.regBuffer;\n  this.regBufferCounter = s.regBufferCounter;\n};\n\nMappers[2] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[2].prototype = new Mappers[0]();\n\nMappers[2].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    this.loadRomBank(value, 0x8000);\n  }\n};\n\nMappers[2].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 003 (CNROM)\n *\n * @constructor\n * @example Solomon's Key, Arkanoid, Arkista's Ring, Bump 'n' Jump, Cybernoid\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_003\n */\nMappers[3] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[3].prototype = new Mappers[0]();\n\nMappers[3].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    // This is a VROM bank select command.\n    // Swap in the given VROM bank at 0x0000:\n    var bank = (value % (this.nes.rom.vromCount / 2)) * 2;\n    this.loadVromBank(bank, 0x0000);\n    this.loadVromBank(bank + 1, 0x1000);\n    this.load8kVromBank(value * 2, 0x0000);\n  }\n};\n\nMappers[4] = function(nes) {\n  this.nes = nes;\n\n  this.CMD_SEL_2_1K_VROM_0000 = 0;\n  this.CMD_SEL_2_1K_VROM_0800 = 1;\n  this.CMD_SEL_1K_VROM_1000 = 2;\n  this.CMD_SEL_1K_VROM_1400 = 3;\n  this.CMD_SEL_1K_VROM_1800 = 4;\n  this.CMD_SEL_1K_VROM_1C00 = 5;\n  this.CMD_SEL_ROM_PAGE1 = 6;\n  this.CMD_SEL_ROM_PAGE2 = 7;\n\n  this.command = null;\n  this.prgAddressSelect = null;\n  this.chrAddressSelect = null;\n  this.pageNumber = null;\n  this.irqCounter = null;\n  this.irqLatchValue = null;\n  this.irqEnable = null;\n  this.prgAddressChanged = false;\n};\n\nMappers[4].prototype = new Mappers[0]();\n\nMappers[4].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  switch (address) {\n    case 0x8000:\n      // Command/Address Select register\n      this.command = value & 7;\n      var tmp = (value >> 6) & 1;\n      if (tmp !== this.prgAddressSelect) {\n        this.prgAddressChanged = true;\n      }\n      this.prgAddressSelect = tmp;\n      this.chrAddressSelect = (value >> 7) & 1;\n      break;\n\n    case 0x8001:\n      // Page number for command\n      this.executeCommand(this.command, value);\n      break;\n\n    case 0xa000:\n      // Mirroring select\n      if ((value & 1) !== 0) {\n        this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n      } else {\n        this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n      }\n      break;\n\n    case 0xa001:\n      // SaveRAM Toggle\n      // TODO\n      //nes.getRom().setSaveState((value&1)!=0);\n      break;\n\n    case 0xc000:\n      // IRQ Counter register\n      this.irqCounter = value;\n      //nes.ppu.mapperIrqCounter = 0;\n      break;\n\n    case 0xc001:\n      // IRQ Latch register\n      this.irqLatchValue = value;\n      break;\n\n    case 0xe000:\n      // IRQ Control Reg 0 (disable)\n      //irqCounter = irqLatchValue;\n      this.irqEnable = 0;\n      break;\n\n    case 0xe001:\n      // IRQ Control Reg 1 (enable)\n      this.irqEnable = 1;\n      break;\n\n    default:\n    // Not a MMC3 register.\n    // The game has probably crashed,\n    // since it tries to write to ROM..\n    // IGNORE.\n  }\n};\n\nMappers[4].prototype.executeCommand = function(cmd, arg) {\n  switch (cmd) {\n    case this.CMD_SEL_2_1K_VROM_0000:\n      // Select 2 1KB VROM pages at 0x0000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0000);\n        this.load1kVromBank(arg + 1, 0x0400);\n      } else {\n        this.load1kVromBank(arg, 0x1000);\n        this.load1kVromBank(arg + 1, 0x1400);\n      }\n      break;\n\n    case this.CMD_SEL_2_1K_VROM_0800:\n      // Select 2 1KB VROM pages at 0x0800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0800);\n        this.load1kVromBank(arg + 1, 0x0c00);\n      } else {\n        this.load1kVromBank(arg, 0x1800);\n        this.load1kVromBank(arg + 1, 0x1c00);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1000:\n      // Select 1K VROM Page at 0x1000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1000);\n      } else {\n        this.load1kVromBank(arg, 0x0000);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1400:\n      // Select 1K VROM Page at 0x1400:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1400);\n      } else {\n        this.load1kVromBank(arg, 0x0400);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1800:\n      // Select 1K VROM Page at 0x1800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1800);\n      } else {\n        this.load1kVromBank(arg, 0x0800);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1C00:\n      // Select 1K VROM Page at 0x1C00:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1c00);\n      } else {\n        this.load1kVromBank(arg, 0x0c00);\n      }\n      break;\n\n    case this.CMD_SEL_ROM_PAGE1:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n\n      // Select first switchable ROM page:\n      if (this.prgAddressSelect === 0) {\n        this.load8kRomBank(arg, 0x8000);\n      } else {\n        this.load8kRomBank(arg, 0xc000);\n      }\n      break;\n\n    case this.CMD_SEL_ROM_PAGE2:\n      // Select second switchable ROM page:\n      this.load8kRomBank(arg, 0xa000);\n\n      // hardwire appropriate bank:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n  }\n};\n\nMappers[4].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC3: Invalid ROM! Unable to load.\");\n  }\n\n  // Load hardwired PRG banks (0xC000 and 0xE000):\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2 + 1, 0xe000);\n\n  // Load swappable PRG banks (0x8000 and 0xA000):\n  this.load8kRomBank(0, 0x8000);\n  this.load8kRomBank(1, 0xa000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\nMappers[4].prototype.clockIrqCounter = function() {\n  if (this.irqEnable === 1) {\n    this.irqCounter--;\n    if (this.irqCounter < 0) {\n      // Trigger IRQ:\n      //nes.getCpu().doIrq();\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n      this.irqCounter = this.irqLatchValue;\n    }\n  }\n};\n\nMappers[4].prototype.toJSON = function() {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.command = this.command;\n  s.prgAddressSelect = this.prgAddressSelect;\n  s.chrAddressSelect = this.chrAddressSelect;\n  s.pageNumber = this.pageNumber;\n  s.irqCounter = this.irqCounter;\n  s.irqLatchValue = this.irqLatchValue;\n  s.irqEnable = this.irqEnable;\n  s.prgAddressChanged = this.prgAddressChanged;\n  return s;\n};\n\nMappers[4].prototype.fromJSON = function(s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.command = s.command;\n  this.prgAddressSelect = s.prgAddressSelect;\n  this.chrAddressSelect = s.chrAddressSelect;\n  this.pageNumber = s.pageNumber;\n  this.irqCounter = s.irqCounter;\n  this.irqLatchValue = s.irqLatchValue;\n  this.irqEnable = s.irqEnable;\n  this.prgAddressChanged = s.prgAddressChanged;\n};\n\n/**\n * Mapper005 (MMC5,ExROM)\n *\n * @example Castlevania 3, Just Breed, Uncharted Waters, Romance of the 3 Kingdoms 2, Laser Invasion, Metal Slader Glory, Uchuu Keibitai SDF, Shin 4 Nin Uchi Mahjong - Yakuman Tengoku\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_005\n * @constructor\n */\nMappers[5] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[5].prototype = new Mappers[0]();\n\nMappers[5].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load8kVromBank(value, 0x0000);\n  }\n};\n\nMappers[5].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x5000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  switch (address) {\n    case 0x5100:\n      this.prg_size = value & 3;\n      break;\n    case 0x5101:\n      this.chr_size = value & 3;\n      break;\n    case 0x5102:\n      this.sram_we_a = value & 3;\n      break;\n    case 0x5103:\n      this.sram_we_b = value & 3;\n      break;\n    case 0x5104:\n      this.graphic_mode = value & 3;\n      break;\n    case 0x5105:\n      this.nametable_mode = value;\n      this.nametable_type[0] = value & 3;\n      this.load1kVromBank(value & 3, 0x2000);\n      value >>= 2;\n      this.nametable_type[1] = value & 3;\n      this.load1kVromBank(value & 3, 0x2400);\n      value >>= 2;\n      this.nametable_type[2] = value & 3;\n      this.load1kVromBank(value & 3, 0x2800);\n      value >>= 2;\n      this.nametable_type[3] = value & 3;\n      this.load1kVromBank(value & 3, 0x2c00);\n      break;\n    case 0x5106:\n      this.fill_chr = value;\n      break;\n    case 0x5107:\n      this.fill_pal = value & 3;\n      break;\n    case 0x5113:\n      this.SetBank_SRAM(3, value & 3);\n      break;\n    case 0x5114:\n    case 0x5115:\n    case 0x5116:\n    case 0x5117:\n      this.SetBank_CPU(address, value);\n      break;\n    case 0x5120:\n    case 0x5121:\n    case 0x5122:\n    case 0x5123:\n    case 0x5124:\n    case 0x5125:\n    case 0x5126:\n    case 0x5127:\n      this.chr_mode = 0;\n      this.chr_page[0][address & 7] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5128:\n    case 0x5129:\n    case 0x512a:\n    case 0x512b:\n      this.chr_mode = 1;\n      this.chr_page[1][(address & 3) + 0] = value;\n      this.chr_page[1][(address & 3) + 4] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5200:\n      this.split_control = value;\n      break;\n    case 0x5201:\n      this.split_scroll = value;\n      break;\n    case 0x5202:\n      this.split_page = value & 0x3f;\n      break;\n    case 0x5203:\n      this.irq_line = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5204:\n      this.irq_enable = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5205:\n      this.mult_a = value;\n      break;\n    case 0x5206:\n      this.mult_b = value;\n      break;\n    default:\n      if (address >= 0x5000 && address <= 0x5015) {\n        this.nes.papu.exWrite(address, value);\n      } else if (address >= 0x5c00 && address <= 0x5fff) {\n        if (this.graphic_mode === 2) {\n          // ExRAM\n          // vram write\n        } else if (this.graphic_mode !== 3) {\n          // Split,ExGraphic\n          if (this.irq_status & 0x40) {\n            // vram write\n          } else {\n            // vram write\n          }\n        }\n      } else if (address >= 0x6000 && address <= 0x7fff) {\n        if (this.sram_we_a === 2 && this.sram_we_b === 1) {\n          // additional ram write\n        }\n      }\n      break;\n  }\n};\n\nMappers[5].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0x8000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xa000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xc000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xe000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper007 (AxROM)\n * @example Battletoads, Time Lord, Marble Madness\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_007\n * @constructor\n */\nMappers[7] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[7].prototype = new Mappers[0]();\n\nMappers[7].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load32kRomBank(value & 0x7, 0x8000);\n    if (value & 0x10) {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING2);\n    } else {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n    }\n  }\n};\n\nMappers[7].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"AOROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadPRGROM();\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 011 (Color Dreams)\n *\n * @description http://wiki.nesdev.com/w/index.php/Color_Dreams\n * @example Crystal Mines, Metal Fighter\n * @constructor\n */\nMappers[11] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[11].prototype = new Mappers[0]();\n\nMappers[11].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank:\n    var prgbank1 = ((value & 0xf) * 2) % this.nes.rom.romCount;\n    var prgbank2 = ((value & 0xf) * 2 + 1) % this.nes.rom.romCount;\n\n    this.loadRomBank(prgbank1, 0x8000);\n    this.loadRomBank(prgbank2, 0xc000);\n\n    if (this.nes.rom.vromCount > 0) {\n      // Swap in the given VROM bank at 0x0000:\n      var bank = ((value >> 4) * 2) % this.nes.rom.vromCount;\n      this.loadVromBank(bank, 0x0000);\n      this.loadVromBank(bank + 1, 0x1000);\n    }\n  }\n};\n\n/**\n * Mapper 034 (BNROM, NINA-01)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_034\n * @example Darkseed, Mashou, Mission Impossible 2\n * @constructor\n */\nMappers[34] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[34].prototype = new Mappers[0]();\n\nMappers[34].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    this.load32kRomBank(value, 0x8000);\n  }\n};\n\n/**\n * Mapper 066 (GxROM)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_066\n * @example Doraemon, Dragon Power, Gumshoe, Thunder & Lightning,\n * Super Mario Bros. + Duck Hunt\n * @constructor\n */\nMappers[66] = function(nes) {\n  this.nes = nes;\n  console.log(\"Mapper 66\");\n};\n\nMappers[66].prototype = new Mappers[0]();\n\nMappers[66].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value & 3) * 2, 0x0000);\n  }\n};\n\nmodule.exports = Mappers;\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// jsnes.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fde755bc2c752acfc870","module.exports = {\n  copyArrayElements: function(src, srcPos, dest, destPos, length) {\n    for (var i = 0; i < length; ++i) {\n      dest[destPos + i] = src[srcPos + i];\n    }\n  },\n\n  copyArray: function(src) {\n    var dest = new Array(src.length);\n    for (var i = 0; i < src.length; i++) {\n      dest[i] = src[i];\n    }\n    return dest;\n  },\n\n  fromJSON: function(obj, state) {\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\n      obj[obj.JSON_PROPERTIES[i]] = state[obj.JSON_PROPERTIES[i]];\n    }\n  },\n\n  toJSON: function(obj) {\n    var state = {};\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\n      state[obj.JSON_PROPERTIES[i]] = obj[obj.JSON_PROPERTIES[i]];\n    }\n    return state;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/utils.js\n// module id = 0\n// module chunks = 0 1","var Controller = function() {\n  this.state = new Array(8);\n  for (var i = 0; i < this.state.length; i++) {\n    this.state[i] = 0x40;\n  }\n};\n\nController.BUTTON_A = 0;\nController.BUTTON_B = 1;\nController.BUTTON_SELECT = 2;\nController.BUTTON_START = 3;\nController.BUTTON_UP = 4;\nController.BUTTON_DOWN = 5;\nController.BUTTON_LEFT = 6;\nController.BUTTON_RIGHT = 7;\n\nController.prototype = {\n  buttonDown: function(key) {\n    this.state[key] = 0x41;\n  },\n\n  buttonUp: function(key) {\n    this.state[key] = 0x40;\n  }\n};\n\nmodule.exports = Controller;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller.js\n// module id = 1\n// module chunks = 0 1","var Tile = function() {\n  // Tile data:\n  this.pix = new Array(64);\n\n  this.fbIndex = null;\n  this.tIndex = null;\n  this.x = null;\n  this.y = null;\n  this.w = null;\n  this.h = null;\n  this.incX = null;\n  this.incY = null;\n  this.palIndex = null;\n  this.tpri = null;\n  this.c = null;\n  this.initialized = false;\n  this.opaque = new Array(8);\n};\n\nTile.prototype = {\n  setBuffer: function(scanline) {\n    for (this.y = 0; this.y < 8; this.y++) {\n      this.setScanline(this.y, scanline[this.y], scanline[this.y + 8]);\n    }\n  },\n\n  setScanline: function(sline, b1, b2) {\n    this.initialized = true;\n    this.tIndex = sline << 3;\n    for (this.x = 0; this.x < 8; this.x++) {\n      this.pix[this.tIndex + this.x] =\n        ((b1 >> (7 - this.x)) & 1) + (((b2 >> (7 - this.x)) & 1) << 1);\n      if (this.pix[this.tIndex + this.x] === 0) {\n        this.opaque[sline] = false;\n      }\n    }\n  },\n\n  render: function(\n    buffer,\n    srcx1,\n    srcy1,\n    srcx2,\n    srcy2,\n    dx,\n    dy,\n    palAdd,\n    palette,\n    flipHorizontal,\n    flipVertical,\n    pri,\n    priTable\n  ) {\n    if (dx < -7 || dx >= 256 || dy < -7 || dy >= 240) {\n      return;\n    }\n\n    this.w = srcx2 - srcx1;\n    this.h = srcy2 - srcy1;\n\n    if (dx < 0) {\n      srcx1 -= dx;\n    }\n    if (dx + srcx2 >= 256) {\n      srcx2 = 256 - dx;\n    }\n\n    if (dy < 0) {\n      srcy1 -= dy;\n    }\n    if (dy + srcy2 >= 240) {\n      srcy2 = 240 - dy;\n    }\n\n    if (!flipHorizontal && !flipVertical) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 0;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              //console.log(\"Rendering upright tile to buffer\");\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex++;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n      }\n    } else if (flipHorizontal && !flipVertical) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 7;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex--;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n        this.tIndex += 16;\n      }\n    } else if (flipVertical && !flipHorizontal) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 56;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex++;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n        this.tIndex -= 16;\n      }\n    } else {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 63;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex--;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n      }\n    }\n  },\n\n  isTransparent: function(x, y) {\n    return this.pix[(y << 3) + x] === 0;\n  },\n\n  toJSON: function() {\n    return {\n      opaque: this.opaque,\n      pix: this.pix\n    };\n  },\n\n  fromJSON: function(s) {\n    this.opaque = s.opaque;\n    this.pix = s.pix;\n  }\n};\n\nmodule.exports = Tile;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tile.js\n// module id = 2\n// module chunks = 0 1","module.exports = {\n  Controller: require(\"./controller\"),\n  NES: require(\"./nes\"),\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 3\n// module chunks = 0 1","var CPU = require(\"./cpu\");\nvar Controller = require(\"./controller\");\nvar PPU = require(\"./ppu\");\nvar PAPU = require(\"./papu\");\nvar ROM = require(\"./rom\");\n\nvar NES = function(opts) {\n  this.opts = {\n    onFrame: function() {},\n    onAudioSample: null,\n    onStatusUpdate: function() {},\n\n    // FIXME: not actually used except for in PAPU\n    preferredFrameRate: 60,\n\n    emulateSound: true,\n    sampleRate: 44100 // Sound sample rate in hz\n  };\n  if (typeof opts !== \"undefined\") {\n    var key;\n    for (key in this.opts) {\n      if (typeof opts[key] !== \"undefined\") {\n        this.opts[key] = opts[key];\n      }\n    }\n  }\n\n  this.frameTime = 1000 / this.opts.preferredFrameRate;\n\n  this.ui = {\n    writeFrame: this.opts.onFrame,\n    updateStatus: this.opts.onStatusUpdate\n  };\n  this.cpu = new CPU(this);\n  this.ppu = new PPU(this);\n  this.papu = new PAPU(this);\n  this.mmap = null; // set in loadROM()\n  this.controllers = {\n    1: new Controller(),\n    2: new Controller(),\n  };\n\n  this.ui.updateStatus(\"Ready to load a ROM.\");\n\n  this.frame = this.frame.bind(this);\n  this.buttonDown = this.buttonDown.bind(this);\n  this.buttonUp = this.buttonUp.bind(this);\n  this.zapperMove = this.zapperMove.bind(this);\n  this.zapperFireDown = this.zapperFireDown.bind(this);\n  this.zapperFireUp = this.zapperFireUp.bind(this);\n};\n\nNES.prototype = {\n  fpsFrameCount: 0,\n  romData: null,\n\n  // Resets the system\n  reset: function() {\n    if (this.mmap !== null) {\n      this.mmap.reset();\n    }\n\n    this.cpu.reset();\n    this.ppu.reset();\n    this.papu.reset();\n\n    this.lastFpsTime = null;\n    this.fpsFrameCount = 0;\n  },\n\n  frame: function() {\n    this.ppu.startFrame();\n    var cycles = 0;\n    var emulateSound = this.opts.emulateSound;\n    var cpu = this.cpu;\n    var ppu = this.ppu;\n    var papu = this.papu;\n    FRAMELOOP: for (;;) {\n      if (cpu.cyclesToHalt === 0) {\n        // Execute a CPU instruction\n        cycles = cpu.emulate();\n        if (emulateSound) {\n          papu.clockFrameCounter(cycles);\n        }\n        cycles *= 3;\n      } else {\n        if (cpu.cyclesToHalt > 8) {\n          cycles = 24;\n          if (emulateSound) {\n            papu.clockFrameCounter(8);\n          }\n          cpu.cyclesToHalt -= 8;\n        } else {\n          cycles = cpu.cyclesToHalt * 3;\n          if (emulateSound) {\n            papu.clockFrameCounter(cpu.cyclesToHalt);\n          }\n          cpu.cyclesToHalt = 0;\n        }\n      }\n\n      for (; cycles > 0; cycles--) {\n        if (\n          ppu.curX === ppu.spr0HitX &&\n          ppu.f_spVisibility === 1 &&\n          ppu.scanline - 21 === ppu.spr0HitY\n        ) {\n          // Set sprite 0 hit flag:\n          ppu.setStatusFlag(ppu.STATUS_SPRITE0HIT, true);\n        }\n\n        if (ppu.requestEndFrame) {\n          ppu.nmiCounter--;\n          if (ppu.nmiCounter === 0) {\n            ppu.requestEndFrame = false;\n            ppu.startVBlank();\n            break FRAMELOOP;\n          }\n        }\n\n        ppu.curX++;\n        if (ppu.curX === 341) {\n          ppu.curX = 0;\n          ppu.endScanline();\n        }\n      }\n    }\n    this.fpsFrameCount++;\n  },\n\n  buttonDown: function(controller, button) {\n    this.controllers[controller].buttonDown(button);\n  },\n\n  buttonUp: function(controller, button) {\n    this.controllers[controller].buttonUp(button);\n  },\n\n  zapperMove: function(x, y) {\n    if (!this.mmap) return;\n    this.mmap.zapperX = x;\n    this.mmap.zapperY = y;\n  },\n\n  zapperFireDown: function() {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = true;\n  },\n\n  zapperFireUp: function() {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = false;\n  },\n\n  getFPS: function() {\n    var now = +new Date();\n    var fps = null;\n    if (this.lastFpsTime) {\n      fps = this.fpsFrameCount / ((now - this.lastFpsTime) / 1000);\n    }\n    this.fpsFrameCount = 0;\n    this.lastFpsTime = now;\n    return fps;\n  },\n\n  reloadROM: function() {\n    if (this.romData !== null) {\n      this.loadROM(this.romData);\n    }\n  },\n\n  // Loads a ROM file into the CPU and PPU.\n  // The ROM file is validated first.\n  loadROM: function(data) {\n    // Load ROM file:\n    this.rom = new ROM(this);\n    this.rom.load(data);\n\n    this.reset();\n    this.mmap = this.rom.createMapper();\n    this.mmap.loadROM();\n    this.ppu.setMirroring(this.rom.getMirroringType());\n    this.romData = data;\n  },\n\n  setFramerate: function(rate) {\n    this.opts.preferredFrameRate = rate;\n    this.frameTime = 1000 / rate;\n    this.papu.setSampleRate(this.opts.sampleRate, false);\n  },\n\n  toJSON: function() {\n    return {\n      romData: this.romData,\n      cpu: this.cpu.toJSON(),\n      mmap: this.mmap.toJSON(),\n      ppu: this.ppu.toJSON()\n    };\n  },\n\n  fromJSON: function(s) {\n    this.loadROM(s.romData);\n    this.cpu.fromJSON(s.cpu);\n    this.mmap.fromJSON(s.mmap);\n    this.ppu.fromJSON(s.ppu);\n  }\n};\n\nmodule.exports = NES;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/nes.js\n// module id = 4\n// module chunks = 0 1","var utils = require(\"./utils\");\n\nvar CPU = function(nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.mem = null;\n  this.REG_ACC = null;\n  this.REG_X = null;\n  this.REG_Y = null;\n  this.REG_SP = null;\n  this.REG_PC = null;\n  this.REG_PC_NEW = null;\n  this.REG_STATUS = null;\n  this.F_CARRY = null;\n  this.F_DECIMAL = null;\n  this.F_INTERRUPT = null;\n  this.F_INTERRUPT_NEW = null;\n  this.F_OVERFLOW = null;\n  this.F_SIGN = null;\n  this.F_ZERO = null;\n  this.F_NOTUSED = null;\n  this.F_NOTUSED_NEW = null;\n  this.F_BRK = null;\n  this.F_BRK_NEW = null;\n  this.opdata = null;\n  this.cyclesToHalt = null;\n  this.crash = null;\n  this.irqRequested = null;\n  this.irqType = null;\n\n  this.reset();\n};\n\nCPU.prototype = {\n  // IRQ Types\n  IRQ_NORMAL: 0,\n  IRQ_NMI: 1,\n  IRQ_RESET: 2,\n\n  reset: function() {\n    // Main memory\n    this.mem = new Array(0x10000);\n\n    for (var i = 0; i < 0x2000; i++) {\n      this.mem[i] = 0xff;\n    }\n    for (var p = 0; p < 4; p++) {\n      var j = p * 0x800;\n      this.mem[j + 0x008] = 0xf7;\n      this.mem[j + 0x009] = 0xef;\n      this.mem[j + 0x00a] = 0xdf;\n      this.mem[j + 0x00f] = 0xbf;\n    }\n    for (var k = 0x2001; k < this.mem.length; k++) {\n      this.mem[k] = 0;\n    }\n\n    // CPU Registers:\n    this.REG_ACC = 0;\n    this.REG_X = 0;\n    this.REG_Y = 0;\n    // Reset Stack pointer:\n    this.REG_SP = 0x01ff;\n    // Reset Program counter:\n    this.REG_PC = 0x8000 - 1;\n    this.REG_PC_NEW = 0x8000 - 1;\n    // Reset Status register:\n    this.REG_STATUS = 0x28;\n\n    this.setStatus(0x28);\n\n    // Set flags:\n    this.F_CARRY = 0;\n    this.F_DECIMAL = 0;\n    this.F_INTERRUPT = 1;\n    this.F_INTERRUPT_NEW = 1;\n    this.F_OVERFLOW = 0;\n    this.F_SIGN = 0;\n    this.F_ZERO = 1;\n\n    this.F_NOTUSED = 1;\n    this.F_NOTUSED_NEW = 1;\n    this.F_BRK = 1;\n    this.F_BRK_NEW = 1;\n\n    this.opdata = new OpData().opdata;\n    this.cyclesToHalt = 0;\n\n    // Reset crash flag:\n    this.crash = false;\n\n    // Interrupt notification:\n    this.irqRequested = false;\n    this.irqType = null;\n  },\n\n  // Emulates a single CPU instruction, returns the number of cycles\n  emulate: function() {\n    var temp;\n    var add;\n\n    // Check interrupts:\n    if (this.irqRequested) {\n      temp =\n        this.F_CARRY |\n        ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n        (this.F_INTERRUPT << 2) |\n        (this.F_DECIMAL << 3) |\n        (this.F_BRK << 4) |\n        (this.F_NOTUSED << 5) |\n        (this.F_OVERFLOW << 6) |\n        (this.F_SIGN << 7);\n\n      this.REG_PC_NEW = this.REG_PC;\n      this.F_INTERRUPT_NEW = this.F_INTERRUPT;\n      switch (this.irqType) {\n        case 0: {\n          // Normal IRQ:\n          if (this.F_INTERRUPT !== 0) {\n            // console.log(\"Interrupt was masked.\");\n            break;\n          }\n          this.doIrq(temp);\n          // console.log(\"Did normal IRQ. I=\"+this.F_INTERRUPT);\n          break;\n        }\n        case 1: {\n          // NMI:\n          this.doNonMaskableInterrupt(temp);\n          break;\n        }\n        case 2: {\n          // Reset:\n          this.doResetInterrupt();\n          break;\n        }\n      }\n\n      this.REG_PC = this.REG_PC_NEW;\n      this.F_INTERRUPT = this.F_INTERRUPT_NEW;\n      this.F_BRK = this.F_BRK_NEW;\n      this.irqRequested = false;\n    }\n\n    var opinf = this.opdata[this.nes.mmap.load(this.REG_PC + 1)];\n    var cycleCount = opinf >> 24;\n    var cycleAdd = 0;\n\n    // Find address mode:\n    var addrMode = (opinf >> 8) & 0xff;\n\n    // Increment PC by number of op bytes:\n    var opaddr = this.REG_PC;\n    this.REG_PC += (opinf >> 16) & 0xff;\n\n    var addr = 0;\n    switch (addrMode) {\n      case 0: {\n        // Zero Page mode. Use the address given after the opcode,\n        // but without high byte.\n        addr = this.load(opaddr + 2);\n        break;\n      }\n      case 1: {\n        // Relative mode.\n        addr = this.load(opaddr + 2);\n        if (addr < 0x80) {\n          addr += this.REG_PC;\n        } else {\n          addr += this.REG_PC - 256;\n        }\n        break;\n      }\n      case 2: {\n        // Ignore. Address is implied in instruction.\n        break;\n      }\n      case 3: {\n        // Absolute mode. Use the two bytes following the opcode as\n        // an address.\n        addr = this.load16bit(opaddr + 2);\n        break;\n      }\n      case 4: {\n        // Accumulator mode. The address is in the accumulator\n        // register.\n        addr = this.REG_ACC;\n        break;\n      }\n      case 5: {\n        // Immediate mode. The value is given after the opcode.\n        addr = this.REG_PC;\n        break;\n      }\n      case 6: {\n        // Zero Page Indexed mode, X as index. Use the address given\n        // after the opcode, then add the\n        // X register to it to get the final address.\n        addr = (this.load(opaddr + 2) + this.REG_X) & 0xff;\n        break;\n      }\n      case 7: {\n        // Zero Page Indexed mode, Y as index. Use the address given\n        // after the opcode, then add the\n        // Y register to it to get the final address.\n        addr = (this.load(opaddr + 2) + this.REG_Y) & 0xff;\n        break;\n      }\n      case 8: {\n        // Absolute Indexed Mode, X as index. Same as zero page\n        // indexed, but with the high byte.\n        addr = this.load16bit(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_X;\n        break;\n      }\n      case 9: {\n        // Absolute Indexed Mode, Y as index. Same as zero page\n        // indexed, but with the high byte.\n        addr = this.load16bit(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_Y;\n        break;\n      }\n      case 10: {\n        // Pre-indexed Indirect mode. Find the 16-bit address\n        // starting at the given location plus\n        // the current X register. The value is the contents of that\n        // address.\n        addr = this.load(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_X;\n        addr &= 0xff;\n        addr = this.load16bit(addr);\n        break;\n      }\n      case 11: {\n        // Post-indexed Indirect mode. Find the 16-bit address\n        // contained in the given location\n        // (and the one following). Add to that address the contents\n        // of the Y register. Fetch the value\n        // stored at that adress.\n        addr = this.load16bit(this.load(opaddr + 2));\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_Y;\n        break;\n      }\n      case 12: {\n        // Indirect Absolute mode. Find the 16-bit address contained\n        // at the given location.\n        addr = this.load16bit(opaddr + 2); // Find op\n        if (addr < 0x1fff) {\n          addr =\n            this.mem[addr] +\n            (this.mem[(addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)] << 8); // Read from address given in op\n        } else {\n          addr =\n            this.nes.mmap.load(addr) +\n            (this.nes.mmap.load(\n              (addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)\n            ) <<\n              8);\n        }\n        break;\n      }\n    }\n    // Wrap around for addresses above 0xFFFF:\n    addr &= 0xffff;\n\n    // ----------------------------------------------------------------------------------------------------\n    // Decode & execute instruction:\n    // ----------------------------------------------------------------------------------------------------\n\n    // This should be compiled to a jump table.\n    switch (opinf & 0xff) {\n      case 0: {\n        // *******\n        // * ADC *\n        // *******\n\n        // Add with carry.\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\n\n        if (\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp > 255 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        this.REG_ACC = temp & 255;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 1: {\n        // *******\n        // * AND *\n        // *******\n\n        // AND memory with accumulator.\n        this.REG_ACC = this.REG_ACC & this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        //this.REG_ACC = temp;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 2: {\n        // *******\n        // * ASL *\n        // *******\n\n        // Shift left one bit\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          this.F_CARRY = (this.REG_ACC >> 7) & 1;\n          this.REG_ACC = (this.REG_ACC << 1) & 255;\n          this.F_SIGN = (this.REG_ACC >> 7) & 1;\n          this.F_ZERO = this.REG_ACC;\n        } else {\n          temp = this.load(addr);\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = (temp << 1) & 255;\n          this.F_SIGN = (temp >> 7) & 1;\n          this.F_ZERO = temp;\n          this.write(addr, temp);\n        }\n        break;\n      }\n      case 3: {\n        // *******\n        // * BCC *\n        // *******\n\n        // Branch on carry clear\n        if (this.F_CARRY === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 4: {\n        // *******\n        // * BCS *\n        // *******\n\n        // Branch on carry set\n        if (this.F_CARRY === 1) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 5: {\n        // *******\n        // * BEQ *\n        // *******\n\n        // Branch on zero\n        if (this.F_ZERO === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 6: {\n        // *******\n        // * BIT *\n        // *******\n\n        temp = this.load(addr);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        temp &= this.REG_ACC;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 7: {\n        // *******\n        // * BMI *\n        // *******\n\n        // Branch on negative result\n        if (this.F_SIGN === 1) {\n          cycleCount++;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 8: {\n        // *******\n        // * BNE *\n        // *******\n\n        // Branch on not zero\n        if (this.F_ZERO !== 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 9: {\n        // *******\n        // * BPL *\n        // *******\n\n        // Branch on positive result\n        if (this.F_SIGN === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 10: {\n        // *******\n        // * BRK *\n        // *******\n\n        this.REG_PC += 2;\n        this.push((this.REG_PC >> 8) & 255);\n        this.push(this.REG_PC & 255);\n        this.F_BRK = 1;\n\n        this.push(\n          this.F_CARRY |\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n            (this.F_INTERRUPT << 2) |\n            (this.F_DECIMAL << 3) |\n            (this.F_BRK << 4) |\n            (this.F_NOTUSED << 5) |\n            (this.F_OVERFLOW << 6) |\n            (this.F_SIGN << 7)\n        );\n\n        this.F_INTERRUPT = 1;\n        //this.REG_PC = load(0xFFFE) | (load(0xFFFF) << 8);\n        this.REG_PC = this.load16bit(0xfffe);\n        this.REG_PC--;\n        break;\n      }\n      case 11: {\n        // *******\n        // * BVC *\n        // *******\n\n        // Branch on overflow clear\n        if (this.F_OVERFLOW === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 12: {\n        // *******\n        // * BVS *\n        // *******\n\n        // Branch on overflow set\n        if (this.F_OVERFLOW === 1) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 13: {\n        // *******\n        // * CLC *\n        // *******\n\n        // Clear carry flag\n        this.F_CARRY = 0;\n        break;\n      }\n      case 14: {\n        // *******\n        // * CLD *\n        // *******\n\n        // Clear decimal flag\n        this.F_DECIMAL = 0;\n        break;\n      }\n      case 15: {\n        // *******\n        // * CLI *\n        // *******\n\n        // Clear interrupt flag\n        this.F_INTERRUPT = 0;\n        break;\n      }\n      case 16: {\n        // *******\n        // * CLV *\n        // *******\n\n        // Clear overflow flag\n        this.F_OVERFLOW = 0;\n        break;\n      }\n      case 17: {\n        // *******\n        // * CMP *\n        // *******\n\n        // Compare memory and accumulator:\n        temp = this.REG_ACC - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 18: {\n        // *******\n        // * CPX *\n        // *******\n\n        // Compare memory and index X:\n        temp = this.REG_X - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        break;\n      }\n      case 19: {\n        // *******\n        // * CPY *\n        // *******\n\n        // Compare memory and index Y:\n        temp = this.REG_Y - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        break;\n      }\n      case 20: {\n        // *******\n        // * DEC *\n        // *******\n\n        // Decrement memory by one:\n        temp = (this.load(addr) - 1) & 0xff;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.write(addr, temp);\n        break;\n      }\n      case 21: {\n        // *******\n        // * DEX *\n        // *******\n\n        // Decrement index X by one:\n        this.REG_X = (this.REG_X - 1) & 0xff;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 22: {\n        // *******\n        // * DEY *\n        // *******\n\n        // Decrement index Y by one:\n        this.REG_Y = (this.REG_Y - 1) & 0xff;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 23: {\n        // *******\n        // * EOR *\n        // *******\n\n        // XOR Memory with accumulator, store in accumulator:\n        this.REG_ACC = (this.load(addr) ^ this.REG_ACC) & 0xff;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 24: {\n        // *******\n        // * INC *\n        // *******\n\n        // Increment memory by one:\n        temp = (this.load(addr) + 1) & 0xff;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.write(addr, temp & 0xff);\n        break;\n      }\n      case 25: {\n        // *******\n        // * INX *\n        // *******\n\n        // Increment index X by one:\n        this.REG_X = (this.REG_X + 1) & 0xff;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 26: {\n        // *******\n        // * INY *\n        // *******\n\n        // Increment index Y by one:\n        this.REG_Y++;\n        this.REG_Y &= 0xff;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 27: {\n        // *******\n        // * JMP *\n        // *******\n\n        // Jump to new location:\n        this.REG_PC = addr - 1;\n        break;\n      }\n      case 28: {\n        // *******\n        // * JSR *\n        // *******\n\n        // Jump to new location, saving return address.\n        // Push return address on stack:\n        this.push((this.REG_PC >> 8) & 255);\n        this.push(this.REG_PC & 255);\n        this.REG_PC = addr - 1;\n        break;\n      }\n      case 29: {\n        // *******\n        // * LDA *\n        // *******\n\n        // Load accumulator with memory:\n        this.REG_ACC = this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 30: {\n        // *******\n        // * LDX *\n        // *******\n\n        // Load index X with memory:\n        this.REG_X = this.load(addr);\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 31: {\n        // *******\n        // * LDY *\n        // *******\n\n        // Load index Y with memory:\n        this.REG_Y = this.load(addr);\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 32: {\n        // *******\n        // * LSR *\n        // *******\n\n        // Shift right one bit:\n        if (addrMode === 4) {\n          // ADDR_ACC\n\n          temp = this.REG_ACC & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr) & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = 0;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 33: {\n        // *******\n        // * NOP *\n        // *******\n\n        // No OPeration.\n        // Ignore.\n        break;\n      }\n      case 34: {\n        // *******\n        // * ORA *\n        // *******\n\n        // OR memory with accumulator, store in accumulator.\n        temp = (this.load(addr) | this.REG_ACC) & 255;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.REG_ACC = temp;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 35: {\n        // *******\n        // * PHA *\n        // *******\n\n        // Push accumulator on stack\n        this.push(this.REG_ACC);\n        break;\n      }\n      case 36: {\n        // *******\n        // * PHP *\n        // *******\n\n        // Push processor status on stack\n        this.F_BRK = 1;\n        this.push(\n          this.F_CARRY |\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n            (this.F_INTERRUPT << 2) |\n            (this.F_DECIMAL << 3) |\n            (this.F_BRK << 4) |\n            (this.F_NOTUSED << 5) |\n            (this.F_OVERFLOW << 6) |\n            (this.F_SIGN << 7)\n        );\n        break;\n      }\n      case 37: {\n        // *******\n        // * PLA *\n        // *******\n\n        // Pull accumulator from stack\n        this.REG_ACC = this.pull();\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 38: {\n        // *******\n        // * PLP *\n        // *******\n\n        // Pull processor status from stack\n        temp = this.pull();\n        this.F_CARRY = temp & 1;\n        this.F_ZERO = ((temp >> 1) & 1) === 1 ? 0 : 1;\n        this.F_INTERRUPT = (temp >> 2) & 1;\n        this.F_DECIMAL = (temp >> 3) & 1;\n        this.F_BRK = (temp >> 4) & 1;\n        this.F_NOTUSED = (temp >> 5) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        this.F_SIGN = (temp >> 7) & 1;\n\n        this.F_NOTUSED = 1;\n        break;\n      }\n      case 39: {\n        // *******\n        // * ROL *\n        // *******\n\n        // Rotate one bit left\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          temp = this.REG_ACC;\n          add = this.F_CARRY;\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = ((temp << 1) & 0xff) + add;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr);\n          add = this.F_CARRY;\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = ((temp << 1) & 0xff) + add;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 40: {\n        // *******\n        // * ROR *\n        // *******\n\n        // Rotate one bit right\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          add = this.F_CARRY << 7;\n          this.F_CARRY = this.REG_ACC & 1;\n          temp = (this.REG_ACC >> 1) + add;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr);\n          add = this.F_CARRY << 7;\n          this.F_CARRY = temp & 1;\n          temp = (temp >> 1) + add;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 41: {\n        // *******\n        // * RTI *\n        // *******\n\n        // Return from interrupt. Pull status and PC from stack.\n\n        temp = this.pull();\n        this.F_CARRY = temp & 1;\n        this.F_ZERO = ((temp >> 1) & 1) === 0 ? 1 : 0;\n        this.F_INTERRUPT = (temp >> 2) & 1;\n        this.F_DECIMAL = (temp >> 3) & 1;\n        this.F_BRK = (temp >> 4) & 1;\n        this.F_NOTUSED = (temp >> 5) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        this.F_SIGN = (temp >> 7) & 1;\n\n        this.REG_PC = this.pull();\n        this.REG_PC += this.pull() << 8;\n        if (this.REG_PC === 0xffff) {\n          return;\n        }\n        this.REG_PC--;\n        this.F_NOTUSED = 1;\n        break;\n      }\n      case 42: {\n        // *******\n        // * RTS *\n        // *******\n\n        // Return from subroutine. Pull PC from stack.\n\n        this.REG_PC = this.pull();\n        this.REG_PC += this.pull() << 8;\n\n        if (this.REG_PC === 0xffff) {\n          return; // return from NSF play routine:\n        }\n        break;\n      }\n      case 43: {\n        // *******\n        // * SBC *\n        // *******\n\n        temp = this.REG_ACC - this.load(addr) - (1 - this.F_CARRY);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_ACC = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 44: {\n        // *******\n        // * SEC *\n        // *******\n\n        // Set carry flag\n        this.F_CARRY = 1;\n        break;\n      }\n      case 45: {\n        // *******\n        // * SED *\n        // *******\n\n        // Set decimal mode\n        this.F_DECIMAL = 1;\n        break;\n      }\n      case 46: {\n        // *******\n        // * SEI *\n        // *******\n\n        // Set interrupt disable status\n        this.F_INTERRUPT = 1;\n        break;\n      }\n      case 47: {\n        // *******\n        // * STA *\n        // *******\n\n        // Store accumulator in memory\n        this.write(addr, this.REG_ACC);\n        break;\n      }\n      case 48: {\n        // *******\n        // * STX *\n        // *******\n\n        // Store index X in memory\n        this.write(addr, this.REG_X);\n        break;\n      }\n      case 49: {\n        // *******\n        // * STY *\n        // *******\n\n        // Store index Y in memory:\n        this.write(addr, this.REG_Y);\n        break;\n      }\n      case 50: {\n        // *******\n        // * TAX *\n        // *******\n\n        // Transfer accumulator to index X:\n        this.REG_X = this.REG_ACC;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 51: {\n        // *******\n        // * TAY *\n        // *******\n\n        // Transfer accumulator to index Y:\n        this.REG_Y = this.REG_ACC;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 52: {\n        // *******\n        // * TSX *\n        // *******\n\n        // Transfer stack pointer to index X:\n        this.REG_X = this.REG_SP - 0x0100;\n        this.F_SIGN = (this.REG_SP >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 53: {\n        // *******\n        // * TXA *\n        // *******\n\n        // Transfer index X to accumulator:\n        this.REG_ACC = this.REG_X;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 54: {\n        // *******\n        // * TXS *\n        // *******\n\n        // Transfer index X to stack pointer:\n        this.REG_SP = this.REG_X + 0x0100;\n        this.stackWrap();\n        break;\n      }\n      case 55: {\n        // *******\n        // * TYA *\n        // *******\n\n        // Transfer index Y to accumulator:\n        this.REG_ACC = this.REG_Y;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      default: {\n        // *******\n        // * ??? *\n        // *******\n\n        this.nes.stop();\n        this.nes.crashMessage =\n          \"Game crashed, invalid opcode at address $\" + opaddr.toString(16);\n        break;\n      }\n    } // end of switch\n\n    return cycleCount;\n  },\n\n  load: function(addr) {\n    if (addr < 0x2000) {\n      return this.mem[addr & 0x7ff];\n    } else {\n      return this.nes.mmap.load(addr);\n    }\n  },\n\n  load16bit: function(addr) {\n    if (addr < 0x1fff) {\n      return this.mem[addr & 0x7ff] | (this.mem[(addr + 1) & 0x7ff] << 8);\n    } else {\n      return this.nes.mmap.load(addr) | (this.nes.mmap.load(addr + 1) << 8);\n    }\n  },\n\n  write: function(addr, val) {\n    if (addr < 0x2000) {\n      this.mem[addr & 0x7ff] = val;\n    } else {\n      this.nes.mmap.write(addr, val);\n    }\n  },\n\n  requestIrq: function(type) {\n    if (this.irqRequested) {\n      if (type === this.IRQ_NORMAL) {\n        return;\n      }\n      // console.log(\"too fast irqs. type=\"+type);\n    }\n    this.irqRequested = true;\n    this.irqType = type;\n  },\n\n  push: function(value) {\n    this.nes.mmap.write(this.REG_SP, value);\n    this.REG_SP--;\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n  },\n\n  stackWrap: function() {\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n  },\n\n  pull: function() {\n    this.REG_SP++;\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n    return this.nes.mmap.load(this.REG_SP);\n  },\n\n  pageCrossed: function(addr1, addr2) {\n    return (addr1 & 0xff00) !== (addr2 & 0xff00);\n  },\n\n  haltCycles: function(cycles) {\n    this.cyclesToHalt += cycles;\n  },\n\n  doNonMaskableInterrupt: function(status) {\n    if ((this.nes.mmap.load(0x2000) & 128) !== 0) {\n      // Check whether VBlank Interrupts are enabled\n\n      this.REG_PC_NEW++;\n      this.push((this.REG_PC_NEW >> 8) & 0xff);\n      this.push(this.REG_PC_NEW & 0xff);\n      //this.F_INTERRUPT_NEW = 1;\n      this.push(status);\n\n      this.REG_PC_NEW =\n        this.nes.mmap.load(0xfffa) | (this.nes.mmap.load(0xfffb) << 8);\n      this.REG_PC_NEW--;\n    }\n  },\n\n  doResetInterrupt: function() {\n    this.REG_PC_NEW =\n      this.nes.mmap.load(0xfffc) | (this.nes.mmap.load(0xfffd) << 8);\n    this.REG_PC_NEW--;\n  },\n\n  doIrq: function(status) {\n    this.REG_PC_NEW++;\n    this.push((this.REG_PC_NEW >> 8) & 0xff);\n    this.push(this.REG_PC_NEW & 0xff);\n    this.push(status);\n    this.F_INTERRUPT_NEW = 1;\n    this.F_BRK_NEW = 0;\n\n    this.REG_PC_NEW =\n      this.nes.mmap.load(0xfffe) | (this.nes.mmap.load(0xffff) << 8);\n    this.REG_PC_NEW--;\n  },\n\n  getStatus: function() {\n    return (\n      this.F_CARRY |\n      (this.F_ZERO << 1) |\n      (this.F_INTERRUPT << 2) |\n      (this.F_DECIMAL << 3) |\n      (this.F_BRK << 4) |\n      (this.F_NOTUSED << 5) |\n      (this.F_OVERFLOW << 6) |\n      (this.F_SIGN << 7)\n    );\n  },\n\n  setStatus: function(st) {\n    this.F_CARRY = st & 1;\n    this.F_ZERO = (st >> 1) & 1;\n    this.F_INTERRUPT = (st >> 2) & 1;\n    this.F_DECIMAL = (st >> 3) & 1;\n    this.F_BRK = (st >> 4) & 1;\n    this.F_NOTUSED = (st >> 5) & 1;\n    this.F_OVERFLOW = (st >> 6) & 1;\n    this.F_SIGN = (st >> 7) & 1;\n  },\n\n  JSON_PROPERTIES: [\n    \"mem\",\n    \"cyclesToHalt\",\n    \"irqRequested\",\n    \"irqType\",\n    // Registers\n    \"REG_ACC\",\n    \"REG_X\",\n    \"REG_Y\",\n    \"REG_SP\",\n    \"REG_PC\",\n    \"REG_PC_NEW\",\n    \"REG_STATUS\",\n    // Status\n    \"F_CARRY\",\n    \"F_DECIMAL\",\n    \"F_INTERRUPT\",\n    \"F_INTERRUPT_NEW\",\n    \"F_OVERFLOW\",\n    \"F_SIGN\",\n    \"F_ZERO\",\n    \"F_NOTUSED\",\n    \"F_NOTUSED_NEW\",\n    \"F_BRK\",\n    \"F_BRK_NEW\"\n  ],\n\n  toJSON: function() {\n    return utils.toJSON(this);\n  },\n\n  fromJSON: function(s) {\n    utils.fromJSON(this, s);\n  }\n};\n\n// Generates and provides an array of details about instructions\nvar OpData = function() {\n  this.opdata = new Array(256);\n\n  // Set all to invalid instruction (to detect crashes):\n  for (var i = 0; i < 256; i++) this.opdata[i] = 0xff;\n\n  // Now fill in all valid opcodes:\n\n  // ADC:\n  this.setOp(this.INS_ADC, 0x69, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ADC, 0x65, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ADC, 0x75, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ADC, 0x6d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ADC, 0x7d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ADC, 0x79, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ADC, 0x61, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ADC, 0x71, this.ADDR_POSTIDXIND, 2, 5);\n\n  // AND:\n  this.setOp(this.INS_AND, 0x29, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_AND, 0x25, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_AND, 0x35, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_AND, 0x2d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_AND, 0x3d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_AND, 0x39, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_AND, 0x21, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_AND, 0x31, this.ADDR_POSTIDXIND, 2, 5);\n\n  // ASL:\n  this.setOp(this.INS_ASL, 0x0a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ASL, 0x06, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ASL, 0x16, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ASL, 0x0e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ASL, 0x1e, this.ADDR_ABSX, 3, 7);\n\n  // BCC:\n  this.setOp(this.INS_BCC, 0x90, this.ADDR_REL, 2, 2);\n\n  // BCS:\n  this.setOp(this.INS_BCS, 0xb0, this.ADDR_REL, 2, 2);\n\n  // BEQ:\n  this.setOp(this.INS_BEQ, 0xf0, this.ADDR_REL, 2, 2);\n\n  // BIT:\n  this.setOp(this.INS_BIT, 0x24, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_BIT, 0x2c, this.ADDR_ABS, 3, 4);\n\n  // BMI:\n  this.setOp(this.INS_BMI, 0x30, this.ADDR_REL, 2, 2);\n\n  // BNE:\n  this.setOp(this.INS_BNE, 0xd0, this.ADDR_REL, 2, 2);\n\n  // BPL:\n  this.setOp(this.INS_BPL, 0x10, this.ADDR_REL, 2, 2);\n\n  // BRK:\n  this.setOp(this.INS_BRK, 0x00, this.ADDR_IMP, 1, 7);\n\n  // BVC:\n  this.setOp(this.INS_BVC, 0x50, this.ADDR_REL, 2, 2);\n\n  // BVS:\n  this.setOp(this.INS_BVS, 0x70, this.ADDR_REL, 2, 2);\n\n  // CLC:\n  this.setOp(this.INS_CLC, 0x18, this.ADDR_IMP, 1, 2);\n\n  // CLD:\n  this.setOp(this.INS_CLD, 0xd8, this.ADDR_IMP, 1, 2);\n\n  // CLI:\n  this.setOp(this.INS_CLI, 0x58, this.ADDR_IMP, 1, 2);\n\n  // CLV:\n  this.setOp(this.INS_CLV, 0xb8, this.ADDR_IMP, 1, 2);\n\n  // CMP:\n  this.setOp(this.INS_CMP, 0xc9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CMP, 0xc5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CMP, 0xd5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_CMP, 0xcd, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_CMP, 0xdd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_CMP, 0xd9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_CMP, 0xc1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_CMP, 0xd1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // CPX:\n  this.setOp(this.INS_CPX, 0xe0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPX, 0xe4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPX, 0xec, this.ADDR_ABS, 3, 4);\n\n  // CPY:\n  this.setOp(this.INS_CPY, 0xc0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPY, 0xc4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPY, 0xcc, this.ADDR_ABS, 3, 4);\n\n  // DEC:\n  this.setOp(this.INS_DEC, 0xc6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_DEC, 0xd6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_DEC, 0xce, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_DEC, 0xde, this.ADDR_ABSX, 3, 7);\n\n  // DEX:\n  this.setOp(this.INS_DEX, 0xca, this.ADDR_IMP, 1, 2);\n\n  // DEY:\n  this.setOp(this.INS_DEY, 0x88, this.ADDR_IMP, 1, 2);\n\n  // EOR:\n  this.setOp(this.INS_EOR, 0x49, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_EOR, 0x45, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_EOR, 0x55, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_EOR, 0x4d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_EOR, 0x5d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_EOR, 0x59, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_EOR, 0x41, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_EOR, 0x51, this.ADDR_POSTIDXIND, 2, 5);\n\n  // INC:\n  this.setOp(this.INS_INC, 0xe6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_INC, 0xf6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_INC, 0xee, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_INC, 0xfe, this.ADDR_ABSX, 3, 7);\n\n  // INX:\n  this.setOp(this.INS_INX, 0xe8, this.ADDR_IMP, 1, 2);\n\n  // INY:\n  this.setOp(this.INS_INY, 0xc8, this.ADDR_IMP, 1, 2);\n\n  // JMP:\n  this.setOp(this.INS_JMP, 0x4c, this.ADDR_ABS, 3, 3);\n  this.setOp(this.INS_JMP, 0x6c, this.ADDR_INDABS, 3, 5);\n\n  // JSR:\n  this.setOp(this.INS_JSR, 0x20, this.ADDR_ABS, 3, 6);\n\n  // LDA:\n  this.setOp(this.INS_LDA, 0xa9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDA, 0xa5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDA, 0xb5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDA, 0xad, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDA, 0xbd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_LDA, 0xb9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_LDA, 0xa1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_LDA, 0xb1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // LDX:\n  this.setOp(this.INS_LDX, 0xa2, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDX, 0xa6, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDX, 0xb6, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_LDX, 0xae, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDX, 0xbe, this.ADDR_ABSY, 3, 4);\n\n  // LDY:\n  this.setOp(this.INS_LDY, 0xa0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDY, 0xa4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDY, 0xb4, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDY, 0xac, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDY, 0xbc, this.ADDR_ABSX, 3, 4);\n\n  // LSR:\n  this.setOp(this.INS_LSR, 0x4a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_LSR, 0x46, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_LSR, 0x56, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_LSR, 0x4e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_LSR, 0x5e, this.ADDR_ABSX, 3, 7);\n\n  // NOP:\n  this.setOp(this.INS_NOP, 0xea, this.ADDR_IMP, 1, 2);\n\n  // ORA:\n  this.setOp(this.INS_ORA, 0x09, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ORA, 0x05, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ORA, 0x15, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ORA, 0x0d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ORA, 0x1d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ORA, 0x19, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ORA, 0x01, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ORA, 0x11, this.ADDR_POSTIDXIND, 2, 5);\n\n  // PHA:\n  this.setOp(this.INS_PHA, 0x48, this.ADDR_IMP, 1, 3);\n\n  // PHP:\n  this.setOp(this.INS_PHP, 0x08, this.ADDR_IMP, 1, 3);\n\n  // PLA:\n  this.setOp(this.INS_PLA, 0x68, this.ADDR_IMP, 1, 4);\n\n  // PLP:\n  this.setOp(this.INS_PLP, 0x28, this.ADDR_IMP, 1, 4);\n\n  // ROL:\n  this.setOp(this.INS_ROL, 0x2a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROL, 0x26, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROL, 0x36, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROL, 0x2e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROL, 0x3e, this.ADDR_ABSX, 3, 7);\n\n  // ROR:\n  this.setOp(this.INS_ROR, 0x6a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROR, 0x66, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROR, 0x76, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROR, 0x6e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROR, 0x7e, this.ADDR_ABSX, 3, 7);\n\n  // RTI:\n  this.setOp(this.INS_RTI, 0x40, this.ADDR_IMP, 1, 6);\n\n  // RTS:\n  this.setOp(this.INS_RTS, 0x60, this.ADDR_IMP, 1, 6);\n\n  // SBC:\n  this.setOp(this.INS_SBC, 0xe9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SBC, 0xe5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_SBC, 0xf5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_SBC, 0xed, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_SBC, 0xfd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_SBC, 0xf9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_SBC, 0xe1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_SBC, 0xf1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // SEC:\n  this.setOp(this.INS_SEC, 0x38, this.ADDR_IMP, 1, 2);\n\n  // SED:\n  this.setOp(this.INS_SED, 0xf8, this.ADDR_IMP, 1, 2);\n\n  // SEI:\n  this.setOp(this.INS_SEI, 0x78, this.ADDR_IMP, 1, 2);\n\n  // STA:\n  this.setOp(this.INS_STA, 0x85, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STA, 0x95, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STA, 0x8d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_STA, 0x9d, this.ADDR_ABSX, 3, 5);\n  this.setOp(this.INS_STA, 0x99, this.ADDR_ABSY, 3, 5);\n  this.setOp(this.INS_STA, 0x81, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_STA, 0x91, this.ADDR_POSTIDXIND, 2, 6);\n\n  // STX:\n  this.setOp(this.INS_STX, 0x86, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STX, 0x96, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_STX, 0x8e, this.ADDR_ABS, 3, 4);\n\n  // STY:\n  this.setOp(this.INS_STY, 0x84, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STY, 0x94, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STY, 0x8c, this.ADDR_ABS, 3, 4);\n\n  // TAX:\n  this.setOp(this.INS_TAX, 0xaa, this.ADDR_IMP, 1, 2);\n\n  // TAY:\n  this.setOp(this.INS_TAY, 0xa8, this.ADDR_IMP, 1, 2);\n\n  // TSX:\n  this.setOp(this.INS_TSX, 0xba, this.ADDR_IMP, 1, 2);\n\n  // TXA:\n  this.setOp(this.INS_TXA, 0x8a, this.ADDR_IMP, 1, 2);\n\n  // TXS:\n  this.setOp(this.INS_TXS, 0x9a, this.ADDR_IMP, 1, 2);\n\n  // TYA:\n  this.setOp(this.INS_TYA, 0x98, this.ADDR_IMP, 1, 2);\n\n  // prettier-ignore\n  this.cycTable = new Array(\n    /*0x00*/ 7,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,\n    /*0x10*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x20*/ 6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,\n    /*0x30*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x40*/ 6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,\n    /*0x50*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x60*/ 6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,\n    /*0x70*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x80*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\n    /*0x90*/ 2,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,\n    /*0xA0*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\n    /*0xB0*/ 2,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,\n    /*0xC0*/ 2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,\n    /*0xD0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0xE0*/ 2,6,3,8,3,3,5,5,2,2,2,2,4,4,6,6,\n    /*0xF0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7\n  );\n\n  this.instname = new Array(56);\n\n  // Instruction Names:\n  this.instname[0] = \"ADC\";\n  this.instname[1] = \"AND\";\n  this.instname[2] = \"ASL\";\n  this.instname[3] = \"BCC\";\n  this.instname[4] = \"BCS\";\n  this.instname[5] = \"BEQ\";\n  this.instname[6] = \"BIT\";\n  this.instname[7] = \"BMI\";\n  this.instname[8] = \"BNE\";\n  this.instname[9] = \"BPL\";\n  this.instname[10] = \"BRK\";\n  this.instname[11] = \"BVC\";\n  this.instname[12] = \"BVS\";\n  this.instname[13] = \"CLC\";\n  this.instname[14] = \"CLD\";\n  this.instname[15] = \"CLI\";\n  this.instname[16] = \"CLV\";\n  this.instname[17] = \"CMP\";\n  this.instname[18] = \"CPX\";\n  this.instname[19] = \"CPY\";\n  this.instname[20] = \"DEC\";\n  this.instname[21] = \"DEX\";\n  this.instname[22] = \"DEY\";\n  this.instname[23] = \"EOR\";\n  this.instname[24] = \"INC\";\n  this.instname[25] = \"INX\";\n  this.instname[26] = \"INY\";\n  this.instname[27] = \"JMP\";\n  this.instname[28] = \"JSR\";\n  this.instname[29] = \"LDA\";\n  this.instname[30] = \"LDX\";\n  this.instname[31] = \"LDY\";\n  this.instname[32] = \"LSR\";\n  this.instname[33] = \"NOP\";\n  this.instname[34] = \"ORA\";\n  this.instname[35] = \"PHA\";\n  this.instname[36] = \"PHP\";\n  this.instname[37] = \"PLA\";\n  this.instname[38] = \"PLP\";\n  this.instname[39] = \"ROL\";\n  this.instname[40] = \"ROR\";\n  this.instname[41] = \"RTI\";\n  this.instname[42] = \"RTS\";\n  this.instname[43] = \"SBC\";\n  this.instname[44] = \"SEC\";\n  this.instname[45] = \"SED\";\n  this.instname[46] = \"SEI\";\n  this.instname[47] = \"STA\";\n  this.instname[48] = \"STX\";\n  this.instname[49] = \"STY\";\n  this.instname[50] = \"TAX\";\n  this.instname[51] = \"TAY\";\n  this.instname[52] = \"TSX\";\n  this.instname[53] = \"TXA\";\n  this.instname[54] = \"TXS\";\n  this.instname[55] = \"TYA\";\n\n  this.addrDesc = new Array(\n    \"Zero Page           \",\n    \"Relative            \",\n    \"Implied             \",\n    \"Absolute            \",\n    \"Accumulator         \",\n    \"Immediate           \",\n    \"Zero Page,X         \",\n    \"Zero Page,Y         \",\n    \"Absolute,X          \",\n    \"Absolute,Y          \",\n    \"Preindexed Indirect \",\n    \"Postindexed Indirect\",\n    \"Indirect Absolute   \"\n  );\n};\n\nOpData.prototype = {\n  INS_ADC: 0,\n  INS_AND: 1,\n  INS_ASL: 2,\n\n  INS_BCC: 3,\n  INS_BCS: 4,\n  INS_BEQ: 5,\n  INS_BIT: 6,\n  INS_BMI: 7,\n  INS_BNE: 8,\n  INS_BPL: 9,\n  INS_BRK: 10,\n  INS_BVC: 11,\n  INS_BVS: 12,\n\n  INS_CLC: 13,\n  INS_CLD: 14,\n  INS_CLI: 15,\n  INS_CLV: 16,\n  INS_CMP: 17,\n  INS_CPX: 18,\n  INS_CPY: 19,\n\n  INS_DEC: 20,\n  INS_DEX: 21,\n  INS_DEY: 22,\n\n  INS_EOR: 23,\n\n  INS_INC: 24,\n  INS_INX: 25,\n  INS_INY: 26,\n\n  INS_JMP: 27,\n  INS_JSR: 28,\n\n  INS_LDA: 29,\n  INS_LDX: 30,\n  INS_LDY: 31,\n  INS_LSR: 32,\n\n  INS_NOP: 33,\n\n  INS_ORA: 34,\n\n  INS_PHA: 35,\n  INS_PHP: 36,\n  INS_PLA: 37,\n  INS_PLP: 38,\n\n  INS_ROL: 39,\n  INS_ROR: 40,\n  INS_RTI: 41,\n  INS_RTS: 42,\n\n  INS_SBC: 43,\n  INS_SEC: 44,\n  INS_SED: 45,\n  INS_SEI: 46,\n  INS_STA: 47,\n  INS_STX: 48,\n  INS_STY: 49,\n\n  INS_TAX: 50,\n  INS_TAY: 51,\n  INS_TSX: 52,\n  INS_TXA: 53,\n  INS_TXS: 54,\n  INS_TYA: 55,\n\n  INS_DUMMY: 56, // dummy instruction used for 'halting' the processor some cycles\n\n  // -------------------------------- //\n\n  // Addressing modes:\n  ADDR_ZP: 0,\n  ADDR_REL: 1,\n  ADDR_IMP: 2,\n  ADDR_ABS: 3,\n  ADDR_ACC: 4,\n  ADDR_IMM: 5,\n  ADDR_ZPX: 6,\n  ADDR_ZPY: 7,\n  ADDR_ABSX: 8,\n  ADDR_ABSY: 9,\n  ADDR_PREIDXIND: 10,\n  ADDR_POSTIDXIND: 11,\n  ADDR_INDABS: 12,\n\n  setOp: function(inst, op, addr, size, cycles) {\n    this.opdata[op] =\n      (inst & 0xff) |\n      ((addr & 0xff) << 8) |\n      ((size & 0xff) << 16) |\n      ((cycles & 0xff) << 24);\n  }\n};\n\nmodule.exports = CPU;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/cpu.js\n// module id = 5\n// module chunks = 0 1","var Tile = require('./tile');\nvar utils = require('./utils');\n\nvar PPU = function(nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.vramMem = null;\n  this.spriteMem = null;\n  this.vramAddress = null;\n  this.vramTmpAddress = null;\n  this.vramBufferedReadValue = null;\n  this.firstWrite = null;\n  this.sramAddress = null;\n  this.currentMirroring = null;\n  this.requestEndFrame = null;\n  this.nmiOk = null;\n  this.dummyCycleToggle = null;\n  this.validTileData = null;\n  this.nmiCounter = null;\n  this.scanlineAlreadyRendered = null;\n  this.f_nmiOnVblank = null;\n  this.f_spriteSize = null;\n  this.f_bgPatternTable = null;\n  this.f_spPatternTable = null;\n  this.f_addrInc = null;\n  this.f_nTblAddress = null;\n  this.f_color = null;\n  this.f_spVisibility = null;\n  this.f_bgVisibility = null;\n  this.f_spClipping = null;\n  this.f_bgClipping = null;\n  this.f_dispType = null;\n  this.cntFV = null;\n  this.cntV = null;\n  this.cntH = null;\n  this.cntVT = null;\n  this.cntHT = null;\n  this.regFV = null;\n  this.regV = null;\n  this.regH = null;\n  this.regVT = null;\n  this.regHT = null;\n  this.regFH = null;\n  this.regS = null;\n  this.curNt = null;\n  this.attrib = null;\n  this.buffer = null;\n  this.bgbuffer = null;\n  this.pixrendered = null;\n\n  this.validTileData = null;\n  this.scantile = null;\n  this.scanline = null;\n  this.lastRenderedScanline = null;\n  this.curX = null;\n  this.sprX = null;\n  this.sprY = null;\n  this.sprTile = null;\n  this.sprCol = null;\n  this.vertFlip = null;\n  this.horiFlip = null;\n  this.bgPriority = null;\n  this.spr0HitX = null;\n  this.spr0HitY = null;\n  this.hitSpr0 = null;\n  this.sprPalette = null;\n  this.imgPalette = null;\n  this.ptTile = null;\n  this.ntable1 = null;\n  this.currentMirroring = null;\n  this.nameTable = null;\n  this.vramMirrorTable = null;\n  this.palTable = null;\n\n  // Rendering Options:\n  this.showSpr0Hit = false;\n  this.clipToTvSize = true;\n\n  this.reset();\n};\n\nPPU.prototype = {\n  // Status flags:\n  STATUS_VRAMWRITE: 4,\n  STATUS_SLSPRITECOUNT: 5,\n  STATUS_SPRITE0HIT: 6,\n  STATUS_VBLANK: 7,\n\n  reset: function() {\n    var i;\n\n    // Memory\n    this.vramMem = new Array(0x8000);\n    this.spriteMem = new Array(0x100);\n    for (i = 0; i < this.vramMem.length; i++) {\n      this.vramMem[i] = 0;\n    }\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteMem[i] = 0;\n    }\n\n    // VRAM I/O:\n    this.vramAddress = null;\n    this.vramTmpAddress = null;\n    this.vramBufferedReadValue = 0;\n    this.firstWrite = true; // VRAM/Scroll Hi/Lo latch\n\n    // SPR-RAM I/O:\n    this.sramAddress = 0; // 8-bit only.\n\n    this.currentMirroring = -1;\n    this.requestEndFrame = false;\n    this.nmiOk = false;\n    this.dummyCycleToggle = false;\n    this.validTileData = false;\n    this.nmiCounter = 0;\n    this.scanlineAlreadyRendered = null;\n\n    // Control Flags Register 1:\n    this.f_nmiOnVblank = 0; // NMI on VBlank. 0=disable, 1=enable\n    this.f_spriteSize = 0; // Sprite size. 0=8x8, 1=8x16\n    this.f_bgPatternTable = 0; // Background Pattern Table address. 0=0x0000,1=0x1000\n    this.f_spPatternTable = 0; // Sprite Pattern Table address. 0=0x0000,1=0x1000\n    this.f_addrInc = 0; // PPU Address Increment. 0=1,1=32\n    this.f_nTblAddress = 0; // Name Table Address. 0=0x2000,1=0x2400,2=0x2800,3=0x2C00\n\n    // Control Flags Register 2:\n    this.f_color = 0; // Background color. 0=black, 1=blue, 2=green, 4=red\n    this.f_spVisibility = 0; // Sprite visibility. 0=not displayed,1=displayed\n    this.f_bgVisibility = 0; // Background visibility. 0=Not Displayed,1=displayed\n    this.f_spClipping = 0; // Sprite clipping. 0=Sprites invisible in left 8-pixel column,1=No clipping\n    this.f_bgClipping = 0; // Background clipping. 0=BG invisible in left 8-pixel column, 1=No clipping\n    this.f_dispType = 0; // Display type. 0=color, 1=monochrome\n\n    // Counters:\n    this.cntFV = 0;\n    this.cntV = 0;\n    this.cntH = 0;\n    this.cntVT = 0;\n    this.cntHT = 0;\n\n    // Registers:\n    this.regFV = 0;\n    this.regV = 0;\n    this.regH = 0;\n    this.regVT = 0;\n    this.regHT = 0;\n    this.regFH = 0;\n    this.regS = 0;\n\n    // These are temporary variables used in rendering and sound procedures.\n    // Their states outside of those procedures can be ignored.\n    // TODO: the use of this is a bit weird, investigate\n    this.curNt = null;\n\n    // Variables used when rendering:\n    this.attrib = new Array(32);\n    this.buffer = new Array(256 * 240);\n    this.bgbuffer = new Array(256 * 240);\n    this.pixrendered = new Array(256 * 240);\n\n    this.validTileData = null;\n\n    this.scantile = new Array(32);\n\n    // Initialize misc vars:\n    this.scanline = 0;\n    this.lastRenderedScanline = -1;\n    this.curX = 0;\n\n    // Sprite data:\n    this.sprX = new Array(64); // X coordinate\n    this.sprY = new Array(64); // Y coordinate\n    this.sprTile = new Array(64); // Tile Index (into pattern table)\n    this.sprCol = new Array(64); // Upper two bits of color\n    this.vertFlip = new Array(64); // Vertical Flip\n    this.horiFlip = new Array(64); // Horizontal Flip\n    this.bgPriority = new Array(64); // Background priority\n    this.spr0HitX = 0; // Sprite #0 hit X coordinate\n    this.spr0HitY = 0; // Sprite #0 hit Y coordinate\n    this.hitSpr0 = false;\n\n    // Palette data:\n    this.sprPalette = new Array(16);\n    this.imgPalette = new Array(16);\n\n    // Create pattern table tile buffers:\n    this.ptTile = new Array(512);\n    for (i = 0; i < 512; i++) {\n      this.ptTile[i] = new Tile();\n    }\n\n    // Create nametable buffers:\n    // Name table data:\n    this.ntable1 = new Array(4);\n    this.currentMirroring = -1;\n    this.nameTable = new Array(4);\n    for (i = 0; i < 4; i++) {\n      this.nameTable[i] = new NameTable(32, 32, \"Nt\" + i);\n    }\n\n    // Initialize mirroring lookup table:\n    this.vramMirrorTable = new Array(0x8000);\n    for (i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    this.palTable = new PaletteTable();\n    this.palTable.loadNTSCPalette();\n    //this.palTable.loadDefaultPalette();\n\n    this.updateControlReg1(0);\n    this.updateControlReg2(0);\n  },\n\n  // Sets Nametable mirroring.\n  setMirroring: function(mirroring) {\n    if (mirroring === this.currentMirroring) {\n      return;\n    }\n\n    this.currentMirroring = mirroring;\n    this.triggerRendering();\n\n    // Remove mirroring:\n    if (this.vramMirrorTable === null) {\n      this.vramMirrorTable = new Array(0x8000);\n    }\n    for (var i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    // Palette mirroring:\n    this.defineMirrorRegion(0x3f20, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f40, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f80, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3fc0, 0x3f00, 0x20);\n\n    // Additional mirroring:\n    this.defineMirrorRegion(0x3000, 0x2000, 0xf00);\n    this.defineMirrorRegion(0x4000, 0x0000, 0x4000);\n\n    if (mirroring === this.nes.rom.HORIZONTAL_MIRRORING) {\n      // Horizontal mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2800, 0x400);\n    } else if (mirroring === this.nes.rom.VERTICAL_MIRRORING) {\n      // Vertical mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING) {\n      // Single Screen mirroring\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 0;\n\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2000, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING2) {\n      this.ntable1[0] = 1;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2400, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else {\n      // Assume Four-screen mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 2;\n      this.ntable1[3] = 3;\n    }\n  },\n\n  // Define a mirrored area in the address lookup table.\n  // Assumes the regions don't overlap.\n  // The 'to' region is the region that is physically in memory.\n  defineMirrorRegion: function(fromStart, toStart, size) {\n    for (var i = 0; i < size; i++) {\n      this.vramMirrorTable[fromStart + i] = toStart + i;\n    }\n  },\n\n  startVBlank: function() {\n    // Do NMI:\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n\n    // Make sure everything is rendered:\n    if (this.lastRenderedScanline < 239) {\n      this.renderFramePartially(\n        this.lastRenderedScanline + 1,\n        240 - this.lastRenderedScanline\n      );\n    }\n\n    // End frame:\n    this.endFrame();\n\n    // Reset scanline counter:\n    this.lastRenderedScanline = -1;\n  },\n\n  endScanline: function() {\n    switch (this.scanline) {\n      case 19:\n        // Dummy scanline.\n        // May be variable length:\n        if (this.dummyCycleToggle) {\n          // Remove dead cycle at end of scanline,\n          // for next scanline:\n          this.curX = 1;\n          this.dummyCycleToggle = !this.dummyCycleToggle;\n        }\n        break;\n\n      case 20:\n        // Clear VBlank flag:\n        this.setStatusFlag(this.STATUS_VBLANK, false);\n\n        // Clear Sprite #0 hit flag:\n        this.setStatusFlag(this.STATUS_SPRITE0HIT, false);\n        this.hitSpr0 = false;\n        this.spr0HitX = -1;\n        this.spr0HitY = -1;\n\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Update counters:\n          this.cntFV = this.regFV;\n          this.cntV = this.regV;\n          this.cntH = this.regH;\n          this.cntVT = this.regVT;\n          this.cntHT = this.regHT;\n\n          if (this.f_bgVisibility === 1) {\n            // Render dummy scanline:\n            this.renderBgScanline(false, 0);\n          }\n        }\n\n        if (this.f_bgVisibility === 1 && this.f_spVisibility === 1) {\n          // Check sprite 0 hit for first scanline:\n          this.checkSprite0(0);\n        }\n\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Clock mapper IRQ Counter:\n          this.nes.mmap.clockIrqCounter();\n        }\n        break;\n\n      case 261:\n        // Dead scanline, no rendering.\n        // Set VINT:\n        this.setStatusFlag(this.STATUS_VBLANK, true);\n        this.requestEndFrame = true;\n        this.nmiCounter = 9;\n\n        // Wrap around:\n        this.scanline = -1; // will be incremented to 0\n\n        break;\n\n      default:\n        if (this.scanline >= 21 && this.scanline <= 260) {\n          // Render normally:\n          if (this.f_bgVisibility === 1) {\n            if (!this.scanlineAlreadyRendered) {\n              // update scroll:\n              this.cntHT = this.regHT;\n              this.cntH = this.regH;\n              this.renderBgScanline(true, this.scanline + 1 - 21);\n            }\n            this.scanlineAlreadyRendered = false;\n\n            // Check for sprite 0 (next scanline):\n            if (!this.hitSpr0 && this.f_spVisibility === 1) {\n              if (\n                this.sprX[0] >= -7 &&\n                this.sprX[0] < 256 &&\n                this.sprY[0] + 1 <= this.scanline - 20 &&\n                this.sprY[0] + 1 + (this.f_spriteSize === 0 ? 8 : 16) >=\n                  this.scanline - 20\n              ) {\n                if (this.checkSprite0(this.scanline - 20)) {\n                  this.hitSpr0 = true;\n                }\n              }\n            }\n          }\n\n          if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n            // Clock mapper IRQ Counter:\n            this.nes.mmap.clockIrqCounter();\n          }\n        }\n    }\n\n    this.scanline++;\n    this.regsToAddress();\n    this.cntsToAddress();\n  },\n\n  startFrame: function() {\n    // Set background color:\n    var bgColor = 0;\n\n    if (this.f_dispType === 0) {\n      // Color display.\n      // f_color determines color emphasis.\n      // Use first entry of image palette as BG color.\n      bgColor = this.imgPalette[0];\n    } else {\n      // Monochrome display.\n      // f_color determines the bg color.\n      switch (this.f_color) {\n        case 0:\n          // Black\n          bgColor = 0x00000;\n          break;\n        case 1:\n          // Green\n          bgColor = 0x00ff00;\n          break;\n        case 2:\n          // Blue\n          bgColor = 0xff0000;\n          break;\n        case 3:\n          // Invalid. Use black.\n          bgColor = 0x000000;\n          break;\n        case 4:\n          // Red\n          bgColor = 0x0000ff;\n          break;\n        default:\n          // Invalid. Use black.\n          bgColor = 0x0;\n      }\n    }\n\n    var buffer = this.buffer;\n    var i;\n    for (i = 0; i < 256 * 240; i++) {\n      buffer[i] = bgColor;\n    }\n    var pixrendered = this.pixrendered;\n    for (i = 0; i < pixrendered.length; i++) {\n      pixrendered[i] = 65;\n    }\n  },\n\n  endFrame: function() {\n    var i, x, y;\n    var buffer = this.buffer;\n\n    // Draw spr#0 hit coordinates:\n    if (this.showSpr0Hit) {\n      // Spr 0 position:\n      if (\n        this.sprX[0] >= 0 &&\n        this.sprX[0] < 256 &&\n        this.sprY[0] >= 0 &&\n        this.sprY[0] < 240\n      ) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.sprY[0] << 8) + i] = 0xff5555;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.sprX[0]] = 0xff5555;\n        }\n      }\n      // Hit position:\n      if (\n        this.spr0HitX >= 0 &&\n        this.spr0HitX < 256 &&\n        this.spr0HitY >= 0 &&\n        this.spr0HitY < 240\n      ) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.spr0HitY << 8) + i] = 0x55ff55;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.spr0HitX] = 0x55ff55;\n        }\n      }\n    }\n\n    // This is a bit lazy..\n    // if either the sprites or the background should be clipped,\n    // both are clipped after rendering is finished.\n    if (\n      this.clipToTvSize ||\n      this.f_bgClipping === 0 ||\n      this.f_spClipping === 0\n    ) {\n      // Clip left 8-pixels column:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + x] = 0;\n        }\n      }\n    }\n\n    if (this.clipToTvSize) {\n      // Clip right 8-pixels column too:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + 255 - x] = 0;\n        }\n      }\n    }\n\n    // Clip top and bottom 8 pixels:\n    if (this.clipToTvSize) {\n      for (y = 0; y < 8; y++) {\n        for (x = 0; x < 256; x++) {\n          buffer[(y << 8) + x] = 0;\n          buffer[((239 - y) << 8) + x] = 0;\n        }\n      }\n    }\n\n    this.nes.ui.writeFrame(buffer);\n  },\n\n  updateControlReg1: function(value) {\n    this.triggerRendering();\n\n    this.f_nmiOnVblank = (value >> 7) & 1;\n    this.f_spriteSize = (value >> 5) & 1;\n    this.f_bgPatternTable = (value >> 4) & 1;\n    this.f_spPatternTable = (value >> 3) & 1;\n    this.f_addrInc = (value >> 2) & 1;\n    this.f_nTblAddress = value & 3;\n\n    this.regV = (value >> 1) & 1;\n    this.regH = value & 1;\n    this.regS = (value >> 4) & 1;\n  },\n\n  updateControlReg2: function(value) {\n    this.triggerRendering();\n\n    this.f_color = (value >> 5) & 7;\n    this.f_spVisibility = (value >> 4) & 1;\n    this.f_bgVisibility = (value >> 3) & 1;\n    this.f_spClipping = (value >> 2) & 1;\n    this.f_bgClipping = (value >> 1) & 1;\n    this.f_dispType = value & 1;\n\n    if (this.f_dispType === 0) {\n      this.palTable.setEmphasis(this.f_color);\n    }\n    this.updatePalettes();\n  },\n\n  setStatusFlag: function(flag, value) {\n    var n = 1 << flag;\n    this.nes.cpu.mem[0x2002] =\n      (this.nes.cpu.mem[0x2002] & (255 - n)) | (value ? n : 0);\n  },\n\n  // CPU Register $2002:\n  // Read the Status Register.\n  readStatusRegister: function() {\n    var tmp = this.nes.cpu.mem[0x2002];\n\n    // Reset scroll & VRAM Address toggle:\n    this.firstWrite = true;\n\n    // Clear VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, false);\n\n    // Fetch status data:\n    return tmp;\n  },\n\n  // CPU Register $2003:\n  // Write the SPR-RAM address that is used for sramWrite (Register 0x2004 in CPU memory map)\n  writeSRAMAddress: function(address) {\n    this.sramAddress = address;\n  },\n\n  // CPU Register $2004 (R):\n  // Read from SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramLoad: function() {\n    /*short tmp = sprMem.load(sramAddress);\n        sramAddress++; // Increment address\n        sramAddress%=0x100;\n        return tmp;*/\n    return this.spriteMem[this.sramAddress];\n  },\n\n  // CPU Register $2004 (W):\n  // Write to SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramWrite: function(value) {\n    this.spriteMem[this.sramAddress] = value;\n    this.spriteRamWriteUpdate(this.sramAddress, value);\n    this.sramAddress++; // Increment address\n    this.sramAddress %= 0x100;\n  },\n\n  // CPU Register $2005:\n  // Write to scroll registers.\n  // The first write is the vertical offset, the second is the\n  // horizontal offset:\n  scrollWrite: function(value) {\n    this.triggerRendering();\n\n    if (this.firstWrite) {\n      // First write, horizontal scroll:\n      this.regHT = (value >> 3) & 31;\n      this.regFH = value & 7;\n    } else {\n      // Second write, vertical scroll:\n      this.regFV = value & 7;\n      this.regVT = (value >> 3) & 31;\n    }\n    this.firstWrite = !this.firstWrite;\n  },\n\n  // CPU Register $2006:\n  // Sets the adress used when reading/writing from/to VRAM.\n  // The first write sets the high byte, the second the low byte.\n  writeVRAMAddress: function(address) {\n    if (this.firstWrite) {\n      this.regFV = (address >> 4) & 3;\n      this.regV = (address >> 3) & 1;\n      this.regH = (address >> 2) & 1;\n      this.regVT = (this.regVT & 7) | ((address & 3) << 3);\n    } else {\n      this.triggerRendering();\n\n      this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\n      this.regHT = address & 31;\n\n      this.cntFV = this.regFV;\n      this.cntV = this.regV;\n      this.cntH = this.regH;\n      this.cntVT = this.regVT;\n      this.cntHT = this.regHT;\n\n      this.checkSprite0(this.scanline - 20);\n    }\n\n    this.firstWrite = !this.firstWrite;\n\n    // Invoke mapper latch:\n    this.cntsToAddress();\n    if (this.vramAddress < 0x2000) {\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n  },\n\n  // CPU Register $2007(R):\n  // Read from PPU memory. The address should be set first.\n  vramLoad: function() {\n    var tmp;\n\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    // If address is in range 0x0000-0x3EFF, return buffered values:\n    if (this.vramAddress <= 0x3eff) {\n      tmp = this.vramBufferedReadValue;\n\n      // Update buffered value:\n      if (this.vramAddress < 0x2000) {\n        this.vramBufferedReadValue = this.vramMem[this.vramAddress];\n      } else {\n        this.vramBufferedReadValue = this.mirroredLoad(this.vramAddress);\n      }\n\n      // Mapper latch access:\n      if (this.vramAddress < 0x2000) {\n        this.nes.mmap.latchAccess(this.vramAddress);\n      }\n\n      // Increment by either 1 or 32, depending on d2 of Control Register 1:\n      this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n\n      this.cntsFromAddress();\n      this.regsFromAddress();\n\n      return tmp; // Return the previous buffered value.\n    }\n\n    // No buffering in this mem range. Read normally.\n    tmp = this.mirroredLoad(this.vramAddress);\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n\n    this.cntsFromAddress();\n    this.regsFromAddress();\n\n    return tmp;\n  },\n\n  // CPU Register $2007(W):\n  // Write to PPU memory. The address should be set first.\n  vramWrite: function(value) {\n    this.triggerRendering();\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    if (this.vramAddress >= 0x2000) {\n      // Mirroring is used.\n      this.mirroredWrite(this.vramAddress, value);\n    } else {\n      // Write normally.\n      this.writeMem(this.vramAddress, value);\n\n      // Invoke mapper latch:\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n    this.regsFromAddress();\n    this.cntsFromAddress();\n  },\n\n  // CPU Register $4014:\n  // Write 256 bytes of main memory\n  // into Sprite RAM.\n  sramDMA: function(value) {\n    var baseAddress = value * 0x100;\n    var data;\n    for (var i = this.sramAddress; i < 256; i++) {\n      data = this.nes.cpu.mem[baseAddress + i];\n      this.spriteMem[i] = data;\n      this.spriteRamWriteUpdate(i, data);\n    }\n\n    this.nes.cpu.haltCycles(513);\n  },\n\n  // Updates the scroll registers from a new VRAM address.\n  regsFromAddress: function() {\n    var address = (this.vramTmpAddress >> 8) & 0xff;\n    this.regFV = (address >> 4) & 7;\n    this.regV = (address >> 3) & 1;\n    this.regH = (address >> 2) & 1;\n    this.regVT = (this.regVT & 7) | ((address & 3) << 3);\n\n    address = this.vramTmpAddress & 0xff;\n    this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\n    this.regHT = address & 31;\n  },\n\n  // Updates the scroll registers from a new VRAM address.\n  cntsFromAddress: function() {\n    var address = (this.vramAddress >> 8) & 0xff;\n    this.cntFV = (address >> 4) & 3;\n    this.cntV = (address >> 3) & 1;\n    this.cntH = (address >> 2) & 1;\n    this.cntVT = (this.cntVT & 7) | ((address & 3) << 3);\n\n    address = this.vramAddress & 0xff;\n    this.cntVT = (this.cntVT & 24) | ((address >> 5) & 7);\n    this.cntHT = address & 31;\n  },\n\n  regsToAddress: function() {\n    var b1 = (this.regFV & 7) << 4;\n    b1 |= (this.regV & 1) << 3;\n    b1 |= (this.regH & 1) << 2;\n    b1 |= (this.regVT >> 3) & 3;\n\n    var b2 = (this.regVT & 7) << 5;\n    b2 |= this.regHT & 31;\n\n    this.vramTmpAddress = ((b1 << 8) | b2) & 0x7fff;\n  },\n\n  cntsToAddress: function() {\n    var b1 = (this.cntFV & 7) << 4;\n    b1 |= (this.cntV & 1) << 3;\n    b1 |= (this.cntH & 1) << 2;\n    b1 |= (this.cntVT >> 3) & 3;\n\n    var b2 = (this.cntVT & 7) << 5;\n    b2 |= this.cntHT & 31;\n\n    this.vramAddress = ((b1 << 8) | b2) & 0x7fff;\n  },\n\n  incTileCounter: function(count) {\n    for (var i = count; i !== 0; i--) {\n      this.cntHT++;\n      if (this.cntHT === 32) {\n        this.cntHT = 0;\n        this.cntVT++;\n        if (this.cntVT >= 30) {\n          this.cntH++;\n          if (this.cntH === 2) {\n            this.cntH = 0;\n            this.cntV++;\n            if (this.cntV === 2) {\n              this.cntV = 0;\n              this.cntFV++;\n              this.cntFV &= 0x7;\n            }\n          }\n        }\n      }\n    }\n  },\n\n  // Reads from memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredLoad: function(address) {\n    return this.vramMem[this.vramMirrorTable[address]];\n  },\n\n  // Writes to memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredWrite: function(address, value) {\n    if (address >= 0x3f00 && address < 0x3f20) {\n      // Palette write mirroring.\n      if (address === 0x3f00 || address === 0x3f10) {\n        this.writeMem(0x3f00, value);\n        this.writeMem(0x3f10, value);\n      } else if (address === 0x3f04 || address === 0x3f14) {\n        this.writeMem(0x3f04, value);\n        this.writeMem(0x3f14, value);\n      } else if (address === 0x3f08 || address === 0x3f18) {\n        this.writeMem(0x3f08, value);\n        this.writeMem(0x3f18, value);\n      } else if (address === 0x3f0c || address === 0x3f1c) {\n        this.writeMem(0x3f0c, value);\n        this.writeMem(0x3f1c, value);\n      } else {\n        this.writeMem(address, value);\n      }\n    } else {\n      // Use lookup table for mirrored address:\n      if (address < this.vramMirrorTable.length) {\n        this.writeMem(this.vramMirrorTable[address], value);\n      } else {\n        throw new Error(\"Invalid VRAM address: \" + address.toString(16));\n      }\n    }\n  },\n\n  triggerRendering: function() {\n    if (this.scanline >= 21 && this.scanline <= 260) {\n      // Render sprites, and combine:\n      this.renderFramePartially(\n        this.lastRenderedScanline + 1,\n        this.scanline - 21 - this.lastRenderedScanline\n      );\n\n      // Set last rendered scanline:\n      this.lastRenderedScanline = this.scanline - 21;\n    }\n  },\n\n  renderFramePartially: function(startScan, scanCount) {\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, true);\n    }\n\n    if (this.f_bgVisibility === 1) {\n      var si = startScan << 8;\n      var ei = (startScan + scanCount) << 8;\n      if (ei > 0xf000) {\n        ei = 0xf000;\n      }\n      var buffer = this.buffer;\n      var bgbuffer = this.bgbuffer;\n      var pixrendered = this.pixrendered;\n      for (var destIndex = si; destIndex < ei; destIndex++) {\n        if (pixrendered[destIndex] > 0xff) {\n          buffer[destIndex] = bgbuffer[destIndex];\n        }\n      }\n    }\n\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, false);\n    }\n\n    this.validTileData = false;\n  },\n\n  renderBgScanline: function(bgbuffer, scan) {\n    var baseTile = this.regS === 0 ? 0 : 256;\n    var destIndex = (scan << 8) - this.regFH;\n\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n\n    this.cntHT = this.regHT;\n    this.cntH = this.regH;\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n\n    if (scan < 240 && scan - this.cntFV >= 0) {\n      var tscanoffset = this.cntFV << 3;\n      var scantile = this.scantile;\n      var attrib = this.attrib;\n      var ptTile = this.ptTile;\n      var nameTable = this.nameTable;\n      var imgPalette = this.imgPalette;\n      var pixrendered = this.pixrendered;\n      var targetBuffer = bgbuffer ? this.bgbuffer : this.buffer;\n\n      var t, tpix, att, col;\n\n      for (var tile = 0; tile < 32; tile++) {\n        if (scan >= 0) {\n          // Fetch tile & attrib data:\n          if (this.validTileData) {\n            // Get data from array:\n            t = scantile[tile];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = attrib[tile];\n          } else {\n            // Fetch data:\n            t =\n              ptTile[\n                baseTile +\n                  nameTable[this.curNt].getTileIndex(this.cntHT, this.cntVT)\n              ];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = nameTable[this.curNt].getAttrib(this.cntHT, this.cntVT);\n            scantile[tile] = t;\n            attrib[tile] = att;\n          }\n\n          // Render tile scanline:\n          var sx = 0;\n          var x = (tile << 3) - this.regFH;\n\n          if (x > -8) {\n            if (x < 0) {\n              destIndex -= x;\n              sx = -x;\n            }\n            if (t.opaque[this.cntFV]) {\n              for (; sx < 8; sx++) {\n                targetBuffer[destIndex] =\n                  imgPalette[tpix[tscanoffset + sx] + att];\n                pixrendered[destIndex] |= 256;\n                destIndex++;\n              }\n            } else {\n              for (; sx < 8; sx++) {\n                col = tpix[tscanoffset + sx];\n                if (col !== 0) {\n                  targetBuffer[destIndex] = imgPalette[col + att];\n                  pixrendered[destIndex] |= 256;\n                }\n                destIndex++;\n              }\n            }\n          }\n        }\n\n        // Increase Horizontal Tile Counter:\n        if (++this.cntHT === 32) {\n          this.cntHT = 0;\n          this.cntH++;\n          this.cntH %= 2;\n          this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n        }\n      }\n\n      // Tile data for one row should now have been fetched,\n      // so the data in the array is valid.\n      this.validTileData = true;\n    }\n\n    // update vertical scroll:\n    this.cntFV++;\n    if (this.cntFV === 8) {\n      this.cntFV = 0;\n      this.cntVT++;\n      if (this.cntVT === 30) {\n        this.cntVT = 0;\n        this.cntV++;\n        this.cntV %= 2;\n        this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n      } else if (this.cntVT === 32) {\n        this.cntVT = 0;\n      }\n\n      // Invalidate fetched data:\n      this.validTileData = false;\n    }\n  },\n\n  renderSpritesPartially: function(startscan, scancount, bgPri) {\n    if (this.f_spVisibility === 1) {\n      for (var i = 0; i < 64; i++) {\n        if (\n          this.bgPriority[i] === bgPri &&\n          this.sprX[i] >= 0 &&\n          this.sprX[i] < 256 &&\n          this.sprY[i] + 8 >= startscan &&\n          this.sprY[i] < startscan + scancount\n        ) {\n          // Show sprite.\n          if (this.f_spriteSize === 0) {\n            // 8x8 sprites\n\n            this.srcy1 = 0;\n            this.srcy2 = 8;\n\n            if (this.sprY[i] < startscan) {\n              this.srcy1 = startscan - this.sprY[i] - 1;\n            }\n\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              this.srcy2 = startscan + scancount - this.sprY[i] + 1;\n            }\n\n            if (this.f_spPatternTable === 0) {\n              this.ptTile[this.sprTile[i]].render(\n                this.buffer,\n                0,\n                this.srcy1,\n                8,\n                this.srcy2,\n                this.sprX[i],\n                this.sprY[i] + 1,\n                this.sprCol[i],\n                this.sprPalette,\n                this.horiFlip[i],\n                this.vertFlip[i],\n                i,\n                this.pixrendered\n              );\n            } else {\n              this.ptTile[this.sprTile[i] + 256].render(\n                this.buffer,\n                0,\n                this.srcy1,\n                8,\n                this.srcy2,\n                this.sprX[i],\n                this.sprY[i] + 1,\n                this.sprCol[i],\n                this.sprPalette,\n                this.horiFlip[i],\n                this.vertFlip[i],\n                i,\n                this.pixrendered\n              );\n            }\n          } else {\n            // 8x16 sprites\n            var top = this.sprTile[i];\n            if ((top & 1) !== 0) {\n              top = this.sprTile[i] - 1 + 256;\n            }\n\n            var srcy1 = 0;\n            var srcy2 = 8;\n\n            if (this.sprY[i] < startscan) {\n              srcy1 = startscan - this.sprY[i] - 1;\n            }\n\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              srcy2 = startscan + scancount - this.sprY[i];\n            }\n\n            this.ptTile[top + (this.vertFlip[i] ? 1 : 0)].render(\n              this.buffer,\n              0,\n              srcy1,\n              8,\n              srcy2,\n              this.sprX[i],\n              this.sprY[i] + 1,\n              this.sprCol[i],\n              this.sprPalette,\n              this.horiFlip[i],\n              this.vertFlip[i],\n              i,\n              this.pixrendered\n            );\n\n            srcy1 = 0;\n            srcy2 = 8;\n\n            if (this.sprY[i] + 8 < startscan) {\n              srcy1 = startscan - (this.sprY[i] + 8 + 1);\n            }\n\n            if (this.sprY[i] + 16 > startscan + scancount) {\n              srcy2 = startscan + scancount - (this.sprY[i] + 8);\n            }\n\n            this.ptTile[top + (this.vertFlip[i] ? 0 : 1)].render(\n              this.buffer,\n              0,\n              srcy1,\n              8,\n              srcy2,\n              this.sprX[i],\n              this.sprY[i] + 1 + 8,\n              this.sprCol[i],\n              this.sprPalette,\n              this.horiFlip[i],\n              this.vertFlip[i],\n              i,\n              this.pixrendered\n            );\n          }\n        }\n      }\n    }\n  },\n\n  checkSprite0: function(scan) {\n    this.spr0HitX = -1;\n    this.spr0HitY = -1;\n\n    var toffset;\n    var tIndexAdd = this.f_spPatternTable === 0 ? 0 : 256;\n    var x, y, t, i;\n    var bufferIndex;\n    var col;\n    var bgPri;\n\n    x = this.sprX[0];\n    y = this.sprY[0] + 1;\n\n    if (this.f_spriteSize === 0) {\n      // 8x8 sprites.\n\n      // Check range:\n      if (y <= scan && y + 8 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n        t = this.ptTile[this.sprTile[0] + tIndexAdd];\n        col = this.sprCol[0];\n        bgPri = this.bgPriority[0];\n\n        if (this.vertFlip[0]) {\n          toffset = 7 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n        toffset *= 8;\n\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    } else {\n      // 8x16 sprites:\n\n      // Check range:\n      if (y <= scan && y + 16 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n\n        if (this.vertFlip[0]) {\n          toffset = 15 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n\n        if (toffset < 8) {\n          // first half of sprite.\n          t = this.ptTile[\n            this.sprTile[0] +\n              (this.vertFlip[0] ? 1 : 0) +\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\n          ];\n        } else {\n          // second half of sprite.\n          t = this.ptTile[\n            this.sprTile[0] +\n              (this.vertFlip[0] ? 0 : 1) +\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\n          ];\n          if (this.vertFlip[0]) {\n            toffset = 15 - toffset;\n          } else {\n            toffset -= 8;\n          }\n        }\n        toffset *= 8;\n        col = this.sprCol[0];\n        bgPri = this.bgPriority[0];\n\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n\n  // This will write to PPU memory, and\n  // update internally buffered data\n  // appropriately.\n  writeMem: function(address, value) {\n    this.vramMem[address] = value;\n\n    // Update internally buffered data:\n    if (address < 0x2000) {\n      this.vramMem[address] = value;\n      this.patternWrite(address, value);\n    } else if (address >= 0x2000 && address < 0x23c0) {\n      this.nameTableWrite(this.ntable1[0], address - 0x2000, value);\n    } else if (address >= 0x23c0 && address < 0x2400) {\n      this.attribTableWrite(this.ntable1[0], address - 0x23c0, value);\n    } else if (address >= 0x2400 && address < 0x27c0) {\n      this.nameTableWrite(this.ntable1[1], address - 0x2400, value);\n    } else if (address >= 0x27c0 && address < 0x2800) {\n      this.attribTableWrite(this.ntable1[1], address - 0x27c0, value);\n    } else if (address >= 0x2800 && address < 0x2bc0) {\n      this.nameTableWrite(this.ntable1[2], address - 0x2800, value);\n    } else if (address >= 0x2bc0 && address < 0x2c00) {\n      this.attribTableWrite(this.ntable1[2], address - 0x2bc0, value);\n    } else if (address >= 0x2c00 && address < 0x2fc0) {\n      this.nameTableWrite(this.ntable1[3], address - 0x2c00, value);\n    } else if (address >= 0x2fc0 && address < 0x3000) {\n      this.attribTableWrite(this.ntable1[3], address - 0x2fc0, value);\n    } else if (address >= 0x3f00 && address < 0x3f20) {\n      this.updatePalettes();\n    }\n  },\n\n  // Reads data from $3f00 to $f20\n  // into the two buffered palettes.\n  updatePalettes: function() {\n    var i;\n\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.imgPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f00 + i] & 63\n        );\n      } else {\n        this.imgPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f00 + i] & 32\n        );\n      }\n    }\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.sprPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f10 + i] & 63\n        );\n      } else {\n        this.sprPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f10 + i] & 32\n        );\n      }\n    }\n  },\n\n  // Updates the internal pattern\n  // table buffers with this new byte.\n  // In vNES, there is a version of this with 4 arguments which isn't used.\n  patternWrite: function(address, value) {\n    var tileIndex = Math.floor(address / 16);\n    var leftOver = address % 16;\n    if (leftOver < 8) {\n      this.ptTile[tileIndex].setScanline(\n        leftOver,\n        value,\n        this.vramMem[address + 8]\n      );\n    } else {\n      this.ptTile[tileIndex].setScanline(\n        leftOver - 8,\n        this.vramMem[address - 8],\n        value\n      );\n    }\n  },\n\n  // Updates the internal name table buffers\n  // with this new byte.\n  nameTableWrite: function(index, address, value) {\n    this.nameTable[index].tile[address] = value;\n\n    // Update Sprite #0 hit:\n    //updateSpr0Hit();\n    this.checkSprite0(this.scanline - 20);\n  },\n\n  // Updates the internal pattern\n  // table buffers with this new attribute\n  // table byte.\n  attribTableWrite: function(index, address, value) {\n    this.nameTable[index].writeAttrib(address, value);\n  },\n\n  // Updates the internally buffered sprite\n  // data with this new byte of info.\n  spriteRamWriteUpdate: function(address, value) {\n    var tIndex = Math.floor(address / 4);\n\n    if (tIndex === 0) {\n      //updateSpr0Hit();\n      this.checkSprite0(this.scanline - 20);\n    }\n\n    if (address % 4 === 0) {\n      // Y coordinate\n      this.sprY[tIndex] = value;\n    } else if (address % 4 === 1) {\n      // Tile index\n      this.sprTile[tIndex] = value;\n    } else if (address % 4 === 2) {\n      // Attributes\n      this.vertFlip[tIndex] = (value & 0x80) !== 0;\n      this.horiFlip[tIndex] = (value & 0x40) !== 0;\n      this.bgPriority[tIndex] = (value & 0x20) !== 0;\n      this.sprCol[tIndex] = (value & 3) << 2;\n    } else if (address % 4 === 3) {\n      // X coordinate\n      this.sprX[tIndex] = value;\n    }\n  },\n\n  doNMI: function() {\n    // Set VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, true);\n    //nes.getCpu().doNonMaskableInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n  },\n\n  isPixelWhite: function(x, y) {\n    this.triggerRendering();\n    return this.nes.ppu.buffer[(y << 8) + x] === 0xffffff;\n  },\n\n  JSON_PROPERTIES: [\n    // Memory\n    \"vramMem\",\n    \"spriteMem\",\n    // Counters\n    \"cntFV\",\n    \"cntV\",\n    \"cntH\",\n    \"cntVT\",\n    \"cntHT\",\n    // Registers\n    \"regFV\",\n    \"regV\",\n    \"regH\",\n    \"regVT\",\n    \"regHT\",\n    \"regFH\",\n    \"regS\",\n    // VRAM addr\n    \"vramAddress\",\n    \"vramTmpAddress\",\n    // Control/Status registers\n    \"f_nmiOnVblank\",\n    \"f_spriteSize\",\n    \"f_bgPatternTable\",\n    \"f_spPatternTable\",\n    \"f_addrInc\",\n    \"f_nTblAddress\",\n    \"f_color\",\n    \"f_spVisibility\",\n    \"f_bgVisibility\",\n    \"f_spClipping\",\n    \"f_bgClipping\",\n    \"f_dispType\",\n    // VRAM I/O\n    \"vramBufferedReadValue\",\n    \"firstWrite\",\n    // Mirroring\n    \"currentMirroring\",\n    \"vramMirrorTable\",\n    \"ntable1\",\n    // SPR-RAM I/O\n    \"sramAddress\",\n    // Sprites. Most sprite data is rebuilt from spriteMem\n    \"hitSpr0\",\n    // Palettes\n    \"sprPalette\",\n    \"imgPalette\",\n    // Rendering progression\n    \"curX\",\n    \"scanline\",\n    \"lastRenderedScanline\",\n    \"curNt\",\n    \"scantile\",\n    // Used during rendering\n    \"attrib\",\n    \"buffer\",\n    \"bgbuffer\",\n    \"pixrendered\",\n    // Misc\n    \"requestEndFrame\",\n    \"nmiOk\",\n    \"dummyCycleToggle\",\n    \"nmiCounter\",\n    \"validTileData\",\n    \"scanlineAlreadyRendered\"\n  ],\n\n  toJSON: function() {\n    var i;\n    var state = utils.toJSON(this);\n\n    state.nameTable = [];\n    for (i = 0; i < this.nameTable.length; i++) {\n      state.nameTable[i] = this.nameTable[i].toJSON();\n    }\n\n    state.ptTile = [];\n    for (i = 0; i < this.ptTile.length; i++) {\n      state.ptTile[i] = this.ptTile[i].toJSON();\n    }\n\n    return state;\n  },\n\n  fromJSON: function(state) {\n    var i;\n\n    utils.fromJSON(this, state);\n\n    for (i = 0; i < this.nameTable.length; i++) {\n      this.nameTable[i].fromJSON(state.nameTable[i]);\n    }\n\n    for (i = 0; i < this.ptTile.length; i++) {\n      this.ptTile[i].fromJSON(state.ptTile[i]);\n    }\n\n    // Sprite data:\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteRamWriteUpdate(i, this.spriteMem[i]);\n    }\n  }\n};\n\nvar NameTable = function(width, height, name) {\n  this.width = width;\n  this.height = height;\n  this.name = name;\n\n  this.tile = new Array(width * height);\n  this.attrib = new Array(width * height);\n  for (var i = 0; i < width * height; i++) {\n    this.tile[i] = 0;\n    this.attrib[i] = 0;\n  }\n};\n\nNameTable.prototype = {\n  getTileIndex: function(x, y) {\n    return this.tile[y * this.width + x];\n  },\n\n  getAttrib: function(x, y) {\n    return this.attrib[y * this.width + x];\n  },\n\n  writeAttrib: function(index, value) {\n    var basex = (index % 8) * 4;\n    var basey = Math.floor(index / 8) * 4;\n    var add;\n    var tx, ty;\n    var attindex;\n\n    for (var sqy = 0; sqy < 2; sqy++) {\n      for (var sqx = 0; sqx < 2; sqx++) {\n        add = (value >> (2 * (sqy * 2 + sqx))) & 3;\n        for (var y = 0; y < 2; y++) {\n          for (var x = 0; x < 2; x++) {\n            tx = basex + sqx * 2 + x;\n            ty = basey + sqy * 2 + y;\n            attindex = ty * this.width + tx;\n            this.attrib[ty * this.width + tx] = (add << 2) & 12;\n          }\n        }\n      }\n    }\n  },\n\n  toJSON: function() {\n    return {\n      tile: this.tile,\n      attrib: this.attrib\n    };\n  },\n\n  fromJSON: function(s) {\n    this.tile = s.tile;\n    this.attrib = s.attrib;\n  }\n};\n\nvar PaletteTable = function() {\n  this.curTable = new Array(64);\n  this.emphTable = new Array(8);\n  this.currentEmph = -1;\n};\n\nPaletteTable.prototype = {\n  reset: function() {\n    this.setEmphasis(0);\n  },\n\n  loadNTSCPalette: function() {\n    // prettier-ignore\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n\n  loadPALPalette: function() {\n    // prettier-ignore\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n\n  makeTables: function() {\n    var r, g, b, col, i, rFactor, gFactor, bFactor;\n\n    // Calculate a table for each possible emphasis setting:\n    for (var emph = 0; emph < 8; emph++) {\n      // Determine color component factors:\n      rFactor = 1.0;\n      gFactor = 1.0;\n      bFactor = 1.0;\n\n      if ((emph & 1) !== 0) {\n        rFactor = 0.75;\n        bFactor = 0.75;\n      }\n      if ((emph & 2) !== 0) {\n        rFactor = 0.75;\n        gFactor = 0.75;\n      }\n      if ((emph & 4) !== 0) {\n        gFactor = 0.75;\n        bFactor = 0.75;\n      }\n\n      this.emphTable[emph] = new Array(64);\n\n      // Calculate table:\n      for (i = 0; i < 64; i++) {\n        col = this.curTable[i];\n        r = Math.floor(this.getRed(col) * rFactor);\n        g = Math.floor(this.getGreen(col) * gFactor);\n        b = Math.floor(this.getBlue(col) * bFactor);\n        this.emphTable[emph][i] = this.getRgb(r, g, b);\n      }\n    }\n  },\n\n  setEmphasis: function(emph) {\n    if (emph !== this.currentEmph) {\n      this.currentEmph = emph;\n      for (var i = 0; i < 64; i++) {\n        this.curTable[i] = this.emphTable[emph][i];\n      }\n    }\n  },\n\n  getEntry: function(yiq) {\n    return this.curTable[yiq];\n  },\n\n  getRed: function(rgb) {\n    return (rgb >> 16) & 0xff;\n  },\n\n  getGreen: function(rgb) {\n    return (rgb >> 8) & 0xff;\n  },\n\n  getBlue: function(rgb) {\n    return rgb & 0xff;\n  },\n\n  getRgb: function(r, g, b) {\n    return (r << 16) | (g << 8) | b;\n  },\n\n  loadDefaultPalette: function() {\n    this.curTable[0] = this.getRgb(117, 117, 117);\n    this.curTable[1] = this.getRgb(39, 27, 143);\n    this.curTable[2] = this.getRgb(0, 0, 171);\n    this.curTable[3] = this.getRgb(71, 0, 159);\n    this.curTable[4] = this.getRgb(143, 0, 119);\n    this.curTable[5] = this.getRgb(171, 0, 19);\n    this.curTable[6] = this.getRgb(167, 0, 0);\n    this.curTable[7] = this.getRgb(127, 11, 0);\n    this.curTable[8] = this.getRgb(67, 47, 0);\n    this.curTable[9] = this.getRgb(0, 71, 0);\n    this.curTable[10] = this.getRgb(0, 81, 0);\n    this.curTable[11] = this.getRgb(0, 63, 23);\n    this.curTable[12] = this.getRgb(27, 63, 95);\n    this.curTable[13] = this.getRgb(0, 0, 0);\n    this.curTable[14] = this.getRgb(0, 0, 0);\n    this.curTable[15] = this.getRgb(0, 0, 0);\n    this.curTable[16] = this.getRgb(188, 188, 188);\n    this.curTable[17] = this.getRgb(0, 115, 239);\n    this.curTable[18] = this.getRgb(35, 59, 239);\n    this.curTable[19] = this.getRgb(131, 0, 243);\n    this.curTable[20] = this.getRgb(191, 0, 191);\n    this.curTable[21] = this.getRgb(231, 0, 91);\n    this.curTable[22] = this.getRgb(219, 43, 0);\n    this.curTable[23] = this.getRgb(203, 79, 15);\n    this.curTable[24] = this.getRgb(139, 115, 0);\n    this.curTable[25] = this.getRgb(0, 151, 0);\n    this.curTable[26] = this.getRgb(0, 171, 0);\n    this.curTable[27] = this.getRgb(0, 147, 59);\n    this.curTable[28] = this.getRgb(0, 131, 139);\n    this.curTable[29] = this.getRgb(0, 0, 0);\n    this.curTable[30] = this.getRgb(0, 0, 0);\n    this.curTable[31] = this.getRgb(0, 0, 0);\n    this.curTable[32] = this.getRgb(255, 255, 255);\n    this.curTable[33] = this.getRgb(63, 191, 255);\n    this.curTable[34] = this.getRgb(95, 151, 255);\n    this.curTable[35] = this.getRgb(167, 139, 253);\n    this.curTable[36] = this.getRgb(247, 123, 255);\n    this.curTable[37] = this.getRgb(255, 119, 183);\n    this.curTable[38] = this.getRgb(255, 119, 99);\n    this.curTable[39] = this.getRgb(255, 155, 59);\n    this.curTable[40] = this.getRgb(243, 191, 63);\n    this.curTable[41] = this.getRgb(131, 211, 19);\n    this.curTable[42] = this.getRgb(79, 223, 75);\n    this.curTable[43] = this.getRgb(88, 248, 152);\n    this.curTable[44] = this.getRgb(0, 235, 219);\n    this.curTable[45] = this.getRgb(0, 0, 0);\n    this.curTable[46] = this.getRgb(0, 0, 0);\n    this.curTable[47] = this.getRgb(0, 0, 0);\n    this.curTable[48] = this.getRgb(255, 255, 255);\n    this.curTable[49] = this.getRgb(171, 231, 255);\n    this.curTable[50] = this.getRgb(199, 215, 255);\n    this.curTable[51] = this.getRgb(215, 203, 255);\n    this.curTable[52] = this.getRgb(255, 199, 255);\n    this.curTable[53] = this.getRgb(255, 199, 219);\n    this.curTable[54] = this.getRgb(255, 191, 179);\n    this.curTable[55] = this.getRgb(255, 219, 171);\n    this.curTable[56] = this.getRgb(255, 231, 163);\n    this.curTable[57] = this.getRgb(227, 255, 163);\n    this.curTable[58] = this.getRgb(171, 243, 191);\n    this.curTable[59] = this.getRgb(179, 255, 207);\n    this.curTable[60] = this.getRgb(159, 255, 243);\n    this.curTable[61] = this.getRgb(0, 0, 0);\n    this.curTable[62] = this.getRgb(0, 0, 0);\n    this.curTable[63] = this.getRgb(0, 0, 0);\n\n    this.makeTables();\n    this.setEmphasis(0);\n  }\n};\n\nmodule.exports = PPU;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ppu.js\n// module id = 6\n// module chunks = 0 1","var CPU_FREQ_NTSC = 1789772.5; //1789772.72727272d;\n// var CPU_FREQ_PAL = 1773447.4;\n\nvar PAPU = function(nes) {\n  this.nes = nes;\n\n  this.square1 = new ChannelSquare(this, true);\n  this.square2 = new ChannelSquare(this, false);\n  this.triangle = new ChannelTriangle(this);\n  this.noise = new ChannelNoise(this);\n  this.dmc = new ChannelDM(this);\n\n  this.frameIrqCounter = null;\n  this.frameIrqCounterMax = 4;\n  this.initCounter = 2048;\n  this.channelEnableValue = null;\n\n  this.sampleRate = 44100;\n\n  this.lengthLookup = null;\n  this.dmcFreqLookup = null;\n  this.noiseWavelengthLookup = null;\n  this.square_table = null;\n  this.tnd_table = null;\n\n  this.frameIrqEnabled = false;\n  this.frameIrqActive = null;\n  this.frameClockNow = null;\n  this.startedPlaying = false;\n  this.recordOutput = false;\n  this.initingHardware = false;\n\n  this.masterFrameCounter = null;\n  this.derivedFrameCounter = null;\n  this.countSequence = null;\n  this.sampleTimer = null;\n  this.frameTime = null;\n  this.sampleTimerMax = null;\n  this.sampleCount = null;\n  this.triValue = 0;\n\n  this.smpSquare1 = null;\n  this.smpSquare2 = null;\n  this.smpTriangle = null;\n  this.smpDmc = null;\n  this.accCount = null;\n\n  // DC removal vars:\n  this.prevSampleL = 0;\n  this.prevSampleR = 0;\n  this.smpAccumL = 0;\n  this.smpAccumR = 0;\n\n  // DAC range:\n  this.dacRange = 0;\n  this.dcValue = 0;\n\n  // Master volume:\n  this.masterVolume = 256;\n\n  // Stereo positioning:\n  this.stereoPosLSquare1 = null;\n  this.stereoPosLSquare2 = null;\n  this.stereoPosLTriangle = null;\n  this.stereoPosLNoise = null;\n  this.stereoPosLDMC = null;\n  this.stereoPosRSquare1 = null;\n  this.stereoPosRSquare2 = null;\n  this.stereoPosRTriangle = null;\n  this.stereoPosRNoise = null;\n  this.stereoPosRDMC = null;\n\n  this.extraCycles = null;\n\n  this.maxSample = null;\n  this.minSample = null;\n\n  // Panning:\n  this.panning = [80, 170, 100, 150, 128];\n  this.setPanning(this.panning);\n\n  // Initialize lookup tables:\n  this.initLengthLookup();\n  this.initDmcFrequencyLookup();\n  this.initNoiseWavelengthLookup();\n  this.initDACtables();\n\n  // Init sound registers:\n  for (var i = 0; i < 0x14; i++) {\n    if (i === 0x10) {\n      this.writeReg(0x4010, 0x10);\n    } else {\n      this.writeReg(0x4000 + i, 0);\n    }\n  }\n\n  this.reset();\n};\n\nPAPU.prototype = {\n  reset: function() {\n    this.sampleRate = this.nes.opts.sampleRate;\n    this.sampleTimerMax = Math.floor(\n      1024.0 *\n        CPU_FREQ_NTSC *\n        this.nes.opts.preferredFrameRate /\n        (this.sampleRate * 60.0)\n    );\n\n    this.frameTime = Math.floor(\n      14915.0 * this.nes.opts.preferredFrameRate / 60.0\n    );\n\n    this.sampleTimer = 0;\n\n    this.updateChannelEnable(0);\n    this.masterFrameCounter = 0;\n    this.derivedFrameCounter = 0;\n    this.countSequence = 0;\n    this.sampleCount = 0;\n    this.initCounter = 2048;\n    this.frameIrqEnabled = false;\n    this.initingHardware = false;\n\n    this.resetCounter();\n\n    this.square1.reset();\n    this.square2.reset();\n    this.triangle.reset();\n    this.noise.reset();\n    this.dmc.reset();\n\n    this.accCount = 0;\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n\n    this.frameIrqEnabled = false;\n    this.frameIrqCounterMax = 4;\n\n    this.channelEnableValue = 0xff;\n    this.startedPlaying = false;\n    this.prevSampleL = 0;\n    this.prevSampleR = 0;\n    this.smpAccumL = 0;\n    this.smpAccumR = 0;\n\n    this.maxSample = -500000;\n    this.minSample = 500000;\n  },\n\n  readReg: function(address) {\n    // Read 0x4015:\n    var tmp = 0;\n    tmp |= this.square1.getLengthStatus();\n    tmp |= this.square2.getLengthStatus() << 1;\n    tmp |= this.triangle.getLengthStatus() << 2;\n    tmp |= this.noise.getLengthStatus() << 3;\n    tmp |= this.dmc.getLengthStatus() << 4;\n    tmp |= (this.frameIrqActive && this.frameIrqEnabled ? 1 : 0) << 6;\n    tmp |= this.dmc.getIrqStatus() << 7;\n\n    this.frameIrqActive = false;\n    this.dmc.irqGenerated = false;\n\n    return tmp & 0xffff;\n  },\n\n  writeReg: function(address, value) {\n    if (address >= 0x4000 && address < 0x4004) {\n      // Square Wave 1 Control\n      this.square1.writeReg(address, value);\n      // console.log(\"Square Write\");\n    } else if (address >= 0x4004 && address < 0x4008) {\n      // Square 2 Control\n      this.square2.writeReg(address, value);\n    } else if (address >= 0x4008 && address < 0x400c) {\n      // Triangle Control\n      this.triangle.writeReg(address, value);\n    } else if (address >= 0x400c && address <= 0x400f) {\n      // Noise Control\n      this.noise.writeReg(address, value);\n    } else if (address === 0x4010) {\n      // DMC Play mode & DMA frequency\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4011) {\n      // DMC Delta Counter\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4012) {\n      // DMC Play code starting address\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4013) {\n      // DMC Play code length\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4015) {\n      // Channel enable\n      this.updateChannelEnable(value);\n\n      if (value !== 0 && this.initCounter > 0) {\n        // Start hardware initialization\n        this.initingHardware = true;\n      }\n\n      // DMC/IRQ Status\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4017) {\n      // Frame counter control\n      this.countSequence = (value >> 7) & 1;\n      this.masterFrameCounter = 0;\n      this.frameIrqActive = false;\n\n      if (((value >> 6) & 0x1) === 0) {\n        this.frameIrqEnabled = true;\n      } else {\n        this.frameIrqEnabled = false;\n      }\n\n      if (this.countSequence === 0) {\n        // NTSC:\n        this.frameIrqCounterMax = 4;\n        this.derivedFrameCounter = 4;\n      } else {\n        // PAL:\n        this.frameIrqCounterMax = 5;\n        this.derivedFrameCounter = 0;\n        this.frameCounterTick();\n      }\n    }\n  },\n\n  resetCounter: function() {\n    if (this.countSequence === 0) {\n      this.derivedFrameCounter = 4;\n    } else {\n      this.derivedFrameCounter = 0;\n    }\n  },\n\n  // Updates channel enable status.\n  // This is done on writes to the\n  // channel enable register (0x4015),\n  // and when the user enables/disables channels\n  // in the GUI.\n  updateChannelEnable: function(value) {\n    this.channelEnableValue = value & 0xffff;\n    this.square1.setEnabled((value & 1) !== 0);\n    this.square2.setEnabled((value & 2) !== 0);\n    this.triangle.setEnabled((value & 4) !== 0);\n    this.noise.setEnabled((value & 8) !== 0);\n    this.dmc.setEnabled((value & 16) !== 0);\n  },\n\n  // Clocks the frame counter. It should be clocked at\n  // twice the cpu speed, so the cycles will be\n  // divided by 2 for those counters that are\n  // clocked at cpu speed.\n  clockFrameCounter: function(nCycles) {\n    if (this.initCounter > 0) {\n      if (this.initingHardware) {\n        this.initCounter -= nCycles;\n        if (this.initCounter <= 0) {\n          this.initingHardware = false;\n        }\n        return;\n      }\n    }\n\n    // Don't process ticks beyond next sampling:\n    nCycles += this.extraCycles;\n    var maxCycles = this.sampleTimerMax - this.sampleTimer;\n    if (nCycles << 10 > maxCycles) {\n      this.extraCycles = ((nCycles << 10) - maxCycles) >> 10;\n      nCycles -= this.extraCycles;\n    } else {\n      this.extraCycles = 0;\n    }\n\n    var dmc = this.dmc;\n    var triangle = this.triangle;\n    var square1 = this.square1;\n    var square2 = this.square2;\n    var noise = this.noise;\n\n    // Clock DMC:\n    if (dmc.isEnabled) {\n      dmc.shiftCounter -= nCycles << 3;\n      while (dmc.shiftCounter <= 0 && dmc.dmaFrequency > 0) {\n        dmc.shiftCounter += dmc.dmaFrequency;\n        dmc.clockDmc();\n      }\n    }\n\n    // Clock Triangle channel Prog timer:\n    if (triangle.progTimerMax > 0) {\n      triangle.progTimerCount -= nCycles;\n      while (triangle.progTimerCount <= 0) {\n        triangle.progTimerCount += triangle.progTimerMax + 1;\n        if (triangle.linearCounter > 0 && triangle.lengthCounter > 0) {\n          triangle.triangleCounter++;\n          triangle.triangleCounter &= 0x1f;\n\n          if (triangle.isEnabled) {\n            if (triangle.triangleCounter >= 0x10) {\n              // Normal value.\n              triangle.sampleValue = triangle.triangleCounter & 0xf;\n            } else {\n              // Inverted value.\n              triangle.sampleValue = 0xf - (triangle.triangleCounter & 0xf);\n            }\n            triangle.sampleValue <<= 4;\n          }\n        }\n      }\n    }\n\n    // Clock Square channel 1 Prog timer:\n    square1.progTimerCount -= nCycles;\n    if (square1.progTimerCount <= 0) {\n      square1.progTimerCount += (square1.progTimerMax + 1) << 1;\n\n      square1.squareCounter++;\n      square1.squareCounter &= 0x7;\n      square1.updateSampleValue();\n    }\n\n    // Clock Square channel 2 Prog timer:\n    square2.progTimerCount -= nCycles;\n    if (square2.progTimerCount <= 0) {\n      square2.progTimerCount += (square2.progTimerMax + 1) << 1;\n\n      square2.squareCounter++;\n      square2.squareCounter &= 0x7;\n      square2.updateSampleValue();\n    }\n\n    // Clock noise channel Prog timer:\n    var acc_c = nCycles;\n    if (noise.progTimerCount - acc_c > 0) {\n      // Do all cycles at once:\n      noise.progTimerCount -= acc_c;\n      noise.accCount += acc_c;\n      noise.accValue += acc_c * noise.sampleValue;\n    } else {\n      // Slow-step:\n      while (acc_c-- > 0) {\n        if (--noise.progTimerCount <= 0 && noise.progTimerMax > 0) {\n          // Update noise shift register:\n          noise.shiftReg <<= 1;\n          noise.tmp =\n            ((noise.shiftReg << (noise.randomMode === 0 ? 1 : 6)) ^\n              noise.shiftReg) &\n            0x8000;\n          if (noise.tmp !== 0) {\n            // Sample value must be 0.\n            noise.shiftReg |= 0x01;\n            noise.randomBit = 0;\n            noise.sampleValue = 0;\n          } else {\n            // Find sample value:\n            noise.randomBit = 1;\n            if (noise.isEnabled && noise.lengthCounter > 0) {\n              noise.sampleValue = noise.masterVolume;\n            } else {\n              noise.sampleValue = 0;\n            }\n          }\n\n          noise.progTimerCount += noise.progTimerMax;\n        }\n\n        noise.accValue += noise.sampleValue;\n        noise.accCount++;\n      }\n    }\n\n    // Frame IRQ handling:\n    if (this.frameIrqEnabled && this.frameIrqActive) {\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n    }\n\n    // Clock frame counter at double CPU speed:\n    this.masterFrameCounter += nCycles << 1;\n    if (this.masterFrameCounter >= this.frameTime) {\n      // 240Hz tick:\n      this.masterFrameCounter -= this.frameTime;\n      this.frameCounterTick();\n    }\n\n    // Accumulate sample value:\n    this.accSample(nCycles);\n\n    // Clock sample timer:\n    this.sampleTimer += nCycles << 10;\n    if (this.sampleTimer >= this.sampleTimerMax) {\n      // Sample channels:\n      this.sample();\n      this.sampleTimer -= this.sampleTimerMax;\n    }\n  },\n\n  accSample: function(cycles) {\n    // Special treatment for triangle channel - need to interpolate.\n    if (this.triangle.sampleCondition) {\n      this.triValue = Math.floor(\n        (this.triangle.progTimerCount << 4) / (this.triangle.progTimerMax + 1)\n      );\n      if (this.triValue > 16) {\n        this.triValue = 16;\n      }\n      if (this.triangle.triangleCounter >= 16) {\n        this.triValue = 16 - this.triValue;\n      }\n\n      // Add non-interpolated sample value:\n      this.triValue += this.triangle.sampleValue;\n    }\n\n    // Now sample normally:\n    if (cycles === 2) {\n      this.smpTriangle += this.triValue << 1;\n      this.smpDmc += this.dmc.sample << 1;\n      this.smpSquare1 += this.square1.sampleValue << 1;\n      this.smpSquare2 += this.square2.sampleValue << 1;\n      this.accCount += 2;\n    } else if (cycles === 4) {\n      this.smpTriangle += this.triValue << 2;\n      this.smpDmc += this.dmc.sample << 2;\n      this.smpSquare1 += this.square1.sampleValue << 2;\n      this.smpSquare2 += this.square2.sampleValue << 2;\n      this.accCount += 4;\n    } else {\n      this.smpTriangle += cycles * this.triValue;\n      this.smpDmc += cycles * this.dmc.sample;\n      this.smpSquare1 += cycles * this.square1.sampleValue;\n      this.smpSquare2 += cycles * this.square2.sampleValue;\n      this.accCount += cycles;\n    }\n  },\n\n  frameCounterTick: function() {\n    this.derivedFrameCounter++;\n    if (this.derivedFrameCounter >= this.frameIrqCounterMax) {\n      this.derivedFrameCounter = 0;\n    }\n\n    if (this.derivedFrameCounter === 1 || this.derivedFrameCounter === 3) {\n      // Clock length & sweep:\n      this.triangle.clockLengthCounter();\n      this.square1.clockLengthCounter();\n      this.square2.clockLengthCounter();\n      this.noise.clockLengthCounter();\n      this.square1.clockSweep();\n      this.square2.clockSweep();\n    }\n\n    if (this.derivedFrameCounter >= 0 && this.derivedFrameCounter < 4) {\n      // Clock linear & decay:\n      this.square1.clockEnvDecay();\n      this.square2.clockEnvDecay();\n      this.noise.clockEnvDecay();\n      this.triangle.clockLinearCounter();\n    }\n\n    if (this.derivedFrameCounter === 3 && this.countSequence === 0) {\n      // Enable IRQ:\n      this.frameIrqActive = true;\n    }\n\n    // End of 240Hz tick\n  },\n\n  // Samples the channels, mixes the output together, then writes to buffer.\n  sample: function() {\n    var sq_index, tnd_index;\n\n    if (this.accCount > 0) {\n      this.smpSquare1 <<= 4;\n      this.smpSquare1 = Math.floor(this.smpSquare1 / this.accCount);\n\n      this.smpSquare2 <<= 4;\n      this.smpSquare2 = Math.floor(this.smpSquare2 / this.accCount);\n\n      this.smpTriangle = Math.floor(this.smpTriangle / this.accCount);\n\n      this.smpDmc <<= 4;\n      this.smpDmc = Math.floor(this.smpDmc / this.accCount);\n\n      this.accCount = 0;\n    } else {\n      this.smpSquare1 = this.square1.sampleValue << 4;\n      this.smpSquare2 = this.square2.sampleValue << 4;\n      this.smpTriangle = this.triangle.sampleValue;\n      this.smpDmc = this.dmc.sample << 4;\n    }\n\n    var smpNoise = Math.floor((this.noise.accValue << 4) / this.noise.accCount);\n    this.noise.accValue = smpNoise >> 4;\n    this.noise.accCount = 1;\n\n    // Stereo sound.\n\n    // Left channel:\n    sq_index =\n      (this.smpSquare1 * this.stereoPosLSquare1 +\n        this.smpSquare2 * this.stereoPosLSquare2) >>\n      8;\n    tnd_index =\n      (3 * this.smpTriangle * this.stereoPosLTriangle +\n        (smpNoise << 1) * this.stereoPosLNoise +\n        this.smpDmc * this.stereoPosLDMC) >>\n      8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueL =\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Right channel:\n    sq_index =\n      (this.smpSquare1 * this.stereoPosRSquare1 +\n        this.smpSquare2 * this.stereoPosRSquare2) >>\n      8;\n    tnd_index =\n      (3 * this.smpTriangle * this.stereoPosRTriangle +\n        (smpNoise << 1) * this.stereoPosRNoise +\n        this.smpDmc * this.stereoPosRDMC) >>\n      8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueR =\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Remove DC from left channel:\n    var smpDiffL = sampleValueL - this.prevSampleL;\n    this.prevSampleL += smpDiffL;\n    this.smpAccumL += smpDiffL - (this.smpAccumL >> 10);\n    sampleValueL = this.smpAccumL;\n\n    // Remove DC from right channel:\n    var smpDiffR = sampleValueR - this.prevSampleR;\n    this.prevSampleR += smpDiffR;\n    this.smpAccumR += smpDiffR - (this.smpAccumR >> 10);\n    sampleValueR = this.smpAccumR;\n\n    // Write:\n    if (sampleValueL > this.maxSample) {\n      this.maxSample = sampleValueL;\n    }\n    if (sampleValueL < this.minSample) {\n      this.minSample = sampleValueL;\n    }\n\n    if (this.nes.opts.onAudioSample) {\n      this.nes.opts.onAudioSample(sampleValueL / 32768, sampleValueR / 32768);\n    }\n\n    // Reset sampled values:\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n  },\n\n  getLengthMax: function(value) {\n    return this.lengthLookup[value >> 3];\n  },\n\n  getDmcFrequency: function(value) {\n    if (value >= 0 && value < 0x10) {\n      return this.dmcFreqLookup[value];\n    }\n    return 0;\n  },\n\n  getNoiseWaveLength: function(value) {\n    if (value >= 0 && value < 0x10) {\n      return this.noiseWavelengthLookup[value];\n    }\n    return 0;\n  },\n\n  setPanning: function(pos) {\n    for (var i = 0; i < 5; i++) {\n      this.panning[i] = pos[i];\n    }\n    this.updateStereoPos();\n  },\n\n  setMasterVolume: function(value) {\n    if (value < 0) {\n      value = 0;\n    }\n    if (value > 256) {\n      value = 256;\n    }\n    this.masterVolume = value;\n    this.updateStereoPos();\n  },\n\n  updateStereoPos: function() {\n    this.stereoPosLSquare1 = (this.panning[0] * this.masterVolume) >> 8;\n    this.stereoPosLSquare2 = (this.panning[1] * this.masterVolume) >> 8;\n    this.stereoPosLTriangle = (this.panning[2] * this.masterVolume) >> 8;\n    this.stereoPosLNoise = (this.panning[3] * this.masterVolume) >> 8;\n    this.stereoPosLDMC = (this.panning[4] * this.masterVolume) >> 8;\n\n    this.stereoPosRSquare1 = this.masterVolume - this.stereoPosLSquare1;\n    this.stereoPosRSquare2 = this.masterVolume - this.stereoPosLSquare2;\n    this.stereoPosRTriangle = this.masterVolume - this.stereoPosLTriangle;\n    this.stereoPosRNoise = this.masterVolume - this.stereoPosLNoise;\n    this.stereoPosRDMC = this.masterVolume - this.stereoPosLDMC;\n  },\n\n  initLengthLookup: function() {\n    // prettier-ignore\n    this.lengthLookup = [\n            0x0A, 0xFE,\n            0x14, 0x02,\n            0x28, 0x04,\n            0x50, 0x06,\n            0xA0, 0x08,\n            0x3C, 0x0A,\n            0x0E, 0x0C,\n            0x1A, 0x0E,\n            0x0C, 0x10,\n            0x18, 0x12,\n            0x30, 0x14,\n            0x60, 0x16,\n            0xC0, 0x18,\n            0x48, 0x1A,\n            0x10, 0x1C,\n            0x20, 0x1E\n        ];\n  },\n\n  initDmcFrequencyLookup: function() {\n    this.dmcFreqLookup = new Array(16);\n\n    this.dmcFreqLookup[0x0] = 0xd60;\n    this.dmcFreqLookup[0x1] = 0xbe0;\n    this.dmcFreqLookup[0x2] = 0xaa0;\n    this.dmcFreqLookup[0x3] = 0xa00;\n    this.dmcFreqLookup[0x4] = 0x8f0;\n    this.dmcFreqLookup[0x5] = 0x7f0;\n    this.dmcFreqLookup[0x6] = 0x710;\n    this.dmcFreqLookup[0x7] = 0x6b0;\n    this.dmcFreqLookup[0x8] = 0x5f0;\n    this.dmcFreqLookup[0x9] = 0x500;\n    this.dmcFreqLookup[0xa] = 0x470;\n    this.dmcFreqLookup[0xb] = 0x400;\n    this.dmcFreqLookup[0xc] = 0x350;\n    this.dmcFreqLookup[0xd] = 0x2a0;\n    this.dmcFreqLookup[0xe] = 0x240;\n    this.dmcFreqLookup[0xf] = 0x1b0;\n    //for(int i=0;i<16;i++)dmcFreqLookup[i]/=8;\n  },\n\n  initNoiseWavelengthLookup: function() {\n    this.noiseWavelengthLookup = new Array(16);\n\n    this.noiseWavelengthLookup[0x0] = 0x004;\n    this.noiseWavelengthLookup[0x1] = 0x008;\n    this.noiseWavelengthLookup[0x2] = 0x010;\n    this.noiseWavelengthLookup[0x3] = 0x020;\n    this.noiseWavelengthLookup[0x4] = 0x040;\n    this.noiseWavelengthLookup[0x5] = 0x060;\n    this.noiseWavelengthLookup[0x6] = 0x080;\n    this.noiseWavelengthLookup[0x7] = 0x0a0;\n    this.noiseWavelengthLookup[0x8] = 0x0ca;\n    this.noiseWavelengthLookup[0x9] = 0x0fe;\n    this.noiseWavelengthLookup[0xa] = 0x17c;\n    this.noiseWavelengthLookup[0xb] = 0x1fc;\n    this.noiseWavelengthLookup[0xc] = 0x2fa;\n    this.noiseWavelengthLookup[0xd] = 0x3f8;\n    this.noiseWavelengthLookup[0xe] = 0x7f2;\n    this.noiseWavelengthLookup[0xf] = 0xfe4;\n  },\n\n  initDACtables: function() {\n    var value, ival, i;\n    var max_sqr = 0;\n    var max_tnd = 0;\n\n    this.square_table = new Array(32 * 16);\n    this.tnd_table = new Array(204 * 16);\n\n    for (i = 0; i < 32 * 16; i++) {\n      value = 95.52 / (8128.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n\n      this.square_table[i] = ival;\n      if (ival > max_sqr) {\n        max_sqr = ival;\n      }\n    }\n\n    for (i = 0; i < 204 * 16; i++) {\n      value = 163.67 / (24329.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n\n      this.tnd_table[i] = ival;\n      if (ival > max_tnd) {\n        max_tnd = ival;\n      }\n    }\n\n    this.dacRange = max_sqr + max_tnd;\n    this.dcValue = this.dacRange / 2;\n  }\n};\n\nvar ChannelDM = function(papu) {\n  this.papu = papu;\n\n  this.MODE_NORMAL = 0;\n  this.MODE_LOOP = 1;\n  this.MODE_IRQ = 2;\n\n  this.isEnabled = null;\n  this.hasSample = null;\n  this.irqGenerated = false;\n\n  this.playMode = null;\n  this.dmaFrequency = null;\n  this.dmaCounter = null;\n  this.deltaCounter = null;\n  this.playStartAddress = null;\n  this.playAddress = null;\n  this.playLength = null;\n  this.playLengthCounter = null;\n  this.shiftCounter = null;\n  this.reg4012 = null;\n  this.reg4013 = null;\n  this.sample = null;\n  this.dacLsb = null;\n  this.data = null;\n\n  this.reset();\n};\n\nChannelDM.prototype = {\n  clockDmc: function() {\n    // Only alter DAC value if the sample buffer has data:\n    if (this.hasSample) {\n      if ((this.data & 1) === 0) {\n        // Decrement delta:\n        if (this.deltaCounter > 0) {\n          this.deltaCounter--;\n        }\n      } else {\n        // Increment delta:\n        if (this.deltaCounter < 63) {\n          this.deltaCounter++;\n        }\n      }\n\n      // Update sample value:\n      this.sample = this.isEnabled ? (this.deltaCounter << 1) + this.dacLsb : 0;\n\n      // Update shift register:\n      this.data >>= 1;\n    }\n\n    this.dmaCounter--;\n    if (this.dmaCounter <= 0) {\n      // No more sample bits.\n      this.hasSample = false;\n      this.endOfSample();\n      this.dmaCounter = 8;\n    }\n\n    if (this.irqGenerated) {\n      this.papu.nes.cpu.requestIrq(this.papu.nes.cpu.IRQ_NORMAL);\n    }\n  },\n\n  endOfSample: function() {\n    if (this.playLengthCounter === 0 && this.playMode === this.MODE_LOOP) {\n      // Start from beginning of sample:\n      this.playAddress = this.playStartAddress;\n      this.playLengthCounter = this.playLength;\n    }\n\n    if (this.playLengthCounter > 0) {\n      // Fetch next sample:\n      this.nextSample();\n\n      if (this.playLengthCounter === 0) {\n        // Last byte of sample fetched, generate IRQ:\n        if (this.playMode === this.MODE_IRQ) {\n          // Generate IRQ:\n          this.irqGenerated = true;\n        }\n      }\n    }\n  },\n\n  nextSample: function() {\n    // Fetch byte:\n    this.data = this.papu.nes.mmap.load(this.playAddress);\n    this.papu.nes.cpu.haltCycles(4);\n\n    this.playLengthCounter--;\n    this.playAddress++;\n    if (this.playAddress > 0xffff) {\n      this.playAddress = 0x8000;\n    }\n\n    this.hasSample = true;\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x4010) {\n      // Play mode, DMA Frequency\n      if (value >> 6 === 0) {\n        this.playMode = this.MODE_NORMAL;\n      } else if (((value >> 6) & 1) === 1) {\n        this.playMode = this.MODE_LOOP;\n      } else if (value >> 6 === 2) {\n        this.playMode = this.MODE_IRQ;\n      }\n\n      if ((value & 0x80) === 0) {\n        this.irqGenerated = false;\n      }\n\n      this.dmaFrequency = this.papu.getDmcFrequency(value & 0xf);\n    } else if (address === 0x4011) {\n      // Delta counter load register:\n      this.deltaCounter = (value >> 1) & 63;\n      this.dacLsb = value & 1;\n      this.sample = (this.deltaCounter << 1) + this.dacLsb; // update sample value\n    } else if (address === 0x4012) {\n      // DMA address load register\n      this.playStartAddress = (value << 6) | 0x0c000;\n      this.playAddress = this.playStartAddress;\n      this.reg4012 = value;\n    } else if (address === 0x4013) {\n      // Length of play code\n      this.playLength = (value << 4) + 1;\n      this.playLengthCounter = this.playLength;\n      this.reg4013 = value;\n    } else if (address === 0x4015) {\n      // DMC/IRQ Status\n      if (((value >> 4) & 1) === 0) {\n        // Disable:\n        this.playLengthCounter = 0;\n      } else {\n        // Restart:\n        this.playAddress = this.playStartAddress;\n        this.playLengthCounter = this.playLength;\n      }\n      this.irqGenerated = false;\n    }\n  },\n\n  setEnabled: function(value) {\n    if (!this.isEnabled && value) {\n      this.playLengthCounter = this.playLength;\n    }\n    this.isEnabled = value;\n  },\n\n  getLengthStatus: function() {\n    return this.playLengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n\n  getIrqStatus: function() {\n    return this.irqGenerated ? 1 : 0;\n  },\n\n  reset: function() {\n    this.isEnabled = false;\n    this.irqGenerated = false;\n    this.playMode = this.MODE_NORMAL;\n    this.dmaFrequency = 0;\n    this.dmaCounter = 0;\n    this.deltaCounter = 0;\n    this.playStartAddress = 0;\n    this.playAddress = 0;\n    this.playLength = 0;\n    this.playLengthCounter = 0;\n    this.sample = 0;\n    this.dacLsb = 0;\n    this.shiftCounter = 0;\n    this.reg4012 = 0;\n    this.reg4013 = 0;\n    this.data = 0;\n  }\n};\n\nvar ChannelNoise = function(papu) {\n  this.papu = papu;\n\n  this.isEnabled = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.lengthCounterEnable = null;\n  this.envReset = null;\n  this.shiftNow = null;\n\n  this.lengthCounter = null;\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.shiftReg = 1 << 14;\n  this.randomBit = null;\n  this.randomMode = null;\n  this.sampleValue = null;\n  this.accValue = 0;\n  this.accCount = 1;\n  this.tmp = null;\n\n  this.reset();\n};\n\nChannelNoise.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.isEnabled = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n    this.shiftNow = false;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.shiftReg = 1;\n    this.randomBit = 0;\n    this.randomMode = 0;\n    this.sampleValue = 0;\n    this.tmp = 0;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n\n  clockEnvDecay: function() {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n\n  updateSampleValue: function() {\n    if (this.isEnabled && this.lengthCounter > 0) {\n      this.sampleValue = this.randomBit * this.masterVolume;\n    }\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x400c) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n    } else if (address === 0x400e) {\n      // Programmable timer:\n      this.progTimerMax = this.papu.getNoiseWaveLength(value & 0xf);\n      this.randomMode = value >> 7;\n    } else if (address === 0x400f) {\n      // Length counter\n      this.lengthCounter = this.papu.getLengthMax(value & 248);\n      this.envReset = true;\n    }\n    // Update:\n    //updateSampleValue();\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  }\n};\n\nvar ChannelSquare = function(papu, square1) {\n  this.papu = papu;\n\n  // prettier-ignore\n  this.dutyLookup = [\n         0, 1, 0, 0, 0, 0, 0, 0,\n         0, 1, 1, 0, 0, 0, 0, 0,\n         0, 1, 1, 1, 1, 0, 0, 0,\n         1, 0, 0, 1, 1, 1, 1, 1\n    ];\n  // prettier-ignore\n  this.impLookup = [\n         1,-1, 0, 0, 0, 0, 0, 0,\n         1, 0,-1, 0, 0, 0, 0, 0,\n         1, 0, 0, 0,-1, 0, 0, 0,\n        -1, 0, 1, 0, 0, 0, 0, 0\n    ];\n\n  this.sqr1 = square1;\n  this.isEnabled = null;\n  this.lengthCounterEnable = null;\n  this.sweepActive = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.envReset = null;\n  this.sweepCarry = null;\n  this.updateSweepPeriod = null;\n\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.lengthCounter = null;\n  this.squareCounter = null;\n  this.sweepCounter = null;\n  this.sweepCounterMax = null;\n  this.sweepMode = null;\n  this.sweepShiftAmount = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.dutyMode = null;\n  this.sweepResult = null;\n  this.sampleValue = null;\n  this.vol = null;\n\n  this.reset();\n};\n\nChannelSquare.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.lengthCounter = 0;\n    this.squareCounter = 0;\n    this.sweepCounter = 0;\n    this.sweepCounterMax = 0;\n    this.sweepMode = 0;\n    this.sweepShiftAmount = 0;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.dutyMode = 0;\n    this.vol = 0;\n\n    this.isEnabled = false;\n    this.lengthCounterEnable = false;\n    this.sweepActive = false;\n    this.sweepCarry = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n\n  clockEnvDecay: function() {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n\n  clockSweep: function() {\n    if (--this.sweepCounter <= 0) {\n      this.sweepCounter = this.sweepCounterMax + 1;\n      if (\n        this.sweepActive &&\n        this.sweepShiftAmount > 0 &&\n        this.progTimerMax > 7\n      ) {\n        // Calculate result from shifter:\n        this.sweepCarry = false;\n        if (this.sweepMode === 0) {\n          this.progTimerMax += this.progTimerMax >> this.sweepShiftAmount;\n          if (this.progTimerMax > 4095) {\n            this.progTimerMax = 4095;\n            this.sweepCarry = true;\n          }\n        } else {\n          this.progTimerMax =\n            this.progTimerMax -\n            ((this.progTimerMax >> this.sweepShiftAmount) -\n              (this.sqr1 ? 1 : 0));\n        }\n      }\n    }\n\n    if (this.updateSweepPeriod) {\n      this.updateSweepPeriod = false;\n      this.sweepCounter = this.sweepCounterMax + 1;\n    }\n  },\n\n  updateSampleValue: function() {\n    if (this.isEnabled && this.lengthCounter > 0 && this.progTimerMax > 7) {\n      if (\n        this.sweepMode === 0 &&\n        this.progTimerMax + (this.progTimerMax >> this.sweepShiftAmount) > 4095\n      ) {\n        //if (this.sweepCarry) {\n        this.sampleValue = 0;\n      } else {\n        this.sampleValue =\n          this.masterVolume *\n          this.dutyLookup[(this.dutyMode << 3) + this.squareCounter];\n      }\n    } else {\n      this.sampleValue = 0;\n    }\n  },\n\n  writeReg: function(address, value) {\n    var addrAdd = this.sqr1 ? 0 : 4;\n    if (address === 0x4000 + addrAdd) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.dutyMode = (value >> 6) & 0x3;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n      this.updateSampleValue();\n    } else if (address === 0x4001 + addrAdd) {\n      // Sweep:\n      this.sweepActive = (value & 0x80) !== 0;\n      this.sweepCounterMax = (value >> 4) & 7;\n      this.sweepMode = (value >> 3) & 1;\n      this.sweepShiftAmount = value & 7;\n      this.updateSweepPeriod = true;\n    } else if (address === 0x4002 + addrAdd) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x4003 + addrAdd) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x7) << 8;\n\n      if (this.isEnabled) {\n        this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      }\n\n      this.envReset = true;\n    }\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  }\n};\n\nvar ChannelTriangle = function(papu) {\n  this.papu = papu;\n\n  this.isEnabled = null;\n  this.sampleCondition = null;\n  this.lengthCounterEnable = null;\n  this.lcHalt = null;\n  this.lcControl = null;\n\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.triangleCounter = null;\n  this.lengthCounter = null;\n  this.linearCounter = null;\n  this.lcLoadValue = null;\n  this.sampleValue = null;\n  this.tmp = null;\n\n  this.reset();\n};\n\nChannelTriangle.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.triangleCounter = 0;\n    this.isEnabled = false;\n    this.sampleCondition = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.linearCounter = 0;\n    this.lcLoadValue = 0;\n    this.lcHalt = true;\n    this.lcControl = false;\n    this.tmp = 0;\n    this.sampleValue = 0xf;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleCondition();\n      }\n    }\n  },\n\n  clockLinearCounter: function() {\n    if (this.lcHalt) {\n      // Load:\n      this.linearCounter = this.lcLoadValue;\n      this.updateSampleCondition();\n    } else if (this.linearCounter > 0) {\n      // Decrement:\n      this.linearCounter--;\n      this.updateSampleCondition();\n    }\n    if (!this.lcControl) {\n      // Clear halt flag:\n      this.lcHalt = false;\n    }\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n\n  readReg: function(address) {\n    return 0;\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x4008) {\n      // New values for linear counter:\n      this.lcControl = (value & 0x80) !== 0;\n      this.lcLoadValue = value & 0x7f;\n\n      // Length counter enable:\n      this.lengthCounterEnable = !this.lcControl;\n    } else if (address === 0x400a) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x400b) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x07) << 8;\n      this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      this.lcHalt = true;\n    }\n\n    this.updateSampleCondition();\n  },\n\n  clockProgrammableTimer: function(nCycles) {\n    if (this.progTimerMax > 0) {\n      this.progTimerCount += nCycles;\n      while (\n        this.progTimerMax > 0 &&\n        this.progTimerCount >= this.progTimerMax\n      ) {\n        this.progTimerCount -= this.progTimerMax;\n        if (\n          this.isEnabled &&\n          this.lengthCounter > 0 &&\n          this.linearCounter > 0\n        ) {\n          this.clockTriangleGenerator();\n        }\n      }\n    }\n  },\n\n  clockTriangleGenerator: function() {\n    this.triangleCounter++;\n    this.triangleCounter &= 0x1f;\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleCondition();\n  },\n\n  updateSampleCondition: function() {\n    this.sampleCondition =\n      this.isEnabled &&\n      this.progTimerMax > 7 &&\n      this.linearCounter > 0 &&\n      this.lengthCounter > 0;\n  }\n};\n\nmodule.exports = PAPU;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/papu.js\n// module id = 7\n// module chunks = 0 1","var Mappers = require(\"./mappers\");\nvar Tile = require(\"./tile\");\n\nvar ROM = function(nes) {\n  this.nes = nes;\n\n  this.mapperName = new Array(92);\n\n  for (var i = 0; i < 92; i++) {\n    this.mapperName[i] = \"Unknown Mapper\";\n  }\n  this.mapperName[0] = \"Direct Access\";\n  this.mapperName[1] = \"Nintendo MMC1\";\n  this.mapperName[2] = \"UNROM\";\n  this.mapperName[3] = \"CNROM\";\n  this.mapperName[4] = \"Nintendo MMC3\";\n  this.mapperName[5] = \"Nintendo MMC5\";\n  this.mapperName[6] = \"FFE F4xxx\";\n  this.mapperName[7] = \"AOROM\";\n  this.mapperName[8] = \"FFE F3xxx\";\n  this.mapperName[9] = \"Nintendo MMC2\";\n  this.mapperName[10] = \"Nintendo MMC4\";\n  this.mapperName[11] = \"Color Dreams Chip\";\n  this.mapperName[12] = \"FFE F6xxx\";\n  this.mapperName[15] = \"100-in-1 switch\";\n  this.mapperName[16] = \"Bandai chip\";\n  this.mapperName[17] = \"FFE F8xxx\";\n  this.mapperName[18] = \"Jaleco SS8806 chip\";\n  this.mapperName[19] = \"Namcot 106 chip\";\n  this.mapperName[20] = \"Famicom Disk System\";\n  this.mapperName[21] = \"Konami VRC4a\";\n  this.mapperName[22] = \"Konami VRC2a\";\n  this.mapperName[23] = \"Konami VRC2a\";\n  this.mapperName[24] = \"Konami VRC6\";\n  this.mapperName[25] = \"Konami VRC4b\";\n  this.mapperName[32] = \"Irem G-101 chip\";\n  this.mapperName[33] = \"Taito TC0190/TC0350\";\n  this.mapperName[34] = \"32kB ROM switch\";\n\n  this.mapperName[64] = \"Tengen RAMBO-1 chip\";\n  this.mapperName[65] = \"Irem H-3001 chip\";\n  this.mapperName[66] = \"GNROM switch\";\n  this.mapperName[67] = \"SunSoft3 chip\";\n  this.mapperName[68] = \"SunSoft4 chip\";\n  this.mapperName[69] = \"SunSoft5 FME-7 chip\";\n  this.mapperName[71] = \"Camerica chip\";\n  this.mapperName[78] = \"Irem 74HC161/32-based\";\n  this.mapperName[91] = \"Pirate HK-SF3 chip\";\n};\n\nROM.prototype = {\n  // Mirroring types:\n  VERTICAL_MIRRORING: 0,\n  HORIZONTAL_MIRRORING: 1,\n  FOURSCREEN_MIRRORING: 2,\n  SINGLESCREEN_MIRRORING: 3,\n  SINGLESCREEN_MIRRORING2: 4,\n  SINGLESCREEN_MIRRORING3: 5,\n  SINGLESCREEN_MIRRORING4: 6,\n  CHRROM_MIRRORING: 7,\n\n  header: null,\n  rom: null,\n  vrom: null,\n  vromTile: null,\n\n  romCount: null,\n  vromCount: null,\n  mirroring: null,\n  batteryRam: null,\n  trainer: null,\n  fourScreen: null,\n  mapperType: null,\n  valid: false,\n\n  load: function(data) {\n    var i, j, v;\n\n    if (data.indexOf(\"NES\\x1a\") === -1) {\n      throw new Error(\"Not a valid NES ROM.\");\n    }\n    this.header = new Array(16);\n    for (i = 0; i < 16; i++) {\n      this.header[i] = data.charCodeAt(i) & 0xff;\n    }\n    this.romCount = this.header[4];\n    this.vromCount = this.header[5] * 2; // Get the number of 4kB banks, not 8kB\n    this.mirroring = (this.header[6] & 1) !== 0 ? 1 : 0;\n    this.batteryRam = (this.header[6] & 2) !== 0;\n    this.trainer = (this.header[6] & 4) !== 0;\n    this.fourScreen = (this.header[6] & 8) !== 0;\n    this.mapperType = (this.header[6] >> 4) | (this.header[7] & 0xf0);\n    /* TODO\n        if (this.batteryRam)\n            this.loadBatteryRam();*/\n    // Check whether byte 8-15 are zero's:\n    var foundError = false;\n    for (i = 8; i < 16; i++) {\n      if (this.header[i] !== 0) {\n        foundError = true;\n        break;\n      }\n    }\n    if (foundError) {\n      this.mapperType &= 0xf; // Ignore byte 7\n    }\n    // Load PRG-ROM banks:\n    this.rom = new Array(this.romCount);\n    var offset = 16;\n    for (i = 0; i < this.romCount; i++) {\n      this.rom[i] = new Array(16384);\n      for (j = 0; j < 16384; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.rom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 16384;\n    }\n    // Load CHR-ROM banks:\n    this.vrom = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vrom[i] = new Array(4096);\n      for (j = 0; j < 4096; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.vrom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 4096;\n    }\n\n    // Create VROM tiles:\n    this.vromTile = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vromTile[i] = new Array(256);\n      for (j = 0; j < 256; j++) {\n        this.vromTile[i][j] = new Tile();\n      }\n    }\n\n    // Convert CHR-ROM banks to tiles:\n    var tileIndex;\n    var leftOver;\n    for (v = 0; v < this.vromCount; v++) {\n      for (i = 0; i < 4096; i++) {\n        tileIndex = i >> 4;\n        leftOver = i % 16;\n        if (leftOver < 8) {\n          this.vromTile[v][tileIndex].setScanline(\n            leftOver,\n            this.vrom[v][i],\n            this.vrom[v][i + 8]\n          );\n        } else {\n          this.vromTile[v][tileIndex].setScanline(\n            leftOver - 8,\n            this.vrom[v][i - 8],\n            this.vrom[v][i]\n          );\n        }\n      }\n    }\n\n    this.valid = true;\n  },\n\n  getMirroringType: function() {\n    if (this.fourScreen) {\n      return this.FOURSCREEN_MIRRORING;\n    }\n    if (this.mirroring === 0) {\n      return this.HORIZONTAL_MIRRORING;\n    }\n    return this.VERTICAL_MIRRORING;\n  },\n\n  getMapperName: function() {\n    if (this.mapperType >= 0 && this.mapperType < this.mapperName.length) {\n      return this.mapperName[this.mapperType];\n    }\n    return \"Unknown Mapper, \" + this.mapperType;\n  },\n\n  mapperSupported: function() {\n    return typeof Mappers[this.mapperType] !== \"undefined\";\n  },\n\n  createMapper: function() {\n    if (this.mapperSupported()) {\n      return new Mappers[this.mapperType](this.nes);\n    } else {\n      throw new Error(\n        \"This ROM uses a mapper not supported by JSNES: \" +\n          this.getMapperName() +\n          \"(\" +\n          this.mapperType +\n          \")\"\n      );\n    }\n  }\n};\n\nmodule.exports = ROM;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/rom.js\n// module id = 8\n// module chunks = 0 1","var utils = require(\"./utils\");\n\nvar Mappers = {};\n\nMappers[0] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[0].prototype = {\n  reset: function() {\n    this.joy1StrobeState = 0;\n    this.joy2StrobeState = 0;\n    this.joypadLastWrite = 0;\n\n    this.zapperFired = false;\n    this.zapperX = null;\n    this.zapperY = null;\n  },\n\n  write: function(address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n      if (address >= 0x6000 && address < 0x8000) {\n        // Write to SaveRAM. Store in file:\n        // TODO: not yet\n        //if(this.nes.rom!=null)\n        //    this.nes.rom.writeBatteryRam(address,value);\n      }\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n\n  writelow: function(address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n\n  load: function(address) {\n    // Wrap around:\n    address &= 0xffff;\n\n    // Check address range:\n    if (address > 0x4017) {\n      // ROM:\n      return this.nes.cpu.mem[address];\n    } else if (address >= 0x2000) {\n      // I/O Ports.\n      return this.regLoad(address);\n    } else {\n      // RAM (mirrored)\n      return this.nes.cpu.mem[address & 0x7ff];\n    }\n  },\n\n  regLoad: function(address) {\n    switch (address >> 12) { // use fourth nibble (0xF000)\n      case 0:\n        break;\n\n      case 1:\n        break;\n\n      case 2:\n      // Fall through to case 3\n      case 3:\n        // PPU Registers\n        switch (address & 0x7) {\n          case 0x0:\n            // 0x2000:\n            // PPU Control Register 1.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2000];\n\n          case 0x1:\n            // 0x2001:\n            // PPU Control Register 2.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2001];\n\n          case 0x2:\n            // 0x2002:\n            // PPU Status Register.\n            // The value is stored in\n            // main memory in addition\n            // to as flags in the PPU.\n            // (not in the real NES)\n            return this.nes.ppu.readStatusRegister();\n\n          case 0x3:\n            return 0;\n\n          case 0x4:\n            // 0x2004:\n            // Sprite Memory read.\n            return this.nes.ppu.sramLoad();\n          case 0x5:\n            return 0;\n\n          case 0x6:\n            return 0;\n\n          case 0x7:\n            // 0x2007:\n            // VRAM read:\n            return this.nes.ppu.vramLoad();\n        }\n        break;\n      case 4:\n        // Sound+Joypad registers\n        switch (address - 0x4015) {\n          case 0:\n            // 0x4015:\n            // Sound channel enable, DMC Status\n            return this.nes.papu.readReg(address);\n\n          case 1:\n            // 0x4016:\n            // Joystick 1 + Strobe\n            return this.joy1Read();\n\n          case 2:\n            // 0x4017:\n            // Joystick 2 + Strobe\n            // https://wiki.nesdev.com/w/index.php/Zapper\n            var w;\n\n            if (\n              this.zapperX !== null &&\n              this.zapperY !== null &&\n              this.nes.ppu.isPixelWhite(this.zapperX, this.zapperY)\n            ) {\n              w = 0;\n            } else {\n              w = 0x1 << 3;\n            }\n\n            if (this.zapperFired) {\n              w |= 0x1 << 4;\n            }\n            return (this.joy2Read() | w) & 0xffff;\n        }\n        break;\n    }\n    return 0;\n  },\n\n  regWrite: function(address, value) {\n    switch (address) {\n      case 0x2000:\n        // PPU Control register 1\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg1(value);\n        break;\n\n      case 0x2001:\n        // PPU Control register 2\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg2(value);\n        break;\n\n      case 0x2003:\n        // Set Sprite RAM address:\n        this.nes.ppu.writeSRAMAddress(value);\n        break;\n\n      case 0x2004:\n        // Write to Sprite RAM:\n        this.nes.ppu.sramWrite(value);\n        break;\n\n      case 0x2005:\n        // Screen Scroll offsets:\n        this.nes.ppu.scrollWrite(value);\n        break;\n\n      case 0x2006:\n        // Set VRAM address:\n        this.nes.ppu.writeVRAMAddress(value);\n        break;\n\n      case 0x2007:\n        // Write to VRAM:\n        this.nes.ppu.vramWrite(value);\n        break;\n\n      case 0x4014:\n        // Sprite Memory DMA Access\n        this.nes.ppu.sramDMA(value);\n        break;\n\n      case 0x4015:\n        // Sound Channel Switch, DMC Status\n        this.nes.papu.writeReg(address, value);\n        break;\n\n      case 0x4016:\n        // Joystick 1 + Strobe\n        if ((value & 1) === 0 && (this.joypadLastWrite & 1) === 1) {\n          this.joy1StrobeState = 0;\n          this.joy2StrobeState = 0;\n        }\n        this.joypadLastWrite = value;\n        break;\n\n      case 0x4017:\n        // Sound channel frame sequencer:\n        this.nes.papu.writeReg(address, value);\n        break;\n\n      default:\n        // Sound registers\n        // console.log(\"write to sound reg\");\n        if (address >= 0x4000 && address <= 0x4017) {\n          this.nes.papu.writeReg(address, value);\n        }\n    }\n  },\n\n  joy1Read: function() {\n    var ret;\n\n    switch (this.joy1StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[1].state[this.joy1StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n\n    this.joy1StrobeState++;\n    if (this.joy1StrobeState === 24) {\n      this.joy1StrobeState = 0;\n    }\n\n    return ret;\n  },\n\n  joy2Read: function() {\n    var ret;\n\n    switch (this.joy2StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[2].state[this.joy2StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n\n    this.joy2StrobeState++;\n    if (this.joy2StrobeState === 24) {\n      this.joy2StrobeState = 0;\n    }\n\n    return ret;\n  },\n\n  loadROM: function() {\n    if (!this.nes.rom.valid || this.nes.rom.romCount < 1) {\n      throw new Error(\"NoMapper: Invalid ROM! Unable to load.\");\n    }\n\n    // Load ROM into memory:\n    this.loadPRGROM();\n\n    // Load CHR-ROM:\n    this.loadCHRROM();\n\n    // Load Battery RAM (if present):\n    this.loadBatteryRam();\n\n    // Reset IRQ:\n    //nes.getCpu().doResetInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n  },\n\n  loadPRGROM: function() {\n    if (this.nes.rom.romCount > 1) {\n      // Load the two first banks into memory.\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(1, 0xc000);\n    } else {\n      // Load the one bank into both memory locations:\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(0, 0xc000);\n    }\n  },\n\n  loadCHRROM: function() {\n    // console.log(\"Loading CHR ROM..\");\n    if (this.nes.rom.vromCount > 0) {\n      if (this.nes.rom.vromCount === 1) {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(0, 0x1000);\n      } else {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(1, 0x1000);\n      }\n    } else {\n      //System.out.println(\"There aren't any CHR-ROM banks..\");\n    }\n  },\n\n  loadBatteryRam: function() {\n    if (this.nes.rom.batteryRam) {\n      var ram = this.nes.rom.batteryRam;\n      if (ram !== null && ram.length === 0x2000) {\n        // Load Battery RAM into memory:\n        utils.copyArrayElements(ram, 0, this.nes.cpu.mem, 0x6000, 0x2000);\n      }\n    }\n  },\n\n  loadRomBank: function(bank, address) {\n    // Loads a ROM bank into the specified address.\n    bank %= this.nes.rom.romCount;\n    //var data = this.nes.rom.rom[bank];\n    //cpuMem.write(address,data,data.length);\n    utils.copyArrayElements(\n      this.nes.rom.rom[bank],\n      0,\n      this.nes.cpu.mem,\n      address,\n      16384\n    );\n  },\n\n  loadVromBank: function(bank, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank % this.nes.rom.vromCount],\n      0,\n      this.nes.ppu.vramMem,\n      address,\n      4096\n    );\n\n    var vromTile = this.nes.rom.vromTile[bank % this.nes.rom.vromCount];\n    utils.copyArrayElements(\n      vromTile,\n      0,\n      this.nes.ppu.ptTile,\n      address >> 4,\n      256\n    );\n  },\n\n  load32kRomBank: function(bank, address) {\n    this.loadRomBank((bank * 2) % this.nes.rom.romCount, address);\n    this.loadRomBank((bank * 2 + 1) % this.nes.rom.romCount, address + 16384);\n  },\n\n  load8kVromBank: function(bank4kStart, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    this.loadVromBank(bank4kStart % this.nes.rom.vromCount, address);\n    this.loadVromBank(\n      (bank4kStart + 1) % this.nes.rom.vromCount,\n      address + 4096\n    );\n  },\n\n  load1kVromBank: function(bank1k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    var bank4k = Math.floor(bank1k / 4) % this.nes.rom.vromCount;\n    var bankoffset = (bank1k % 4) * 1024;\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank4k],\n      0,\n      this.nes.ppu.vramMem,\n      bankoffset,\n      1024\n    );\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 64; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[((bank1k % 4) << 6) + i];\n    }\n  },\n\n  load2kVromBank: function(bank2k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    var bank4k = Math.floor(bank2k / 2) % this.nes.rom.vromCount;\n    var bankoffset = (bank2k % 2) * 2048;\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank4k],\n      bankoffset,\n      this.nes.ppu.vramMem,\n      address,\n      2048\n    );\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 128; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[((bank2k % 2) << 7) + i];\n    }\n  },\n\n  load8kRomBank: function(bank8k, address) {\n    var bank16k = Math.floor(bank8k / 2) % this.nes.rom.romCount;\n    var offset = (bank8k % 2) * 8192;\n\n    //this.nes.cpu.mem.write(address,this.nes.rom.rom[bank16k],offset,8192);\n    utils.copyArrayElements(\n      this.nes.rom.rom[bank16k],\n      offset,\n      this.nes.cpu.mem,\n      address,\n      8192\n    );\n  },\n\n  clockIrqCounter: function() {\n    // Does nothing. This is used by the MMC3 mapper.\n  },\n\n  latchAccess: function(address) {\n    // Does nothing. This is used by MMC2.\n  },\n\n  toJSON: function() {\n    return {\n      joy1StrobeState: this.joy1StrobeState,\n      joy2StrobeState: this.joy2StrobeState,\n      joypadLastWrite: this.joypadLastWrite\n    };\n  },\n\n  fromJSON: function(s) {\n    this.joy1StrobeState = s.joy1StrobeState;\n    this.joy2StrobeState = s.joy2StrobeState;\n    this.joypadLastWrite = s.joypadLastWrite;\n  }\n};\n\nMappers[1] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[1].prototype = new Mappers[0]();\n\nMappers[1].prototype.reset = function() {\n  Mappers[0].prototype.reset.apply(this);\n\n  // 5-bit buffer:\n  this.regBuffer = 0;\n  this.regBufferCounter = 0;\n\n  // Register 0:\n  this.mirroring = 0;\n  this.oneScreenMirroring = 0;\n  this.prgSwitchingArea = 1;\n  this.prgSwitchingSize = 1;\n  this.vromSwitchingSize = 0;\n\n  // Register 1:\n  this.romSelectionReg0 = 0;\n\n  // Register 2:\n  this.romSelectionReg1 = 0;\n\n  // Register 3:\n  this.romBankSelect = 0;\n};\n\nMappers[1].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  // See what should be done with the written value:\n  if ((value & 128) !== 0) {\n    // Reset buffering:\n    this.regBufferCounter = 0;\n    this.regBuffer = 0;\n\n    // Reset register:\n    if (this.getRegNumber(address) === 0) {\n      this.prgSwitchingArea = 1;\n      this.prgSwitchingSize = 1;\n    }\n  } else {\n    // Continue buffering:\n    //regBuffer = (regBuffer & (0xFF-(1<<regBufferCounter))) | ((value & (1<<regBufferCounter))<<regBufferCounter);\n    this.regBuffer =\n      (this.regBuffer & (0xff - (1 << this.regBufferCounter))) |\n      ((value & 1) << this.regBufferCounter);\n    this.regBufferCounter++;\n\n    if (this.regBufferCounter === 5) {\n      // Use the buffered value:\n      this.setReg(this.getRegNumber(address), this.regBuffer);\n\n      // Reset buffer:\n      this.regBuffer = 0;\n      this.regBufferCounter = 0;\n    }\n  }\n};\n\nMappers[1].prototype.setReg = function(reg, value) {\n  var tmp;\n\n  switch (reg) {\n    case 0:\n      // Mirroring:\n      tmp = value & 3;\n      if (tmp !== this.mirroring) {\n        // Set mirroring:\n        this.mirroring = tmp;\n        if ((this.mirroring & 2) === 0) {\n          // SingleScreen mirroring overrides the other setting:\n          this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n        } else if ((this.mirroring & 1) !== 0) {\n          // Not overridden by SingleScreen mirroring.\n          this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n        } else {\n          this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n        }\n      }\n\n      // PRG Switching Area;\n      this.prgSwitchingArea = (value >> 2) & 1;\n\n      // PRG Switching Size:\n      this.prgSwitchingSize = (value >> 3) & 1;\n\n      // VROM Switching Size:\n      this.vromSwitchingSize = (value >> 4) & 1;\n\n      break;\n\n    case 1:\n      // ROM selection:\n      this.romSelectionReg0 = (value >> 4) & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x0000:\n        if (this.vromSwitchingSize === 0) {\n          // Swap 8kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.load8kVromBank(value & 0xf, 0x0000);\n          } else {\n            this.load8kVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x0000\n            );\n          }\n        } else {\n          // Swap 4kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.loadVromBank(value & 0xf, 0x0000);\n          } else {\n            this.loadVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x0000\n            );\n          }\n        }\n      }\n\n      break;\n\n    case 2:\n      // ROM selection:\n      this.romSelectionReg1 = (value >> 4) & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x1000:\n        if (this.vromSwitchingSize === 1) {\n          // Swap 4kB of VROM:\n          if (this.romSelectionReg1 === 0) {\n            this.loadVromBank(value & 0xf, 0x1000);\n          } else {\n            this.loadVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x1000\n            );\n          }\n        }\n      }\n      break;\n\n    default:\n      // Select ROM bank:\n      // -------------------------\n      tmp = value & 0xf;\n      var bank;\n      var baseBank = 0;\n\n      if (this.nes.rom.romCount >= 32) {\n        // 1024 kB cart\n        if (this.vromSwitchingSize === 0) {\n          if (this.romSelectionReg0 === 1) {\n            baseBank = 16;\n          }\n        } else {\n          baseBank =\n            (this.romSelectionReg0 | (this.romSelectionReg1 << 1)) << 3;\n        }\n      } else if (this.nes.rom.romCount >= 16) {\n        // 512 kB cart\n        if (this.romSelectionReg0 === 1) {\n          baseBank = 8;\n        }\n      }\n\n      if (this.prgSwitchingSize === 0) {\n        // 32kB\n        bank = baseBank + (value & 0xf);\n        this.load32kRomBank(bank, 0x8000);\n      } else {\n        // 16kB\n        bank = baseBank * 2 + (value & 0xf);\n        if (this.prgSwitchingArea === 0) {\n          this.loadRomBank(bank, 0xc000);\n        } else {\n          this.loadRomBank(bank, 0x8000);\n        }\n      }\n  }\n};\n\n// Returns the register number from the address written to:\nMappers[1].prototype.getRegNumber = function(address) {\n  if (address >= 0x8000 && address <= 0x9fff) {\n    return 0;\n  } else if (address >= 0xa000 && address <= 0xbfff) {\n    return 1;\n  } else if (address >= 0xc000 && address <= 0xdfff) {\n    return 2;\n  } else {\n    return 3;\n  }\n};\n\nMappers[1].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC1: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000); //   First ROM bank..\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000); // ..and last ROM bank.\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\nMappers[1].prototype.switchLowHighPrgRom = function(oldSetting) {\n  // not yet.\n};\n\nMappers[1].prototype.switch16to32 = function() {\n  // not yet.\n};\n\nMappers[1].prototype.switch32to16 = function() {\n  // not yet.\n};\n\nMappers[1].prototype.toJSON = function() {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.mirroring = this.mirroring;\n  s.oneScreenMirroring = this.oneScreenMirroring;\n  s.prgSwitchingArea = this.prgSwitchingArea;\n  s.prgSwitchingSize = this.prgSwitchingSize;\n  s.vromSwitchingSize = this.vromSwitchingSize;\n  s.romSelectionReg0 = this.romSelectionReg0;\n  s.romSelectionReg1 = this.romSelectionReg1;\n  s.romBankSelect = this.romBankSelect;\n  s.regBuffer = this.regBuffer;\n  s.regBufferCounter = this.regBufferCounter;\n  return s;\n};\n\nMappers[1].prototype.fromJSON = function(s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.mirroring = s.mirroring;\n  this.oneScreenMirroring = s.oneScreenMirroring;\n  this.prgSwitchingArea = s.prgSwitchingArea;\n  this.prgSwitchingSize = s.prgSwitchingSize;\n  this.vromSwitchingSize = s.vromSwitchingSize;\n  this.romSelectionReg0 = s.romSelectionReg0;\n  this.romSelectionReg1 = s.romSelectionReg1;\n  this.romBankSelect = s.romBankSelect;\n  this.regBuffer = s.regBuffer;\n  this.regBufferCounter = s.regBufferCounter;\n};\n\nMappers[2] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[2].prototype = new Mappers[0]();\n\nMappers[2].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    this.loadRomBank(value, 0x8000);\n  }\n};\n\nMappers[2].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 003 (CNROM)\n *\n * @constructor\n * @example Solomon's Key, Arkanoid, Arkista's Ring, Bump 'n' Jump, Cybernoid\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_003\n */\nMappers[3] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[3].prototype = new Mappers[0]();\n\nMappers[3].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    // This is a VROM bank select command.\n    // Swap in the given VROM bank at 0x0000:\n    var bank = (value % (this.nes.rom.vromCount / 2)) * 2;\n    this.loadVromBank(bank, 0x0000);\n    this.loadVromBank(bank + 1, 0x1000);\n    this.load8kVromBank(value * 2, 0x0000);\n  }\n};\n\nMappers[4] = function(nes) {\n  this.nes = nes;\n\n  this.CMD_SEL_2_1K_VROM_0000 = 0;\n  this.CMD_SEL_2_1K_VROM_0800 = 1;\n  this.CMD_SEL_1K_VROM_1000 = 2;\n  this.CMD_SEL_1K_VROM_1400 = 3;\n  this.CMD_SEL_1K_VROM_1800 = 4;\n  this.CMD_SEL_1K_VROM_1C00 = 5;\n  this.CMD_SEL_ROM_PAGE1 = 6;\n  this.CMD_SEL_ROM_PAGE2 = 7;\n\n  this.command = null;\n  this.prgAddressSelect = null;\n  this.chrAddressSelect = null;\n  this.pageNumber = null;\n  this.irqCounter = null;\n  this.irqLatchValue = null;\n  this.irqEnable = null;\n  this.prgAddressChanged = false;\n};\n\nMappers[4].prototype = new Mappers[0]();\n\nMappers[4].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  switch (address) {\n    case 0x8000:\n      // Command/Address Select register\n      this.command = value & 7;\n      var tmp = (value >> 6) & 1;\n      if (tmp !== this.prgAddressSelect) {\n        this.prgAddressChanged = true;\n      }\n      this.prgAddressSelect = tmp;\n      this.chrAddressSelect = (value >> 7) & 1;\n      break;\n\n    case 0x8001:\n      // Page number for command\n      this.executeCommand(this.command, value);\n      break;\n\n    case 0xa000:\n      // Mirroring select\n      if ((value & 1) !== 0) {\n        this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n      } else {\n        this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n      }\n      break;\n\n    case 0xa001:\n      // SaveRAM Toggle\n      // TODO\n      //nes.getRom().setSaveState((value&1)!=0);\n      break;\n\n    case 0xc000:\n      // IRQ Counter register\n      this.irqCounter = value;\n      //nes.ppu.mapperIrqCounter = 0;\n      break;\n\n    case 0xc001:\n      // IRQ Latch register\n      this.irqLatchValue = value;\n      break;\n\n    case 0xe000:\n      // IRQ Control Reg 0 (disable)\n      //irqCounter = irqLatchValue;\n      this.irqEnable = 0;\n      break;\n\n    case 0xe001:\n      // IRQ Control Reg 1 (enable)\n      this.irqEnable = 1;\n      break;\n\n    default:\n    // Not a MMC3 register.\n    // The game has probably crashed,\n    // since it tries to write to ROM..\n    // IGNORE.\n  }\n};\n\nMappers[4].prototype.executeCommand = function(cmd, arg) {\n  switch (cmd) {\n    case this.CMD_SEL_2_1K_VROM_0000:\n      // Select 2 1KB VROM pages at 0x0000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0000);\n        this.load1kVromBank(arg + 1, 0x0400);\n      } else {\n        this.load1kVromBank(arg, 0x1000);\n        this.load1kVromBank(arg + 1, 0x1400);\n      }\n      break;\n\n    case this.CMD_SEL_2_1K_VROM_0800:\n      // Select 2 1KB VROM pages at 0x0800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0800);\n        this.load1kVromBank(arg + 1, 0x0c00);\n      } else {\n        this.load1kVromBank(arg, 0x1800);\n        this.load1kVromBank(arg + 1, 0x1c00);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1000:\n      // Select 1K VROM Page at 0x1000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1000);\n      } else {\n        this.load1kVromBank(arg, 0x0000);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1400:\n      // Select 1K VROM Page at 0x1400:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1400);\n      } else {\n        this.load1kVromBank(arg, 0x0400);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1800:\n      // Select 1K VROM Page at 0x1800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1800);\n      } else {\n        this.load1kVromBank(arg, 0x0800);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1C00:\n      // Select 1K VROM Page at 0x1C00:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1c00);\n      } else {\n        this.load1kVromBank(arg, 0x0c00);\n      }\n      break;\n\n    case this.CMD_SEL_ROM_PAGE1:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n\n      // Select first switchable ROM page:\n      if (this.prgAddressSelect === 0) {\n        this.load8kRomBank(arg, 0x8000);\n      } else {\n        this.load8kRomBank(arg, 0xc000);\n      }\n      break;\n\n    case this.CMD_SEL_ROM_PAGE2:\n      // Select second switchable ROM page:\n      this.load8kRomBank(arg, 0xa000);\n\n      // hardwire appropriate bank:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n  }\n};\n\nMappers[4].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC3: Invalid ROM! Unable to load.\");\n  }\n\n  // Load hardwired PRG banks (0xC000 and 0xE000):\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2 + 1, 0xe000);\n\n  // Load swappable PRG banks (0x8000 and 0xA000):\n  this.load8kRomBank(0, 0x8000);\n  this.load8kRomBank(1, 0xa000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\nMappers[4].prototype.clockIrqCounter = function() {\n  if (this.irqEnable === 1) {\n    this.irqCounter--;\n    if (this.irqCounter < 0) {\n      // Trigger IRQ:\n      //nes.getCpu().doIrq();\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n      this.irqCounter = this.irqLatchValue;\n    }\n  }\n};\n\nMappers[4].prototype.toJSON = function() {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.command = this.command;\n  s.prgAddressSelect = this.prgAddressSelect;\n  s.chrAddressSelect = this.chrAddressSelect;\n  s.pageNumber = this.pageNumber;\n  s.irqCounter = this.irqCounter;\n  s.irqLatchValue = this.irqLatchValue;\n  s.irqEnable = this.irqEnable;\n  s.prgAddressChanged = this.prgAddressChanged;\n  return s;\n};\n\nMappers[4].prototype.fromJSON = function(s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.command = s.command;\n  this.prgAddressSelect = s.prgAddressSelect;\n  this.chrAddressSelect = s.chrAddressSelect;\n  this.pageNumber = s.pageNumber;\n  this.irqCounter = s.irqCounter;\n  this.irqLatchValue = s.irqLatchValue;\n  this.irqEnable = s.irqEnable;\n  this.prgAddressChanged = s.prgAddressChanged;\n};\n\n/**\n * Mapper005 (MMC5,ExROM)\n *\n * @example Castlevania 3, Just Breed, Uncharted Waters, Romance of the 3 Kingdoms 2, Laser Invasion, Metal Slader Glory, Uchuu Keibitai SDF, Shin 4 Nin Uchi Mahjong - Yakuman Tengoku\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_005\n * @constructor\n */\nMappers[5] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[5].prototype = new Mappers[0]();\n\nMappers[5].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load8kVromBank(value, 0x0000);\n  }\n};\n\nMappers[5].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x5000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  switch (address) {\n    case 0x5100:\n      this.prg_size = value & 3;\n      break;\n    case 0x5101:\n      this.chr_size = value & 3;\n      break;\n    case 0x5102:\n      this.sram_we_a = value & 3;\n      break;\n    case 0x5103:\n      this.sram_we_b = value & 3;\n      break;\n    case 0x5104:\n      this.graphic_mode = value & 3;\n      break;\n    case 0x5105:\n      this.nametable_mode = value;\n      this.nametable_type[0] = value & 3;\n      this.load1kVromBank(value & 3, 0x2000);\n      value >>= 2;\n      this.nametable_type[1] = value & 3;\n      this.load1kVromBank(value & 3, 0x2400);\n      value >>= 2;\n      this.nametable_type[2] = value & 3;\n      this.load1kVromBank(value & 3, 0x2800);\n      value >>= 2;\n      this.nametable_type[3] = value & 3;\n      this.load1kVromBank(value & 3, 0x2c00);\n      break;\n    case 0x5106:\n      this.fill_chr = value;\n      break;\n    case 0x5107:\n      this.fill_pal = value & 3;\n      break;\n    case 0x5113:\n      this.SetBank_SRAM(3, value & 3);\n      break;\n    case 0x5114:\n    case 0x5115:\n    case 0x5116:\n    case 0x5117:\n      this.SetBank_CPU(address, value);\n      break;\n    case 0x5120:\n    case 0x5121:\n    case 0x5122:\n    case 0x5123:\n    case 0x5124:\n    case 0x5125:\n    case 0x5126:\n    case 0x5127:\n      this.chr_mode = 0;\n      this.chr_page[0][address & 7] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5128:\n    case 0x5129:\n    case 0x512a:\n    case 0x512b:\n      this.chr_mode = 1;\n      this.chr_page[1][(address & 3) + 0] = value;\n      this.chr_page[1][(address & 3) + 4] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5200:\n      this.split_control = value;\n      break;\n    case 0x5201:\n      this.split_scroll = value;\n      break;\n    case 0x5202:\n      this.split_page = value & 0x3f;\n      break;\n    case 0x5203:\n      this.irq_line = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5204:\n      this.irq_enable = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5205:\n      this.mult_a = value;\n      break;\n    case 0x5206:\n      this.mult_b = value;\n      break;\n    default:\n      if (address >= 0x5000 && address <= 0x5015) {\n        this.nes.papu.exWrite(address, value);\n      } else if (address >= 0x5c00 && address <= 0x5fff) {\n        if (this.graphic_mode === 2) {\n          // ExRAM\n          // vram write\n        } else if (this.graphic_mode !== 3) {\n          // Split,ExGraphic\n          if (this.irq_status & 0x40) {\n            // vram write\n          } else {\n            // vram write\n          }\n        }\n      } else if (address >= 0x6000 && address <= 0x7fff) {\n        if (this.sram_we_a === 2 && this.sram_we_b === 1) {\n          // additional ram write\n        }\n      }\n      break;\n  }\n};\n\nMappers[5].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0x8000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xa000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xc000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xe000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper007 (AxROM)\n * @example Battletoads, Time Lord, Marble Madness\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_007\n * @constructor\n */\nMappers[7] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[7].prototype = new Mappers[0]();\n\nMappers[7].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load32kRomBank(value & 0x7, 0x8000);\n    if (value & 0x10) {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING2);\n    } else {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n    }\n  }\n};\n\nMappers[7].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"AOROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadPRGROM();\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 011 (Color Dreams)\n *\n * @description http://wiki.nesdev.com/w/index.php/Color_Dreams\n * @example Crystal Mines, Metal Fighter\n * @constructor\n */\nMappers[11] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[11].prototype = new Mappers[0]();\n\nMappers[11].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank:\n    var prgbank1 = ((value & 0xf) * 2) % this.nes.rom.romCount;\n    var prgbank2 = ((value & 0xf) * 2 + 1) % this.nes.rom.romCount;\n\n    this.loadRomBank(prgbank1, 0x8000);\n    this.loadRomBank(prgbank2, 0xc000);\n\n    if (this.nes.rom.vromCount > 0) {\n      // Swap in the given VROM bank at 0x0000:\n      var bank = ((value >> 4) * 2) % this.nes.rom.vromCount;\n      this.loadVromBank(bank, 0x0000);\n      this.loadVromBank(bank + 1, 0x1000);\n    }\n  }\n};\n\n/**\n * Mapper 034 (BNROM, NINA-01)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_034\n * @example Darkseed, Mashou, Mission Impossible 2\n * @constructor\n */\nMappers[34] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[34].prototype = new Mappers[0]();\n\nMappers[34].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    this.load32kRomBank(value, 0x8000);\n  }\n};\n\n/**\n * Mapper 066 (GxROM)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_066\n * @example Doraemon, Dragon Power, Gumshoe, Thunder & Lightning,\n * Super Mario Bros. + Duck Hunt\n * @constructor\n */\nMappers[66] = function(nes) {\n  this.nes = nes;\n  console.log(\"Mapper 66\");\n};\n\nMappers[66].prototype = new Mappers[0]();\n\nMappers[66].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value & 3) * 2, 0x0000);\n  }\n};\n\nmodule.exports = Mappers;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mappers.js\n// module id = 9\n// module chunks = 0 1"],"sourceRoot":""}