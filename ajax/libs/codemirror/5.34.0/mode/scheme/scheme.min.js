!function(e){"object"==typeof exports&&"object"==typeof module?e(require("../../lib/codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],e):e(CodeMirror)}(function(e){"use strict";e.defineMode("scheme",function(){var e="comment",t="bracket";function n(e){for(var t={},n=e.split(" "),r=0;r<n.length;++r)t[n[r]]=!0;return t}var r=n("Î» case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"),i=n("define let letrec let* lambda");function a(e,t,n){e.indentStack=new function(e,t,n){this.indent=e,this.type=t,this.prev=n}(t,n,e.indentStack)}var c=new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i),o=new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i),l=new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i),s=new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);function d(e){return e.match(c)}function u(e){return e.match(o)}function m(e,t){return!0===t&&e.backUp(1),e.match(s)}function p(e){return e.match(l)}return{startState:function(){return{indentStack:null,indentation:0,mode:!1,sExprComment:!1}},token:function(n,c){if(null==c.indentStack&&n.sol()&&(c.indentation=n.indentation()),n.eatSpace())return null;var o,l=null;switch(c.mode){case"string":for(var s=!1;null!=(f=n.next());){if('"'==f&&!s){c.mode=!1;break}s=!s&&"\\"==f}l="string";break;case"comment":for(var f,h=!1;null!=(f=n.next());){if("#"==f&&h){c.mode=!1;break}h="|"==f}l=e;break;case"s-expr-comment":if(c.mode=!1,"("!=n.peek()&&"["!=n.peek()){n.eatWhile(/[^/s]/),l=e;break}c.sExprComment=0;default:var g=n.next();if('"'==g)c.mode="string",l="string";else if("'"==g)l="atom";else if("#"==g)if(n.eat("|"))c.mode="comment",l=e;else if(n.eat(/[tf]/i))l="atom";else if(n.eat(";"))c.mode="s-expr-comment",l=e;else{var x=null,b=!1,v=!0;n.eat(/[ei]/i)?b=!0:n.backUp(1),n.match(/^#b/i)?x=d:n.match(/^#o/i)?x=u:n.match(/^#x/i)?x=p:n.match(/^#d/i)?x=m:n.match(/^[-+0-9.]/,!1)?(v=!1,x=m):b||n.eat("#"),null!=x&&(v&&!b&&n.match(/^#[ei]/i),x(n)&&(l="number"))}else if(/^[-+0-9.]/.test(g)&&m(n,!0))l="number";else if(";"==g)n.skipToEnd(),l=e;else if("("==g||"["==g){for(var k,y="",w=n.column();null!=(k=n.eat(/[^\s\(\[\;\)\]]/));)y+=k;y.length>0&&i.propertyIsEnumerable(y)?a(c,w+2,g):(n.eatSpace(),n.eol()||";"==n.peek()?a(c,w+1,g):a(c,w+n.current().length,g)),n.backUp(n.current().length-1),"number"==typeof c.sExprComment&&c.sExprComment++,l=t}else")"==g||"]"==g?(l=t,null!=c.indentStack&&c.indentStack.type==(")"==g?"(":"[")&&((o=c).indentStack=o.indentStack.prev,"number"==typeof c.sExprComment&&0==--c.sExprComment&&(l=e,c.sExprComment=!1))):(n.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/),l=r&&r.propertyIsEnumerable(n.current())?"builtin":"variable")}return"number"==typeof c.sExprComment?e:l},indent:function(e){return null==e.indentStack?e.indentation:e.indentStack.indent},closeBrackets:{pairs:'()[]{}""'},lineComment:";;"}}),e.defineMIME("text/x-scheme","scheme")});