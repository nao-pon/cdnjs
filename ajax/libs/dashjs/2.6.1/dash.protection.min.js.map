{"version":3,"sources":["node_modules/browser-pack/_prelude.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/core/events/EventsBase.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/CommonEncryption.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/Protection.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/ProtectionEvents.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/controllers/ProtectionController.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/controllers/ProtectionKeyController.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/drm/KeySystemClearKey.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/drm/KeySystemPlayReady.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/drm/KeySystemWidevine.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/models/ProtectionModel_01b.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/models/ProtectionModel_21Jan2015.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/models/ProtectionModel_3Feb2014.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/servers/ClearKey.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/servers/DRMToday.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/servers/PlayReady.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/servers/Widevine.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/vo/ClearKeyKeySet.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/vo/KeyError.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/vo/KeyMessage.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/vo/KeyPair.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/vo/KeySystemAccess.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/vo/KeySystemConfiguration.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/vo/MediaCapability.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/vo/NeedKey.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dashjs","Protection","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","EventsBase","events","config","override","publicOnly","evt","hasOwnProperty","indexOf","CommonEncryption","cpArray","retVal","cp","schemeIdUri","toLowerCase","value","pssh","offset","view","DataView","version","getUint8","getUint32","slice","keySystem","initData","psshList","parsePSSHList","uuid","cpData","BASE64","decodeArray","__text","buffer","data","dv","done","byteCursor","size","undefined","nextBox","systemID","boxStart","byteLength","val","toString","createProtectionSystem","controller","protectionKeyController","_controllersProtectionKeyController2","context","getInstance","setConfig","log","initialize","protectionModel","getProtectionModel","_controllersProtectionController2","create","adapter","eventBus","Constants","capabilities","setEncryptedMediaSupported","errHandler","videoElement","videoModel","getElement","onencrypted","mediaKeys","navigator","requestMediaKeySystemAccess","_modelsProtectionModel_21Jan20152","getAPI","APIS_ProtectionModel_3Feb2014","_modelsProtectionModel_3Feb20142","api","APIS_ProtectionModel_01b","_modelsProtectionModel_01b2","apis","Object","keys","generateKeyRequest","addKey","cancelKeyRequest","needkey","keyerror","keyadded","keymessage","setMediaKeys","MediaKeys","release","error","message","ready","close","__dashjs_factory_name","factory","FactoryMaker","getClassFactory","_ProtectionEvents2","updateClassFactory","ProtectionEvents","_EventsBase","_get","getPrototypeOf","prototype","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_SYSTEM_SELECTED","KEY_ADDED","KEY_ERROR","KEY_MESSAGE","KEY_SESSION_CLOSED","KEY_SESSION_CREATED","KEY_SESSION_REMOVED","KEY_STATUSES_CHANGED","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","LICENSE_REQUEST_COMPLETE","NEED_KEY","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","protectionEvents","ProtectionController","setup","pendingNeedKeyData","initialized","sessionType","robustnessLevel","manifest","aInfo","vInfo","streamInfo","getStreamsInfo","audioInfo","getMediaInfoForType","AUDIO","videoInfo","VIDEO","mediaInfo","supportedKS","getSupportedKeySystemsFromContentProtection","contentProtection","selectKeySystem","cps","createKeySession","initDataForKS","_CommonEncryption2","getPSSHForKeySystem","currentInitData","getAllInitData","initDataEquals","trigger","systemString","loadKeySession","sessionID","removeKeySession","sessionToken","closeKeySession","setServerCertificate","serverCertificate","setMediaElement","element","on","onNeedKey","onKeyMessage","off","setSessionType","setRobustnessLevel","level","setProtectionData","protDataSet","reset","getProtData","protData","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","push","_voMediaCapability2","codec","_voKeySystemConfiguration2","fromManifest","requestedKeySystems","ksIdx","ks","configs","onKeySystemAccessComplete","event","requestKeySystemAccess","onKeySystemSelected","keySystemAccess","getKeySystem","sendLicenseRequestCompleteEvent","keyMessage","messageType","licenseServerData","getLicenseServer","eventData","getSessionID","isClearKey","clearkeys","processClearKeyLicenseRequest","updateKeySession","xhr","XMLHttpRequest","url","serverURL","laURL","getLicenseServerURLFromInitData","getPSSHData","getServerURLFromMessage","reportError","errorMsg","response","getErrorResponse","statusText","status","readyState","open","getHTTPMethod","responseType","getResponseType","onload","licenseMessage","getLicenseMessage","onabort","onerror","updateHeaders","headers","key","withCredentials","setRequestHeader","httpRequestHeaders","getRequestHeadersFromMessage","send","getLicenseRequestFromMessage","initDataType","abInitData","ArrayBuffer","isView","String","fromCharCode","apply","Uint8Array","getSupportedKeySystems","getKeySystems","instance","ProtectionKeyController","keySystems","_drmKeySystemPlayReady2","_drmKeySystemWidevine2","_drmKeySystemClearKey2","clearkeyKeySystem","getKeySystemBySystemString","initData1","initData2","data1","data2","j","cpIdx","schemeIdURI","getInitData","shouldNotFilterOutKeySystem","_serversDRMToday2","_serversWidevine2","_serversPlayReady2","_serversClearKey2","getClearKeysFromProtectionData","protectionDataSet","getProtectionData","init","getSingletonFactory","KeySystemClearKey","protectionData","clearkeySet","jsonMsg","JSON","parse","keyPairs","kids","clearkeyID","clearkey","_voKeyPair2","_voClearKeyKeySet2","parseInitDataFromContentProtection","KeySystemPlayReady","msg","xmlDoc","parser","DOMParser","dataview","messageFormat","Uint16Array","parseFromString","headerNameList","getElementsByTagName","headerValueList","childNodes","nodeValue","Content","licenseRequest","Challenge","decode","numRecords","getUint16","recordType","recordLength","recordData","record","laurl","luiurl","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","pro","prheader","setUint32","set","setPlayReadyMessageFormat","format","KeySystemWidevine","replaceKID","KID","pssh_array","replace","kidLen","pos","ProtectionModel_01b","pendingSessions","sessions","eventHandler","createEventHandler","removeEventListeners","ksConfigurations","ve","document","createElement","found","supportedAudio","supportedVideo","configIdx","videos","videoIdx","canPlayType","contentType","ksConfig","_voKeySystemAccess2","mediaElement","addEventListener","moreSessionsAllowed","newSession","getExpirationTime","NaN","getSessionType","keyID","handleEvent","type","_voNeedKey2","findSessionByID","sessionId","errorCode","systemCode","_voKeyError2","shift","mediaKeyMessageError","_voKeyMessage2","defaultURL","sessionArray","len","removeEventListener","ProtectionModel_21Jan2015","numSessions","session","removeSession","then","closed","closeKeySessionInternal","requestKeySystemAccessInternal","mksa","createMediaKeys","mkeys","name","createSession","createSessionToken","generateRequest","toJWK","update","load","success","remove","idx","mediaKeySystemAccess","configuration","getConfiguration","token","splice","expiration","getKeyStatuses","keyStatuses","ProtectionModel_3Feb2014","audios","audioIdx","isTypeSupported","ksAccess","ksConfiguration","boundDoSetKeys","doSetKeys","bind","keySession","destinationURL","ClearKey","substring","serverResponse","keypair","keyid","kid","k","DRMToday","checkConfig","keySystemStr","com.widevine.alpha","license","com.microsoft.playready","PlayReady","uintToString","arrayBuffer","encodedString","decodeURIComponent","escape","parseServerResponse","stringResponse","envelope","getElementsByTagNameNS","soap","body","parseErrorResponse","faultstring","statusCode","idStart","idEnd","fault","detail","exception","node","firstChild","lastIndexOf","errorString","Widevine","ClearKeyKeySet","numKeys","jwk","kty","alg","jwkString","stringify","buf","bView","charCodeAt","KeyError","KeyMessage","KeyPair","KeySystemAccess","KeySystemConfiguration","distinctiveIdentifier","persistentState","sessionTypes","initDataTypes","MediaCapability","robustness","NeedKey"],"mappings":"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","file":"dash.protection.min.js","sourceRoot":"./src/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                    cp.value.toLowerCase() === 'cenc')\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @param {BASE64} BASE64 reference\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData, BASE64) {\n        if ('pssh' in cpData) {\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null)\n            return [];\n\n        let dv = new DataView(data);\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ProtectionController from './controllers/ProtectionController';\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\nimport ProtectionEvents from './ProtectionEvents';\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\n\nconst APIS_ProtectionModel_01b = [\n    // Un-prefixed as per spec\n    {\n        // Video Element\n        generateKeyRequest: 'generateKeyRequest',\n        addKey: 'addKey',\n        cancelKeyRequest: 'cancelKeyRequest',\n\n        // Events\n        needkey: 'needkey',\n        keyerror: 'keyerror',\n        keyadded: 'keyadded',\n        keymessage: 'keymessage'\n    },\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\n    {\n        // Video Element\n        generateKeyRequest: 'webkitGenerateKeyRequest',\n        addKey: 'webkitAddKey',\n        cancelKeyRequest: 'webkitCancelKeyRequest',\n\n        // Events\n        needkey: 'webkitneedkey',\n        keyerror: 'webkitkeyerror',\n        keyadded: 'webkitkeyadded',\n        keymessage: 'webkitkeymessage'\n    }\n];\n\nconst APIS_ProtectionModel_3Feb2014 = [\n    // Un-prefixed as per spec\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\n    {\n        // Video Element\n        setMediaKeys: 'setMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MediaKeys',\n        // MediaKeySession\n        release: 'close',\n\n        // Events\n        needkey: 'needkey',\n        error: 'keyerror',\n        message: 'keymessage',\n        ready: 'keyadded',\n        close: 'keyclose'\n    },\n    // MS-prefixed (IE11, Windows 8.1)\n    {\n        // Video Element\n        setMediaKeys: 'msSetMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MSMediaKeys',\n        // MediaKeySession\n        release: 'close',\n        // Events\n        needkey: 'msneedkey',\n        error: 'mskeyerror',\n        message: 'mskeymessage',\n        ready: 'mskeyadded',\n        close: 'mskeyclose'\n    }\n];\n\nfunction Protection() {\n\n    let instance;\n    let context = this.context;\n\n    /**\n     * Create a ProtectionController and associated ProtectionModel for use with\n     * a single piece of content.\n     *\n     * @param {Object} config\n     * @return {ProtectionController} protection controller\n     *\n     */\n    function createProtectionSystem(config) {\n\n        let controller = null;\n\n        let protectionKeyController = ProtectionKeyController(context).getInstance();\n        protectionKeyController.setConfig({log: config.log, BASE64: config.BASE64});\n        protectionKeyController.initialize();\n\n        let protectionModel =  getProtectionModel(config);\n\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\n            controller = ProtectionController(context).create({\n                protectionModel: protectionModel,\n                protectionKeyController: protectionKeyController,\n                adapter: config.adapter,\n                eventBus: config.eventBus,\n                log: config.log,\n                events: config.events,\n                BASE64: config.BASE64,\n                Constants: config.Constants\n            });\n            config.capabilities.setEncryptedMediaSupported(true);\n        }\n        return controller;\n    }\n\n    function getProtectionModel(config) {\n\n        let log = config.log;\n        let eventBus = config.eventBus;\n        let errHandler = config.errHandler;\n        let videoElement = config.videoModel.getElement();\n\n        if (videoElement.onencrypted !== undefined &&\n            videoElement.mediaKeys !== undefined &&\n            navigator.requestMediaKeySystemAccess !== undefined &&\n            typeof navigator.requestMediaKeySystemAccess === 'function') {\n\n            log('EME detected on this user agent! (ProtectionModel_21Jan2015)');\n            return ProtectionModel_21Jan2015(context).create({log: log, eventBus: eventBus, events: config.events});\n\n        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\n\n            log('EME detected on this user agent! (ProtectionModel_3Feb2014)');\n            return ProtectionModel_3Feb2014(context).create({log: log, eventBus: eventBus, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014)});\n\n        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {\n\n            log('EME detected on this user agent! (ProtectionModel_01b)');\n            return ProtectionModel_01b(context).create({log: log, eventBus: eventBus, errHandler: errHandler, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_01b)});\n\n        } else {\n\n            log('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\n            return null;\n\n        }\n    }\n\n    function getAPI(videoElement, apis) {\n\n        for (let i = 0; i < apis.length; i++) {\n            let api = apis[i];\n            // detect if api is supported by browser\n            // check only first function in api -> should be fine\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\n                continue;\n            }\n\n            return api;\n        }\n\n        return null;\n    }\n\n    instance = {\n        createProtectionSystem: createProtectionSystem\n    };\n\n    return instance;\n}\n\nProtection.__dashjs_factory_name = 'Protection';\nlet factory = dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */\nfactory.events = ProtectionEvents;\ndashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n/**\n * @class\n *\n */\nclass ProtectionEvents extends EventsBase {\n    /**\n     * @description Public facing external events to be used when including protection package.\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\n     */\n    constructor () {\n        super();\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         *\n         * @ignore\n         */\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @ignore\n         */\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\n\n        /**\n         * Event ID for events delivered when a new key has been added\n         *\n         * @constant\n         * @deprecated The latest versions of the EME specification no longer\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\n         * is preferred.\n         * @event ProtectionEvents#KEY_ADDED\n         */\n        this.KEY_ADDED = 'public_keyAdded';\n        /**\n         * Event ID for events delivered when an error is encountered by the CDM\n         * while processing a license server response message\n         * @event ProtectionEvents#KEY_ERROR\n         */\n        this.KEY_ERROR = 'public_keyError';\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         * @event ProtectionEvents#KEY_MESSAGE\n         */\n        this.KEY_MESSAGE = 'public_keyMessage';\n\n        /**\n         * Event ID for events delivered when a key session close\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\n         */\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\n\n        /**\n         * Event ID for events delivered when a new key sessions creation\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CREATED\n         */\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\n\n        /**\n         * Event ID for events delivered when a key session removal\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\n         */\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\n\n\n        /**\n         * Event ID for events delivered when the status of one or more\n         * decryption keys has changed\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\n         */\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\n\n        /**\n         * Event ID for events delivered when a key system access procedure\n         * has completed\n         * @ignore\n         */\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'keySystemAccessComplete';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\n         */\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\n\n        /**\n         * Event ID for events delivered when a license request procedure\n         * has completed\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\n         */\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\n\n        /**\n         * Event ID for needkey/encrypted events\n         * @ignore\n         */\n        this.NEED_KEY = 'needkey';\n\n        /**\n         * Event ID for events delivered when the Protection system is detected and created.\n         * @event ProtectionEvents#PROTECTION_CREATED\n         */\n        this.PROTECTION_CREATED = 'public_protectioncreated';\n\n        /**\n         * Event ID for events delivered when the Protection system is destroyed.\n         * @event ProtectionEvents#PROTECTION_DESTROYED\n         */\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\n\n        /**\n         * Event ID for events delivered when a new server certificate has\n         * been delivered to the CDM\n         * @ignore\n         */\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\n\n        /**\n         * Event ID for events delivered when the process of shutting down\n         * a protection set has completed\n         * @ignore\n         */\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\n\n        /**\n         * Event ID for events delivered when a HTMLMediaElement has been\n         * associated with the protection set\n         * @ignore\n         */\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\n    }\n}\n\nlet protectionEvents = new ProtectionEvents();\nexport default protectionEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport MediaCapability from '../vo/MediaCapability';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\n\n/**\n * @module ProtectionController\n * @description Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link ProtectionKeyController}.\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n * @param {Object} config\n */\n\nfunction ProtectionController(config) {\n\n    const protectionKeyController = config.protectionKeyController;\n    let protectionModel = config.protectionModel;\n    let adapter = config.adapter;\n    let eventBus = config.eventBus;\n    const events = config.events;\n    let log = config.log;\n    let BASE64 = config.BASE64;\n    const Constants = config.Constants;\n\n    let instance,\n        pendingNeedKeyData,\n        audioInfo,\n        videoInfo,\n        protDataSet,\n        initialized,\n        sessionType,\n        robustnessLevel,\n        keySystem;\n\n    function setup() {\n        pendingNeedKeyData = [];\n        initialized = false;\n        sessionType = 'temporary';\n        robustnessLevel = '';\n    }\n\n    /**\n     * Initialize this protection system with a given manifest and optional audio\n     * and video stream information.\n     *\n     * @param {Object} manifest the json version of the manifest XML document for the\n     * desired content.  Applications can download their manifest using\n     * {@link module:MediaPlayer#retrieveManifest}\n     * @param {StreamInfo} [aInfo] audio stream information\n     * @param {StreamInfo} [vInfo] video stream information\n     * @memberof module:ProtectionController\n     * @instance\n     * @todo This API will change when we have better support for allowing applications\n     * to select different adaptation sets for playback.  Right now it is clunky for\n     * applications to create {@link StreamInfo} with the right information,\n     */\n    function initialize(manifest, aInfo, vInfo) {\n        // TODO: We really need to do much more here... We need to be smarter about knowing\n        // which adaptation sets for which we have initialized, including the default key ID\n        // value from the ContentProtection elements so we know whether or not we still need to\n        // select key systems and acquire keys.\n        if (!initialized) {\n            let streamInfo;\n\n            if (!aInfo && !vInfo) {\n                // Look for ContentProtection elements.  InitData can be provided by either the\n                // dash264drm:Pssh ContentProtection format or a DRM-specific format.\n                streamInfo = adapter.getStreamsInfo()[0]; // TODO: Single period only for now. See TODO above\n            }\n\n            audioInfo = aInfo || (streamInfo ? adapter.getMediaInfoForType(streamInfo, Constants.AUDIO) : null);\n            videoInfo = vInfo || (streamInfo ? adapter.getMediaInfoForType(streamInfo, Constants.VIDEO) : null);\n            const mediaInfo = (videoInfo) ? videoInfo : audioInfo; // We could have audio or video only\n\n            // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n            // and video will be the same.  Just use one valid MediaInfo object\n            const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\n            if (supportedKS && supportedKS.length > 0) {\n                selectKeySystem(supportedKS, true);\n            }\n\n            initialized = true;\n        }\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\n    }\n\n    /**\n     * Create a new key session associated with the given initialization data from\n     * the MPD or from the PSSH box in the media\n     *\n     * @param {ArrayBuffer} initData the initialization data\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n     * to come up to speed with the latest EME standard\n     */\n    function createKeySession(initData) {\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\n        if (initDataForKS) {\n\n            // Check for duplicate initData\n            const currentInitData = protectionModel.getAllInitData();\n            for (let i = 0; i < currentInitData.length; i++) {\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                    log('DRM: Ignoring initData because we have already seen it!');\n                    return;\n                }\n            }\n            try {\n                protectionModel.createKeySession(initDataForKS, sessionType);\n            } catch (error) {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Error creating key session! ' + error.message});\n            }\n        } else {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Selected key system is ' + keySystem.systemString + '.  needkey/encrypted event contains no initData corresponding to that key system!'});\n        }\n    }\n\n    /**\n     * Loads a key session with the given session ID from persistent storage.  This\n     * essentially creates a new key session\n     *\n     * @param {string} sessionID\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     */\n    function loadKeySession(sessionID) {\n        protectionModel.loadKeySession(sessionID);\n    }\n\n    /**\n     * Removes the given key session from persistent storage and closes the session\n     * as if {@link ProtectionController#closeKeySession}\n     * was called\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionRemoved\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function removeKeySession(sessionToken) {\n        protectionModel.removeKeySession(sessionToken);\n    }\n\n    /**\n     * Closes the key session and releases all associated decryption keys.  These\n     * keys will no longer be available for decrypting media\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function closeKeySession(sessionToken) {\n        protectionModel.closeKeySession(sessionToken);\n    }\n\n    /**\n     * Sets a server certificate for use by the CDM when signing key messages\n     * intended for a particular license server.  This will fire\n     * an error event if a key system has not yet been selected.\n     *\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n     * certificate\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#ServerCertificateUpdated\n     */\n    function setServerCertificate(serverCertificate) {\n        protectionModel.setServerCertificate(serverCertificate);\n    }\n\n    /**\n     * Associate this protection system with the given HTMLMediaElement.  This\n     * causes the system to register for needkey/encrypted events from the given\n     * element and provides a destination for setting of MediaKeys\n     *\n     * @param {HTMLMediaElement} element the media element to which the protection\n     * system should be associated\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setMediaElement(element) {\n        if (element) {\n            protectionModel.setMediaElement(element);\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\n            eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        } else if (element === null) {\n            protectionModel.setMediaElement(element);\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\n            eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        }\n    }\n\n    /**\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n     * \"persistent-license\".  Default is \"temporary\".\n     *\n     * @param {string} value the session type\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setSessionType(value) {\n        sessionType = value;\n    }\n\n    /**\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\n     *\n     * @param {string} level the robustness level\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setRobustnessLevel(level) {\n        robustnessLevel = level;\n    }\n\n    /**\n     * Attach KeySystem-specific data to use for license acquisition with EME\n     *\n     * @param {Object} data an object containing property names corresponding to\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n     * being instances of {@link ProtectionData}\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setProtectionData(data) {\n        protDataSet = data;\n        protectionKeyController.setProtectionData(data);\n    }\n\n    /**\n     * Destroys all protection data associated with this protection set.  This includes\n     * deleting all key sessions.  In the case of persistent key sessions, the sessions\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\n     * associated with a HTMLMediaElement, it will be detached from that element.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function reset() {\n        setMediaElement(null);\n\n        keySystem = undefined;//TODO-Refactor look at why undefined is needed for this. refactor\n\n        if (protectionModel) {\n            protectionModel.reset();\n            protectionModel = null;\n        }\n    }\n\n    ///////////////\n    // Private\n    ///////////////\n\n    function getProtData(keySystem) {\n        let protData = null;\n        const keySystemString = keySystem.systemString;\n\n        if (protDataSet) {\n            protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n        }\n        return protData;\n    }\n\n    function getKeySystemConfiguration(keySystem) {\n        const protData = getProtData(keySystem);\n        const audioCapabilities = [];\n        const videoCapabilities = [];\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\n\n        if (audioInfo) {\n            audioCapabilities.push(new MediaCapability(audioInfo.codec, audioRobustness));\n        }\n        if (videoInfo) {\n            videoCapabilities.push(new MediaCapability(videoInfo.codec, videoRobustness));\n        }\n\n        return new KeySystemConfiguration(\n            audioCapabilities, videoCapabilities, 'optional',\n            (sessionType === 'temporary') ? 'optional' : 'required',\n            [sessionType]);\n    }\n\n    function selectKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n\n        let ksIdx;\n        if (keySystem) {\n            // We have a key system\n            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\n                if (keySystem === supportedKS[ksIdx].ks) {\n\n                    requestedKeySystems.push({ks: supportedKS[ksIdx].ks, configs: [getKeySystemConfiguration(keySystem)]});\n\n                    // Ensure that we would be granted key system access using the key\n                    // system and codec information\n                    const onKeySystemAccessComplete = function (event) {\n                        eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                        if (event.error) {\n                            if (!fromManifest) {\n                                eventBus.trigger(events.KEY_SYSTEM_SELECTED, {error: 'DRM: KeySystem Access Denied! -- ' + event.error});\n                            }\n                        } else {\n                            log('DRM: KeySystem Access Granted');\n                            eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: event.data});\n                            createKeySession(supportedKS[ksIdx].initData);\n                        }\n                    };\n                    eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                    protectionModel.requestKeySystemAccess(requestedKeySystems);\n                    break;\n                }\n            }\n        }\n        else if (keySystem === undefined) {\n            // First time through, so we need to select a key system\n            keySystem = null;\n            pendingNeedKeyData.push(supportedKS);\n\n            // Add all key systems to our request list since we have yet to select a key system\n            for (let i = 0; i < supportedKS.length; i++) {\n                requestedKeySystems.push({ks: supportedKS[i].ks, configs: [getKeySystemConfiguration(supportedKS[i].ks)]});\n            }\n\n            let keySystemAccess;\n            const onKeySystemAccessComplete = function (event) {\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (event.error) {\n                    keySystem = undefined;\n                    eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: 'DRM: KeySystem Access Denied! -- ' + event.error});\n                    }\n                } else {\n                    keySystemAccess = event.data;\n                    log('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\n                    protectionModel.selectKeySystem(keySystemAccess);\n                }\n            };\n            var onKeySystemSelected = function (event) {\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (!event.error) {\n                    keySystem = protectionModel.getKeySystem();\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: keySystemAccess});\n                    // Set server certificate from protData\n                    const protData = getProtData(keySystem);\n                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\n                    }\n                    for (let i = 0; i < pendingNeedKeyData.length; i++) {\n                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                            if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                                createKeySession(pendingNeedKeyData[i][ksIdx].initData);\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    keySystem = undefined;\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: 'DRM: Error selecting key system! -- ' + event.error});\n                    }\n                }\n            };\n            eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n            eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            protectionModel.requestKeySystemAccess(requestedKeySystems);\n        } else {\n            // We are in the process of selecting a key system, so just save the data\n            pendingNeedKeyData.push(supportedKS);\n        }\n    }\n\n    function sendLicenseRequestCompleteEvent(data, error) {\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, {data: data, error: error});\n    }\n\n    function onKeyMessage(e) {\n        log('DRM: onKeyMessage');\n        if (e.error) {\n            log(e.error);\n            return;\n        }\n\n        // Dispatch event to applications indicating we received a key message\n        const keyMessage = e.data;\n        eventBus.trigger(events.KEY_MESSAGE, {data: keyMessage});\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\n        const message = keyMessage.message;\n        const sessionToken = keyMessage.sessionToken;\n        const protData = getProtData(keySystem);\n        const keySystemString = keySystem.systemString;\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\n\n        // Message not destined for license server\n        if (!licenseServerData) {\n            log('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\n            sendLicenseRequestCompleteEvent(eventData);\n            return;\n        }\n\n        // Perform any special handling for ClearKey\n        if (protectionKeyController.isClearKey(keySystem)) {\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(protData, message);\n            if (clearkeys)  {\n                log('DRM: ClearKey license request handled by application!');\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken, clearkeys);\n                return;\n            }\n        }\n\n        // All remaining key system scenarios require a request to a remote license server\n        const xhr = new XMLHttpRequest();\n\n        // Determine license server URL\n        let url = null;\n        if (protData && protData.serverURL) {\n            const serverURL = protData.serverURL;\n            if (typeof serverURL === 'string' && serverURL !== '') {\n                url = serverURL;\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\n                url = serverURL[messageType];\n            }\n        } else if (protData && protData.laURL && protData.laURL !== '') {\n            // TODO: Deprecated!\n            url = protData.laURL;\n        } else {\n            url = keySystem.getLicenseServerURLFromInitData(CommonEncryption.getPSSHData(sessionToken.initData));\n            if (!url) {\n                url = e.data.laURL;\n            }\n        }\n        // Possibly update or override the URL based on the message\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n        // Ensure valid license server URL\n        if (!url) {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: No license server URL specified!');\n            return;\n        }\n\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR complete. status is \"' + xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg);\n        };\n\n        xhr.open(licenseServerData.getHTTPMethod(messageType), url, true);\n        xhr.responseType = licenseServerData.getResponseType(keySystemString, messageType);\n        xhr.onload = function () {\n            if (this.status == 200) {\n                const licenseMessage = licenseServerData.getLicenseMessage(this.response, keySystemString, messageType);\n                if (licenseMessage !== null) {\n                    sendLicenseRequestCompleteEvent(eventData);\n                    protectionModel.updateKeySession(sessionToken, licenseMessage);\n                } else {\n                    reportError(this, eventData, keySystemString, messageType);\n                }\n            } else {\n                reportError(this, eventData, keySystemString, messageType);\n            }\n        };\n        xhr.onabort = function () {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR aborted. status is \"' + this.statusText + '\" (' + this.status + '), readyState is ' + this.readyState);\n        };\n        xhr.onerror = function () {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR error. status is \"' + this.statusText + '\" (' + this.status + '), readyState is ' + this.readyState);\n        };\n\n        // Set optional XMLHttpRequest headers from protection data and message\n        const updateHeaders = function (headers) {\n            if (headers) {\n                for (const key in headers) {\n                    if ('authorization' === key.toLowerCase()) {\n                        xhr.withCredentials = true;\n                    }\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        };\n        if (protData) {\n            updateHeaders(protData.httpRequestHeaders);\n        }\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\n\n        // Set withCredentials property from protData\n        if (protData && protData.withCredentials) {\n            xhr.withCredentials = true;\n        }\n\n        xhr.send(keySystem.getLicenseRequestFromMessage(message));\n    }\n\n    function onNeedKey(event) {\n        log('DRM: onNeedKey');\n        // Ignore non-cenc initData\n        if (event.key.initDataType !== 'cenc') {\n            log('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\n            return;\n        }\n\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n        // Convert to ArrayBuffer\n        let abInitData = event.key.initData;\n        if (ArrayBuffer.isView(abInitData)) {\n            abInitData = abInitData.buffer;\n        }\n\n        // If key system has already been selected and initData already seen, then do nothing\n        if (keySystem) {\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\n            if (initDataForKS) {\n\n                // Check for duplicate initData\n                const currentInitData = protectionModel.getAllInitData();\n                for (let i = 0; i < currentInitData.length; i++) {\n                    if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                        log('DRM: Ignoring initData because we have already seen it!');\n                        return;\n                    }\n                }\n            }\n        }\n\n        log('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\n\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\n        if (supportedKS.length === 0) {\n            log('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\n            return;\n        }\n\n        selectKeySystem(supportedKS, false);\n    }\n\n    function getKeySystems() {\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\n    }\n\n    instance = {\n        initialize: initialize,\n        createKeySession: createKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        setMediaElement: setMediaElement,\n        setSessionType: setSessionType,\n        setRobustnessLevel: setRobustnessLevel,\n        setProtectionData: setProtectionData,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getKeySystems: getKeySystems,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nProtectionController.__dashjs_factory_name = 'ProtectionController';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport CommonEncryption from './../CommonEncryption';\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\nimport DRMToday from './../servers/DRMToday';\nimport PlayReady from './../servers/PlayReady';\nimport Widevine from './../servers/Widevine';\nimport ClearKey from './../servers/ClearKey';\n\n/**\n * @module ProtectionKeyController\n * @description Media protection key system functionality that can be modified/overridden by applications\n */\nfunction ProtectionKeyController() {\n\n    let context = this.context;\n\n    let instance,\n        log,\n        keySystems,\n        BASE64,\n        clearkeyKeySystem;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.log) {\n            log = config.log;\n        }\n\n        if (config.BASE64) {\n            BASE64 = config.BASE64;\n        }\n    }\n\n    function initialize() {\n        keySystems = [];\n\n        let keySystem;\n\n        // PlayReady\n        keySystem = KeySystemPlayReady(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = KeySystemWidevine(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = KeySystemClearKey(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n        clearkeyKeySystem = keySystem;\n    }\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {Array.<KeySystem>} a prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystems() {\n        return keySystems;\n    }\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {KeySystem|null} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystemBySystemString(systemString) {\n        for (let i = 0; i < keySystems.length; i++) {\n            if (keySystems[i].systemString === systemString) {\n                return keySystems[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param {Object} keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function isClearKey(keySystem) {\n        return (keySystem === clearkeyKeySystem);\n    }\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param {ArrayBuffer} initData1 - first initData\n     * @param {ArrayBuffer} initData2 - second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function initDataEquals(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            let data1 = new Uint8Array(initData1);\n            let data2 = new Uint8Array(initData2);\n\n            for (let j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        let cp, ks, ksIdx, cpIdx;\n        let supportedKS = [];\n\n        if (cps) {\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n                ks = keySystems[ksIdx];\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n\n                        // Look for DRM-specific ContentProtection\n                        let initData = ks.getInitData(cp);\n                        if (!!initData) {\n                            supportedKS.push({\n                                ks: keySystems[ksIdx],\n                                initData: initData\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * that have protection data present will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n     * supported by the content\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystems(initData, protDataSet) {\n        let supportedKS = [];\n        let pssh = CommonEncryption.parsePSSHList(initData);\n\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n            let keySystemString = keySystems[ksIdx].systemString;\n            let shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\n\n            if (keySystems[ksIdx].uuid in pssh && shouldNotFilterOutKeySystem) {\n                supportedKS.push({\n                    ks: keySystems[ksIdx],\n                    initData: pssh[keySystems[ksIdx].uuid]\n                });\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @returns {LicenseServer|null} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     * @memberof module:ProtectionKeyController\n     * @instance\n     *\n     */\n    function getLicenseServer(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\n            return null;\n        }\n\n        let licenseServerData = null;\n        if (protData && protData.hasOwnProperty('drmtoday')) {\n            licenseServerData = DRMToday(context).getInstance({BASE64: BASE64});\n        } else if (keySystem.systemString === 'com.widevine.alpha') {\n            licenseServerData = Widevine(context).getInstance();\n        } else if (keySystem.systemString === 'com.microsoft.playready') {\n            licenseServerData = PlayReady(context).getInstance();\n        } else if (keySystem.systemString === 'org.w3.clearkey') {\n            licenseServerData = ClearKey(context).getInstance();\n        }\n\n        return licenseServerData;\n    }\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {ClearKeyKeySet|null} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function processClearKeyLicenseRequest(protData, message) {\n        try {\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            log('Failed to retrieve clearkeys from ProtectionData');\n            return null;\n        }\n    }\n\n    function setProtectionData(protectionDataSet) {\n        var getProtectionData = function (keySystemString) {\n            var protData = null;\n            if (protectionDataSet) {\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\n            }\n            return protData;\n        };\n\n        for (var i = 0; i < keySystems.length; i++) {\n            var keySystem = keySystems[i];\n            if (keySystem.hasOwnProperty('init')) {\n                keySystem.init(getProtectionData(keySystem.systemString));\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setProtectionData: setProtectionData,\n        isClearKey: isClearKey,\n        initDataEquals: initDataEquals,\n        getKeySystems: getKeySystems,\n        getKeySystemBySystemString: getKeySystemBySystemString,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getSupportedKeySystems: getSupportedKeySystems,\n        getLicenseServer: getLicenseServer,\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\n\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nconst systemString = 'org.w3.clearkey';\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey(config) {\n\n    let instance;\n    let BASE64 = config.BASE64;\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            let jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            let keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                let clearkeyID = jsonMsg.kids[i];\n                let clearkey = (protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = 'com.microsoft.playready';\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemPlayReady(config) {\n\n    let instance;\n    let messageFormat = 'utf16';\n    let BASE64 = config.BASE64;\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        let headers = {};\n        let parser = new DOMParser();\n        let dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        let headerNameList = xmlDoc.getElementsByTagName('name');\n        let headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let msg,\n            xmlDoc;\n        let licenseRequest = null;\n        let parser = new DOMParser();\n        let dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('Challenge')[0]) {\n            let Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        }\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            let data = new DataView(initData);\n            let numRecords = data.getUint16(4, true);\n            let offset = 6;\n            let parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                let recordType = data.getUint16(offset, true);\n                offset += 2;\n                let recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                let recordData = initData.slice(offset, offset + recordLength);\n                let record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                let xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    let laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    let luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        let PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        let playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf8\" or \"utf16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf8' && format !== 'utf16') {\n            throw new Error('Illegal PlayReady message format! -- ' + format);\n        }\n        messageFormat = format;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Google Widevine DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\n\nimport CommonEncryption from '../CommonEncryption';\n\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nconst systemString = 'com.widevine.alpha';\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemWidevine(config) {\n\n    let instance;\n    let protData = null;\n    let BASE64 = config.BASE64;\n\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n    function replaceKID(pssh, KID) {\n        let pssh_array;\n        let replace = true;\n        let kidLen = 16;\n        let pos;\n        let i, j;\n\n        pssh_array = new Uint8Array(pssh);\n\n        for (i = 0; i <= pssh_array.length - (kidLen + 2); i++) {\n            if (pssh_array[i] === 0x12 && pssh_array[i + 1] === 0x10) {\n                pos = i + 2;\n                for (j = pos; j < (pos + kidLen); j++) {\n                    if (pssh_array[j] !== 0xFF) {\n                        replace = false;\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n\n        if (replace) {\n            pssh_array.set(KID, pos);\n        }\n\n        return pssh_array.buffer;\n    }\n\n    function getInitData(cp) {\n        var pssh = null;\n        // Get pssh from protectionData or from manifest\n        if (protData && protData.pssh) {\n            pssh = BASE64.decodeArray(protData.pssh).buffer;\n        } else {\n            pssh = CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n        }\n\n        // Check if KID within pssh is empty, in that case set KID value according to 'cenc:default_KID' value\n        if (pssh) {\n            pssh = replaceKID(pssh, cp['cenc:default_KID']);\n        }\n\n        return pssh;\n    }\n\n    function getRequestHeadersFromMessage( /*message*/ ) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        init: init,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData\n    };\n\n    return instance;\n}\n\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_01b(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    let log = config.log;\n    let api = config.api;\n    let errHandler = config.errHandler;\n\n    let instance,\n        videoElement,\n        keySystem,\n        protectionKeyController,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions,\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions,\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        eventHandler;\n\n    function setup() {\n        videoElement = null;\n        keySystem = null;\n        pendingSessions = [];\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        if (videoElement) {\n            removeEventListeners();\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            closeKeySession(sessions[i]);\n        }\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        let retVal = [];\n        for (let i = 0; i < pendingSessions.length; i++) {\n            retVal.push(pendingSessions[i].initData);\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        let ve = videoElement;\n        if (!ve) { // Must have a video element to do this capability tests\n            ve = document.createElement('video');\n        }\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            let systemString = ksConfigurations[ksIdx].ks.systemString;\n            let configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                //let audios = configs[configIdx].audioCapabilities;\n                let videos = configs[configIdx].videoCapabilities;\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                let ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                let ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystem = keySystemAccess.keySystem;\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement) {\n            return;\n        }\n\n        // Replacing the previous element\n        if (videoElement) {\n            removeEventListeners();\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.keyerror, eventHandler);\n            videoElement.addEventListener(api.needkey, eventHandler);\n            videoElement.addEventListener(api.keymessage, eventHandler);\n            videoElement.addEventListener(api.keyadded, eventHandler);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        }\n    }\n\n    function createKeySession(initData /*, keySystemType */) {\n\n        if (!keySystem) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Determine if creating a new session is allowed\n        if (moreSessionsAllowed || sessions.length === 0) {\n\n            let newSession = { // Implements SessionToken\n                sessionID: null,\n                initData: initData,\n                getSessionID: function () {\n                    return this.sessionID;\n                },\n\n                getExpirationTime: function () {\n                    return NaN;\n                },\n\n                getSessionType: function () {\n                    return 'temporary';\n                }\n            };\n            pendingSessions.push(newSession);\n\n            // Send our request to the CDM\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n\n            return newSession;\n\n        } else {\n            throw new Error('Multiple sessions not allowed!');\n        }\n\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const sessionID = sessionToken.sessionID;\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the CDM\n            videoElement[api.addKey](keySystem.systemString,\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            for (let i = 0; i < message.keyPairs.length; i++) {\n                videoElement[api.addKey](keySystem.systemString,\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n            }\n        }\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the CDM\n        videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                let sessionToken = null;\n                switch (event.type) {\n\n                    case api.needkey:\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                        eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        break;\n\n                    case api.keyerror:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            let msg = '';\n                            switch (event.errorCode.code) {\n                                case 1:\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\n                                    break;\n                                case 2:\n                                    msg += 'MEDIA_KEYERR_CLIENT - The Key System could not be installed or updated.';\n                                    break;\n                                case 3:\n                                    msg += 'MEDIA_KEYERR_SERVICE - The message passed into update indicated an error from the license service.';\n                                    break;\n                                case 4:\n                                    msg += 'MEDIA_KEYERR_OUTPUT - There is no available output device with the required characteristics for the content protection system.';\n                                    break;\n                                case 5:\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - A hardware configuration change caused a content protection error.';\n                                    break;\n                                case 6:\n                                    msg += 'MEDIA_KEYERR_DOMAIN - An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\n                                    break;\n                            }\n                            msg += '  System Code = ' + event.systemCode;\n                            // TODO: Build error string based on key error\n                            eventBus.trigger(events.KEY_ERROR, {data: new KeyError(sessionToken, msg)});\n                        } else {\n                            log('No session token found for key error');\n                        }\n                        break;\n\n                    case api.keyadded:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            log('DRM: Key added.');\n                            eventBus.trigger(events.KEY_ADDED, {data: sessionToken});//TODO not sure anything is using sessionToken? why there?\n                        } else {\n                            log('No session token found for key added');\n                        }\n                        break;\n\n                    case api.keymessage:\n\n                        // If this CDM does not support session IDs, we will be limited\n                        // to a single session\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                        // SessionIDs supported\n                        if (moreSessionsAllowed) {\n\n                            // Attempt to find an uninitialized token with this sessionID\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken && pendingSessions.length > 0) {\n\n                                // This is the first message for our latest session, so set the\n                                // sessionID and add it to our list\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n                                sessionToken.sessionID = event.sessionId;\n                            }\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\n\n                            sessionToken = pendingSessions.shift();\n                            sessions.push(sessionToken);\n\n                            if (pendingSessions.length !== 0) {\n                                errHandler.mediaKeyMessageError('Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!');\n                            }\n                        }\n\n                        if (sessionToken) {\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                            // For ClearKey, the spec mandates that you pass this message to the\n                            // addKey method, so we always save it to the token since there is no\n                            // way to tell which key system is in use\n                            sessionToken.keyMessage = message;\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(sessionToken, message, event.defaultURL)});\n\n                        } else {\n                            log('No session token found for key message');\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    /**\n     * Helper function to retrieve the stored session token based on a given\n     * sessionID value\n     *\n     * @param {Array} sessionArray - the array of sessions to search\n     * @param {*} sessionID - the sessionID to search for\n     * @returns {*} the session token with the given sessionID\n     */\n    function findSessionByID(sessionArray, sessionID) {\n\n        if (!sessionID || !sessionArray) {\n            return null;\n        } else {\n            const len = sessionArray.length;\n            for (let i = 0; i < len; i++) {\n                if (sessionArray[i].sessionID == sessionID) {\n                    return sessionArray[i];\n                }\n            }\n            return null;\n        }\n    }\n\n    function removeEventListeners() {\n        videoElement.removeEventListener(api.keyerror, eventHandler);\n        videoElement.removeEventListener(api.needkey, eventHandler);\n        videoElement.removeEventListener(api.keymessage, eventHandler);\n        videoElement.removeEventListener(api.keyadded, eventHandler);\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Most recent EME implementation\n *\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_21Jan2015(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    let log = config.log;\n\n    let instance,\n        keySystem,\n        videoElement,\n        mediaKeys,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        keySystem = null;\n        videoElement = null;\n        mediaKeys = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        const numSessions = sessions.length;\n        let session;\n\n        if (numSessions !== 0) {\n            // Called when we are done closing a session.  Success or fail\n            const done = function (session) {\n                removeSession(session);\n                if (sessions.length === 0) {\n                    if (videoElement) {\n                        videoElement.removeEventListener('encrypted', eventHandler);\n                        videoElement.setMediaKeys(null).then(function () {\n                            eventBus.trigger(events.TEARDOWN_COMPLETE);\n                        });\n                    } else {\n                        eventBus.trigger(events.TEARDOWN_COMPLETE);\n                    }\n                }\n            };\n            for (let i = 0; i < numSessions; i++) {\n                session = sessions[i];\n                (function (s) {\n                    // Override closed promise resolver\n                    session.session.closed.then(function () {\n                        done(s);\n                    });\n                    // Close the session and handle errors, otherwise promise\n                    // resolver above will be called\n                    closeKeySessionInternal(session).catch(function () {\n                        done(s);\n                    });\n\n                })(session);\n            }\n        } else {\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        let retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        requestKeySystemAccessInternal(ksConfigurations, 0);\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\n            keySystem = keySystemAccess.keySystem;\n            mediaKeys = mkeys;\n            if (videoElement) {\n                videoElement.setMediaKeys(mediaKeys).then(function () {\n                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n                });\n            }\n\n        }).catch(function () {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        });\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener('encrypted', eventHandler);\n            videoElement.setMediaKeys(null);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener('encrypted', eventHandler);\n            if (mediaKeys) {\n                videoElement.setMediaKeys(mediaKeys);\n            }\n        }\n    }\n\n    function setServerCertificate(serverCertificate) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not set server certificate until you have selected a key system');\n        }\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\n            log('DRM: License server certificate successfully updated.');\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);\n        }).catch(function (error) {\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, {error: 'Error updating server certificate -- ' + error.name});\n        });\n    }\n\n    function createKeySession(initData, sessionType) {\n\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        let session = mediaKeys.createSession(sessionType);\n        let sessionToken = createSessionToken(session, initData, sessionType);\n\n        // Generate initial key request\n        session.generateRequest('cenc', initData).then(function () {\n            log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n        }).catch(function (error) {\n            // TODO: Better error string\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Error generating key request -- ' + error.name});\n        });\n    }\n\n    function updateKeySession(sessionToken, message) {\n\n        let session = sessionToken.session;\n\n        // Send our request to the key session\n        if (protectionKeyController.isClearKey(keySystem)) {\n            message = message.toJWK();\n        }\n        session.update(message).catch(function (error) {\n            eventBus.trigger(events.KEY_ERROR, {data: new KeyError(sessionToken, 'Error sending update() message! ' + error.name)});\n        });\n    }\n\n    function loadKeySession(sessionID) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not load sessions until you have selected a key system');\n        }\n\n        let session = mediaKeys.createSession();\n\n        // Load persisted session data into our newly created session object\n        session.load(sessionID).then(function (success) {\n            if (success) {\n                let sessionToken = createSessionToken(session);\n                log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n            } else {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Could not load session! Invalid Session ID (' + sessionID + ')'});\n            }\n        }).catch(function (error) {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Could not load session (' + sessionID + ')! ' + error.name});\n        });\n    }\n\n    function removeKeySession(sessionToken) {\n        let session = sessionToken.session;\n\n        session.remove().then(function () {\n            log('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: sessionToken.getSessionID()});\n        }, function (error) {\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: null, error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name});\n\n        });\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the key session\n        closeKeySessionInternal(sessionToken).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name});\n        });\n    }\n\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\n        (function (i) {\n            let keySystem = ksConfigurations[i].ks;\n            let configs = ksConfigurations[i].configs;\n            navigator.requestMediaKeySystemAccess(keySystem.systemString, configs).then(function (mediaKeySystemAccess) {\n\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\n                let configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\n                        mediaKeySystemAccess.getConfiguration() : null;\n                let keySystemAccess = new KeySystemAccess(keySystem, configuration);\n                keySystemAccess.mksa = mediaKeySystemAccess;\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {data: keySystemAccess});\n\n            }).catch(function () {\n                if (++i < ksConfigurations.length) {\n                    requestKeySystemAccessInternal(ksConfigurations, i);\n                } else {\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied!'});\n                }\n            });\n        })(idx);\n    }\n\n    function closeKeySessionInternal(sessionToken) {\n        let session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener('keystatuseschange', sessionToken);\n        session.removeEventListener('message', sessionToken);\n\n        // Send our request to the key session\n        return session.close();\n    }\n\n    // This is our main event handler for all desired HTMLMediaElement events\n    // related to EME.  These events are translated into our API-independent\n    // versions of the same events\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case 'encrypted':\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, event.initDataType)});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n    function removeSession(token) {\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === token) {\n                sessions.splice(i,1);\n                break;\n            }\n        }\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(session, initData, sessionType) {\n\n        let token = { // Implements SessionToken\n            session: session,\n            initData: initData,\n\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'keystatuseschange':\n                        eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: this});\n                        break;\n\n                    case 'message':\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(this, message, undefined, event.messageType)});\n                        break;\n                }\n            },\n\n            getSessionID: function () {\n                return session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return session.expiration;\n            },\n\n            getKeyStatuses: function () {\n                return session.keyStatuses;\n            },\n\n            getSessionType: function () {\n                return sessionType;\n            }\n        };\n\n        // Add all event listeners\n        session.addEventListener('keystatuseschange', token);\n        session.addEventListener('message', token);\n\n        // Register callback for session closed Promise\n        session.closed.then(function () {\n            removeSession(token);\n            log('DRM: Session closed.  SessionID = ' + token.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: token.getSessionID()});\n        });\n\n        // Add to our session list\n        sessions.push(token);\n\n        return token;\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        setServerCertificate: setServerCertificate,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n *\n * Implemented by Internet Explorer 11 (Windows 8.1)\n *\n * @implements ProtectionModel\n * @class\n */\n\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_3Feb2014(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    let log = config.log;\n    let api = config.api;\n\n\n    let instance,\n        videoElement,\n        keySystem,\n        mediaKeys,\n        keySystemAccess,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        videoElement = null;\n        keySystem = null;\n        mediaKeys = null;\n        keySystemAccess = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        try {\n            for (let i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            if (videoElement) {\n                videoElement.removeEventListener(api.needkey, eventHandler);\n            }\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        } catch (error) {\n            eventBus.trigger(events.TEARDOWN_COMPLETE, {error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message});\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        let retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            let systemString = ksConfigurations[ksIdx].ks.systemString;\n            let configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                let audios = configs[configIdx].audioCapabilities;\n                let videos = configs[configIdx].videoCapabilities;\n\n                // Look for supported audio container/codecs\n                if (audios && audios.length !== 0) {\n                    supportedAudio = []; // Indicates that we have a requested audio config\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n                            supportedAudio.push(audios[audioIdx]);\n                        }\n                    }\n                }\n\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                let ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                let ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {data: new KeySystemAccess(ks, ksConfig)});\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(ksAccess) {\n        try {\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n            keySystem = ksAccess.keySystem;\n            keySystemAccess = ksAccess;\n            if (videoElement) {\n                setMediaKeys();\n            }\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n        } catch (error) {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        }\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener(api.needkey, eventHandler);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.needkey, eventHandler);\n            if (mediaKeys) {\n                setMediaKeys();\n            }\n        }\n    }\n\n    function createKeySession(initData /*, keySystemType */) {\n\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Use the first video capability for the contentType.\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n\n        // If player is trying to playback Audio only stream - don't error out.\n        let capabilities = null;\n\n        if (keySystemAccess.ksConfiguration.videoCapabilities !== null && keySystemAccess.ksConfiguration.videoCapabilities.length > 0)\n          capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\n\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities !== null && keySystemAccess.ksConfiguration.audioCapabilities.length > 0)\n          capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\n\n        if (capabilities === null)\n          throw new Error('Can not create sessions for unknown content types.');\n\n        let contentType = capabilities.contentType;\n        let session = mediaKeys.createSession(contentType, new Uint8Array(initData));\n        let sessionToken = createSessionToken(session, initData);\n\n        // Add all event listeners\n        session.addEventListener(api.error, sessionToken);\n        session.addEventListener(api.message, sessionToken);\n        session.addEventListener(api.ready, sessionToken);\n        session.addEventListener(api.close, sessionToken);\n\n        // Add to our session list\n        sessions.push(sessionToken);\n        log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n        eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n    }\n\n    function updateKeySession(sessionToken, message) {\n\n        let session = sessionToken.session;\n\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the key session\n            session.update(new Uint8Array(message));\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            session.update(new Uint8Array(message.toJWK()));\n        }\n    }\n\n    /**\n     * Close the given session and release all associated keys.  Following\n     * this call, the sessionToken becomes invalid\n     *\n     * @param {Object} sessionToken - the session token\n     */\n    function closeKeySession(sessionToken) {\n\n        let session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener(api.error, sessionToken);\n        session.removeEventListener(api.message, sessionToken);\n        session.removeEventListener(api.ready, sessionToken);\n        session.removeEventListener(api.close, sessionToken);\n\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === sessionToken) {\n                sessions.splice(i,1);\n                break;\n            }\n        }\n\n        // Send our request to the key session\n        session[api.release]();\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.needkey:\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    // IE11 does not let you set MediaKeys until it has entered a certain\n    // readyState, so we need this logic to ensure we don't set the keys\n    // too early\n    function setMediaKeys() {\n        let boundDoSetKeys = null;\n        const doSetKeys = function () {\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\n            videoElement[api.setMediaKeys](mediaKeys);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        };\n        if (videoElement.readyState >= 1) {\n            doSetKeys();\n        } else {\n            boundDoSetKeys = doSetKeys.bind(this);\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\n        }\n\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(keySession, initData) {\n        return {\n            // Implements SessionToken\n            session: keySession,\n            initData: initData,\n\n            getSessionID: function () {\n                return this.session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return NaN;\n            },\n\n            getSessionType: function () {\n                return 'temporary';\n            },\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.error:\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\n                        eventBus.trigger(events.KEY_ERROR, { data: new KeyError(this, errorStr) });\n                        break;\n                    case api.message:\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\n                        break;\n                    case api.ready:\n                        log('DRM: Key added.');\n                        eventBus.trigger(events.KEY_ADDED);\n                        break;\n\n                    case api.close:\n                        log('DRM: Session closed.  SessionID = ' + this.getSessionID());\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\n                        break;\n                }\n            }\n        };\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CableLabs ClearKey license server implementation\n *\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\n *\n * @implements LicenseServer\n * @class\n */\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\n\nfunction ClearKey() {\n\n    let instance;\n\n    function getServerURLFromMessage(url, message/*, messageType*/) {\n        // Build ClearKey server query string\n        const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n        url += '/?';\n        for (let i = 0; i < jsonMsg.kids.length; i++) {\n            url += jsonMsg.kids[i] + '&';\n        }\n        url = url.substring(0, url.length - 1);\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'GET';\n    }\n\n    function getResponseType(/*keySystemStr*/) {\n        return 'json';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        if (!serverResponse.hasOwnProperty('keys')) {\n            return null;\n        }\n        let keyPairs = [];\n        for (let i = 0; i < serverResponse.keys.length; i++) {\n            let keypair = serverResponse.keys[i];\n            let keyid = keypair.kid.replace(/=/g, '');\n            let key = keypair.k.replace(/=/g, '');\n\n            keyPairs.push(new KeyPair(keyid, key));\n        }\n        return new ClearKeyKeySet(keyPairs);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nClearKey.__dashjs_factory_name = 'ClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CastLabs DRMToday License Server implementation\n *\n * @implements LicenseServer\n * @class\n */\n\nfunction DRMToday(config) {\n\n    let BASE64 = config.BASE64;\n\n    const keySystems = {\n        'com.widevine.alpha': {\n            responseType: 'json',\n            getLicenseMessage: function (response) {\n                return BASE64.decodeArray(response.license);\n            },\n            getErrorResponse: function (response) {\n                return response;\n            }\n        },\n        'com.microsoft.playready': {\n            responseType: 'arraybuffer',\n            getLicenseMessage: function (response) {\n                return response;\n            },\n            getErrorResponse: function (response) {\n                return String.fromCharCode.apply(null, new Uint8Array(response));\n            }\n        }\n    };\n\n    let instance;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].responseType;\n    }\n\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\n        checkConfig();\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n    }\n\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global escape: true */\n\n/**\n * Microsoft PlayReady Test License Server\n *\n * For testing content that uses the PlayReady test server at\n *\n * @implements LicenseServer\n * @class\n */\n\nfunction PlayReady() {\n\n    let instance;\n\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\n\n    function uintToString(arrayBuffer) {\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n\n    function parseServerResponse(serverResponse) {\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n\n            if (fault) {\n                return null;\n            }\n        }\n        return serverResponse;\n    }\n\n    function parseErrorResponse(serverResponse) {\n        let faultstring = '';\n        let statusCode = '';\n        let message = '';\n        let idStart = -1;\n        let idEnd = -1;\n\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\n            let node = null;\n\n            if (fault === null) {\n                return stringResponse;\n            }\n\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\n            faultstring = node ? node.nodeValue : null;\n\n            if (exception !== null) {\n                node = exception.getElementsByTagName('StatusCode')[0];\n                statusCode = node ? node.firstChild.nodeValue : null;\n                node = exception.getElementsByTagName('Message')[0];\n                message = node ? node.firstChild.nodeValue : null;\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\n                idEnd = message ? message.indexOf(']') : -1;\n                message = message ? message.substring(idStart, idEnd) : '';\n            }\n        }\n\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\n        if (message) {\n            errorString += `, message: ${message}`;\n        }\n\n        return errorString;\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return parseServerResponse.call(this, serverResponse);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return parseErrorResponse.call(this, serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction Widevine() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return serverResponse;\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nWidevine.__dashjs_factory_name = 'Widevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\n *  type\n * @ignore\n */\nclass ClearKeyKeySet {\n    /**\n     * @param {Array.<KeyPair>} keyPairs\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\n     * or 'temporary'.  Can also be null or undefined.\n     * @class\n     * @ignore\n     */\n    constructor(keyPairs, type) {\n        if (type && type !== 'persistent' && type !== 'temporary')\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\n        this.keyPairs = keyPairs;\n        this.type = type;\n    }\n\n    /**\n     * Convert this key set to its JSON Web Key (JWK) representation\n     *\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\n     */\n    toJWK() {\n        let i;\n        let numKeys = this.keyPairs.length;\n        let jwk = {keys: []};\n\n        for (i = 0; i < numKeys; i++) {\n            let key = {\n                kty: 'oct',\n                alg: 'A128KW',\n                kid: this.keyPairs[i].keyID,\n                k: this.keyPairs[i].key\n            };\n            jwk.keys.push(key);\n        }\n        if (this.type) {\n            jwk.type = this.type;\n        }\n        let jwkString = JSON.stringify(jwk);\n        const len = jwkString.length;\n\n        // Convert JSON string to ArrayBuffer\n        let buf = new ArrayBuffer(len);\n        let bView = new Uint8Array(buf);\n        for (i = 0; i < len; i++)\n            bView[i] = jwkString.charCodeAt(i);\n        return buf;\n    }\n}\n\nexport default ClearKeyKeySet;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc EME-independent KeyError\n * @ignore\n */\nclass KeyError {\n    /**\n     * @param {Object} sessionToken the key session to which this error is associated\n     * @param {string} errorString an informational error message\n     * @class\n     * @deprecated Newest versions of EME APIs will not use this error object\n     */\n    constructor(sessionToken, errorString) {\n        this.sessionToken = sessionToken;\n        this.error = errorString;\n    }\n}\n\nexport default KeyError;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc EME-independent KeyMessage\n * @ignore\n */\nclass KeyMessage {\n    /**\n     * @param {SessionToken} sessionToken the session\n     * to which the key message is associated\n     * @param {ArrayBuffer} message the key message\n     * @param {string} defaultURL license acquisition URL provided by the CDM\n     * @param {string} messageType Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @class\n     */\n    constructor(sessionToken, message, defaultURL, messageType) {\n        this.sessionToken = sessionToken;\n        this.message = message;\n        this.defaultURL = defaultURL;\n        this.messageType = messageType ? messageType : 'license-request';\n    }\n}\n\nexport default KeyMessage;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\n * @ignore\n */\nclass KeyPair {\n    /**\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\n     * @class\n     * @ignore\n     */\n    constructor(keyID, key) {\n        this.keyID = keyID;\n        this.key = key;\n    }\n}\n\nexport default KeyPair;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Creates a new key system access token.  Represents a valid key system for\n * given piece of content and key system requirements.  Used to initialize license\n * acquisition operations.\n * @ignore\n */\nclass KeySystemAccess {\n    /**\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\n     * @param {KeySystemConfiguration} ksConfiguration the\n     * subset of configurations passed to the key system access request that are supported\n     * by this user agent\n     * @class\n     * @ignore\n     */\n    constructor(keySystem, ksConfiguration) {\n        this.keySystem = keySystem;\n        this.ksConfiguration = ksConfiguration;\n    }\n}\n\nexport default KeySystemAccess;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc Represents a set of configurations that describe the capabilities desired for\n *  support by a given CDM\n * @ignore\n */\nclass KeySystemConfiguration {\n    /**\n     * @param {Array.<MediaCapability>} audioCapabilities array of\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {Array.<MediaCapability>} videoCapabilities array of\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\n     * One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {string} persistentState desired support for persistent storage of\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {Array.<string>} sessionTypes List of session types that must\n     * be supported by the key system\n     * @class\n     */\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\n        this.initDataTypes = [ 'cenc' ];\n        if (audioCapabilities && audioCapabilities.length) {\n            this.audioCapabilities = audioCapabilities;\n        }\n        if (videoCapabilities && videoCapabilities.length) {\n            this.videoCapabilities = videoCapabilities;\n        }\n        this.distinctiveIdentifier = distinctiveIdentifier;\n        this.persistentState = persistentState;\n        this.sessionTypes = sessionTypes;\n    }\n}\n\nexport default KeySystemConfiguration;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc A media capability\n * @ignore\n */\nclass MediaCapability {\n    /**\n     * @param {string} contentType MIME type and codecs (RFC6386)\n     * @param {string} robustness\n     * @class\n     * @ignore\n     */\n    constructor(contentType, robustness) {\n        this.contentType = contentType;\n        this.robustness = robustness;\n    }\n}\n\nexport default MediaCapability;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc NeedKey\n * @ignore\n */\nclass NeedKey {\n    /**\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {string} initDataType initialization data type\n     * @class\n     */\n    constructor(initData, initDataType) {\n        this.initData = initData;\n        this.initDataType = initDataType;\n    }\n}\n\nexport default NeedKey;\n"]}