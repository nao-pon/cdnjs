{"version":3,"file":"html5sortable.min.js","sources":["../src/data.ts","../src/filter.ts","../src/eventListener.ts","../src/attribute.ts","../src/offset.ts","../src/index.ts","../src/isInDom.ts","../src/insertHtmlElements.ts","../src/html5sortable.ts","../src/serialize.ts","../src/debounce.ts"],"sourcesContent":["/**\n * Get or set data on element\n * @param {Element} element\n * @param {string} key\n * @param {*} value\n * @return {*}\n */\nfunction addData (element: Element, key: string, value?: any) {\n  if (value === undefined) {\n    return element && element.h5s && element.h5s.data && element.h5s.data[key]\n  } else {\n    element.h5s = element.h5s || {}\n    element.h5s.data = element.h5s.data || {}\n    element.h5s.data[key] = value\n  }\n}\n/**\n * Remove data from element\n * @param {Element} element\n */\nfunction removeData (element: Element) {\n  if (element.h5s) {\n    delete element.h5s.data\n  }\n}\n\nexport { addData, removeData }\n","/* global HTMLCollection, NodeList */\n/**\n * Filter only wanted nodes\n * @param {NodeList|HTMLCollection} nodes\n * @param {String} selector\n * @returns {Array}\n */\nexport default (nodes: NodeList|HTMLCollection, selector: string): Array<Element> => {\n  if (!(nodes instanceof NodeList || nodes instanceof HTMLCollection)) {\n    throw new Error('You must provide a nodeList/HTMLCollection of elements to be filtered.')\n  }\n  if (typeof selector !== 'string') {\n    return Array.from(nodes)\n  }\n\n  return Array.from(nodes).filter((item) => item.nodeType === 1 && item.matches(selector))\n}\n","/**\n * @param {Array|Element} element\n * @param {Array|string} event\n * @param {Function} callback\n */\nfunction addEventListener (element, event, callback) {\n  if (element instanceof Array) {\n    for (var i = 0; i < element.length; ++i) {\n      addEventListener(element[i], event, callback)\n    }\n    return\n  }\n  element.addEventListener(event, callback)\n  element.h5s = element.h5s || {}\n  element.h5s.events = element.h5s.events || {}\n  element.h5s.events[event] = callback\n}\n/**\n * @param {Array|Element} element\n * @param {Array|string} event\n */\nfunction removeEventListener (element, event) {\n  if (element instanceof Array) {\n    for (var i = 0; i < element.length; ++i) {\n      removeEventListener(element[i], event)\n    }\n    return\n  }\n  if (element.h5s && element.h5s.events && element.h5s.events[event]) {\n    element.removeEventListener(event, element.h5s.events[event])\n    delete element.h5s.events[event]\n  }\n}\n\nexport { addEventListener, removeEventListener }\n","/**\n * @param {Array|Element} element\n * @param {string} attribute\n * @param {*} value\n */\nfunction addAttribute (element, attribute, value) {\n  if (element instanceof Array) {\n    for (var i = 0; i < element.length; ++i) {\n      addAttribute(element[i], attribute, value)\n    }\n    return\n  }\n  element.setAttribute(attribute, value)\n}\n/**\n * @param {Array|Element} element\n * @param {string} attribute\n */\nfunction removeAttribute (element, attribute) {\n  if (element instanceof Array) {\n    for (var i = 0; i < element.length; ++i) {\n      removeAttribute(element[i], attribute)\n    }\n    return\n  }\n  element.removeAttribute(attribute)\n}\n\nexport { addAttribute, removeAttribute }\n","/**\n * @param {Element} element\n * @returns {Object}\n */\nexport default (element: Element): object => {\n  if (!element.parentElement) {\n    throw new Error('target element must be part of the dom')\n  }\n\n  let rect = element.getClientRects()[0]\n  return {\n    left: rect.left + window.scrollX,\n    right: rect.right + window.scrollX,\n    top: rect.top + window.scrollY,\n    bottom: rect.bottom + window.scrollY\n  }\n}\n","/* eslint-env browser */\n/**\n * Get position of the element relatively to its sibling elements\n * @param {Element} element\n * @returns {number}\n */\nexport default (element: Element, elementList: HTMLCollection | NodeList | Array): number => {\n  if (!(element instanceof Element) || !(elementList instanceof NodeList || elementList instanceof HTMLCollection || elementList instanceof Array)) {\n    throw new Error('You must provide an element and a list of elements.')\n  }\n\n  return Array.from(elementList).indexOf(element)\n}\n","/**\n * Test whether element is in DOM\n * @param {Element} element\n * @returns {boolean}\n */\nexport default (element: Element): boolean => {\n  if (!element || element.nodeType !== 1) {\n    throw new Error('Element is not a node element.')\n  }\n\n  return element.parentNode !== null\n}\n","/* eslint-env browser */\n/**\n * Insert node before or after target\n * @param {Element} referenceNode - reference element\n * @param {Element} newElement - element to be inserted\n * @param {String} position - insert before or after reference element\n */\nlet insertNode = (referenceNode: any, newElement: any, position: String) => {\n  if (!(referenceNode instanceof Element) || !(referenceNode.parentElement instanceof Element)) {\n    throw new Error('target and element must be a node')\n  }\n  referenceNode.parentElement.insertBefore(\n    newElement,\n    (position === 'before' ? referenceNode : referenceNode.nextElementSibling)\n  )\n}\n/**\n * Insert before target\n * @param {Element} target\n * @param {Element} element\n */\nlet insertBefore = (target, element) => insertNode(target, element, 'before')\n/**\n * Insert after target\n * @param {Element} target\n * @param {Element} element\n */\nlet insertAfter = (target, element) => insertNode(target, element, 'after')\n\nexport { insertBefore, insertAfter }\n","/* eslint-env browser */\n'use strict'\n\nimport { addData as _data, removeData as _removeData } from './data'\nimport _filter from './filter'\nimport { addEventListener as _on, removeEventListener as _off } from './eventListener'\nimport { addAttribute as _attr, removeAttribute as _removeAttr } from './attribute'\nimport _offset from './offset'\nimport _debounce from './debounce'\nimport _index from './index'\nimport isInDom from './isInDom'\nimport {insertBefore as _before, insertAfter as _after} from './insertHtmlElements'\nimport _serialize from './serialize'\n/*\n * variables global to the plugin\n */\nvar dragging\nvar draggingHeight\nvar placeholderMap = new Map()\nlet startParent\n/**\n * remove event handlers from items\n * @param {Array|NodeList} items\n */\nvar _removeItemEvents = function (items) {\n  _off(items, 'dragstart')\n  _off(items, 'dragend')\n  _off(items, 'selectstart')\n  _off(items, 'dragover')\n  _off(items, 'dragenter')\n  _off(items, 'drop')\n  _off(items, 'mouseenter')\n  _off(items, 'mouseleave')\n}\n/**\n * Remove event handlers from sortable\n * @param {Element} sortable a single sortable\n */\nvar _removeSortableEvents = function (sortable) {\n  _off(sortable, 'dragover')\n  _off(sortable, 'dragenter')\n  _off(sortable, 'drop')\n}\n/**\n * create a placeholder element\n * @param {Elememnt} sortableElement a single sortable\n * @param {string|undefine} placeholder a string representing an html element\n * @param {string} placeholderClasses a string representing the classes that should be added to the placeholder\n */\nlet _makePlaceholder = (sortableElement, placeholder = undefined, placeholderClasses = 'sortable-placeholder') => {\n  if (typeof placeholder === 'string') {\n    let tempContainer = document.createElement(sortableElement.tagName)\n    tempContainer.innerHTML = placeholder\n    placeholder = tempContainer.children[0]\n  } else {\n    switch (sortableElement.tagName) {\n      case 'UL':\n        placeholder = document.createElement('li')\n        break\n      case 'OL':\n        placeholder = document.createElement('li')\n        break\n      case 'TABLE':\n        placeholder = 'tr'\n        placeholder.innerHTML = '<td colspan=\"100\"></td>'\n        break\n      case 'TBODY':\n        placeholder = document.createElement('tr')\n        placeholder.innerHTML = '<td colspan=\"100\"></td>'\n        break\n      default:\n        placeholder = document.createElement('div')\n    }\n  }\n  // add classes to placeholder\n  placeholder.classList.add(...placeholderClasses.split(' '))\n\n  return placeholder\n}\n/**\n * Attach ghost to dataTransfer object\n * @param {Event} original event\n * @param {object} ghost-object with item, x and y coordinates\n */\nvar _attachGhost = function (event, ghost) {\n  // this needs to be set for HTML5 drag & drop to work\n  event.dataTransfer.effectAllowed = 'copyMove'\n  // Firefox requires some arbitrary content in the data in order for\n  // the drag & drop functionality to work\n  event.dataTransfer.setData('text', 'arbitrary-content')\n\n  // check if setDragImage method is available\n  if (event.dataTransfer.setDragImage) {\n    event.dataTransfer.setDragImage(ghost.draggedItem, ghost.x, ghost.y)\n  }\n}\n/**\n * _addGhostPos clones the dragged item and adds it as a Ghost item\n * @param {Event} event - the event fired when dragstart is triggered\n * @param {object} ghost - .draggedItem = Element\n */\nvar _addGhostPos = function (event, ghost) {\n  if (!ghost.x) {\n    ghost.x = parseInt(event.pageX - _offset(ghost.draggedItem).left)\n  }\n  if (!ghost.y) {\n    ghost.y = parseInt(event.pageY - _offset(ghost.draggedItem).top)\n  }\n  return ghost\n}\n/**\n * _makeGhost decides which way to make a ghost and passes it to attachGhost\n * @param {Element} draggedItem - the item that the user drags\n */\nvar _makeGhost = function (draggedItem) {\n  return {\n    draggedItem: draggedItem\n  }\n}\n/**\n * _getGhost constructs ghost and attaches it to dataTransfer\n * @param {Event} event - the original drag event object\n * @param {Element} draggedItem - the item that the user drags\n */\n// TODO: could draggedItem be replaced by event.target in all instances\nvar _getGhost = function (event, draggedItem) {\n  // add ghost item & draggedItem to ghost object\n  var ghost = _makeGhost(draggedItem)\n  // attach ghost position\n  ghost = _addGhostPos(event, ghost)\n  // attach ghost to dataTransfer\n  _attachGhost(event, ghost)\n}\n/**\n * _getDragging returns the current element to drag or\n * a copy of the element.\n * Is Copy Active for sortable\n * @param {Element} draggedItem - the item that the user drags\n * @param {Element} sortable a single sortable\n */\nvar _getDragging = function (draggedItem, sortable) {\n  var ditem = draggedItem\n  if (_isCopyActive(sortable)) {\n    ditem = draggedItem.cloneNode(true)\n    _attr(ditem, 'aria-copied', 'true')\n    draggedItem.parentElement.appendChild(ditem)\n    ditem.style.display = 'none'\n    ditem.oldDisplay = draggedItem.style.display\n  }\n  return ditem\n}\n/**\n * Remove data from sortable\n * @param {Element} sortable a single sortable\n */\nvar _removeSortableData = function (sortable) {\n  _removeData(sortable)\n  _removeAttr(sortable, 'aria-dropeffect')\n}\n/**\n * Remove data from items\n * @param {Array|Element} items\n */\nvar _removeItemData = function (items) {\n  _removeAttr(items, 'aria-grabbed')\n  _removeAttr(items, 'aria-copied')\n  _removeAttr(items, 'draggable')\n  _removeAttr(items, 'role')\n}\n/**\n * Check if two lists are connected\n * @param {Element} curList\n * @param {Element} destList\n */\nvar _listsConnected = function (curList, destList) {\n  if (_isSortable(curList)) {\n    var acceptFrom = _data(curList, 'opts').acceptFrom\n    if (acceptFrom !== null) {\n      return acceptFrom !== false && acceptFrom.split(',').filter(function (sel) {\n        return sel.length > 0 && destList.matches(sel)\n      }).length > 0\n    }\n    if (curList === destList) {\n      return true\n    }\n    if (_data(curList, 'connectWith') !== undefined) {\n      return _data(curList, 'connectWith') === _data(destList, 'connectWith')\n    }\n  }\n  return false\n}\n/**\n * Is Copy Active for sortable\n * @param {Element} sortable a single sortable\n */\nvar _isCopyActive = function (sortable) {\n  return _data(sortable, 'opts').copy === true\n}\n/**\n * Get height of an element including padding\n * @param {Element} sortable a single sortable\n */\nlet _getElementHeight = (element) => {\n  // get calculated style of element\n  let style = window.getComputedStyle(element)\n  // pick applicable properties, convert to int and reduce by adding\n  return ['height', 'padding-top', 'padding-bottom']\n    .map((key) => {\n      let int = parseInt(style.getPropertyValue(key), 10)\n      return isNaN(int) ? 0 : int\n    })\n    .reduce((prev, cur) => prev + cur)\n}\n/**\n * get handle or return item\n * @param {Array} items\n * @param {selector} handle\n */\nvar _getHandles = function (items, handle) {\n  var result = []\n  var handles\n  if (!handle) {\n    return items\n  }\n  for (var i = 0; i < items.length; ++i) {\n    handles = items[i].querySelectorAll(handle)\n    result = result.concat(Array.prototype.slice.call(handles))\n  }\n  return result\n}\n/**\n * Is {Element} a sortable.\n * @param {Element} sortable a single sortable\n */\nfunction _isSortable (element) {\n  return element !== undefined && element != null && _data(element, 'opts') !== undefined\n}\n/**\n * find sortable from element. travels up parent element until found or null.\n * @param {Element} sortable a single sortable\n */\nfunction findSortable (element) {\n  while ((element = element.parentElement) && !_isSortable(element));\n  return element\n}\n/**\n * Dragging event is on the sortable element. finds the top child that\n * contains the element.\n * @param {Element} sortable a single sortable\n * @param {Element} element is that being dragged\n */\nfunction findDragElement (sortableElement, element) {\n  var options = _data(sortableElement, 'opts')\n  var items = _filter(sortableElement.children, options.items)\n  var itemlist = items.filter(function (ele) {\n    return ele.contains(element)\n  })\n\n  return itemlist.length > 0 ? itemlist[0] : element\n}\n/**\n * Destroy the sortable\n * @param {Element} sortableElement a single sortable\n */\nvar _destroySortable = function (sortableElement) {\n  var opts = _data(sortableElement, 'opts') || {}\n  var items = _filter(sortableElement.children, opts.items)\n  var handles = _getHandles(items, opts.handle)\n  // remove event handlers & data from sortable\n  _removeSortableEvents(sortableElement)\n  _removeSortableData(sortableElement)\n  // remove event handlers & data from items\n  _off(handles, 'mousedown')\n  _removeItemEvents(items)\n  _removeItemData(items)\n}\n/**\n * Enable the sortable\n * @param {Element} sortableElement a single sortable\n */\nvar _enableSortable = function (sortableElement) {\n  var opts = _data(sortableElement, 'opts')\n  var items = _filter(sortableElement.children, opts.items)\n  var handles = _getHandles(items, opts.handle)\n  _attr(sortableElement, 'aria-dropeffect', 'move')\n  _data(sortableElement, '_disabled', 'false')\n  _attr(handles, 'draggable', 'true')\n  // IE FIX for ghost\n  // can be disabled as it has the side effect that other events\n  // (e.g. click) will be ignored\n  var spanEl = (document || window.document).createElement('span')\n  if (typeof spanEl.dragDrop === 'function' && !opts.disableIEFix) {\n    _on(handles, 'mousedown', function () {\n      if (items.indexOf(this) !== -1) {\n        this.dragDrop()\n      } else {\n        var parent = this.parentElement\n        while (items.indexOf(parent) === -1) {\n          parent = parent.parentElement\n        }\n        parent.dragDrop()\n      }\n    })\n  }\n}\n/**\n * Disable the sortable\n * @param {Element} sortableElement a single sortable\n */\nvar _disableSortable = function (sortableElement) {\n  var opts = _data(sortableElement, 'opts')\n  var items = _filter(sortableElement.children, opts.items)\n  var handles = _getHandles(items, opts.handle)\n  _attr(sortableElement, 'aria-dropeffect', 'none')\n  _data(sortableElement, '_disabled', 'true')\n  _attr(handles, 'draggable', 'false')\n  _off(handles, 'mousedown')\n}\n/**\n * Reload the sortable\n * @param {Element} sortableElement a single sortable\n * @description events need to be removed to not be double bound\n */\nvar _reloadSortable = function (sortableElement) {\n  var opts = _data(sortableElement, 'opts')\n  var items = _filter(sortableElement.children, opts.items)\n  var handles = _getHandles(items, opts.handle)\n  _data(sortableElement, '_disabled', 'false')\n  // remove event handlers from items\n  _removeItemEvents(items)\n  _off(handles, 'mousedown')\n  // remove event handlers from sortable\n  _removeSortableEvents(sortableElement)\n}\n\n/**\n * Public sortable object\n * @param {Array|NodeList} sortableElements\n * @param {object|string} options|method\n */\nexport default function sortable (sortableElements, options) {\n  var method = String(options)\n  options = (function (options) {\n    var result = {\n      connectWith: false,\n      acceptFrom: null,\n      copy: false,\n      placeholder: null,\n      disableIEFix: false,\n      placeholderClass: 'sortable-placeholder',\n      draggingClass: 'sortable-dragging',\n      hoverClass: false,\n      debounce: 0,\n      maxItems: 0,\n      itemSerializer: undefined,\n      containerSerializer: undefined\n    }\n    if (typeof options === 'object') {\n      for (var option in options) {\n        result[option] = options[option]\n      }\n    }\n    return result\n  })(options)\n\n  if (typeof sortableElements === 'string') {\n    sortableElements = document.querySelectorAll(sortableElements)\n  }\n\n  if (sortableElements instanceof Element) {\n    sortableElements = [sortableElements]\n  }\n\n  sortableElements = Array.prototype.slice.call(sortableElements)\n\n  if (/serialize/.test(method)) {\n    return sortableElements.map((sortableContainer) => {\n      let opts = _data(sortableContainer, 'opts')\n      return _serialize(sortableContainer, opts.itemSerializer, opts.containerSerializer)\n    })\n  }\n\n  sortableElements.forEach(function (sortableElement) {\n    if (/enable|disable|destroy/.test(method)) {\n      return sortable[method](sortableElement)\n    }\n\n    // get options & set options on sortable\n    options = _data(sortableElement, 'opts') || options\n    _data(sortableElement, 'opts', options)\n    // property to define as sortable\n    sortableElement.isSortable = true\n    // reset sortable\n    _reloadSortable(sortableElement)\n    // initialize\n    var items = _filter(sortableElement.children, options.items)\n    var index\n    var startList\n    let placeholder = _makePlaceholder(sortableElement, options.placeholder, options.placeholderClass)\n\n    _data(sortableElement, 'items', options.items)\n    placeholderMap.set(sortableElement, placeholder)\n    if (options.acceptFrom) {\n      _data(sortableElement, 'acceptFrom', options.acceptFrom)\n    } else if (options.connectWith) {\n      _data(sortableElement, 'connectWith', options.connectWith)\n    }\n\n    _enableSortable(sortableElement)\n    _attr(items, 'role', 'option')\n    _attr(items, 'aria-grabbed', 'false')\n\n    // Mouse over class\n    if (typeof options.hoverClass === 'string') {\n      let hoverClasses = options.hoverClass.split(' ')\n      // add class on hover\n      _on(items, 'mouseenter', function (e) {\n        e.target.classList.add(...hoverClasses)\n      })\n      // remove class on leave\n      _on(items, 'mouseleave', function (e) {\n        e.target.classList.remove(...hoverClasses)\n      })\n    }\n\n    // Handle drag events on draggable items\n    // Handle set at sortableelement level as it will bubble up\n    // from the item\n    _on(sortableElement, 'dragstart', function (e) {\n      // ignore dragstart events\n      if (_isSortable(e.target)) {\n        return\n      }\n      e.stopImmediatePropagation()\n\n      if ((options.handle && !e.target.matches(options.handle)) || e.target.getAttribute('draggable') === 'false') {\n        return\n      }\n\n      var sortableElement = findSortable(e.target)\n      var dragitem = findDragElement(sortableElement, e.target)\n      // add transparent clone or other ghost to cursor\n      _getGhost(e, dragitem)\n      // cache selsection & add attr for dragging\n      draggingHeight = _getElementHeight(dragitem)\n      dragitem.classList.add(options.draggingClass)\n      dragging = _getDragging(dragitem, sortableElement)\n      _attr(dragging, 'aria-grabbed', 'true')\n      // grab values\n      index = _index(dragging, dragging.parentElement.children)\n      startParent = findSortable(e.target)\n      startList = _serialize(startParent)\n      // dispatch sortstart event on each element in group\n\n      sortableElement.dispatchEvent(new CustomEvent('sortstart', {\n        detail: {\n          item: dragging,\n          placeholder: placeholderMap.get(sortableElement),\n          startparent: startParent\n        }\n      }))\n    })\n    // Handle drag events on draggable items\n    _on(sortableElement, 'dragend', function (e) {\n      var newParent\n      if (!dragging) {\n        return\n      }\n      var sortableElement = findSortable(e.target)\n      // remove dragging attributes and show item\n      dragging.classList.remove(options.draggingClass)\n      _attr(dragging, 'aria-grabbed', 'false')\n\n      if (dragging.getAttribute('aria-copied') === 'true' && _data(dragging, 'dropped') !== 'true') {\n        dragging.remove()\n      }\n\n      dragging.style.display = dragging.oldDisplay\n      delete dragging.oldDisplay\n\n      placeholderMap.forEach((element) => element.remove())\n      newParent = this.parentElement\n\n      if (_listsConnected(newParent, startParent)) {\n        sortableElement.dispatchEvent(new CustomEvent('sortstop', {\n          detail: {\n            item: dragging,\n            startparent: startParent\n          }\n        }))\n        if (index !== _index(dragging, dragging.parentElement.children) || startParent !== newParent) {\n          sortableElement.dispatchEvent(new CustomEvent('sortupdate', {\n            detail: {\n              item: dragging,\n              index: _filter(newParent.children, _data(newParent, 'items'))\n                .indexOf(dragging),\n              oldindex: items.indexOf(dragging),\n              elementIndex: _index(dragging, dragging.parentElement.children),\n              oldElementIndex: index,\n              startparent: startParent,\n              endparent: newParent,\n              newEndList: _serialize(newParent),\n              newStartList: _serialize(startParent),\n              oldStartList: startList\n            }\n          }))\n        }\n      }\n      dragging = null\n      draggingHeight = null\n    })\n    // Handle drop event on sortable & placeholder\n    _on(sortableElement, 'drop', function (e) {\n      if (!_listsConnected(sortableElement, dragging.parentElement)) {\n        return\n      }\n      e.preventDefault()\n      e.stopPropagation()\n\n      _data(dragging, 'dropped', 'true')\n      var visiblePlaceholder = Array.from(placeholderMap.values()).filter(isInDom)[0]\n      _after(visiblePlaceholder, dragging)\n      // fire sortstop\n      sortableElement.dispatchEvent(new CustomEvent('sortstop', {\n        detail: {\n          item: dragging,\n          startparent: startParent\n        }\n      }))\n\n      let newParent = _isSortable(this) ? this : this.parentElement\n      // fire sortupdate if index or parent changed\n      if (index !== _index(dragging, dragging.parentElement.children) || startParent !== newParent) {\n        sortableElement.dispatchEvent(new CustomEvent('sortupdate', {\n          detail: {\n            item: dragging,\n            index: _index(dragging, _filter(newParent.children, _data(newParent, 'items'))),\n            oldindex: items.indexOf(dragging),\n            elementIndex: _index(dragging, dragging.parentElement.children),\n            oldElementIndex: index,\n            startparent: startParent,\n            endparent: newParent,\n            newEndList: _serialize(newParent),\n            newStartList: _serialize(startParent),\n            oldStartList: startList\n          }\n        }))\n      }\n    })\n\n    var debouncedDragOverEnter = _debounce((sortableElement, element, pageY) => {\n      if (!dragging) {\n        return\n      }\n\n      var placeholder = placeholderMap.get(sortableElement)\n      // set placeholder height if forcePlaceholderSize option is set\n      if (options.forcePlaceholderSize) {\n        placeholder.style.height = draggingHeight + 'px'\n      }\n      // if element the draggedItem is dragged onto is within the array of all elements in list\n      // (not only items, but also disabled, etc.)\n      if (Array.from(sortableElement.children).indexOf(element) > -1) {\n        let thisHeight = _getElementHeight(element)\n        var placeholderIndex = _index(placeholder, element.parentElement.children)\n        var thisIndex = _index(element, element.parentElement.children)\n        // Check if `element` is bigger than the draggable. If it is, we have to define a dead zone to prevent flickering\n        if (thisHeight > draggingHeight) {\n          // Dead zone?\n          var deadZone = thisHeight - draggingHeight\n          var offsetTop = _offset(element).top\n          if (placeholderIndex < thisIndex &&\n              pageY < offsetTop + deadZone) {\n            return\n          }\n          if (placeholderIndex > thisIndex &&\n              pageY > offsetTop + thisHeight - deadZone) {\n            return\n          }\n        }\n\n        if (dragging.oldDisplay === undefined) {\n          dragging.oldDisplay = dragging.style.display\n        }\n\n        if (dragging.style.display !== 'none') {\n          dragging.style.display = 'none'\n        }\n        if (placeholderIndex < thisIndex) {\n          _after(element, placeholder)\n        } else {\n          _before(element, placeholder)\n        }\n        // Intentionally violated chaining, it is more complex otherwise\n        Array.from(placeholderMap.values())\n          .filter(function (element) { return element !== placeholder })\n          .forEach((element) => element.remove())\n      } else {\n        if (Array.from(placeholderMap.values()).indexOf(element) === -1 &&\n            sortableElement === element &&\n            !_filter(element.children, options.items).length) {\n          placeholderMap.forEach((element) => element.remove())\n          element.appendChild(placeholder)\n        }\n      }\n    }, options.debounce)\n    // Handle dragover and dragenter events on draggable items\n    var onDragOverEnter = function (e) {\n      var element = e.target\n      var sortableElement = _isSortable(element) ? element : findSortable(element)\n      element = findDragElement(sortableElement, element)\n      if (!dragging || !_listsConnected(sortableElement, dragging.parentElement) || _data(sortableElement, '_disabled') === 'true') {\n        return\n      }\n      var options = _data(sortableElement, 'opts')\n      if (parseInt(options.maxItems) && _filter(sortableElement.children, _data(sortableElement, 'items')).length >= parseInt(options.maxItems)) {\n        return\n      }\n      e.preventDefault()\n      e.stopPropagation()\n      e.dataTransfer.dropEffect = _isCopyActive(sortableElement) ? 'copy' : 'move'\n      debouncedDragOverEnter(sortableElement, element, e.pageY)\n    }\n\n    _on(items.concat(sortableElement), 'dragover', onDragOverEnter)\n    _on(items.concat(sortableElement), 'dragenter', onDragOverEnter)\n  })\n\n  return sortableElements\n}\n\nsortable.destroy = function (sortableElement) {\n  _destroySortable(sortableElement)\n}\n\nsortable.enable = function (sortableElement) {\n  _enableSortable(sortableElement)\n}\n\nsortable.disable = function (sortableElement) {\n  _disableSortable(sortableElement)\n}\n\n/* START.TESTS_ONLY */\nsortable.__testing = {\n  // add internal methods here for testing purposes\n  _data: _data,\n  _removeSortableEvents: _removeSortableEvents,\n  _removeItemEvents: _removeItemEvents,\n  _removeItemData: _removeItemData,\n  _removeSortableData: _removeSortableData,\n  _listsConnected: _listsConnected,\n  _attachGhost: _attachGhost,\n  _addGhostPos: _addGhostPos,\n  _getGhost: _getGhost,\n  _getHandles: _getHandles,\n  _makeGhost: _makeGhost,\n  _index: _index,\n  _getPlaceholders: () => placeholderMap,\n  _resetPlaceholders: () => {\n    placeholderMap.clear()\n  }\n}\n/* END.TESTS_ONLY */\n","/* eslint-env browser */\nimport {addData as _data} from './data' // yuk, data really needs to be refactored\nimport filter from './filter'\nimport index from './index'\n/**\n * Filter only wanted nodes\n * @param {Element} sortableContainer\n * @param {Function} customSerializer\n * @returns {Array}\n */\nexport default (sortableContainer: Element, customItemSerializer: Function = (serializedItem: object, sortableContainer: Element) => serializedItem, customContainerSerializer: Function = (serializedContainer: object) => serializedContainer): object => {\n  // check for valid sortableContainer\n  if (!(sortableContainer instanceof Element) || !sortableContainer.isSortable === true) {\n    throw new Error('You need to provide a sortableContainer to be serialized.')\n  }\n  // check for valid serializers\n  if (typeof customItemSerializer !== 'function' || typeof customContainerSerializer !== 'function') {\n    throw new Error('You need to provide a valid serializer for items and the container.')\n  }\n  // get options\n  let options = _data(sortableContainer, 'opts')\n  // serialize container\n  let items = filter(sortableContainer.children, options.items)\n  items = items.map((item) => {\n    return {\n      parent: sortableContainer,\n      node: item,\n      html: item.outerHTML,\n      index: index(item, items)\n    }\n  })\n  // serialize container\n  let container = {\n    node: sortableContainer,\n    itemCount: items.length\n  }\n\n  return {\n    container: customContainerSerializer(container),\n    items: items.map((item: object) => customItemSerializer(item, sortableContainer))\n  }\n}\n","/**\n * Creates and returns a new debounced version of the passed function which will postpone its execution until after wait milliseconds have elapsed\n * @param {func} Function to debounce\n * @param {wait} time to wait before calling function with latest arguments, 0 - no debounce\n * @returns {function} - debounced function\n */\nexport default (func: Function, wait: number = 0): Function => {\n  let timeout\n\n  return (...args) => {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      func(...args)\n    }, wait)\n  }\n}\n"],"names":["element","key","value","undefined","h5s","data","nodes","selector","NodeList","HTMLCollection","Error","Array","from","filter","item","nodeType","matches","event","callback","i","length","addEventListener","events","removeEventListener","attribute","addAttribute","setAttribute","removeAttribute","parentElement","rect","getClientRects","left","window","scrollX","right","top","scrollY","bottom","elementList","Element","indexOf","parentNode","dragging","draggingHeight","insertNode","referenceNode","newElement","position","insertBefore","nextElementSibling","target","insertAfter","sortableContainer","customItemSerializer","customContainerSerializer","serializedItem","serializedContainer","isSortable","options","_data","items","children","map","parent","node","html","outerHTML","index","container","itemCount","startParent","placeholderMap","Map","_removeItemEvents","_off","_removeSortableEvents","sortable","_makePlaceholder","sortableElement","placeholder","placeholderClasses","tempContainer","document","createElement","tagName","innerHTML","classList","add","split","_getGhost","draggedItem","ghost","_makeGhost","dataTransfer","effectAllowed","setData","setDragImage","x","y","_attachGhost","parseInt","pageX","_offset","pageY","_addGhostPos","_getDragging","ditem","_isCopyActive","_attr","cloneNode","appendChild","style","display","oldDisplay","_listsConnected","curList","destList","_isSortable","acceptFrom","sel","copy","_getElementHeight","getComputedStyle","int","getPropertyValue","isNaN","reduce","prev","cur","_getHandles","handle","handles","result","querySelectorAll","concat","prototype","slice","call","itemlist","_filter","ele","contains","_destroySortable","opts","_removeAttr","_removeItemData","_enableSortable","dragDrop","disableIEFix","_on","this","_reloadSortable","sortableElements","method","String","connectWith","placeholderClass","draggingClass","hoverClass","debounce","maxItems","itemSerializer","containerSerializer","option","test","_serialize","forEach","startList","set","hoverClasses_1","e","remove","stopImmediatePropagation","getAttribute","findSortable","dragitem","findDragElement","_index","dispatchEvent","CustomEvent","detail","get","startparent","newParent","oldindex","elementIndex","oldElementIndex","endparent","newEndList","newStartList","oldStartList","preventDefault","stopPropagation","visiblePlaceholder","values","isInDom","_after","func","wait","timeout","debouncedDragOverEnter","forcePlaceholderSize","height","thisHeight","placeholderIndex","thisIndex","deadZone","offsetTop","_before","_i","args","clearTimeout","setTimeout","onDragOverEnter","dropEffect","destroy","enable","disable","_disableSortable"],"mappings":"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"}