{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///wavesurfer.min.js","webpack:///webpack/bootstrap 44474038b37018d9f674","webpack:///./src/util/index.js","webpack:///./src/util/observer.js","webpack:///./src/util/request-animation-frame.js","webpack:///./src/webaudio.js","webpack:///./src/wavesurfer.js","webpack:///./src/util/ajax.js","webpack:///./src/util/get-id.js","webpack:///./src/util/max.js","webpack:///./src/util/min.js","webpack:///./src/util/extend.js","webpack:///./src/util/style.js","webpack:///./src/util/frame.js","webpack:///./node_modules/debounce/index.js","webpack:///./src/drawer.multicanvas.js","webpack:///./src/drawer.js","webpack:///./src/mediaelement.js","webpack:///./src/peakcache.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_interopRequireDefault","obj","default","value","_ajax","_getId","_max","_min","_observer","_extend","_style","_requestAnimationFrame","_frame","_debounce","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","Observer","handlers","event","fn","_this","push","callback","un","e","splice","handler","_this2","_len","arguments","args","Array","_key","apply","setTimeout","on","_len2","_key2","forEach","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","element","bind","_defineProperty","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_util","util","newObj","PLAYING","PAUSED","FINISHED","WebAudio","_util$Observer","params","_this$stateBehaviors","_this$states","getPrototypeOf","audioContext","offlineAudioContext","stateBehaviors","init","addOnAudioProcess","getPlayedPercents","duration","getDuration","getCurrentTime","startPosition","getPlayedTime","removeOnAudioProcess","fireEvent","ac","getAudioContext","lastPlay","currentTime","scheduledPause","states","analyser","buffer","filters","gainNode","mergedPeaks","offlineAc","peaks","playbackRate","scriptNode","source","splitPeaks","state","explicitDuration","AudioContext","webkitAudioContext","WaveSurferAudioContext","sampleRate","WaveSurferOfflineAudioContext","OfflineAudioContext","webkitOfflineAudioContext","createVolumeNode","createScriptNode","createAnalyserNode","setState","setPlaybackRate","audioRate","setLength","filter","disconnect","connect","setFilters","disconnectFilters","reduce","prev","curr","createScriptProcessor","scriptBufferSize","createJavaScriptNode","destination","onaudioprocess","time","pause","createAnalyser","createGain","createGainNode","gain","arraybuffer","errback","getOfflineAudioContext","decodeAudioData","data","channels","numberOfChannels","first","last","newBuffer","createBuffer","sampleSize","sampleStep","chan","getChannelData","start","end","min","max","j","splitChannels","isPaused","unAll","disconnectSource","closeAudioContext","close","createSource","createBufferSource","noteGrainOn","stop","noteOff","adjustedTime","seekTo","resume","play","_drawer","_drawer2","_webaudio","_webaudio2","_mediaelement","_mediaelement2","_peakcache","_peakcache2","WaveSurfer","PluginClass","ws","_ret","defaultParams","autoCenter","backend","barHeight","container","cursorColor","cursorWidth","dragSelection","fillParent","forceDecode","height","hideScrollbar","interact","loopSelection","maxCanvasWidth","mediaContainer","mediaControls","mediaType","minPxPerSec","normalize","partialRender","pixelRatio","devicePixelRatio","screen","deviceXDPI","logicalXDPI","plugins","progressColor","removeMediaElementOnDestroy","renderer","responsive","scrollParent","skipLength","waveColor","backends","MediaElement","extend","document","querySelector","Error","savedVolume","isMuted","tmpEvents","currentAjax","drawer","peakCache","Drawer","Backend","initialisedPluginList","isDestroyed","isReady","prevWidth","_onResize","debounce","wrapper","clientWidth","registerPlugins","createDrawer","createBackend","createPeakCache","plugin","addPlugin","deferInit","initPlugin","_this3","keys","pluginStaticProp","Instance","getOwnPropertyNames","destroyPlugin","destroy","_this4","_this5","addEventListener","drawBuffer","progress","_this6","supportsWebAudio","seconds","_this7","skip","offset","position","Math","seekAndCenter","recenter","_this8","isFinite","console","error","paused","oldScrollParent","newVolume","setVolume","getVolume","rate","getPlaybackRate","setMute","mute","color","updateCursor","setHeight","nominalWidth","round","parentWidth","getWidth","width","getScrollX","newRanges","addRangeToPeakCache","getPeaks","drawPeaks","pxPerSec","_this9","decodeArrayBuffer","loadDecodedBuffer","load","blob","_this10","reader","FileReader","onProgress","loadArrayBuffer","result","readAsArrayBuffer","empty","url","preload","preloadIgnoreReasons","Preload is not 'auto', 'none' or 'metadata'","indexOf","Peaks are not provided","Backend is not of type MediaElement","Url is not of type string","activeReasons","reason","warn","join","loadBuffer","loadMediaElement","_this11","action","once","getArrayBuffer","setPeaks","urlOrElt","_this12","elt","loadElt","src","err","_this13","_this14","ajax","responseType","statusText","percentComplete","lengthComputable","loaded","total","accuracy","noWindow","arr","map","val","json","JSON","stringify","open","encodeURIComponent","format","quality","getImage","xhr","abort","cancelAjax","clearTmpEvents","setWidth","destroyAllPlugins","removeEventListener","options","_observer2","XMLHttpRequest","fired100","method","status","response","send","getId","random","toString","substring","values","largest","Infinity","smallest","Number","dest","sources","style","el","styles","prop","frame","func","_requestAnimationFrame2","wait","immediate","later","Date","now","timestamp","timeout","context","debounced","callNow","clear","clearTimeout","flush","MultiCanvas","_Drawer","maxCanvasElementWidth","hasProgressCanvas","halfPixel","canvases","progressWave","createWrapper","createElements","appendChild","createElement","zIndex","left","top","bottom","overflow","display","boxSizing","borderRightStyle","pointerEvents","addCanvas","borderRightWidth","borderRightColor","totalWidth","requiredCanvases","ceil","removeCanvas","entry","canvasWidth","updateDimensions","clearWaveForEntry","leftOffset","wave","waveCtx","getContext","progressCtx","lastEntry","pop","parentElement","removeChild","elementWidth","canvas","offsetLeft","clearRect","channelIndex","prepareDraw","_ref","absmax","hasMinVals","offsetY","halfH","undefined","peakIndexScale","bar","barWidth","gap","step","scale","peak","floor","h","fillRect","_ref2","reflectedPeaks","len","drawLine","setFillStyles","drawLineToContext","ctx","canvasStart","canvasEnd","beginPath","moveTo","lineTo","closePath","fill","x","y","startCanvas","endCanvas","intersection","x1","y1","x2","y2","fillRectToContext","channelPeaks","some","fillStyle","type","images","toDataURL","lastPos","userSelect","webkitUserSelect","overflowX","overflowY","setupWrapperEvents","noPrevent","preventDefault","clientX","targetTouches","bbox","getBoundingClientRect","scrollLeft","scrollWidth","scrollbarHeight","offsetHeight","clientHeight","clientY","handleEvent","clearWave","drawBars","drawWave","percent","recenterOnPosition","half","maxScroll","updateSize","minPxDelta","pos","newPos","updateProgress","parentNode","_get","receiver","Function","desc","getOwnPropertyDescriptor","parent","_WebAudio","media","toLowerCase","elementPosition","onPlayEnd","createTimer","onAudioProcess","controls","autoplay","prevMedia","_load","seekable","clearPlayEnd","setPlayEnd","_onPlayEnd","volume","PeakCache","clearPeakCache","peakCacheRanges","peakCacheLength","uncachedRanges","item","concat","sort","a","b","uncachedRangePairs","peakCacheRangePairs"],"mappings":"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","file":"wavesurfer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 4);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ajax = __webpack_require__(5);\n\nObject.defineProperty(exports, 'ajax', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ajax).default;\n  }\n});\n\nvar _getId = __webpack_require__(6);\n\nObject.defineProperty(exports, 'getId', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_getId).default;\n  }\n});\n\nvar _max = __webpack_require__(7);\n\nObject.defineProperty(exports, 'max', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_max).default;\n  }\n});\n\nvar _min = __webpack_require__(8);\n\nObject.defineProperty(exports, 'min', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_min).default;\n  }\n});\n\nvar _observer = __webpack_require__(1);\n\nObject.defineProperty(exports, 'Observer', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_observer).default;\n  }\n});\n\nvar _extend = __webpack_require__(9);\n\nObject.defineProperty(exports, 'extend', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_extend).default;\n  }\n});\n\nvar _style = __webpack_require__(10);\n\nObject.defineProperty(exports, 'style', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_style).default;\n  }\n});\n\nvar _requestAnimationFrame = __webpack_require__(2);\n\nObject.defineProperty(exports, 'requestAnimationFrame', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_requestAnimationFrame).default;\n  }\n});\n\nvar _frame = __webpack_require__(11);\n\nObject.defineProperty(exports, 'frame', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_frame).default;\n  }\n});\n\nvar _debounce = __webpack_require__(12);\n\nObject.defineProperty(exports, 'debounce', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_debounce).default;\n  }\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n\n/**\n * Observer class\n */\nvar Observer = function () {\n    /**\n     * Instantiate Observer\n     */\n    function Observer() {\n        _classCallCheck(this, Observer);\n\n        /**\n         * @private\n         * @todo Initialise the handlers here already and remove the conditional\n         * assignment in `on()`\n         */\n        this.handlers = null;\n    }\n    /**\n     * Attach a handler function for an event.\n     *\n     * @param {string} event Name of the event to listen to\n     * @param {function} fn The callback to trigger when the event is fired\n     * @return {ListenerDescriptor}\n     */\n\n\n    _createClass(Observer, [{\n        key: \"on\",\n        value: function on(event, fn) {\n            var _this = this;\n\n            if (!this.handlers) {\n                this.handlers = {};\n            }\n\n            var handlers = this.handlers[event];\n            if (!handlers) {\n                handlers = this.handlers[event] = [];\n            }\n            handlers.push(fn);\n\n            // Return an event descriptor\n            return {\n                name: event,\n                callback: fn,\n                un: function un(e, fn) {\n                    return _this.un(e, fn);\n                }\n            };\n        }\n\n        /**\n         * Remove an event handler.\n         *\n         * @param {string} event Name of the event the listener that should be\n         * removed listens to\n         * @param {function} fn The callback that should be removed\n         */\n\n    }, {\n        key: \"un\",\n        value: function un(event, fn) {\n            if (!this.handlers) {\n                return;\n            }\n\n            var handlers = this.handlers[event];\n            var i = void 0;\n            if (handlers) {\n                if (fn) {\n                    for (i = handlers.length - 1; i >= 0; i--) {\n                        if (handlers[i] == fn) {\n                            handlers.splice(i, 1);\n                        }\n                    }\n                } else {\n                    handlers.length = 0;\n                }\n            }\n        }\n\n        /**\n         * Remove all event handlers.\n         */\n\n    }, {\n        key: \"unAll\",\n        value: function unAll() {\n            this.handlers = null;\n        }\n\n        /**\n         * Attach a handler to an event. The handler is executed at most once per\n         * event type.\n         *\n         * @param {string} event The event to listen to\n         * @param {function} handler The callback that is only to be called once\n         * @return {ListenerDescriptor}\n         */\n\n    }, {\n        key: \"once\",\n        value: function once(event, handler) {\n            var _this2 = this;\n\n            var fn = function fn() {\n                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = arguments[_key];\n                }\n\n                /*  eslint-disable no-invalid-this */\n                handler.apply(_this2, args);\n                /*  eslint-enable no-invalid-this */\n                setTimeout(function () {\n                    _this2.un(event, fn);\n                }, 0);\n            };\n            return this.on(event, fn);\n        }\n\n        /**\n         * Manually fire an event\n         *\n         * @param {string} event The event to fire manually\n         * @param {...any} args The arguments with which to call the listeners\n         */\n\n    }, {\n        key: \"fireEvent\",\n        value: function fireEvent(event) {\n            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                args[_key2 - 1] = arguments[_key2];\n            }\n\n            if (!this.handlers) {\n                return;\n            }\n            var handlers = this.handlers[event];\n            handlers && handlers.forEach(function (fn) {\n                fn.apply(undefined, args);\n            });\n        }\n    }]);\n\n    return Observer;\n}();\n\nexports.default = Observer;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\n/**\n * Returns the requestAnimationFrame function for the browser, or a shim with\n * setTimeout if none is found\n *\n * @return {function}\n */\nexports.default = (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback, element) {\n    return setTimeout(callback, 1000 / 60);\n}).bind(window);\n\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _util = __webpack_require__(0);\n\nvar util = _interopRequireWildcard(_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// using consts to prevent someone writing the string wrong\nvar PLAYING = 'playing';\nvar PAUSED = 'paused';\nvar FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {Observer}\n */\n\nvar WebAudio = function (_util$Observer) {\n    _inherits(WebAudio, _util$Observer);\n\n    _createClass(WebAudio, [{\n        key: 'supportsWebAudio',\n\n\n        /**\n         * Does the browser support this backend\n         *\n         * @return {boolean}\n         */\n\n        /** @private */\n\n        /** @private */\n        value: function supportsWebAudio() {\n            return !!(window.AudioContext || window.webkitAudioContext);\n        }\n\n        /**\n         * Get the audio context used by this backend or create one\n         *\n         * @return {AudioContext}\n         */\n\n        /** @private */\n\n        /** @private */\n\n    }, {\n        key: 'getAudioContext',\n        value: function getAudioContext() {\n            if (!window.WaveSurferAudioContext) {\n                window.WaveSurferAudioContext = new (window.AudioContext || window.webkitAudioContext)();\n            }\n            return window.WaveSurferAudioContext;\n        }\n\n        /**\n         * Get the offline audio context used by this backend or create one\n         *\n         * @param {number} sampleRate\n         * @return {OfflineAudioContext}\n         */\n\n    }, {\n        key: 'getOfflineAudioContext',\n        value: function getOfflineAudioContext(sampleRate) {\n            if (!window.WaveSurferOfflineAudioContext) {\n                window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext || window.webkitOfflineAudioContext)(1, 2, sampleRate);\n            }\n            return window.WaveSurferOfflineAudioContext;\n        }\n\n        /**\n         * Construct the backend\n         *\n         * @param {WavesurferParams} params\n         */\n\n    }]);\n\n    function WebAudio(params) {\n        var _this$stateBehaviors, _this$states;\n\n        _classCallCheck(this, WebAudio);\n\n        /** @private */\n        var _this = _possibleConstructorReturn(this, (WebAudio.__proto__ || Object.getPrototypeOf(WebAudio)).call(this));\n\n        _this.audioContext = null;\n        _this.offlineAudioContext = null;\n        _this.stateBehaviors = (_this$stateBehaviors = {}, _defineProperty(_this$stateBehaviors, PLAYING, {\n            init: function init() {\n                this.addOnAudioProcess();\n            },\n            getPlayedPercents: function getPlayedPercents() {\n                var duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime: function getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n            }\n        }), _defineProperty(_this$stateBehaviors, PAUSED, {\n            init: function init() {\n                this.removeOnAudioProcess();\n            },\n            getPlayedPercents: function getPlayedPercents() {\n                var duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime: function getCurrentTime() {\n                return this.startPosition;\n            }\n        }), _defineProperty(_this$stateBehaviors, FINISHED, {\n            init: function init() {\n                this.removeOnAudioProcess();\n                this.fireEvent('finish');\n            },\n            getPlayedPercents: function getPlayedPercents() {\n                return 1;\n            },\n            getCurrentTime: function getCurrentTime() {\n                return this.getDuration();\n            }\n        }), _this$stateBehaviors);\n        _this.params = params;\n        /** @private */\n        _this.ac = params.audioContext || _this.getAudioContext();\n        /**@private */\n        _this.lastPlay = _this.ac.currentTime;\n        /** @private */\n        _this.startPosition = 0;\n        /** @private  */\n        _this.scheduledPause = null;\n        /** @private */\n        _this.states = (_this$states = {}, _defineProperty(_this$states, PLAYING, Object.create(_this.stateBehaviors[PLAYING])), _defineProperty(_this$states, PAUSED, Object.create(_this.stateBehaviors[PAUSED])), _defineProperty(_this$states, FINISHED, Object.create(_this.stateBehaviors[FINISHED])), _this$states);\n        /** @private */\n        _this.analyser = null;\n        /** @private */\n        _this.buffer = null;\n        /** @private */\n        _this.filters = [];\n        /** @private */\n        _this.gainNode = null;\n        /** @private */\n        _this.mergedPeaks = null;\n        /** @private */\n        _this.offlineAc = null;\n        /** @private */\n        _this.peaks = null;\n        /** @private */\n        _this.playbackRate = 1;\n        /** @private */\n        _this.analyser = null;\n        /** @private */\n        _this.scriptNode = null;\n        /** @private */\n        _this.source = null;\n        /** @private */\n        _this.splitPeaks = [];\n        /** @private */\n        _this.state = null;\n        /** @private */\n        _this.explicitDuration = null;\n        return _this;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n\n\n    _createClass(WebAudio, [{\n        key: 'init',\n        value: function init() {\n            this.createVolumeNode();\n            this.createScriptNode();\n            this.createAnalyserNode();\n\n            this.setState(PAUSED);\n            this.setPlaybackRate(this.params.audioRate);\n            this.setLength(0);\n        }\n\n        /** @private */\n\n    }, {\n        key: 'disconnectFilters',\n        value: function disconnectFilters() {\n            if (this.filters) {\n                this.filters.forEach(function (filter) {\n                    filter && filter.disconnect();\n                });\n                this.filters = null;\n                // Reconnect direct path\n                this.analyser.connect(this.gainNode);\n            }\n        }\n\n        /** @private */\n\n    }, {\n        key: 'setState',\n        value: function setState(state) {\n            if (this.state !== this.states[state]) {\n                this.state = this.states[state];\n                this.state.init.call(this);\n            }\n        }\n\n        /**\n         * Unpacked `setFilters()`\n         *\n         * @param {...AudioNode} filters\n         */\n\n    }, {\n        key: 'setFilter',\n        value: function setFilter() {\n            for (var _len = arguments.length, filters = Array(_len), _key = 0; _key < _len; _key++) {\n                filters[_key] = arguments[_key];\n            }\n\n            this.setFilters(filters);\n        }\n\n        /**\n         * Insert custom Web Audio nodes into the graph\n         *\n         * @param {AudioNode[]} filters Packed filters array\n         * @example\n         * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n         * wavesurfer.backend.setFilter(lowpass);\n         */\n\n    }, {\n        key: 'setFilters',\n        value: function setFilters(filters) {\n            // Remove existing filters\n            this.disconnectFilters();\n\n            // Insert filters if filter array not empty\n            if (filters && filters.length) {\n                this.filters = filters;\n\n                // Disconnect direct path before inserting filters\n                this.analyser.disconnect();\n\n                // Connect each filter in turn\n                filters.reduce(function (prev, curr) {\n                    prev.connect(curr);\n                    return curr;\n                }, this.analyser).connect(this.gainNode);\n            }\n        }\n\n        /** @private */\n\n    }, {\n        key: 'createScriptNode',\n        value: function createScriptNode() {\n            if (this.ac.createScriptProcessor) {\n                this.scriptNode = this.ac.createScriptProcessor(WebAudio.scriptBufferSize);\n            } else {\n                this.scriptNode = this.ac.createJavaScriptNode(WebAudio.scriptBufferSize);\n            }\n\n            this.scriptNode.connect(this.ac.destination);\n        }\n\n        /** @private */\n\n    }, {\n        key: 'addOnAudioProcess',\n        value: function addOnAudioProcess() {\n            var _this2 = this;\n\n            this.scriptNode.onaudioprocess = function () {\n                var time = _this2.getCurrentTime();\n\n                if (time >= _this2.getDuration()) {\n                    _this2.setState(FINISHED);\n                    _this2.fireEvent('pause');\n                } else if (time >= _this2.scheduledPause) {\n                    _this2.pause();\n                } else if (_this2.state === _this2.states[PLAYING]) {\n                    _this2.fireEvent('audioprocess', time);\n                }\n            };\n        }\n\n        /** @private */\n\n    }, {\n        key: 'removeOnAudioProcess',\n        value: function removeOnAudioProcess() {\n            this.scriptNode.onaudioprocess = null;\n        }\n\n        /** @private */\n\n    }, {\n        key: 'createAnalyserNode',\n        value: function createAnalyserNode() {\n            this.analyser = this.ac.createAnalyser();\n            this.analyser.connect(this.gainNode);\n        }\n\n        /**\n         * Create the gain node needed to control the playback volume.\n         *\n         * @private\n         */\n\n    }, {\n        key: 'createVolumeNode',\n        value: function createVolumeNode() {\n            // Create gain node using the AudioContext\n            if (this.ac.createGain) {\n                this.gainNode = this.ac.createGain();\n            } else {\n                this.gainNode = this.ac.createGainNode();\n            }\n            // Add the gain node to the graph\n            this.gainNode.connect(this.ac.destination);\n        }\n\n        /**\n         * Set the audio volume\n         *\n         * @param {number} value A floating point value between 0 and 1.\n         */\n\n    }, {\n        key: 'setVolume',\n        value: function setVolume(value) {\n            this.gainNode.gain.value = value;\n        }\n\n        /**\n         * Get the current volume\n         *\n         * @return {number} value A floating point value between 0 and 1.\n         */\n\n    }, {\n        key: 'getVolume',\n        value: function getVolume() {\n            return this.gainNode.gain.value;\n        }\n\n        /** @private */\n\n    }, {\n        key: 'decodeArrayBuffer',\n        value: function decodeArrayBuffer(arraybuffer, callback, errback) {\n            if (!this.offlineAc) {\n                this.offlineAc = this.getOfflineAudioContext(this.ac ? this.ac.sampleRate : 44100);\n            }\n            this.offlineAc.decodeAudioData(arraybuffer, function (data) {\n                return callback(data);\n            }, errback);\n        }\n\n        /**\n         * Set pre-decoded peaks\n         *\n         * @param {number[]|number[][]} peaks\n         * @param {?number} duration\n         */\n\n    }, {\n        key: 'setPeaks',\n        value: function setPeaks(peaks, duration) {\n            this.explicitDuration = duration;\n            this.peaks = peaks;\n        }\n\n        /**\n         * Set the rendered length (different from the length of the audio).\n         *\n         * @param {number} length\n         */\n\n    }, {\n        key: 'setLength',\n        value: function setLength(length) {\n            // No resize, we can preserve the cached peaks.\n            if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n                return;\n            }\n\n            this.splitPeaks = [];\n            this.mergedPeaks = [];\n            // Set the last element of the sparse array so the peak arrays are\n            // appropriately sized for other calculations.\n            var channels = this.buffer ? this.buffer.numberOfChannels : 1;\n            var c = void 0;\n            for (c = 0; c < channels; c++) {\n                this.splitPeaks[c] = [];\n                this.splitPeaks[c][2 * (length - 1)] = 0;\n                this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n            }\n            this.mergedPeaks[2 * (length - 1)] = 0;\n            this.mergedPeaks[2 * (length - 1) + 1] = 0;\n        }\n\n        /**\n         * Compute the max and min value of the waveform when broken into <length> subranges.\n         *\n         * @param {number} length How many subranges to break the waveform into.\n         * @param {number} first First sample in the required range.\n         * @param {number} last Last sample in the required range.\n         * @return {number[]|number[][]} Array of 2*<length> peaks or array of arrays of\n         * peaks consisting of (max, min) values for each subrange.\n         */\n\n    }, {\n        key: 'getPeaks',\n        value: function getPeaks(length, first, last) {\n            if (this.peaks) {\n                return this.peaks;\n            }\n\n            first = first || 0;\n            last = last || length - 1;\n\n            this.setLength(length);\n\n            /**\n             * The following snippet fixes a buffering data issue on the Safari\n             * browser which returned undefined It creates the missing buffer based\n             * on 1 channel, 4096 samples and the sampleRate from the current\n             * webaudio context 4096 samples seemed to be the best fit for rendering\n             * will review this code once a stable version of Safari TP is out\n             */\n            if (!this.buffer.length) {\n                var newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n                this.buffer = newBuffer.buffer;\n            }\n\n            var sampleSize = this.buffer.length / length;\n            var sampleStep = ~~(sampleSize / 10) || 1;\n            var channels = this.buffer.numberOfChannels;\n            var c = void 0;\n\n            for (c = 0; c < channels; c++) {\n                var peaks = this.splitPeaks[c];\n                var chan = this.buffer.getChannelData(c);\n                var i = void 0;\n\n                for (i = first; i <= last; i++) {\n                    var start = ~~(i * sampleSize);\n                    var end = ~~(start + sampleSize);\n                    var min = 0;\n                    var max = 0;\n                    var j = void 0;\n\n                    for (j = start; j < end; j += sampleStep) {\n                        var value = chan[j];\n\n                        if (value > max) {\n                            max = value;\n                        }\n\n                        if (value < min) {\n                            min = value;\n                        }\n                    }\n\n                    peaks[2 * i] = max;\n                    peaks[2 * i + 1] = min;\n\n                    if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                        this.mergedPeaks[2 * i] = max;\n                    }\n\n                    if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                        this.mergedPeaks[2 * i + 1] = min;\n                    }\n                }\n            }\n\n            return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n        }\n\n        /**\n         * Get the position from 0 to 1\n         *\n         * @return {number}\n         */\n\n    }, {\n        key: 'getPlayedPercents',\n        value: function getPlayedPercents() {\n            return this.state.getPlayedPercents.call(this);\n        }\n\n        /** @private */\n\n    }, {\n        key: 'disconnectSource',\n        value: function disconnectSource() {\n            if (this.source) {\n                this.source.disconnect();\n            }\n        }\n\n        /**\n         * This is called when wavesurfer is destroyed\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            if (!this.isPaused()) {\n                this.pause();\n            }\n            this.unAll();\n            this.buffer = null;\n            this.disconnectFilters();\n            this.disconnectSource();\n            this.gainNode.disconnect();\n            this.scriptNode.disconnect();\n            this.analyser.disconnect();\n\n            // close the audioContext if closeAudioContext option is set to true\n            if (this.params.closeAudioContext) {\n                // check if browser supports AudioContext.close()\n                if (typeof this.ac.close === 'function' && this.ac.state != 'closed') {\n                    this.ac.close();\n                }\n                // clear the reference to the audiocontext\n                this.ac = null;\n                // clear the actual audiocontext, either passed as param or the\n                // global singleton\n                if (!this.params.audioContext) {\n                    window.WaveSurferAudioContext = null;\n                } else {\n                    this.params.audioContext = null;\n                }\n                // clear the offlineAudioContext\n                window.WaveSurferOfflineAudioContext = null;\n            }\n        }\n\n        /**\n         * Loaded a decoded audio buffer\n         *\n         * @param {Object} buffer\n         */\n\n    }, {\n        key: 'load',\n        value: function load(buffer) {\n            this.startPosition = 0;\n            this.lastPlay = this.ac.currentTime;\n            this.buffer = buffer;\n            this.createSource();\n        }\n\n        /** @private */\n\n    }, {\n        key: 'createSource',\n        value: function createSource() {\n            this.disconnectSource();\n            this.source = this.ac.createBufferSource();\n\n            //adjust for old browsers.\n            this.source.start = this.source.start || this.source.noteGrainOn;\n            this.source.stop = this.source.stop || this.source.noteOff;\n\n            this.source.playbackRate.value = this.playbackRate;\n            this.source.buffer = this.buffer;\n            this.source.connect(this.analyser);\n        }\n\n        /**\n         * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n         *\n         * @return {boolean}\n         */\n\n    }, {\n        key: 'isPaused',\n        value: function isPaused() {\n            return this.state !== this.states[PLAYING];\n        }\n\n        /**\n         * Used by `wavesurfer.getDuration()`\n         *\n         * @return {number}\n         */\n\n    }, {\n        key: 'getDuration',\n        value: function getDuration() {\n            if (!this.buffer) {\n                if (this.explicitDuration) {\n                    return this.explicitDuration;\n                }\n                return 0;\n            }\n            return this.buffer.duration;\n        }\n\n        /**\n         * Used by `wavesurfer.seekTo()`\n         *\n         * @param {number} start Position to start at in seconds\n         * @param {number} end Position to end at in seconds\n         * @return {{start: number, end: number}}\n         */\n\n    }, {\n        key: 'seekTo',\n        value: function seekTo(start, end) {\n            if (!this.buffer) {\n                return;\n            }\n\n            this.scheduledPause = null;\n\n            if (start == null) {\n                start = this.getCurrentTime();\n                if (start >= this.getDuration()) {\n                    start = 0;\n                }\n            }\n            if (end == null) {\n                end = this.getDuration();\n            }\n\n            this.startPosition = start;\n            this.lastPlay = this.ac.currentTime;\n\n            if (this.state === this.states[FINISHED]) {\n                this.setState(PAUSED);\n            }\n\n            return {\n                start: start,\n                end: end\n            };\n        }\n\n        /**\n         * Get the playback position in seconds\n         *\n         * @return {number}\n         */\n\n    }, {\n        key: 'getPlayedTime',\n        value: function getPlayedTime() {\n            return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n        }\n\n        /**\n         * Plays the loaded audio region.\n         *\n         * @param {number} start Start offset in seconds, relative to the beginning\n         * of a clip.\n         * @param {number} end When to stop relative to the beginning of a clip.\n         */\n\n    }, {\n        key: 'play',\n        value: function play(start, end) {\n            if (!this.buffer) {\n                return;\n            }\n\n            // need to re-create source on each playback\n            this.createSource();\n\n            var adjustedTime = this.seekTo(start, end);\n\n            start = adjustedTime.start;\n            end = adjustedTime.end;\n\n            this.scheduledPause = end;\n\n            this.source.start(0, start, end - start);\n\n            if (this.ac.state == 'suspended') {\n                this.ac.resume && this.ac.resume();\n            }\n\n            this.setState(PLAYING);\n\n            this.fireEvent('play');\n        }\n\n        /**\n         * Pauses the loaded audio.\n         */\n\n    }, {\n        key: 'pause',\n        value: function pause() {\n            this.scheduledPause = null;\n\n            this.startPosition += this.getPlayedTime();\n            this.source && this.source.stop(0);\n\n            this.setState(PAUSED);\n\n            this.fireEvent('pause');\n        }\n\n        /**\n         * Returns the current time in seconds relative to the audioclip's\n         * duration.\n         *\n         * @return {number}\n         */\n\n    }, {\n        key: 'getCurrentTime',\n        value: function getCurrentTime() {\n            return this.state.getCurrentTime.call(this);\n        }\n\n        /**\n         * Returns the current playback rate. (0=no playback, 1=normal playback)\n         *\n         * @return {number}\n         */\n\n    }, {\n        key: 'getPlaybackRate',\n        value: function getPlaybackRate() {\n            return this.playbackRate;\n        }\n\n        /**\n         * Set the audio source playback rate.\n         *\n         * @param {number} value\n         */\n\n    }, {\n        key: 'setPlaybackRate',\n        value: function setPlaybackRate(value) {\n            value = value || 1;\n            if (this.isPaused()) {\n                this.playbackRate = value;\n            } else {\n                this.pause();\n                this.playbackRate = value;\n                this.play();\n            }\n        }\n    }]);\n\n    return WebAudio;\n}(util.Observer);\n\nWebAudio.scriptBufferSize = 256;\nexports.default = WebAudio;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _util = __webpack_require__(0);\n\nvar util = _interopRequireWildcard(_util);\n\nvar _drawer = __webpack_require__(13);\n\nvar _drawer2 = _interopRequireDefault(_drawer);\n\nvar _webaudio = __webpack_require__(3);\n\nvar _webaudio2 = _interopRequireDefault(_webaudio);\n\nvar _mediaelement = __webpack_require__(15);\n\nvar _mediaelement2 = _interopRequireDefault(_mediaelement);\n\nvar _peakcache = __webpack_require__(16);\n\nvar _peakcache2 = _interopRequireDefault(_peakcache);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform around the progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for\n * unsupported browsers.\n * @property {number} barHeight=1 The height of the wave\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement`)\n * `'audio'|'video'`\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor.\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with seperate waveforms for\n * the channels of the audio\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n */\n\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nvar PluginClass = function () {\n    _createClass(PluginClass, [{\n        key: 'create',\n\n        /**\n         * Plugin definition factory\n         *\n         * This function must be used to create a plugin definition which can be\n         * used by wavesurfer to correctly instantiate the plugin.\n         *\n         * @param  {Object} params={} The plugin params (specific to the plugin)\n         * @return {PluginDefinition} an object representing the plugin\n         */\n        value: function create(params) {}\n        /**\n         * Construct the plugin\n         *\n         * @param {Object} ws The wavesurfer instance\n         * @param {Object} params={} The plugin params (specific to the plugin)\n         */\n\n    }]);\n\n    function PluginClass(ws, params) {\n        _classCallCheck(this, PluginClass);\n    }\n    /**\n     * Initialise the plugin\n     *\n     * Start doing something. This is called by\n     * `wavesurfer.initPlugin(pluginName)`\n     */\n\n\n    _createClass(PluginClass, [{\n        key: 'init',\n        value: function init() {}\n        /**\n         * Destroy the plugin instance\n         *\n         * Stop doing something. This is called by\n         * `wavesurfer.destroyPlugin(pluginName)`\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {}\n    }]);\n\n    return PluginClass;\n}();\n\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\n\n\nvar WaveSurfer = function (_util$Observer) {\n    _inherits(WaveSurfer, _util$Observer);\n\n    _createClass(WaveSurfer, null, [{\n        key: 'create',\n\n\n        /**\n         * Instantiate this class, call its `init` function and returns it\n         *\n         * @param {WavesurferParams} params\n         * @return {Object} WaveSurfer instance\n         * @example const wavesurfer = WaveSurfer.create(params);\n         */\n\n        /** @private */\n        value: function create(params) {\n            var wavesurfer = new WaveSurfer(params);\n            return wavesurfer.init();\n        }\n\n        /**\n         * Functions in the `util` property are available as a prototype property to\n         * all instances\n         *\n         * @type {Object}\n         * @example\n         * const wavesurfer = WaveSurfer.create(params);\n         * wavesurfer.util.style(myElement, { background: 'blue' });\n         */\n\n\n        /** @private */\n\n\n        /**\n         * Functions in the `util` property are available as a static property of the\n         * WaveSurfer class\n         *\n         * @type {Object}\n         * @example\n         * WaveSurfer.util.style(myElement, { background: 'blue' });\n         */\n\n    }]);\n\n    /**\n     * Initialise wavesurfer instance\n     *\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\n     * @example\n     * const wavesurfer = new WaveSurfer(params);\n     * @returns {this}\n     */\n    function WaveSurfer(params) {\n        var _ret;\n\n        _classCallCheck(this, WaveSurfer);\n\n        /**\n         * Extract relevant parameters (or defaults)\n         * @private\n         */\n        var _this = _possibleConstructorReturn(this, (WaveSurfer.__proto__ || Object.getPrototypeOf(WaveSurfer)).call(this));\n\n        _this.defaultParams = {\n            audioContext: null,\n            audioRate: 1,\n            autoCenter: true,\n            backend: 'WebAudio',\n            barHeight: 1,\n            container: null,\n            cursorColor: '#333',\n            cursorWidth: 1,\n            dragSelection: true,\n            fillParent: true,\n            forceDecode: false,\n            height: 128,\n            hideScrollbar: false,\n            interact: true,\n            loopSelection: true,\n            maxCanvasWidth: 4000,\n            mediaContainer: null,\n            mediaControls: false,\n            mediaType: 'audio',\n            minPxPerSec: 20,\n            normalize: false,\n            partialRender: false,\n            pixelRatio: window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n            plugins: [],\n            progressColor: '#555',\n            removeMediaElementOnDestroy: true,\n            renderer: _drawer2.default,\n            responsive: false,\n            scrollParent: false,\n            skipLength: 2,\n            splitChannels: false,\n            waveColor: '#999'\n        };\n        _this.backends = {\n            MediaElement: _mediaelement2.default,\n            WebAudio: _webaudio2.default\n        };\n        _this.util = util;\n        _this.params = util.extend({}, _this.defaultParams, params);\n\n        /** @private */\n        _this.container = 'string' == typeof params.container ? document.querySelector(_this.params.container) : _this.params.container;\n\n        if (!_this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (_this.params.mediaContainer == null) {\n            /** @private */\n            _this.mediaContainer = _this.container;\n        } else if (typeof _this.params.mediaContainer == 'string') {\n            /** @private */\n            _this.mediaContainer = document.querySelector(_this.params.mediaContainer);\n        } else {\n            /** @private */\n            _this.mediaContainer = _this.params.mediaContainer;\n        }\n\n        if (!_this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        if (_this.params.maxCanvasWidth <= 1) {\n            throw new Error('maxCanvasWidth must be greater than 1');\n        } else if (_this.params.maxCanvasWidth % 2 == 1) {\n            throw new Error('maxCanvasWidth must be an even number');\n        }\n\n        /**\n         * @private Used to save the current volume when muting so we can\n         * restore once unmuted\n         * @type {number}\n         */\n        _this.savedVolume = 0;\n\n        /**\n         * @private The current muted state\n         * @type {boolean}\n         */\n        _this.isMuted = false;\n\n        /**\n         * @private Will hold a list of event descriptors that need to be\n         * cancelled on subsequent loads of audio\n         * @type {Object[]}\n         */\n        _this.tmpEvents = [];\n\n        /**\n         * @private Holds any running audio downloads\n         * @type {Observer}\n         */\n        _this.currentAjax = null;\n        /** @private */\n        _this.arraybuffer = null;\n        /** @private */\n        _this.drawer = null;\n        /** @private */\n        _this.backend = null;\n        /** @private */\n        _this.peakCache = null;\n\n        // cache constructor objects\n        if (typeof _this.params.renderer !== 'function') {\n            throw new Error('Renderer parameter is invalid');\n        }\n        /**\n         * @private The uninitialised Drawer class\n         */\n        _this.Drawer = _this.params.renderer;\n        /**\n         * @private The uninitialised Backend class\n         */\n        _this.Backend = _this.backends[_this.params.backend];\n\n        /**\n         * @private map of plugin names that are currently initialised\n         */\n        _this.initialisedPluginList = {};\n        /** @private */\n        _this.isDestroyed = false;\n        /** @private */\n        _this.isReady = false;\n\n        // responsive debounced event listener. If this.params.responsive is not\n        // set, this is never called. Use 100ms or this.params.responsive as\n        // timeout for the debounce function.\n        var prevWidth = 0;\n        _this._onResize = util.debounce(function () {\n            if (prevWidth != _this.drawer.wrapper.clientWidth && !_this.params.scrollParent) {\n                prevWidth = _this.drawer.wrapper.clientWidth;\n                _this.drawer.fireEvent('redraw');\n            }\n        }, typeof _this.params.responsive === 'number' ? _this.params.responsive : 100);\n\n        return _ret = _this, _possibleConstructorReturn(_this, _ret);\n    }\n\n    /**\n     * Initialise the wave\n     *\n     * @example\n     * var wavesurfer = new WaveSurfer(params);\n     * wavesurfer.init();\n     * @return {this}\n     */\n\n\n    _createClass(WaveSurfer, [{\n        key: 'init',\n        value: function init() {\n            this.registerPlugins(this.params.plugins);\n            this.createDrawer();\n            this.createBackend();\n            this.createPeakCache();\n            return this;\n        }\n\n        /**\n         * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n         * this function is called in the init function of wavesurfer\n         *\n         * @param {PluginDefinition[]} plugins An array of plugin definitions\n         * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n         * @return {this}\n         */\n\n    }, {\n        key: 'registerPlugins',\n        value: function registerPlugins(plugins) {\n            var _this2 = this;\n\n            // first instantiate all the plugins\n            plugins.forEach(function (plugin) {\n                return _this2.addPlugin(plugin);\n            });\n\n            // now run the init functions\n            plugins.forEach(function (plugin) {\n                // call init function of the plugin if deferInit is falsey\n                // in that case you would manually use initPlugins()\n                if (!plugin.deferInit) {\n                    _this2.initPlugin(plugin.name);\n                }\n            });\n            this.fireEvent('plugins-registered', plugins);\n            return this;\n        }\n\n        /**\n         * Add a plugin object to wavesurfer\n         *\n         * @param {PluginDefinition} plugin A plugin definition\n         * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n         * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n         * @return {this}\n         */\n\n    }, {\n        key: 'addPlugin',\n        value: function addPlugin(plugin) {\n            var _this3 = this;\n\n            if (!plugin.name) {\n                throw new Error('Plugin does not have a name!');\n            }\n            if (!plugin.instance) {\n                throw new Error('Plugin ' + plugin.name + ' does not have an instance property!');\n            }\n\n            // staticProps properties are applied to wavesurfer instance\n            if (plugin.staticProps) {\n                Object.keys(plugin.staticProps).forEach(function (pluginStaticProp) {\n                    /**\n                     * Properties defined in a plugin definition's `staticProps` property are added as\n                     * staticProps properties of the WaveSurfer instance\n                     */\n                    _this3[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n                });\n            }\n\n            var Instance = plugin.instance;\n\n            // turn the plugin instance into an observer\n            var observerPrototypeKeys = Object.getOwnPropertyNames(util.Observer.prototype);\n            observerPrototypeKeys.forEach(function (key) {\n                Instance.prototype[key] = util.Observer.prototype[key];\n            });\n\n            /**\n             * Instantiated plugin classes are added as a property of the wavesurfer\n             * instance\n             * @type {Object}\n             */\n            this[plugin.name] = new Instance(plugin.params || {}, this);\n            this.fireEvent('plugin-added', plugin.name);\n            return this;\n        }\n\n        /**\n         * Initialise a plugin\n         *\n         * @param {string} name A plugin name\n         * @emits WaveSurfer#plugin-initialised\n         * @example wavesurfer.initPlugin('minimap');\n         * @return {this}\n         */\n\n    }, {\n        key: 'initPlugin',\n        value: function initPlugin(name) {\n            if (!this[name]) {\n                throw new Error('Plugin ' + name + ' has not been added yet!');\n            }\n            if (this.initialisedPluginList[name]) {\n                // destroy any already initialised plugins\n                this.destroyPlugin(name);\n            }\n            this[name].init();\n            this.initialisedPluginList[name] = true;\n            this.fireEvent('plugin-initialised', name);\n            return this;\n        }\n\n        /**\n         * Destroy a plugin\n         *\n         * @param {string} name A plugin name\n         * @emits WaveSurfer#plugin-destroyed\n         * @example wavesurfer.destroyPlugin('minimap');\n         * @returns {this}\n         */\n\n    }, {\n        key: 'destroyPlugin',\n        value: function destroyPlugin(name) {\n            if (!this[name]) {\n                throw new Error('Plugin ' + name + ' has not been added yet and cannot be destroyed!');\n            }\n            if (!this.initialisedPluginList[name]) {\n                throw new Error('Plugin ' + name + ' is not active and cannot be destroyed!');\n            }\n            if (typeof this[name].destroy !== 'function') {\n                throw new Error('Plugin ' + name + ' does not have a destroy function!');\n            }\n\n            this[name].destroy();\n            delete this.initialisedPluginList[name];\n            this.fireEvent('plugin-destroyed', name);\n            return this;\n        }\n\n        /**\n         * Destroy all initialised plugins. Convenience function to use when\n         * wavesurfer is removed\n         *\n         * @private\n         */\n\n    }, {\n        key: 'destroyAllPlugins',\n        value: function destroyAllPlugins() {\n            var _this4 = this;\n\n            Object.keys(this.initialisedPluginList).forEach(function (name) {\n                return _this4.destroyPlugin(name);\n            });\n        }\n\n        /**\n         * Create the drawer and draw the waveform\n         *\n         * @private\n         * @emits WaveSurfer#drawer-created\n         */\n\n    }, {\n        key: 'createDrawer',\n        value: function createDrawer() {\n            var _this5 = this;\n\n            this.drawer = new this.Drawer(this.container, this.params);\n            this.drawer.init();\n            this.fireEvent('drawer-created', this.drawer);\n\n            if (this.params.responsive !== false) {\n                window.addEventListener('resize', this._onResize, true);\n                window.addEventListener('orientationchange', this._onResize, true);\n            }\n\n            this.drawer.on('redraw', function () {\n                _this5.drawBuffer();\n                _this5.drawer.progress(_this5.backend.getPlayedPercents());\n            });\n\n            // Click-to-seek\n            this.drawer.on('click', function (e, progress) {\n                setTimeout(function () {\n                    return _this5.seekTo(progress);\n                }, 0);\n            });\n\n            // Relay the scroll event from the drawer\n            this.drawer.on('scroll', function (e) {\n                if (_this5.params.partialRender) {\n                    _this5.drawBuffer();\n                }\n                _this5.fireEvent('scroll', e);\n            });\n        }\n\n        /**\n         * Create the backend\n         *\n         * @private\n         * @emits WaveSurfer#backend-created\n         */\n\n    }, {\n        key: 'createBackend',\n        value: function createBackend() {\n            var _this6 = this;\n\n            if (this.backend) {\n                this.backend.destroy();\n            }\n\n            // Back compat\n            if (this.params.backend == 'AudioElement') {\n                this.params.backend = 'MediaElement';\n            }\n\n            if (this.params.backend == 'WebAudio' && !this.Backend.prototype.supportsWebAudio.call(null)) {\n                this.params.backend = 'MediaElement';\n            }\n\n            this.backend = new this.Backend(this.params);\n            this.backend.init();\n            this.fireEvent('backend-created', this.backend);\n\n            this.backend.on('finish', function () {\n                return _this6.fireEvent('finish');\n            });\n            this.backend.on('play', function () {\n                return _this6.fireEvent('play');\n            });\n            this.backend.on('pause', function () {\n                return _this6.fireEvent('pause');\n            });\n\n            this.backend.on('audioprocess', function (time) {\n                _this6.drawer.progress(_this6.backend.getPlayedPercents());\n                _this6.fireEvent('audioprocess', time);\n            });\n        }\n\n        /**\n         * Create the peak cache\n         *\n         * @private\n         */\n\n    }, {\n        key: 'createPeakCache',\n        value: function createPeakCache() {\n            if (this.params.partialRender) {\n                this.peakCache = new _peakcache2.default();\n            }\n        }\n\n        /**\n         * Get the duration of the audio clip\n         *\n         * @example const duration = wavesurfer.getDuration();\n         * @return {number} Duration in seconds\n         */\n\n    }, {\n        key: 'getDuration',\n        value: function getDuration() {\n            return this.backend.getDuration();\n        }\n\n        /**\n         * Get the current playback position\n         *\n         * @example const currentTime = wavesurfer.getCurrentTime();\n         * @return {number} Playback position in seconds\n         */\n\n    }, {\n        key: 'getCurrentTime',\n        value: function getCurrentTime() {\n            return this.backend.getCurrentTime();\n        }\n\n        /**\n         * Set the current play time in seconds.\n         *\n         * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n         * seconds, 60 means 1 minute\n         */\n\n    }, {\n        key: 'setCurrentTime',\n        value: function setCurrentTime(seconds) {\n            if (this.getDuration() >= seconds) {\n                this.seekTo(1);\n            } else {\n                this.seekTo(seconds / this.getDuration());\n            }\n        }\n\n        /**\n         * Starts playback from the current position. Optional start and end\n         * measured in seconds can be used to set the range of audio to play.\n         *\n         * @param {?number} start Position to start at\n         * @param {?number} end Position to end at\n         * @emits WaveSurfer#interaction\n         * @example\n         * // play from second 1 to 5\n         * wavesurfer.play(1, 5);\n         */\n\n    }, {\n        key: 'play',\n        value: function play(start, end) {\n            var _this7 = this;\n\n            this.fireEvent('interaction', function () {\n                return _this7.play(start, end);\n            });\n            this.backend.play(start, end);\n        }\n\n        /**\n         * Stops playback\n         *\n         * @example wavesurfer.pause();\n         */\n\n    }, {\n        key: 'pause',\n        value: function pause() {\n            this.backend.isPaused() || this.backend.pause();\n        }\n\n        /**\n         * Toggle playback\n         *\n         * @example wavesurfer.playPause();\n         */\n\n    }, {\n        key: 'playPause',\n        value: function playPause() {\n            this.backend.isPaused() ? this.play() : this.pause();\n        }\n\n        /**\n         * Get the current playback state\n         *\n         * @example const isPlaying = wavesurfer.isPlaying();\n         * @return {boolean} False if paused, true if playing\n         */\n\n    }, {\n        key: 'isPlaying',\n        value: function isPlaying() {\n            return !this.backend.isPaused();\n        }\n\n        /**\n         * Skip backward\n         *\n         * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n         * is used\n         * @example wavesurfer.skipBackward();\n         */\n\n    }, {\n        key: 'skipBackward',\n        value: function skipBackward(seconds) {\n            this.skip(-seconds || -this.params.skipLength);\n        }\n\n        /**\n         * Skip forward\n         *\n         * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n         * is used\n         * @example wavesurfer.skipForward();\n         */\n\n    }, {\n        key: 'skipForward',\n        value: function skipForward(seconds) {\n            this.skip(seconds || this.params.skipLength);\n        }\n\n        /**\n         * Skip a number of seconds from the current position (use a negative value\n         * to go backwards).\n         *\n         * @param {number} offset Amount to skip back or forwards\n         * @example\n         * // go back 2 seconds\n         * wavesurfer.skip(-2);\n         */\n\n    }, {\n        key: 'skip',\n        value: function skip(offset) {\n            var duration = this.getDuration() || 1;\n            var position = this.getCurrentTime() || 0;\n            position = Math.max(0, Math.min(duration, position + (offset || 0)));\n            this.seekAndCenter(position / duration);\n        }\n\n        /**\n         * Seeks to a position and centers the view\n         *\n         * @param {number} progress Between 0 (=beginning) and 1 (=end)\n         * @example\n         * // seek and go to the middle of the audio\n         * wavesurfer.seekTo(0.5);\n         */\n\n    }, {\n        key: 'seekAndCenter',\n        value: function seekAndCenter(progress) {\n            this.seekTo(progress);\n            this.drawer.recenter(progress);\n        }\n\n        /**\n         * Seeks to a position\n         *\n         * @param {number} progress Between 0 (=beginning) and 1 (=end)\n         * @emits WaveSurfer#interaction\n         * @emits WaveSurfer#seek\n         * @example\n         * // seek to the middle of the audio\n         * wavesurfer.seekTo(0.5);\n         */\n\n    }, {\n        key: 'seekTo',\n        value: function seekTo(progress) {\n            var _this8 = this;\n\n            // return an error if progress is not a number between 0 and 1\n            if (typeof progress !== 'number' || !isFinite(progress) || progress < 0 || progress > 1) {\n                return console.error('Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!');\n            }\n            this.fireEvent('interaction', function () {\n                return _this8.seekTo(progress);\n            });\n\n            var paused = this.backend.isPaused();\n            // avoid draw wrong position while playing backward seeking\n            if (!paused) {\n                this.backend.pause();\n            }\n            // avoid small scrolls while paused seeking\n            var oldScrollParent = this.params.scrollParent;\n            this.params.scrollParent = false;\n            this.backend.seekTo(progress * this.getDuration());\n            this.drawer.progress(progress);\n\n            if (!paused) {\n                this.backend.play();\n            }\n            this.params.scrollParent = oldScrollParent;\n            this.fireEvent('seek', progress);\n        }\n\n        /**\n         * Stops and goes to the beginning.\n         *\n         * @example wavesurfer.stop();\n         */\n\n    }, {\n        key: 'stop',\n        value: function stop() {\n            this.pause();\n            this.seekTo(0);\n            this.drawer.progress(0);\n        }\n\n        /**\n         * Set the playback volume.\n         *\n         * @param {number} newVolume A value between 0 and 1, 0 being no\n         * volume and 1 being full volume.\n         */\n\n    }, {\n        key: 'setVolume',\n        value: function setVolume(newVolume) {\n            this.backend.setVolume(newVolume);\n        }\n\n        /**\n         * Get the playback volume.\n         *\n         * @return {number} A value between 0 and 1, 0 being no\n         * volume and 1 being full volume.\n         */\n\n    }, {\n        key: 'getVolume',\n        value: function getVolume() {\n            return this.backend.getVolume();\n        }\n\n        /**\n         * Set the playback rate.\n         *\n         * @param {number} rate A positive number. E.g. 0.5 means half the normal\n         * speed, 2 means double speed and so on.\n         * @example wavesurfer.setPlaybackRate(2);\n         */\n\n    }, {\n        key: 'setPlaybackRate',\n        value: function setPlaybackRate(rate) {\n            this.backend.setPlaybackRate(rate);\n        }\n\n        /**\n         * Get the playback rate.\n         *\n         * @return {number}\n         */\n\n    }, {\n        key: 'getPlaybackRate',\n        value: function getPlaybackRate() {\n            return this.backend.getPlaybackRate();\n        }\n\n        /**\n         * Toggle the volume on and off. It not currenly muted it will save the\n         * current volume value and turn the volume off. If currently muted then it\n         * will restore the volume to the saved value, and then rest the saved\n         * value.\n         *\n         * @example wavesurfer.toggleMute();\n         */\n\n    }, {\n        key: 'toggleMute',\n        value: function toggleMute() {\n            this.setMute(!this.isMuted);\n        }\n\n        /**\n         * Enable or disable muted audio\n         *\n         * @param {boolean} mute\n         * @example\n         * // unmute\n         * wavesurfer.setMute(false);\n         */\n\n    }, {\n        key: 'setMute',\n        value: function setMute(mute) {\n            // ignore all muting requests if the audio is already in that state\n            if (mute === this.isMuted) {\n                return;\n            }\n\n            if (mute) {\n                // If currently not muted then save current volume,\n                // turn off the volume and update the mute properties\n                this.savedVolume = this.backend.getVolume();\n                this.backend.setVolume(0);\n                this.isMuted = true;\n            } else {\n                // If currently muted then restore to the saved volume\n                // and update the mute properties\n                this.backend.setVolume(this.savedVolume);\n                this.isMuted = false;\n            }\n        }\n\n        /**\n         * Get the current mute status.\n         *\n         * @example const isMuted = wavesurfer.getMute();\n         * @return {boolean}\n         */\n\n    }, {\n        key: 'getMute',\n        value: function getMute() {\n            return this.isMuted;\n        }\n\n        /**\n         * Get the list of current set filters as an array.\n         *\n         * Filters must be set with setFilters method first\n         *\n         * @return {array}\n         */\n\n    }, {\n        key: 'getFilters',\n        value: function getFilters() {\n            return this.backend.filters || [];\n        }\n\n        /**\n         * Toggles `scrollParent` and redraws\n         *\n         * @example wavesurfer.toggleScroll();\n         */\n\n    }, {\n        key: 'toggleScroll',\n        value: function toggleScroll() {\n            this.params.scrollParent = !this.params.scrollParent;\n            this.drawBuffer();\n        }\n\n        /**\n         * Toggle mouse interaction\n         *\n         * @example wavesurfer.toggleInteraction();\n         */\n\n    }, {\n        key: 'toggleInteraction',\n        value: function toggleInteraction() {\n            this.params.interact = !this.params.interact;\n        }\n\n        /**\n         * Get the fill color of the waveform after the cursor.\n         *\n         * @return {string} A CSS color string.\n         */\n\n    }, {\n        key: 'getWaveColor',\n        value: function getWaveColor() {\n            return this.params.waveColor;\n        }\n\n        /**\n         * Set the fill color of the waveform after the cursor.\n         *\n         * @param {string} color A CSS color string.\n         * @example wavesurfer.setWaveColor('#ddd');\n         */\n\n    }, {\n        key: 'setWaveColor',\n        value: function setWaveColor(color) {\n            this.params.waveColor = color;\n            this.drawBuffer();\n        }\n\n        /**\n         * Get the fill color of the waveform behind the cursor.\n         *\n         * @return {string} A CSS color string.\n         */\n\n    }, {\n        key: 'getProgressColor',\n        value: function getProgressColor() {\n            return this.params.progressColor;\n        }\n\n        /**\n         * Set the fill color of the waveform behind the cursor.\n         *\n         * @param {string} color A CSS color string.\n         * @example wavesurfer.setProgressColor('#400');\n         */\n\n    }, {\n        key: 'setProgressColor',\n        value: function setProgressColor(color) {\n            this.params.progressColor = color;\n            this.drawBuffer();\n        }\n\n        /**\n         * Get the fill color of the cursor indicating the playhead\n         * position.\n         *\n         * @return {string} A CSS color string.\n         */\n\n    }, {\n        key: 'getCursorColor',\n        value: function getCursorColor() {\n            return this.params.cursorColor;\n        }\n\n        /**\n         * Set the fill color of the cursor indicating the playhead\n         * position.\n         *\n         * @param {string} color A CSS color string.\n         * @example wavesurfer.setCursorColor('#222');\n         */\n\n    }, {\n        key: 'setCursorColor',\n        value: function setCursorColor(color) {\n            this.params.cursorColor = color;\n            this.drawer.updateCursor();\n        }\n\n        /**\n         * Get the height of the waveform.\n         *\n         * @return {number} Height measured in pixels.\n         */\n\n    }, {\n        key: 'getHeight',\n        value: function getHeight() {\n            return this.params.height;\n        }\n\n        /**\n         * Set the height of the waveform.\n         *\n         * @param {number} height Height measured in pixels.\n         * @example wavesurfer.setHeight(200);\n         */\n\n    }, {\n        key: 'setHeight',\n        value: function setHeight(height) {\n            this.params.height = height;\n            this.drawer.setHeight(height * this.params.pixelRatio);\n            this.drawBuffer();\n        }\n\n        /**\n         * Get the correct peaks for current wave viewport and render wave\n         *\n         * @private\n         * @emits WaveSurfer#redraw\n         */\n\n    }, {\n        key: 'drawBuffer',\n        value: function drawBuffer() {\n            var nominalWidth = Math.round(this.getDuration() * this.params.minPxPerSec * this.params.pixelRatio);\n            var parentWidth = this.drawer.getWidth();\n            var width = nominalWidth;\n            var start = this.drawer.getScrollX();\n            var end = Math.max(start + parentWidth, width);\n            // Fill container\n            if (this.params.fillParent && (!this.params.scrollParent || nominalWidth < parentWidth)) {\n                width = parentWidth;\n                start = 0;\n                end = width;\n            }\n\n            var peaks = void 0;\n            if (this.params.partialRender) {\n                var newRanges = this.peakCache.addRangeToPeakCache(width, start, end);\n                var i = void 0;\n                for (i = 0; i < newRanges.length; i++) {\n                    peaks = this.backend.getPeaks(width, newRanges[i][0], newRanges[i][1]);\n                    this.drawer.drawPeaks(peaks, width, newRanges[i][0], newRanges[i][1]);\n                }\n            } else {\n                peaks = this.backend.getPeaks(width, start, end);\n                this.drawer.drawPeaks(peaks, width, start, end);\n            }\n            this.fireEvent('redraw', peaks, width);\n        }\n\n        /**\n         * Horizontally zooms the waveform in and out. It also changes the parameter\n         * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n         * with a falsey parameter will reset the zoom state.\n         *\n         * @param {?number} pxPerSec Number of horizontal pixels per second of\n         * audio, if none is set the waveform returns to unzoomed state\n         * @emits WaveSurfer#zoom\n         * @example wavesurfer.zoom(20);\n         */\n\n    }, {\n        key: 'zoom',\n        value: function zoom(pxPerSec) {\n            if (!pxPerSec) {\n                this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n                this.params.scrollParent = false;\n            } else {\n                this.params.minPxPerSec = pxPerSec;\n                this.params.scrollParent = true;\n            }\n\n            this.drawBuffer();\n            this.drawer.progress(this.backend.getPlayedPercents());\n\n            this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n            this.fireEvent('zoom', pxPerSec);\n        }\n\n        /**\n         * Decode buffer and load\n         *\n         * @private\n         * @param {ArrayBuffer} arraybuffer\n         */\n\n    }, {\n        key: 'loadArrayBuffer',\n        value: function loadArrayBuffer(arraybuffer) {\n            var _this9 = this;\n\n            this.decodeArrayBuffer(arraybuffer, function (data) {\n                if (!_this9.isDestroyed) {\n                    _this9.loadDecodedBuffer(data);\n                }\n            });\n        }\n\n        /**\n         * Directly load an externally decoded AudioBuffer\n         *\n         * @private\n         * @param {AudioBuffer} buffer\n         * @emits WaveSurfer#ready\n         */\n\n    }, {\n        key: 'loadDecodedBuffer',\n        value: function loadDecodedBuffer(buffer) {\n            this.backend.load(buffer);\n            this.drawBuffer();\n            this.fireEvent('ready');\n            this.isReady = true;\n        }\n\n        /**\n         * Loads audio data from a Blob or File object\n         *\n         * @param {Blob|File} blob Audio data\n         * @example\n         */\n\n    }, {\n        key: 'loadBlob',\n        value: function loadBlob(blob) {\n            var _this10 = this;\n\n            // Create file reader\n            var reader = new FileReader();\n            reader.addEventListener('progress', function (e) {\n                return _this10.onProgress(e);\n            });\n            reader.addEventListener('load', function (e) {\n                return _this10.loadArrayBuffer(e.target.result);\n            });\n            reader.addEventListener('error', function () {\n                return _this10.fireEvent('error', 'Error reading file');\n            });\n            reader.readAsArrayBuffer(blob);\n            this.empty();\n        }\n\n        /**\n         * Loads audio and re-renders the waveform.\n         *\n         * @param {string|HTMLMediaElement} url The url of the audio file or the\n         * audio element with the audio\n         * @param {?number[]|number[][]} peaks Wavesurfer does not have to decode\n         * the audio to render the waveform if this is specified\n         * @param {?string} preload (Use with backend `MediaElement`)\n         * `'none'|'metadata'|'auto'` Preload attribute for the media element\n         * @param {?number} duration The duration of the audio. This is used to\n         * render the peaks data in the correct size for the audio duration (as\n         * befits the current minPxPerSec and zoom value) without having to decode\n         * the audio.\n         * @example\n         * // using ajax or media element to load (depending on backend)\n         * wavesurfer.load('http://example.com/demo.wav');\n         *\n         * // setting preload attribute with media element backend and supplying\n         * peaks wavesurfer.load(\n         *   'http://example.com/demo.wav',\n         *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n         *   true,\n         * );\n         */\n\n    }, {\n        key: 'load',\n        value: function load(url, peaks, preload, duration) {\n            this.empty();\n            this.isMuted = false;\n\n            if (preload) {\n                // check whether the preload attribute will be usable and if not log\n                // a warning listing the reasons why not and nullify the variable\n                var preloadIgnoreReasons = {\n                    \"Preload is not 'auto', 'none' or 'metadata'\": ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                    'Peaks are not provided': !peaks,\n                    'Backend is not of type MediaElement': this.params.backend !== 'MediaElement',\n                    'Url is not of type string': typeof url !== 'string'\n                };\n                var activeReasons = Object.keys(preloadIgnoreReasons).filter(function (reason) {\n                    return preloadIgnoreReasons[reason];\n                });\n                if (activeReasons.length) {\n                    console.warn('Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' + activeReasons.join('\\n\\t- '));\n                    // stop invalid values from being used\n                    preload = null;\n                }\n            }\n\n            switch (this.params.backend) {\n                case 'WebAudio':\n                    return this.loadBuffer(url, peaks, duration);\n                case 'MediaElement':\n                    return this.loadMediaElement(url, peaks, preload, duration);\n            }\n        }\n\n        /**\n         * Loads audio using Web Audio buffer backend.\n         *\n         * @private\n         * @param {string} url\n         * @param {?number[]|number[][]} peaks\n         * @param {?number} duration\n         */\n\n    }, {\n        key: 'loadBuffer',\n        value: function loadBuffer(url, peaks, duration) {\n            var _this11 = this;\n\n            var load = function load(action) {\n                if (action) {\n                    _this11.tmpEvents.push(_this11.once('ready', action));\n                }\n                return _this11.getArrayBuffer(url, function (data) {\n                    return _this11.loadArrayBuffer(data);\n                });\n            };\n\n            if (peaks) {\n                this.backend.setPeaks(peaks, duration);\n                this.drawBuffer();\n                this.tmpEvents.push(this.once('interaction', load));\n            } else {\n                return load();\n            }\n        }\n\n        /**\n         * Either create a media element, or load an existing media element.\n         *\n         * @private\n         * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n         * existing HTML5 Audio/Video Element\n         * @param {number[]|number[][]} peaks Array of peaks. Required to bypass web audio\n         * dependency\n         * @param {?boolean} preload Set to true if the preload attribute of the\n         * audio element should be enabled\n         * @param {?number} duration\n         */\n\n    }, {\n        key: 'loadMediaElement',\n        value: function loadMediaElement(urlOrElt, peaks, preload, duration) {\n            var _this12 = this;\n\n            var url = urlOrElt;\n\n            if (typeof urlOrElt === 'string') {\n                this.backend.load(url, this.mediaContainer, peaks, preload);\n            } else {\n                var elt = urlOrElt;\n                this.backend.loadElt(elt, peaks);\n\n                // If peaks are not provided,\n                // url = element.src so we can get peaks with web audio\n                url = elt.src;\n            }\n\n            this.tmpEvents.push(this.backend.once('canplay', function () {\n                _this12.drawBuffer();\n                _this12.fireEvent('ready');\n                _this12.isReady = true;\n            }), this.backend.once('error', function (err) {\n                return _this12.fireEvent('error', err);\n            }));\n\n            // If no pre-decoded peaks provided or pre-decoded peaks are\n            // provided with forceDecode flag, attempt to download the\n            // audio file and decode it with Web Audio.\n            if (peaks) {\n                this.backend.setPeaks(peaks, duration);\n            }\n\n            if ((!peaks || this.params.forceDecode) && this.backend.supportsWebAudio()) {\n                this.getArrayBuffer(url, function (arraybuffer) {\n                    _this12.decodeArrayBuffer(arraybuffer, function (buffer) {\n                        _this12.backend.buffer = buffer;\n                        _this12.backend.setPeaks(null);\n                        _this12.drawBuffer();\n                        _this12.fireEvent('waveform-ready');\n                    });\n                });\n            }\n        }\n\n        /**\n         * Decode an array buffer and pass data to a callback\n         *\n         * @private\n         * @param {Object} arraybuffer\n         * @param {function} callback\n         */\n\n    }, {\n        key: 'decodeArrayBuffer',\n        value: function decodeArrayBuffer(arraybuffer, callback) {\n            var _this13 = this;\n\n            this.arraybuffer = arraybuffer;\n\n            this.backend.decodeArrayBuffer(arraybuffer, function (data) {\n                // Only use the decoded data if we haven't been destroyed or\n                // another decode started in the meantime\n                if (!_this13.isDestroyed && _this13.arraybuffer == arraybuffer) {\n                    callback(data);\n                    _this13.arraybuffer = null;\n                }\n            }, function () {\n                return _this13.fireEvent('error', 'Error decoding audiobuffer');\n            });\n        }\n\n        /**\n         * Load an array buffer by ajax and pass to a callback\n         *\n         * @param {string} url\n         * @param {function} callback\n         * @private\n         */\n\n    }, {\n        key: 'getArrayBuffer',\n        value: function getArrayBuffer(url, callback) {\n            var _this14 = this;\n\n            var ajax = util.ajax({\n                url: url,\n                responseType: 'arraybuffer'\n            });\n\n            this.currentAjax = ajax;\n\n            this.tmpEvents.push(ajax.on('progress', function (e) {\n                _this14.onProgress(e);\n            }), ajax.on('success', function (data, e) {\n                callback(data);\n                _this14.currentAjax = null;\n            }), ajax.on('error', function (e) {\n                _this14.fireEvent('error', 'XHR error: ' + e.target.statusText);\n                _this14.currentAjax = null;\n            }));\n\n            return ajax;\n        }\n\n        /**\n         * Called while the audio file is loading\n         *\n         * @private\n         * @param {Event} e\n         * @emits WaveSurfer#loading\n         */\n\n    }, {\n        key: 'onProgress',\n        value: function onProgress(e) {\n            var percentComplete = void 0;\n            if (e.lengthComputable) {\n                percentComplete = e.loaded / e.total;\n            } else {\n                // Approximate progress with an asymptotic\n                // function, and assume downloads in the 1-3 MB range.\n                percentComplete = e.loaded / (e.loaded + 1000000);\n            }\n            this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n        }\n\n        /**\n         * Exports PCM data into a JSON array and opens in a new window.\n         *\n         * @param {number} length=1024 The scale in which to export the peaks. (Integer)\n         * @param {number} accuracy=10000 (Integer)\n         * @param {?boolean} noWindow Set to true to disable opening a new\n         * window with the JSON\n         * @param {number} start\n         * @todo Update exportPCM to work with new getPeaks signature\n         * @return {JSON} JSON of peaks\n         */\n\n    }, {\n        key: 'exportPCM',\n        value: function exportPCM(length, accuracy, noWindow, start) {\n            length = length || 1024;\n            start = start || 0;\n            accuracy = accuracy || 10000;\n            noWindow = noWindow || false;\n            var peaks = this.backend.getPeaks(length, start);\n            var arr = [].map.call(peaks, function (val) {\n                return Math.round(val * accuracy) / accuracy;\n            });\n            var json = JSON.stringify(arr);\n            if (!noWindow) {\n                window.open('data:application/json;charset=utf-8,' + encodeURIComponent(json));\n            }\n            return json;\n        }\n\n        /**\n         * Save waveform image as data URI.\n         *\n         * The default format is `image/png`. Other supported types are\n         * `image/jpeg` and `image/webp`.\n         *\n         * @param {string} format='image/png'\n         * @param {number} quality=1\n         * @return {string} data URI of image\n         */\n\n    }, {\n        key: 'exportImage',\n        value: function exportImage(format, quality) {\n            if (!format) {\n                format = 'image/png';\n            }\n            if (!quality) {\n                quality = 1;\n            }\n\n            return this.drawer.getImage(format, quality);\n        }\n\n        /**\n         * Cancel any ajax request currently in progress\n         */\n\n    }, {\n        key: 'cancelAjax',\n        value: function cancelAjax() {\n            if (this.currentAjax) {\n                this.currentAjax.xhr.abort();\n                this.currentAjax = null;\n            }\n        }\n\n        /**\n         * @private\n         */\n\n    }, {\n        key: 'clearTmpEvents',\n        value: function clearTmpEvents() {\n            this.tmpEvents.forEach(function (e) {\n                return e.un();\n            });\n        }\n\n        /**\n         * Display empty waveform.\n         */\n\n    }, {\n        key: 'empty',\n        value: function empty() {\n            if (!this.backend.isPaused()) {\n                this.stop();\n                this.backend.disconnectSource();\n            }\n            this.cancelAjax();\n            this.clearTmpEvents();\n            this.drawer.progress(0);\n            this.drawer.setWidth(0);\n            this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n        }\n\n        /**\n         * Remove events, elements and disconnect WebAudio nodes.\n         *\n         * @emits WaveSurfer#destroy\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            this.destroyAllPlugins();\n            this.fireEvent('destroy');\n            this.cancelAjax();\n            this.clearTmpEvents();\n            this.unAll();\n            if (this.params.responsive !== false) {\n                window.removeEventListener('resize', this._onResize, true);\n                window.removeEventListener('orientationchange', this._onResize, true);\n            }\n            this.backend.destroy();\n            this.drawer.destroy();\n            this.isDestroyed = true;\n            this.arraybuffer = null;\n        }\n    }]);\n\n    return WaveSurfer;\n}(util.Observer);\n\nWaveSurfer.util = util;\nexports.default = WaveSurfer;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = ajax;\n\nvar _observer = __webpack_require__(1);\n\nvar _observer2 = _interopRequireDefault(_observer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Perform an ajax request\n *\n * @param {Options} options Description\n *\n * @returns {Object} Observer instance\n */\nfunction ajax(options) {\n    var instance = new _observer2.default();\n    var xhr = new XMLHttpRequest();\n    var fired100 = false;\n    xhr.open(options.method || 'GET', options.url, true);\n    xhr.responseType = options.responseType || 'json';\n    xhr.addEventListener('progress', function (e) {\n        instance.fireEvent('progress', e);\n        if (e.lengthComputable && e.loaded == e.total) {\n            fired100 = true;\n        }\n    });\n    xhr.addEventListener('load', function (e) {\n        if (!fired100) {\n            instance.fireEvent('progress', e);\n        }\n        instance.fireEvent('load', e);\n        if (200 == xhr.status || 206 == xhr.status) {\n            instance.fireEvent('success', xhr.response, e);\n        } else {\n            instance.fireEvent('error', e);\n        }\n    });\n    xhr.addEventListener('error', function (e) {\n        return instance.fireEvent('error', e);\n    });\n    xhr.send();\n    instance.xhr = xhr;\n    return instance;\n}\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = getId;\n/**\n * Get a random prefixed ID\n *\n * @returns {String} Random ID\n */\nfunction getId() {\n    return 'wavesurfer_' + Math.random().toString(32).substring(2);\n}\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = max;\n/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n */\nfunction max(values) {\n    var largest = -Infinity;\n    Object.keys(values).forEach(function (i) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    });\n    return largest;\n}\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = min;\n/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number}       Smallest number found\n */\nfunction min(values) {\n    var smallest = Number(Infinity);\n    Object.keys(values).forEach(function (i) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    });\n    return smallest;\n}\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = extend;\n/**\n * Extend an object shallowly with others\n *\n * @param {Object} dest The target object\n * @param {Object[]} sources The objects to use for extending\n *\n * @return {Object} Merged object\n */\nfunction extend(dest) {\n    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n    }\n\n    sources.forEach(function (source) {\n        Object.keys(source).forEach(function (key) {\n            dest[key] = source[key];\n        });\n    });\n    return dest;\n}\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = style;\n/**\n * Apply a map of styles to an element\n *\n * @param {HTMLElement} el The element that the styles will be applied to\n * @param {Object} styles The map of propName: attribute, both are used as-is\n *\n * @return {HTMLElement} el\n */\nfunction style(el, styles) {\n    Object.keys(styles).forEach(function (prop) {\n        if (el.style[prop] !== styles[prop]) {\n            el.style[prop] = styles[prop];\n        }\n    });\n    return el;\n}\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = frame;\n\nvar _requestAnimationFrame = __webpack_require__(2);\n\nvar _requestAnimationFrame2 = _interopRequireDefault(_requestAnimationFrame);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nfunction frame(func) {\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return (0, _requestAnimationFrame2.default)(function () {\n      return func.apply(undefined, args);\n    });\n  };\n}\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\n\nmodule.exports = function debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _drawer = __webpack_require__(14);\n\nvar _drawer2 = _interopRequireDefault(_drawer);\n\nvar _util = __webpack_require__(0);\n\nvar util = _interopRequireWildcard(_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @typedef {Object} CanvasEntry\n * @private\n * @property {HTMLElement} wave The wave node\n * @property {CanvasRenderingContext2D} waveCtx The canvas rendering context\n * @property {?HTMLElement} progress The progress wave node\n * @property {?CanvasRenderingContext2D} progressCtx The progress wave canvas\n * rendering context\n * @property {?number} start Start of the area the canvas should render, between 0 and 1\n * @property {?number} end End of the area the canvas should render, between 0 and 1\n */\n\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole built\n * in renderer.\n */\nvar MultiCanvas = function (_Drawer) {\n    _inherits(MultiCanvas, _Drawer);\n\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    function MultiCanvas(container, params) {\n        _classCallCheck(this, MultiCanvas);\n\n        /**\n         * @type {number}\n         * @private\n         */\n        var _this = _possibleConstructorReturn(this, (MultiCanvas.__proto__ || Object.getPrototypeOf(MultiCanvas)).call(this, container, params));\n\n        _this.maxCanvasWidth = params.maxCanvasWidth;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxCanvasElementWidth = Math.round(params.maxCanvasWidth / params.pixelRatio);\n\n        /**\n         * Whether or not the progress wave is renderered. If the `waveColor`\n         * and `progressColor` are the same colour it is not.\n         * @type {boolean}\n         */\n        _this.hasProgressCanvas = params.waveColor != params.progressColor;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.halfPixel = 0.5 / params.pixelRatio;\n        /**\n         * @private\n         * @type {Array}\n         */\n        _this.canvases = [];\n        /** @private */\n        _this.progressWave = null;\n        return _this;\n    }\n\n    /**\n     * Initialise the drawer\n     */\n\n\n    _createClass(MultiCanvas, [{\n        key: 'init',\n        value: function init() {\n            this.createWrapper();\n            this.createElements();\n        }\n\n        /**\n         * Create the canvas elements and style them\n         *\n         * @private\n         */\n\n    }, {\n        key: 'createElements',\n        value: function createElements() {\n            this.progressWave = this.wrapper.appendChild(this.style(document.createElement('wave'), {\n                position: 'absolute',\n                zIndex: 3,\n                left: 0,\n                top: 0,\n                bottom: 0,\n                overflow: 'hidden',\n                width: '0',\n                display: 'none',\n                boxSizing: 'border-box',\n                borderRightStyle: 'solid',\n                pointerEvents: 'none'\n            }));\n\n            this.addCanvas();\n            this.updateCursor();\n        }\n\n        /**\n         * Update cursor style from params.\n         */\n\n    }, {\n        key: 'updateCursor',\n        value: function updateCursor() {\n            this.style(this.progressWave, {\n                borderRightWidth: this.params.cursorWidth + 'px',\n                borderRightColor: this.params.cursorColor\n            });\n        }\n\n        /**\n         * Adjust to the updated size by adding or removing canvases\n         */\n\n    }, {\n        key: 'updateSize',\n        value: function updateSize() {\n            var _this2 = this;\n\n            var totalWidth = Math.round(this.width / this.params.pixelRatio);\n            var requiredCanvases = Math.ceil(totalWidth / this.maxCanvasElementWidth);\n\n            while (this.canvases.length < requiredCanvases) {\n                this.addCanvas();\n            }\n\n            while (this.canvases.length > requiredCanvases) {\n                this.removeCanvas();\n            }\n\n            this.canvases.forEach(function (entry, i) {\n                // Add some overlap to prevent vertical white stripes, keep the width even for simplicity.\n                var canvasWidth = _this2.maxCanvasWidth + 2 * Math.ceil(_this2.params.pixelRatio / 2);\n\n                if (i == _this2.canvases.length - 1) {\n                    canvasWidth = _this2.width - _this2.maxCanvasWidth * (_this2.canvases.length - 1);\n                }\n\n                _this2.updateDimensions(entry, canvasWidth, _this2.height);\n                _this2.clearWaveForEntry(entry);\n            });\n        }\n\n        /**\n         * Add a canvas to the canvas list\n         *\n         * @private\n         */\n\n    }, {\n        key: 'addCanvas',\n        value: function addCanvas() {\n            var entry = {};\n            var leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n            entry.wave = this.wrapper.appendChild(this.style(document.createElement('canvas'), {\n                position: 'absolute',\n                zIndex: 2,\n                left: leftOffset + 'px',\n                top: 0,\n                bottom: 0,\n                height: '100%',\n                pointerEvents: 'none'\n            }));\n            entry.waveCtx = entry.wave.getContext('2d');\n\n            if (this.hasProgressCanvas) {\n                entry.progress = this.progressWave.appendChild(this.style(document.createElement('canvas'), {\n                    position: 'absolute',\n                    left: leftOffset + 'px',\n                    top: 0,\n                    bottom: 0,\n                    height: '100%'\n                }));\n                entry.progressCtx = entry.progress.getContext('2d');\n            }\n\n            this.canvases.push(entry);\n        }\n\n        /**\n         * Pop one canvas from the list\n         *\n         * @private\n         */\n\n    }, {\n        key: 'removeCanvas',\n        value: function removeCanvas() {\n            var lastEntry = this.canvases.pop();\n            lastEntry.wave.parentElement.removeChild(lastEntry.wave);\n            if (this.hasProgressCanvas) {\n                lastEntry.progress.parentElement.removeChild(lastEntry.progress);\n            }\n        }\n\n        /**\n         * Update the dimensions of a canvas element\n         *\n         * @private\n         * @param {CanvasEntry} entry\n         * @param {number} width The new width of the element\n         * @param {number} height The new height of the element\n         */\n\n    }, {\n        key: 'updateDimensions',\n        value: function updateDimensions(entry, width, height) {\n            var elementWidth = Math.round(width / this.params.pixelRatio);\n            var totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n            // Where the canvas starts and ends in the waveform, represented as a decimal between 0 and 1.\n            entry.start = entry.waveCtx.canvas.offsetLeft / totalWidth || 0;\n            entry.end = entry.start + elementWidth / totalWidth;\n\n            entry.waveCtx.canvas.width = width;\n            entry.waveCtx.canvas.height = height;\n            this.style(entry.waveCtx.canvas, { width: elementWidth + 'px' });\n\n            this.style(this.progressWave, { display: 'block' });\n\n            if (this.hasProgressCanvas) {\n                entry.progressCtx.canvas.width = width;\n                entry.progressCtx.canvas.height = height;\n                this.style(entry.progressCtx.canvas, {\n                    width: elementWidth + 'px'\n                });\n            }\n        }\n\n        /**\n         * Clear the whole waveform\n         */\n\n    }, {\n        key: 'clearWave',\n        value: function clearWave() {\n            var _this3 = this;\n\n            this.canvases.forEach(function (entry) {\n                return _this3.clearWaveForEntry(entry);\n            });\n        }\n\n        /**\n         * Clear one canvas\n         *\n         * @private\n         * @param {CanvasEntry} entry\n         */\n\n    }, {\n        key: 'clearWaveForEntry',\n        value: function clearWaveForEntry(entry) {\n            entry.waveCtx.clearRect(0, 0, entry.waveCtx.canvas.width, entry.waveCtx.canvas.height);\n            if (this.hasProgressCanvas) {\n                entry.progressCtx.clearRect(0, 0, entry.progressCtx.canvas.width, entry.progressCtx.canvas.height);\n            }\n        }\n\n        /**\n         * Draw a waveform with bars\n         *\n         * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\n         * rendering\n         * @param {number} channelIndex The index of the current channel. Normally\n         * should be 0. Must be an integer.\n         * @param {number} start The x-offset of the beginning of the area that\n         * should be rendered\n         * @param {number} end The x-offset of the end of the area that should be\n         * rendered\n         */\n\n    }, {\n        key: 'drawBars',\n        value: function drawBars(peaks, channelIndex, start, end) {\n            var _this4 = this;\n\n            return this.prepareDraw(peaks, channelIndex, start, end, function (_ref) {\n                var absmax = _ref.absmax,\n                    hasMinVals = _ref.hasMinVals,\n                    height = _ref.height,\n                    offsetY = _ref.offsetY,\n                    halfH = _ref.halfH,\n                    peaks = _ref.peaks;\n\n                // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n                if (start === undefined) {\n                    return;\n                }\n                // Skip every other value if there are negatives.\n                var peakIndexScale = hasMinVals ? 2 : 1;\n                var length = peaks.length / peakIndexScale;\n                var bar = _this4.params.barWidth * _this4.params.pixelRatio;\n                var gap = Math.max(_this4.params.pixelRatio, ~~(bar / 2));\n                var step = bar + gap;\n\n                var scale = length / _this4.width;\n                var first = start;\n                var last = end;\n                var i = void 0;\n\n                for (i = first; i < last; i += step) {\n                    var peak = peaks[Math.floor(i * scale * peakIndexScale)] || 0;\n                    var h = Math.round(peak / absmax * halfH);\n                    _this4.fillRect(i + _this4.halfPixel, halfH - h + offsetY, bar + _this4.halfPixel, h * 2);\n                }\n            });\n        }\n\n        /**\n         * Draw a waveform\n         *\n         * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\n         * rendering\n         * @param {number} channelIndex The index of the current channel. Normally\n         * should be 0\n         * @param {number?} start The x-offset of the beginning of the area that\n         * should be rendered (If this isn't set only a flat line is rendered)\n         * @param {number?} end The x-offset of the end of the area that should be\n         * rendered\n         */\n\n    }, {\n        key: 'drawWave',\n        value: function drawWave(peaks, channelIndex, start, end) {\n            var _this5 = this;\n\n            return this.prepareDraw(peaks, channelIndex, start, end, function (_ref2) {\n                var absmax = _ref2.absmax,\n                    hasMinVals = _ref2.hasMinVals,\n                    height = _ref2.height,\n                    offsetY = _ref2.offsetY,\n                    halfH = _ref2.halfH,\n                    peaks = _ref2.peaks;\n\n                if (!hasMinVals) {\n                    var reflectedPeaks = [];\n                    var len = peaks.length;\n                    var i = void 0;\n                    for (i = 0; i < len; i++) {\n                        reflectedPeaks[2 * i] = peaks[i];\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n                    peaks = reflectedPeaks;\n                }\n\n                // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n                if (start !== undefined) {\n                    _this5.drawLine(peaks, absmax, halfH, offsetY, start, end);\n                }\n\n                // Always draw a median line\n                _this5.fillRect(0, halfH + offsetY - _this5.halfPixel, _this5.width, _this5.halfPixel);\n            });\n        }\n\n        /**\n         * Tell the canvas entries to render their portion of the waveform\n         *\n         * @private\n         * @param {number[]} peaks Peak data\n         * @param {number} absmax Maximum peak value (absolute)\n         * @param {number} halfH Half the height of the waveform\n         * @param {number} offsetY Offset to the top\n         * @param {number} start The x-offset of the beginning of the area that\n         * should be rendered\n         * @param {number} end The x-offset of the end of the area that\n         * should be rendered\n         */\n\n    }, {\n        key: 'drawLine',\n        value: function drawLine(peaks, absmax, halfH, offsetY, start, end) {\n            var _this6 = this;\n\n            this.canvases.forEach(function (entry) {\n                _this6.setFillStyles(entry);\n                _this6.drawLineToContext(entry, entry.waveCtx, peaks, absmax, halfH, offsetY, start, end);\n                _this6.drawLineToContext(entry, entry.progressCtx, peaks, absmax, halfH, offsetY, start, end);\n            });\n        }\n\n        /**\n         * Render the actual waveform line on a canvas\n         *\n         * @private\n         * @param {CanvasEntry} entry\n         * @param {Canvas2DContextAttributes} ctx Essentially `entry.[wave|progress]Ctx`\n         * @param {number[]} peaks\n         * @param {number} absmax Maximum peak value (absolute)\n         * @param {number} halfH Half the height of the waveform\n         * @param {number} offsetY Offset to the top\n         * @param {number} start The x-offset of the beginning of the area that\n         * should be rendered\n         * @param {number} end The x-offset of the end of the area that\n         * should be rendered\n         */\n\n    }, {\n        key: 'drawLineToContext',\n        value: function drawLineToContext(entry, ctx, peaks, absmax, halfH, offsetY, start, end) {\n            if (!ctx) {\n                return;\n            }\n\n            var length = peaks.length / 2;\n            var scale = this.params.fillParent && this.width != length ? this.width / length : 1;\n\n            var first = Math.round(length * entry.start);\n            // Use one more peak value to make sure we join peaks at ends -- unless,\n            // of course, this is the last canvas.\n            var last = Math.round(length * entry.end) + 1;\n            if (first > end || last < start) {\n                return;\n            }\n            var canvasStart = Math.min(first, start);\n            var canvasEnd = Math.max(last, end);\n            var i = void 0;\n            var j = void 0;\n\n            ctx.beginPath();\n            ctx.moveTo((canvasStart - first) * scale + this.halfPixel, halfH + offsetY);\n\n            for (i = canvasStart; i < canvasEnd; i++) {\n                var peak = peaks[2 * i] || 0;\n                var h = Math.round(peak / absmax * halfH);\n                ctx.lineTo((i - first) * scale + this.halfPixel, halfH - h + offsetY);\n            }\n\n            // Draw the bottom edge going backwards, to make a single\n            // closed hull to fill.\n            for (j = canvasEnd - 1; j >= canvasStart; j--) {\n                var _peak = peaks[2 * j + 1] || 0;\n                var _h = Math.round(_peak / absmax * halfH);\n                ctx.lineTo((j - first) * scale + this.halfPixel, halfH - _h + offsetY);\n            }\n\n            ctx.closePath();\n            ctx.fill();\n        }\n\n        /**\n         * Draw a rectangle on the waveform\n         *\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         */\n\n    }, {\n        key: 'fillRect',\n        value: function fillRect(x, y, width, height) {\n            var startCanvas = Math.floor(x / this.maxCanvasWidth);\n            var endCanvas = Math.min(Math.ceil((x + width) / this.maxCanvasWidth) + 1, this.canvases.length);\n            var i = void 0;\n            for (i = startCanvas; i < endCanvas; i++) {\n                var entry = this.canvases[i];\n                var leftOffset = i * this.maxCanvasWidth;\n\n                var intersection = {\n                    x1: Math.max(x, i * this.maxCanvasWidth),\n                    y1: y,\n                    x2: Math.min(x + width, i * this.maxCanvasWidth + entry.waveCtx.canvas.width),\n                    y2: y + height\n                };\n\n                if (intersection.x1 < intersection.x2) {\n                    this.setFillStyles(entry);\n\n                    this.fillRectToContext(entry.waveCtx, intersection.x1 - leftOffset, intersection.y1, intersection.x2 - intersection.x1, intersection.y2 - intersection.y1);\n\n                    this.fillRectToContext(entry.progressCtx, intersection.x1 - leftOffset, intersection.y1, intersection.x2 - intersection.x1, intersection.y2 - intersection.y1);\n                }\n            }\n        }\n\n        /**\n         * Performs preparation tasks and calculations which are shared by drawBars and drawWave\n         *\n         * @private\n         * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\n         * rendering\n         * @param {number} channelIndex The index of the current channel. Normally\n         * should be 0\n         * @param {number?} start The x-offset of the beginning of the area that\n         * should be rendered (If this isn't set only a flat line is rendered)\n         * @param {number?} end The x-offset of the end of the area that should be\n         * rendered\n         * @param {function} fn The render function to call\n         */\n\n    }, {\n        key: 'prepareDraw',\n        value: function prepareDraw(peaks, channelIndex, start, end, fn) {\n            var _this7 = this;\n\n            return util.frame(function () {\n                // Split channels and call this function with the channelIndex set\n                if (peaks[0] instanceof Array) {\n                    var channels = peaks;\n                    if (_this7.params.splitChannels) {\n                        _this7.setHeight(channels.length * _this7.params.height * _this7.params.pixelRatio);\n                        return channels.forEach(function (channelPeaks, i) {\n                            return _this7.prepareDraw(channelPeaks, i, start, end, fn);\n                        });\n                    }\n                    peaks = channels[0];\n                }\n                // calculate maximum modulation value, either from the barHeight\n                // parameter or if normalize=true from the largest value in the peak\n                // set\n                var absmax = 1 / _this7.params.barHeight;\n                if (_this7.params.normalize) {\n                    var max = util.max(peaks);\n                    var min = util.min(peaks);\n                    absmax = -min > max ? -min : max;\n                }\n\n                // Bar wave draws the bottom only as a reflection of the top,\n                // so we don't need negative values\n                var hasMinVals = [].some.call(peaks, function (val) {\n                    return val < 0;\n                });\n                var height = _this7.params.height * _this7.params.pixelRatio;\n                var offsetY = height * channelIndex || 0;\n                var halfH = height / 2;\n\n                return fn({\n                    absmax: absmax,\n                    hasMinVals: hasMinVals,\n                    height: height,\n                    offsetY: offsetY,\n                    halfH: halfH,\n                    peaks: peaks\n                });\n            })();\n        }\n\n        /**\n         * Draw the actual rectangle on a canvas\n         *\n         * @private\n         * @param {Canvas2DContextAttributes} ctx\n         * @param {number} x\n         * @param {number} y\n         * @param {number} width\n         * @param {number} height\n         */\n\n    }, {\n        key: 'fillRectToContext',\n        value: function fillRectToContext(ctx, x, y, width, height) {\n            if (!ctx) {\n                return;\n            }\n            ctx.fillRect(x, y, width, height);\n        }\n\n        /**\n         * Set the fill styles for a certain entry (wave and progress)\n         *\n         * @private\n         * @param {CanvasEntry} entry\n         */\n\n    }, {\n        key: 'setFillStyles',\n        value: function setFillStyles(entry) {\n            entry.waveCtx.fillStyle = this.params.waveColor;\n            if (this.hasProgressCanvas) {\n                entry.progressCtx.fillStyle = this.params.progressColor;\n            }\n        }\n\n        /**\n         * Return image data of the waveform\n         *\n         * @param {string} type='image/png' An optional value of a format type.\n         * @param {number} quality=0.92 An optional value between 0 and 1.\n         * @return {string|string[]} images A data URL or an array of data URLs\n         */\n\n    }, {\n        key: 'getImage',\n        value: function getImage(type, quality) {\n            var images = this.canvases.map(function (entry) {\n                return entry.wave.toDataURL(type, quality);\n            });\n            return images.length > 1 ? images : images[0];\n        }\n\n        /**\n         * Render the new progress\n         *\n         * @param {number} position X-Offset of progress position in pixels\n         */\n\n    }, {\n        key: 'updateProgress',\n        value: function updateProgress(position) {\n            this.style(this.progressWave, { width: position + 'px' });\n        }\n    }]);\n\n    return MultiCanvas;\n}(_drawer2.default);\n\nexports.default = MultiCanvas;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _util = __webpack_require__(0);\n\nvar util = _interopRequireWildcard(_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nvar Drawer = function (_util$Observer) {\n    _inherits(Drawer, _util$Observer);\n\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    function Drawer(container, params) {\n        _classCallCheck(this, Drawer);\n\n        /** @private */\n        var _this = _possibleConstructorReturn(this, (Drawer.__proto__ || Object.getPrototypeOf(Drawer)).call(this));\n\n        _this.container = container;\n        /**\n         * @type {WavesurferParams}\n         * @private\n         */\n        _this.params = params;\n        /**\n         * The width of the renderer\n         * @type {number}\n         */\n        _this.width = 0;\n        /**\n         * The height of the renderer\n         * @type {number}\n         */\n        _this.height = params.height * _this.params.pixelRatio;\n        /** @private */\n        _this.lastPos = 0;\n        /**\n         * The `<wave>` element which is added to the container\n         * @type {HTMLElement}\n         */\n        _this.wrapper = null;\n        return _this;\n    }\n\n    /**\n     * Alias of `util.style`\n     *\n     * @param {HTMLElement} el The element that the styles will be applied to\n     * @param {Object} styles The map of propName: attribute, both are used as-is\n     * @return {HTMLElement} el\n     */\n\n\n    _createClass(Drawer, [{\n        key: 'style',\n        value: function style(el, styles) {\n            return util.style(el, styles);\n        }\n\n        /**\n         * Create the wrapper `<wave>` element, style it and set up the events for\n         * interaction\n         */\n\n    }, {\n        key: 'createWrapper',\n        value: function createWrapper() {\n            this.wrapper = this.container.appendChild(document.createElement('wave'));\n\n            this.style(this.wrapper, {\n                display: 'block',\n                position: 'relative',\n                userSelect: 'none',\n                webkitUserSelect: 'none',\n                height: this.params.height + 'px'\n            });\n\n            if (this.params.fillParent || this.params.scrollParent) {\n                this.style(this.wrapper, {\n                    width: '100%',\n                    overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                    overflowY: 'hidden'\n                });\n            }\n\n            this.setupWrapperEvents();\n        }\n\n        /**\n         * Handle click event\n         *\n         * @param {Event} e Click event\n         * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n         * @return {number} Playback position from 0 to 1\n         */\n\n    }, {\n        key: 'handleEvent',\n        value: function handleEvent(e, noPrevent) {\n            !noPrevent && e.preventDefault();\n\n            var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;\n            var bbox = this.wrapper.getBoundingClientRect();\n\n            var nominalWidth = this.width;\n            var parentWidth = this.getWidth();\n\n            var progress = void 0;\n\n            if (!this.params.fillParent && nominalWidth < parentWidth) {\n                progress = (clientX - bbox.left) * this.params.pixelRatio / nominalWidth || 0;\n\n                if (progress > 1) {\n                    progress = 1;\n                }\n            } else {\n                progress = (clientX - bbox.left + this.wrapper.scrollLeft) / this.wrapper.scrollWidth || 0;\n            }\n\n            return progress;\n        }\n\n        /**\n         * @private\n         */\n\n    }, {\n        key: 'setupWrapperEvents',\n        value: function setupWrapperEvents() {\n            var _this2 = this;\n\n            this.wrapper.addEventListener('click', function (e) {\n                var scrollbarHeight = _this2.wrapper.offsetHeight - _this2.wrapper.clientHeight;\n                if (scrollbarHeight != 0) {\n                    // scrollbar is visible.  Check if click was on it\n                    var bbox = _this2.wrapper.getBoundingClientRect();\n                    if (e.clientY >= bbox.bottom - scrollbarHeight) {\n                        // ignore mousedown as it was on the scrollbar\n                        return;\n                    }\n                }\n\n                if (_this2.params.interact) {\n                    _this2.fireEvent('click', e, _this2.handleEvent(e));\n                }\n            });\n\n            this.wrapper.addEventListener('scroll', function (e) {\n                return _this2.fireEvent('scroll', e);\n            });\n        }\n\n        /**\n         * Draw peaks on the canvas\n         *\n         * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\n         * rendering\n         * @param {number} length The width of the area that should be drawn\n         * @param {number} start The x-offset of the beginning of the area that\n         * should be rendered\n         * @param {number} end The x-offset of the end of the area that should be\n         * rendered\n         */\n\n    }, {\n        key: 'drawPeaks',\n        value: function drawPeaks(peaks, length, start, end) {\n            if (!this.setWidth(length)) {\n                this.clearWave();\n            }\n\n            this.params.barWidth ? this.drawBars(peaks, 0, start, end) : this.drawWave(peaks, 0, start, end);\n        }\n\n        /**\n         * Scroll to the beginning\n         */\n\n    }, {\n        key: 'resetScroll',\n        value: function resetScroll() {\n            if (this.wrapper !== null) {\n                this.wrapper.scrollLeft = 0;\n            }\n        }\n\n        /**\n         * Recenter the viewport at a certain percent of the waveform\n         *\n         * @param {number} percent Value from 0 to 1 on the waveform\n         */\n\n    }, {\n        key: 'recenter',\n        value: function recenter(percent) {\n            var position = this.wrapper.scrollWidth * percent;\n            this.recenterOnPosition(position, true);\n        }\n\n        /**\n         * Recenter the viewport on a position, either scroll there immediately or\n         * in steps of 5 pixels\n         *\n         * @param {number} position X-offset in pixels\n         * @param {boolean} immediate Set to true to immediately scroll somewhere\n         */\n\n    }, {\n        key: 'recenterOnPosition',\n        value: function recenterOnPosition(position, immediate) {\n            var scrollLeft = this.wrapper.scrollLeft;\n            var half = ~~(this.wrapper.clientWidth / 2);\n            var maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n            var target = position - half;\n            var offset = target - scrollLeft;\n\n            if (maxScroll == 0) {\n                // no need to continue if scrollbar is not there\n                return;\n            }\n\n            // if the cursor is currently visible...\n            if (!immediate && -half <= offset && offset < half) {\n                // we'll limit the \"re-center\" rate.\n                var rate = 5;\n                offset = Math.max(-rate, Math.min(rate, offset));\n                target = scrollLeft + offset;\n            }\n\n            // limit target to valid range (0 to maxScroll)\n            target = Math.max(0, Math.min(maxScroll, target));\n            // no use attempting to scroll if we're not moving\n            if (target != scrollLeft) {\n                this.wrapper.scrollLeft = target;\n            }\n        }\n\n        /**\n         * Get the current scroll position in pixels\n         *\n         * @return {number}\n         */\n\n    }, {\n        key: 'getScrollX',\n        value: function getScrollX() {\n            return Math.round(this.wrapper.scrollLeft * this.params.pixelRatio);\n        }\n\n        /**\n         * Get the width of the container\n         *\n         * @return {number}\n         */\n\n    }, {\n        key: 'getWidth',\n        value: function getWidth() {\n            return Math.round(this.container.clientWidth * this.params.pixelRatio);\n        }\n\n        /**\n         * Set the width of the container\n         *\n         * @param {number} width\n         */\n\n    }, {\n        key: 'setWidth',\n        value: function setWidth(width) {\n            if (this.width == width) {\n                return false;\n            }\n\n            this.width = width;\n\n            if (this.params.fillParent || this.params.scrollParent) {\n                this.style(this.wrapper, {\n                    width: ''\n                });\n            } else {\n                this.style(this.wrapper, {\n                    width: ~~(this.width / this.params.pixelRatio) + 'px'\n                });\n            }\n\n            this.updateSize();\n            return true;\n        }\n\n        /**\n         * Set the height of the container\n         *\n         * @param {number} height\n         */\n\n    }, {\n        key: 'setHeight',\n        value: function setHeight(height) {\n            if (height == this.height) {\n                return false;\n            }\n            this.height = height;\n\n            this.style(this.wrapper, {\n                height: ~~(this.height / this.params.pixelRatio) + 'px'\n            });\n\n            this.updateSize();\n            return true;\n        }\n\n        /**\n         * Called by wavesurfer when progress should be renderered\n         *\n         * @param {number} progress From 0 to 1\n         */\n\n    }, {\n        key: 'progress',\n        value: function progress(_progress) {\n            var minPxDelta = 1 / this.params.pixelRatio;\n            var pos = Math.round(_progress * this.width) * minPxDelta;\n\n            if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n                this.lastPos = pos;\n\n                if (this.params.scrollParent && this.params.autoCenter) {\n                    var newPos = ~~(this.wrapper.scrollWidth * _progress);\n                    this.recenterOnPosition(newPos);\n                }\n\n                this.updateProgress(pos);\n            }\n        }\n\n        /**\n         * This is called when wavesurfer is destroyed\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            this.unAll();\n            if (this.wrapper) {\n                if (this.wrapper.parentNode == this.container) {\n                    this.container.removeChild(this.wrapper);\n                }\n                this.wrapper = null;\n            }\n        }\n\n        /* Renderer-specific methods */\n\n        /**\n         * Called after cursor related params have changed.\n         *\n         * @abstract\n         */\n\n    }, {\n        key: 'updateCursor',\n        value: function updateCursor() {}\n\n        /**\n         * Called when the size of the container changes so the renderer can adjust\n         *\n         * @abstract\n         */\n\n    }, {\n        key: 'updateSize',\n        value: function updateSize() {}\n\n        /**\n         * Draw a waveform with bars\n         *\n         * @abstract\n         * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\n         * rendering\n         * @param {number} channelIndex The index of the current channel. Normally\n         * should be 0\n         * @param {number} start The x-offset of the beginning of the area that\n         * should be rendered\n         * @param {number} end The x-offset of the end of the area that should be\n         * rendered\n         */\n\n    }, {\n        key: 'drawBars',\n        value: function drawBars(peaks, channelIndex, start, end) {}\n\n        /**\n         * Draw a waveform\n         *\n         * @abstract\n         * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\n         * rendering\n         * @param {number} channelIndex The index of the current channel. Normally\n         * should be 0\n         * @param {number} start The x-offset of the beginning of the area that\n         * should be rendered\n         * @param {number} end The x-offset of the end of the area that should be\n         * rendered\n         */\n\n    }, {\n        key: 'drawWave',\n        value: function drawWave(peaks, channelIndex, start, end) {}\n\n        /**\n         * Clear the waveform\n         *\n         * @abstract\n         */\n\n    }, {\n        key: 'clearWave',\n        value: function clearWave() {}\n\n        /**\n         * Render the new progress\n         *\n         * @abstract\n         * @param {number} position X-Offset of progress position in pixels\n         */\n\n    }, {\n        key: 'updateProgress',\n        value: function updateProgress(position) {}\n    }]);\n\n    return Drawer;\n}(util.Observer);\n\nexports.default = Drawer;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _webaudio = __webpack_require__(3);\n\nvar _webaudio2 = _interopRequireDefault(_webaudio);\n\nvar _util = __webpack_require__(0);\n\nvar util = _interopRequireWildcard(_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * MediaElement backend\n */\nvar MediaElement = function (_WebAudio) {\n    _inherits(MediaElement, _WebAudio);\n\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params\n     */\n    function MediaElement(params) {\n        _classCallCheck(this, MediaElement);\n\n        /** @private */\n        var _this = _possibleConstructorReturn(this, (MediaElement.__proto__ || Object.getPrototypeOf(MediaElement)).call(this, params));\n\n        _this.params = params;\n\n        // Dummy media to catch errors\n        /** @private */\n        _this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play: function play() {},\n            pause: function pause() {}\n        };\n\n        /** @private */\n        _this.mediaType = params.mediaType.toLowerCase();\n        /** @private */\n        _this.elementPosition = params.elementPosition;\n        /** @private */\n        _this.peaks = null;\n        /** @private */\n        _this.playbackRate = 1;\n        /** @private */\n        _this.buffer = null;\n        /** @private */\n        _this.onPlayEnd = null;\n        return _this;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n\n\n    _createClass(MediaElement, [{\n        key: 'init',\n        value: function init() {\n            this.setPlaybackRate(this.params.audioRate);\n            this.createTimer();\n        }\n\n        /**\n         * Create a timer to provide a more precise `audioprocess` event.\n         *\n         * @private\n         */\n\n    }, {\n        key: 'createTimer',\n        value: function createTimer() {\n            var _this2 = this;\n\n            var onAudioProcess = function onAudioProcess() {\n                if (_this2.isPaused()) {\n                    return;\n                }\n                _this2.fireEvent('audioprocess', _this2.getCurrentTime());\n\n                // Call again in the next frame\n                var requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame;\n                requestAnimationFrame(onAudioProcess);\n            };\n\n            this.on('play', onAudioProcess);\n        }\n\n        /**\n         * Create media element with url as its source,\n         * and append to container element.\n         *\n         * @param {string} url Path to media file\n         * @param {HTMLElement} container HTML element\n         * @param {number[]|number[][]} peaks Array of peak data\n         * @param {string} preload HTML 5 preload attribute value\n         */\n\n    }, {\n        key: 'load',\n        value: function load(url, container, peaks, preload) {\n            var media = document.createElement(this.mediaType);\n            media.controls = this.params.mediaControls;\n            media.autoplay = this.params.autoplay || false;\n            media.preload = preload == null ? 'auto' : preload;\n            media.src = url;\n            media.style.width = '100%';\n\n            var prevMedia = container.querySelector(this.mediaType);\n            if (prevMedia) {\n                container.removeChild(prevMedia);\n            }\n            container.appendChild(media);\n\n            this._load(media, peaks);\n        }\n\n        /**\n         * Load existing media element.\n         *\n         * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n         * @param {number[]|number[][]} peaks Array of peak data\n         */\n\n    }, {\n        key: 'loadElt',\n        value: function loadElt(elt, peaks) {\n            elt.controls = this.params.mediaControls;\n            elt.autoplay = this.params.autoplay || false;\n\n            this._load(elt, peaks);\n        }\n\n        /**\n         * Private method called by both load (from url)\n         * and loadElt (existing media element).\n         *\n         * @param {HTMLMediaElement} media HTML5 Audio or Video element\n         * @param {number[]|number[][]} peaks Array of peak data\n         * @private\n         */\n\n    }, {\n        key: '_load',\n        value: function _load(media, peaks) {\n            var _this3 = this;\n\n            // load must be called manually on iOS, otherwise peaks won't draw\n            // until a user interaction triggers load --> 'ready' event\n            if (typeof media.load == 'function') {\n                // Resets the media element and restarts the media resource. Any\n                // pending events are discarded. How much media data is fetched is\n                // still affected by the preload attribute.\n                media.load();\n            }\n\n            media.addEventListener('error', function () {\n                _this3.fireEvent('error', 'Error loading media element');\n            });\n\n            media.addEventListener('canplay', function () {\n                _this3.fireEvent('canplay');\n            });\n\n            media.addEventListener('ended', function () {\n                _this3.fireEvent('finish');\n            });\n\n            // Listen to and relay play and pause events to enable\n            // playback control from the external media element\n            media.addEventListener('play', function () {\n                _this3.fireEvent('play');\n            });\n\n            media.addEventListener('pause', function () {\n                _this3.fireEvent('pause');\n            });\n\n            this.media = media;\n            this.peaks = peaks;\n            this.onPlayEnd = null;\n            this.buffer = null;\n            this.setPlaybackRate(this.playbackRate);\n        }\n\n        /**\n         * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n         *\n         * @return {boolean}\n         */\n\n    }, {\n        key: 'isPaused',\n        value: function isPaused() {\n            return !this.media || this.media.paused;\n        }\n\n        /**\n         * Used by `wavesurfer.getDuration()`\n         *\n         * @return {number}\n         */\n\n    }, {\n        key: 'getDuration',\n        value: function getDuration() {\n            if (this.explicitDuration) {\n                return this.explicitDuration;\n            }\n            var duration = (this.buffer || this.media).duration;\n            if (duration >= Infinity) {\n                // streaming audio\n                duration = this.media.seekable.end(0);\n            }\n            return duration;\n        }\n\n        /**\n         * Returns the current time in seconds relative to the audioclip's\n         * duration.\n         *\n         * @return {number}\n         */\n\n    }, {\n        key: 'getCurrentTime',\n        value: function getCurrentTime() {\n            return this.media && this.media.currentTime;\n        }\n\n        /**\n         * Get the position from 0 to 1\n         *\n         * @return {number}\n         */\n\n    }, {\n        key: 'getPlayedPercents',\n        value: function getPlayedPercents() {\n            return this.getCurrentTime() / this.getDuration() || 0;\n        }\n\n        /**\n         * Get the audio source playback rate.\n         *\n         * @return {number}\n         */\n\n    }, {\n        key: 'getPlaybackRate',\n        value: function getPlaybackRate() {\n            return this.playbackRate || this.media.playbackRate;\n        }\n\n        /**\n         * Set the audio source playback rate.\n         *\n         * @param {number} value\n         */\n\n    }, {\n        key: 'setPlaybackRate',\n        value: function setPlaybackRate(value) {\n            this.playbackRate = value || 1;\n            this.media.playbackRate = this.playbackRate;\n        }\n\n        /**\n         * Used by `wavesurfer.seekTo()`\n         *\n         * @param {number} start Position to start at in seconds\n         */\n\n    }, {\n        key: 'seekTo',\n        value: function seekTo(start) {\n            if (start != null) {\n                this.media.currentTime = start;\n            }\n            this.clearPlayEnd();\n        }\n\n        /**\n         * Plays the loaded audio region.\n         *\n         * @param {number} start Start offset in seconds, relative to the beginning\n         * of a clip.\n         * @param {number} end When to stop relative to the beginning of a clip.\n         * @emits MediaElement#play\n         */\n\n    }, {\n        key: 'play',\n        value: function play(start, end) {\n            this.seekTo(start);\n            this.media.play();\n            end && this.setPlayEnd(end);\n        }\n\n        /**\n         * Pauses the loaded audio.\n         *\n         * @emits MediaElement#pause\n         */\n\n    }, {\n        key: 'pause',\n        value: function pause() {\n            this.media && this.media.pause();\n            this.clearPlayEnd();\n        }\n\n        /** @private */\n\n    }, {\n        key: 'setPlayEnd',\n        value: function setPlayEnd(end) {\n            var _this4 = this;\n\n            this._onPlayEnd = function (time) {\n                if (time >= end) {\n                    _this4.pause();\n                    _this4.seekTo(end);\n                }\n            };\n            this.on('audioprocess', this._onPlayEnd);\n        }\n\n        /** @private */\n\n    }, {\n        key: 'clearPlayEnd',\n        value: function clearPlayEnd() {\n            if (this._onPlayEnd) {\n                this.un('audioprocess', this._onPlayEnd);\n                this._onPlayEnd = null;\n            }\n        }\n\n        /**\n         * Compute the max and min value of the waveform when broken into\n         * <length> subranges.\n         *\n         * @param {number} length How many subranges to break the waveform into.\n         * @param {number} first First sample in the required range.\n         * @param {number} last Last sample in the required range.\n         * @return {number[]|number[][]} Array of 2*<length> peaks or array of\n         * arrays of peaks consisting of (max, min) values for each subrange.\n         */\n\n    }, {\n        key: 'getPeaks',\n        value: function getPeaks(length, first, last) {\n            if (this.buffer) {\n                return _get(MediaElement.prototype.__proto__ || Object.getPrototypeOf(MediaElement.prototype), 'getPeaks', this).call(this, length, first, last);\n            }\n            return this.peaks || [];\n        }\n\n        /**\n         * Get the current volume\n         *\n         * @return {number} value A floating point value between 0 and 1.\n         */\n\n    }, {\n        key: 'getVolume',\n        value: function getVolume() {\n            return this.media.volume;\n        }\n\n        /**\n         * Set the audio volume\n         *\n         * @param {number} value A floating point value between 0 and 1.\n         */\n\n    }, {\n        key: 'setVolume',\n        value: function setVolume(value) {\n            this.media.volume = value;\n        }\n\n        /**\n         * This is called when wavesurfer is destroyed\n         *\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            this.pause();\n            this.unAll();\n\n            if (this.params.removeMediaElementOnDestroy && this.media && this.media.parentNode) {\n                this.media.parentNode.removeChild(this.media);\n            }\n\n            this.media = null;\n        }\n    }]);\n\n    return MediaElement;\n}(_webaudio2.default);\n\nexports.default = MediaElement;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Caches the decoded peaks data to improve rendering speed for lage audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nvar PeakCache = function () {\n    /**\n     * Instantiate cache\n     */\n    function PeakCache() {\n        _classCallCheck(this, PeakCache);\n\n        this.clearPeakCache();\n    }\n\n    /**\n     * Empty the cache\n     */\n\n\n    _createClass(PeakCache, [{\n        key: \"clearPeakCache\",\n        value: function clearPeakCache() {\n            /**\n             * Flat array with entries that are always in pairs to mark the\n             * beginning and end of each subrange.  This is a convenience so we can\n             * iterate over the pairs for easy set difference operations.\n             * @private\n             */\n            this.peakCacheRanges = [];\n            /**\n             * Length of the entire cachable region, used for resetting the cache\n             * when this changes (zoom events, for instance).\n             * @private\n             */\n            this.peakCacheLength = -1;\n        }\n\n        /**\n         * Add a range of peaks to the cache\n         *\n         * @param {number} length The length of the range\n         * @param {number} start The x offset of the start of the range\n         * @param {number} end The x offset of the end of the range\n         * @return {number[][]}\n         */\n\n    }, {\n        key: \"addRangeToPeakCache\",\n        value: function addRangeToPeakCache(length, start, end) {\n            if (length != this.peakCacheLength) {\n                this.clearPeakCache();\n                this.peakCacheLength = length;\n            }\n\n            // Return ranges that weren't in the cache before the call.\n            var uncachedRanges = [];\n            var i = 0;\n            // Skip ranges before the current start.\n            while (i < this.peakCacheRanges.length && this.peakCacheRanges[i] < start) {\n                i++;\n            }\n            // If |i| is even, |start| falls after an existing range.  Otherwise,\n            // |start| falls between an existing range, and the uncached region\n            // starts when we encounter the next node in |peakCacheRanges| or\n            // |end|, whichever comes first.\n            if (i % 2 == 0) {\n                uncachedRanges.push(start);\n            }\n            while (i < this.peakCacheRanges.length && this.peakCacheRanges[i] <= end) {\n                uncachedRanges.push(this.peakCacheRanges[i]);\n                i++;\n            }\n            // If |i| is even, |end| is after all existing ranges.\n            if (i % 2 == 0) {\n                uncachedRanges.push(end);\n            }\n\n            // Filter out the 0-length ranges.\n            uncachedRanges = uncachedRanges.filter(function (item, pos, arr) {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n            // Merge the two ranges together, uncachedRanges will either contain\n            // wholly new points, or duplicates of points in peakCacheRanges.  If\n            // duplicates are detected, remove both and extend the range.\n            this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n            this.peakCacheRanges = this.peakCacheRanges.sort(function (a, b) {\n                return a - b;\n            }).filter(function (item, pos, arr) {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n            // Push the uncached ranges into an array of arrays for ease of\n            // iteration in the functions that call this.\n            var uncachedRangePairs = [];\n            for (i = 0; i < uncachedRanges.length; i += 2) {\n                uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n            }\n\n            return uncachedRangePairs;\n        }\n\n        /**\n         * For testing\n         *\n         * @return {number[][]}\n         */\n\n    }, {\n        key: \"getCacheRanges\",\n        value: function getCacheRanges() {\n            var peakCacheRangePairs = [];\n            var i = void 0;\n            for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n                peakCacheRangePairs.push([this.peakCacheRanges[i], this.peakCacheRanges[i + 1]]);\n            }\n            return peakCacheRangePairs;\n        }\n    }]);\n\n    return PeakCache;\n}();\n\nexports.default = PeakCache;\nmodule.exports = exports[\"default\"];\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// wavesurfer.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 44474038b37018d9f674","export { default as ajax } from './ajax';\nexport { default as getId } from './get-id';\nexport { default as max } from './max';\nexport { default as min } from './min';\nexport { default as Observer } from './observer';\nexport { default as extend } from './extend';\nexport { default as style } from './style';\nexport { default as requestAnimationFrame } from './request-animation-frame';\nexport { default as frame } from './frame';\nexport { default as debounce } from 'debounce';\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/index.js","/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n\n/**\n * Observer class\n */\nexport default class Observer {\n    /**\n     * Instantiate Observer\n     */\n    constructor() {\n        /**\n         * @private\n         * @todo Initialise the handlers here already and remove the conditional\n         * assignment in `on()`\n         */\n        this.handlers = null;\n    }\n    /**\n     * Attach a handler function for an event.\n     *\n     * @param {string} event Name of the event to listen to\n     * @param {function} fn The callback to trigger when the event is fired\n     * @return {ListenerDescriptor}\n     */\n    on(event, fn) {\n        if (!this.handlers) {\n            this.handlers = {};\n        }\n\n        let handlers = this.handlers[event];\n        if (!handlers) {\n            handlers = this.handlers[event] = [];\n        }\n        handlers.push(fn);\n\n        // Return an event descriptor\n        return {\n            name: event,\n            callback: fn,\n            un: (e, fn) => this.un(e, fn)\n        };\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Name of the event the listener that should be\n     * removed listens to\n     * @param {function} fn The callback that should be removed\n     */\n    un(event, fn) {\n        if (!this.handlers) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        let i;\n        if (handlers) {\n            if (fn) {\n                for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                    }\n                }\n            } else {\n                handlers.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Remove all event handlers.\n     */\n    unAll() {\n        this.handlers = null;\n    }\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     *\n     * @param {string} event The event to listen to\n     * @param {function} handler The callback that is only to be called once\n     * @return {ListenerDescriptor}\n     */\n    once(event, handler) {\n        const fn = (...args) => {\n            /*  eslint-disable no-invalid-this */\n            handler.apply(this, args);\n            /*  eslint-enable no-invalid-this */\n            setTimeout(() => {\n                this.un(event, fn);\n            }, 0);\n        };\n        return this.on(event, fn);\n    }\n\n    /**\n     * Manually fire an event\n     *\n     * @param {string} event The event to fire manually\n     * @param {...any} args The arguments with which to call the listeners\n     */\n    fireEvent(event, ...args) {\n        if (!this.handlers) {\n            return;\n        }\n        const handlers = this.handlers[event];\n        handlers &&\n            handlers.forEach(fn => {\n                fn(...args);\n            });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/observer.js","/**\n * Returns the requestAnimationFrame function for the browser, or a shim with\n * setTimeout if none is found\n *\n * @return {function}\n */\nexport default (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    ((callback, element) => setTimeout(callback, 1000 / 60))\n).bind(window);\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/request-animation-frame.js","import * as util from './util';\n\n// using consts to prevent someone writing the string wrong\nconst PLAYING = 'playing';\nconst PAUSED = 'paused';\nconst FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {Observer}\n */\nexport default class WebAudio extends util.Observer {\n    /** @private */\n    static scriptBufferSize = 256;\n    /** @private */\n    audioContext = null;\n    /** @private */\n    offlineAudioContext = null;\n    /** @private */\n    stateBehaviors = {\n        [PLAYING]: {\n            init() {\n                this.addOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n            }\n        },\n        [PAUSED]: {\n            init() {\n                this.removeOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition;\n            }\n        },\n        [FINISHED]: {\n            init() {\n                this.removeOnAudioProcess();\n                this.fireEvent('finish');\n            },\n            getPlayedPercents() {\n                return 1;\n            },\n            getCurrentTime() {\n                return this.getDuration();\n            }\n        }\n    };\n\n    /**\n     * Does the browser support this backend\n     *\n     * @return {boolean}\n     */\n    supportsWebAudio() {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    }\n\n    /**\n     * Get the audio context used by this backend or create one\n     *\n     * @return {AudioContext}\n     */\n    getAudioContext() {\n        if (!window.WaveSurferAudioContext) {\n            window.WaveSurferAudioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n        }\n        return window.WaveSurferAudioContext;\n    }\n\n    /**\n     * Get the offline audio context used by this backend or create one\n     *\n     * @param {number} sampleRate\n     * @return {OfflineAudioContext}\n     */\n    getOfflineAudioContext(sampleRate) {\n        if (!window.WaveSurferOfflineAudioContext) {\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\n        }\n        return window.WaveSurferOfflineAudioContext;\n    }\n\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params\n     */\n    constructor(params) {\n        super();\n        /** @private */\n        this.params = params;\n        /** @private */\n        this.ac = params.audioContext || this.getAudioContext();\n        /**@private */\n        this.lastPlay = this.ac.currentTime;\n        /** @private */\n        this.startPosition = 0;\n        /** @private  */\n        this.scheduledPause = null;\n        /** @private */\n        this.states = {\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\n        };\n        /** @private */\n        this.analyser = null;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.filters = [];\n        /** @private */\n        this.gainNode = null;\n        /** @private */\n        this.mergedPeaks = null;\n        /** @private */\n        this.offlineAc = null;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.analyser = null;\n        /** @private */\n        this.scriptNode = null;\n        /** @private */\n        this.source = null;\n        /** @private */\n        this.splitPeaks = [];\n        /** @private */\n        this.state = null;\n        /** @private */\n        this.explicitDuration = null;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(PAUSED);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    }\n\n    /** @private */\n    disconnectFilters() {\n        if (this.filters) {\n            this.filters.forEach(filter => {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    }\n\n    /** @private */\n    setState(state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    }\n\n    /**\n     * Unpacked `setFilters()`\n     *\n     * @param {...AudioNode} filters\n     */\n    setFilter(...filters) {\n        this.setFilters(filters);\n    }\n\n    /**\n     * Insert custom Web Audio nodes into the graph\n     *\n     * @param {AudioNode[]} filters Packed filters array\n     * @example\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n     * wavesurfer.backend.setFilter(lowpass);\n     */\n    setFilters(filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters\n                .reduce((prev, curr) => {\n                    prev.connect(curr);\n                    return curr;\n                }, this.analyser)\n                .connect(this.gainNode);\n        }\n    }\n\n    /** @private */\n    createScriptNode() {\n        if (this.ac.createScriptProcessor) {\n            this.scriptNode = this.ac.createScriptProcessor(\n                WebAudio.scriptBufferSize\n            );\n        } else {\n            this.scriptNode = this.ac.createJavaScriptNode(\n                WebAudio.scriptBufferSize\n            );\n        }\n\n        this.scriptNode.connect(this.ac.destination);\n    }\n\n    /** @private */\n    addOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {\n            const time = this.getCurrentTime();\n\n            if (time >= this.getDuration()) {\n                this.setState(FINISHED);\n                this.fireEvent('pause');\n            } else if (time >= this.scheduledPause) {\n                this.pause();\n            } else if (this.state === this.states[PLAYING]) {\n                this.fireEvent('audioprocess', time);\n            }\n        };\n    }\n\n    /** @private */\n    removeOnAudioProcess() {\n        this.scriptNode.onaudioprocess = null;\n    }\n\n    /** @private */\n    createAnalyserNode() {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    }\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     *\n     * @private\n     */\n    createVolumeNode() {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.gainNode.gain.value = value;\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.gainNode.gain.value;\n    }\n\n    /** @private */\n    decodeArrayBuffer(arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(\n                this.ac ? this.ac.sampleRate : 44100\n            );\n        }\n        this.offlineAc.decodeAudioData(\n            arraybuffer,\n            data => callback(data),\n            errback\n        );\n    }\n\n    /**\n     * Set pre-decoded peaks\n     *\n     * @param {number[]|number[][]} peaks\n     * @param {?number} duration\n     */\n    setPeaks(peaks, duration) {\n        this.explicitDuration = duration;\n        this.peaks = peaks;\n    }\n\n    /**\n     * Set the rendered length (different from the length of the audio).\n     *\n     * @param {number} length\n     */\n    setLength(length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n            return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        let c;\n        for (c = 0; c < channels; c++) {\n            this.splitPeaks[c] = [];\n            this.splitPeaks[c][2 * (length - 1)] = 0;\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|number[][]} Array of 2*<length> peaks or array of arrays of\n     * peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.peaks) {\n            return this.peaks;\n        }\n\n        first = first || 0;\n        last = last || length - 1;\n\n        this.setLength(length);\n\n        /**\n         * The following snippet fixes a buffering data issue on the Safari\n         * browser which returned undefined It creates the missing buffer based\n         * on 1 channel, 4096 samples and the sampleRate from the current\n         * webaudio context 4096 samples seemed to be the best fit for rendering\n         * will review this code once a stable version of Safari TP is out\n         */\n        if (!this.buffer.length) {\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n            this.buffer = newBuffer.buffer;\n        }\n\n        const sampleSize = this.buffer.length / length;\n        const sampleStep = ~~(sampleSize / 10) || 1;\n        const channels = this.buffer.numberOfChannels;\n        let c;\n\n        for (c = 0; c < channels; c++) {\n            const peaks = this.splitPeaks[c];\n            const chan = this.buffer.getChannelData(c);\n            let i;\n\n            for (i = first; i <= last; i++) {\n                const start = ~~(i * sampleSize);\n                const end = ~~(start + sampleSize);\n                let min = 0;\n                let max = 0;\n                let j;\n\n                for (j = start; j < end; j += sampleStep) {\n                    const value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number}\n     */\n    getPlayedPercents() {\n        return this.state.getPlayedPercents.call(this);\n    }\n\n    /** @private */\n    disconnectSource() {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode.disconnect();\n        this.analyser.disconnect();\n\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (\n                typeof this.ac.close === 'function' &&\n                this.ac.state != 'closed'\n            ) {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                window.WaveSurferAudioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            window.WaveSurferOfflineAudioContext = null;\n        }\n    }\n\n    /**\n     * Loaded a decoded audio buffer\n     *\n     * @param {Object} buffer\n     */\n    load(buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    }\n\n    /** @private */\n    createSource() {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        //adjust for old browsers.\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.source.playbackRate.value = this.playbackRate;\n        this.source.buffer = this.buffer;\n        this.source.connect(this.analyser);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean}\n     */\n    isPaused() {\n        return this.state !== this.states[PLAYING];\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number}\n     */\n    getDuration() {\n        if (!this.buffer) {\n            if (this.explicitDuration) {\n                return this.explicitDuration;\n            }\n            return 0;\n        }\n        return this.buffer.duration;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     * @param {number} end Position to end at in seconds\n     * @return {{start: number, end: number}}\n     */\n    seekTo(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[FINISHED]) {\n            this.setState(PAUSED);\n        }\n\n        return {\n            start: start,\n            end: end\n        };\n    }\n\n    /**\n     * Get the playback position in seconds\n     *\n     * @return {number}\n     */\n    getPlayedTime() {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     */\n    play(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        const adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start, end - start);\n\n        if (this.ac.state == 'suspended') {\n            this.ac.resume && this.ac.resume();\n        }\n\n        this.setState(PLAYING);\n\n        this.fireEvent('play');\n    }\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause() {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        this.source && this.source.stop(0);\n\n        this.setState(PAUSED);\n\n        this.fireEvent('pause');\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audioclip's\n     * duration.\n     *\n     * @return {number}\n     */\n    getCurrentTime() {\n        return this.state.getCurrentTime.call(this);\n    }\n\n    /**\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\n     *\n     * @return {number}\n     */\n    getPlaybackRate() {\n        return this.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value\n     */\n    setPlaybackRate(value) {\n        value = value || 1;\n        if (this.isPaused()) {\n            this.playbackRate = value;\n        } else {\n            this.pause();\n            this.playbackRate = value;\n            this.play();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/webaudio.js","import * as util from './util';\nimport MultiCanvas from './drawer.multicanvas';\nimport WebAudio from './webaudio';\nimport MediaElement from './mediaelement';\nimport PeakCache from './peakcache';\n\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform around the progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for\n * unsupported browsers.\n * @property {number} barHeight=1 The height of the wave\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement`)\n * `'audio'|'video'`\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor.\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with seperate waveforms for\n * the channels of the audio\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n */\n\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nclass PluginClass {\n    /**\n     * Plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {Object} params={} The plugin params (specific to the plugin)\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    create(params) {}\n    /**\n     * Construct the plugin\n     *\n     * @param {Object} ws The wavesurfer instance\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     */\n    constructor(ws, params) {}\n    /**\n     * Initialise the plugin\n     *\n     * Start doing something. This is called by\n     * `wavesurfer.initPlugin(pluginName)`\n     */\n    init() {}\n    /**\n     * Destroy the plugin instance\n     *\n     * Stop doing something. This is called by\n     * `wavesurfer.destroyPlugin(pluginName)`\n     */\n    destroy() {}\n}\n\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\nexport default class WaveSurfer extends util.Observer {\n    /** @private */\n    defaultParams = {\n        audioContext: null,\n        audioRate: 1,\n        autoCenter: true,\n        backend: 'WebAudio',\n        barHeight: 1,\n        container: null,\n        cursorColor: '#333',\n        cursorWidth: 1,\n        dragSelection: true,\n        fillParent: true,\n        forceDecode: false,\n        height: 128,\n        hideScrollbar: false,\n        interact: true,\n        loopSelection: true,\n        maxCanvasWidth: 4000,\n        mediaContainer: null,\n        mediaControls: false,\n        mediaType: 'audio',\n        minPxPerSec: 20,\n        normalize: false,\n        partialRender: false,\n        pixelRatio:\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n        plugins: [],\n        progressColor: '#555',\n        removeMediaElementOnDestroy: true,\n        renderer: MultiCanvas,\n        responsive: false,\n        scrollParent: false,\n        skipLength: 2,\n        splitChannels: false,\n        waveColor: '#999'\n    };\n\n    /** @private */\n    backends = {\n        MediaElement,\n        WebAudio\n    };\n\n    /**\n     * Instantiate this class, call its `init` function and returns it\n     *\n     * @param {WavesurferParams} params\n     * @return {Object} WaveSurfer instance\n     * @example const wavesurfer = WaveSurfer.create(params);\n     */\n    static create(params) {\n        const wavesurfer = new WaveSurfer(params);\n        return wavesurfer.init();\n    }\n\n    /**\n     * Functions in the `util` property are available as a prototype property to\n     * all instances\n     *\n     * @type {Object}\n     * @example\n     * const wavesurfer = WaveSurfer.create(params);\n     * wavesurfer.util.style(myElement, { background: 'blue' });\n     */\n    util = util;\n\n    /**\n     * Functions in the `util` property are available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {Object}\n     * @example\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\n     */\n    static util = util;\n\n    /**\n     * Initialise wavesurfer instance\n     *\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\n     * @example\n     * const wavesurfer = new WaveSurfer(params);\n     * @returns {this}\n     */\n    constructor(params) {\n        super();\n        /**\n         * Extract relevant parameters (or defaults)\n         * @private\n         */\n        this.params = util.extend({}, this.defaultParams, params);\n\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(this.params.container)\n                : this.params.container;\n\n        if (!this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (this.params.mediaContainer == null) {\n            /** @private */\n            this.mediaContainer = this.container;\n        } else if (typeof this.params.mediaContainer == 'string') {\n            /** @private */\n            this.mediaContainer = document.querySelector(\n                this.params.mediaContainer\n            );\n        } else {\n            /** @private */\n            this.mediaContainer = this.params.mediaContainer;\n        }\n\n        if (!this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        if (this.params.maxCanvasWidth <= 1) {\n            throw new Error('maxCanvasWidth must be greater than 1');\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\n            throw new Error('maxCanvasWidth must be an even number');\n        }\n\n        /**\n         * @private Used to save the current volume when muting so we can\n         * restore once unmuted\n         * @type {number}\n         */\n        this.savedVolume = 0;\n\n        /**\n         * @private The current muted state\n         * @type {boolean}\n         */\n        this.isMuted = false;\n\n        /**\n         * @private Will hold a list of event descriptors that need to be\n         * cancelled on subsequent loads of audio\n         * @type {Object[]}\n         */\n        this.tmpEvents = [];\n\n        /**\n         * @private Holds any running audio downloads\n         * @type {Observer}\n         */\n        this.currentAjax = null;\n        /** @private */\n        this.arraybuffer = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.backend = null;\n        /** @private */\n        this.peakCache = null;\n\n        // cache constructor objects\n        if (typeof this.params.renderer !== 'function') {\n            throw new Error('Renderer parameter is invalid');\n        }\n        /**\n         * @private The uninitialised Drawer class\n         */\n        this.Drawer = this.params.renderer;\n        /**\n         * @private The uninitialised Backend class\n         */\n        this.Backend = this.backends[this.params.backend];\n\n        /**\n         * @private map of plugin names that are currently initialised\n         */\n        this.initialisedPluginList = {};\n        /** @private */\n        this.isDestroyed = false;\n        /** @private */\n        this.isReady = false;\n\n        // responsive debounced event listener. If this.params.responsive is not\n        // set, this is never called. Use 100ms or this.params.responsive as\n        // timeout for the debounce function.\n        let prevWidth = 0;\n        this._onResize = util.debounce(() => {\n            if (\n                prevWidth != this.drawer.wrapper.clientWidth &&\n                !this.params.scrollParent\n            ) {\n                prevWidth = this.drawer.wrapper.clientWidth;\n                this.drawer.fireEvent('redraw');\n            }\n        }, typeof this.params.responsive === 'number' ? this.params.responsive : 100);\n\n        return this;\n    }\n\n    /**\n     * Initialise the wave\n     *\n     * @example\n     * var wavesurfer = new WaveSurfer(params);\n     * wavesurfer.init();\n     * @return {this}\n     */\n    init() {\n        this.registerPlugins(this.params.plugins);\n        this.createDrawer();\n        this.createBackend();\n        this.createPeakCache();\n        return this;\n    }\n\n    /**\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n     * this function is called in the init function of wavesurfer\n     *\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n     * @return {this}\n     */\n    registerPlugins(plugins) {\n        // first instantiate all the plugins\n        plugins.forEach(plugin => this.addPlugin(plugin));\n\n        // now run the init functions\n        plugins.forEach(plugin => {\n            // call init function of the plugin if deferInit is falsey\n            // in that case you would manually use initPlugins()\n            if (!plugin.deferInit) {\n                this.initPlugin(plugin.name);\n            }\n        });\n        this.fireEvent('plugins-registered', plugins);\n        return this;\n    }\n\n    /**\n     * Add a plugin object to wavesurfer\n     *\n     * @param {PluginDefinition} plugin A plugin definition\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n     * @return {this}\n     */\n    addPlugin(plugin) {\n        if (!plugin.name) {\n            throw new Error('Plugin does not have a name!');\n        }\n        if (!plugin.instance) {\n            throw new Error(\n                `Plugin ${plugin.name} does not have an instance property!`\n            );\n        }\n\n        // staticProps properties are applied to wavesurfer instance\n        if (plugin.staticProps) {\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\n                /**\n                 * Properties defined in a plugin definition's `staticProps` property are added as\n                 * staticProps properties of the WaveSurfer instance\n                 */\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n            });\n        }\n\n        const Instance = plugin.instance;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Instance.prototype[key] = util.Observer.prototype[key];\n        });\n\n        /**\n         * Instantiated plugin classes are added as a property of the wavesurfer\n         * instance\n         * @type {Object}\n         */\n        this[plugin.name] = new Instance(plugin.params || {}, this);\n        this.fireEvent('plugin-added', plugin.name);\n        return this;\n    }\n\n    /**\n     * Initialise a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-initialised\n     * @example wavesurfer.initPlugin('minimap');\n     * @return {this}\n     */\n    initPlugin(name) {\n        if (!this[name]) {\n            throw new Error(`Plugin ${name} has not been added yet!`);\n        }\n        if (this.initialisedPluginList[name]) {\n            // destroy any already initialised plugins\n            this.destroyPlugin(name);\n        }\n        this[name].init();\n        this.initialisedPluginList[name] = true;\n        this.fireEvent('plugin-initialised', name);\n        return this;\n    }\n\n    /**\n     * Destroy a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-destroyed\n     * @example wavesurfer.destroyPlugin('minimap');\n     * @returns {this}\n     */\n    destroyPlugin(name) {\n        if (!this[name]) {\n            throw new Error(\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\n            );\n        }\n        if (!this.initialisedPluginList[name]) {\n            throw new Error(\n                `Plugin ${name} is not active and cannot be destroyed!`\n            );\n        }\n        if (typeof this[name].destroy !== 'function') {\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\n        }\n\n        this[name].destroy();\n        delete this.initialisedPluginList[name];\n        this.fireEvent('plugin-destroyed', name);\n        return this;\n    }\n\n    /**\n     * Destroy all initialised plugins. Convenience function to use when\n     * wavesurfer is removed\n     *\n     * @private\n     */\n    destroyAllPlugins() {\n        Object.keys(this.initialisedPluginList).forEach(name =>\n            this.destroyPlugin(name)\n        );\n    }\n\n    /**\n     * Create the drawer and draw the waveform\n     *\n     * @private\n     * @emits WaveSurfer#drawer-created\n     */\n    createDrawer() {\n        this.drawer = new this.Drawer(this.container, this.params);\n        this.drawer.init();\n        this.fireEvent('drawer-created', this.drawer);\n\n        if (this.params.responsive !== false) {\n            window.addEventListener('resize', this._onResize, true);\n            window.addEventListener('orientationchange', this._onResize, true);\n        }\n\n        this.drawer.on('redraw', () => {\n            this.drawBuffer();\n            this.drawer.progress(this.backend.getPlayedPercents());\n        });\n\n        // Click-to-seek\n        this.drawer.on('click', (e, progress) => {\n            setTimeout(() => this.seekTo(progress), 0);\n        });\n\n        // Relay the scroll event from the drawer\n        this.drawer.on('scroll', e => {\n            if (this.params.partialRender) {\n                this.drawBuffer();\n            }\n            this.fireEvent('scroll', e);\n        });\n    }\n\n    /**\n     * Create the backend\n     *\n     * @private\n     * @emits WaveSurfer#backend-created\n     */\n    createBackend() {\n        if (this.backend) {\n            this.backend.destroy();\n        }\n\n        // Back compat\n        if (this.params.backend == 'AudioElement') {\n            this.params.backend = 'MediaElement';\n        }\n\n        if (\n            this.params.backend == 'WebAudio' &&\n            !this.Backend.prototype.supportsWebAudio.call(null)\n        ) {\n            this.params.backend = 'MediaElement';\n        }\n\n        this.backend = new this.Backend(this.params);\n        this.backend.init();\n        this.fireEvent('backend-created', this.backend);\n\n        this.backend.on('finish', () => this.fireEvent('finish'));\n        this.backend.on('play', () => this.fireEvent('play'));\n        this.backend.on('pause', () => this.fireEvent('pause'));\n\n        this.backend.on('audioprocess', time => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('audioprocess', time);\n        });\n    }\n\n    /**\n     * Create the peak cache\n     *\n     * @private\n     */\n    createPeakCache() {\n        if (this.params.partialRender) {\n            this.peakCache = new PeakCache();\n        }\n    }\n\n    /**\n     * Get the duration of the audio clip\n     *\n     * @example const duration = wavesurfer.getDuration();\n     * @return {number} Duration in seconds\n     */\n    getDuration() {\n        return this.backend.getDuration();\n    }\n\n    /**\n     * Get the current playback position\n     *\n     * @example const currentTime = wavesurfer.getCurrentTime();\n     * @return {number} Playback position in seconds\n     */\n    getCurrentTime() {\n        return this.backend.getCurrentTime();\n    }\n\n    /**\n     * Set the current play time in seconds.\n     *\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n     * seconds, 60 means 1 minute\n     */\n    setCurrentTime(seconds) {\n        if (this.getDuration() >= seconds) {\n            this.seekTo(1);\n        } else {\n            this.seekTo(seconds / this.getDuration());\n        }\n    }\n\n    /**\n     * Starts playback from the current position. Optional start and end\n     * measured in seconds can be used to set the range of audio to play.\n     *\n     * @param {?number} start Position to start at\n     * @param {?number} end Position to end at\n     * @emits WaveSurfer#interaction\n     * @example\n     * // play from second 1 to 5\n     * wavesurfer.play(1, 5);\n     */\n    play(start, end) {\n        this.fireEvent('interaction', () => this.play(start, end));\n        this.backend.play(start, end);\n    }\n\n    /**\n     * Stops playback\n     *\n     * @example wavesurfer.pause();\n     */\n    pause() {\n        this.backend.isPaused() || this.backend.pause();\n    }\n\n    /**\n     * Toggle playback\n     *\n     * @example wavesurfer.playPause();\n     */\n    playPause() {\n        this.backend.isPaused() ? this.play() : this.pause();\n    }\n\n    /**\n     * Get the current playback state\n     *\n     * @example const isPlaying = wavesurfer.isPlaying();\n     * @return {boolean} False if paused, true if playing\n     */\n    isPlaying() {\n        return !this.backend.isPaused();\n    }\n\n    /**\n     * Skip backward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipBackward();\n     */\n    skipBackward(seconds) {\n        this.skip(-seconds || -this.params.skipLength);\n    }\n\n    /**\n     * Skip forward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipForward();\n     */\n    skipForward(seconds) {\n        this.skip(seconds || this.params.skipLength);\n    }\n\n    /**\n     * Skip a number of seconds from the current position (use a negative value\n     * to go backwards).\n     *\n     * @param {number} offset Amount to skip back or forwards\n     * @example\n     * // go back 2 seconds\n     * wavesurfer.skip(-2);\n     */\n    skip(offset) {\n        const duration = this.getDuration() || 1;\n        let position = this.getCurrentTime() || 0;\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\n        this.seekAndCenter(position / duration);\n    }\n\n    /**\n     * Seeks to a position and centers the view\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @example\n     * // seek and go to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekAndCenter(progress) {\n        this.seekTo(progress);\n        this.drawer.recenter(progress);\n    }\n\n    /**\n     * Seeks to a position\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @emits WaveSurfer#interaction\n     * @emits WaveSurfer#seek\n     * @example\n     * // seek to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekTo(progress) {\n        // return an error if progress is not a number between 0 and 1\n        if (\n            typeof progress !== 'number' ||\n            !isFinite(progress) ||\n            progress < 0 ||\n            progress > 1\n        ) {\n            return console.error(\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\n            );\n        }\n        this.fireEvent('interaction', () => this.seekTo(progress));\n\n        const paused = this.backend.isPaused();\n        // avoid draw wrong position while playing backward seeking\n        if (!paused) {\n            this.backend.pause();\n        }\n        // avoid small scrolls while paused seeking\n        const oldScrollParent = this.params.scrollParent;\n        this.params.scrollParent = false;\n        this.backend.seekTo(progress * this.getDuration());\n        this.drawer.progress(progress);\n\n        if (!paused) {\n            this.backend.play();\n        }\n        this.params.scrollParent = oldScrollParent;\n        this.fireEvent('seek', progress);\n    }\n\n    /**\n     * Stops and goes to the beginning.\n     *\n     * @example wavesurfer.stop();\n     */\n    stop() {\n        this.pause();\n        this.seekTo(0);\n        this.drawer.progress(0);\n    }\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    setVolume(newVolume) {\n        this.backend.setVolume(newVolume);\n    }\n\n    /**\n     * Get the playback volume.\n     *\n     * @return {number} A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    getVolume() {\n        return this.backend.getVolume();\n    }\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\n     * speed, 2 means double speed and so on.\n     * @example wavesurfer.setPlaybackRate(2);\n     */\n    setPlaybackRate(rate) {\n        this.backend.setPlaybackRate(rate);\n    }\n\n    /**\n     * Get the playback rate.\n     *\n     * @return {number}\n     */\n    getPlaybackRate() {\n        return this.backend.getPlaybackRate();\n    }\n\n    /**\n     * Toggle the volume on and off. It not currenly muted it will save the\n     * current volume value and turn the volume off. If currently muted then it\n     * will restore the volume to the saved value, and then rest the saved\n     * value.\n     *\n     * @example wavesurfer.toggleMute();\n     */\n    toggleMute() {\n        this.setMute(!this.isMuted);\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @param {boolean} mute\n     * @example\n     * // unmute\n     * wavesurfer.setMute(false);\n     */\n    setMute(mute) {\n        // ignore all muting requests if the audio is already in that state\n        if (mute === this.isMuted) {\n            return;\n        }\n\n        if (mute) {\n            // If currently not muted then save current volume,\n            // turn off the volume and update the mute properties\n            this.savedVolume = this.backend.getVolume();\n            this.backend.setVolume(0);\n            this.isMuted = true;\n        } else {\n            // If currently muted then restore to the saved volume\n            // and update the mute properties\n            this.backend.setVolume(this.savedVolume);\n            this.isMuted = false;\n        }\n    }\n\n    /**\n     * Get the current mute status.\n     *\n     * @example const isMuted = wavesurfer.getMute();\n     * @return {boolean}\n     */\n    getMute() {\n        return this.isMuted;\n    }\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     *\n     * @return {array}\n     */\n    getFilters() {\n        return this.backend.filters || [];\n    }\n\n    /**\n     * Toggles `scrollParent` and redraws\n     *\n     * @example wavesurfer.toggleScroll();\n     */\n    toggleScroll() {\n        this.params.scrollParent = !this.params.scrollParent;\n        this.drawBuffer();\n    }\n\n    /**\n     * Toggle mouse interaction\n     *\n     * @example wavesurfer.toggleInteraction();\n     */\n    toggleInteraction() {\n        this.params.interact = !this.params.interact;\n    }\n\n    /**\n     * Get the fill color of the waveform after the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getWaveColor() {\n        return this.params.waveColor;\n    }\n\n    /**\n     * Set the fill color of the waveform after the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setWaveColor('#ddd');\n     */\n    setWaveColor(color) {\n        this.params.waveColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the waveform behind the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getProgressColor() {\n        return this.params.progressColor;\n    }\n\n    /**\n     * Set the fill color of the waveform behind the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setProgressColor('#400');\n     */\n    setProgressColor(color) {\n        this.params.progressColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @return {string} A CSS color string.\n     */\n    getCursorColor() {\n        return this.params.cursorColor;\n    }\n\n    /**\n     * Set the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setCursorColor('#222');\n     */\n    setCursorColor(color) {\n        this.params.cursorColor = color;\n        this.drawer.updateCursor();\n    }\n\n    /**\n     * Get the height of the waveform.\n     *\n     * @return {number} Height measured in pixels.\n     */\n    getHeight() {\n        return this.params.height;\n    }\n\n    /**\n     * Set the height of the waveform.\n     *\n     * @param {number} height Height measured in pixels.\n     * @example wavesurfer.setHeight(200);\n     */\n    setHeight(height) {\n        this.params.height = height;\n        this.drawer.setHeight(height * this.params.pixelRatio);\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the correct peaks for current wave viewport and render wave\n     *\n     * @private\n     * @emits WaveSurfer#redraw\n     */\n    drawBuffer() {\n        const nominalWidth = Math.round(\n            this.getDuration() *\n                this.params.minPxPerSec *\n                this.params.pixelRatio\n        );\n        const parentWidth = this.drawer.getWidth();\n        let width = nominalWidth;\n        let start = this.drawer.getScrollX();\n        let end = Math.max(start + parentWidth, width);\n        // Fill container\n        if (\n            this.params.fillParent &&\n            (!this.params.scrollParent || nominalWidth < parentWidth)\n        ) {\n            width = parentWidth;\n            start = 0;\n            end = width;\n        }\n\n        let peaks;\n        if (this.params.partialRender) {\n            const newRanges = this.peakCache.addRangeToPeakCache(\n                width,\n                start,\n                end\n            );\n            let i;\n            for (i = 0; i < newRanges.length; i++) {\n                peaks = this.backend.getPeaks(\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n                this.drawer.drawPeaks(\n                    peaks,\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n            }\n        } else {\n            peaks = this.backend.getPeaks(width, start, end);\n            this.drawer.drawPeaks(peaks, width, start, end);\n        }\n        this.fireEvent('redraw', peaks, width);\n    }\n\n    /**\n     * Horizontally zooms the waveform in and out. It also changes the parameter\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n     * with a falsey parameter will reset the zoom state.\n     *\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\n     * audio, if none is set the waveform returns to unzoomed state\n     * @emits WaveSurfer#zoom\n     * @example wavesurfer.zoom(20);\n     */\n    zoom(pxPerSec) {\n        if (!pxPerSec) {\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n            this.params.scrollParent = false;\n        } else {\n            this.params.minPxPerSec = pxPerSec;\n            this.params.scrollParent = true;\n        }\n\n        this.drawBuffer();\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n        this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Decode buffer and load\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer\n     */\n    loadArrayBuffer(arraybuffer) {\n        this.decodeArrayBuffer(arraybuffer, data => {\n            if (!this.isDestroyed) {\n                this.loadDecodedBuffer(data);\n            }\n        });\n    }\n\n    /**\n     * Directly load an externally decoded AudioBuffer\n     *\n     * @private\n     * @param {AudioBuffer} buffer\n     * @emits WaveSurfer#ready\n     */\n    loadDecodedBuffer(buffer) {\n        this.backend.load(buffer);\n        this.drawBuffer();\n        this.fireEvent('ready');\n        this.isReady = true;\n    }\n\n    /**\n     * Loads audio data from a Blob or File object\n     *\n     * @param {Blob|File} blob Audio data\n     * @example\n     */\n    loadBlob(blob) {\n        // Create file reader\n        const reader = new FileReader();\n        reader.addEventListener('progress', e => this.onProgress(e));\n        reader.addEventListener('load', e =>\n            this.loadArrayBuffer(e.target.result)\n        );\n        reader.addEventListener('error', () =>\n            this.fireEvent('error', 'Error reading file')\n        );\n        reader.readAsArrayBuffer(blob);\n        this.empty();\n    }\n\n    /**\n     * Loads audio and re-renders the waveform.\n     *\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\n     * audio element with the audio\n     * @param {?number[]|number[][]} peaks Wavesurfer does not have to decode\n     * the audio to render the waveform if this is specified\n     * @param {?string} preload (Use with backend `MediaElement`)\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\n     * @param {?number} duration The duration of the audio. This is used to\n     * render the peaks data in the correct size for the audio duration (as\n     * befits the current minPxPerSec and zoom value) without having to decode\n     * the audio.\n     * @example\n     * // using ajax or media element to load (depending on backend)\n     * wavesurfer.load('http://example.com/demo.wav');\n     *\n     * // setting preload attribute with media element backend and supplying\n     * peaks wavesurfer.load(\n     *   'http://example.com/demo.wav',\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n     *   true,\n     * );\n     */\n    load(url, peaks, preload, duration) {\n        this.empty();\n        this.isMuted = false;\n\n        if (preload) {\n            // check whether the preload attribute will be usable and if not log\n            // a warning listing the reasons why not and nullify the variable\n            const preloadIgnoreReasons = {\n                \"Preload is not 'auto', 'none' or 'metadata'\":\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                'Peaks are not provided': !peaks,\n                'Backend is not of type MediaElement':\n                    this.params.backend !== 'MediaElement',\n                'Url is not of type string': typeof url !== 'string'\n            };\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\n                reason => preloadIgnoreReasons[reason]\n            );\n            if (activeReasons.length) {\n                console.warn(\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\n                        activeReasons.join('\\n\\t- ')\n                );\n                // stop invalid values from being used\n                preload = null;\n            }\n        }\n\n        switch (this.params.backend) {\n            case 'WebAudio':\n                return this.loadBuffer(url, peaks, duration);\n            case 'MediaElement':\n                return this.loadMediaElement(url, peaks, preload, duration);\n        }\n    }\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     *\n     * @private\n     * @param {string} url\n     * @param {?number[]|number[][]} peaks\n     * @param {?number} duration\n     */\n    loadBuffer(url, peaks, duration) {\n        const load = action => {\n            if (action) {\n                this.tmpEvents.push(this.once('ready', action));\n            }\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\n        };\n\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.tmpEvents.push(this.once('interaction', load));\n        } else {\n            return load();\n        }\n    }\n\n    /**\n     * Either create a media element, or load an existing media element.\n     *\n     * @private\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n     * existing HTML5 Audio/Video Element\n     * @param {number[]|number[][]} peaks Array of peaks. Required to bypass web audio\n     * dependency\n     * @param {?boolean} preload Set to true if the preload attribute of the\n     * audio element should be enabled\n     * @param {?number} duration\n     */\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\n        let url = urlOrElt;\n\n        if (typeof urlOrElt === 'string') {\n            this.backend.load(url, this.mediaContainer, peaks, preload);\n        } else {\n            const elt = urlOrElt;\n            this.backend.loadElt(elt, peaks);\n\n            // If peaks are not provided,\n            // url = element.src so we can get peaks with web audio\n            url = elt.src;\n        }\n\n        this.tmpEvents.push(\n            this.backend.once('canplay', () => {\n                this.drawBuffer();\n                this.fireEvent('ready');\n                this.isReady = true;\n            }),\n            this.backend.once('error', err => this.fireEvent('error', err))\n        );\n\n        // If no pre-decoded peaks provided or pre-decoded peaks are\n        // provided with forceDecode flag, attempt to download the\n        // audio file and decode it with Web Audio.\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n        }\n\n        if (\n            (!peaks || this.params.forceDecode) &&\n            this.backend.supportsWebAudio()\n        ) {\n            this.getArrayBuffer(url, arraybuffer => {\n                this.decodeArrayBuffer(arraybuffer, buffer => {\n                    this.backend.buffer = buffer;\n                    this.backend.setPeaks(null);\n                    this.drawBuffer();\n                    this.fireEvent('waveform-ready');\n                });\n            });\n        }\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {Object} arraybuffer\n     * @param {function} callback\n     */\n    decodeArrayBuffer(arraybuffer, callback) {\n        this.arraybuffer = arraybuffer;\n\n        this.backend.decodeArrayBuffer(\n            arraybuffer,\n            data => {\n                // Only use the decoded data if we haven't been destroyed or\n                // another decode started in the meantime\n                if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\n                    callback(data);\n                    this.arraybuffer = null;\n                }\n            },\n            () => this.fireEvent('error', 'Error decoding audiobuffer')\n        );\n    }\n\n    /**\n     * Load an array buffer by ajax and pass to a callback\n     *\n     * @param {string} url\n     * @param {function} callback\n     * @private\n     */\n    getArrayBuffer(url, callback) {\n        const ajax = util.ajax({\n            url: url,\n            responseType: 'arraybuffer'\n        });\n\n        this.currentAjax = ajax;\n\n        this.tmpEvents.push(\n            ajax.on('progress', e => {\n                this.onProgress(e);\n            }),\n            ajax.on('success', (data, e) => {\n                callback(data);\n                this.currentAjax = null;\n            }),\n            ajax.on('error', e => {\n                this.fireEvent('error', 'XHR error: ' + e.target.statusText);\n                this.currentAjax = null;\n            })\n        );\n\n        return ajax;\n    }\n\n    /**\n     * Called while the audio file is loading\n     *\n     * @private\n     * @param {Event} e\n     * @emits WaveSurfer#loading\n     */\n    onProgress(e) {\n        let percentComplete;\n        if (e.lengthComputable) {\n            percentComplete = e.loaded / e.total;\n        } else {\n            // Approximate progress with an asymptotic\n            // function, and assume downloads in the 1-3 MB range.\n            percentComplete = e.loaded / (e.loaded + 1000000);\n        }\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    }\n\n    /**\n     * Exports PCM data into a JSON array and opens in a new window.\n     *\n     * @param {number} length=1024 The scale in which to export the peaks. (Integer)\n     * @param {number} accuracy=10000 (Integer)\n     * @param {?boolean} noWindow Set to true to disable opening a new\n     * window with the JSON\n     * @param {number} start\n     * @todo Update exportPCM to work with new getPeaks signature\n     * @return {JSON} JSON of peaks\n     */\n    exportPCM(length, accuracy, noWindow, start) {\n        length = length || 1024;\n        start = start || 0;\n        accuracy = accuracy || 10000;\n        noWindow = noWindow || false;\n        const peaks = this.backend.getPeaks(length, start);\n        const arr = [].map.call(\n            peaks,\n            val => Math.round(val * accuracy) / accuracy\n        );\n        const json = JSON.stringify(arr);\n        if (!noWindow) {\n            window.open(\n                'data:application/json;charset=utf-8,' +\n                    encodeURIComponent(json)\n            );\n        }\n        return json;\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is `image/png`. Other supported types are\n     * `image/jpeg` and `image/webp`.\n     *\n     * @param {string} format='image/png'\n     * @param {number} quality=1\n     * @return {string} data URI of image\n     */\n    exportImage(format, quality) {\n        if (!format) {\n            format = 'image/png';\n        }\n        if (!quality) {\n            quality = 1;\n        }\n\n        return this.drawer.getImage(format, quality);\n    }\n\n    /**\n     * Cancel any ajax request currently in progress\n     */\n    cancelAjax() {\n        if (this.currentAjax) {\n            this.currentAjax.xhr.abort();\n            this.currentAjax = null;\n        }\n    }\n\n    /**\n     * @private\n     */\n    clearTmpEvents() {\n        this.tmpEvents.forEach(e => e.un());\n    }\n\n    /**\n     * Display empty waveform.\n     */\n    empty() {\n        if (!this.backend.isPaused()) {\n            this.stop();\n            this.backend.disconnectSource();\n        }\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.drawer.progress(0);\n        this.drawer.setWidth(0);\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n    }\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     *\n     * @emits WaveSurfer#destroy\n     */\n    destroy() {\n        this.destroyAllPlugins();\n        this.fireEvent('destroy');\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.unAll();\n        if (this.params.responsive !== false) {\n            window.removeEventListener('resize', this._onResize, true);\n            window.removeEventListener(\n                'orientationchange',\n                this._onResize,\n                true\n            );\n        }\n        this.backend.destroy();\n        this.drawer.destroy();\n        this.isDestroyed = true;\n        this.arraybuffer = null;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/wavesurfer.js","import Observer from './observer';\n\n/**\n * Perform an ajax request\n *\n * @param {Options} options Description\n *\n * @returns {Object} Observer instance\n */\nexport default function ajax(options) {\n    const instance = new Observer();\n    const xhr = new XMLHttpRequest();\n    let fired100 = false;\n    xhr.open(options.method || 'GET', options.url, true);\n    xhr.responseType = options.responseType || 'json';\n    xhr.addEventListener('progress', e => {\n        instance.fireEvent('progress', e);\n        if (e.lengthComputable && e.loaded == e.total) {\n            fired100 = true;\n        }\n    });\n    xhr.addEventListener('load', e => {\n        if (!fired100) {\n            instance.fireEvent('progress', e);\n        }\n        instance.fireEvent('load', e);\n        if (200 == xhr.status || 206 == xhr.status) {\n            instance.fireEvent('success', xhr.response, e);\n        } else {\n            instance.fireEvent('error', e);\n        }\n    });\n    xhr.addEventListener('error', e => instance.fireEvent('error', e));\n    xhr.send();\n    instance.xhr = xhr;\n    return instance;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/ajax.js","/**\n * Get a random prefixed ID\n *\n * @returns {String} Random ID\n */\nexport default function getId() {\n    return (\n        'wavesurfer_' +\n        Math.random()\n            .toString(32)\n            .substring(2)\n    );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/get-id.js","/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n */\nexport default function max(values) {\n    let largest = -Infinity;\n    Object.keys(values).forEach(i => {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    });\n    return largest;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/max.js","/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number}       Smallest number found\n */\nexport default function min(values) {\n    let smallest = Number(Infinity);\n    Object.keys(values).forEach(i => {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    });\n    return smallest;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/min.js","/**\n * Extend an object shallowly with others\n *\n * @param {Object} dest The target object\n * @param {Object[]} sources The objects to use for extending\n *\n * @return {Object} Merged object\n */\nexport default function extend(dest, ...sources) {\n    sources.forEach(source => {\n        Object.keys(source).forEach(key => {\n            dest[key] = source[key];\n        });\n    });\n    return dest;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/extend.js","/**\n * Apply a map of styles to an element\n *\n * @param {HTMLElement} el The element that the styles will be applied to\n * @param {Object} styles The map of propName: attribute, both are used as-is\n *\n * @return {HTMLElement} el\n */\nexport default function style(el, styles) {\n    Object.keys(styles).forEach(prop => {\n        if (el.style[prop] !== styles[prop]) {\n            el.style[prop] = styles[prop];\n        }\n    });\n    return el;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/style.js","import reqAnimationFrame from './request-animation-frame';\n\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nexport default function frame(func) {\n    return (...args) => reqAnimationFrame(() => func(...args));\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/frame.js","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\n\nmodule.exports = function debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/debounce/index.js\n// module id = 12\n// module chunks = 0","import Drawer from './drawer';\nimport * as util from './util';\n\n/**\n * @typedef {Object} CanvasEntry\n * @private\n * @property {HTMLElement} wave The wave node\n * @property {CanvasRenderingContext2D} waveCtx The canvas rendering context\n * @property {?HTMLElement} progress The progress wave node\n * @property {?CanvasRenderingContext2D} progressCtx The progress wave canvas\n * rendering context\n * @property {?number} start Start of the area the canvas should render, between 0 and 1\n * @property {?number} end End of the area the canvas should render, between 0 and 1\n */\n\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole built\n * in renderer.\n */\nexport default class MultiCanvas extends Drawer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super(container, params);\n        /**\n         * @type {number}\n         * @private\n         */\n        this.maxCanvasWidth = params.maxCanvasWidth;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.maxCanvasElementWidth = Math.round(\n            params.maxCanvasWidth / params.pixelRatio\n        );\n\n        /**\n         * Whether or not the progress wave is renderered. If the `waveColor`\n         * and `progressColor` are the same colour it is not.\n         * @type {boolean}\n         */\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.halfPixel = 0.5 / params.pixelRatio;\n        /**\n         * @private\n         * @type {Array}\n         */\n        this.canvases = [];\n        /** @private */\n        this.progressWave = null;\n    }\n\n    /**\n     * Initialise the drawer\n     */\n    init() {\n        this.createWrapper();\n        this.createElements();\n    }\n\n    /**\n     * Create the canvas elements and style them\n     *\n     * @private\n     */\n    createElements() {\n        this.progressWave = this.wrapper.appendChild(\n            this.style(document.createElement('wave'), {\n                position: 'absolute',\n                zIndex: 3,\n                left: 0,\n                top: 0,\n                bottom: 0,\n                overflow: 'hidden',\n                width: '0',\n                display: 'none',\n                boxSizing: 'border-box',\n                borderRightStyle: 'solid',\n                pointerEvents: 'none'\n            })\n        );\n\n        this.addCanvas();\n        this.updateCursor();\n    }\n\n    /**\n     * Update cursor style from params.\n     */\n    updateCursor() {\n        this.style(this.progressWave, {\n            borderRightWidth: this.params.cursorWidth + 'px',\n            borderRightColor: this.params.cursorColor\n        });\n    }\n\n    /**\n     * Adjust to the updated size by adding or removing canvases\n     */\n    updateSize() {\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n        const requiredCanvases = Math.ceil(\n            totalWidth / this.maxCanvasElementWidth\n        );\n\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n\n        this.canvases.forEach((entry, i) => {\n            // Add some overlap to prevent vertical white stripes, keep the width even for simplicity.\n            let canvasWidth =\n                this.maxCanvasWidth + 2 * Math.ceil(this.params.pixelRatio / 2);\n\n            if (i == this.canvases.length - 1) {\n                canvasWidth =\n                    this.width -\n                    this.maxCanvasWidth * (this.canvases.length - 1);\n            }\n\n            this.updateDimensions(entry, canvasWidth, this.height);\n            this.clearWaveForEntry(entry);\n        });\n    }\n\n    /**\n     * Add a canvas to the canvas list\n     *\n     * @private\n     */\n    addCanvas() {\n        const entry = {};\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n        entry.wave = this.wrapper.appendChild(\n            this.style(document.createElement('canvas'), {\n                position: 'absolute',\n                zIndex: 2,\n                left: leftOffset + 'px',\n                top: 0,\n                bottom: 0,\n                height: '100%',\n                pointerEvents: 'none'\n            })\n        );\n        entry.waveCtx = entry.wave.getContext('2d');\n\n        if (this.hasProgressCanvas) {\n            entry.progress = this.progressWave.appendChild(\n                this.style(document.createElement('canvas'), {\n                    position: 'absolute',\n                    left: leftOffset + 'px',\n                    top: 0,\n                    bottom: 0,\n                    height: '100%'\n                })\n            );\n            entry.progressCtx = entry.progress.getContext('2d');\n        }\n\n        this.canvases.push(entry);\n    }\n\n    /**\n     * Pop one canvas from the list\n     *\n     * @private\n     */\n    removeCanvas() {\n        const lastEntry = this.canvases.pop();\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave);\n        if (this.hasProgressCanvas) {\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress);\n        }\n    }\n\n    /**\n     * Update the dimensions of a canvas element\n     *\n     * @private\n     * @param {CanvasEntry} entry\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(entry, width, height) {\n        const elementWidth = Math.round(width / this.params.pixelRatio);\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n        // Where the canvas starts and ends in the waveform, represented as a decimal between 0 and 1.\n        entry.start = entry.waveCtx.canvas.offsetLeft / totalWidth || 0;\n        entry.end = entry.start + elementWidth / totalWidth;\n\n        entry.waveCtx.canvas.width = width;\n        entry.waveCtx.canvas.height = height;\n        this.style(entry.waveCtx.canvas, { width: elementWidth + 'px' });\n\n        this.style(this.progressWave, { display: 'block' });\n\n        if (this.hasProgressCanvas) {\n            entry.progressCtx.canvas.width = width;\n            entry.progressCtx.canvas.height = height;\n            this.style(entry.progressCtx.canvas, {\n                width: elementWidth + 'px'\n            });\n        }\n    }\n\n    /**\n     * Clear the whole waveform\n     */\n    clearWave() {\n        this.canvases.forEach(entry => this.clearWaveForEntry(entry));\n    }\n\n    /**\n     * Clear one canvas\n     *\n     * @private\n     * @param {CanvasEntry} entry\n     */\n    clearWaveForEntry(entry) {\n        entry.waveCtx.clearRect(\n            0,\n            0,\n            entry.waveCtx.canvas.width,\n            entry.waveCtx.canvas.height\n        );\n        if (this.hasProgressCanvas) {\n            entry.progressCtx.clearRect(\n                0,\n                0,\n                entry.progressCtx.canvas.width,\n                entry.progressCtx.canvas.height\n            );\n        }\n    }\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0. Must be an integer.\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawBars(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\n                // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n                if (start === undefined) {\n                    return;\n                }\n                // Skip every other value if there are negatives.\n                const peakIndexScale = hasMinVals ? 2 : 1;\n                const length = peaks.length / peakIndexScale;\n                const bar = this.params.barWidth * this.params.pixelRatio;\n                const gap = Math.max(this.params.pixelRatio, ~~(bar / 2));\n                const step = bar + gap;\n\n                const scale = length / this.width;\n                const first = start;\n                const last = end;\n                let i;\n\n                for (i = first; i < last; i += step) {\n                    const peak =\n                        peaks[Math.floor(i * scale * peakIndexScale)] || 0;\n                    const h = Math.round(peak / absmax * halfH);\n                    this.fillRect(\n                        i + this.halfPixel,\n                        halfH - h + offsetY,\n                        bar + this.halfPixel,\n                        h * 2\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Draw a waveform\n     *\n     * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawWave(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\n                if (!hasMinVals) {\n                    const reflectedPeaks = [];\n                    const len = peaks.length;\n                    let i;\n                    for (i = 0; i < len; i++) {\n                        reflectedPeaks[2 * i] = peaks[i];\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n                    peaks = reflectedPeaks;\n                }\n\n                // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n                if (start !== undefined) {\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end);\n                }\n\n                // Always draw a median line\n                this.fillRect(\n                    0,\n                    halfH + offsetY - this.halfPixel,\n                    this.width,\n                    this.halfPixel\n                );\n            }\n        );\n    }\n\n    /**\n     * Tell the canvas entries to render their portion of the waveform\n     *\n     * @private\n     * @param {number[]} peaks Peak data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLine(peaks, absmax, halfH, offsetY, start, end) {\n        this.canvases.forEach(entry => {\n            this.setFillStyles(entry);\n            this.drawLineToContext(\n                entry,\n                entry.waveCtx,\n                peaks,\n                absmax,\n                halfH,\n                offsetY,\n                start,\n                end\n            );\n            this.drawLineToContext(\n                entry,\n                entry.progressCtx,\n                peaks,\n                absmax,\n                halfH,\n                offsetY,\n                start,\n                end\n            );\n        });\n    }\n\n    /**\n     * Render the actual waveform line on a canvas\n     *\n     * @private\n     * @param {CanvasEntry} entry\n     * @param {Canvas2DContextAttributes} ctx Essentially `entry.[wave|progress]Ctx`\n     * @param {number[]} peaks\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLineToContext(entry, ctx, peaks, absmax, halfH, offsetY, start, end) {\n        if (!ctx) {\n            return;\n        }\n\n        const length = peaks.length / 2;\n        const scale =\n            this.params.fillParent && this.width != length\n                ? this.width / length\n                : 1;\n\n        const first = Math.round(length * entry.start);\n        // Use one more peak value to make sure we join peaks at ends -- unless,\n        // of course, this is the last canvas.\n        const last = Math.round(length * entry.end) + 1;\n        if (first > end || last < start) {\n            return;\n        }\n        const canvasStart = Math.min(first, start);\n        const canvasEnd = Math.max(last, end);\n        let i;\n        let j;\n\n        ctx.beginPath();\n        ctx.moveTo(\n            (canvasStart - first) * scale + this.halfPixel,\n            halfH + offsetY\n        );\n\n        for (i = canvasStart; i < canvasEnd; i++) {\n            const peak = peaks[2 * i] || 0;\n            const h = Math.round(peak / absmax * halfH);\n            ctx.lineTo(\n                (i - first) * scale + this.halfPixel,\n                halfH - h + offsetY\n            );\n        }\n\n        // Draw the bottom edge going backwards, to make a single\n        // closed hull to fill.\n        for (j = canvasEnd - 1; j >= canvasStart; j--) {\n            const peak = peaks[2 * j + 1] || 0;\n            const h = Math.round(peak / absmax * halfH);\n            ctx.lineTo(\n                (j - first) * scale + this.halfPixel,\n                halfH - h + offsetY\n            );\n        }\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Draw a rectangle on the waveform\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     */\n    fillRect(x, y, width, height) {\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\n        const endCanvas = Math.min(\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\n            this.canvases.length\n        );\n        let i;\n        for (i = startCanvas; i < endCanvas; i++) {\n            const entry = this.canvases[i];\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(\n                    x + width,\n                    i * this.maxCanvasWidth + entry.waveCtx.canvas.width\n                ),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                this.setFillStyles(entry);\n\n                this.fillRectToContext(\n                    entry.waveCtx,\n                    intersection.x1 - leftOffset,\n                    intersection.y1,\n                    intersection.x2 - intersection.x1,\n                    intersection.y2 - intersection.y1\n                );\n\n                this.fillRectToContext(\n                    entry.progressCtx,\n                    intersection.x1 - leftOffset,\n                    intersection.y1,\n                    intersection.x2 - intersection.x1,\n                    intersection.y2 - intersection.y1\n                );\n            }\n        }\n    }\n\n    /**\n     * Performs preparation tasks and calculations which are shared by drawBars and drawWave\n     *\n     * @private\n     * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @param {function} fn The render function to call\n     */\n    prepareDraw(peaks, channelIndex, start, end, fn) {\n        return util.frame(() => {\n            // Split channels and call this function with the channelIndex set\n            if (peaks[0] instanceof Array) {\n                const channels = peaks;\n                if (this.params.splitChannels) {\n                    this.setHeight(\n                        channels.length *\n                            this.params.height *\n                            this.params.pixelRatio\n                    );\n                    return channels.forEach((channelPeaks, i) =>\n                        this.prepareDraw(channelPeaks, i, start, end, fn)\n                    );\n                }\n                peaks = channels[0];\n            }\n            // calculate maximum modulation value, either from the barHeight\n            // parameter or if normalize=true from the largest value in the peak\n            // set\n            let absmax = 1 / this.params.barHeight;\n            if (this.params.normalize) {\n                const max = util.max(peaks);\n                const min = util.min(peaks);\n                absmax = -min > max ? -min : max;\n            }\n\n            // Bar wave draws the bottom only as a reflection of the top,\n            // so we don't need negative values\n            const hasMinVals = [].some.call(peaks, val => val < 0);\n            const height = this.params.height * this.params.pixelRatio;\n            const offsetY = height * channelIndex || 0;\n            const halfH = height / 2;\n\n            return fn({\n                absmax: absmax,\n                hasMinVals: hasMinVals,\n                height: height,\n                offsetY: offsetY,\n                halfH: halfH,\n                peaks: peaks\n            });\n        })();\n    }\n\n    /**\n     * Draw the actual rectangle on a canvas\n     *\n     * @private\n     * @param {Canvas2DContextAttributes} ctx\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     */\n    fillRectToContext(ctx, x, y, width, height) {\n        if (!ctx) {\n            return;\n        }\n        ctx.fillRect(x, y, width, height);\n    }\n\n    /**\n     * Set the fill styles for a certain entry (wave and progress)\n     *\n     * @private\n     * @param {CanvasEntry} entry\n     */\n    setFillStyles(entry) {\n        entry.waveCtx.fillStyle = this.params.waveColor;\n        if (this.hasProgressCanvas) {\n            entry.progressCtx.fillStyle = this.params.progressColor;\n        }\n    }\n\n    /**\n     * Return image data of the waveform\n     *\n     * @param {string} type='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @return {string|string[]} images A data URL or an array of data URLs\n     */\n    getImage(type, quality) {\n        const images = this.canvases.map(entry =>\n            entry.wave.toDataURL(type, quality)\n        );\n        return images.length > 1 ? images : images[0];\n    }\n\n    /**\n     * Render the new progress\n     *\n     * @param {number} position X-Offset of progress position in pixels\n     */\n    updateProgress(position) {\n        this.style(this.progressWave, { width: position + 'px' });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/drawer.multicanvas.js","import * as util from './util';\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nexport default class Drawer extends util.Observer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super();\n        /** @private */\n        this.container = container;\n        /**\n         * @type {WavesurferParams}\n         * @private\n         */\n        this.params = params;\n        /**\n         * The width of the renderer\n         * @type {number}\n         */\n        this.width = 0;\n        /**\n         * The height of the renderer\n         * @type {number}\n         */\n        this.height = params.height * this.params.pixelRatio;\n        /** @private */\n        this.lastPos = 0;\n        /**\n         * The `<wave>` element which is added to the container\n         * @type {HTMLElement}\n         */\n        this.wrapper = null;\n    }\n\n    /**\n     * Alias of `util.style`\n     *\n     * @param {HTMLElement} el The element that the styles will be applied to\n     * @param {Object} styles The map of propName: attribute, both are used as-is\n     * @return {HTMLElement} el\n     */\n    style(el, styles) {\n        return util.style(el, styles);\n    }\n\n    /**\n     * Create the wrapper `<wave>` element, style it and set up the events for\n     * interaction\n     */\n    createWrapper() {\n        this.wrapper = this.container.appendChild(\n            document.createElement('wave')\n        );\n\n        this.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: this.params.height + 'px'\n        });\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: '100%',\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.setupWrapperEvents();\n    }\n\n    /**\n     * Handle click event\n     *\n     * @param {Event} e Click event\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n     * @return {number} Playback position from 0 to 1\n     */\n    handleEvent(e, noPrevent) {\n        !noPrevent && e.preventDefault();\n\n        const clientX = e.targetTouches\n            ? e.targetTouches[0].clientX\n            : e.clientX;\n        const bbox = this.wrapper.getBoundingClientRect();\n\n        const nominalWidth = this.width;\n        const parentWidth = this.getWidth();\n\n        let progress;\n\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\n            progress =\n                (clientX - bbox.left) * this.params.pixelRatio / nominalWidth ||\n                0;\n\n            if (progress > 1) {\n                progress = 1;\n            }\n        } else {\n            progress =\n                (clientX - bbox.left + this.wrapper.scrollLeft) /\n                    this.wrapper.scrollWidth || 0;\n        }\n\n        return progress;\n    }\n\n    /**\n     * @private\n     */\n    setupWrapperEvents() {\n        this.wrapper.addEventListener('click', e => {\n            const scrollbarHeight =\n                this.wrapper.offsetHeight - this.wrapper.clientHeight;\n            if (scrollbarHeight != 0) {\n                // scrollbar is visible.  Check if click was on it\n                const bbox = this.wrapper.getBoundingClientRect();\n                if (e.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                }\n            }\n\n            if (this.params.interact) {\n                this.fireEvent('click', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('scroll', e =>\n            this.fireEvent('scroll', e)\n        );\n    }\n\n    /**\n     * Draw peaks on the canvas\n     *\n     * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} length The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawPeaks(peaks, length, start, end) {\n        if (!this.setWidth(length)) {\n            this.clearWave();\n        }\n\n        this.params.barWidth\n            ? this.drawBars(peaks, 0, start, end)\n            : this.drawWave(peaks, 0, start, end);\n    }\n\n    /**\n     * Scroll to the beginning\n     */\n    resetScroll() {\n        if (this.wrapper !== null) {\n            this.wrapper.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * Recenter the viewport at a certain percent of the waveform\n     *\n     * @param {number} percent Value from 0 to 1 on the waveform\n     */\n    recenter(percent) {\n        const position = this.wrapper.scrollWidth * percent;\n        this.recenterOnPosition(position, true);\n    }\n\n    /**\n     * Recenter the viewport on a position, either scroll there immediately or\n     * in steps of 5 pixels\n     *\n     * @param {number} position X-offset in pixels\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\n     */\n    recenterOnPosition(position, immediate) {\n        const scrollLeft = this.wrapper.scrollLeft;\n        const half = ~~(this.wrapper.clientWidth / 2);\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n        let target = position - half;\n        let offset = target - scrollLeft;\n\n        if (maxScroll == 0) {\n            // no need to continue if scrollbar is not there\n            return;\n        }\n\n        // if the cursor is currently visible...\n        if (!immediate && -half <= offset && offset < half) {\n            // we'll limit the \"re-center\" rate.\n            const rate = 5;\n            offset = Math.max(-rate, Math.min(rate, offset));\n            target = scrollLeft + offset;\n        }\n\n        // limit target to valid range (0 to maxScroll)\n        target = Math.max(0, Math.min(maxScroll, target));\n        // no use attempting to scroll if we're not moving\n        if (target != scrollLeft) {\n            this.wrapper.scrollLeft = target;\n        }\n    }\n\n    /**\n     * Get the current scroll position in pixels\n     *\n     * @return {number}\n     */\n    getScrollX() {\n        return Math.round(this.wrapper.scrollLeft * this.params.pixelRatio);\n    }\n\n    /**\n     * Get the width of the container\n     *\n     * @return {number}\n     */\n    getWidth() {\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    }\n\n    /**\n     * Set the width of the container\n     *\n     * @param {number} width\n     */\n    setWidth(width) {\n        if (this.width == width) {\n            return false;\n        }\n\n        this.width = width;\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: ''\n            });\n        } else {\n            this.style(this.wrapper, {\n                width: ~~(this.width / this.params.pixelRatio) + 'px'\n            });\n        }\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Set the height of the container\n     *\n     * @param {number} height\n     */\n    setHeight(height) {\n        if (height == this.height) {\n            return false;\n        }\n        this.height = height;\n\n        this.style(this.wrapper, {\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\n        });\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Called by wavesurfer when progress should be renderered\n     *\n     * @param {number} progress From 0 to 1\n     */\n    progress(progress) {\n        const minPxDelta = 1 / this.params.pixelRatio;\n        const pos = Math.round(progress * this.width) * minPxDelta;\n\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n            this.lastPos = pos;\n\n            if (this.params.scrollParent && this.params.autoCenter) {\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\n                this.recenterOnPosition(newPos);\n            }\n\n            this.updateProgress(pos);\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        this.unAll();\n        if (this.wrapper) {\n            if (this.wrapper.parentNode == this.container) {\n                this.container.removeChild(this.wrapper);\n            }\n            this.wrapper = null;\n        }\n    }\n\n    /* Renderer-specific methods */\n\n    /**\n     * Called after cursor related params have changed.\n     *\n     * @abstract\n     */\n    updateCursor() {}\n\n    /**\n     * Called when the size of the container changes so the renderer can adjust\n     *\n     * @abstract\n     */\n    updateSize() {}\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @abstract\n     * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawBars(peaks, channelIndex, start, end) {}\n\n    /**\n     * Draw a waveform\n     *\n     * @abstract\n     * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawWave(peaks, channelIndex, start, end) {}\n\n    /**\n     * Clear the waveform\n     *\n     * @abstract\n     */\n    clearWave() {}\n\n    /**\n     * Render the new progress\n     *\n     * @abstract\n     * @param {number} position X-Offset of progress position in pixels\n     */\n    updateProgress(position) {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/drawer.js","import WebAudio from './webaudio';\nimport * as util from './util';\n\n/**\n * MediaElement backend\n */\nexport default class MediaElement extends WebAudio {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n\n        // Dummy media to catch errors\n        /** @private */\n        this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play() {},\n            pause() {}\n        };\n\n        /** @private */\n        this.mediaType = params.mediaType.toLowerCase();\n        /** @private */\n        this.elementPosition = params.elementPosition;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.onPlayEnd = null;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n    }\n\n    /**\n     * Create a timer to provide a more precise `audioprocess` event.\n     *\n     * @private\n     */\n    createTimer() {\n        const onAudioProcess = () => {\n            if (this.isPaused()) {\n                return;\n            }\n            this.fireEvent('audioprocess', this.getCurrentTime());\n\n            // Call again in the next frame\n            const requestAnimationFrame =\n                window.requestAnimationFrame ||\n                window.webkitRequestAnimationFrame;\n            requestAnimationFrame(onAudioProcess);\n        };\n\n        this.on('play', onAudioProcess);\n    }\n\n    /**\n     * Create media element with url as its source,\n     * and append to container element.\n     *\n     * @param {string} url Path to media file\n     * @param {HTMLElement} container HTML element\n     * @param {number[]|number[][]} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     */\n    load(url, container, peaks, preload) {\n        const media = document.createElement(this.mediaType);\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n        media.preload = preload == null ? 'auto' : preload;\n        media.src = url;\n        media.style.width = '100%';\n\n        const prevMedia = container.querySelector(this.mediaType);\n        if (prevMedia) {\n            container.removeChild(prevMedia);\n        }\n        container.appendChild(media);\n\n        this._load(media, peaks);\n    }\n\n    /**\n     * Load existing media element.\n     *\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n     * @param {number[]|number[][]} peaks Array of peak data\n     */\n    loadElt(elt, peaks) {\n        elt.controls = this.params.mediaControls;\n        elt.autoplay = this.params.autoplay || false;\n\n        this._load(elt, peaks);\n    }\n\n    /**\n     * Private method called by both load (from url)\n     * and loadElt (existing media element).\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|number[][]} peaks Array of peak data\n     * @private\n     */\n    _load(media, peaks) {\n        // load must be called manually on iOS, otherwise peaks won't draw\n        // until a user interaction triggers load --> 'ready' event\n        if (typeof media.load == 'function') {\n            // Resets the media element and restarts the media resource. Any\n            // pending events are discarded. How much media data is fetched is\n            // still affected by the preload attribute.\n            media.load();\n        }\n\n        media.addEventListener('error', () => {\n            this.fireEvent('error', 'Error loading media element');\n        });\n\n        media.addEventListener('canplay', () => {\n            this.fireEvent('canplay');\n        });\n\n        media.addEventListener('ended', () => {\n            this.fireEvent('finish');\n        });\n\n        // Listen to and relay play and pause events to enable\n        // playback control from the external media element\n        media.addEventListener('play', () => {\n            this.fireEvent('play');\n        });\n\n        media.addEventListener('pause', () => {\n            this.fireEvent('pause');\n        });\n\n        this.media = media;\n        this.peaks = peaks;\n        this.onPlayEnd = null;\n        this.buffer = null;\n        this.setPlaybackRate(this.playbackRate);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean}\n     */\n    isPaused() {\n        return !this.media || this.media.paused;\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number}\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        let duration = (this.buffer || this.media).duration;\n        if (duration >= Infinity) {\n            // streaming audio\n            duration = this.media.seekable.end(0);\n        }\n        return duration;\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audioclip's\n     * duration.\n     *\n     * @return {number}\n     */\n    getCurrentTime() {\n        return this.media && this.media.currentTime;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number}\n     */\n    getPlayedPercents() {\n        return this.getCurrentTime() / this.getDuration() || 0;\n    }\n\n    /**\n     * Get the audio source playback rate.\n     *\n     * @return {number}\n     */\n    getPlaybackRate() {\n        return this.playbackRate || this.media.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.media.playbackRate = this.playbackRate;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     */\n    seekTo(start) {\n        if (start != null) {\n            this.media.currentTime = start;\n        }\n        this.clearPlayEnd();\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     * @emits MediaElement#play\n     */\n    play(start, end) {\n        this.seekTo(start);\n        this.media.play();\n        end && this.setPlayEnd(end);\n    }\n\n    /**\n     * Pauses the loaded audio.\n     *\n     * @emits MediaElement#pause\n     */\n    pause() {\n        this.media && this.media.pause();\n        this.clearPlayEnd();\n    }\n\n    /** @private */\n    setPlayEnd(end) {\n        this._onPlayEnd = time => {\n            if (time >= end) {\n                this.pause();\n                this.seekTo(end);\n            }\n        };\n        this.on('audioprocess', this._onPlayEnd);\n    }\n\n    /** @private */\n    clearPlayEnd() {\n        if (this._onPlayEnd) {\n            this.un('audioprocess', this._onPlayEnd);\n            this._onPlayEnd = null;\n        }\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|number[][]} Array of 2*<length> peaks or array of\n     * arrays of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.buffer) {\n            return super.getPeaks(length, first, last);\n        }\n        return this.peaks || [];\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.media.volume;\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.media.volume = value;\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        this.pause();\n        this.unAll();\n\n        if (\n            this.params.removeMediaElementOnDestroy &&\n            this.media &&\n            this.media.parentNode\n        ) {\n            this.media.parentNode.removeChild(this.media);\n        }\n\n        this.media = null;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/mediaelement.js","/**\n * Caches the decoded peaks data to improve rendering speed for lage audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nexport default class PeakCache {\n    /**\n     * Instantiate cache\n     */\n    constructor() {\n        this.clearPeakCache();\n    }\n\n    /**\n     * Empty the cache\n     */\n    clearPeakCache() {\n        /**\n         * Flat array with entries that are always in pairs to mark the\n         * beginning and end of each subrange.  This is a convenience so we can\n         * iterate over the pairs for easy set difference operations.\n         * @private\n         */\n        this.peakCacheRanges = [];\n        /**\n         * Length of the entire cachable region, used for resetting the cache\n         * when this changes (zoom events, for instance).\n         * @private\n         */\n        this.peakCacheLength = -1;\n    }\n\n    /**\n     * Add a range of peaks to the cache\n     *\n     * @param {number} length The length of the range\n     * @param {number} start The x offset of the start of the range\n     * @param {number} end The x offset of the end of the range\n     * @return {number[][]}\n     */\n    addRangeToPeakCache(length, start, end) {\n        if (length != this.peakCacheLength) {\n            this.clearPeakCache();\n            this.peakCacheLength = length;\n        }\n\n        // Return ranges that weren't in the cache before the call.\n        let uncachedRanges = [];\n        let i = 0;\n        // Skip ranges before the current start.\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] < start\n        ) {\n            i++;\n        }\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\n        // |start| falls between an existing range, and the uncached region\n        // starts when we encounter the next node in |peakCacheRanges| or\n        // |end|, whichever comes first.\n        if (i % 2 == 0) {\n            uncachedRanges.push(start);\n        }\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] <= end\n        ) {\n            uncachedRanges.push(this.peakCacheRanges[i]);\n            i++;\n        }\n        // If |i| is even, |end| is after all existing ranges.\n        if (i % 2 == 0) {\n            uncachedRanges.push(end);\n        }\n\n        // Filter out the 0-length ranges.\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            }\n            return item != arr[pos - 1] && item != arr[pos + 1];\n        });\n\n        // Merge the two ranges together, uncachedRanges will either contain\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\n        // duplicates are detected, remove both and extend the range.\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n        this.peakCacheRanges = this.peakCacheRanges\n            .sort((a, b) => a - b)\n            .filter((item, pos, arr) => {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n        // Push the uncached ranges into an array of arrays for ease of\n        // iteration in the functions that call this.\n        const uncachedRangePairs = [];\n        for (i = 0; i < uncachedRanges.length; i += 2) {\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n        }\n\n        return uncachedRangePairs;\n    }\n\n    /**\n     * For testing\n     *\n     * @return {number[][]}\n     */\n    getCacheRanges() {\n        const peakCacheRangePairs = [];\n        let i;\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n            peakCacheRangePairs.push([\n                this.peakCacheRanges[i],\n                this.peakCacheRanges[i + 1]\n            ]);\n        }\n        return peakCacheRangePairs;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/peakcache.js"],"sourceRoot":""}