/**
 * ng-inline-edit v0.5.0 (http://tamerayd.in/ng-inline-edit)
 * Copyright 2015 Tamer Aydin (http://tamerayd.in)
 * Licensed under MIT
 */
!function(n,i){"use strict";i.module("angularInlineEdit.constants",[]).constant("InlineEditConstants",{CANCEL:"cancel",SAVE:"save"})}(window,window.angular),function(n,i){"use strict";i.module("angularInlineEdit.controllers",[]).controller("InlineEditController",["$scope","$document","$timeout",function(n,i,e){n.validationError=!1,n.validating=!1,n.isOnBlurBehaviorValid=!1,n.cancelOnBlur=!1,n.editMode=!1,n.inputValue="",n.editText=function(t){n.editMode=!0,n.inputValue="string"==typeof t?t:n.model,e(function(){n.editInput[0].focus(),n.isOnBlurBehaviorValid&&i.bind("click",n.onDocumentClick)},0)},n.applyText=function(t,l){function a(){n.model=c,n.callback({newValue:c}),n.editMode=!1}function d(){n.validationError=!0,e(function(){n.editText(c)},0)}function o(i){n.validating=!1,i&&l&&n.$apply()}var c=n.inputValue;if(n.validationError=!1,t||n.model===c)n.editMode=!1,l&&n.$apply();else{n.validating=!0,l&&n.$apply();var u=n.validate({newValue:n.inputValue});u&&u.then?u.then(a)["catch"](d)["finally"](o):u||"undefined"==typeof u?(a(),o(!0)):(d(),o(!0))}n.isOnBlurBehaviorValid&&i.unbind("click",n.onDocumentClick)},n.onInputKeyup=function(i){if(!n.validating)switch(i.keyCode){case 13:n.applyText(!1,!1);break;case 27:n.applyText(!0,!1)}},n.onDocumentClick=function(i){n.validating||i.target!==n.editInput[0]&&n.applyText(n.cancelOnBlur,!0)}}])}(window,window.angular),function(n,i){"use strict";i.module("angularInlineEdit.directives",["angularInlineEdit.constants","angularInlineEdit.controllers"]).directive("inlineEdit",["$compile","InlineEditConstants",function(n,e){return{restrict:"A",controller:"InlineEditController",scope:{model:"=inlineEdit",callback:"&inlineEditCallback",validate:"&inlineEditValidation"},link:function(t,l,a){t.model=t.$parent.$eval(a.inlineEdit);var d=a.inlineEditOnBlur;(d===e.CANCEL||d===e.SAVE)&&(t.isOnBlurBehaviorValid=!0,t.cancelOnBlur=d===e.CANCEL);var o=i.element("<div class=\"ng-inline-edit\" ng-class=\"{'ng-inline-edit--validating': validating, 'ng-inline-edit--error': validationError}\">"),c=i.element('<input type="text" class="ng-inline-edit__input" ng-disabled="validating" ng-show="editMode" ng-keyup="onInputKeyup($event)" ng-model="inputValue" />'),u=i.element('<div class="ng-inline-edit__inner-container"></div>');u.append(i.element('<span class="ng-inline-edit__text" '+(a.hasOwnProperty("inlineEditOnClick")?'ng-click="editText()" ':"")+'ng-if="!editMode">{{model}}</span>')),a.inlineEditBtnEdit&&u.append(i.element('<a class="ng-inline-edit__button ng-inline-edit__button--edit" ng-if="!editMode" ng-click="editText()">'+a.inlineEditBtnEdit+"</a>")),a.inlineEditBtnSave&&u.append(i.element('<a class="ng-inline-edit__button ng-inline-edit__button--save" ng-if="editMode && !validating" ng-click="applyText(false, false)">'+a.inlineEditBtnSave+"</a>")),a.inlineEditBtnCancel&&u.append(i.element('<a class="ng-inline-edit__button ng-inline-edit__button--cancel" ng-if="editMode && !validating" ng-click="applyText(true, false)">'+a.inlineEditBtnCancel+"</a>")),o.append(c).append(u),l.append(o),t.editInput=c,a.$observe("inlineEdit",function(i){t.model=t.$parent.$eval(i),n(l.contents())(t)})}}}])}(window,window.angular),function(n,i){"use strict";i.module("angularInlineEdit",["angularInlineEdit.constants","angularInlineEdit.controllers","angularInlineEdit.directives"])}(window,window.angular);