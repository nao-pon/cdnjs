!function(o,t){"function"==typeof define&&define.amd?define(["videojs"],t):"object"==typeof module&&module.exports?module.exports=t(require("video.js")):o.returnExports=t(o.videojs)}(this,function(o){o.LibVorbisEngine=o.extend(o.RecordBase,{setup:function(o,t,e){this.inputStream=o,this.mediaType=t,this.debug=e,this.options={workerURL:this.audioWorkerURL,moduleURL:this.audioModuleURL,encoderOptions:{channels:this.audioChannels,sampleRate:this.sampleRate,quality:.8}}},start:function(){this.chunks=[],this.audioContext=new AudioContext,this.audioSourceNode=this.audioContext.createMediaStreamSource(this.inputStream),this.scriptProcessorNode=this.audioContext.createScriptProcessor(this.bufferSize),libvorbis.OggVbrAsyncEncoder.create(this.options,this.onData.bind(this),this.onRecordingAvailable.bind(this)).then(this.onEngineCreated.bind(this))},stop:function(){this.audioSourceNode.disconnect(this.scriptProcessorNode),this.scriptProcessorNode.disconnect(this.audioContext.destination),this.encoder.finish(),this.audioContext.close(),this.audioContext=null},onEngineCreated:function(o){this.encoder=o,this.scriptProcessorNode.onaudioprocess=this.onAudioProcess.bind(this),this.audioSourceNode.connect(this.scriptProcessorNode),this.scriptProcessorNode.connect(this.audioContext.destination)},onAudioProcess:function(o){for(var t,e=[],i=o.inputBuffer,s=(i.length,0);s<this.audioChannels;s++)t=i.getChannelData(s),t=new Float32Array(t),e.push(t);this.encoder.encode(e)},onData:function(o){this.chunks.push(o)},onRecordingAvailable:function(){this.onStopRecording(new Blob(this.chunks,{type:"audio/ogg"}))}})});