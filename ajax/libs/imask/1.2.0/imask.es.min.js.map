{"version":3,"file":"imask.es.min.js","sources":["../src/core/utils.js","../src/masked/factory.js","../src/masked/pattern/group.js","../src/imask.js","../src/masked/base.js","../src/masked/regexp.js","../src/masked/function.js","../src/masked/number.js","../src/masked/pattern/definition.js","../src/masked/pattern.js","../src/masked/date.js","../src/core/action-details.js","../src/controls/input.js"],"sourcesContent":["export\r\nfunction isString (str) {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res, str, fallback='') {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n\r\nexport\r\nconst DIRECTION = {\r\n  NONE: 0,\r\n  LEFT: -1,\r\n  RIGHT: 1\r\n}\r\n\r\nexport\r\nfunction indexInDirection (pos, direction) {\r\n  if (direction === DIRECTION.LEFT) --pos;\r\n  return pos;\r\n}\r\n\r\nexport\r\nfunction escapeRegExp (str) {\r\n  return str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\r\n}\r\n","import {isString} from '../core/utils';\r\nimport Masked from './base';\r\nimport MaskedRegExp from './regexp';\r\nimport MaskedFunction from './function';\r\nimport MaskedNumber from './number';\r\n\r\n\r\nexport\r\nfunction maskedClass (mask) {\r\n  if (mask instanceof RegExp) return MaskedRegExp;\r\n  if (isString(mask)) return IMask.MaskedPattern;\r\n  if (mask.prototype instanceof Masked) return mask;\r\n  if (mask instanceof Number || typeof mask === 'number' || mask === Number) return MaskedNumber;\r\n  if (mask instanceof Date || mask === Date) return IMask.MaskedDate;\r\n  if (mask instanceof Function) return MaskedFunction;\r\n\r\n  console.warn('Mask not found for mask', mask);  // eslint-disable-line no-console\r\n  return Masked;\r\n}\r\n\r\n\r\nexport default\r\nfunction createMask (opts) {\r\n  opts = Object.assign({}, opts);  // clone\r\n  const mask = opts.mask;\r\n\r\n  if (mask instanceof Masked) return mask;\r\n\r\n  const MaskedClass = maskedClass(mask);\r\n  return new MaskedClass(opts);\r\n}\r\n","export default\r\nclass PatternGroup {\r\n  constructor(masked, {name, offset, mask, validate}) {\r\n    this.masked = masked;\r\n    this.name = name;\r\n    this.offset = offset;\r\n    this.mask = mask;\r\n    this.validate = validate || (() => true);\r\n  }\r\n\r\n  get value () {\r\n    return this.masked.value.slice(\r\n      this.masked.mapDefIndexToPos(this.offset),\r\n      this.masked.mapDefIndexToPos(this.offset + this.mask.length));\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this.masked.extractInput(\r\n      this.masked.mapDefIndexToPos(this.offset),\r\n      this.masked.mapDefIndexToPos(this.offset + this.mask.length));\r\n  }\r\n\r\n  doValidate (soft) {\r\n    return this.validate(this.value, this, soft);\r\n  }\r\n}\r\n\r\nexport\r\nclass RangeGroup {\r\n  constructor ([from, to], maxlen=(to+'').length) {\r\n    this._from = from;\r\n    this._to = to;\r\n    this._maxLength = maxlen;\r\n    this.validate = this.validate.bind(this);\r\n\r\n    this._update();\r\n  }\r\n\r\n  get to () {\r\n    return this._to;\r\n  }\r\n\r\n  set to (to) {\r\n    this._to = to;\r\n    this._update();\r\n  }\r\n\r\n  get from () {\r\n    return this._from;\r\n  }\r\n\r\n  set from (from) {\r\n    this._from = from;\r\n    this._update();\r\n  }\r\n\r\n  get maxLength () {\r\n    return this._maxLength;\r\n  }\r\n\r\n  set maxLength (maxLength) {\r\n    this._maxLength = maxLength;\r\n    this._update();\r\n  }\r\n\r\n  get _matchFrom () {\r\n    return this.maxLength - (this.from + '').length;\r\n  }\r\n\r\n  _update() {\r\n    this._maxLength = Math.max(this._maxLength, (this.to + '').length);\r\n    this.mask = '0'.repeat(this._maxLength);\r\n  }\r\n\r\n  validate (str) {\r\n    let minstr = '';\r\n    let maxstr = '';\r\n\r\n    const [, placeholder, num] = str.match(/^(\\D*)(\\d*)(\\D*)/);\r\n    if (num) {\r\n      minstr = ('0'.repeat(placeholder.length) + num);\r\n      maxstr = ('9'.repeat(placeholder.length) + num);\r\n    }\r\n\r\n    const firstNonZero = str.search(/[^0]/);\r\n    if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\r\n\r\n    minstr = minstr.padEnd(this._maxLength, '0');\r\n    maxstr = maxstr.padEnd(this._maxLength, '9');\r\n\r\n    return this.from <= Number(maxstr) && Number(minstr) <= this.to;\r\n  }\r\n}\r\n\r\nexport\r\nfunction EnumGroup (enums) {\r\n  return {\r\n    mask: '*'.repeat(enums[0].length),\r\n    validate: (value, group) => enums.some(e => e.indexOf(group.unmaskedValue) >= 0)\r\n  };\r\n}\r\n\r\nPatternGroup.Range = RangeGroup;\r\nPatternGroup.Enum = EnumGroup;\r\n","import Masked from './masked/base';\r\nimport MaskedPattern from './masked/pattern';\r\nimport MaskedNumber from './masked/number';\r\nimport MaskedDate from './masked/date';\r\nimport MaskedRegExp from './masked/regexp';\r\nimport MaskedFunction from './masked/function';\r\n\r\nimport InputMask from './controls/input';\r\n\r\n\r\nexport default\r\nfunction IMask (el, opts={}) {\r\n\t// currently available only for input elements\r\n  return new InputMask(el, opts);\r\n}\r\n\r\n\r\nIMask.InputMask = InputMask;\r\n\r\nIMask.Masked = Masked;\r\nIMask.MaskedPattern = MaskedPattern;\r\nIMask.MaskedNumber = MaskedNumber;\r\nIMask.MaskedDate = MaskedDate;\r\nIMask.MaskedRegExp = MaskedRegExp;\r\nIMask.MaskedFunction = MaskedFunction;\r\n\r\nwindow.IMask = IMask;\r\n","export default\r\nclass Masked {\r\n  constructor (opts) {\r\n    this._value = '';\r\n    this.updateOptions({\r\n      ...Masked.DEFAULTS,\r\n      ...opts\r\n    });\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  updateOptions (opts) {\r\n    this.withValueRefresh(() => Object.assign(this, opts));\r\n  }\r\n\r\n  clone () {\r\n    const m = new Masked(this);\r\n    m._value = this.value.slice();\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    this._value = '';\r\n  }\r\n\r\n  get value () {\r\n    return this._value;\r\n  }\r\n\r\n  set value (value) {\r\n    this.reset();\r\n    this.appendWithTail(value);\r\n    this.doCommit();\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this._unmask();\r\n  }\r\n\r\n  set unmaskedValue (value) {\r\n    this.reset();\r\n    this._append(value);\r\n    this.appendWithTail(\"\");\r\n    this.doCommit();\r\n  }\r\n\r\n  get isComplete () {\r\n    return true;\r\n  }\r\n\r\n  nearestInputPos (cursorPos, /* direction */) {\r\n    return cursorPos;\r\n  }\r\n\r\n  extractInput (fromPos=0, toPos=this.value.length) {\r\n    return this.value.slice(fromPos, toPos);\r\n  }\r\n\r\n  extractTail (fromPos=0, toPos=this.value.length) {\r\n    return this.extractInput(fromPos, toPos);\r\n  }\r\n\r\n  _appendTail (tail) {\r\n    return !tail || this._append(tail);\r\n  }\r\n\r\n  _append (str, soft) {\r\n    const oldValueLength = this.value.length;\r\n    let consistentValue = this.clone();\r\n\r\n    str = this.doPrepare(str, soft);\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      this._value += str[ci];\r\n      if (this.doValidate(soft) === false) {\r\n        Object.assign(this, consistentValue);\r\n        if (!soft) return false;\r\n      }\r\n\r\n      consistentValue = this.clone();\r\n    }\r\n\r\n    return this.value.length - oldValueLength;\r\n\r\n  }\r\n\r\n  appendWithTail (str, tail) {\r\n    // TODO refactor\r\n    let appendCount = 0;\r\n    let consistentValue = this.clone();\r\n    let consistentAppended;\r\n\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      const ch = str[ci];\r\n\r\n      const appended = this._append(ch, true);\r\n      consistentAppended = this.clone();\r\n      const tailAppended = appended !== false && this._appendTail(tail) !== false;\r\n      if (tailAppended === false || this.doValidate(true) === false) {\r\n        Object.assign(this, consistentValue);\r\n        break;\r\n      }\r\n\r\n      consistentValue = this.clone();\r\n      Object.assign(this, consistentAppended);\r\n      appendCount += appended;\r\n    }\r\n\r\n    // TODO needed for cases when\r\n    // 1) REMOVE ONLY AND NO LOOP AT ALL\r\n    // 2) last loop iteration removes tail\r\n    // 3) when breaks on tail insert\r\n    this._appendTail(tail);\r\n\r\n    return appendCount;\r\n  }\r\n\r\n  _unmask () {\r\n    return this.value;\r\n  }\r\n\r\n  // TODO rename - refactor\r\n  clear (from=0, to=this.value.length) {\r\n    this._value = this.value.slice(0, from) + this.value.slice(to);\r\n  }\r\n\r\n  withValueRefresh (fn) {\r\n    if (this._refreshing) return fn();\r\n    this._refreshing = true;\r\n\r\n    const unmasked = this.isInitialized ? this.unmaskedValue : null;\r\n\r\n    const ret = fn();\r\n\r\n    if (unmasked != null) this.unmaskedValue = unmasked;\r\n\r\n    delete this._refreshing;\r\n    return ret;\r\n  }\r\n\r\n  doPrepare (str, soft) {\r\n    return this.prepare(str, this, soft);\r\n  }\r\n\r\n  doValidate (soft) {\r\n    return this.validate(this.value, this, soft);\r\n  }\r\n\r\n  doCommit () {\r\n    this.commit(this.value, this);\r\n  }\r\n\r\n  // TODO\r\n  // resolve (inputRaw) -> outputRaw\r\n\r\n  // TODO\r\n  // insert (str, fromPos, soft)\r\n\r\n  // splice (start, deleteCount, inserted, removeDirection) {\r\n  //   const tailPos = start + deleteCount;\r\n  //   const tail = this.extractTail(tailPos);\r\n\r\n  //   start = this.nearestInputPos(start, removeDirection);\r\n  //   this.clear(start);\r\n  //   return this.appendWithTail(inserted, tail);\r\n  // }\r\n}\r\n\r\nMasked.DEFAULTS = {\r\n  prepare: val => val,\r\n  validate: () => true,\r\n  commit: () => {},\r\n};\r\n","import Masked from './base';\r\n\r\n\r\nexport default\r\nclass MaskedRegExp extends Masked {\r\n  constructor (opts={}) {\r\n    opts.validate = (value) => opts.mask.test(value);\r\n    super(opts);\r\n  }\r\n}\r\n","import Masked from './base';\r\n\r\n\r\nexport default\r\nclass MaskedFunction extends Masked {\r\n  constructor (opts={}) {\r\n    opts.validate = opts.mask;\r\n    super(opts);\r\n  }\r\n}\r\n","import {escapeRegExp, DIRECTION, indexInDirection} from '../core/utils';\r\nimport Masked from './base';\r\n\r\n\r\nexport default\r\nclass MaskedNumber extends Masked {\r\n  constructor (opts) {\r\n    super({\r\n      ...MaskedNumber.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  updateOptions (opts) {\r\n    opts._signed = opts.signed;\r\n    delete opts.signed;\r\n    opts.postFormat = Object.assign({}, MaskedNumber.DEFAULTS.postFormat, opts.postFormat);\r\n\r\n    super.updateOptions(opts);\r\n    this._updateRegExps();\r\n  }\r\n\r\n  _updateRegExps () {\r\n    // TODO refactor?\r\n    let regExpStrSoft = '^';\r\n    let regExpStr = '^';\r\n\r\n    if (this.signed) {\r\n      regExpStrSoft += '([+|\\\\-]?|([+|\\\\-]?(0|([1-9]+\\\\d*))))';\r\n      regExpStr += '[+|\\\\-]?';\r\n    } else {\r\n      regExpStrSoft += '(0|([1-9]+\\\\d*))';\r\n    }\r\n    regExpStr += '\\\\d*';\r\n\r\n    if (this.scale) {\r\n      regExpStrSoft += '(' + this.radix + '\\\\d{0,' + this.scale + '})?';\r\n      regExpStr += '(' + this.radix + '\\\\d{0,' + this.scale + '})?';\r\n    }\r\n\r\n    regExpStrSoft += '$';\r\n    regExpStr += '$';\r\n\r\n    this._numberRegExpSoft = new RegExp(regExpStrSoft);\r\n    this._numberRegExp = new RegExp(regExpStr);\r\n    this._mapToRadixRegExp = new RegExp('[' +\r\n      this.mapToRadix.map(escapeRegExp).join('') +\r\n    ']', 'g');\r\n    this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\r\n  }\r\n\r\n  extractTail (fromPos=0, toPos=this.value.length) {\r\n    return this._removeThousandsSeparators(super.extractTail(fromPos, toPos));\r\n  }\r\n\r\n  _removeThousandsSeparators (value) {\r\n    return value.replace(this._thousandsSeparatorRegExp, '');\r\n  }\r\n\r\n  _insertThousandsSeparators (value) {\r\n    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\r\n    const parts = value.split(this.radix);\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\r\n    return parts.join(this.radix);\r\n  }\r\n\r\n  doPrepare (str, soft) {\r\n    return super.doPrepare(this._removeThousandsSeparators(str.replace(this._mapToRadixRegExp, this.radix)), soft);\r\n  }\r\n\r\n  appendWithTail (str, tail) {\r\n    const oldValueLength = this.value.length;\r\n    this._value = this._removeThousandsSeparators(this.value);\r\n    let removedSeparatorsCount = oldValueLength - this.value.length;\r\n\r\n\r\n    const appended = super.appendWithTail(str, tail);\r\n\r\n\r\n    this._value = this._insertThousandsSeparators(this.value);\r\n\r\n    let beforeTailPos = oldValueLength + appended - removedSeparatorsCount;\r\n    this._value = this._insertThousandsSeparators(this.value);\r\n    let insertedSeparatorsBeforeTailCount = 0;\r\n    for (let pos = 0; pos <= beforeTailPos; ++pos) {\r\n      if (this.value[pos] === this.thousandsSeparator) {\r\n        ++insertedSeparatorsBeforeTailCount;\r\n        ++beforeTailPos;\r\n      }\r\n    }\r\n\r\n    return appended - removedSeparatorsCount + insertedSeparatorsBeforeTailCount;\r\n  }\r\n\r\n  nearestInputPos (cursorPos, direction=DIRECTION.LEFT) {\r\n    if (!direction) return cursorPos;\r\n\r\n    const nextPos = indexInDirection(cursorPos, direction);\r\n    if (this.value[nextPos] === this.thousandsSeparator) cursorPos += direction;\r\n    return cursorPos;\r\n  }\r\n\r\n  doValidate (soft) {\r\n    const regexp = soft ? this._numberRegExpSoft : this._numberRegExp;\r\n\r\n    // validate as string\r\n    let valid = regexp.test(this._removeThousandsSeparators(this.value));\r\n\r\n    if (valid) {\r\n      // validate as number\r\n      const number = this.number;\r\n      valid = valid && !isNaN(number) &&\r\n        // check min bound for negative values\r\n        (this.min == null || this.min >= 0 || this.min <= this.number) &&\r\n        // check max bound for positive values\r\n        (this.max == null || this.max <= 0 || this.number <= this.max);\r\n    }\r\n\r\n    return valid && super.doValidate(soft);\r\n  }\r\n\r\n  doCommit () {\r\n    const number = this.number;\r\n    let validnum = number;\r\n\r\n    // check bounds\r\n    if (this.min != null) validnum = Math.max(validnum, this.min);\r\n    if (this.max != null) validnum = Math.min(validnum, this.max);\r\n\r\n    if (validnum !== number) {\r\n      this.unmaskedValue = '' + validnum;\r\n    }\r\n\r\n    let formatted = this.value;\r\n\r\n    if (this.postFormat.normalizeZeros) {\r\n      formatted = this._normalizeZeros(formatted);\r\n    }\r\n\r\n    if (this.postFormat.padFractionalZeros) {\r\n      formatted = this._padFractionalZeros(formatted);\r\n    }\r\n\r\n    this._value = formatted;\r\n    super.doCommit();\r\n  }\r\n\r\n  _normalizeZeros (value) {\r\n    const parts = this._removeThousandsSeparators(value).split(this.radix);\r\n\r\n    // remove leading zeros\r\n    parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, (match, sign, zeros, num) => sign + num);\r\n    // add leading zero\r\n    if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\r\n\r\n    if (parts.length > 1) {\r\n      parts[1] = parts[1].replace(/0*$/, '');  // remove trailing zeros\r\n      if (!parts[1].length) parts.length = 1;  // remove fractional\r\n    }\r\n\r\n    return this._insertThousandsSeparators(parts.join(this.radix));\r\n  }\r\n\r\n  _padFractionalZeros (value) {\r\n    const parts = value.split(this.radix);\r\n    if (parts.length < 2) parts.push('');\r\n    parts[1] = parts[1].padEnd(this.scale, '0');\r\n    return parts.join(this.radix);\r\n  }\r\n\r\n  get number () {\r\n    let numstr =\r\n      this._removeThousandsSeparators(\r\n        this._normalizeZeros(\r\n          this.unmaskedValue))\r\n      .replace(this.radix, '.');\r\n\r\n    return Number(numstr);\r\n  }\r\n\r\n  set number (number) {\r\n    this.unmaskedValue = '' + number;\r\n  }\r\n\r\n  get signed () {\r\n    return this._signed ||\r\n      (this.min != null && this.min < 0) ||\r\n      (this.max != null && this.max < 0);\r\n  }\r\n}\r\nMaskedNumber.DEFAULTS = {\r\n  radix: ',',\r\n  thousandsSeparator: '',\r\n  mapToRadix: ['.'],\r\n  scale: 2,\r\n  postFormat: {\r\n    normalizeZeros: true,\r\n  }\r\n};\r\n","import createMask from '../factory';\r\n\r\n\r\nexport default\r\nclass PatternDefinition {\r\n  constructor(opts) {\r\n    Object.assign(this, opts);\r\n\r\n    if (this.mask) {\r\n      this._masked = createMask(opts);\r\n    }\r\n  }\r\n\r\n  reset () {\r\n    this.isHollow = false;\r\n    if (this._masked) this._masked.reset();\r\n  }\r\n\r\n  get isInput () {\r\n    return this.type === PatternDefinition.TYPES.INPUT;\r\n  }\r\n\r\n  get isHiddenHollow () {\r\n    return this.isHollow && this.optional;\r\n  }\r\n\r\n  resolve (ch) {\r\n    if (!this._masked) return false;\r\n    // TODO seems strange\r\n    this._masked.value = ch;\r\n    return this._masked.value;\r\n  }\r\n}\r\n\r\nPatternDefinition.DEFAULTS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternDefinition.TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n};\r\n","import {conform, DIRECTION, indexInDirection} from '../core/utils';\r\nimport Masked from './base';\r\nimport PatternDefinition from './pattern/definition';\r\nimport PatternGroup from './pattern/group';\r\n\r\n\r\nexport default\r\nclass MaskedPattern extends Masked {\r\n  updateOptions (opts) {\r\n    opts.placeholder = Object.assign({}, MaskedPattern.DEFAULT_PLACEHOLDER, opts.placeholder);\r\n    opts.definitions = Object.assign({}, PatternDefinition.DEFAULTS, opts.definitions);\r\n    super.updateOptions(opts);\r\n    this._updateMask();\r\n  }\r\n\r\n  _updateMask () {\r\n    const defs = this.definitions;\r\n    this._charDefs = [];\r\n    this._groupDefs = [];\r\n\r\n    let pattern = this.mask;\r\n    if (!pattern || !defs) return;\r\n\r\n    let unmaskingBlock = false;\r\n    let optionalBlock = false;\r\n    let stopAlign = false;\r\n\r\n\r\n    for (let i=0; i<pattern.length; ++i) {\r\n      if (this.groups) {\r\n        const p = pattern.slice(i);\r\n        const gNames = Object.keys(this.groups).filter(gName => p.indexOf(gName) === 0);\r\n        // order by key length\r\n        gNames.sort((a, b) => b.length - a.length);\r\n        // use group name with max length\r\n        const gName = gNames[0];\r\n        if (gName) {\r\n          const group = this.groups[gName];\r\n          this._groupDefs.push(new PatternGroup(this, {\r\n            name: gName,\r\n            offset: this._charDefs.length,\r\n            mask: group.mask,\r\n            validate: group.validate\r\n          }));\r\n          pattern = pattern.replace(gName, group.mask);\r\n        }\r\n      }\r\n\r\n      let char = pattern[i];\r\n      let type = !unmaskingBlock && char in defs ?\r\n        PatternDefinition.TYPES.INPUT :\r\n        PatternDefinition.TYPES.FIXED;\r\n      const unmasking = type === PatternDefinition.TYPES.INPUT || unmaskingBlock;\r\n      const optional = type === PatternDefinition.TYPES.INPUT && optionalBlock;\r\n\r\n      if (char === MaskedPattern.STOP_CHAR) {\r\n        stopAlign = true;\r\n        continue;\r\n      }\r\n\r\n      if (char === '{' || char === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === '[' || char === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === MaskedPattern.ESCAPE_CHAR) {\r\n        ++i;\r\n        char = pattern[i];\r\n        // TODO validation\r\n        if (!char) break;\r\n        type = PatternDefinition.TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push(new PatternDefinition({\r\n        char,\r\n        type,\r\n        optional,\r\n        stopAlign,\r\n        unmasking,\r\n        mask: type === PatternDefinition.TYPES.INPUT ?\r\n          defs[char] :\r\n          (value => value === char)\r\n      }));\r\n\r\n      stopAlign = false;\r\n    }\r\n  }\r\n\r\n  doValidate (soft) {\r\n    return this._groupDefs.every(g => g.doValidate(soft)) && super.doValidate(soft);\r\n  }\r\n\r\n  clone () {\r\n    const m = new MaskedPattern(this);\r\n    m._value = this.value;\r\n    m._charDefs.forEach((d, i) => Object.assign(d, this._charDefs[i]));\r\n    m._groupDefs.forEach((d, i) => Object.assign(d, this._groupDefs[i]));\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    super.reset();\r\n    this._charDefs.forEach(d => {delete d.isHollow;});\r\n  }\r\n\r\n  get isComplete () {\r\n    return !this._charDefs.some((d, i) =>\r\n      d.isInput && !d.optional && (d.isHollow || !this.extractInput(i, i+1)));\r\n  }\r\n\r\n  hiddenHollowsBefore (defIndex) {\r\n    return this._charDefs\r\n      .slice(0, defIndex)\r\n      .filter(d => d.isHiddenHollow)\r\n      .length;\r\n  }\r\n\r\n  mapDefIndexToPos (defIndex) {\r\n    if (defIndex == null) return;\r\n    return defIndex - this.hiddenHollowsBefore(defIndex);\r\n  }\r\n\r\n  mapPosToDefIndex (pos) {\r\n    if (pos == null) return;\r\n    let defIndex = pos;\r\n    for (let di=0; di<this._charDefs.length; ++di) {\r\n      const def = this._charDefs[di];\r\n      if (di >= defIndex) break;\r\n      if (def.isHiddenHollow) ++defIndex;\r\n    }\r\n    return defIndex;\r\n  }\r\n\r\n  _unmask () {\r\n    const str = this.value;\r\n    let unmasked = '';\r\n\r\n    for (let ci=0, di=0; ci<str.length && di<this._charDefs.length; ++di) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      if (def.isHiddenHollow) continue;\r\n      if (def.unmasking && !def.isHollow) unmasked += ch;\r\n      ++ci;\r\n    }\r\n\r\n    return unmasked;\r\n  }\r\n\r\n  _appendTail (tail) {\r\n    return (!tail || this._appendChunks(tail)) && this._appendPlaceholder();\r\n  }\r\n\r\n  _append (str, soft) {\r\n    const oldValueLength = this.value.length;\r\n\r\n    for (let ci=0, di=this.mapPosToDefIndex(this.value.length); ci < str.length;) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      // check overflow\r\n      if (!def) return false;\r\n\r\n      // reset\r\n      def.isHollow = false;\r\n\r\n      let resolved, skipped;\r\n      let chres = conform(def.resolve(ch), ch);\r\n\r\n      if (def.type === PatternDefinition.TYPES.INPUT) {\r\n        if (chres) {\r\n          this._value += chres;\r\n          if (!this.doValidate()) {\r\n            chres = '';\r\n            this._value = this.value.slice(0, -1);\r\n          }\r\n        }\r\n\r\n        resolved = !!chres;\r\n        skipped = !chres && !def.optional;\r\n\r\n        // if ok - next di\r\n        if (!chres) {\r\n          if (!def.optional && !soft) {\r\n            this._value += this.placeholder.char;\r\n            skipped = false;\r\n          }\r\n          if (!skipped) def.isHollow = true;\r\n        }\r\n      } else {\r\n        this._value += def.char;\r\n        resolved = chres && (def.unmasking || soft);\r\n      }\r\n\r\n      if (!skipped) ++di;\r\n      if (resolved || skipped) ++ci;\r\n    }\r\n\r\n    return this.value.length - oldValueLength;\r\n  }\r\n\r\n  _appendChunks (chunks, soft) {\r\n    for (let ci=0; ci < chunks.length; ++ci) {\r\n      const [fromDefIndex, input] = chunks[ci];\r\n      if (fromDefIndex != null) this._appendPlaceholder(fromDefIndex);\r\n      if (this._append(input, soft) === false) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  extractTail (fromPos, toPos) {\r\n    return this.extractInputChunks(fromPos, toPos);\r\n  }\r\n\r\n  extractInput (fromPos=0, toPos=this.value.length) {\r\n    // TODO fromPos === toPos\r\n    const str = this.value;\r\n    let input = '';\r\n\r\n    const toDefIndex = this.mapPosToDefIndex(toPos);\r\n    for (\r\n      let ci=fromPos, di=this.mapPosToDefIndex(fromPos);\r\n      ci<toPos && ci<str.length && di < toDefIndex;\r\n      ++di)\r\n    {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      if (!def) break;\r\n      if (def.isHiddenHollow) continue;\r\n\r\n      if (def.isInput && !def.isHollow) input += ch;\r\n      ++ci;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  extractInputChunks (fromPos=0, toPos=this.value.length) {\r\n    // TODO fromPos === toPos\r\n    const fromDefIndex = this.mapPosToDefIndex(fromPos);\r\n    const toDefIndex = this.mapPosToDefIndex(toPos);\r\n    const stopDefIndices = this._charDefs\r\n      .map((d, i) => [d, i])\r\n      .slice(fromDefIndex, toDefIndex)\r\n      .filter(([d]) => d.stopAlign)\r\n      .map(([, i]) => i);\r\n\r\n    const stops = [\r\n      fromDefIndex,\r\n      ...stopDefIndices,\r\n      toDefIndex\r\n    ];\r\n\r\n    return stops.map((s, i) => [\r\n      stopDefIndices.indexOf(s) >= 0 ?\r\n        s :\r\n        null,\r\n\r\n      this.extractInput(\r\n        this.mapDefIndexToPos(s),\r\n        this.mapDefIndexToPos(stops[++i]))\r\n    ]).filter(([stop, input]) => stop != null || input);\r\n  }\r\n\r\n  _appendPlaceholder (toDefIndex) {\r\n    const maxDefIndex = toDefIndex || this._charDefs.length;\r\n    for (let di=this.mapPosToDefIndex(this.value.length); di < maxDefIndex; ++di) {\r\n      const def = this._charDefs[di];\r\n      if (def.isInput) def.isHollow = true;\r\n\r\n      if (!this.placeholder.lazy || toDefIndex) {\r\n        this._value += !def.isInput ?\r\n          def.char :\r\n          !def.optional ?\r\n            this.placeholder.char :\r\n            '';\r\n      }\r\n    }\r\n  }\r\n\r\n  clear (from=0, to=this.value.length) {\r\n    this._value = this.value.slice(0, from) + this.value.slice(to);\r\n    const fromDefIndex = this.mapPosToDefIndex(from);\r\n    const toDefIndex = this.mapPosToDefIndex(to);\r\n    this._charDefs\r\n      .slice(fromDefIndex, toDefIndex)\r\n      .forEach(d => d.reset());\r\n  }\r\n\r\n   nearestInputPos (cursorPos, direction=DIRECTION.LEFT) {\r\n    if (!direction) return cursorPos;\r\n\r\n    const initialDefIndex = this.mapPosToDefIndex(cursorPos);\r\n    let di = initialDefIndex;\r\n\r\n    let firstInputIndex,\r\n        firstFilledInputIndex,\r\n        firstVisibleHollowIndex,\r\n        nextdi;\r\n\r\n    // search forward\r\n    for (nextdi = indexInDirection(di, direction); 0 <= nextdi && nextdi < this._charDefs.length; di += direction, nextdi += direction) {\r\n      const nextDef = this._charDefs[nextdi];\r\n      if (firstInputIndex == null && nextDef.isInput) firstInputIndex = di;\r\n      if (firstVisibleHollowIndex == null && nextDef.isHollow && !nextDef.isHiddenHollow) firstVisibleHollowIndex = di;\r\n      if (nextDef.isInput && !nextDef.isHollow) {\r\n        firstFilledInputIndex = di;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (direction === DIRECTION.LEFT || firstInputIndex == null) {\r\n      // search backwards\r\n      direction = -direction;\r\n      let overflow = false;\r\n\r\n      // find hollows only before initial pos\r\n      for (nextdi = indexInDirection(di, direction);\r\n        0 <= nextdi && nextdi < this._charDefs.length;\r\n        di += direction, nextdi += direction)\r\n      {\r\n        const nextDef = this._charDefs[nextdi];\r\n        if (nextDef.isInput) {\r\n          firstInputIndex = di;\r\n          if (nextDef.isHollow && !nextDef.isHiddenHollow) break;\r\n        }\r\n\r\n        // if hollow not found before start position - set `overflow`\r\n        // and try to find just any input\r\n        if (di === initialDefIndex) overflow = true;\r\n\r\n        // first input found\r\n        if (overflow && firstInputIndex != null) break;\r\n      }\r\n\r\n      // process overflow\r\n      overflow = overflow || nextdi >= this._charDefs.length;\r\n      if (overflow && firstInputIndex != null) di = firstInputIndex;\r\n    } else if (firstFilledInputIndex == null) {\r\n      // adjust index if delete at right and filled input not found at right\r\n      di = firstVisibleHollowIndex != null ?\r\n        firstVisibleHollowIndex :\r\n        firstInputIndex;\r\n    }\r\n\r\n    return this.mapDefIndexToPos(di);\r\n  }\r\n\r\n  group (name) {\r\n    return this.groupsByName(name)[0];\r\n  }\r\n\r\n  groupsByName (name) {\r\n    return this._groupDefs.filter(g => g.name === name);\r\n  }\r\n}\r\n\r\nMaskedPattern.DEFAULT_PLACEHOLDER = {\r\n  lazy: true,\r\n  char: '_'\r\n};\r\nMaskedPattern.STOP_CHAR = '`';\r\nMaskedPattern.ESCAPE_CHAR = '\\\\';\r\nMaskedPattern.Definition = PatternDefinition;\r\nMaskedPattern.Group = PatternGroup;\r\n","import MaskedPattern from './pattern';\r\nimport PatternGroup from './pattern/group';\r\n\r\n\r\nexport default\r\nclass MaskedDate extends MaskedPattern {\r\n  constructor (opts) {\r\n    super({\r\n      ...MaskedDate.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  updateOptions (opts) {\r\n    if (opts.mask === Date) delete opts.mask;\r\n    if (opts.pattern) {\r\n      opts.mask = opts.pattern;\r\n      delete opts.pattern;\r\n    }\r\n\r\n    const groups = opts.groups;\r\n    opts.groups = Object.assign({}, MaskedDate.GET_DEFAULT_GROUPS());\r\n    // adjust year group\r\n    if (opts.min) opts.groups.Y.from = opts.min.getFullYear();\r\n    if (opts.max) opts.groups.Y.to = opts.max.getFullYear();\r\n    Object.assign(opts.groups, groups);\r\n\r\n    super.updateOptions(opts);\r\n  }\r\n\r\n  doValidate (soft) {\r\n    const valid = super.doValidate(soft);\r\n    const date = this.date;\r\n\r\n    return valid &&\r\n      (!this.isComplete ||\r\n        this.isDateExist(this.value) && date &&\r\n        (this.min == null || this.min <= date) &&\r\n        (this.max == null || date <= this.max));\r\n  }\r\n\r\n  isDateExist (str) {\r\n    return this.format(this.parse(str)) === str;\r\n  }\r\n\r\n  get date () {\r\n    return this.isComplete ?\r\n      this.parse(this.value) :\r\n      null;\r\n  }\r\n\r\n  set date (date) {\r\n    this.value = this.format(date);\r\n  }\r\n}\r\nMaskedDate.DEFAULTS = {\r\n  pattern: 'd{.}`m{.}`Y',\r\n  format: date => {\r\n    const day = ('' + date.getDate()).padStart(2, '0');\r\n    const month = ('' + (date.getMonth() + 1)).padStart(2, '0');\r\n    const year = date.getFullYear();\r\n\r\n    return [day, month, year].join('.');\r\n  },\r\n  parse: str => {\r\n    const [day, month, year] = str.split('.');\r\n    return new Date(year, month - 1, day);\r\n  },\r\n};\r\nMaskedDate.GET_DEFAULT_GROUPS = () => {\r\n  return {\r\n    d: new PatternGroup.Range([1, 31]),\r\n    m: new PatternGroup.Range([1, 12]),\r\n    Y: new PatternGroup.Range([1900, 9999]),\r\n  };\r\n}","import {DIRECTION} from './utils';\r\n\r\n\r\nexport default\r\nclass ActionDetails {\r\n  constructor (value, cursorPos, oldValue, oldSelection) {\r\n    this.value = value;\r\n    this.cursorPos = cursorPos;\r\n    this.oldValue = oldValue;\r\n    this.oldSelection = oldSelection;\r\n\r\n    // double check if left part was changed (autofilling, other non-standard input triggers)\r\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\r\n      --this.oldSelection.start;\r\n    }\r\n  }\r\n\r\n  get startChangePos () {\r\n    return Math.min(this.cursorPos, this.oldSelection.start);\r\n  }\r\n\r\n  get insertedCount () {\r\n    return this.cursorPos - this.startChangePos;\r\n  }\r\n\r\n  get inserted () {\r\n    return this.value.substr(this.startChangePos, this.insertedCount);\r\n  }\r\n\r\n  get removedCount () {\r\n    // Math.max for opposite operation\r\n    return Math.max((this.oldSelection.end - this.startChangePos) ||\r\n      // for Delete\r\n      this.oldValue.length - this.value.length, 0);\r\n  }\r\n\r\n  get removed () {\r\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\r\n  }\r\n\r\n  get head () {\r\n    return this.value.substring(0, this.startChangePos);\r\n  }\r\n\r\n  get tail () {\r\n    this.value.substring(this.startChangePos + this.insertedCount);\r\n  }\r\n\r\n  get removeDirection () {\r\n    return this.removedCount && !this.insertedCount &&\r\n      ((this.oldSelection.end === this.cursorPos) ?\r\n        DIRECTION.RIGHT :\r\n        DIRECTION.LEFT);\r\n  }\r\n}\r\n","import ActionDetails from '../core/action-details';\r\nimport createMask, {maskedClass} from '../masked/factory';\r\n\r\n\r\nexport default\r\nclass InputMask {\r\n  constructor (el, opts) {\r\n    this.el = el;\r\n    this.masked = createMask(opts);\r\n\r\n    this._listeners = {};\r\n    this._value = '';\r\n    this._unmaskedValue = '';\r\n\r\n    this._saveSelection = this._saveSelection.bind(this);\r\n    this._onInput = this._onInput.bind(this);\r\n    this._onChange = this._onChange.bind(this);\r\n    this._onDrop = this._onDrop.bind(this);\r\n    this._alignCursor = this._alignCursor.bind(this);\r\n    this._alignCursorFriendly = this._alignCursorFriendly.bind(this);\r\n\r\n    this.bindEvents();\r\n\r\n    // refresh\r\n    this.updateValue();\r\n    this._onChange();\r\n  }\r\n\r\n  get mask () { return this.masked.mask; }\r\n  set mask (mask) {\r\n    if (mask == null || mask === this.masked.mask) return;\r\n\r\n    if (this.masked.constructor === maskedClass(mask)) {\r\n      this.masked.mask = mask;\r\n      return;\r\n    }\r\n\r\n    const masked = createMask({mask});\r\n    masked.unmaskedValue = this.masked.unmaskedValue;\r\n    this.masked = masked;\r\n  }\r\n\r\n  get value () {\r\n    return this._value;\r\n  }\r\n\r\n  set value (str) {\r\n    this.masked.value = str;\r\n    this.updateControl();\r\n    this._alignCursor();\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this._unmaskedValue;\r\n  }\r\n\r\n  set unmaskedValue (str) {\r\n    this.masked.unmaskedValue = str;\r\n    this.updateControl();\r\n    this._alignCursor();\r\n  }\r\n\r\n  bindEvents () {\r\n    this.el.addEventListener('keydown', this._saveSelection);\r\n    this.el.addEventListener('input', this._onInput);\r\n    this.el.addEventListener('drop', this._onDrop);\r\n    this.el.addEventListener('click', this._alignCursorFriendly);\r\n    this.el.addEventListener('change', this._onChange);\r\n  }\r\n\r\n  unbindEvents () {\r\n    this.el.removeEventListener('keydown', this._saveSelection);\r\n    this.el.removeEventListener('input', this._onInput);\r\n    this.el.removeEventListener('drop', this._onDrop);\r\n    this.el.removeEventListener('click', this._alignCursorFriendly);\r\n    this.el.removeEventListener('change', this._onChange);\r\n  }\r\n\r\n  fireEvent (ev) {\r\n    const listeners = this._listeners[ev] || [];\r\n    listeners.forEach(l => l());\r\n  }\r\n\r\n  get selectionStart () {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionStart;\r\n  }\r\n\r\n  get cursorPos () {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionEnd;\r\n  }\r\n\r\n  set cursorPos (pos) {\r\n    if (this.el !== document.activeElement) return;\r\n\r\n    this.el.setSelectionRange(pos, pos);\r\n    this._saveSelection();\r\n  }\r\n\r\n  _saveSelection (/* ev */) {\r\n    if (this.value !== this.el.value) {\r\n      console.warn('Uncontrolled input change, refresh mask manually!'); // eslint-disable-line no-console\r\n    }\r\n    this._selection = {\r\n      start: this.selectionStart,\r\n      end: this.cursorPos\r\n    };\r\n  }\r\n\r\n  updateValue () {\r\n    this.masked.value = this.el.value;\r\n  }\r\n\r\n  updateControl () {\r\n    const newUnmaskedValue = this.masked.unmaskedValue;\r\n    const newValue = this.masked.value;\r\n    const isChanged = (this.unmaskedValue !== newUnmaskedValue ||\r\n      this.value !== newValue);\r\n\r\n    this._unmaskedValue = newUnmaskedValue;\r\n    this._value = newValue;\r\n\r\n    if (this.el.value !== newValue) this.el.value = newValue;\r\n    if (isChanged) this._fireChangeEvents();\r\n  }\r\n\r\n  updateOptions (opts) {\r\n    this.masked.updateOptions(opts);\r\n    this.updateControl();\r\n  }\r\n\r\n  updateCursor (cursorPos) {\r\n    if (cursorPos == null) return;\r\n    this.cursorPos = cursorPos;\r\n\r\n    // also queue change cursor for mobile browsers\r\n    this._delayUpdateCursor(cursorPos);\r\n  }\r\n\r\n  _delayUpdateCursor (cursorPos) {\r\n    this._abortUpdateCursor();\r\n    this._changingCursorPos = cursorPos;\r\n    this._cursorChanging = setTimeout(() => {\r\n      this.cursorPos = this._changingCursorPos;\r\n      this._abortUpdateCursor();\r\n    }, 10);\r\n  }\r\n\r\n  _fireChangeEvents () {\r\n    this.fireEvent('accept');\r\n    if (this.masked.isComplete) this.fireEvent('complete');\r\n  }\r\n\r\n  _abortUpdateCursor () {\r\n    if (this._cursorChanging) {\r\n      clearTimeout(this._cursorChanging);\r\n      delete this._cursorChanging;\r\n    }\r\n  }\r\n\r\n  _alignCursor () {\r\n    this.cursorPos = this.masked.nearestInputPos(this.cursorPos);\r\n  }\r\n\r\n  _alignCursorFriendly () {\r\n    if (this.selectionStart !== this.cursorPos) return;\r\n    this._alignCursor();\r\n  }\r\n\r\n  on (ev, handler) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n    return this;\r\n  }\r\n\r\n  off (ev, handler) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    const hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners.splice(hIndex, 1);\r\n    return this;\r\n  }\r\n\r\n  _onInput () {\r\n    this._abortUpdateCursor();\r\n\r\n    const details = new ActionDetails(\r\n      // new state\r\n      this.el.value, this.cursorPos,\r\n      // old state\r\n      this.value, this._selection);\r\n\r\n    const tailPos = details.startChangePos + details.removed.length;\r\n    const tail = this.masked.extractTail(tailPos);\r\n\r\n    const lastInputPos = this.masked.nearestInputPos(details.startChangePos, details.removeDirection);\r\n    this.masked.clear(lastInputPos);\r\n    const insertedCount = this.masked.appendWithTail(details.inserted, tail);\r\n\r\n\r\n    const cursorPos = this.masked.nearestInputPos(\r\n      lastInputPos + insertedCount,\r\n      details.removeDirection);\r\n\r\n    this.updateControl();\r\n    this.updateCursor(cursorPos);\r\n  }\r\n\r\n  _onChange () {\r\n    if (this.value !== this.el.value) {\r\n      this.updateValue();\r\n    }\r\n    this.masked.doCommit();\r\n    this.updateControl();\r\n  }\r\n\r\n  _onDrop (ev) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  destroy () {\r\n    this.unbindEvents();\r\n    this._listeners.length = 0;\r\n  }\r\n}\r\n"],"names":["isString","str","String","conform","res","fallback","indexInDirection","pos","direction","DIRECTION","LEFT","escapeRegExp","replace","maskedClass","mask","RegExp","MaskedRegExp","IMask","MaskedPattern","prototype","Masked","Number","MaskedNumber","Date","MaskedDate","Function","MaskedFunction","warn","createMask","opts","Object","assign","EnumGroup","enums","repeat","length","value","group","some","e","indexOf","unmaskedValue","el","InputMask","_value","updateOptions","DEFAULTS","isInitialized","withValueRefresh","this","m","slice","reset","appendWithTail","doCommit","_unmask","_append","cursorPos","fromPos","toPos","extractInput","tail","soft","oldValueLength","consistentValue","clone","doPrepare","ci","doValidate","consistentAppended","appendCount","ch","appended","_appendTail","from","to","fn","_refreshing","unmasked","ret","prepare","validate","commit","val","test","_signed","signed","postFormat","_updateRegExps","regExpStrSoft","regExpStr","scale","radix","_numberRegExpSoft","_numberRegExp","_mapToRadixRegExp","mapToRadix","map","join","_thousandsSeparatorRegExp","thousandsSeparator","_removeThousandsSeparators","super","extractTail","parts","split","removedSeparatorsCount","_insertThousandsSeparators","beforeTailPos","insertedSeparatorsBeforeTailCount","nextPos","valid","number","isNaN","min","max","validnum","Math","formatted","normalizeZeros","_normalizeZeros","padFractionalZeros","_padFractionalZeros","match","sign","zeros","num","push","padEnd","numstr","PatternDefinition","_masked","isHollow","type","TYPES","INPUT","optional","PatternGroup","masked","name","offset","mapDefIndexToPos","RangeGroup","maxlen","_from","_to","_maxLength","bind","_update","maxLength","minstr","maxstr","placeholder","search","_matchFrom","Range","Enum","DEFAULT_PLACEHOLDER","definitions","_updateMask","defs","_charDefs","_groupDefs","pattern","unmaskingBlock","optionalBlock","stopAlign","i","groups","p","gNames","keys","filter","gName","sort","a","b","char","FIXED","unmasking","STOP_CHAR","ESCAPE_CHAR","every","g","forEach","d","isInput","defIndex","isHiddenHollow","hiddenHollowsBefore","di","def","_appendChunks","_appendPlaceholder","mapPosToDefIndex","resolved","skipped","chres","resolve","chunks","fromDefIndex","input","extractInputChunks","toDefIndex","stopDefIndices","stops","s","stop","maxDefIndex","lazy","initialDefIndex","firstInputIndex","firstFilledInputIndex","firstVisibleHollowIndex","nextdi","nextDef","overflow","groupsByName","Definition","Group","GET_DEFAULT_GROUPS","Y","getFullYear","date","isComplete","isDateExist","format","parse","getDate","padStart","getMonth","day","month","year","ActionDetails","oldValue","oldSelection","startChangePos","start","substr","insertedCount","end","removedCount","substring","RIGHT","_listeners","_unmaskedValue","_saveSelection","_onInput","_onChange","_onDrop","_alignCursor","_alignCursorFriendly","bindEvents","updateValue","constructor","updateControl","addEventListener","removeEventListener","ev","l","_cursorChanging","_changingCursorPos","selectionStart","selectionEnd","document","activeElement","setSelectionRange","_selection","newUnmaskedValue","newValue","isChanged","_fireChangeEvents","_delayUpdateCursor","_abortUpdateCursor","setTimeout","fireEvent","nearestInputPos","handler","hIndex","splice","details","tailPos","removed","lastInputPos","removeDirection","clear","inserted","updateCursor","preventDefault","stopPropagation","unbindEvents","window"],"mappings":"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"}