{"version":3,"file":"imask.es.min.js","sources":["../src/core/utils.js","../src/masked/factory.js","../src/masked/pattern/group.js","../src/imask.js","../src/core/change-details.js","../src/masked/base.js","../src/masked/regexp.js","../src/masked/function.js","../src/masked/number.js","../src/masked/pattern/definition.js","../src/masked/pattern.js","../src/masked/date.js","../src/masked/dynamic.js","../src/core/action-details.js","../src/controls/input.js"],"sourcesContent":["export\r\nfunction isString (str) {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res, str, fallback='') {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n\r\nexport\r\nconst DIRECTION = {\r\n  NONE: 0,\r\n  LEFT: -1,\r\n  RIGHT: 1\r\n}\r\n\r\nexport\r\nfunction indexInDirection (pos, direction) {\r\n  if (direction === DIRECTION.LEFT) --pos;\r\n  return pos;\r\n}\r\n\r\nexport\r\nfunction escapeRegExp (str) {\r\n  return str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\r\n}\r\n\r\n\r\n// cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\r\nexport\r\nfunction objectIncludes (b, a) {\r\n  if (a === b) return true;\r\n\r\n  var arrA = Array.isArray(a)\r\n    , arrB = Array.isArray(b)\r\n    , i;\r\n\r\n  if (arrA && arrB) {\r\n    if (a.length != b.length) return false;\r\n    for (i = 0; i < a.length; i++)\r\n      if (!objectIncludes(a[i], b[i])) return false;\r\n    return true;\r\n  }\r\n\r\n  if (arrA != arrB) return false;\r\n\r\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\r\n    var keys = Object.keys(a);\r\n    // if (keys.length !== Object.keys(b).length) return false;\r\n\r\n    var dateA = a instanceof Date\r\n      , dateB = b instanceof Date;\r\n    if (dateA && dateB) return a.getTime() == b.getTime();\r\n    if (dateA != dateB) return false;\r\n\r\n    var regexpA = a instanceof RegExp\r\n      , regexpB = b instanceof RegExp;\r\n    if (regexpA && regexpB) return a.toString() == b.toString();\r\n    if (regexpA != regexpB) return false;\r\n\r\n    for (i = 0; i < keys.length; i++)\r\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\r\n\r\n    for (i = 0; i < keys.length; i++)\r\n      if(!objectIncludes(a[keys[i]], b[keys[i]])) return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}","import {isString} from '../core/utils.js';\r\nimport Masked from './base.js';\r\nimport MaskedRegExp from './regexp.js';\r\nimport MaskedFunction from './function.js';\r\nimport MaskedNumber from './number.js';\r\n\r\n\r\nexport\r\nfunction maskedClass (mask) {\r\n  if (mask == null) {\r\n    throw new Error('mask property should be defined');\r\n  }\r\n\r\n  if (mask instanceof RegExp) return MaskedRegExp;\r\n  if (isString(mask)) return IMask.MaskedPattern;\r\n  if (mask.prototype instanceof Masked) return mask;\r\n  if (Array.isArray(mask) || mask === Array) return IMask.MaskedDynamic;\r\n  if (mask instanceof Number || typeof mask === 'number' || mask === Number) return MaskedNumber;\r\n  if (mask instanceof Date || mask === Date) return IMask.MaskedDate;\r\n  if (mask instanceof Function) return MaskedFunction;\r\n\r\n  console.warn('Mask not found for mask', mask);  // eslint-disable-line no-console\r\n  return Masked;\r\n}\r\n\r\n\r\nexport default\r\nfunction createMask (opts) {\r\n  opts = Object.assign({}, opts);  // clone\r\n  const mask = opts.mask;\r\n\r\n  if (mask instanceof Masked) return mask;\r\n\r\n  const MaskedClass = maskedClass(mask);\r\n  return new MaskedClass(opts);\r\n}\r\n","export default\r\nclass PatternGroup {\r\n  constructor(masked, {name, offset, mask, validate}) {\r\n    this.masked = masked;\r\n    this.name = name;\r\n    this.offset = offset;\r\n    this.mask = mask;\r\n    this.validate = validate || (() => true);\r\n  }\r\n\r\n  get value () {\r\n    return this.masked.value.slice(\r\n      this.masked.mapDefIndexToPos(this.offset),\r\n      this.masked.mapDefIndexToPos(this.offset + this.mask.length));\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this.masked.extractInput(\r\n      this.masked.mapDefIndexToPos(this.offset),\r\n      this.masked.mapDefIndexToPos(this.offset + this.mask.length));\r\n  }\r\n\r\n  doValidate (opts) {\r\n    return this.validate(this.value, this, opts);\r\n  }\r\n}\r\n\r\nexport\r\nclass RangeGroup {\r\n  constructor ([from, to], maxlen=String(to).length) {\r\n    this._from = from;\r\n    this._to = to;\r\n    this._maxLength = maxlen;\r\n    this.validate = this.validate.bind(this);\r\n\r\n    this._update();\r\n  }\r\n\r\n  get to () {\r\n    return this._to;\r\n  }\r\n\r\n  set to (to) {\r\n    this._to = to;\r\n    this._update();\r\n  }\r\n\r\n  get from () {\r\n    return this._from;\r\n  }\r\n\r\n  set from (from) {\r\n    this._from = from;\r\n    this._update();\r\n  }\r\n\r\n  get maxLength () {\r\n    return this._maxLength;\r\n  }\r\n\r\n  set maxLength (maxLength) {\r\n    this._maxLength = maxLength;\r\n    this._update();\r\n  }\r\n\r\n  get _matchFrom () {\r\n    return this.maxLength - String(this.from).length;\r\n  }\r\n\r\n  _update() {\r\n    this._maxLength = Math.max(this._maxLength, String(this.to).length);\r\n    this.mask = '0'.repeat(this._maxLength);\r\n  }\r\n\r\n  validate (str) {\r\n    let minstr = '';\r\n    let maxstr = '';\r\n\r\n    const [, placeholder, num] = str.match(/^(\\D*)(\\d*)(\\D*)/);\r\n    if (num) {\r\n      minstr = ('0'.repeat(placeholder.length) + num);\r\n      maxstr = ('9'.repeat(placeholder.length) + num);\r\n    }\r\n\r\n    const firstNonZero = str.search(/[^0]/);\r\n    if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\r\n\r\n    minstr = minstr.padEnd(this._maxLength, '0');\r\n    maxstr = maxstr.padEnd(this._maxLength, '9');\r\n\r\n    return this.from <= Number(maxstr) && Number(minstr) <= this.to;\r\n  }\r\n}\r\n\r\nexport\r\nfunction EnumGroup (enums) {\r\n  return {\r\n    mask: '*'.repeat(enums[0].length),\r\n    validate: (value, group) => enums.some(e => e.indexOf(group.unmaskedValue) >= 0)\r\n  };\r\n}\r\n\r\nPatternGroup.Range = RangeGroup;\r\nPatternGroup.Enum = EnumGroup;\r\n","import Masked from './masked/base.js';\r\nimport MaskedPattern from './masked/pattern.js';\r\nimport MaskedNumber from './masked/number.js';\r\nimport MaskedDate from './masked/date.js';\r\nimport MaskedRegExp from './masked/regexp.js';\r\nimport MaskedFunction from './masked/function.js';\r\nimport MaskedDynamic from './masked/dynamic.js';\r\n\r\nimport InputMask from './controls/input.js';\r\n\r\n\r\nexport default\r\nfunction IMask (el, opts={}) {\r\n\t// currently available only for input-like elements\r\n  return new InputMask(el, opts);\r\n}\r\n\r\n\r\nIMask.InputMask = InputMask;\r\n\r\nIMask.Masked = Masked;\r\nIMask.MaskedPattern = MaskedPattern;\r\nIMask.MaskedNumber = MaskedNumber;\r\nIMask.MaskedDate = MaskedDate;\r\nIMask.MaskedRegExp = MaskedRegExp;\r\nIMask.MaskedFunction = MaskedFunction;\r\nIMask.MaskedDynamic = MaskedDynamic;\r\n\r\nwindow.IMask = IMask;\r\n","export default\r\nclass ChangeDetails {\r\n  constructor (details) {\r\n    Object.assign(this, {\r\n      inserted: '',\r\n      overflow: false,\r\n      removedCount: 0,\r\n      shift: 0,\r\n    }, details);\r\n  }\r\n\r\n  aggregate (details) {\r\n    this.inserted += details.inserted;\r\n    this.removedCount += details.removedCount;\r\n    this.shift += details.shift;\r\n    this.overflow = this.overflow || details.overflow;\r\n    if (details.rawInserted) this.rawInserted += details.rawInserted;\r\n    return this;\r\n  }\r\n\r\n  get offset () {\r\n    return this.shift + this.inserted.length - this.removedCount;\r\n  }\r\n\r\n  get rawInserted () {\r\n    return this._rawInserted != null ?\r\n      this._rawInserted :\r\n      this.inserted;\r\n  }\r\n\r\n  set rawInserted (rawInserted) {\r\n    this._rawInserted = rawInserted;\r\n  }\r\n}\r\n","import ChangeDetails from '../core/change-details.js';\r\n\r\n\r\nexport default\r\nclass Masked {\r\n  constructor (opts) {\r\n    this._value = '';\r\n    this._update({\r\n      ...Masked.DEFAULTS,\r\n      ...opts\r\n    });\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  updateOptions (opts) {\r\n    this.withValueRefresh(this._update.bind(this, opts));\r\n  }\r\n\r\n  _update (opts) {\r\n    Object.assign(this, opts);\r\n  }\r\n\r\n  clone () {\r\n    const m = new Masked(this);\r\n    m._value = this.value.slice();\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    this._value = '';\r\n  }\r\n\r\n  get value () {\r\n    return this._value;\r\n  }\r\n\r\n  set value (value) {\r\n    this.resolve(value);\r\n  }\r\n\r\n  resolve (value) {\r\n    this.reset();\r\n    this._append(value, {input: true});\r\n    this._appendTail();\r\n    this.doCommit();\r\n    return this.value;\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this._unmask();\r\n  }\r\n\r\n  set unmaskedValue (value) {\r\n    this.reset();\r\n    this._append(value);\r\n    this._appendTail();\r\n    this.doCommit();\r\n  }\r\n\r\n  get rawInputValue () {\r\n    return this.extractInput(0, this.value.length, {raw: true});\r\n  }\r\n\r\n  set rawInputValue (value) {\r\n    this.reset();\r\n    this._append(value, {raw: true});\r\n    this._appendTail();\r\n    this.doCommit();\r\n  }\r\n\r\n  get isComplete () {\r\n    return true;\r\n  }\r\n\r\n  nearestInputPos (cursorPos, /* direction */) {\r\n    return cursorPos;\r\n  }\r\n\r\n  extractInput (fromPos=0, toPos=this.value.length /*, flags */) {\r\n    return this.value.slice(fromPos, toPos);\r\n  }\r\n\r\n  _extractTail (fromPos=0, toPos=this.value.length) {\r\n    return this.extractInput(fromPos, toPos);\r\n  }\r\n\r\n  _appendTail (tail=\"\") {\r\n    return this._append(tail, {tail: true});\r\n  }\r\n\r\n  _append (str, flags={}) {\r\n    const oldValueLength = this.value.length;\r\n    let consistentValue = this.clone();\r\n    let overflow = false;\r\n\r\n    str = this.doPrepare(str, flags);\r\n\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      this._value += str[ci];\r\n      if (this.doValidate(flags) === false) {\r\n        Object.assign(this, consistentValue);\r\n        if (!flags.input) {\r\n          // in `input` mode dont skip invalid chars\r\n          overflow = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      consistentValue = this.clone();\r\n    }\r\n\r\n    return new ChangeDetails({\r\n      inserted: this.value.slice(oldValueLength),\r\n      overflow\r\n    });\r\n  }\r\n\r\n  appendWithTail (str, tail) {\r\n    // TODO refactor\r\n    const aggregateDetails = new ChangeDetails();\r\n    let consistentValue = this.clone();\r\n    let consistentAppended;\r\n\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      const ch = str[ci];\r\n\r\n      const appendDetails = this._append(ch, {input: true});\r\n      consistentAppended = this.clone();\r\n      const tailAppended = !appendDetails.overflow && !this._appendTail(tail).overflow;\r\n      if (!tailAppended || this.doValidate({tail: true}) === false) {\r\n        Object.assign(this, consistentValue);\r\n        break;\r\n      }\r\n\r\n      consistentValue = this.clone();\r\n      Object.assign(this, consistentAppended);\r\n      aggregateDetails.aggregate(appendDetails);\r\n    }\r\n\r\n    // TODO needed for cases when\r\n    // 1) REMOVE ONLY AND NO LOOP AT ALL\r\n    // 2) last loop iteration removes tail\r\n    // 3) when breaks on tail insert\r\n\r\n    // aggregate only shift from tail\r\n    aggregateDetails.shift += this._appendTail(tail).shift;\r\n\r\n    return aggregateDetails;\r\n  }\r\n\r\n  _unmask () {\r\n    return this.value;\r\n  }\r\n\r\n  remove (from=0, count=this.value.length-from) {\r\n    this._value = this.value.slice(0, from) + this.value.slice(from + count);\r\n  }\r\n\r\n  withValueRefresh (fn) {\r\n    if (this._refreshing || !this.isInitialized) return fn();\r\n    this._refreshing = true;\r\n\r\n    const unmasked = this.unmaskedValue;\r\n\r\n    const ret = fn();\r\n\r\n    this.unmaskedValue = unmasked;\r\n\r\n    delete this._refreshing;\r\n    return ret;\r\n  }\r\n\r\n  doPrepare (str, flags) {\r\n    return this.prepare(str, this, flags);\r\n  }\r\n\r\n  doValidate (flags) {\r\n    return this.validate(this.value, this, flags);\r\n  }\r\n\r\n  doCommit () {\r\n    this.commit(this.value, this);\r\n  }\r\n\r\n  // TODO\r\n  // insert (str, fromPos, flags)\r\n\r\n  splice (start, deleteCount, inserted, removeDirection) {\r\n    const tailPos = start + deleteCount;\r\n    const tail = this._extractTail(tailPos);\r\n\r\n    const startChangePos = this.nearestInputPos(start, removeDirection);\r\n    this.remove(startChangePos);\r\n    const changeDetails = this.appendWithTail(inserted, tail);\r\n\r\n    // adjust shift if start was aligned\r\n    changeDetails.shift += startChangePos - start;\r\n    return changeDetails;\r\n  }\r\n}\r\n\r\nMasked.DEFAULTS = {\r\n  prepare: val => val,\r\n  validate: () => true,\r\n  commit: () => {},\r\n};\r\n","import Masked from './base.js';\r\n\r\n\r\nexport default\r\nclass MaskedRegExp extends Masked {\r\n  _update (opts) {\r\n    opts.validate = (value) => value.search(opts.mask) >= 0;\r\n    super._update(opts);\r\n  }\r\n}\r\n","import Masked from './base.js';\r\n\r\n\r\nexport default\r\nclass MaskedFunction extends Masked {\r\n  _update (opts) {\r\n    opts.validate = opts.mask;\r\n    super._update(opts);\r\n  }\r\n}\r\n","import {escapeRegExp, DIRECTION, indexInDirection} from '../core/utils.js';\r\nimport Masked from './base.js';\r\n\r\n\r\nexport default\r\nclass MaskedNumber extends Masked {\r\n  constructor (opts) {\r\n    super({\r\n      ...MaskedNumber.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  _update (opts) {\r\n    if (opts.postFormat) {\r\n      console.warn(\"'postFormat' option is deprecated and will be removed in next release, use plain options instead.\");\r\n      Object.assign(opts, opts.postFormat);\r\n      delete opts.postFormat;\r\n    }\r\n    super._update(opts);\r\n    this._updateRegExps();\r\n  }\r\n\r\n  _updateRegExps () {\r\n    // use different regexp to process user input (more strict, input suffix) and tail shifting\r\n    const start = '^'\r\n\r\n    let midInput = '';\r\n    let mid = '';\r\n    if (this.allowNegative) {\r\n      midInput += '([+|\\\\-]?|([+|\\\\-]?(0|([1-9]+\\\\d*))))';\r\n      mid += '[+|\\\\-]?';\r\n    } else {\r\n      midInput += '(0|([1-9]+\\\\d*))';\r\n    }\r\n    mid += '\\\\d*';\r\n\r\n    let end = (this.scale ?\r\n      '(' + this.radix + '\\\\d{0,' + this.scale + '})?' :\r\n      '') + '$';\r\n\r\n    this._numberRegExpInput = new RegExp(start + midInput + end);\r\n    this._numberRegExp = new RegExp(start + mid + end);\r\n    this._mapToRadixRegExp = new RegExp('[' +\r\n      this.mapToRadix.map(escapeRegExp).join('') +\r\n    ']', 'g');\r\n    this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\r\n  }\r\n\r\n  _extractTail (fromPos=0, toPos=this.value.length) {\r\n    return this._removeThousandsSeparators(super._extractTail(fromPos, toPos));\r\n  }\r\n\r\n  _removeThousandsSeparators (value) {\r\n    return value.replace(this._thousandsSeparatorRegExp, '');\r\n  }\r\n\r\n  _insertThousandsSeparators (value) {\r\n    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\r\n    const parts = value.split(this.radix);\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\r\n    return parts.join(this.radix);\r\n  }\r\n\r\n  doPrepare (str, ...args) {\r\n    return super.doPrepare(this._removeThousandsSeparators(str.replace(this._mapToRadixRegExp, this.radix)), ...args);\r\n  }\r\n\r\n  appendWithTail (...args) {\r\n    const oldValueLength = this.value.length;\r\n    this._value = this._removeThousandsSeparators(this.value);\r\n    let startChangePos = this.value.length;\r\n\r\n    const appendDetails = super.appendWithTail(...args);\r\n    this._value = this._insertThousandsSeparators(this.value);\r\n\r\n    // calculate offsets after insert separators\r\n    let beforeTailPos = startChangePos + appendDetails.inserted.length;\r\n    for (let pos = 0; pos <= beforeTailPos; ++pos) {\r\n      if (this.value[pos] === this.thousandsSeparator) {\r\n        if (pos <= startChangePos) ++startChangePos;\r\n        ++beforeTailPos;\r\n      }\r\n    }\r\n\r\n    // adjust details with separators\r\n    appendDetails.rawInserted = appendDetails.inserted;\r\n    appendDetails.inserted = this.value.slice(startChangePos, beforeTailPos);\r\n    appendDetails.shift += startChangePos - oldValueLength;\r\n\r\n    return appendDetails;\r\n  }\r\n\r\n  nearestInputPos (cursorPos, direction=DIRECTION.LEFT) {\r\n    if (!direction) return cursorPos;\r\n\r\n    const nextPos = indexInDirection(cursorPos, direction);\r\n    if (this.value[nextPos] === this.thousandsSeparator) cursorPos += direction;\r\n    return cursorPos;\r\n  }\r\n\r\n  doValidate (flags) {\r\n    const regexp = flags.input ? this._numberRegExpInput : this._numberRegExp;\r\n\r\n    // validate as string\r\n    let valid = regexp.test(this._removeThousandsSeparators(this.value));\r\n\r\n    if (valid) {\r\n      // validate as number\r\n      const number = this.number;\r\n      valid = valid && !isNaN(number) &&\r\n        // check min bound for negative values\r\n        (this.min == null || this.min >= 0 || this.min <= this.number) &&\r\n        // check max bound for positive values\r\n        (this.max == null || this.max <= 0 || this.number <= this.max);\r\n    }\r\n\r\n    return valid && super.doValidate(flags);\r\n  }\r\n\r\n  doCommit () {\r\n    const number = this.number;\r\n    let validnum = number;\r\n\r\n    // check bounds\r\n    if (this.min != null) validnum = Math.max(validnum, this.min);\r\n    if (this.max != null) validnum = Math.min(validnum, this.max);\r\n\r\n    if (validnum !== number) this.unmaskedValue = String(validnum);\r\n\r\n    let formatted = this.value;\r\n\r\n    if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\r\n    if (this.padFractionalZeros) formatted = this._padFractionalZeros(formatted);\r\n\r\n    this._value = formatted;\r\n    super.doCommit();\r\n  }\r\n\r\n  _normalizeZeros (value) {\r\n    const parts = this._removeThousandsSeparators(value).split(this.radix);\r\n\r\n    // remove leading zeros\r\n    parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, (match, sign, zeros, num) => sign + num);\r\n    // add leading zero\r\n    if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\r\n\r\n    if (parts.length > 1) {\r\n      parts[1] = parts[1].replace(/0*$/, '');  // remove trailing zeros\r\n      if (!parts[1].length) parts.length = 1;  // remove fractional\r\n    }\r\n\r\n    return this._insertThousandsSeparators(parts.join(this.radix));\r\n  }\r\n\r\n  _padFractionalZeros (value) {\r\n    const parts = value.split(this.radix);\r\n    if (parts.length < 2) parts.push('');\r\n    parts[1] = parts[1].padEnd(this.scale, '0');\r\n    return parts.join(this.radix);\r\n  }\r\n\r\n  get number () {\r\n    let numstr =\r\n      this._removeThousandsSeparators(\r\n        this._normalizeZeros(\r\n          this.unmaskedValue))\r\n      .replace(this.radix, '.');\r\n\r\n    return Number(numstr);\r\n  }\r\n\r\n  set number (number) {\r\n    this.unmaskedValue = String(number).replace('.', this.radix);\r\n  }\r\n\r\n  get allowNegative () {\r\n    return this.signed ||\r\n      (this.min != null && this.min < 0) ||\r\n      (this.max != null && this.max < 0);\r\n  }\r\n}\r\nMaskedNumber.DEFAULTS = {\r\n  radix: ',',\r\n  thousandsSeparator: '',\r\n  mapToRadix: ['.'],\r\n  scale: 2,\r\n  signed: false,\r\n  normalizeZeros: true,\r\n  padFractionalZeros: false,\r\n};\r\n","import createMask from '../factory.js';\r\n\r\n\r\nexport default\r\nclass PatternDefinition {\r\n  constructor(opts) {\r\n    Object.assign(this, opts);\r\n\r\n    if (this.mask) {\r\n      this._masked = createMask(opts);\r\n    }\r\n  }\r\n\r\n  reset () {\r\n    this.isHollow = false;\r\n    this.isRawInput = false;\r\n    if (this._masked) this._masked.reset();\r\n  }\r\n\r\n  get isInput () {\r\n    return this.type === PatternDefinition.TYPES.INPUT;\r\n  }\r\n\r\n  get isHiddenHollow () {\r\n    return this.isHollow && this.optional;\r\n  }\r\n\r\n  resolve (ch) {\r\n    if (!this._masked) return false;\r\n    return this._masked.resolve(ch);\r\n  }\r\n}\r\n\r\nPatternDefinition.DEFAULTS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternDefinition.TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n};\r\n","import {conform, DIRECTION, indexInDirection} from '../core/utils.js';\r\nimport ChangeDetails from '../core/change-details.js';\r\nimport Masked from './base.js';\r\nimport PatternDefinition from './pattern/definition.js';\r\nimport PatternGroup from './pattern/group.js';\r\n\r\n\r\nexport default\r\nclass MaskedPattern extends Masked {\r\n  constructor (opts={}) {\r\n    opts.definitions = Object.assign({}, PatternDefinition.DEFAULTS, opts.definitions);\r\n    super({\r\n      ...MaskedPattern.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  _update (opts) {\r\n    opts.definitions = Object.assign({}, this.definitions, opts.definitions);\r\n    if (opts.placeholder) {\r\n      console.warn(\"'placeholder' option is deprecated and will be removed in next release, use 'placeholderChar' and 'placeholderLazy' instead.\");\r\n      if ('char' in opts.placeholder) opts.placeholderChar = opts.placeholder.char;\r\n      if ('lazy' in opts.placeholder) opts.placeholderLazy = opts.placeholder.lazy;\r\n    }\r\n    super._update(opts);\r\n    this._updateMask();\r\n  }\r\n\r\n  _updateMask () {\r\n    const defs = this.definitions;\r\n    this._charDefs = [];\r\n    this._groupDefs = [];\r\n\r\n    let pattern = this.mask;\r\n    if (!pattern || !defs) return;\r\n\r\n    let unmaskingBlock = false;\r\n    let optionalBlock = false;\r\n    let stopAlign = false;\r\n\r\n    for (let i=0; i<pattern.length; ++i) {\r\n      if (this.groups) {\r\n        const p = pattern.slice(i);\r\n        const gNames = Object.keys(this.groups).filter(gName => p.indexOf(gName) === 0);\r\n        // order by key length\r\n        gNames.sort((a, b) => b.length - a.length);\r\n        // use group name with max length\r\n        const gName = gNames[0];\r\n        if (gName) {\r\n          const group = this.groups[gName];\r\n          this._groupDefs.push(new PatternGroup(this, {\r\n            name: gName,\r\n            offset: this._charDefs.length,\r\n            mask: group.mask,\r\n            validate: group.validate\r\n          }));\r\n          pattern = pattern.replace(gName, group.mask);\r\n        }\r\n      }\r\n\r\n      let char = pattern[i];\r\n      let type = !unmaskingBlock && char in defs ?\r\n        PatternDefinition.TYPES.INPUT :\r\n        PatternDefinition.TYPES.FIXED;\r\n      const unmasking = type === PatternDefinition.TYPES.INPUT || unmaskingBlock;\r\n      const optional = type === PatternDefinition.TYPES.INPUT && optionalBlock;\r\n\r\n      if (char === MaskedPattern.STOP_CHAR) {\r\n        stopAlign = true;\r\n        continue;\r\n      }\r\n\r\n      if (char === '{' || char === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === '[' || char === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === MaskedPattern.ESCAPE_CHAR) {\r\n        ++i;\r\n        char = pattern[i];\r\n        if (!char) break;\r\n        type = PatternDefinition.TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push(new PatternDefinition({\r\n        char,\r\n        type,\r\n        optional,\r\n        stopAlign,\r\n        unmasking,\r\n        mask: type === PatternDefinition.TYPES.INPUT ?\r\n          defs[char] :\r\n          (value => value === char)\r\n      }));\r\n\r\n      stopAlign = false;\r\n    }\r\n  }\r\n\r\n  doValidate (...args) {\r\n    return this._groupDefs.every(g => g.doValidate(...args)) && super.doValidate(...args);\r\n  }\r\n\r\n  clone () {\r\n    const m = new MaskedPattern(this);\r\n    m._value = this.value;\r\n    m._charDefs.forEach((d, i) => Object.assign(d, this._charDefs[i]));\r\n    m._groupDefs.forEach((d, i) => Object.assign(d, this._groupDefs[i]));\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    super.reset();\r\n    this._charDefs.forEach(d => {delete d.isHollow;});\r\n  }\r\n\r\n  get isComplete () {\r\n    return !this._charDefs.some((d, i) =>\r\n      d.isInput && !d.optional && (d.isHollow || !this.extractInput(i, i+1)));\r\n  }\r\n\r\n  hiddenHollowsBefore (defIndex) {\r\n    return this._charDefs\r\n      .slice(0, defIndex)\r\n      .filter(d => d.isHiddenHollow)\r\n      .length;\r\n  }\r\n\r\n  mapDefIndexToPos (defIndex) {\r\n    if (defIndex == null) return;\r\n    return defIndex - this.hiddenHollowsBefore(defIndex);\r\n  }\r\n\r\n  mapPosToDefIndex (pos) {\r\n    if (pos == null) return;\r\n    let defIndex = pos;\r\n    for (let di=0; di<this._charDefs.length; ++di) {\r\n      const def = this._charDefs[di];\r\n      if (di >= defIndex) break;\r\n      if (def.isHiddenHollow) ++defIndex;\r\n    }\r\n    return defIndex;\r\n  }\r\n\r\n  _unmask () {\r\n    const str = this.value;\r\n    let unmasked = '';\r\n\r\n    for (let ci=0, di=0; ci<str.length && di<this._charDefs.length; ++di) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      if (def.isHiddenHollow) continue;\r\n      if (def.unmasking && !def.isHollow) unmasked += ch;\r\n      ++ci;\r\n    }\r\n\r\n    return unmasked;\r\n  }\r\n\r\n  _appendTail (tail=[]) {\r\n    return this._appendChunks(tail, {tail: true}).aggregate(this._appendPlaceholder());\r\n  }\r\n\r\n  _append (str, flags={}) {\r\n    const oldValueLength = this.value.length;\r\n    let rawInserted = '';\r\n    let overflow = false;\r\n\r\n    str = this.doPrepare(str, flags);\r\n\r\n    for (let ci=0, di=this.mapPosToDefIndex(this.value.length); ci < str.length;) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      // check overflow\r\n      if (!def) {\r\n        overflow = true;\r\n        break;\r\n      }\r\n\r\n      // reset\r\n      def.isHollow = false;\r\n\r\n      let resolved, skipped;\r\n      let chres = conform(def.resolve(ch), ch);\r\n\r\n      if (def.type === PatternDefinition.TYPES.INPUT) {\r\n        if (chres) {\r\n          this._value += chres;\r\n          if (!this.doValidate()) {\r\n            chres = '';\r\n            this._value = this.value.slice(0, -1);\r\n          }\r\n        }\r\n\r\n        resolved = !!chres;\r\n        skipped = !chres && !def.optional;\r\n\r\n        if (!chres) {\r\n          if (!def.optional && !flags.input) {\r\n            this._value += this.placeholderChar;\r\n            skipped = false;\r\n          }\r\n          if (!skipped) def.isHollow = true;\r\n        } else {\r\n          rawInserted += chres;\r\n        }\r\n      } else {\r\n        this._value += def.char;\r\n        resolved = chres && (def.unmasking || flags.input || flags.raw) && !flags.tail;\r\n        def.isRawInput = resolved && (flags.raw || flags.input);\r\n        if (def.isRawInput) rawInserted += def.char;\r\n      }\r\n\r\n      if (!skipped) ++di;\r\n      if (resolved || skipped) ++ci;\r\n    }\r\n\r\n    return new ChangeDetails({\r\n      inserted: this.value.slice(oldValueLength),\r\n      rawInserted,\r\n      overflow\r\n    });\r\n  }\r\n\r\n  _appendChunks (chunks, ...args) {\r\n    const details = new ChangeDetails();\r\n    for (let ci=0; ci < chunks.length; ++ci) {\r\n      const [fromDefIndex, input] = chunks[ci];\r\n      if (fromDefIndex != null) details.aggregate(this._appendPlaceholder(fromDefIndex));\r\n      if (details.aggregate(this._append(input, ...args)).overflow) break;\r\n    }\r\n    return details;\r\n  }\r\n\r\n  _extractTail (fromPos, toPos) {\r\n    return this._extractInputChunks(fromPos, toPos);\r\n  }\r\n\r\n  extractInput (fromPos=0, toPos=this.value.length, flags={}) {\r\n    if (fromPos === toPos) return '';\r\n\r\n    const str = this.value;\r\n    let input = '';\r\n\r\n    const toDefIndex = this.mapPosToDefIndex(toPos);\r\n    for (\r\n      let ci=fromPos, di=this.mapPosToDefIndex(fromPos);\r\n      ci<toPos && ci<str.length && di < toDefIndex;\r\n      ++di\r\n    ) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      if (!def) break;\r\n      if (def.isHiddenHollow) continue;\r\n\r\n      if (def.isInput && !def.isHollow ||\r\n        flags.raw && !def.isInput && def.isRawInput) input += ch;\r\n      ++ci;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  _extractInputChunks (fromPos=0, toPos=this.value.length) {\r\n    if (fromPos === toPos) return [];\r\n\r\n    const fromDefIndex = this.mapPosToDefIndex(fromPos);\r\n    const toDefIndex = this.mapPosToDefIndex(toPos);\r\n    const stopDefIndices = this._charDefs\r\n      .map((d, i) => [d, i])\r\n      .slice(fromDefIndex, toDefIndex)\r\n      .filter(([d]) => d.stopAlign)\r\n      .map(([, i]) => i);\r\n\r\n    const stops = [\r\n      fromDefIndex,\r\n      ...stopDefIndices,\r\n      toDefIndex\r\n    ];\r\n\r\n    return stops.map((s, i) => [\r\n      stopDefIndices.indexOf(s) >= 0 ?\r\n        s :\r\n        null,\r\n\r\n      this.extractInput(\r\n        this.mapDefIndexToPos(s),\r\n        this.mapDefIndexToPos(stops[++i]))\r\n    ]).filter(([stop, input]) => stop != null || input);\r\n  }\r\n\r\n  _appendPlaceholder (toDefIndex) {\r\n    const oldValueLength = this.value.length;\r\n    const maxDefIndex = toDefIndex || this._charDefs.length;\r\n    for (let di=this.mapPosToDefIndex(this.value.length); di < maxDefIndex; ++di) {\r\n      const def = this._charDefs[di];\r\n      if (def.isInput) def.isHollow = true;\r\n\r\n      if (!this.placeholderLazy || toDefIndex) {\r\n        this._value += !def.isInput ?\r\n          def.char :\r\n          !def.optional ?\r\n            this.placeholderChar :\r\n            '';\r\n      }\r\n    }\r\n    return new ChangeDetails({\r\n      inserted: this.value.slice(oldValueLength)\r\n    });\r\n  }\r\n\r\n  remove (from=0, count=this.value.length-from) {\r\n    const to = from + count;\r\n    this._value = this.value.slice(0, from) + this.value.slice(to);\r\n    const fromDefIndex = this.mapPosToDefIndex(from);\r\n    const toDefIndex = this.mapPosToDefIndex(to);\r\n    this._charDefs\r\n      .slice(fromDefIndex, toDefIndex)\r\n      .forEach(d => d.reset());\r\n  }\r\n\r\n  nearestInputPos (cursorPos, direction=DIRECTION.NONE) {\r\n    let dir = direction || DIRECTION.LEFT;\r\n\r\n    const initialDefIndex = this.mapPosToDefIndex(cursorPos);\r\n    const initialDef = this._charDefs[initialDefIndex];\r\n    let di = initialDefIndex;\r\n\r\n    let firstInputIndex,\r\n        firstFilledInputIndex,\r\n        firstVisibleHollowIndex,\r\n        nextdi;\r\n\r\n    // search forward\r\n    for (\r\n      nextdi = indexInDirection(di, dir);\r\n      0 <= nextdi && nextdi < this._charDefs.length;\r\n      di += dir, nextdi += dir\r\n    ) {\r\n      const nextDef = this._charDefs[nextdi];\r\n      if (firstInputIndex == null && nextDef.isInput) firstInputIndex = di;\r\n      if (firstVisibleHollowIndex == null && nextDef.isHollow && !nextDef.isHiddenHollow) firstVisibleHollowIndex = di;\r\n      if (nextDef.isInput && !nextDef.isHollow) {\r\n        firstFilledInputIndex = di;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // if has aligned left not inside fixed and has come to the start - use start position\r\n    if (direction === DIRECTION.LEFT && di === 0 &&\r\n      (!initialDef || !initialDef.isInput)) firstInputIndex = 0;\r\n\r\n    if (direction === DIRECTION.NONE || firstInputIndex == null) {\r\n      // search backward\r\n      dir = -dir;\r\n      let overflow = false;\r\n\r\n      // find hollows only before initial pos\r\n      for (\r\n        nextdi = indexInDirection(di, dir);\r\n        0 <= nextdi && nextdi < this._charDefs.length;\r\n        di += dir, nextdi += dir\r\n      ) {\r\n        const nextDef = this._charDefs[nextdi];\r\n        if (nextDef.isInput) {\r\n          firstInputIndex = di;\r\n          if (nextDef.isHollow && !nextDef.isHiddenHollow) break;\r\n        }\r\n\r\n        // if hollow not found before start position - set `overflow`\r\n        // and try to find just any input\r\n        if (di === initialDefIndex) overflow = true;\r\n\r\n        // first input found\r\n        if (overflow && firstInputIndex != null) break;\r\n      }\r\n\r\n      // process overflow\r\n      overflow = overflow || nextdi >= this._charDefs.length;\r\n      if (overflow && firstInputIndex != null) di = firstInputIndex;\r\n    } else if (firstFilledInputIndex == null) {\r\n      // adjust index if delete at right and filled input not found at right\r\n      di = firstVisibleHollowIndex != null ?\r\n        firstVisibleHollowIndex :\r\n        firstInputIndex;\r\n    }\r\n\r\n    return this.mapDefIndexToPos(di);\r\n  }\r\n\r\n  group (name) {\r\n    return this.groupsByName(name)[0];\r\n  }\r\n\r\n  groupsByName (name) {\r\n    return this._groupDefs.filter(g => g.name === name);\r\n  }\r\n}\r\n\r\nMaskedPattern.DEFAULTS = {\r\n  placeholderLazy: true,\r\n  placeholderChar: '_'\r\n};\r\nMaskedPattern.STOP_CHAR = '`';\r\nMaskedPattern.ESCAPE_CHAR = '\\\\';\r\nMaskedPattern.Definition = PatternDefinition;\r\nMaskedPattern.Group = PatternGroup;\r\n","import MaskedPattern from './pattern.js';\r\nimport PatternGroup from './pattern/group.js';\r\n\r\n\r\nexport default\r\nclass MaskedDate extends MaskedPattern {\r\n  constructor (opts) {\r\n    super({\r\n      ...MaskedDate.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  _update (opts) {\r\n    if (opts.mask === Date) delete opts.mask;\r\n    if (opts.pattern) {\r\n      opts.mask = opts.pattern;\r\n      delete opts.pattern;\r\n    }\r\n\r\n    const groups = opts.groups;\r\n    opts.groups = Object.assign({}, MaskedDate.GET_DEFAULT_GROUPS());\r\n    // adjust year group\r\n    if (opts.min) opts.groups.Y.from = opts.min.getFullYear();\r\n    if (opts.max) opts.groups.Y.to = opts.max.getFullYear();\r\n    Object.assign(opts.groups, groups);\r\n\r\n    super._update(opts);\r\n  }\r\n\r\n  doValidate (...args) {\r\n    const valid = super.doValidate(...args);\r\n    const date = this.date;\r\n\r\n    return valid &&\r\n      (!this.isComplete ||\r\n        this.isDateExist(this.value) && date &&\r\n        (this.min == null || this.min <= date) &&\r\n        (this.max == null || date <= this.max));\r\n  }\r\n\r\n  isDateExist (str) {\r\n    return this.format(this.parse(str)) === str;\r\n  }\r\n\r\n  get date () {\r\n    return this.isComplete ?\r\n      this.parse(this.value) :\r\n      null;\r\n  }\r\n\r\n  set date (date) {\r\n    this.value = this.format(date);\r\n  }\r\n}\r\nMaskedDate.DEFAULTS = {\r\n  pattern: 'd{.}`m{.}`Y',\r\n  format: date => {\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const year = date.getFullYear();\r\n\r\n    return [day, month, year].join('.');\r\n  },\r\n  parse: str => {\r\n    const [day, month, year] = str.split('.');\r\n    return new Date(year, month - 1, day);\r\n  },\r\n};\r\nMaskedDate.GET_DEFAULT_GROUPS = () => {\r\n  return {\r\n    d: new PatternGroup.Range([1, 31]),\r\n    m: new PatternGroup.Range([1, 12]),\r\n    Y: new PatternGroup.Range([1900, 9999]),\r\n  };\r\n}","import ChangeDetails from '../core/change-details.js';\r\nimport createMask from './factory.js';\r\nimport Masked from './base.js';\r\n\r\n\r\nexport default\r\nclass MaskedDynamic extends Masked {\r\n  constructor (opts) {\r\n    super({\r\n      ...MaskedDynamic.DEFAULTS,\r\n      ...opts\r\n    });\r\n\r\n    this.currentMask = null;\r\n  }\r\n\r\n  _update (opts) {\r\n    super._update(opts);\r\n    this.compiledMasks = Array.isArray(opts.mask) ?\r\n      opts.mask.map(m => createMask(m)) :\r\n      [];\r\n  }\r\n\r\n  _append (str, ...args) {\r\n    const oldValueLength = this.value.length;\r\n    const details = new ChangeDetails();\r\n\r\n    str = this.doPrepare(str, ...args);\r\n\r\n    const inputValue = this.rawInputValue;\r\n    this.currentMask = this.doDispatch(str, ...args);\r\n    if (this.currentMask) {\r\n      // update current mask\r\n      this.currentMask.rawInputValue = inputValue;\r\n      details.shift = this.value.length - oldValueLength;\r\n      details.aggregate(this.currentMask._append(str, ...args));\r\n    }\r\n\r\n    return details;\r\n  }\r\n\r\n  doDispatch(appended, flags) {\r\n    return this.dispatch(appended, this, flags);\r\n  }\r\n\r\n  clone () {\r\n    const m = new MaskedDynamic(this);\r\n    m._value = this.value;\r\n    if (this.currentMask) m.currentMask = this.currentMask.clone();\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    if (this.currentMask) this.currentMask.reset();\r\n    this.compiledMasks.forEach(cm => cm.reset());\r\n  }\r\n\r\n  get value () {\r\n    return this.currentMask ? this.currentMask.value : '';\r\n  }\r\n\r\n  set value (value) {\r\n    this.resolve(value);\r\n  }\r\n\r\n  get isComplete () {\r\n    return !!this.currentMask && this.currentMask.isComplete;\r\n  }\r\n\r\n  _unmask () {\r\n    return this.currentMask ? this.currentMask._unmask() : '';\r\n  }\r\n\r\n  remove (...args) {\r\n    if (this.currentMask) this.currentMask.remove(...args);\r\n  }\r\n\r\n  extractInput (...args) {\r\n    return this.currentMask ?\r\n      this.currentMask.extractInput(...args) :\r\n      '';\r\n  }\r\n\r\n  doCommit () {\r\n    if (this.currentMask) this.currentMask.doCommit();\r\n    super.doCommit();\r\n  }\r\n\r\n  nearestInputPos(...args) {\r\n    return this.currentMask ?\r\n      this.currentMask.nearestInputPos(...args) :\r\n      super.nearestInputPos(...args);\r\n  }\r\n}\r\n\r\nMaskedDynamic.DEFAULTS = {\r\n  dispatch: (appended, masked, flags) => {\r\n    if (!masked.compiledMasks.length) return;\r\n\r\n    const inputValue = masked.rawInputValue;\r\n\r\n    // update all\r\n    masked.compiledMasks.forEach(cm => {\r\n      cm.rawInputValue = inputValue;\r\n      cm._append(appended, flags);\r\n    });\r\n\r\n    // pop masks with longer values first\r\n    const inputs = masked.compiledMasks.map((cm, index) => ({value: cm.rawInputValue.length, index}));\r\n    inputs.sort((i1, i2) => i2.value - i1.value);\r\n\r\n    return masked.compiledMasks[inputs[0].index];\r\n  }\r\n};\r\n","import {DIRECTION} from './utils.js';\r\n\r\n\r\nexport default\r\nclass ActionDetails {\r\n  constructor (value, cursorPos, oldValue, oldSelection) {\r\n    this.value = value;\r\n    this.cursorPos = cursorPos;\r\n    this.oldValue = oldValue;\r\n    this.oldSelection = oldSelection;\r\n\r\n    // double check if left part was changed (autofilling, other non-standard input triggers)\r\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\r\n      --this.oldSelection.start;\r\n    }\r\n  }\r\n\r\n  get startChangePos () {\r\n    return Math.min(this.cursorPos, this.oldSelection.start);\r\n  }\r\n\r\n  get insertedCount () {\r\n    return this.cursorPos - this.startChangePos;\r\n  }\r\n\r\n  get inserted () {\r\n    return this.value.substr(this.startChangePos, this.insertedCount);\r\n  }\r\n\r\n  get removedCount () {\r\n    // Math.max for opposite operation\r\n    return Math.max((this.oldSelection.end - this.startChangePos) ||\r\n      // for Delete\r\n      this.oldValue.length - this.value.length, 0);\r\n  }\r\n\r\n  get removed () {\r\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\r\n  }\r\n\r\n  get head () {\r\n    return this.value.substring(0, this.startChangePos);\r\n  }\r\n\r\n  get tail () {\r\n    this.value.substring(this.startChangePos + this.insertedCount);\r\n  }\r\n\r\n  get removeDirection () {\r\n    return this.removedCount && !this.insertedCount &&\r\n      ((this.oldSelection.end === this.cursorPos) ?\r\n        DIRECTION.RIGHT :\r\n        DIRECTION.LEFT);\r\n  }\r\n}\r\n","import {objectIncludes} from '../core/utils.js';\r\nimport ActionDetails from '../core/action-details.js';\r\nimport MaskedDate from '../masked/date.js';\r\nimport createMask, {maskedClass} from '../masked/factory.js';\r\n\r\n\r\nexport default\r\nclass InputMask {\r\n  constructor (el, opts) {\r\n    this.el = el;\r\n    this.masked = createMask(opts);\r\n\r\n    this._listeners = {};\r\n    this._value = '';\r\n    this._unmaskedValue = '';\r\n\r\n    this._saveSelection = this._saveSelection.bind(this);\r\n    this._onInput = this._onInput.bind(this);\r\n    this._onChange = this._onChange.bind(this);\r\n    this._onDrop = this._onDrop.bind(this);\r\n    this.alignCursor = this.alignCursor.bind(this);\r\n    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\r\n\r\n    this.bindEvents();\r\n\r\n    // refresh\r\n    this.updateValue();\r\n    this._onChange();\r\n  }\r\n\r\n  get mask () { return this.masked.mask; }\r\n  set mask (mask) {\r\n    if (mask == null || mask === this.masked.mask) return;\r\n\r\n    if (this.masked.constructor === maskedClass(mask)) {\r\n      this.masked.mask = mask;\r\n      return;\r\n    }\r\n\r\n    const masked = createMask({mask});\r\n    masked.unmaskedValue = this.masked.unmaskedValue;\r\n    this.masked = masked;\r\n  }\r\n\r\n  get value () {\r\n    return this._value;\r\n  }\r\n\r\n  set value (str) {\r\n    this.masked.value = str;\r\n    this.updateControl();\r\n    this.alignCursor();\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this._unmaskedValue;\r\n  }\r\n\r\n  set unmaskedValue (str) {\r\n    this.masked.unmaskedValue = str;\r\n    this.updateControl();\r\n    this.alignCursor();\r\n  }\r\n\r\n  bindEvents () {\r\n    this.el.addEventListener('keydown', this._saveSelection);\r\n    this.el.addEventListener('input', this._onInput);\r\n    this.el.addEventListener('drop', this._onDrop);\r\n    this.el.addEventListener('click', this.alignCursorFriendly);\r\n    this.el.addEventListener('change', this._onChange);\r\n  }\r\n\r\n  unbindEvents () {\r\n    this.el.removeEventListener('keydown', this._saveSelection);\r\n    this.el.removeEventListener('input', this._onInput);\r\n    this.el.removeEventListener('drop', this._onDrop);\r\n    this.el.removeEventListener('click', this.alignCursorFriendly);\r\n    this.el.removeEventListener('change', this._onChange);\r\n  }\r\n\r\n  fireEvent (ev) {\r\n    const listeners = this._listeners[ev] || [];\r\n    listeners.forEach(l => l());\r\n  }\r\n\r\n  get selectionStart () {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionStart;\r\n  }\r\n\r\n  get cursorPos () {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionEnd;\r\n  }\r\n\r\n  set cursorPos (pos) {\r\n    if (this.el !== document.activeElement) return;\r\n\r\n    this.el.setSelectionRange(pos, pos);\r\n    this._saveSelection();\r\n  }\r\n\r\n  _saveSelection (/* ev */) {\r\n    if (this.value !== this.el.value) {\r\n      console.warn('Uncontrolled input change, refresh mask manually!'); // eslint-disable-line no-console\r\n    }\r\n    this._selection = {\r\n      start: this.selectionStart,\r\n      end: this.cursorPos\r\n    };\r\n  }\r\n\r\n  updateValue () {\r\n    this.masked.value = this.el.value;\r\n  }\r\n\r\n  updateControl () {\r\n    const newUnmaskedValue = this.masked.unmaskedValue;\r\n    const newValue = this.masked.value;\r\n    const isChanged = (this.unmaskedValue !== newUnmaskedValue ||\r\n      this.value !== newValue);\r\n\r\n    this._unmaskedValue = newUnmaskedValue;\r\n    this._value = newValue;\r\n\r\n    if (this.el.value !== newValue) this.el.value = newValue;\r\n    if (isChanged) this._fireChangeEvents();\r\n  }\r\n\r\n  updateOptions (opts) {\r\n    opts = Object.assign({}, opts);  // clone\r\n    if (opts.mask === Date && this.masked instanceof MaskedDate) delete opts.mask;\r\n\r\n    // check if changed\r\n    if (objectIncludes(this.masked, opts)) return;\r\n\r\n    this.masked.updateOptions(opts);\r\n    this.updateControl();\r\n  }\r\n\r\n  updateCursor (cursorPos) {\r\n    if (cursorPos == null) return;\r\n    this.cursorPos = cursorPos;\r\n\r\n    // also queue change cursor for mobile browsers\r\n    this._delayUpdateCursor(cursorPos);\r\n  }\r\n\r\n  _delayUpdateCursor (cursorPos) {\r\n    this._abortUpdateCursor();\r\n    this._changingCursorPos = cursorPos;\r\n    this._cursorChanging = setTimeout(() => {\r\n      this.cursorPos = this._changingCursorPos;\r\n      this._abortUpdateCursor();\r\n    }, 10);\r\n  }\r\n\r\n  _fireChangeEvents () {\r\n    this.fireEvent('accept');\r\n    if (this.masked.isComplete) this.fireEvent('complete');\r\n  }\r\n\r\n  _abortUpdateCursor () {\r\n    if (this._cursorChanging) {\r\n      clearTimeout(this._cursorChanging);\r\n      delete this._cursorChanging;\r\n    }\r\n  }\r\n\r\n  alignCursor () {\r\n    this.cursorPos = this.masked.nearestInputPos(this.cursorPos);\r\n  }\r\n\r\n  alignCursorFriendly () {\r\n    if (this.selectionStart !== this.cursorPos) return;\r\n    this.alignCursor();\r\n  }\r\n\r\n  on (ev, handler) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n    return this;\r\n  }\r\n\r\n  off (ev, handler) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    const hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners.splice(hIndex, 1);\r\n    return this;\r\n  }\r\n\r\n  _onInput () {\r\n    this._abortUpdateCursor();\r\n\r\n    const details = new ActionDetails(\r\n      // new state\r\n      this.el.value, this.cursorPos,\r\n      // old state\r\n      this.value, this._selection);\r\n\r\n    const offset = this.masked.splice(\r\n      details.startChangePos,\r\n      details.removed.length,\r\n      details.inserted,\r\n      details.removeDirection).offset;\r\n\r\n\r\n    const cursorPos = this.masked.nearestInputPos(details.startChangePos + offset);\r\n\r\n    this.updateControl();\r\n    this.updateCursor(cursorPos);\r\n  }\r\n\r\n  _onChange () {\r\n    if (this.value !== this.el.value) {\r\n      this.updateValue();\r\n    }\r\n    this.masked.doCommit();\r\n    this.updateControl();\r\n  }\r\n\r\n  _onDrop (ev) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  destroy () {\r\n    this.unbindEvents();\r\n    this._listeners.length = 0;\r\n  }\r\n}\r\n"],"names":["isString","str","String","conform","res","fallback","indexInDirection","pos","direction","DIRECTION","LEFT","escapeRegExp","replace","objectIncludes","b","a","i","arrA","Array","isArray","arrB","length","keys","Object","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","toString","prototype","hasOwnProperty","call","maskedClass","mask","Error","MaskedRegExp","IMask","MaskedPattern","Masked","MaskedDynamic","Number","MaskedNumber","MaskedDate","Function","MaskedFunction","warn","createMask","opts","assign","EnumGroup","enums","repeat","value","group","some","e","indexOf","unmaskedValue","el","InputMask","ChangeDetails","details","this","inserted","removedCount","shift","overflow","rawInserted","_rawInserted","_value","_update","DEFAULTS","isInitialized","withValueRefresh","bind","m","slice","resolve","reset","_append","input","_appendTail","doCommit","_unmask","extractInput","raw","cursorPos","fromPos","toPos","tail","flags","oldValueLength","consistentValue","clone","doPrepare","ci","doValidate","aggregateDetails","consistentAppended","ch","appendDetails","aggregate","from","count","fn","_refreshing","unmasked","ret","prepare","validate","commit","start","deleteCount","removeDirection","tailPos","_extractTail","startChangePos","nearestInputPos","remove","changeDetails","appendWithTail","val","search","postFormat","_updateRegExps","midInput","mid","allowNegative","end","scale","radix","_numberRegExpInput","_numberRegExp","_mapToRadixRegExp","mapToRadix","map","join","_thousandsSeparatorRegExp","thousandsSeparator","_removeThousandsSeparators","super","parts","split","args","_insertThousandsSeparators","beforeTailPos","nextPos","valid","test","number","isNaN","min","max","validnum","Math","formatted","normalizeZeros","_normalizeZeros","padFractionalZeros","_padFractionalZeros","match","sign","zeros","num","push","padEnd","numstr","signed","PatternDefinition","_masked","isHollow","isRawInput","type","TYPES","INPUT","optional","PatternGroup","masked","name","offset","mapDefIndexToPos","RangeGroup","to","maxlen","_from","_to","_maxLength","maxLength","minstr","maxstr","placeholder","_matchFrom","Range","Enum","definitions","placeholderChar","char","placeholderLazy","lazy","_updateMask","defs","_charDefs","_groupDefs","pattern","unmaskingBlock","optionalBlock","stopAlign","groups","p","gNames","filter","gName","sort","FIXED","unmasking","STOP_CHAR","ESCAPE_CHAR","every","g","forEach","d","isInput","defIndex","isHiddenHollow","hiddenHollowsBefore","di","def","_appendChunks","_appendPlaceholder","mapPosToDefIndex","resolved","skipped","chres","chunks","fromDefIndex","_extractInputChunks","toDefIndex","stopDefIndices","stops","s","stop","maxDefIndex","NONE","dir","initialDefIndex","initialDef","firstInputIndex","firstFilledInputIndex","firstVisibleHollowIndex","nextdi","nextDef","groupsByName","Definition","Group","GET_DEFAULT_GROUPS","Y","getFullYear","date","isComplete","isDateExist","format","parse","getDate","padStart","getMonth","day","month","year","currentMask","compiledMasks","inputValue","rawInputValue","doDispatch","appended","dispatch","cm","inputs","index","i1","i2","ActionDetails","oldValue","oldSelection","substr","insertedCount","substring","RIGHT","_listeners","_unmaskedValue","_saveSelection","_onInput","_onChange","_onDrop","alignCursor","alignCursorFriendly","bindEvents","updateValue","constructor","updateControl","addEventListener","removeEventListener","ev","l","_cursorChanging","_changingCursorPos","selectionStart","selectionEnd","document","activeElement","setSelectionRange","_selection","newUnmaskedValue","newValue","isChanged","_fireChangeEvents","updateOptions","_delayUpdateCursor","_abortUpdateCursor","setTimeout","fireEvent","handler","hIndex","splice","removed","updateCursor","preventDefault","stopPropagation","unbindEvents","window"],"mappings":"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"}