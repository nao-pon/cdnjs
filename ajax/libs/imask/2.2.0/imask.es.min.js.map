{"version":3,"file":"imask.es.min.js","sources":["../src/core/utils.js","../src/masked/factory.js","../src/masked/pattern/group.js","../src/imask.js","../src/core/action-details.js","../src/core/change-details.js","../src/masked/base.js","../src/masked/pattern/definition.js","../src/masked/pattern.js","../src/masked/date.js","../src/controls/input.js","../src/masked/number.js","../src/masked/regexp.js","../src/masked/function.js","../src/masked/dynamic.js"],"sourcesContent":["// @flow\r\n\r\nexport\r\nfunction isString (str: mixed): boolean %checks {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res: ?string | boolean, str: string, fallback: string=''): string {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n\r\nexport\r\nconst DIRECTION = {\r\n  NONE: 0,\r\n  LEFT: -1,\r\n  RIGHT: 1\r\n}\r\nexport\r\ntype Direction = $Values<typeof DIRECTION>;\r\n\r\nexport\r\nfunction indexInDirection (pos: number, direction: Direction): number {\r\n  if (direction === DIRECTION.LEFT) --pos;\r\n  return pos;\r\n}\r\n\r\nexport\r\nfunction escapeRegExp (str: string): string {\r\n  return str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\r\n}\r\n\r\n\r\n// cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\r\nexport\r\nfunction objectIncludes (b: any, a: any): boolean {\r\n  if (a === b) return true;\r\n\r\n  var arrA = Array.isArray(a)\r\n    , arrB = Array.isArray(b)\r\n    , i;\r\n\r\n  if (arrA && arrB) {\r\n    if (a.length != b.length) return false;\r\n    for (i = 0; i < a.length; i++)\r\n      if (!objectIncludes(a[i], b[i])) return false;\r\n    return true;\r\n  }\r\n\r\n  if (arrA != arrB) return false;\r\n\r\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\r\n    var keys = Object.keys(a);\r\n    // if (keys.length !== Object.keys(b).length) return false;\r\n\r\n    var dateA = a instanceof Date\r\n      , dateB = b instanceof Date;\r\n    if (dateA && dateB) return a.getTime() == b.getTime();\r\n    if (dateA != dateB) return false;\r\n\r\n    var regexpA = a instanceof RegExp\r\n      , regexpB = b instanceof RegExp;\r\n    if (regexpA && regexpB) return a.toString() == b.toString();\r\n    if (regexpA != regexpB) return false;\r\n\r\n    for (i = 0; i < keys.length; i++)\r\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\r\n\r\n    for (i = 0; i < keys.length; i++)\r\n      if(!objectIncludes(a[keys[i]], b[keys[i]])) return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/* eslint-disable no-undef */\r\nexport\r\nconst g: any = typeof window !== 'undefined' && window ||\r\n  typeof global !== 'undefined' && global.global === global && global ||\r\n  typeof self !== 'undefined' && self.self === self && self ||\r\n  {};\r\n/* eslint-enable no-undef */\r\n\r\nexport\r\ntype Selection = {\r\n  start: number;\r\n  end: number;\r\n};\r\n","// @flow\r\nimport {g, isString} from '../core/utils.js';\r\nimport type Masked from './base.js';\r\nimport {type Mask} from './base.js';\r\n\r\n\r\nexport\r\nfunction maskedClass (mask: Mask): Class<Masked<*>> {\r\n  if (mask == null) {\r\n    throw new Error('mask property should be defined');\r\n  }\r\n\r\n  if (mask instanceof RegExp) return g.IMask.MaskedRegExp;\r\n  if (isString(mask)) return g.IMask.MaskedPattern;\r\n  if (mask instanceof Date || mask === Date) return g.IMask.MaskedDate;\r\n  if (mask instanceof Number || typeof mask === 'number' || mask === Number) return g.IMask.MaskedNumber;\r\n  if (Array.isArray(mask) || mask === Array) return g.IMask.MaskedDynamic;\r\n  // $FlowFixMe\r\n  if (mask.prototype instanceof g.IMask.Masked) return mask;\r\n  // $FlowFixMe\r\n  if (mask instanceof Function) return g.IMask.MaskedFunction;\r\n\r\n  console.warn('Mask not found for mask', mask);  // eslint-disable-line no-console\r\n  return g.IMask.Masked;\r\n}\r\n\r\n\r\nexport default\r\nfunction createMask (opts: {mask: Mask, ...any}): Masked<*> {\r\n  opts = Object.assign({}, opts);  // clone\r\n  const mask = opts.mask;\r\n\r\n  if (mask instanceof g.IMask.Masked) return mask;\r\n\r\n  const MaskedClass = maskedClass(mask);\r\n  return new MaskedClass(opts);\r\n}\r\n","// @flow\r\nimport type MaskedPattern from '../pattern.js';\r\nimport {type AppendFlags} from '../base.js';\r\n\r\n\r\nexport\r\ninterface PatternGroupTemplate {\r\n  validate: $PropertyType<PatternGroup, 'validate'>;\r\n  mask: $PropertyType<PatternGroup, 'mask'>;\r\n}\r\n\r\ntype PatternGroupOptions = PatternGroupTemplate & {\r\n  name: $PropertyType<PatternGroup, 'name'>,\r\n  offset: $PropertyType<PatternGroup, 'offset'>,\r\n};\r\n\r\nexport default\r\nclass PatternGroup {\r\n  static Range: Class<RangeGroup>;\r\n  static Enum: Class<EnumGroup>;\r\n\r\n  masked: MaskedPattern;\r\n  name: string;\r\n  offset: number;\r\n  mask: string;\r\n  validate: (string, PatternGroup, AppendFlags) => boolean;\r\n\r\n  constructor(masked: MaskedPattern, {name, offset, mask, validate}: PatternGroupOptions) {\r\n    this.masked = masked;\r\n    this.name = name;\r\n    this.offset = offset;\r\n    this.mask = mask;\r\n    this.validate = validate || (() => true);\r\n  }\r\n\r\n  get value (): string {\r\n    return this.masked.value.slice(\r\n      this.masked.mapDefIndexToPos(this.offset),\r\n      this.masked.mapDefIndexToPos(this.offset + this.mask.length));\r\n  }\r\n\r\n  get unmaskedValue (): string {\r\n    return this.masked.extractInput(\r\n      this.masked.mapDefIndexToPos(this.offset),\r\n      this.masked.mapDefIndexToPos(this.offset + this.mask.length));\r\n  }\r\n\r\n  doValidate (flags: AppendFlags) {\r\n    return this.validate(this.value, this, flags);\r\n  }\r\n}\r\n\r\nexport\r\nclass RangeGroup implements PatternGroupTemplate {\r\n  mask: $PropertyType<PatternGroup, 'mask'>;\r\n  validate: $PropertyType<PatternGroup, 'validate'>;\r\n  _maxLength: number;\r\n  _from: number;\r\n  _to: number;\r\n\r\n  constructor ([from, to]: [number, number], maxlen: number=String(to).length) {\r\n    this._from = from;\r\n    this._to = to;\r\n    this._maxLength = maxlen;\r\n    this.validate = this.validate.bind(this);\r\n\r\n    this._update();\r\n  }\r\n\r\n  get to (): number {\r\n    return this._to;\r\n  }\r\n\r\n  set to (to: number) {\r\n    this._to = to;\r\n    this._update();\r\n  }\r\n\r\n  get from (): number {\r\n    return this._from;\r\n  }\r\n\r\n  set from (from: number) {\r\n    this._from = from;\r\n    this._update();\r\n  }\r\n\r\n  get maxLength (): number {\r\n    return this._maxLength;\r\n  }\r\n\r\n  set maxLength (maxLength: number) {\r\n    this._maxLength = maxLength;\r\n    this._update();\r\n  }\r\n\r\n  get _matchFrom (): number {\r\n    return this.maxLength - String(this.from).length;\r\n  }\r\n\r\n  _update() {\r\n    this._maxLength = Math.max(this._maxLength, String(this.to).length);\r\n    this.mask = '0'.repeat(this._maxLength);\r\n  }\r\n\r\n  validate (str: string): boolean {\r\n    let minstr = '';\r\n    let maxstr = '';\r\n\r\n    const [, placeholder, num] = str.match(/^(\\D*)(\\d*)(\\D*)/) || [];\r\n    if (num) {\r\n      minstr = ('0'.repeat(placeholder.length) + num);\r\n      maxstr = ('9'.repeat(placeholder.length) + num);\r\n    }\r\n\r\n    const firstNonZero = str.search(/[^0]/);\r\n    if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\r\n\r\n    minstr = minstr.padEnd(this._maxLength, '0');\r\n    maxstr = maxstr.padEnd(this._maxLength, '9');\r\n\r\n    return this.from <= Number(maxstr) && Number(minstr) <= this.to;\r\n  }\r\n}\r\n\r\nexport\r\nfunction EnumGroup (enums: Array<string>): PatternGroupTemplate {\r\n  return {\r\n    mask: '*'.repeat(enums[0].length),\r\n    validate: (value: string, group: PatternGroup, flags: AppendFlags) => enums.some(e => e.indexOf(group.unmaskedValue) >= 0)\r\n  };\r\n}\r\n\r\nPatternGroup.Range = RangeGroup;\r\nPatternGroup.Enum = EnumGroup;\r\n","import {g} from './core/utils.js';\r\n\r\nimport InputMask from './controls/input.js';\r\n\r\nimport Masked from './masked/base.js';\r\nimport MaskedPattern from './masked/pattern.js';\r\nimport MaskedNumber from './masked/number.js';\r\nimport MaskedDate from './masked/date.js';\r\nimport MaskedRegExp from './masked/regexp.js';\r\nimport MaskedFunction from './masked/function.js';\r\nimport MaskedDynamic from './masked/dynamic.js';\r\nimport createMask from './masked/factory.js';\r\n\r\n\r\nexport default\r\nfunction IMask (el, opts={}) {\r\n\t// currently available only for input-like elements\r\n  return new InputMask(el, opts);\r\n}\r\n\r\n\r\nIMask.InputMask = InputMask;\r\n\r\nIMask.Masked = Masked;\r\nIMask.MaskedPattern = MaskedPattern;\r\nIMask.MaskedNumber = MaskedNumber;\r\nIMask.MaskedDate = MaskedDate;\r\nIMask.MaskedRegExp = MaskedRegExp;\r\nIMask.MaskedFunction = MaskedFunction;\r\nIMask.MaskedDynamic = MaskedDynamic;\r\nIMask.createMask = createMask;\r\n\r\ng.IMask = IMask;\r\n","// @flow\r\nimport {type Direction, type Selection, DIRECTION} from './utils.js';\r\n\r\n\r\nexport default\r\nclass ActionDetails {\r\n  value: string;\r\n  cursorPos: number;\r\n  oldValue: string;\r\n  oldSelection: Selection;\r\n\r\n  constructor (\r\n    value: string,\r\n    cursorPos: number,\r\n    oldValue: string,\r\n    oldSelection: Selection\r\n  ) {\r\n    this.value = value;\r\n    this.cursorPos = cursorPos;\r\n    this.oldValue = oldValue;\r\n    this.oldSelection = oldSelection;\r\n\r\n    // double check if left part was changed (autofilling, other non-standard input triggers)\r\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\r\n      --this.oldSelection.start;\r\n    }\r\n  }\r\n\r\n  get startChangePos (): number {\r\n    return Math.min(this.cursorPos, this.oldSelection.start);\r\n  }\r\n\r\n  get insertedCount (): number {\r\n    return this.cursorPos - this.startChangePos;\r\n  }\r\n\r\n  get inserted (): string {\r\n    return this.value.substr(this.startChangePos, this.insertedCount);\r\n  }\r\n\r\n  get removedCount (): number {\r\n    // Math.max for opposite operation\r\n    return Math.max((this.oldSelection.end - this.startChangePos) ||\r\n      // for Delete\r\n      this.oldValue.length - this.value.length, 0);\r\n  }\r\n\r\n  get removed (): string {\r\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\r\n  }\r\n\r\n  get head (): string {\r\n    return this.value.substring(0, this.startChangePos);\r\n  }\r\n\r\n  get tail (): string {\r\n    return this.value.substring(this.startChangePos + this.insertedCount);\r\n  }\r\n\r\n  get removeDirection (): Direction {\r\n    if (!this.removedCount || this.insertedCount) return DIRECTION.NONE;\r\n\r\n    // align right if delete at right or if range removed (event with backspace)\r\n    return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) ?\r\n      DIRECTION.RIGHT :\r\n      DIRECTION.LEFT;\r\n  }\r\n}\r\n","// @flow\r\n\r\nexport default\r\nclass ChangeDetails {\r\n  inserted: string;\r\n  overflow: boolean;\r\n  removedCount: number;\r\n  shift: number;\r\n  _rawInserted: string;\r\n\r\n  constructor (details?: {\r\n    inserted?: $PropertyType<ChangeDetails, 'inserted'>,\r\n    overflow?: $PropertyType<ChangeDetails, 'overflow'>,\r\n    removedCount?: $PropertyType<ChangeDetails, 'removedCount'>,\r\n    shift?: $PropertyType<ChangeDetails, 'shift'>,\r\n  }) {\r\n    Object.assign(this, {\r\n      inserted: '',\r\n      overflow: false,\r\n      removedCount: 0,\r\n      shift: 0,\r\n    }, details);\r\n  }\r\n\r\n  aggregate (details: ChangeDetails): ChangeDetails {\r\n    this.inserted += details.inserted;\r\n    this.removedCount += details.removedCount;\r\n    this.shift += details.shift;\r\n    this.overflow = this.overflow || details.overflow;\r\n    if (details.rawInserted) this.rawInserted += details.rawInserted;\r\n    return this;\r\n  }\r\n\r\n  get offset (): number {\r\n    return this.shift + this.inserted.length - this.removedCount;\r\n  }\r\n\r\n  get rawInserted (): string {\r\n    return this._rawInserted != null ?\r\n      this._rawInserted :\r\n      this.inserted;\r\n  }\r\n\r\n  set rawInserted (rawInserted: string): void {\r\n    this._rawInserted = rawInserted;\r\n  }\r\n}\r\n","// @flow\r\nimport ChangeDetails from '../core/change-details.js';\r\nimport {type Direction} from '../core/utils.js';\r\n\r\n\r\nexport\r\ntype Mask = string | String | RegExp | Class<Number> | Class<Date> | Array<any> | Function | Masked<*> | Class<Masked<*>>;\r\n\r\nexport\r\ntype AppendFlags = {\r\n  input?: boolean,\r\n  tail?: boolean,\r\n  raw?: boolean\r\n};\r\n\r\nexport\r\ntype ExtractFlags = {\r\n  raw?: boolean\r\n};\r\n\r\nexport\r\ntype MaskedOptions<MaskType> = {\r\n  mask: $PropertyType<Masked<MaskType>, 'mask'>,\r\n  prepare?: $PropertyType<Masked<MaskType>, 'prepare'>,\r\n  validate?: $PropertyType<Masked<MaskType>, 'validate'>,\r\n  commit?: $PropertyType<Masked<MaskType>, 'commit'>,\r\n};\r\n\r\nexport default\r\nclass Masked<MaskType> {\r\n  static DEFAULTS: any; // $Shape<MaskedOptions>; TODO after fix https://github.com/facebook/flow/issues/4773\r\n\r\n  mask: MaskType;\r\n  prepare: (string, Masked<MaskType>, AppendFlags) => string;\r\n  validate: (string, Masked<MaskType>, AppendFlags) => boolean;\r\n  commit: (string, AppendFlags) => void;\r\n  isInitialized: boolean;\r\n  _value: string;\r\n  _refreshing: boolean;\r\n\r\n  constructor (opts: {[string]: any}) {\r\n    this._value = '';\r\n    this._update({\r\n      ...Masked.DEFAULTS,\r\n      ...opts\r\n    });\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  updateOptions (opts: {[string]: any}) {\r\n    this.withValueRefresh(this._update.bind(this, opts));\r\n  }\r\n\r\n  _update (opts: {[string]: any}) {\r\n    Object.assign(this, opts);\r\n  }\r\n\r\n  clone (): Masked<MaskType> {\r\n    const m = new Masked(this);\r\n    m._value = this.value.slice();\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    this._value = '';\r\n  }\r\n\r\n  get value (): string {\r\n    return this._value;\r\n  }\r\n\r\n  set value (value: string) {\r\n    this.resolve(value);\r\n  }\r\n\r\n  resolve (value: string): string {\r\n    this.reset();\r\n    this._append(value, {input: true});\r\n    this._appendTail();\r\n    this.doCommit();\r\n    return this.value;\r\n  }\r\n\r\n  get unmaskedValue (): string {\r\n    return this._unmask();\r\n  }\r\n\r\n  set unmaskedValue (value: string) {\r\n    this.reset();\r\n    this._append(value);\r\n    this._appendTail();\r\n    this.doCommit();\r\n  }\r\n\r\n  get rawInputValue (): string {\r\n    return this.extractInput(0, this.value.length, {raw: true});\r\n  }\r\n\r\n  set rawInputValue (value: string) {\r\n    this.reset();\r\n    this._append(value, {raw: true});\r\n    this._appendTail();\r\n    this.doCommit();\r\n  }\r\n\r\n  get isComplete (): boolean {\r\n    return true;\r\n  }\r\n\r\n  nearestInputPos (cursorPos: number, direction?: Direction): number {\r\n    return cursorPos;\r\n  }\r\n\r\n  extractInput (fromPos: number=0, toPos: number=this.value.length, flags?: ExtractFlags): string {\r\n    return this.value.slice(fromPos, toPos);\r\n  }\r\n\r\n  _extractTail (fromPos: number=0, toPos: number=this.value.length): any {\r\n    return this.extractInput(fromPos, toPos);\r\n  }\r\n\r\n  _appendTail (tail: any=\"\"): ChangeDetails {\r\n    return this._append(tail, {tail: true});\r\n  }\r\n\r\n  _append (str: string, flags: AppendFlags={}): ChangeDetails {\r\n    const oldValueLength = this.value.length;\r\n    let consistentValue: Masked<MaskType> = this.clone();\r\n    let overflow = false;\r\n\r\n    str = this.doPrepare(str, flags);\r\n\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      this._value += str[ci];\r\n      if (this.doValidate(flags) === false) {\r\n        // $FlowFixMe\r\n        Object.assign(this, consistentValue);\r\n        if (!flags.input) {\r\n          // in `input` mode dont skip invalid chars\r\n          overflow = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      consistentValue = this.clone();\r\n    }\r\n\r\n    return new ChangeDetails({\r\n      inserted: this.value.slice(oldValueLength),\r\n      overflow\r\n    });\r\n  }\r\n\r\n  appendWithTail (str: string, tail: string): ChangeDetails {\r\n    // TODO refactor\r\n    const aggregateDetails = new ChangeDetails();\r\n    let consistentValue = this.clone();\r\n    let consistentAppended: Masked<MaskType>;\r\n\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      const ch = str[ci];\r\n\r\n      const appendDetails = this._append(ch, {input: true});\r\n      consistentAppended = this.clone();\r\n      const tailAppended = !appendDetails.overflow && !this._appendTail(tail).overflow;\r\n      if (!tailAppended || this.doValidate({tail: true}) === false) {\r\n        // $FlowFixMe\r\n        Object.assign(this, consistentValue);\r\n        break;\r\n      }\r\n\r\n      // $FlowFixMe\r\n      Object.assign(this, consistentAppended);\r\n      consistentValue = this.clone();\r\n      aggregateDetails.aggregate(appendDetails);\r\n    }\r\n\r\n    // TODO needed for cases when\r\n    // 1) REMOVE ONLY AND NO LOOP AT ALL\r\n    // 2) last loop iteration removes tail\r\n    // 3) when breaks on tail insert\r\n\r\n    // aggregate only shift from tail\r\n    aggregateDetails.shift += this._appendTail(tail).shift;\r\n\r\n    return aggregateDetails;\r\n  }\r\n\r\n  _unmask (): string {\r\n    return this.value;\r\n  }\r\n\r\n  remove (from: number=0, count: number=this.value.length-from) {\r\n    this._value = this.value.slice(0, from) + this.value.slice(from + count);\r\n  }\r\n\r\n  withValueRefresh<T>(fn: () => T): T {\r\n    if (this._refreshing || !this.isInitialized) return fn();\r\n    this._refreshing = true;\r\n\r\n    const unmasked = this.unmaskedValue;\r\n\r\n    const ret = fn();\r\n\r\n    this.unmaskedValue = unmasked;\r\n\r\n    delete this._refreshing;\r\n    return ret;\r\n  }\r\n\r\n  doPrepare (str: string, flags: AppendFlags={}): string {\r\n    return this.prepare(str, this, flags);\r\n  }\r\n\r\n  doValidate (flags: AppendFlags): boolean {\r\n    return this.validate(this.value, this, flags);\r\n  }\r\n\r\n  doCommit () {\r\n    this.commit(this.value, this);\r\n  }\r\n\r\n  // TODO\r\n  // insert (str, fromPos, flags)\r\n\r\n  splice (start: number, deleteCount: number, inserted: string, removeDirection: Direction): ChangeDetails {\r\n    const tailPos = start + deleteCount;\r\n    const tail = this._extractTail(tailPos);\r\n\r\n    const startChangePos = this.nearestInputPos(start, removeDirection);\r\n    this.remove(startChangePos);\r\n    const changeDetails = this.appendWithTail(inserted, tail);\r\n\r\n    // adjust shift if start was aligned\r\n    changeDetails.shift += startChangePos - start;\r\n    return changeDetails;\r\n  }\r\n}\r\n\r\nMasked.DEFAULTS = {\r\n  prepare: val => val,\r\n  validate: () => true,\r\n  commit: () => {},\r\n};\r\n","// @flow\r\nimport createMask from '../factory.js';\r\nimport type Masked from '../base.js';\r\nimport {type Mask} from '../base.js';\r\n\r\n\r\ntype Definitions = {[string]: Mask};\r\ntype DefinitionType = $Values<typeof PatternDefinition.TYPES>;\r\ntype DefinitionTypes = {[string]: DefinitionType};\r\n\r\nexport default\r\nclass PatternDefinition {\r\n  static TYPES: DefinitionTypes;\r\n  static DEFAULTS: Definitions;\r\n\r\n  char: ?string;\r\n  stopAlign: ?boolean;\r\n  optional: boolean;\r\n  isHollow: boolean;\r\n  isRawInput: boolean;\r\n  type: DefinitionType;\r\n  _masked: Masked<*>;\r\n\r\n  constructor(opts: any) {  // TODO flow\r\n    Object.assign(this, opts);\r\n\r\n    if (this.mask) {\r\n      this._masked = createMask(opts);\r\n    }\r\n  }\r\n\r\n  reset () {\r\n    this.isHollow = false;\r\n    this.isRawInput = false;\r\n    if (this._masked) this._masked.reset();\r\n  }\r\n\r\n  get isInput (): boolean {\r\n    return this.type === PatternDefinition.TYPES.INPUT;\r\n  }\r\n\r\n  get isHiddenHollow (): boolean {\r\n    return this.isHollow && this.optional;\r\n  }\r\n\r\n  resolve (ch: string): boolean | string {\r\n    if (!this._masked) return false;\r\n    return this._masked.resolve(ch);\r\n  }\r\n}\r\nPatternDefinition.DEFAULTS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternDefinition.TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n};\r\n","// @flow\r\nimport {conform, DIRECTION, indexInDirection, type Direction} from '../core/utils.js';\r\nimport ChangeDetails from '../core/change-details.js';\r\nimport Masked, {type AppendFlags, type ExtractFlags, type MaskedOptions} from './base.js';\r\nimport PatternDefinition from './pattern/definition.js';\r\nimport PatternGroup, {type PatternGroupTemplate} from './pattern/group.js';\r\n\r\n\r\ntype MaskedPatternOptions = {\r\n  ...MaskedOptions<string>,\r\n  definitions: $PropertyType<MaskedPattern, 'definitions'>,\r\n  groups: $PropertyType<MaskedPattern, 'groups'>,\r\n  placeholderChar: $PropertyType<MaskedPattern, 'placeholderChar'>,\r\n  lazy: $PropertyType<MaskedPattern, 'lazy'>,\r\n  // TODO deprecated, remove in 3.0\r\n  placeholder: $PropertyType<MaskedPattern, 'placeholder'>,\r\n  placeholderLazy: $PropertyType<MaskedPattern, 'placeholderLazy'>,\r\n};\r\ntype InputChunk = [?number, string];\r\n\r\nexport default\r\nclass MaskedPattern extends Masked<string> {\r\n  static DEFAULTS: any;\r\n  static STOP_CHAR: string;\r\n  static ESCAPE_CHAR: string;\r\n  static Definition: Class<PatternDefinition>;\r\n  static Group: Class<PatternGroup>;\r\n\r\n  groups: {[string]: PatternGroupTemplate};\r\n  definitions: {[string]: any};  // TODO mask type\r\n  placeholderChar: string;\r\n  lazy: boolean;\r\n  // TODO deprecated, remove in 3.0\r\n  placeholderLazy: boolean;\r\n  placeholder: {\r\n    char: string,\r\n    lazy: boolean,\r\n  };\r\n  _charDefs: Array<PatternDefinition>;\r\n  _groupDefs: Array<PatternGroup>;\r\n\r\n  constructor (opts: any={}) {  // TODO type $Shape<MaskedPatternOptions>={} does not work\r\n    opts.definitions = Object.assign({}, PatternDefinition.DEFAULTS, opts.definitions);\r\n    super({\r\n      ...MaskedPattern.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  _update (opts: $Shape<MaskedPatternOptions>={}) {\r\n    opts.definitions = Object.assign({}, this.definitions, opts.definitions);\r\n    if (opts.placeholder != null) {\r\n      console.warn(\"'placeholder' option is deprecated and will be removed in next major release, use 'placeholderChar' and 'lazy' instead.\");\r\n      if ('char' in opts.placeholder) opts.placeholderChar = opts.placeholder.char;\r\n      if ('lazy' in opts.placeholder) opts.lazy = opts.placeholder.lazy;\r\n      delete opts.placeholder;\r\n    }\r\n    if (opts.placeholderLazy != null) {\r\n      console.warn(\"'placeholderLazy' option is deprecated and will be removed in next major release, use 'lazy' instead.\");\r\n      opts.lazy = opts.placeholderLazy;\r\n      delete opts.placeholderLazy;\r\n    }\r\n    super._update(opts);\r\n    this._updateMask();\r\n  }\r\n\r\n  _updateMask () {\r\n    const defs = this.definitions;\r\n    this._charDefs = [];\r\n    this._groupDefs = [];\r\n\r\n    let pattern = this.mask;\r\n    if (!pattern || !defs) return;\r\n\r\n    let unmaskingBlock = false;\r\n    let optionalBlock = false;\r\n    let stopAlign = false;\r\n\r\n    for (let i=0; i<pattern.length; ++i) {\r\n      if (this.groups) {\r\n        const p = pattern.slice(i);\r\n        const gNames = Object.keys(this.groups).filter(gName => p.indexOf(gName) === 0);\r\n        // order by key length\r\n        gNames.sort((a, b) => b.length - a.length);\r\n        // use group name with max length\r\n        const gName = gNames[0];\r\n        if (gName) {\r\n          const group = this.groups[gName];\r\n          this._groupDefs.push(new PatternGroup(this, {\r\n            name: gName,\r\n            offset: this._charDefs.length,\r\n            mask: group.mask,\r\n            validate: group.validate,\r\n          }));\r\n          pattern = pattern.replace(gName, group.mask);\r\n        }\r\n      }\r\n\r\n      let char = pattern[i];\r\n      let type = !unmaskingBlock && char in defs ?\r\n        PatternDefinition.TYPES.INPUT :\r\n        PatternDefinition.TYPES.FIXED;\r\n      const unmasking = type === PatternDefinition.TYPES.INPUT || unmaskingBlock;\r\n      const optional = type === PatternDefinition.TYPES.INPUT && optionalBlock;\r\n\r\n      if (char === MaskedPattern.STOP_CHAR) {\r\n        stopAlign = true;\r\n        continue;\r\n      }\r\n\r\n      if (char === '{' || char === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === '[' || char === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === MaskedPattern.ESCAPE_CHAR) {\r\n        ++i;\r\n        char = pattern[i];\r\n        if (!char) break;\r\n        type = PatternDefinition.TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push(new PatternDefinition({\r\n        char,\r\n        type,\r\n        optional,\r\n        stopAlign,\r\n        unmasking,\r\n        mask: type === PatternDefinition.TYPES.INPUT ?\r\n          defs[char] :\r\n          (value => value === char)\r\n      }));\r\n\r\n      stopAlign = false;\r\n    }\r\n  }\r\n\r\n  doValidate (...args: *) {\r\n    return this._groupDefs.every(g => g.doValidate(...args)) && super.doValidate(...args);\r\n  }\r\n\r\n  clone () {\r\n    const m = new MaskedPattern(this);\r\n    m._value = this.value;\r\n    // $FlowFixMe\r\n    m._charDefs.forEach((d, i) => Object.assign(d, this._charDefs[i]));\r\n    // $FlowFixMe\r\n    m._groupDefs.forEach((d, i) => Object.assign(d, this._groupDefs[i]));\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    super.reset();\r\n    this._charDefs.forEach(d => {delete d.isHollow;});\r\n  }\r\n\r\n  get isComplete (): boolean {\r\n    return !this._charDefs.some((d, i) =>\r\n      d.isInput && !d.optional && (d.isHollow || !this.extractInput(i, i+1)));\r\n  }\r\n\r\n  hiddenHollowsBefore (defIndex: number): number {\r\n    return this._charDefs\r\n      .slice(0, defIndex)\r\n      .filter(d => d.isHiddenHollow)\r\n      .length;\r\n  }\r\n\r\n  mapDefIndexToPos (defIndex: number): number {\r\n    return defIndex - this.hiddenHollowsBefore(defIndex);\r\n  }\r\n\r\n  mapPosToDefIndex (pos: number): number {\r\n    let defIndex = pos;\r\n    for (let di=0; di<this._charDefs.length; ++di) {\r\n      const def = this._charDefs[di];\r\n      if (di >= defIndex) break;\r\n      if (def.isHiddenHollow) ++defIndex;\r\n    }\r\n    return defIndex;\r\n  }\r\n\r\n  _unmask (): string {\r\n    const str = this.value;\r\n    let unmasked = '';\r\n\r\n    for (let ci=0, di=0; ci<str.length && di<this._charDefs.length; ++di) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      if (def.isHiddenHollow) continue;\r\n      if (def.unmasking && !def.isHollow) unmasked += ch;\r\n      ++ci;\r\n    }\r\n\r\n    return unmasked;\r\n  }\r\n\r\n  _appendTail (tail: Array<InputChunk>=[]): ChangeDetails {\r\n    return this._appendChunks(tail, {tail: true}).aggregate(this._appendPlaceholder());\r\n  }\r\n\r\n  _append (str: string, flags: AppendFlags={}): ChangeDetails {\r\n    const oldValueLength = this.value.length;\r\n    let rawInserted = '';\r\n    let overflow = false;\r\n\r\n    str = this.doPrepare(str, flags);\r\n\r\n    for (let ci=0, di=this.mapPosToDefIndex(this.value.length); ci < str.length;) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      // check overflow\r\n      if (def == null) {\r\n        overflow = true;\r\n        break;\r\n      }\r\n\r\n      // reset\r\n      def.isHollow = false;\r\n\r\n      let resolved, skipped;\r\n      let chres = conform(def.resolve(ch), ch);\r\n\r\n      if (def.type === PatternDefinition.TYPES.INPUT) {\r\n        if (chres) {\r\n          this._value += chres;\r\n          if (!this.doValidate()) {\r\n            chres = '';\r\n            this._value = this.value.slice(0, -1);\r\n          }\r\n        }\r\n\r\n        resolved = !!chres;\r\n        skipped = !chres && !def.optional;\r\n\r\n        if (!chres) {\r\n          if (!def.optional && !flags.input) {\r\n            this._value += this.placeholderChar;\r\n            skipped = false;\r\n          }\r\n          if (!skipped) def.isHollow = true;\r\n        } else {\r\n          rawInserted += chres;\r\n        }\r\n      } else {\r\n        this._value += def.char;\r\n        resolved = chres && (def.unmasking || flags.input || flags.raw) && !flags.tail;\r\n        def.isRawInput = resolved && (flags.raw || flags.input);\r\n        if (def.isRawInput) rawInserted += def.char;\r\n      }\r\n\r\n      if (!skipped) ++di;\r\n      if (resolved || skipped) ++ci;\r\n    }\r\n\r\n    return new ChangeDetails({\r\n      inserted: this.value.slice(oldValueLength),\r\n      rawInserted,\r\n      overflow\r\n    });\r\n  }\r\n\r\n  _appendChunks (chunks: Array<InputChunk>, ...args: *) {\r\n    const details = new ChangeDetails();\r\n    for (let ci=0; ci < chunks.length; ++ci) {\r\n      const [fromDefIndex, input] = chunks[ci];\r\n      if (fromDefIndex != null) details.aggregate(this._appendPlaceholder(fromDefIndex));\r\n      if (details.aggregate(this._append(input, ...args)).overflow) break;\r\n    }\r\n    return details;\r\n  }\r\n\r\n  _extractTail (fromPos: number=0, toPos: number=this.value.length): Array<InputChunk> {\r\n    return this._extractInputChunks(fromPos, toPos);\r\n  }\r\n\r\n  extractInput (fromPos: number=0, toPos: number=this.value.length, flags: ExtractFlags={}): string {\r\n    if (fromPos === toPos) return '';\r\n\r\n    const str = this.value;\r\n    let input = '';\r\n\r\n    const toDefIndex = this.mapPosToDefIndex(toPos);\r\n    for (\r\n      let ci=fromPos, di=this.mapPosToDefIndex(fromPos);\r\n      ci<toPos && ci<str.length && di < toDefIndex;\r\n      ++di\r\n    ) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      if (!def) break;\r\n      if (def.isHiddenHollow) continue;\r\n\r\n      if (def.isInput && !def.isHollow ||\r\n        flags.raw && !def.isInput && def.isRawInput) input += ch;\r\n      ++ci;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  _extractInputChunks (fromPos: number=0, toPos: number=this.value.length): Array<InputChunk> {\r\n    if (fromPos === toPos) return [];\r\n\r\n    const fromDefIndex = this.mapPosToDefIndex(fromPos);\r\n    const toDefIndex = this.mapPosToDefIndex(toPos);\r\n    const stopDefIndices = this._charDefs\r\n      .map((d, i) => [d, i])\r\n      .slice(fromDefIndex, toDefIndex)\r\n      .filter(([d]) => d.stopAlign)\r\n      .map(([, i]) => i);\r\n\r\n    const stops = [\r\n      fromDefIndex,\r\n      ...stopDefIndices,\r\n      toDefIndex\r\n    ];\r\n\r\n    return stops.map((s, i) => [\r\n      stopDefIndices.indexOf(s) >= 0 ?\r\n        s :\r\n        null,\r\n\r\n      this.extractInput(\r\n        this.mapDefIndexToPos(s),\r\n        this.mapDefIndexToPos(stops[++i]))\r\n    ]).filter(([stop, input]) => stop != null || input);\r\n  }\r\n\r\n  _appendPlaceholder (toDefIndex: ?number): ChangeDetails {\r\n    const oldValueLength = this.value.length;\r\n    const maxDefIndex = toDefIndex || this._charDefs.length;\r\n    for (let di=this.mapPosToDefIndex(this.value.length); di < maxDefIndex; ++di) {\r\n      const def = this._charDefs[di];\r\n      if (def.isInput) def.isHollow = true;\r\n\r\n      if (!this.lazy || toDefIndex) {\r\n        this._value += !def.isInput && def.char != null ?\r\n          def.char :\r\n          !def.optional ?\r\n            this.placeholderChar :\r\n            '';\r\n      }\r\n    }\r\n    return new ChangeDetails({\r\n      inserted: this.value.slice(oldValueLength)\r\n    });\r\n  }\r\n\r\n  remove (from: number=0, count: number=this.value.length-from) {\r\n    const to = from + count;\r\n    this._value = this.value.slice(0, from) + this.value.slice(to);\r\n    const fromDefIndex = this.mapPosToDefIndex(from);\r\n    const toDefIndex = this.mapPosToDefIndex(to);\r\n    this._charDefs\r\n      .slice(fromDefIndex, toDefIndex)\r\n      .forEach(d => d.reset());\r\n  }\r\n\r\n  nearestInputPos (cursorPos: number, direction: Direction=DIRECTION.NONE) {\r\n    let step = direction || DIRECTION.LEFT;\r\n\r\n    const initialDefIndex = this.mapPosToDefIndex(cursorPos);\r\n    const initialDef = this._charDefs[initialDefIndex];\r\n    let di = initialDefIndex;\r\n\r\n    let firstInputIndex,\r\n        firstFilledInputIndex,\r\n        firstVisibleHollowIndex,\r\n        nextdi;\r\n\r\n    // check if chars at right is acceptable for LEFT and NONE directions\r\n    if (direction !== DIRECTION.RIGHT && \r\n      (initialDef && initialDef.isInput ||\r\n        // in none direction latest position is acceptable also\r\n        direction === DIRECTION.NONE && cursorPos === this.value.length)) {\r\n      firstInputIndex = initialDefIndex;\r\n      if (initialDef && !initialDef.isHollow) firstFilledInputIndex = initialDefIndex;\r\n    }\r\n\r\n    if ((firstFilledInputIndex == null && direction == DIRECTION.LEFT) || firstInputIndex == null) {\r\n      // search forward\r\n      for (\r\n        nextdi = indexInDirection(di, step);\r\n        0 <= nextdi && nextdi < this._charDefs.length;\r\n        di += step, nextdi += step\r\n      ) {\r\n        const nextDef = this._charDefs[nextdi];\r\n        if (firstInputIndex == null && nextDef.isInput) firstInputIndex = di;\r\n        if (firstVisibleHollowIndex == null && nextDef.isHollow && !nextDef.isHiddenHollow) firstVisibleHollowIndex = di;\r\n        if (nextDef.isInput && !nextDef.isHollow) {\r\n          firstFilledInputIndex = di;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // if has aligned left inside fixed and has came to the start - use start position\r\n    if (direction === DIRECTION.LEFT && di === 0 &&\r\n      (!initialDef || !initialDef.isInput)) firstInputIndex = 0;\r\n\r\n    if (direction !== DIRECTION.RIGHT || firstInputIndex == null) {\r\n      // search backward\r\n      step = -step;\r\n      let overflow = false;\r\n\r\n      // find hollows only before initial pos\r\n      for (\r\n        nextdi = indexInDirection(di, step);\r\n        0 <= nextdi && nextdi < this._charDefs.length;\r\n        di += step, nextdi += step\r\n      ) {\r\n        const nextDef = this._charDefs[nextdi];\r\n        if (nextDef.isInput) {\r\n          firstInputIndex = di;\r\n          if (nextDef.isHollow && !nextDef.isHiddenHollow) break;\r\n        }\r\n\r\n        // if hollow not found before start position - set `overflow`\r\n        // and try to find just any input\r\n        if (di === initialDefIndex) overflow = true;\r\n\r\n        // first input found\r\n        if (overflow && firstInputIndex != null) break;\r\n      }\r\n\r\n      // process overflow\r\n      overflow = overflow || nextdi >= this._charDefs.length;\r\n      if (overflow && firstInputIndex != null) di = firstInputIndex;\r\n    } else if (firstFilledInputIndex == null) {\r\n      // adjust index if delete at right and filled input not found at right\r\n      di = firstVisibleHollowIndex != null ?\r\n        firstVisibleHollowIndex :\r\n        firstInputIndex;\r\n    }\r\n\r\n    return this.mapDefIndexToPos(di);\r\n  }\r\n\r\n  group (name: string): ?PatternGroup {\r\n    return this.groupsByName(name)[0];\r\n  }\r\n\r\n  groupsByName (name: string): Array<PatternGroup> {\r\n    return this._groupDefs.filter(g => g.name === name);\r\n  }\r\n}\r\nMaskedPattern.DEFAULTS = {\r\n  lazy: true,\r\n  placeholderChar: '_'\r\n};\r\nMaskedPattern.STOP_CHAR = '`';\r\nMaskedPattern.ESCAPE_CHAR = '\\\\';\r\nMaskedPattern.Definition = PatternDefinition;\r\nMaskedPattern.Group = PatternGroup;\r\n","// @flow\r\nimport MaskedPattern from './pattern.js';\r\nimport PatternGroup from './pattern/group.js';\r\n\r\n\r\nexport default\r\nclass MaskedDate extends MaskedPattern {\r\n  static GET_DEFAULT_GROUPS: () => {[string]: PatternGroup};\r\n  static DEFAULTS: any;\r\n\r\n  parse: (string) => Date;\r\n  format: (Date) => string;\r\n  pattern: string;\r\n  min: ?Date;\r\n  max: ?Date;\r\n\r\n  constructor (opts: any) {\r\n    super({\r\n      ...MaskedDate.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  _update (opts: any) { // TODO pattern mask is string, but date mask is Date\r\n    if (opts.mask === Date) delete opts.mask;\r\n    if (opts.pattern) {\r\n      opts.mask = opts.pattern;\r\n      delete opts.pattern;\r\n    }\r\n\r\n    const groups = opts.groups;\r\n    opts.groups = Object.assign({}, MaskedDate.GET_DEFAULT_GROUPS());\r\n    // adjust year group\r\n    if (opts.min) opts.groups.Y.from = opts.min.getFullYear();\r\n    if (opts.max) opts.groups.Y.to = opts.max.getFullYear();\r\n    Object.assign(opts.groups, groups);\r\n\r\n    super._update(opts);\r\n  }\r\n\r\n  doValidate (...args: *) {\r\n    const valid = super.doValidate(...args);\r\n    const date = this.date;\r\n\r\n    return valid &&\r\n      (!this.isComplete ||\r\n        this.isDateExist(this.value) && date &&\r\n        (this.min == null || this.min <= date) &&\r\n        (this.max == null || date <= this.max));\r\n  }\r\n\r\n  isDateExist (str: string): boolean {\r\n    return this.format(this.parse(str)) === str;\r\n  }\r\n\r\n  get date (): ?Date {\r\n    return this.isComplete ?\r\n      this.parse(this.value) :\r\n      null;\r\n  }\r\n\r\n  set date (date: Date) {\r\n    this.value = this.format(date);\r\n  }\r\n}\r\nMaskedDate.DEFAULTS = {\r\n  pattern: 'd{.}`m{.}`Y',\r\n  format: date => {\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const year = date.getFullYear();\r\n\r\n    return [day, month, year].join('.');\r\n  },\r\n  parse: str => {\r\n    const [day, month, year] = str.split('.');\r\n    return new Date(year, month - 1, day);\r\n  },\r\n};\r\nMaskedDate.GET_DEFAULT_GROUPS = () => {\r\n  return {\r\n    d: new PatternGroup.Range([1, 31]),\r\n    m: new PatternGroup.Range([1, 12]),\r\n    Y: new PatternGroup.Range([1900, 9999]),\r\n  };\r\n}","// @flow\r\nimport {objectIncludes, DIRECTION, type Selection} from '../core/utils.js';\r\nimport ActionDetails from '../core/action-details.js';\r\nimport MaskedDate from '../masked/date.js';\r\nimport createMask, {maskedClass} from '../masked/factory.js';\r\nimport type Masked from '../masked/base.js';\r\nimport {type Mask} from '../masked/base.js';\r\n\r\n\r\ninterface UIElement {\r\n  value: string;\r\n  selectionStart: number;\r\n  selectionEnd: number;\r\n  setSelectionRange (number, number): void;\r\n  addEventListener(string, Function): void;\r\n  removeEventListener(string, Function): void;\r\n}\r\n\r\nexport default\r\nclass InputMask {\r\n  el: UIElement;\r\n  masked: Masked<*>;\r\n  alignCursor: () => void;\r\n  alignCursorFriendly: () => void;\r\n\r\n  _listeners: {[string]: Array<Function>};\r\n  _value: string;\r\n  _changingCursorPos: number;\r\n  _unmaskedValue: string;\r\n  _saveSelection: (?Event) => void;\r\n  _selection: Selection;\r\n  _onInput: (Event) => void;\r\n  _onChange: () => void;\r\n  _onDrop: (Event) => void;\r\n  _cursorChanging: number;\r\n\r\n  constructor (el: UIElement, opts: any) {\r\n    this.el = el;\r\n    this.masked = createMask(opts);\r\n\r\n    this._listeners = {};\r\n    this._value = '';\r\n    this._unmaskedValue = '';\r\n\r\n    this._saveSelection = this._saveSelection.bind(this);\r\n    this._onInput = this._onInput.bind(this);\r\n    this._onChange = this._onChange.bind(this);\r\n    this._onDrop = this._onDrop.bind(this);\r\n    this.alignCursor = this.alignCursor.bind(this);\r\n    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\r\n\r\n    this.bindEvents();\r\n\r\n    // refresh\r\n    this.updateValue();\r\n    this._onChange();\r\n  }\r\n\r\n  get mask (): Mask {\r\n    return this.masked.mask;\r\n  }\r\n  set mask (mask: Mask) {\r\n    if (mask == null || mask === this.masked.mask) return;\r\n\r\n    if (this.masked.constructor === maskedClass(mask)) {\r\n      this.masked.mask = mask;\r\n      return;\r\n    }\r\n\r\n    const masked = createMask({mask});\r\n    masked.unmaskedValue = this.masked.unmaskedValue;\r\n    this.masked = masked;\r\n  }\r\n\r\n  get value (): string {\r\n    return this._value;\r\n  }\r\n\r\n  set value (str: string) {\r\n    this.masked.value = str;\r\n    this.updateControl();\r\n    this.alignCursor();\r\n  }\r\n\r\n  get unmaskedValue (): string {\r\n    return this._unmaskedValue;\r\n  }\r\n\r\n  set unmaskedValue (str: string) {\r\n    this.masked.unmaskedValue = str;\r\n    this.updateControl();\r\n    this.alignCursor();\r\n  }\r\n\r\n  bindEvents () {\r\n    this.el.addEventListener('keydown', this._saveSelection);\r\n    this.el.addEventListener('input', this._onInput);\r\n    this.el.addEventListener('drop', this._onDrop);\r\n    this.el.addEventListener('click', this.alignCursorFriendly);\r\n    this.el.addEventListener('change', this._onChange);\r\n  }\r\n\r\n  unbindEvents () {\r\n    this.el.removeEventListener('keydown', this._saveSelection);\r\n    this.el.removeEventListener('input', this._onInput);\r\n    this.el.removeEventListener('drop', this._onDrop);\r\n    this.el.removeEventListener('click', this.alignCursorFriendly);\r\n    this.el.removeEventListener('change', this._onChange);\r\n  }\r\n\r\n  fireEvent (ev: string) {\r\n    const listeners = this._listeners[ev] || [];\r\n    listeners.forEach(l => l());\r\n  }\r\n\r\n  get selectionStart (): number {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionStart;\r\n  }\r\n\r\n  get cursorPos (): number {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionEnd;\r\n  }\r\n\r\n  set cursorPos (pos: number) {\r\n    if (this.el !== document.activeElement) return;\r\n\r\n    this.el.setSelectionRange(pos, pos);\r\n    this._saveSelection();\r\n  }\r\n\r\n  _saveSelection (/* ev */) {\r\n    if (this.value !== this.el.value) {\r\n      console.warn('Uncontrolled input change, refresh mask manually!'); // eslint-disable-line no-console\r\n    }\r\n    this._selection = {\r\n      start: this.selectionStart,\r\n      end: this.cursorPos\r\n    };\r\n  }\r\n\r\n  updateValue () {\r\n    this.masked.value = this.el.value;\r\n  }\r\n\r\n  updateControl () {\r\n    const newUnmaskedValue = this.masked.unmaskedValue;\r\n    const newValue = this.masked.value;\r\n    const isChanged = (this.unmaskedValue !== newUnmaskedValue ||\r\n      this.value !== newValue);\r\n\r\n    this._unmaskedValue = newUnmaskedValue;\r\n    this._value = newValue;\r\n\r\n    if (this.el.value !== newValue) this.el.value = newValue;\r\n    if (isChanged) this._fireChangeEvents();\r\n  }\r\n\r\n  updateOptions (opts: any) {\r\n    opts = Object.assign({}, opts);  // clone\r\n    if (opts.mask === Date && this.masked instanceof MaskedDate) delete opts.mask;\r\n\r\n    // check if changed\r\n    if (objectIncludes(this.masked, opts)) return;\r\n\r\n    this.masked.updateOptions(opts);\r\n    this.updateControl();\r\n  }\r\n\r\n  updateCursor (cursorPos: number) {\r\n    if (cursorPos == null) return;\r\n    this.cursorPos = cursorPos;\r\n\r\n    // also queue change cursor for mobile browsers\r\n    this._delayUpdateCursor(cursorPos);\r\n  }\r\n\r\n  _delayUpdateCursor (cursorPos: number) {\r\n    this._abortUpdateCursor();\r\n    this._changingCursorPos = cursorPos;\r\n    this._cursorChanging = setTimeout(() => {\r\n      if (!this.el) return; // if was destroyed\r\n      this.cursorPos = this._changingCursorPos;\r\n      this._abortUpdateCursor();\r\n    }, 10);\r\n  }\r\n\r\n  _fireChangeEvents () {\r\n    this.fireEvent('accept');\r\n    if (this.masked.isComplete) this.fireEvent('complete');\r\n  }\r\n\r\n  _abortUpdateCursor () {\r\n    if (this._cursorChanging) {\r\n      clearTimeout(this._cursorChanging);\r\n      delete this._cursorChanging;\r\n    }\r\n  }\r\n\r\n  alignCursor () {\r\n    this.cursorPos = this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT);\r\n  }\r\n\r\n  alignCursorFriendly () {\r\n    if (this.selectionStart !== this.cursorPos) return;\r\n    this.alignCursor();\r\n  }\r\n\r\n  on (ev: string, handler: Function) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n    return this;\r\n  }\r\n\r\n  off (ev: string, handler: Function) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    const hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\r\n    return this;\r\n  }\r\n\r\n  _onInput () {\r\n    this._abortUpdateCursor();\r\n\r\n    const details = new ActionDetails(\r\n      // new state\r\n      this.el.value, this.cursorPos,\r\n      // old state\r\n      this.value, this._selection);\r\n\r\n    const offset = this.masked.splice(\r\n      details.startChangePos,\r\n      details.removed.length,\r\n      details.inserted,\r\n      details.removeDirection).offset;\r\n\r\n\r\n    const cursorPos = this.masked.nearestInputPos(details.startChangePos + offset);\r\n\r\n    this.updateControl();\r\n    this.updateCursor(cursorPos);\r\n  }\r\n\r\n  _onChange () {\r\n    if (this.value !== this.el.value) {\r\n      this.updateValue();\r\n    }\r\n    this.masked.doCommit();\r\n    this.updateControl();\r\n  }\r\n\r\n  _onDrop (ev: Event) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  destroy () {\r\n    this.unbindEvents();\r\n    // $FlowFixMe why not do so?\r\n    this._listeners.length = 0;\r\n    delete this.el;\r\n  }\r\n}\r\n","// @flow\r\nimport {escapeRegExp, indexInDirection, type Direction} from '../core/utils.js';\r\nimport Masked, {type MaskedOptions, type AppendFlags} from './base.js';\r\n\r\n\r\ntype MaskedNumberOptions = {\r\n  ...MaskedOptions<Number>,\r\n  radix: $PropertyType<MaskedNumber, 'radix'>,\r\n  thousandsSeparator: $PropertyType<MaskedNumber, 'thousandsSeparator'>,\r\n  mapToRadix: $PropertyType<MaskedNumber, 'mapToRadix'>,\r\n  scale: $PropertyType<MaskedNumber, 'scale'>,\r\n  signed: $PropertyType<MaskedNumber, 'signed'>,\r\n  normalizeZeros: $PropertyType<MaskedNumber, 'normalizeZeros'>,\r\n  padFractionalZeros: $PropertyType<MaskedNumber, 'padFractionalZeros'>,\r\n  postFormat: $PropertyType<MaskedNumber, 'postFormat'>, // TODO deprecarted, remove in 3.0\r\n};\r\n\r\nexport default\r\nclass MaskedNumber extends Masked<Number> {\r\n  static DEFAULTS: $Shape<MaskedNumberOptions>;\r\n\r\n  radix: string;\r\n  thousandsSeparator: string;\r\n  mapToRadix: Array<string>;\r\n  min: number;\r\n  max: number;\r\n  scale: number;\r\n  signed: boolean;\r\n  normalizeZeros: boolean;\r\n  padFractionalZeros: boolean;\r\n  postFormat: any; // TODO deprecarted, remove in 3.0\r\n  _numberRegExp: RegExp;\r\n  _numberRegExpInput: RegExp;\r\n  _thousandsSeparatorRegExp: RegExp;\r\n  _mapToRadixRegExp: RegExp;\r\n\r\n  constructor (opts: $Shape<MaskedNumberOptions>) {\r\n    super({\r\n      ...MaskedNumber.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  _update (opts: MaskedNumberOptions) {\r\n    if (opts.postFormat) {\r\n      console.warn(\"'postFormat' option is deprecated and will be removed in next release, use plain options instead.\");\r\n      Object.assign(opts, opts.postFormat);\r\n      delete opts.postFormat;\r\n    }\r\n    super._update(opts);\r\n    this._updateRegExps();\r\n  }\r\n\r\n  _updateRegExps () {\r\n    // use different regexp to process user input (more strict, input suffix) and tail shifting\r\n    const start = '^'\r\n\r\n    let midInput = '';\r\n    let mid = '';\r\n    if (this.allowNegative) {\r\n      midInput += '([+|\\\\-]?|([+|\\\\-]?(0|([1-9]+\\\\d*))))';\r\n      mid += '[+|\\\\-]?';\r\n    } else {\r\n      midInput += '(0|([1-9]+\\\\d*))';\r\n    }\r\n    mid += '\\\\d*';\r\n\r\n    let end = (this.scale ?\r\n      '(' + this.radix + '\\\\d{0,' + this.scale + '})?' :\r\n      '') + '$';\r\n\r\n    this._numberRegExpInput = new RegExp(start + midInput + end);\r\n    this._numberRegExp = new RegExp(start + mid + end);\r\n    this._mapToRadixRegExp = new RegExp('[' +\r\n      this.mapToRadix.map(escapeRegExp).join('') +\r\n    ']', 'g');\r\n    this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\r\n  }\r\n\r\n  _extractTail (fromPos: number=0, toPos: number=this.value.length): string {\r\n    return this._removeThousandsSeparators(super._extractTail(fromPos, toPos));\r\n  }\r\n\r\n  _removeThousandsSeparators (value: string): string {\r\n    return value.replace(this._thousandsSeparatorRegExp, '');\r\n  }\r\n\r\n  _insertThousandsSeparators (value: string): string {\r\n    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\r\n    const parts = value.split(this.radix);\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\r\n    return parts.join(this.radix);\r\n  }\r\n\r\n  doPrepare (str: string, ...args: *) {\r\n    return super.doPrepare(this._removeThousandsSeparators(str.replace(this._mapToRadixRegExp, this.radix)), ...args);\r\n  }\r\n\r\n  appendWithTail (...args: *) {\r\n    let previousValue = this.value;\r\n    this._value = this._removeThousandsSeparators(this.value);\r\n    let startChangePos = this.value.length;\r\n\r\n    const appendDetails = super.appendWithTail(...args);\r\n    this._value = this._insertThousandsSeparators(this.value);\r\n\r\n    // calculate offsets after insert separators\r\n    let beforeTailPos = startChangePos + appendDetails.inserted.length;\r\n    for (let pos = 0; pos <= beforeTailPos; ++pos) {\r\n      if (this.value[pos] === this.thousandsSeparator) {\r\n        if (pos < startChangePos ||\r\n          // check high bound\r\n          // if separator is still there - consider it also\r\n          (pos === startChangePos && previousValue[pos] === this.thousandsSeparator)) {\r\n          ++startChangePos;\r\n        }\r\n        if (pos < beforeTailPos) ++beforeTailPos;\r\n      }\r\n    }\r\n\r\n    // adjust details with separators\r\n    appendDetails.rawInserted = appendDetails.inserted;\r\n    appendDetails.inserted = this.value.slice(startChangePos, beforeTailPos);\r\n    appendDetails.shift += startChangePos - previousValue.length;\r\n\r\n    return appendDetails;\r\n  }\r\n\r\n  nearestInputPos (cursorPos: number, direction?: Direction): number {\r\n    if (!direction) return cursorPos;\r\n\r\n    const nextPos = indexInDirection(cursorPos, direction);\r\n    if (this.value[nextPos] === this.thousandsSeparator) cursorPos += direction;\r\n    return cursorPos;\r\n  }\r\n\r\n  doValidate (flags: AppendFlags) {\r\n    const regexp = flags.input ? this._numberRegExpInput : this._numberRegExp;\r\n\r\n    // validate as string\r\n    let valid = regexp.test(this._removeThousandsSeparators(this.value));\r\n\r\n    if (valid) {\r\n      // validate as number\r\n      const number = this.number;\r\n      valid = valid && !isNaN(number) &&\r\n        // check min bound for negative values\r\n        (this.min == null || this.min >= 0 || this.min <= this.number) &&\r\n        // check max bound for positive values\r\n        (this.max == null || this.max <= 0 || this.number <= this.max);\r\n    }\r\n\r\n    return valid && super.doValidate(flags);\r\n  }\r\n\r\n  doCommit () {\r\n    const number = this.number;\r\n    let validnum = number;\r\n\r\n    // check bounds\r\n    if (this.min != null) validnum = Math.max(validnum, this.min);\r\n    if (this.max != null) validnum = Math.min(validnum, this.max);\r\n\r\n    if (validnum !== number) this.unmaskedValue = String(validnum);\r\n\r\n    let formatted = this.value;\r\n\r\n    if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\r\n    if (this.padFractionalZeros) formatted = this._padFractionalZeros(formatted);\r\n\r\n    this._value = formatted;\r\n    super.doCommit();\r\n  }\r\n\r\n  _normalizeZeros (value: string): string {\r\n    const parts = this._removeThousandsSeparators(value).split(this.radix);\r\n\r\n    // remove leading zeros\r\n    parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, (match, sign, zeros, num) => sign + num);\r\n    // add leading zero\r\n    if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\r\n\r\n    if (parts.length > 1) {\r\n      parts[1] = parts[1].replace(/0*$/, '');  // remove trailing zeros\r\n      if (!parts[1].length) parts.length = 1;  // remove fractional\r\n    }\r\n\r\n    return this._insertThousandsSeparators(parts.join(this.radix));\r\n  }\r\n\r\n  _padFractionalZeros (value: string): string {\r\n    const parts = value.split(this.radix);\r\n    if (parts.length < 2) parts.push('');\r\n    parts[1] = parts[1].padEnd(this.scale, '0');\r\n    return parts.join(this.radix);\r\n  }\r\n\r\n  get number (): number {\r\n    let numstr =\r\n      this._removeThousandsSeparators(\r\n        this._normalizeZeros(\r\n          this.unmaskedValue))\r\n      .replace(this.radix, '.');\r\n\r\n    return Number(numstr);\r\n  }\r\n\r\n  set number (number: number) {\r\n    this.unmaskedValue = String(number).replace('.', this.radix);\r\n  }\r\n\r\n  get allowNegative (): boolean {\r\n    return this.signed ||\r\n      (this.min != null && this.min < 0) ||\r\n      (this.max != null && this.max < 0);\r\n  }\r\n}\r\nMaskedNumber.DEFAULTS = {\r\n  radix: ',',\r\n  thousandsSeparator: '',\r\n  mapToRadix: ['.'],\r\n  scale: 2,\r\n  signed: false,\r\n  normalizeZeros: true,\r\n  padFractionalZeros: false,\r\n};\r\n","// @flow\r\nimport Masked, {type MaskedOptions} from './base.js';\r\n\r\n\r\nexport default\r\nclass MaskedRegExp extends Masked<RegExp> {\r\n  _update (opts: $Shape<MaskedOptions<RegExp>>) {\r\n    opts.validate = (value) => value.search(opts.mask) >= 0;\r\n    super._update(opts);\r\n  }\r\n}\r\n","// @flow\r\nimport Masked, {type MaskedOptions} from './base.js';\r\n\r\n\r\nexport default\r\nclass MaskedFunction extends Masked<Function> {\r\n  _update (opts: MaskedOptions<Function>) {\r\n    opts.validate = opts.mask;\r\n    super._update(opts);\r\n  }\r\n}\r\n","// @flow\r\nimport ChangeDetails from '../core/change-details.js';\r\nimport createMask from './factory.js';\r\nimport Masked, {type AppendFlags} from './base.js';\r\n\r\n\r\nexport default\r\nclass MaskedDynamic extends Masked<Array<{[string]: any}>> {\r\n  currentMask: ?Masked<*>;\r\n  compiledMasks: Array<Masked<*>>;\r\n  dispatch: (string, Masked<*>, AppendFlags) => Masked<*>;\r\n\r\n  constructor (opts: any) {\r\n    super({\r\n      ...MaskedDynamic.DEFAULTS,\r\n      ...opts\r\n    });\r\n\r\n    this.currentMask = null;\r\n  }\r\n\r\n  _update (opts: any) {\r\n    super._update(opts);\r\n    this.compiledMasks = Array.isArray(opts.mask) ?\r\n      opts.mask.map(m => createMask(m)) :\r\n      [];\r\n  }\r\n\r\n  _append (str: string, ...args: *) {\r\n    const oldValueLength = this.value.length;\r\n    const details = new ChangeDetails();\r\n\r\n    str = this.doPrepare(str, ...args);\r\n\r\n    const inputValue = this.rawInputValue;\r\n    this.currentMask = this.doDispatch(str, ...args);\r\n    if (this.currentMask) {\r\n      // update current mask\r\n      this.currentMask.rawInputValue = inputValue;\r\n      details.shift = this.value.length - oldValueLength;\r\n      details.aggregate(this.currentMask._append(str, ...args));\r\n    }\r\n\r\n    return details;\r\n  }\r\n\r\n  doDispatch(appended: string, flags: AppendFlags={}) {\r\n    return this.dispatch(appended, this, flags);\r\n  }\r\n\r\n  clone () {\r\n    const m = new MaskedDynamic(this);\r\n    m._value = this.value;\r\n    if (this.currentMask) m.currentMask = this.currentMask.clone();\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    if (this.currentMask) this.currentMask.reset();\r\n    this.compiledMasks.forEach(cm => cm.reset());\r\n  }\r\n\r\n  get value (): string {\r\n    return this.currentMask ? this.currentMask.value : '';\r\n  }\r\n\r\n  set value (value: string) {\r\n    this.resolve(value);\r\n  }\r\n\r\n  get isComplete (): boolean {\r\n    return !!this.currentMask && this.currentMask.isComplete;\r\n  }\r\n\r\n  _unmask () {\r\n    return this.currentMask ? this.currentMask._unmask() : '';\r\n  }\r\n\r\n  remove (...args: *) {\r\n    if (this.currentMask) this.currentMask.remove(...args);\r\n  }\r\n\r\n  extractInput (...args: *) {\r\n    return this.currentMask ?\r\n      this.currentMask.extractInput(...args) :\r\n      '';\r\n  }\r\n\r\n  doCommit () {\r\n    if (this.currentMask) this.currentMask.doCommit();\r\n    super.doCommit();\r\n  }\r\n\r\n  nearestInputPos(...args: *) {\r\n    return this.currentMask ?\r\n      this.currentMask.nearestInputPos(...args) :\r\n      super.nearestInputPos(...args);\r\n  }\r\n}\r\n\r\nMaskedDynamic.DEFAULTS = {\r\n  dispatch: (appended, masked, flags) => {\r\n    if (!masked.compiledMasks.length) return;\r\n\r\n    const inputValue = masked.rawInputValue;\r\n\r\n    // update all\r\n    masked.compiledMasks.forEach(cm => {\r\n      cm.rawInputValue = inputValue;\r\n      cm._append(appended, flags);\r\n    });\r\n\r\n    // pop masks with longer values first\r\n    const inputs = masked.compiledMasks.map((cm, index) => ({value: cm.rawInputValue.length, index}));\r\n    inputs.sort((i1, i2) => i2.value - i1.value);\r\n\r\n    return masked.compiledMasks[inputs[0].index];\r\n  }\r\n};\r\n"],"names":["isString","str","String","conform","res","fallback","indexInDirection","pos","direction","DIRECTION","LEFT","escapeRegExp","replace","objectIncludes","b","a","i","arrA","Array","isArray","arrB","length","keys","Object","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","toString","prototype","hasOwnProperty","call","maskedClass","mask","Error","g","IMask","MaskedRegExp","MaskedPattern","MaskedDate","Number","MaskedNumber","MaskedDynamic","Masked","Function","MaskedFunction","warn","createMask","opts","assign","EnumGroup","enums","repeat","value","group","flags","some","e","indexOf","unmaskedValue","el","InputMask","window","global","self","cursorPos","oldValue","oldSelection","this","slice","startChangePos","start","Math","min","substr","insertedCount","max","end","removedCount","substring","NONE","RIGHT","ChangeDetails","details","inserted","shift","overflow","rawInserted","_rawInserted","_value","_update","DEFAULTS","isInitialized","withValueRefresh","bind","m","resolve","reset","_append","input","_appendTail","doCommit","_unmask","extractInput","raw","fromPos","toPos","tail","oldValueLength","consistentValue","clone","doPrepare","ci","doValidate","aggregateDetails","consistentAppended","ch","appendDetails","aggregate","from","count","fn","_refreshing","unmasked","ret","prepare","validate","commit","deleteCount","removeDirection","tailPos","_extractTail","nearestInputPos","remove","changeDetails","appendWithTail","val","PatternDefinition","_masked","isHollow","isRawInput","type","TYPES","INPUT","optional","PatternGroup","masked","name","offset","mapDefIndexToPos","RangeGroup","to","maxlen","_from","_to","_maxLength","maxLength","minstr","maxstr","match","placeholder","num","search","_matchFrom","padEnd","Range","Enum","definitions","placeholderChar","char","lazy","placeholderLazy","_updateMask","defs","_charDefs","_groupDefs","pattern","unmaskingBlock","optionalBlock","stopAlign","groups","p","gNames","filter","gName","sort","push","FIXED","unmasking","STOP_CHAR","ESCAPE_CHAR","args","every","super","forEach","d","isInput","defIndex","isHiddenHollow","hiddenHollowsBefore","di","def","_appendChunks","_appendPlaceholder","mapPosToDefIndex","resolved","skipped","chres","chunks","fromDefIndex","_extractInputChunks","toDefIndex","stopDefIndices","map","stops","s","stop","maxDefIndex","step","initialDefIndex","initialDef","firstInputIndex","firstFilledInputIndex","firstVisibleHollowIndex","nextdi","nextDef","groupsByName","Definition","Group","GET_DEFAULT_GROUPS","Y","getFullYear","valid","date","isComplete","isDateExist","format","parse","getDate","padStart","getMonth","join","split","day","month","year","_listeners","_unmaskedValue","_saveSelection","_onInput","_onChange","_onDrop","alignCursor","alignCursorFriendly","bindEvents","updateValue","constructor","updateControl","addEventListener","removeEventListener","ev","l","_cursorChanging","_changingCursorPos","selectionStart","selectionEnd","document","activeElement","setSelectionRange","_selection","newUnmaskedValue","newValue","isChanged","_fireChangeEvents","updateOptions","_delayUpdateCursor","_abortUpdateCursor","setTimeout","fireEvent","handler","hIndex","splice","ActionDetails","removed","updateCursor","preventDefault","stopPropagation","unbindEvents","postFormat","_updateRegExps","midInput","mid","allowNegative","scale","radix","_numberRegExpInput","_numberRegExp","_mapToRadixRegExp","mapToRadix","_thousandsSeparatorRegExp","thousandsSeparator","_removeThousandsSeparators","parts","previousValue","_insertThousandsSeparators","beforeTailPos","nextPos","test","number","isNaN","validnum","formatted","normalizeZeros","_normalizeZeros","padFractionalZeros","_padFractionalZeros","sign","zeros","numstr","signed","currentMask","compiledMasks","inputValue","rawInputValue","doDispatch","appended","dispatch","cm","inputs","index","i1","i2"],"mappings":"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"}