{"version":3,"file":"imask.es.min.js","sources":["../src/core/utils.js","../src/masked/factory.js","../src/masked/pattern/group.js","../src/imask.js","../src/masked/base.js","../src/masked/regexp.js","../src/masked/function.js","../src/masked/number.js","../src/masked/pattern/definition.js","../src/masked/pattern.js","../src/masked/date.js","../src/masked/dynamic.js","../src/core/action-details.js","../src/controls/input.js"],"sourcesContent":["export\r\nfunction isString (str) {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\nexport\r\nfunction conform (res, str, fallback='') {\r\n  return isString(res) ?\r\n    res :\r\n    res ?\r\n      str :\r\n      fallback;\r\n}\r\n\r\nexport\r\nconst DIRECTION = {\r\n  NONE: 0,\r\n  LEFT: -1,\r\n  RIGHT: 1\r\n}\r\n\r\nexport\r\nfunction indexInDirection (pos, direction) {\r\n  if (direction === DIRECTION.LEFT) --pos;\r\n  return pos;\r\n}\r\n\r\nexport\r\nfunction escapeRegExp (str) {\r\n  return str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\r\n}\r\n\r\n\r\n// cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\r\nexport\r\nfunction objectIncludes (b, a) {\r\n  if (a === b) return true;\r\n\r\n  var arrA = Array.isArray(a)\r\n    , arrB = Array.isArray(b)\r\n    , i;\r\n\r\n  if (arrA && arrB) {\r\n    if (a.length != b.length) return false;\r\n    for (i = 0; i < a.length; i++)\r\n      if (!objectIncludes(a[i], b[i])) return false;\r\n    return true;\r\n  }\r\n\r\n  if (arrA != arrB) return false;\r\n\r\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\r\n    var keys = Object.keys(a);\r\n    // if (keys.length !== Object.keys(b).length) return false;\r\n\r\n    var dateA = a instanceof Date\r\n      , dateB = b instanceof Date;\r\n    if (dateA && dateB) return a.getTime() == b.getTime();\r\n    if (dateA != dateB) return false;\r\n\r\n    var regexpA = a instanceof RegExp\r\n      , regexpB = b instanceof RegExp;\r\n    if (regexpA && regexpB) return a.toString() == b.toString();\r\n    if (regexpA != regexpB) return false;\r\n\r\n    for (i = 0; i < keys.length; i++)\r\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\r\n\r\n    for (i = 0; i < keys.length; i++)\r\n      if(!objectIncludes(a[keys[i]], b[keys[i]])) return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}","import {isString} from '../core/utils.js';\r\nimport Masked from './base.js';\r\nimport MaskedRegExp from './regexp.js';\r\nimport MaskedFunction from './function.js';\r\nimport MaskedNumber from './number.js';\r\n\r\n\r\nexport\r\nfunction maskedClass (mask) {\r\n  if (mask == null) {\r\n    throw new Error('mask property should be defined');\r\n  }\r\n\r\n  if (mask instanceof RegExp) return MaskedRegExp;\r\n  if (isString(mask)) return IMask.MaskedPattern;\r\n  if (mask.prototype instanceof Masked) return mask;\r\n  if (Array.isArray(mask) || mask === Array) return IMask.MaskedDynamic;\r\n  if (mask instanceof Number || typeof mask === 'number' || mask === Number) return MaskedNumber;\r\n  if (mask instanceof Date || mask === Date) return IMask.MaskedDate;\r\n  if (mask instanceof Function) return MaskedFunction;\r\n\r\n  console.warn('Mask not found for mask', mask);  // eslint-disable-line no-console\r\n  return Masked;\r\n}\r\n\r\n\r\nexport default\r\nfunction createMask (opts) {\r\n  opts = Object.assign({}, opts);  // clone\r\n  const mask = opts.mask;\r\n\r\n  if (mask instanceof Masked) return mask;\r\n\r\n  const MaskedClass = maskedClass(mask);\r\n  return new MaskedClass(opts);\r\n}\r\n","export default\r\nclass PatternGroup {\r\n  constructor(masked, {name, offset, mask, validate}) {\r\n    this.masked = masked;\r\n    this.name = name;\r\n    this.offset = offset;\r\n    this.mask = mask;\r\n    this.validate = validate || (() => true);\r\n  }\r\n\r\n  get value () {\r\n    return this.masked.value.slice(\r\n      this.masked.mapDefIndexToPos(this.offset),\r\n      this.masked.mapDefIndexToPos(this.offset + this.mask.length));\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this.masked.extractInput(\r\n      this.masked.mapDefIndexToPos(this.offset),\r\n      this.masked.mapDefIndexToPos(this.offset + this.mask.length));\r\n  }\r\n\r\n  doValidate (opts) {\r\n    return this.validate(this.value, this, opts);\r\n  }\r\n}\r\n\r\nexport\r\nclass RangeGroup {\r\n  constructor ([from, to], maxlen=(to+'').length) {\r\n    this._from = from;\r\n    this._to = to;\r\n    this._maxLength = maxlen;\r\n    this.validate = this.validate.bind(this);\r\n\r\n    this._update();\r\n  }\r\n\r\n  get to () {\r\n    return this._to;\r\n  }\r\n\r\n  set to (to) {\r\n    this._to = to;\r\n    this._update();\r\n  }\r\n\r\n  get from () {\r\n    return this._from;\r\n  }\r\n\r\n  set from (from) {\r\n    this._from = from;\r\n    this._update();\r\n  }\r\n\r\n  get maxLength () {\r\n    return this._maxLength;\r\n  }\r\n\r\n  set maxLength (maxLength) {\r\n    this._maxLength = maxLength;\r\n    this._update();\r\n  }\r\n\r\n  get _matchFrom () {\r\n    return this.maxLength - (this.from + '').length;\r\n  }\r\n\r\n  _update() {\r\n    this._maxLength = Math.max(this._maxLength, (this.to + '').length);\r\n    this.mask = '0'.repeat(this._maxLength);\r\n  }\r\n\r\n  validate (str) {\r\n    let minstr = '';\r\n    let maxstr = '';\r\n\r\n    const [, placeholder, num] = str.match(/^(\\D*)(\\d*)(\\D*)/);\r\n    if (num) {\r\n      minstr = ('0'.repeat(placeholder.length) + num);\r\n      maxstr = ('9'.repeat(placeholder.length) + num);\r\n    }\r\n\r\n    const firstNonZero = str.search(/[^0]/);\r\n    if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\r\n\r\n    minstr = minstr.padEnd(this._maxLength, '0');\r\n    maxstr = maxstr.padEnd(this._maxLength, '9');\r\n\r\n    return this.from <= Number(maxstr) && Number(minstr) <= this.to;\r\n  }\r\n}\r\n\r\nexport\r\nfunction EnumGroup (enums) {\r\n  return {\r\n    mask: '*'.repeat(enums[0].length),\r\n    validate: (value, group) => enums.some(e => e.indexOf(group.unmaskedValue) >= 0)\r\n  };\r\n}\r\n\r\nPatternGroup.Range = RangeGroup;\r\nPatternGroup.Enum = EnumGroup;\r\n","import Masked from './masked/base.js';\r\nimport MaskedPattern from './masked/pattern.js';\r\nimport MaskedNumber from './masked/number.js';\r\nimport MaskedDate from './masked/date.js';\r\nimport MaskedRegExp from './masked/regexp.js';\r\nimport MaskedFunction from './masked/function.js';\r\nimport MaskedDynamic from './masked/dynamic.js';\r\n\r\nimport InputMask from './controls/input.js';\r\n\r\n\r\nexport default\r\nfunction IMask (el, opts={}) {\r\n\t// currently available only for input-like elements\r\n  return new InputMask(el, opts);\r\n}\r\n\r\n\r\nIMask.InputMask = InputMask;\r\n\r\nIMask.Masked = Masked;\r\nIMask.MaskedPattern = MaskedPattern;\r\nIMask.MaskedNumber = MaskedNumber;\r\nIMask.MaskedDate = MaskedDate;\r\nIMask.MaskedRegExp = MaskedRegExp;\r\nIMask.MaskedFunction = MaskedFunction;\r\nIMask.MaskedDynamic = MaskedDynamic;\r\n\r\nwindow.IMask = IMask;\r\n","export default\r\nclass Masked {\r\n  constructor (opts) {\r\n    this._value = '';\r\n    this._update({\r\n      ...Masked.DEFAULTS,\r\n      ...opts\r\n    });\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  updateOptions (opts) {\r\n    this.withValueRefresh(this._update.bind(this, opts));\r\n  }\r\n\r\n  _update (opts) {\r\n    Object.assign(this, opts);\r\n  }\r\n\r\n  clone () {\r\n    const m = new Masked(this);\r\n    m._value = this.value.slice();\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    this._value = '';\r\n  }\r\n\r\n  get value () {\r\n    return this._value;\r\n  }\r\n\r\n  set value (value) {\r\n    this.reset();\r\n    this.appendWithTail(value);\r\n    this.doCommit();\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this._unmask();\r\n  }\r\n\r\n  set unmaskedValue (value) {\r\n    this.reset();\r\n    this._append(value);\r\n    this.appendWithTail(\"\");\r\n    this.doCommit();\r\n  }\r\n\r\n  get rawInputValue () {\r\n    return this.extractInput(0, this.value.length, {raw: true});\r\n  }\r\n\r\n  set rawInputValue (value) {\r\n    this.reset();\r\n    this._append(value, {raw: true});\r\n    this.appendWithTail(\"\");\r\n    this.doCommit();\r\n  }\r\n\r\n  get isComplete () {\r\n    return true;\r\n  }\r\n\r\n  nearestInputPos (cursorPos, /* direction */) {\r\n    return cursorPos;\r\n  }\r\n\r\n  extractInput (fromPos=0, toPos=this.value.length /*, flags */) {\r\n    return this.value.slice(fromPos, toPos);\r\n  }\r\n\r\n  extractTail (fromPos=0, toPos=this.value.length) {\r\n    return this.extractInput(fromPos, toPos);\r\n  }\r\n\r\n  _appendTail (tail) {\r\n    return !tail || this._append(tail, {tail: true});\r\n  }\r\n\r\n  _append (str, flags={}) {\r\n    const oldValueLength = this.value.length;\r\n    let consistentValue = this.clone();\r\n\r\n    str = this.doPrepare(str, flags);\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      this._value += str[ci];\r\n      if (this.doValidate(flags) === false) {\r\n        Object.assign(this, consistentValue);\r\n        if (!flags.input) return false;\r\n      }\r\n\r\n      consistentValue = this.clone();\r\n    }\r\n\r\n    return this.value.length - oldValueLength;\r\n\r\n  }\r\n\r\n  appendWithTail (str, tail) {\r\n    // TODO refactor\r\n    let appendCount = 0;\r\n    let consistentValue = this.clone();\r\n    let consistentAppended;\r\n\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      const ch = str[ci];\r\n\r\n      const appended = this._append(ch, {input: true});\r\n      consistentAppended = this.clone();\r\n      const tailAppended = appended !== false && this._appendTail(tail) !== false;\r\n      if (tailAppended === false || this.doValidate(true) === false) {\r\n        Object.assign(this, consistentValue);\r\n        break;\r\n      }\r\n\r\n      consistentValue = this.clone();\r\n      Object.assign(this, consistentAppended);\r\n      appendCount += appended;\r\n    }\r\n\r\n    // TODO needed for cases when\r\n    // 1) REMOVE ONLY AND NO LOOP AT ALL\r\n    // 2) last loop iteration removes tail\r\n    // 3) when breaks on tail insert\r\n    this._appendTail(tail);\r\n\r\n    return appendCount;\r\n  }\r\n\r\n  _unmask () {\r\n    return this.value;\r\n  }\r\n\r\n  // TODO rename - refactor\r\n  clear (from=0, to=this.value.length) {\r\n    this._value = this.value.slice(0, from) + this.value.slice(to);\r\n  }\r\n\r\n  withValueRefresh (fn) {\r\n    if (this._refreshing || !this.isInitialized) return fn();\r\n    this._refreshing = true;\r\n\r\n    const unmasked = this.unmaskedValue;\r\n\r\n    const ret = fn();\r\n\r\n    this.unmaskedValue = unmasked;\r\n\r\n    delete this._refreshing;\r\n    return ret;\r\n  }\r\n\r\n  doPrepare (str, flags) {\r\n    return this.prepare(str, this, flags);\r\n  }\r\n\r\n  doValidate (flags) {\r\n    return this.validate(this.value, this, flags);\r\n  }\r\n\r\n  doCommit () {\r\n    this.commit(this.value, this);\r\n  }\r\n\r\n  // TODO\r\n  // resolve (inputRaw) -> outputRaw\r\n\r\n  // TODO\r\n  // insert (str, fromPos, flags)\r\n\r\n  // splice (start, deleteCount, inserted, removeDirection) {\r\n  //   const tailPos = start + deleteCount;\r\n  //   const tail = this.extractTail(tailPos);\r\n\r\n  //   start = this.nearestInputPos(start, removeDirection);\r\n  //   this.clear(start);\r\n  //   return this.appendWithTail(inserted, tail);\r\n  // }\r\n}\r\n\r\nMasked.DEFAULTS = {\r\n  prepare: val => val,\r\n  validate: () => true,\r\n  commit: () => {},\r\n};\r\n","import Masked from './base.js';\r\n\r\n\r\nexport default\r\nclass MaskedRegExp extends Masked {\r\n  _update (opts) {\r\n    opts.validate = (value) => value.search(opts.mask) >= 0;\r\n    super._update(opts);\r\n  }\r\n}\r\n","import Masked from './base.js';\r\n\r\n\r\nexport default\r\nclass MaskedFunction extends Masked {\r\n  _update (opts) {\r\n    opts.validate = opts.mask;\r\n    super._update(opts);\r\n  }\r\n}\r\n","import {escapeRegExp, DIRECTION, indexInDirection} from '../core/utils.js';\r\nimport Masked from './base.js';\r\n\r\n\r\nexport default\r\nclass MaskedNumber extends Masked {\r\n  constructor (opts) {\r\n    opts.postFormat = Object.assign({}, MaskedNumber.DEFAULTS.postFormat, opts.postFormat);\r\n    super({\r\n      ...MaskedNumber.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  _update (opts) {\r\n    opts.postFormat = Object.assign({}, this.postFormat, opts.postFormat);\r\n\r\n    super._update(opts);\r\n    this._updateRegExps();\r\n  }\r\n\r\n  _updateRegExps () {\r\n    // use different regexp to process user input (more strict, input suffix) and tail shifting\r\n    const start = '^'\r\n\r\n    let midInput = '';\r\n    let mid = '';\r\n    if (this.allowNegative) {\r\n      midInput += '([+|\\\\-]?|([+|\\\\-]?(0|([1-9]+\\\\d*))))';\r\n      mid += '[+|\\\\-]?';\r\n    } else {\r\n      midInput += '(0|([1-9]+\\\\d*))';\r\n    }\r\n    mid += '\\\\d*';\r\n\r\n    let end = (this.scale ?\r\n      '(' + this.radix + '\\\\d{0,' + this.scale + '})?' :\r\n      '') + '$';\r\n\r\n    this._numberRegExpInput = new RegExp(start + midInput + end);\r\n    this._numberRegExp = new RegExp(start + mid + end);\r\n    this._mapToRadixRegExp = new RegExp('[' +\r\n      this.mapToRadix.map(escapeRegExp).join('') +\r\n    ']', 'g');\r\n    this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\r\n  }\r\n\r\n  extractTail (fromPos=0, toPos=this.value.length) {\r\n    return this._removeThousandsSeparators(super.extractTail(fromPos, toPos));\r\n  }\r\n\r\n  _removeThousandsSeparators (value) {\r\n    return value.replace(this._thousandsSeparatorRegExp, '');\r\n  }\r\n\r\n  _insertThousandsSeparators (value) {\r\n    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\r\n    const parts = value.split(this.radix);\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\r\n    return parts.join(this.radix);\r\n  }\r\n\r\n  doPrepare (str, ...args) {\r\n    return super.doPrepare(this._removeThousandsSeparators(str.replace(this._mapToRadixRegExp, this.radix)), ...args);\r\n  }\r\n\r\n  appendWithTail (str, tail) {\r\n    const oldValueLength = this.value.length;\r\n    this._value = this._removeThousandsSeparators(this.value);\r\n    let removedSeparatorsCount = oldValueLength - this.value.length;\r\n\r\n\r\n    const appended = super.appendWithTail(str, tail);\r\n\r\n\r\n    this._value = this._insertThousandsSeparators(this.value);\r\n\r\n    let beforeTailPos = oldValueLength + appended - removedSeparatorsCount;\r\n    let insertedSeparatorsBeforeTailCount = 0;\r\n    for (let pos = 0; pos <= beforeTailPos; ++pos) {\r\n      if (this.value[pos] === this.thousandsSeparator) {\r\n        ++insertedSeparatorsBeforeTailCount;\r\n        ++beforeTailPos;\r\n      }\r\n    }\r\n\r\n    return appended - removedSeparatorsCount + insertedSeparatorsBeforeTailCount;\r\n  }\r\n\r\n  nearestInputPos (cursorPos, direction=DIRECTION.LEFT) {\r\n    if (!direction) return cursorPos;\r\n\r\n    const nextPos = indexInDirection(cursorPos, direction);\r\n    if (this.value[nextPos] === this.thousandsSeparator) cursorPos += direction;\r\n    return cursorPos;\r\n  }\r\n\r\n  doValidate (flags) {\r\n    const regexp = flags.input ? this._numberRegExpInput : this._numberRegExp;\r\n\r\n    // validate as string\r\n    let valid = regexp.test(this._removeThousandsSeparators(this.value));\r\n\r\n    if (valid) {\r\n      // validate as number\r\n      const number = this.number;\r\n      valid = valid && !isNaN(number) &&\r\n        // check min bound for negative values\r\n        (this.min == null || this.min >= 0 || this.min <= this.number) &&\r\n        // check max bound for positive values\r\n        (this.max == null || this.max <= 0 || this.number <= this.max);\r\n    }\r\n\r\n    return valid && super.doValidate(flags);\r\n  }\r\n\r\n  doCommit () {\r\n    const number = this.number;\r\n    let validnum = number;\r\n\r\n    // check bounds\r\n    if (this.min != null) validnum = Math.max(validnum, this.min);\r\n    if (this.max != null) validnum = Math.min(validnum, this.max);\r\n\r\n    if (validnum !== number) this.unmaskedValue = '' + validnum;\r\n\r\n    let formatted = this.value;\r\n\r\n    if (this.postFormat.normalizeZeros) formatted = this._normalizeZeros(formatted);\r\n    if (this.postFormat.padFractionalZeros) formatted = this._padFractionalZeros(formatted);\r\n\r\n    this._value = formatted;\r\n    super.doCommit();\r\n  }\r\n\r\n  _normalizeZeros (value) {\r\n    const parts = this._removeThousandsSeparators(value).split(this.radix);\r\n\r\n    // remove leading zeros\r\n    parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, (match, sign, zeros, num) => sign + num);\r\n    // add leading zero\r\n    if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\r\n\r\n    if (parts.length > 1) {\r\n      parts[1] = parts[1].replace(/0*$/, '');  // remove trailing zeros\r\n      if (!parts[1].length) parts.length = 1;  // remove fractional\r\n    }\r\n\r\n    return this._insertThousandsSeparators(parts.join(this.radix));\r\n  }\r\n\r\n  _padFractionalZeros (value) {\r\n    const parts = value.split(this.radix);\r\n    if (parts.length < 2) parts.push('');\r\n    parts[1] = parts[1].padEnd(this.scale, '0');\r\n    return parts.join(this.radix);\r\n  }\r\n\r\n  get number () {\r\n    let numstr =\r\n      this._removeThousandsSeparators(\r\n        this._normalizeZeros(\r\n          this.unmaskedValue))\r\n      .replace(this.radix, '.');\r\n\r\n    return Number(numstr);\r\n  }\r\n\r\n  set number (number) {\r\n    this.unmaskedValue = ('' + number).replace('.', this.radix);\r\n  }\r\n\r\n  get allowNegative () {\r\n    return this.signed ||\r\n      (this.min != null && this.min < 0) ||\r\n      (this.max != null && this.max < 0);\r\n  }\r\n}\r\nMaskedNumber.DEFAULTS = {\r\n  radix: ',',\r\n  thousandsSeparator: '',\r\n  mapToRadix: ['.'],\r\n  scale: 2,\r\n  signed: false,\r\n  postFormat: {\r\n    normalizeZeros: true,\r\n    padFractionalZeros: false\r\n  }\r\n};\r\n","import createMask from '../factory.js';\r\n\r\n\r\nexport default\r\nclass PatternDefinition {\r\n  constructor(opts) {\r\n    Object.assign(this, opts);\r\n\r\n    if (this.mask) {\r\n      this._masked = createMask(opts);\r\n    }\r\n  }\r\n\r\n  reset () {\r\n    this.isHollow = false;\r\n    this.isRawInput = false;\r\n    if (this._masked) this._masked.reset();\r\n  }\r\n\r\n  get isInput () {\r\n    return this.type === PatternDefinition.TYPES.INPUT;\r\n  }\r\n\r\n  get isHiddenHollow () {\r\n    return this.isHollow && this.optional;\r\n  }\r\n\r\n  resolve (ch) {\r\n    if (!this._masked) return false;\r\n    // TODO seems strange\r\n    this._masked.value = ch;\r\n    return this._masked.value;\r\n  }\r\n}\r\n\r\nPatternDefinition.DEFAULTS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\nPatternDefinition.TYPES = {\r\n  INPUT: 'input',\r\n  FIXED: 'fixed'\r\n};\r\n","import {conform, DIRECTION, indexInDirection} from '../core/utils.js';\r\nimport Masked from './base.js';\r\nimport PatternDefinition from './pattern/definition.js';\r\nimport PatternGroup from './pattern/group.js';\r\n\r\n\r\nexport default\r\nclass MaskedPattern extends Masked {\r\n  constructor (opts={}) {\r\n    opts.placeholder = Object.assign({}, MaskedPattern.DEFAULT_PLACEHOLDER, opts.placeholder);\r\n    opts.definitions = Object.assign({}, PatternDefinition.DEFAULTS, opts.definitions);\r\n    super(opts);\r\n  }\r\n\r\n  _update (opts) {\r\n    opts.placeholder = Object.assign({}, this.placeholder, opts.placeholder);\r\n    opts.definitions = Object.assign({}, this.definitions, opts.definitions);\r\n    super._update(opts);\r\n    this._updateMask();\r\n  }\r\n\r\n  _updateMask () {\r\n    const defs = this.definitions;\r\n    this._charDefs = [];\r\n    this._groupDefs = [];\r\n\r\n    let pattern = this.mask;\r\n    if (!pattern || !defs) return;\r\n\r\n    let unmaskingBlock = false;\r\n    let optionalBlock = false;\r\n    let stopAlign = false;\r\n\r\n    for (let i=0; i<pattern.length; ++i) {\r\n      if (this.groups) {\r\n        const p = pattern.slice(i);\r\n        const gNames = Object.keys(this.groups).filter(gName => p.indexOf(gName) === 0);\r\n        // order by key length\r\n        gNames.sort((a, b) => b.length - a.length);\r\n        // use group name with max length\r\n        const gName = gNames[0];\r\n        if (gName) {\r\n          const group = this.groups[gName];\r\n          this._groupDefs.push(new PatternGroup(this, {\r\n            name: gName,\r\n            offset: this._charDefs.length,\r\n            mask: group.mask,\r\n            validate: group.validate\r\n          }));\r\n          pattern = pattern.replace(gName, group.mask);\r\n        }\r\n      }\r\n\r\n      let char = pattern[i];\r\n      let type = !unmaskingBlock && char in defs ?\r\n        PatternDefinition.TYPES.INPUT :\r\n        PatternDefinition.TYPES.FIXED;\r\n      const unmasking = type === PatternDefinition.TYPES.INPUT || unmaskingBlock;\r\n      const optional = type === PatternDefinition.TYPES.INPUT && optionalBlock;\r\n\r\n      if (char === MaskedPattern.STOP_CHAR) {\r\n        stopAlign = true;\r\n        continue;\r\n      }\r\n\r\n      if (char === '{' || char === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === '[' || char === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === MaskedPattern.ESCAPE_CHAR) {\r\n        ++i;\r\n        char = pattern[i];\r\n        // TODO validation\r\n        if (!char) break;\r\n        type = PatternDefinition.TYPES.FIXED;\r\n      }\r\n\r\n      this._charDefs.push(new PatternDefinition({\r\n        char,\r\n        type,\r\n        optional,\r\n        stopAlign,\r\n        unmasking,\r\n        mask: type === PatternDefinition.TYPES.INPUT ?\r\n          defs[char] :\r\n          (value => value === char)\r\n      }));\r\n\r\n      stopAlign = false;\r\n    }\r\n  }\r\n\r\n  doValidate (...args) {\r\n    return this._groupDefs.every(g => g.doValidate(...args)) && super.doValidate(...args);\r\n  }\r\n\r\n  clone () {\r\n    const m = new MaskedPattern(this);\r\n    m._value = this.value;\r\n    m._charDefs.forEach((d, i) => Object.assign(d, this._charDefs[i]));\r\n    m._groupDefs.forEach((d, i) => Object.assign(d, this._groupDefs[i]));\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    super.reset();\r\n    this._charDefs.forEach(d => {delete d.isHollow;});\r\n  }\r\n\r\n  get isComplete () {\r\n    return !this._charDefs.some((d, i) =>\r\n      d.isInput && !d.optional && (d.isHollow || !this.extractInput(i, i+1)));\r\n  }\r\n\r\n  hiddenHollowsBefore (defIndex) {\r\n    return this._charDefs\r\n      .slice(0, defIndex)\r\n      .filter(d => d.isHiddenHollow)\r\n      .length;\r\n  }\r\n\r\n  mapDefIndexToPos (defIndex) {\r\n    if (defIndex == null) return;\r\n    return defIndex - this.hiddenHollowsBefore(defIndex);\r\n  }\r\n\r\n  mapPosToDefIndex (pos) {\r\n    if (pos == null) return;\r\n    let defIndex = pos;\r\n    for (let di=0; di<this._charDefs.length; ++di) {\r\n      const def = this._charDefs[di];\r\n      if (di >= defIndex) break;\r\n      if (def.isHiddenHollow) ++defIndex;\r\n    }\r\n    return defIndex;\r\n  }\r\n\r\n  _unmask () {\r\n    const str = this.value;\r\n    let unmasked = '';\r\n\r\n    for (let ci=0, di=0; ci<str.length && di<this._charDefs.length; ++di) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      if (def.isHiddenHollow) continue;\r\n      if (def.unmasking && !def.isHollow) unmasked += ch;\r\n      ++ci;\r\n    }\r\n\r\n    return unmasked;\r\n  }\r\n\r\n  _appendTail (tail) {\r\n    return (!tail || this._appendChunks(tail, {tail: true})) && this._appendPlaceholder();\r\n  }\r\n\r\n  _append (str, flags={}) {\r\n    const oldValueLength = this.value.length;\r\n\r\n    str = this.doPrepare(str, flags.input);\r\n    for (let ci=0, di=this.mapPosToDefIndex(this.value.length); ci < str.length;) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      // check overflow\r\n      if (!def) return false;\r\n\r\n      // reset\r\n      def.isHollow = false;\r\n\r\n      let resolved, skipped;\r\n      let chres = conform(def.resolve(ch), ch);\r\n\r\n      if (def.type === PatternDefinition.TYPES.INPUT) {\r\n        if (chres) {\r\n          this._value += chres;\r\n          if (!this.doValidate()) {\r\n            chres = '';\r\n            this._value = this.value.slice(0, -1);\r\n          }\r\n        }\r\n\r\n        resolved = !!chres;\r\n        skipped = !chres && !def.optional;\r\n\r\n        if (!chres) {\r\n          if (!def.optional && !flags.input) {\r\n            this._value += this.placeholder.char;\r\n            skipped = false;\r\n          }\r\n          if (!skipped) def.isHollow = true;\r\n        }\r\n      } else {\r\n        this._value += def.char;\r\n        resolved = chres && (def.unmasking || flags.input) && !flags.tail;\r\n        def.isRawInput = resolved && (flags.raw || def.unmasking && flags.input);\r\n      }\r\n\r\n      if (!skipped) ++di;\r\n      if (resolved || skipped) ++ci;\r\n    }\r\n\r\n    return this.value.length - oldValueLength;\r\n  }\r\n\r\n  _appendChunks (chunks, ...args) {\r\n    for (let ci=0; ci < chunks.length; ++ci) {\r\n      const [fromDefIndex, input] = chunks[ci];\r\n      if (fromDefIndex != null) this._appendPlaceholder(fromDefIndex);\r\n      if (this._append(input, ...args) === false) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  extractTail (fromPos, toPos) {\r\n    return this.extractInputChunks(fromPos, toPos);\r\n  }\r\n\r\n  extractInput (fromPos=0, toPos=this.value.length, flags={}) {\r\n    // TODO fromPos === toPos\r\n    const str = this.value;\r\n    let input = '';\r\n\r\n    const toDefIndex = this.mapPosToDefIndex(toPos);\r\n    for (\r\n      let ci=fromPos, di=this.mapPosToDefIndex(fromPos);\r\n      ci<toPos && ci<str.length && di < toDefIndex;\r\n      ++di\r\n    ) {\r\n      const ch = str[ci];\r\n      const def = this._charDefs[di];\r\n\r\n      if (!def) break;\r\n      if (def.isHiddenHollow) continue;\r\n\r\n      if (def.isInput && !def.isHollow ||\r\n        flags.raw && !def.isInput && def.isRawInput) input += ch;\r\n      ++ci;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  extractInputChunks (fromPos=0, toPos=this.value.length) {\r\n    // TODO fromPos === toPos\r\n    const fromDefIndex = this.mapPosToDefIndex(fromPos);\r\n    const toDefIndex = this.mapPosToDefIndex(toPos);\r\n    const stopDefIndices = this._charDefs\r\n      .map((d, i) => [d, i])\r\n      .slice(fromDefIndex, toDefIndex)\r\n      .filter(([d]) => d.stopAlign)\r\n      .map(([, i]) => i);\r\n\r\n    const stops = [\r\n      fromDefIndex,\r\n      ...stopDefIndices,\r\n      toDefIndex\r\n    ];\r\n\r\n    return stops.map((s, i) => [\r\n      stopDefIndices.indexOf(s) >= 0 ?\r\n        s :\r\n        null,\r\n\r\n      this.extractInput(\r\n        this.mapDefIndexToPos(s),\r\n        this.mapDefIndexToPos(stops[++i]))\r\n    ]).filter(([stop, input]) => stop != null || input);\r\n  }\r\n\r\n  _appendPlaceholder (toDefIndex) {\r\n    const maxDefIndex = toDefIndex || this._charDefs.length;\r\n    for (let di=this.mapPosToDefIndex(this.value.length); di < maxDefIndex; ++di) {\r\n      const def = this._charDefs[di];\r\n      if (def.isInput) def.isHollow = true;\r\n\r\n      if (!this.placeholder.lazy || toDefIndex) {\r\n        this._value += !def.isInput ?\r\n          def.char :\r\n          !def.optional ?\r\n            this.placeholder.char :\r\n            '';\r\n      }\r\n    }\r\n  }\r\n\r\n  clear (from=0, to=this.value.length) {\r\n    this._value = this.value.slice(0, from) + this.value.slice(to);\r\n    const fromDefIndex = this.mapPosToDefIndex(from);\r\n    const toDefIndex = this.mapPosToDefIndex(to);\r\n    this._charDefs\r\n      .slice(fromDefIndex, toDefIndex)\r\n      .forEach(d => d.reset());\r\n  }\r\n\r\n   nearestInputPos (cursorPos, direction=DIRECTION.LEFT) {\r\n    if (!direction) return cursorPos;\r\n\r\n    const initialDefIndex = this.mapPosToDefIndex(cursorPos);\r\n    let di = initialDefIndex;\r\n\r\n    let firstInputIndex,\r\n        firstFilledInputIndex,\r\n        firstVisibleHollowIndex,\r\n        nextdi;\r\n\r\n    // search forward\r\n    for (\r\n      nextdi = indexInDirection(di, direction);\r\n      0 <= nextdi && nextdi < this._charDefs.length;\r\n      di += direction, nextdi += direction\r\n    ) {\r\n      const nextDef = this._charDefs[nextdi];\r\n      if (firstInputIndex == null && nextDef.isInput) firstInputIndex = di;\r\n      if (firstVisibleHollowIndex == null && nextDef.isHollow && !nextDef.isHiddenHollow) firstVisibleHollowIndex = di;\r\n      if (nextDef.isInput && !nextDef.isHollow) {\r\n        firstFilledInputIndex = di;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (direction === DIRECTION.LEFT || firstInputIndex == null) {\r\n      // search backwards\r\n      direction = -direction;\r\n      let overflow = false;\r\n\r\n      // find hollows only before initial pos\r\n      for (\r\n        nextdi = indexInDirection(di, direction);\r\n        0 <= nextdi && nextdi < this._charDefs.length;\r\n        di += direction, nextdi += direction\r\n      ) {\r\n        const nextDef = this._charDefs[nextdi];\r\n        if (nextDef.isInput) {\r\n          firstInputIndex = di;\r\n          if (nextDef.isHollow && !nextDef.isHiddenHollow) break;\r\n        }\r\n\r\n        // if hollow not found before start position - set `overflow`\r\n        // and try to find just any input\r\n        if (di === initialDefIndex) overflow = true;\r\n\r\n        // first input found\r\n        if (overflow && firstInputIndex != null) break;\r\n      }\r\n\r\n      // process overflow\r\n      overflow = overflow || nextdi >= this._charDefs.length;\r\n      if (overflow && firstInputIndex != null) di = firstInputIndex;\r\n    } else if (firstFilledInputIndex == null) {\r\n      // adjust index if delete at right and filled input not found at right\r\n      di = firstVisibleHollowIndex != null ?\r\n        firstVisibleHollowIndex :\r\n        firstInputIndex;\r\n    }\r\n\r\n    return this.mapDefIndexToPos(di);\r\n  }\r\n\r\n  group (name) {\r\n    return this.groupsByName(name)[0];\r\n  }\r\n\r\n  groupsByName (name) {\r\n    return this._groupDefs.filter(g => g.name === name);\r\n  }\r\n}\r\n\r\nMaskedPattern.DEFAULT_PLACEHOLDER = {\r\n  lazy: true,\r\n  char: '_'\r\n};\r\nMaskedPattern.STOP_CHAR = '`';\r\nMaskedPattern.ESCAPE_CHAR = '\\\\';\r\nMaskedPattern.Definition = PatternDefinition;\r\nMaskedPattern.Group = PatternGroup;\r\n","import MaskedPattern from './pattern.js';\r\nimport PatternGroup from './pattern/group.js';\r\n\r\n\r\nexport default\r\nclass MaskedDate extends MaskedPattern {\r\n  constructor (opts) {\r\n    super({\r\n      ...MaskedDate.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  _update (opts) {\r\n    if (opts.mask === Date) delete opts.mask;\r\n    if (opts.pattern) {\r\n      opts.mask = opts.pattern;\r\n      delete opts.pattern;\r\n    }\r\n\r\n    const groups = opts.groups;\r\n    opts.groups = Object.assign({}, MaskedDate.GET_DEFAULT_GROUPS());\r\n    // adjust year group\r\n    if (opts.min) opts.groups.Y.from = opts.min.getFullYear();\r\n    if (opts.max) opts.groups.Y.to = opts.max.getFullYear();\r\n    Object.assign(opts.groups, groups);\r\n\r\n    super._update(opts);\r\n  }\r\n\r\n  doValidate (...args) {\r\n    const valid = super.doValidate(...args);\r\n    const date = this.date;\r\n\r\n    return valid &&\r\n      (!this.isComplete ||\r\n        this.isDateExist(this.value) && date &&\r\n        (this.min == null || this.min <= date) &&\r\n        (this.max == null || date <= this.max));\r\n  }\r\n\r\n  isDateExist (str) {\r\n    return this.format(this.parse(str)) === str;\r\n  }\r\n\r\n  get date () {\r\n    return this.isComplete ?\r\n      this.parse(this.value) :\r\n      null;\r\n  }\r\n\r\n  set date (date) {\r\n    this.value = this.format(date);\r\n  }\r\n}\r\nMaskedDate.DEFAULTS = {\r\n  pattern: 'd{.}`m{.}`Y',\r\n  format: date => {\r\n    const day = ('' + date.getDate()).padStart(2, '0');\r\n    const month = ('' + (date.getMonth() + 1)).padStart(2, '0');\r\n    const year = date.getFullYear();\r\n\r\n    return [day, month, year].join('.');\r\n  },\r\n  parse: str => {\r\n    const [day, month, year] = str.split('.');\r\n    return new Date(year, month - 1, day);\r\n  },\r\n};\r\nMaskedDate.GET_DEFAULT_GROUPS = () => {\r\n  return {\r\n    d: new PatternGroup.Range([1, 31]),\r\n    m: new PatternGroup.Range([1, 12]),\r\n    Y: new PatternGroup.Range([1900, 9999]),\r\n  };\r\n}","import createMask from './factory.js';\r\nimport Masked from './base.js';\r\n\r\n\r\nexport default\r\nclass MaskedDynamic extends Masked {\r\n  constructor (opts) {\r\n    super({\r\n      ...MaskedDynamic.DEFAULTS,\r\n      ...opts\r\n    });\r\n\r\n    this.currentMasked = null;\r\n  }\r\n\r\n  _update (opts) {\r\n    super._update(opts);\r\n    this._compiledMasks = Array.isArray(opts.mask) ?\r\n      opts.mask.map(m => createMask(m)) :\r\n      [];\r\n  }\r\n\r\n  _append (str, ...args) {\r\n    const oldValueLength = this.value.length;\r\n\r\n    str = this.doPrepare(str, ...args);\r\n\r\n    const inputValue = this.rawInputValue;\r\n    this.currentMasked = this.doDispatch(str, ...args);\r\n\r\n    // update current mask\r\n    this.currentMasked.rawInputValue = inputValue;\r\n    return this.value.length - oldValueLength + this.currentMasked._append(str, ...args);\r\n  }\r\n\r\n  appendWithTail (str, tail) {\r\n    // TODO seems strange\r\n    // call append to do dispatch and get offset\r\n    const offset = !str ? this._append('') : 0;\r\n    return offset + super.appendWithTail(str, tail);\r\n  }\r\n\r\n  doDispatch(appended, flags) {\r\n    return this.dispatch(appended, this, flags);\r\n  }\r\n\r\n  clone () {\r\n    const m = new MaskedDynamic(this);\r\n    m._value = this.value;\r\n    m.currentMasked = this.currentMasked.clone();\r\n    m._compiledMasks.forEach((cm, i) => cm._value = this._compiledMasks[i].value);\r\n    return m;\r\n  }\r\n\r\n  reset () {\r\n    if (this.currentMasked) this.currentMasked.reset();\r\n    this._compiledMasks.forEach(cm => cm.reset());\r\n  }\r\n\r\n  get value () {\r\n    return this.currentMasked ? this.currentMasked.value : '';\r\n  }\r\n\r\n  set value (value) {\r\n    super.value = value;\r\n  }\r\n\r\n  get isComplete () {\r\n    return !!this.currentMasked && this.currentMasked.isComplete;\r\n  }\r\n\r\n  _unmask () {\r\n    return this.currentMasked ? this.currentMasked._unmask() : '';\r\n  }\r\n\r\n  clear (...args) {\r\n    if (this.currentMasked) this.currentMasked.clear(...args);\r\n    this._compiledMasks.forEach(cm => cm.clear(...args));\r\n  }\r\n\r\n  extractInput (...args) {\r\n    return this.currentMasked ?\r\n      this.currentMasked.extractInput(...args) :\r\n      '';\r\n  }\r\n\r\n  doCommit () {\r\n    if (this.currentMasked) this.currentMasked.doCommit();\r\n    super.doCommit();\r\n  }\r\n}\r\n\r\nMaskedDynamic.DEFAULTS = {\r\n  dispatch: (appended, masked, flags) => {\r\n    if (!masked._compiledMasks.length) return;\r\n\r\n    const inputValue = masked.rawInputValue;\r\n\r\n    // update all\r\n    masked._compiledMasks.forEach(cm => {\r\n      cm.rawInputValue = inputValue;\r\n      cm._append(appended, flags);\r\n    });\r\n\r\n    // pop masks with longer values first\r\n    const inputs = masked._compiledMasks.map((cm, index) => ({value: cm.rawInputValue.length, index}));\r\n    inputs.sort((i1, i2) => i2.value - i1.value);\r\n\r\n    return masked._compiledMasks[inputs[0].index];\r\n  }\r\n};\r\n","import {DIRECTION} from './utils.js';\r\n\r\n\r\nexport default\r\nclass ActionDetails {\r\n  constructor (value, cursorPos, oldValue, oldSelection) {\r\n    this.value = value;\r\n    this.cursorPos = cursorPos;\r\n    this.oldValue = oldValue;\r\n    this.oldSelection = oldSelection;\r\n\r\n    // double check if left part was changed (autofilling, other non-standard input triggers)\r\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\r\n      --this.oldSelection.start;\r\n    }\r\n  }\r\n\r\n  get startChangePos () {\r\n    return Math.min(this.cursorPos, this.oldSelection.start);\r\n  }\r\n\r\n  get insertedCount () {\r\n    return this.cursorPos - this.startChangePos;\r\n  }\r\n\r\n  get inserted () {\r\n    return this.value.substr(this.startChangePos, this.insertedCount);\r\n  }\r\n\r\n  get removedCount () {\r\n    // Math.max for opposite operation\r\n    return Math.max((this.oldSelection.end - this.startChangePos) ||\r\n      // for Delete\r\n      this.oldValue.length - this.value.length, 0);\r\n  }\r\n\r\n  get removed () {\r\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\r\n  }\r\n\r\n  get head () {\r\n    return this.value.substring(0, this.startChangePos);\r\n  }\r\n\r\n  get tail () {\r\n    this.value.substring(this.startChangePos + this.insertedCount);\r\n  }\r\n\r\n  get removeDirection () {\r\n    return this.removedCount && !this.insertedCount &&\r\n      ((this.oldSelection.end === this.cursorPos) ?\r\n        DIRECTION.RIGHT :\r\n        DIRECTION.LEFT);\r\n  }\r\n}\r\n","import {objectIncludes} from '../core/utils.js';\r\nimport ActionDetails from '../core/action-details.js';\r\nimport MaskedDate from '../masked/date.js';\r\nimport createMask, {maskedClass} from '../masked/factory.js';\r\n\r\n\r\nexport default\r\nclass InputMask {\r\n  constructor (el, opts) {\r\n    this.el = el;\r\n    this.masked = createMask(opts);\r\n\r\n    this._listeners = {};\r\n    this._value = '';\r\n    this._unmaskedValue = '';\r\n\r\n    this._saveSelection = this._saveSelection.bind(this);\r\n    this._onInput = this._onInput.bind(this);\r\n    this._onChange = this._onChange.bind(this);\r\n    this._onDrop = this._onDrop.bind(this);\r\n    this.alignCursor = this.alignCursor.bind(this);\r\n    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\r\n\r\n    this.bindEvents();\r\n\r\n    // refresh\r\n    this.updateValue();\r\n    this._onChange();\r\n  }\r\n\r\n  get mask () { return this.masked.mask; }\r\n  set mask (mask) {\r\n    if (mask == null || mask === this.masked.mask) return;\r\n\r\n    if (this.masked.constructor === maskedClass(mask)) {\r\n      this.masked.mask = mask;\r\n      return;\r\n    }\r\n\r\n    const masked = createMask({mask});\r\n    masked.unmaskedValue = this.masked.unmaskedValue;\r\n    this.masked = masked;\r\n  }\r\n\r\n  get value () {\r\n    return this._value;\r\n  }\r\n\r\n  set value (str) {\r\n    this.masked.value = str;\r\n    this.updateControl();\r\n    this.alignCursor();\r\n  }\r\n\r\n  get unmaskedValue () {\r\n    return this._unmaskedValue;\r\n  }\r\n\r\n  set unmaskedValue (str) {\r\n    this.masked.unmaskedValue = str;\r\n    this.updateControl();\r\n    this.alignCursor();\r\n  }\r\n\r\n  bindEvents () {\r\n    this.el.addEventListener('keydown', this._saveSelection);\r\n    this.el.addEventListener('input', this._onInput);\r\n    this.el.addEventListener('drop', this._onDrop);\r\n    this.el.addEventListener('click', this.alignCursorFriendly);\r\n    this.el.addEventListener('change', this._onChange);\r\n  }\r\n\r\n  unbindEvents () {\r\n    this.el.removeEventListener('keydown', this._saveSelection);\r\n    this.el.removeEventListener('input', this._onInput);\r\n    this.el.removeEventListener('drop', this._onDrop);\r\n    this.el.removeEventListener('click', this.alignCursorFriendly);\r\n    this.el.removeEventListener('change', this._onChange);\r\n  }\r\n\r\n  fireEvent (ev) {\r\n    const listeners = this._listeners[ev] || [];\r\n    listeners.forEach(l => l());\r\n  }\r\n\r\n  get selectionStart () {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionStart;\r\n  }\r\n\r\n  get cursorPos () {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionEnd;\r\n  }\r\n\r\n  set cursorPos (pos) {\r\n    if (this.el !== document.activeElement) return;\r\n\r\n    this.el.setSelectionRange(pos, pos);\r\n    this._saveSelection();\r\n  }\r\n\r\n  _saveSelection (/* ev */) {\r\n    if (this.value !== this.el.value) {\r\n      console.warn('Uncontrolled input change, refresh mask manually!'); // eslint-disable-line no-console\r\n    }\r\n    this._selection = {\r\n      start: this.selectionStart,\r\n      end: this.cursorPos\r\n    };\r\n  }\r\n\r\n  updateValue () {\r\n    this.masked.value = this.el.value;\r\n  }\r\n\r\n  updateControl () {\r\n    const newUnmaskedValue = this.masked.unmaskedValue;\r\n    const newValue = this.masked.value;\r\n    const isChanged = (this.unmaskedValue !== newUnmaskedValue ||\r\n      this.value !== newValue);\r\n\r\n    this._unmaskedValue = newUnmaskedValue;\r\n    this._value = newValue;\r\n\r\n    if (this.el.value !== newValue) this.el.value = newValue;\r\n    if (isChanged) this._fireChangeEvents();\r\n  }\r\n\r\n  updateOptions (opts) {\r\n    opts = Object.assign({}, opts);  // clone\r\n    if (opts.mask === Date && this.masked instanceof MaskedDate) delete opts.mask;\r\n\r\n    // check if changed\r\n    if (objectIncludes(this.masked, opts)) return;\r\n\r\n    this.masked.updateOptions(opts);\r\n    this.updateControl();\r\n  }\r\n\r\n  updateCursor (cursorPos) {\r\n    if (cursorPos == null) return;\r\n    this.cursorPos = cursorPos;\r\n\r\n    // also queue change cursor for mobile browsers\r\n    this._delayUpdateCursor(cursorPos);\r\n  }\r\n\r\n  _delayUpdateCursor (cursorPos) {\r\n    this._abortUpdateCursor();\r\n    this._changingCursorPos = cursorPos;\r\n    this._cursorChanging = setTimeout(() => {\r\n      this.cursorPos = this._changingCursorPos;\r\n      this._abortUpdateCursor();\r\n    }, 10);\r\n  }\r\n\r\n  _fireChangeEvents () {\r\n    this.fireEvent('accept');\r\n    if (this.masked.isComplete) this.fireEvent('complete');\r\n  }\r\n\r\n  _abortUpdateCursor () {\r\n    if (this._cursorChanging) {\r\n      clearTimeout(this._cursorChanging);\r\n      delete this._cursorChanging;\r\n    }\r\n  }\r\n\r\n  alignCursor () {\r\n    this.cursorPos = this.masked.nearestInputPos(this.cursorPos);\r\n  }\r\n\r\n  alignCursorFriendly () {\r\n    if (this.selectionStart !== this.cursorPos) return;\r\n    this.alignCursor();\r\n  }\r\n\r\n  on (ev, handler) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n    return this;\r\n  }\r\n\r\n  off (ev, handler) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    const hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners.splice(hIndex, 1);\r\n    return this;\r\n  }\r\n\r\n  _onInput () {\r\n    this._abortUpdateCursor();\r\n\r\n    const details = new ActionDetails(\r\n      // new state\r\n      this.el.value, this.cursorPos,\r\n      // old state\r\n      this.value, this._selection);\r\n\r\n    const tailPos = details.startChangePos + details.removed.length;\r\n    const tail = this.masked.extractTail(tailPos);\r\n\r\n    const lastInputPos = this.masked.nearestInputPos(details.startChangePos, details.removeDirection);\r\n    this.masked.clear(lastInputPos);\r\n    const insertedCount = this.masked.appendWithTail(details.inserted, tail);\r\n\r\n\r\n    const cursorPos = this.masked.nearestInputPos(\r\n      lastInputPos + insertedCount,\r\n      details.removeDirection);\r\n\r\n    this.updateControl();\r\n    this.updateCursor(cursorPos);\r\n  }\r\n\r\n  _onChange () {\r\n    if (this.value !== this.el.value) {\r\n      this.updateValue();\r\n    }\r\n    this.masked.doCommit();\r\n    this.updateControl();\r\n  }\r\n\r\n  _onDrop (ev) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  destroy () {\r\n    this.unbindEvents();\r\n    this._listeners.length = 0;\r\n  }\r\n}\r\n"],"names":["isString","str","String","conform","res","fallback","indexInDirection","pos","direction","DIRECTION","LEFT","escapeRegExp","replace","objectIncludes","b","a","i","arrA","Array","isArray","arrB","length","keys","Object","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","toString","prototype","hasOwnProperty","call","maskedClass","mask","Error","MaskedRegExp","IMask","MaskedPattern","Masked","MaskedDynamic","Number","MaskedNumber","MaskedDate","Function","MaskedFunction","warn","createMask","opts","assign","EnumGroup","enums","repeat","value","group","some","e","indexOf","unmaskedValue","el","InputMask","_value","_update","DEFAULTS","isInitialized","withValueRefresh","this","bind","m","slice","reset","appendWithTail","doCommit","_unmask","_append","extractInput","raw","cursorPos","fromPos","toPos","tail","flags","oldValueLength","consistentValue","clone","doPrepare","ci","doValidate","input","consistentAppended","appendCount","ch","appended","_appendTail","from","to","fn","_refreshing","unmasked","ret","prepare","validate","commit","val","search","postFormat","_updateRegExps","midInput","mid","allowNegative","end","scale","radix","_numberRegExpInput","_numberRegExp","_mapToRadixRegExp","mapToRadix","map","join","_thousandsSeparatorRegExp","thousandsSeparator","_removeThousandsSeparators","super","extractTail","parts","split","args","removedSeparatorsCount","_insertThousandsSeparators","beforeTailPos","insertedSeparatorsBeforeTailCount","nextPos","valid","test","number","isNaN","min","max","validnum","Math","formatted","normalizeZeros","_normalizeZeros","padFractionalZeros","_padFractionalZeros","match","sign","zeros","num","push","padEnd","numstr","signed","PatternDefinition","_masked","isHollow","isRawInput","type","TYPES","INPUT","optional","PatternGroup","masked","name","offset","mapDefIndexToPos","RangeGroup","maxlen","_from","_to","_maxLength","maxLength","minstr","maxstr","placeholder","_matchFrom","Range","Enum","DEFAULT_PLACEHOLDER","definitions","_updateMask","defs","_charDefs","_groupDefs","pattern","unmaskingBlock","optionalBlock","stopAlign","groups","p","gNames","filter","gName","sort","char","FIXED","unmasking","STOP_CHAR","ESCAPE_CHAR","every","g","forEach","d","isInput","defIndex","isHiddenHollow","hiddenHollowsBefore","di","def","_appendChunks","_appendPlaceholder","mapPosToDefIndex","resolved","skipped","chres","resolve","chunks","fromDefIndex","extractInputChunks","toDefIndex","stopDefIndices","stops","s","stop","maxDefIndex","lazy","initialDefIndex","firstInputIndex","firstFilledInputIndex","firstVisibleHollowIndex","nextdi","nextDef","overflow","groupsByName","Definition","Group","GET_DEFAULT_GROUPS","Y","getFullYear","date","isComplete","isDateExist","format","parse","getDate","padStart","getMonth","day","month","year","currentMasked","_compiledMasks","inputValue","rawInputValue","doDispatch","dispatch","cm","clear","inputs","index","i1","i2","ActionDetails","oldValue","oldSelection","startChangePos","start","substr","insertedCount","removedCount","substring","RIGHT","_listeners","_unmaskedValue","_saveSelection","_onInput","_onChange","_onDrop","alignCursor","alignCursorFriendly","bindEvents","updateValue","constructor","updateControl","addEventListener","removeEventListener","ev","l","_cursorChanging","_changingCursorPos","selectionStart","selectionEnd","document","activeElement","setSelectionRange","_selection","newUnmaskedValue","newValue","isChanged","_fireChangeEvents","updateOptions","_delayUpdateCursor","_abortUpdateCursor","setTimeout","fireEvent","nearestInputPos","handler","hIndex","splice","details","tailPos","removed","lastInputPos","removeDirection","inserted","updateCursor","preventDefault","stopPropagation","unbindEvents","window"],"mappings":"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"}