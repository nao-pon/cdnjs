{"version":3,"sources":["plugin/lzstring.js"],"names":["LZString","f","String","fromCharCode","keyStrBase64","keyStrUriSafe","baseReverseDic","getBaseValue","alphabet","character","i","length","charAt","compressToBase64","input","res","_compress","a","decompressFromBase64","_decompress","index","compressToUTF16","decompressFromUTF16","compressed","charCodeAt","compressToUint8Array","uncompressed","compress","buf","Uint8Array","TotalLen","current_value","decompressFromUint8Array","undefined","decompress","Array","result","forEach","c","push","join","compressToEncodedURIComponent","decompressFromEncodedURIComponent","replace","bitsPerChar","getCharFromInt","value","ii","context_dictionary","context_dictionaryToCreate","context_c","context_wc","context_w","context_enlargeIn","context_dictSize","context_numBits","context_data","context_data_val","context_data_position","Object","prototype","hasOwnProperty","call","Math","pow","resetValue","getNextValue","w","bits","resb","maxpower","power","dictionary","enlargeIn","dictSize","numBits","entry","data","val","position","define","amd","module","exports","angular","factory","global","provide","path","iterate","isObject","isTypeOf","pattern","weight","state","storage","isEnabled","pointer","match","indexOf","demand","on","options","key","dependency","id","source","this"],"mappings":"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","file":"lzstring.js","sourcesContent":["/* global\n\tLZString\n*/\n\n// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.4\nvar LZString = (function() {\n\n    // private property\n    var f = String.fromCharCode;\n    var keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    var keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\n    var baseReverseDic = {};\n\n    function getBaseValue(alphabet, character) {\n        if (!baseReverseDic[alphabet]) {\n            baseReverseDic[alphabet] = {};\n            for (var i = 0; i < alphabet.length; i++) {\n                baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n            }\n        }\n        return baseReverseDic[alphabet][character];\n    }\n\n    var LZString = {\n        compressToBase64: function(input) {\n            if (input == null) return \"\";\n            var res = LZString._compress(input, 6, function(a) {\n                return keyStrBase64.charAt(a);\n            });\n            switch (res.length % 4) { // To produce valid Base64\n                default: // When could this happen ?\n                    case 0:\n                    return res;\n                case 1:\n                        return res + \"===\";\n                case 2:\n                        return res + \"==\";\n                case 3:\n                        return res + \"=\";\n            }\n        },\n\n        decompressFromBase64: function(input) {\n            if (input == null) return \"\";\n            if (input == \"\") return null;\n            return LZString._decompress(input.length, 32, function(index) {\n                return getBaseValue(keyStrBase64, input.charAt(index));\n            });\n        },\n\n        compressToUTF16: function(input) {\n            if (input == null) return \"\";\n            return LZString._compress(input, 15, function(a) {\n                return f(a + 32);\n            }) + \" \";\n        },\n\n        decompressFromUTF16: function(compressed) {\n            if (compressed == null) return \"\";\n            if (compressed == \"\") return null;\n            return LZString._decompress(compressed.length, 16384, function(index) {\n                return compressed.charCodeAt(index) - 32;\n            });\n        },\n\n        //compress into uint8array (UCS-2 big endian format)\n        compressToUint8Array: function(uncompressed) {\n            var compressed = LZString.compress(uncompressed);\n            var buf = new Uint8Array(compressed.length * 2); // 2 bytes per character\n\n            for (var i = 0, TotalLen = compressed.length; i < TotalLen; i++) {\n                var current_value = compressed.charCodeAt(i);\n                buf[i * 2] = current_value >>> 8;\n                buf[i * 2 + 1] = current_value % 256;\n            }\n            return buf;\n        },\n\n        //decompress from uint8array (UCS-2 big endian format)\n        decompressFromUint8Array: function(compressed) {\n            if (compressed === null || compressed === undefined) {\n                return LZString.decompress(compressed);\n            } else {\n                var buf = new Array(compressed.length / 2); // 2 bytes per character\n                for (var i = 0, TotalLen = buf.length; i < TotalLen; i++) {\n                    buf[i] = compressed[i * 2] * 256 + compressed[i * 2 + 1];\n                }\n\n                var result = [];\n                buf.forEach(function(c) {\n                    result.push(f(c));\n                });\n                return LZString.decompress(result.join(''));\n\n            }\n\n        },\n\n\n        //compress into a string that is already URI encoded\n        compressToEncodedURIComponent: function(input) {\n            if (input == null) return \"\";\n            return LZString._compress(input, 6, function(a) {\n                return keyStrUriSafe.charAt(a);\n            });\n        },\n\n        //decompress from an output of compressToEncodedURIComponent\n        decompressFromEncodedURIComponent: function(input) {\n            if (input == null) return \"\";\n            if (input == \"\") return null;\n            input = input.replace(/ /g, \"+\");\n            return LZString._decompress(input.length, 32, function(index) {\n                return getBaseValue(keyStrUriSafe, input.charAt(index));\n            });\n        },\n\n        compress: function(uncompressed) {\n            return LZString._compress(uncompressed, 16, function(a) {\n                return f(a);\n            });\n        },\n        _compress: function(uncompressed, bitsPerChar, getCharFromInt) {\n            if (uncompressed == null) return \"\";\n            var i, value,\n                context_dictionary = {},\n                context_dictionaryToCreate = {},\n                context_c = \"\",\n                context_wc = \"\",\n                context_w = \"\",\n                context_enlargeIn = 2, // Compensate for the first entry which should not count\n                context_dictSize = 3,\n                context_numBits = 2,\n                context_data = [],\n                context_data_val = 0,\n                context_data_position = 0,\n                ii;\n\n            for (ii = 0; ii < uncompressed.length; ii += 1) {\n                context_c = uncompressed.charAt(ii);\n                if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {\n                    context_dictionary[context_c] = context_dictSize++;\n                    context_dictionaryToCreate[context_c] = true;\n                }\n\n                context_wc = context_w + context_c;\n                if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) {\n                    context_w = context_wc;\n                } else {\n                    if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {\n                        if (context_w.charCodeAt(0) < 256) {\n                            for (i = 0; i < context_numBits; i++) {\n                                context_data_val = (context_data_val << 1);\n                                if (context_data_position == bitsPerChar - 1) {\n                                    context_data_position = 0;\n                                    context_data.push(getCharFromInt(context_data_val));\n                                    context_data_val = 0;\n                                } else {\n                                    context_data_position++;\n                                }\n                            }\n                            value = context_w.charCodeAt(0);\n                            for (i = 0; i < 8; i++) {\n                                context_data_val = (context_data_val << 1) | (value & 1);\n                                if (context_data_position == bitsPerChar - 1) {\n                                    context_data_position = 0;\n                                    context_data.push(getCharFromInt(context_data_val));\n                                    context_data_val = 0;\n                                } else {\n                                    context_data_position++;\n                                }\n                                value = value >> 1;\n                            }\n                        } else {\n                            value = 1;\n                            for (i = 0; i < context_numBits; i++) {\n                                context_data_val = (context_data_val << 1) | value;\n                                if (context_data_position == bitsPerChar - 1) {\n                                    context_data_position = 0;\n                                    context_data.push(getCharFromInt(context_data_val));\n                                    context_data_val = 0;\n                                } else {\n                                    context_data_position++;\n                                }\n                                value = 0;\n                            }\n                            value = context_w.charCodeAt(0);\n                            for (i = 0; i < 16; i++) {\n                                context_data_val = (context_data_val << 1) | (value & 1);\n                                if (context_data_position == bitsPerChar - 1) {\n                                    context_data_position = 0;\n                                    context_data.push(getCharFromInt(context_data_val));\n                                    context_data_val = 0;\n                                } else {\n                                    context_data_position++;\n                                }\n                                value = value >> 1;\n                            }\n                        }\n                        context_enlargeIn--;\n                        if (context_enlargeIn == 0) {\n                            context_enlargeIn = Math.pow(2, context_numBits);\n                            context_numBits++;\n                        }\n                        delete context_dictionaryToCreate[context_w];\n                    } else {\n                        value = context_dictionary[context_w];\n                        for (i = 0; i < context_numBits; i++) {\n                            context_data_val = (context_data_val << 1) | (value & 1);\n                            if (context_data_position == bitsPerChar - 1) {\n                                context_data_position = 0;\n                                context_data.push(getCharFromInt(context_data_val));\n                                context_data_val = 0;\n                            } else {\n                                context_data_position++;\n                            }\n                            value = value >> 1;\n                        }\n\n\n                    }\n                    context_enlargeIn--;\n                    if (context_enlargeIn == 0) {\n                        context_enlargeIn = Math.pow(2, context_numBits);\n                        context_numBits++;\n                    }\n                    // Add wc to the dictionary.\n                    context_dictionary[context_wc] = context_dictSize++;\n                    context_w = String(context_c);\n                }\n            }\n\n            // Output the code for w.\n            if (context_w !== \"\") {\n                if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {\n                    if (context_w.charCodeAt(0) < 256) {\n                        for (i = 0; i < context_numBits; i++) {\n                            context_data_val = (context_data_val << 1);\n                            if (context_data_position == bitsPerChar - 1) {\n                                context_data_position = 0;\n                                context_data.push(getCharFromInt(context_data_val));\n                                context_data_val = 0;\n                            } else {\n                                context_data_position++;\n                            }\n                        }\n                        value = context_w.charCodeAt(0);\n                        for (i = 0; i < 8; i++) {\n                            context_data_val = (context_data_val << 1) | (value & 1);\n                            if (context_data_position == bitsPerChar - 1) {\n                                context_data_position = 0;\n                                context_data.push(getCharFromInt(context_data_val));\n                                context_data_val = 0;\n                            } else {\n                                context_data_position++;\n                            }\n                            value = value >> 1;\n                        }\n                    } else {\n                        value = 1;\n                        for (i = 0; i < context_numBits; i++) {\n                            context_data_val = (context_data_val << 1) | value;\n                            if (context_data_position == bitsPerChar - 1) {\n                                context_data_position = 0;\n                                context_data.push(getCharFromInt(context_data_val));\n                                context_data_val = 0;\n                            } else {\n                                context_data_position++;\n                            }\n                            value = 0;\n                        }\n                        value = context_w.charCodeAt(0);\n                        for (i = 0; i < 16; i++) {\n                            context_data_val = (context_data_val << 1) | (value & 1);\n                            if (context_data_position == bitsPerChar - 1) {\n                                context_data_position = 0;\n                                context_data.push(getCharFromInt(context_data_val));\n                                context_data_val = 0;\n                            } else {\n                                context_data_position++;\n                            }\n                            value = value >> 1;\n                        }\n                    }\n                    context_enlargeIn--;\n                    if (context_enlargeIn == 0) {\n                        context_enlargeIn = Math.pow(2, context_numBits);\n                        context_numBits++;\n                    }\n                    delete context_dictionaryToCreate[context_w];\n                } else {\n                    value = context_dictionary[context_w];\n                    for (i = 0; i < context_numBits; i++) {\n                        context_data_val = (context_data_val << 1) | (value & 1);\n                        if (context_data_position == bitsPerChar - 1) {\n                            context_data_position = 0;\n                            context_data.push(getCharFromInt(context_data_val));\n                            context_data_val = 0;\n                        } else {\n                            context_data_position++;\n                        }\n                        value = value >> 1;\n                    }\n\n\n                }\n                context_enlargeIn--;\n                if (context_enlargeIn == 0) {\n                    context_enlargeIn = Math.pow(2, context_numBits);\n                    context_numBits++;\n                }\n            }\n\n            // Mark the end of the stream\n            value = 2;\n            for (i = 0; i < context_numBits; i++) {\n                context_data_val = (context_data_val << 1) | (value & 1);\n                if (context_data_position == bitsPerChar - 1) {\n                    context_data_position = 0;\n                    context_data.push(getCharFromInt(context_data_val));\n                    context_data_val = 0;\n                } else {\n                    context_data_position++;\n                }\n                value = value >> 1;\n            }\n\n            // Flush the last char\n            while (true) {\n                context_data_val = (context_data_val << 1);\n                if (context_data_position == bitsPerChar - 1) {\n                    context_data.push(getCharFromInt(context_data_val));\n                    break;\n                } else context_data_position++;\n            }\n            return context_data.join('');\n        },\n\n        decompress: function(compressed) {\n            if (compressed == null) return \"\";\n            if (compressed == \"\") return null;\n            return LZString._decompress(compressed.length, 32768, function(index) {\n                return compressed.charCodeAt(index);\n            });\n        },\n\n        _decompress: function(length, resetValue, getNextValue) {\n            var dictionary = [],\n                next,\n                enlargeIn = 4,\n                dictSize = 4,\n                numBits = 3,\n                entry = \"\",\n                result = [],\n                i,\n                w,\n                bits, resb, maxpower, power,\n                c,\n                data = {\n                    val: getNextValue(0),\n                    position: resetValue,\n                    index: 1\n                };\n\n            for (i = 0; i < 3; i += 1) {\n                dictionary[i] = i;\n            }\n\n            bits = 0;\n            maxpower = Math.pow(2, 2);\n            power = 1;\n            while (power != maxpower) {\n                resb = data.val & data.position;\n                data.position >>= 1;\n                if (data.position == 0) {\n                    data.position = resetValue;\n                    data.val = getNextValue(data.index++);\n                }\n                bits |= (resb > 0 ? 1 : 0) * power;\n                power <<= 1;\n            }\n\n            switch (next = bits) {\n                case 0:\n                    bits = 0;\n                    maxpower = Math.pow(2, 8);\n                    power = 1;\n                    while (power != maxpower) {\n                        resb = data.val & data.position;\n                        data.position >>= 1;\n                        if (data.position == 0) {\n                            data.position = resetValue;\n                            data.val = getNextValue(data.index++);\n                        }\n                        bits |= (resb > 0 ? 1 : 0) * power;\n                        power <<= 1;\n                    }\n                    c = f(bits);\n                    break;\n                case 1:\n                    bits = 0;\n                    maxpower = Math.pow(2, 16);\n                    power = 1;\n                    while (power != maxpower) {\n                        resb = data.val & data.position;\n                        data.position >>= 1;\n                        if (data.position == 0) {\n                            data.position = resetValue;\n                            data.val = getNextValue(data.index++);\n                        }\n                        bits |= (resb > 0 ? 1 : 0) * power;\n                        power <<= 1;\n                    }\n                    c = f(bits);\n                    break;\n                case 2:\n                    return \"\";\n            }\n            dictionary[3] = c;\n            w = c;\n            result.push(c);\n            while (true) {\n                if (data.index > length) {\n                    return \"\";\n                }\n\n                bits = 0;\n                maxpower = Math.pow(2, numBits);\n                power = 1;\n                while (power != maxpower) {\n                    resb = data.val & data.position;\n                    data.position >>= 1;\n                    if (data.position == 0) {\n                        data.position = resetValue;\n                        data.val = getNextValue(data.index++);\n                    }\n                    bits |= (resb > 0 ? 1 : 0) * power;\n                    power <<= 1;\n                }\n\n                switch (c = bits) {\n                    case 0:\n                        bits = 0;\n                        maxpower = Math.pow(2, 8);\n                        power = 1;\n                        while (power != maxpower) {\n                            resb = data.val & data.position;\n                            data.position >>= 1;\n                            if (data.position == 0) {\n                                data.position = resetValue;\n                                data.val = getNextValue(data.index++);\n                            }\n                            bits |= (resb > 0 ? 1 : 0) * power;\n                            power <<= 1;\n                        }\n\n                        dictionary[dictSize++] = f(bits);\n                        c = dictSize - 1;\n                        enlargeIn--;\n                        break;\n                    case 1:\n                        bits = 0;\n                        maxpower = Math.pow(2, 16);\n                        power = 1;\n                        while (power != maxpower) {\n                            resb = data.val & data.position;\n                            data.position >>= 1;\n                            if (data.position == 0) {\n                                data.position = resetValue;\n                                data.val = getNextValue(data.index++);\n                            }\n                            bits |= (resb > 0 ? 1 : 0) * power;\n                            power <<= 1;\n                        }\n                        dictionary[dictSize++] = f(bits);\n                        c = dictSize - 1;\n                        enlargeIn--;\n                        break;\n                    case 2:\n                        return result.join('');\n                }\n\n                if (enlargeIn == 0) {\n                    enlargeIn = Math.pow(2, numBits);\n                    numBits++;\n                }\n\n                if (dictionary[c]) {\n                    entry = dictionary[c];\n                } else {\n                    if (c === dictSize) {\n                        entry = w + w.charAt(0);\n                    } else {\n                        return null;\n                    }\n                }\n                result.push(entry);\n\n                // Add w+entry[0] to the dictionary.\n                dictionary[dictSize++] = w + entry.charAt(0);\n                enlargeIn--;\n\n                w = entry;\n\n                if (enlargeIn == 0) {\n                    enlargeIn = Math.pow(2, numBits);\n                    numBits++;\n                }\n\n            }\n        }\n    };\n    return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return LZString;\n    });\n} else if (typeof module !== 'undefined' && module != null) {\n    module.exports = LZString\n} else if (typeof angular !== 'undefined' && angular != null) {\n    angular.module('LZString', [])\n        .factory('LZString', function() {\n            return LZString;\n        });\n}\n\n\n(function(global) {\n    'use strict';\n\n    function definition(path, iterate, isObject, isTypeOf) {\n        var pattern = [{\n                pattern: path,\n                weight: path.length,\n                state: false\n            }],\n            storage = {};\n\n        demand\n            .on('postConfigure:' + path, function(options) {\n                if (isObject(options)) {\n                    pattern.length = 0;\n\n                    iterate(options, function(key, value) {\n                        pattern.push({\n                            pattern: key,\n                            weight: key.length,\n                            state: value\n                        });\n                    });\n                } else if (isTypeOf(options, 'boolean')) {\n                    pattern.push({\n                        pattern: '',\n                        weight: 0,\n                        state: options\n                    });\n                }\n            })\n            .on('cacheHit', function(dependency) {\n                if (isEnabled(dependency.path)) {\n                    storage[dependency.id] = true;\n                }\n            })\n            .on('preCache', function(dependency) {\n                if (isEnabled(dependency.path)) {\n                    dependency.source = global.LZString.compressToUTF16(dependency.source);\n                }\n            })\n            .on('preProcess', function(dependency) {\n                if (storage[dependency.id]) {\n                    dependency.source = global.LZString.decompressFromUTF16(dependency.source);\n                }\n            });\n\n        function isEnabled(path) {\n            var i = 0,\n                pointer, match;\n\n            for (;\n                (pointer = pattern[i]); i++) {\n                if (path.indexOf(pointer.pattern) === 0 && (!match || pointer.weight > match.weight)) {\n                    match = pointer;\n                }\n            }\n\n            return match ? match.state : false;\n        }\n\n        return true;\n    }\n\n    provide(['path', '/demand/function/iterate', '/demand/validator/isObject', '/demand/validator/isTypeOf'], definition);\n}(this));"]}