{"version":3,"sources":["handler/css.js"],"names":["document","provide","abstractHandler","functionResolveSourcemaps","target","getElementsByTagName","resolver","createElement","regexMatchUrl","regexMatchImport","regexIsAbsolutePath","regexIsAbsoluteUri","regexMatchType","resolveUrl","url","href","replaceUri","source","match","replacement","test","replace","HandlerCss","prototype","validate","type","onPreRequest","dependency","pathname","slice","length","onPostRequest","base","host","exec","process","element","querySelector","id","setAttribute","appendChild","tagName","styleSheet","cssText","textContent","extends"],"mappings":";CAAC,SAASA,GACN,aAkFAC,SAAS,2BAA4B,sCAhFrC,SAAoBC,EAAiBC,GACjC,IACIC,EAASJ,EAASK,qBAAqB,QAAQ,GAC/CC,EAAWN,EAASO,cAAc,KAClCC,EAAgB,oCAChBC,EAAmB,4BACnBC,EAAsB,OACtBC,EAAqB,yBACrBC,EAAiB,aAErB,SAASC,EAAWC,GAGhB,OAFAR,EAASS,KAAOD,EAETR,EAGX,SAASU,EAAWC,EAAQC,EAAOC,GAK/B,OAJKR,EAAmBS,KAAKF,EAAM,MAC/BD,EAASA,EAAOI,QAAQH,EAAM,GAAIC,IAG/BF,EAGX,SAASK,KAqDT,OAnDAA,EAAWC,WACPC,SAAU,SAASC,GACf,OAAOb,EAAeQ,KAAKK,IAE/BC,aAAc,SAASC,GACnB,IAAIC,EAAWD,EAAWb,IAAIc,SAE9BD,EAAWb,IAAIc,SAhCV,SAgCqBA,EAASC,OAhC9B,OAgC4CC,QAAqBF,EAhCjE,OAgCqFA,GAE9FG,cAAe,SAASJ,GAOpB,IANA,IAIIT,EAJAJ,EAAMD,EAAWc,EAAWb,IAAM,OAClCkB,EAAOlB,EAAIC,KACXkB,EAAO,KAAOnB,EAAImB,KAClBhB,EAASU,EAAWV,OAGhBC,EAAQV,EAAc0B,KAAKjB,IAC/BA,EAASD,EAAWC,EAAQC,EAAO,QAAUL,EAAWH,EAAoBU,KAAKF,EAAM,IAAMe,EAAOf,EAAM,GAAKc,EAAOd,EAAM,IAAIH,KAAO,MAG3I,KAAQG,EAAQT,EAAiByB,KAAKjB,IAClCA,EAASD,EAAWC,EAAQC,EAAO,YAAcL,EAAWH,EAAoBU,KAAKF,EAAM,IAAMe,EAAOf,EAAM,GAAKc,EAAOd,EAAM,IAAIH,KAAO,KAG/IY,EAAWV,OAASd,EAA0BwB,EAAWb,IAAKG,IAElEkB,QAAS,SAASR,GACd,IAAIS,EAAUpC,EAASqC,cAAc,eAAiBV,EAAWW,GAAK,MAEjEF,KACDA,EAAUpC,EAASO,cAAc,UACzBkB,KAAO,WAEfW,EAAQG,aAAa,YAAaZ,EAAWW,IAC7ClC,EAAOoC,YAAYJ,IAGC,UAApBA,EAAQK,UACJL,EAAQM,WACRN,EAAQM,WAAWC,QAAUhB,EAAWV,OAExCmB,EAAQQ,YAAcjB,EAAWV,QAIzChB,QAAQ,WACJ,OAAOmC,MAKZ,IAAId,EAAWuB,QAAQ3C,MAhFtC,CAoFEF","file":"css.js","sourcesContent":["(function(document) {\n    'use strict';\n\n    function definition(abstractHandler, functionResolveSourcemaps) {\n        var suffix = '.css',\n            target = document.getElementsByTagName('head')[0],\n            resolver = document.createElement('a'),\n            regexMatchUrl = /url\\s*\\(\\s*[\"']?(.+?)[\"']?\\s*\\)/gi,\n            regexMatchImport = /@import\\s+[\"'](.+?)[\"']/gi,\n            regexIsAbsolutePath = /^\\//i,\n            regexIsAbsoluteUri = /^data:|http(s?):|\\/\\//i,\n            regexMatchType = /^text\\/css/;\n\n        function resolveUrl(url) {\n            resolver.href = url;\n\n            return resolver;\n        }\n\n        function replaceUri(source, match, replacement) {\n            if (!regexIsAbsoluteUri.test(match[1])) {\n                source = source.replace(match[0], replacement);\n            }\n\n            return source;\n        }\n\n        function HandlerCss() {}\n\n        HandlerCss.prototype = {\n            validate: function(type) {\n                return regexMatchType.test(type);\n            },\n            onPreRequest: function(dependency) {\n                var pathname = dependency.url.pathname;\n\n                dependency.url.pathname = pathname.slice(-suffix.length) !== suffix ? pathname + suffix : pathname;\n            },\n            onPostRequest: function(dependency) {\n                var url = resolveUrl(dependency.url + '/..'),\n                    base = url.href,\n                    host = '//' + url.host,\n                    source = dependency.source,\n                    match;\n\n                while ((match = regexMatchUrl.exec(source))) {\n                    source = replaceUri(source, match, 'url(\"' + resolveUrl(regexIsAbsolutePath.test(match[1]) ? host + match[1] : base + match[1]).href + '\")');\n                }\n\n                while ((match = regexMatchImport.exec(source))) {\n                    source = replaceUri(source, match, '@import \"' + resolveUrl(regexIsAbsolutePath.test(match[1]) ? host + match[1] : base + match[1]).href + '\"');\n                }\n\n                dependency.source = functionResolveSourcemaps(dependency.url, source);\n            },\n            process: function(dependency) {\n                var element = document.querySelector('[demand-id=\"' + dependency.id + '\"]');\n\n                if (!element) {\n                    element = document.createElement('style');\n                    element.type = 'text/css';\n\n                    element.setAttribute('demand-id', dependency.id);\n                    target.appendChild(element);\n                }\n\n                if (element.tagName === 'STYLE') {\n                    if (element.styleSheet) {\n                        element.styleSheet.cssText = dependency.source;\n                    } else {\n                        element.textContent = dependency.source;\n                    }\n                }\n\n                provide(function() {\n                    return element;\n                });\n            }\n        };\n\n        return new(HandlerCss.extends(abstractHandler));\n    }\n\n    provide(['/demand/abstract/handler', '/demand/function/resolveSourcemaps'], definition);\n}(document));"]}