{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///videojs.wavesurfer.min.js","webpack:///webpack/bootstrap 44943580594f1f681626","webpack:///./src/js/videojs.wavesurfer.js","webpack:///./src/js/utils/log.js","webpack:///./src/js/utils/format-time.js","webpack:///./src/js/defaults.js","webpack:///./src/js/tech.js","webpack:///./node_modules/global/window.js","webpack:///(webpack)/buildin/global.js","webpack:///external \"videojs\"","webpack:///external \"WaveSurfer\""],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE_7__","__WEBPACK_EXTERNAL_MODULE_8__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_interopRequireDefault","obj","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","value","writable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","length","descriptor","key","protoProps","staticProps","_log2","_log3","_formatTime","_formatTime2","_defaults","_defaults2","_tech","_tech2","_window","_window2","_video","_video2","_wavesurfer","_wavesurfer2","Plugin","getPlugin","Wavesurfer","_Plugin","player","options","_this","getPrototypeOf","mergeOptions","waveReady","waveFinished","liveMode","debug","toString","msDisplayMax","parseFloat","activeWavesurferPlugin","undefined","options_","plugins","wavesurfer","addClass","src","microphone","onWaveError","one","initialize","bind","tech_","setActivePlayer","bigPlayButton","hide","usingNativeControls_","el_","controls","controlBar","show","style","display","progressControl","currentTimeDisplay","timeDivider","durationDisplay","forEach","element","remainingTimeDisplay","playToggle","on","onPlayToggle","mergedOptions","parseOptions","surfer","onWaveFinish","surferReady","onWaveReady","surferProgress","onWaveProgress","surferSeek","onWaveSeek","setupPlaybackEvents","onVolumeChange","onScreenChange","muted","setVolume","fluid","drawer","wrapper","className","responsiveWave","util","debounce","onResizeChange","addEventListener","startPlayers","surferOpts","rect","getBoundingClientRect","originalWidth","width","originalHeight","height","controlBarHeight","container","waveformHeight","playerHeight","opts","splitChannels","log","loadingSpinner","load","peaks","enable","un","url","_this2","Blob","File","JSON","stringify","loadBlob","Array","isArray","ajaxOptions","responseType","xhr","ajax","data","e","status","handlePlay","active","paused","pause","play","start","handlePause","setCurrentTime","destroy","dispose","volume","format","quality","exportImage","deviceId","_this3","setSinkId","then","result","trigger","catch","err","currentTime","getCurrentTime","isNaN","duration","getDuration","time","Math","min","formattedTime_","contentEl","lastChild","textContent","setDuration","autoplay","_this4","loop","stop","once","removeClass","error","hasClass","isPlaying","_this5","fullscreenDelay","setInterval","isFullscreen","newWidth","newHeight","redrawWaveform","clearInterval","params","createDrawer","drawBuffer","progress","backend","getPlayedPercents","args","logType","VERSION","registerPlugin","registerTech","videojs","warn","formatTime","seconds","guide","floor","h","gm","gh","ms","Infinity","pluginDefaultOptions","_get","receiver","Function","desc","getOwnPropertyDescriptor","parent","Html5","getTech","WavesurferTech","_Html","ready","nativeTextTracks","activePlayer","waveready","playerIsUsingWavesurfer","availablePlugins","getPlugins","usingWavesurferPlugin","usingRecordPlugin","seekTo","rate","setPlaybackRate","isSupported","global","win","window","g","eval"],"mappings":"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","file":"videojs.wavesurfer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"videojs\"), require(\"WaveSurfer\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"VideojsWavesurfer\", [\"videojs\", \"WaveSurfer\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VideojsWavesurfer\"] = factory(require(\"videojs\"), require(\"WaveSurfer\"));\n\telse\n\t\troot[\"VideojsWavesurfer\"] = factory(root[\"videojs\"], root[\"WaveSurfer\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","/*!\n * videojs-wavesurfer\n * @version 2.3.0\n * @see https://github.com/collab-project/videojs-wavesurfer\n * @copyright 2014-2018 Collab\n * @license MIT\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"videojs\"), require(\"WaveSurfer\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"VideojsWavesurfer\", [\"videojs\", \"WaveSurfer\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VideojsWavesurfer\"] = factory(require(\"videojs\"), require(\"WaveSurfer\"));\n\telse\n\t\troot[\"VideojsWavesurfer\"] = factory(root[\"videojs\"], root[\"WaveSurfer\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _log2 = __webpack_require__(1);\n\nvar _log3 = _interopRequireDefault(_log2);\n\nvar _formatTime = __webpack_require__(2);\n\nvar _formatTime2 = _interopRequireDefault(_formatTime);\n\nvar _defaults = __webpack_require__(3);\n\nvar _defaults2 = _interopRequireDefault(_defaults);\n\nvar _tech = __webpack_require__(4);\n\nvar _tech2 = _interopRequireDefault(_tech);\n\nvar _window = __webpack_require__(5);\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _video = __webpack_require__(7);\n\nvar _video2 = _interopRequireDefault(_video);\n\nvar _wavesurfer = __webpack_require__(8);\n\nvar _wavesurfer2 = _interopRequireDefault(_wavesurfer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file videojs.wavesurfer.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The main file for the videojs-wavesurfer project.\nlicense: https://github.com/collab-project/videojs-wavesurfer/blob/master/LICENSE\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar Plugin = _video2.default.getPlugin('plugin');\n\nvar wavesurferClassName = 'vjs-wavedisplay';\n\n/**\n * Draw a waveform for audio and video files in a video.js player.\n *\n * @class Wavesurfer\n * @extends videojs.Plugin\n */\n\nvar Wavesurfer = function (_Plugin) {\n    _inherits(Wavesurfer, _Plugin);\n\n    /**\n     * The constructor function for the class.\n     *\n     * @param {(videojs.Player|Object)} player\n     * @param {Object} options - Player options.\n     */\n    function Wavesurfer(player, options) {\n        _classCallCheck(this, Wavesurfer);\n\n        // parse options\n        var _this = _possibleConstructorReturn(this, (Wavesurfer.__proto__ || Object.getPrototypeOf(Wavesurfer)).call(this, player, options));\n\n        options = _video2.default.mergeOptions(_defaults2.default, options);\n        _this.waveReady = false;\n        _this.waveFinished = false;\n        _this.liveMode = false;\n        _this.debug = options.debug.toString() === 'true';\n        _this.msDisplayMax = parseFloat(options.msDisplayMax);\n\n        // attach this instance to the current player so that the tech can\n        // access it\n        _this.player.activeWavesurferPlugin = _this;\n\n        // check that wavesurfer is initialized in options, and add class to\n        // activate videojs-wavesurfer specific styles\n        if (_this.player.options_.plugins.wavesurfer !== undefined) {\n            _this.player.addClass('videojs-wavesurfer');\n        }\n\n        // microphone plugin\n        if (options.src === 'live') {\n            // check if the wavesurfer.js microphone plugin can be enabled\n            if (_wavesurfer2.default.microphone !== undefined) {\n                // enable audio input from a microphone\n                _this.liveMode = true;\n                _this.waveReady = true;\n            } else {\n                _this.onWaveError('Could not find wavesurfer.js ' + 'microphone plugin!');\n                return _possibleConstructorReturn(_this);\n            }\n        }\n\n        // wait until player ui is ready\n        _this.player.one('ready', _this.initialize.bind(_this));\n        return _this;\n    }\n\n    /**\n     * Player UI is ready: customize controls.\n     */\n\n\n    _createClass(Wavesurfer, [{\n        key: 'initialize',\n        value: function initialize() {\n            // setup tech\n            this.player.tech_.setActivePlayer(this.player);\n\n            // hide big play button\n            this.player.bigPlayButton.hide();\n\n            // the native controls don't work for this UI so disable\n            // them no matter what\n            if (this.player.usingNativeControls_ === true) {\n                if (this.player.tech_.el_ !== undefined) {\n                    this.player.tech_.el_.controls = false;\n                }\n            }\n\n            // controls\n            if (this.player.options_.controls === true) {\n                // make sure controlBar is showing\n                this.player.controlBar.show();\n                this.player.controlBar.el_.style.display = 'flex';\n\n                // progress control isn't used by this plugin\n                this.player.controlBar.progressControl.hide();\n\n                // make sure time displays are visible\n                var uiElements = [this.player.controlBar.currentTimeDisplay, this.player.controlBar.timeDivider, this.player.controlBar.durationDisplay];\n                uiElements.forEach(function (element) {\n                    // ignore and show when essential elements have been disabled\n                    // by user\n                    if (element !== undefined) {\n                        element.el_.style.display = 'block';\n                        element.show();\n                    }\n                });\n                if (this.player.controlBar.remainingTimeDisplay !== undefined) {\n                    this.player.controlBar.remainingTimeDisplay.hide();\n                }\n\n                // handle play toggle interaction\n                this.player.controlBar.playToggle.on(['tap', 'click'], this.onPlayToggle.bind(this));\n\n                // disable play button until waveform is ready\n                // (except when in live mode)\n                if (!this.liveMode) {\n                    this.player.controlBar.playToggle.hide();\n                }\n            }\n\n            // wavesurfer.js setup\n            var mergedOptions = this.parseOptions(this.player.options_.plugins.wavesurfer);\n            this.surfer = _wavesurfer2.default.create(mergedOptions);\n            this.surfer.on('error', this.onWaveError.bind(this));\n            this.surfer.on('finish', this.onWaveFinish.bind(this));\n            if (this.liveMode === true) {\n                // listen for wavesurfer.js microphone plugin events\n                this.surfer.microphone.on('deviceError', this.onWaveError.bind(this));\n            }\n            this.surferReady = this.onWaveReady.bind(this);\n            this.surferProgress = this.onWaveProgress.bind(this);\n            this.surferSeek = this.onWaveSeek.bind(this);\n\n            // only listen to these wavesurfer.js playback events when not\n            // in live mode\n            if (!this.liveMode) {\n                this.setupPlaybackEvents(true);\n            }\n\n            // video.js player events\n            this.player.on('volumechange', this.onVolumeChange.bind(this));\n            this.player.on('fullscreenchange', this.onScreenChange.bind(this));\n\n            // make sure volume is muted when requested\n            if (this.player.muted()) {\n                this.setVolume(0);\n            }\n\n            // video.js fluid option\n            if (this.player.options_.fluid === true) {\n                // give wave element a classname so it can be styled\n                this.surfer.drawer.wrapper.className = wavesurferClassName;\n                // listen for window resize events\n                this.responsiveWave = _wavesurfer2.default.util.debounce(this.onResizeChange.bind(this), 150);\n                _window2.default.addEventListener('resize', this.responsiveWave);\n            }\n\n            // kick things off\n            this.startPlayers();\n        }\n\n        /**\n         * Initializes the waveform options.\n         *\n         * @param {Object} surferOpts - Plugin options.\n         * @private\n         */\n\n    }, {\n        key: 'parseOptions',\n        value: function parseOptions(surferOpts) {\n            var rect = this.player.el_.getBoundingClientRect();\n            this.originalWidth = this.player.options_.width || rect.width;\n            this.originalHeight = this.player.options_.height || rect.height;\n\n            // controlbar\n            var controlBarHeight = this.player.controlBar.height();\n            if (this.player.options_.controls === true && controlBarHeight === 0) {\n                // the dimensions of the controlbar are not known yet, but we\n                // need it now, so we can calculate the height of the waveform.\n                // The default height is 30px, so use that instead.\n                controlBarHeight = 30;\n            }\n\n            // set waveform element and dimensions\n            // Set the container to player's container if \"container\" option is\n            // not provided. If a waveform needs to be appended to your custom\n            // element, then use below option. For example:\n            // container: document.querySelector(\"#vjs-waveform\")\n            if (surferOpts.container === undefined) {\n                surferOpts.container = this.player.el_;\n            }\n\n            // set the height of generated waveform if user has provided height\n            // from options. If height of waveform need to be customized then use\n            // option below. For example: waveformHeight: 30\n            if (surferOpts.waveformHeight === undefined) {\n                var playerHeight = rect.height;\n                surferOpts.height = playerHeight - controlBarHeight;\n            } else {\n                surferOpts.height = opts.waveformHeight;\n            }\n\n            // split channels\n            if (surferOpts.splitChannels && surferOpts.splitChannels === true) {\n                surferOpts.height /= 2;\n            }\n\n            // enable wavesurfer.js microphone plugin\n            if (this.liveMode === true) {\n                surferOpts.plugins = [_wavesurfer2.default.microphone.create(surferOpts)];\n                this.log('wavesurfer.js microphone plugin enabled.');\n            }\n\n            return surferOpts;\n        }\n\n        /**\n         * Start the players.\n         * @private\n         */\n\n    }, {\n        key: 'startPlayers',\n        value: function startPlayers() {\n            var options = this.player.options_.plugins.wavesurfer;\n            if (options.src !== undefined) {\n                if (this.surfer.microphone === undefined) {\n                    // show loading spinner\n                    this.player.loadingSpinner.show();\n\n                    // start loading file\n                    this.load(options.src, options.peaks);\n                } else {\n                    // hide loading spinner\n                    this.player.loadingSpinner.hide();\n\n                    // connect microphone input to our waveform\n                    options.wavesurfer = this.surfer;\n                }\n            } else {\n                // no valid src found, hide loading spinner\n                this.player.loadingSpinner.hide();\n            }\n        }\n\n        /**\n         * Starts or stops listening to events related to audio-playback.\n         *\n         * @param {boolean} enable - Start or stop listening to playback\n         *     related events.\n         * @private\n         */\n\n    }, {\n        key: 'setupPlaybackEvents',\n        value: function setupPlaybackEvents(enable) {\n            if (enable === false) {\n                this.surfer.un('ready', this.surferReady);\n                this.surfer.un('audioprocess', this.surferProgress);\n                this.surfer.un('seek', this.surferSeek);\n            } else if (enable === true) {\n                this.surfer.on('ready', this.surferReady);\n                this.surfer.on('audioprocess', this.surferProgress);\n                this.surfer.on('seek', this.surferSeek);\n            }\n        }\n\n        /**\n         * Start loading waveform data.\n         *\n         * @param {string|blob|file} url - Either the URL of the audio file,\n         *     a Blob or a File object.\n         * @param {string|?number[]|number[][]} peaks - Either the URL of peaks\n         *     data for the audio file, or an array with peaks data.\n         */\n\n    }, {\n        key: 'load',\n        value: function load(url, peaks) {\n            var _this2 = this;\n\n            if (url instanceof Blob || url instanceof File) {\n                this.log('Loading object: ' + JSON.stringify(url));\n                this.surfer.loadBlob(url);\n            } else {\n                // load peak data from file\n                if (peaks !== undefined) {\n                    if (Array.isArray(peaks)) {\n                        // use supplied peaks data\n                        this.log('Loading URL: ' + url);\n                        this.surfer.load(url, peaks);\n                    } else {\n                        // load peak data from file\n                        var ajaxOptions = {\n                            url: peaks,\n                            responseType: 'json'\n                        };\n                        // supply xhr options, if any\n                        if (this.player.options_.plugins.wavesurfer.xhr !== undefined) {\n                            ajaxOptions.xhr = this.player.options_.plugins.wavesurfer.xhr;\n                        }\n                        var ajax = _wavesurfer2.default.util.ajax(ajaxOptions);\n\n                        ajax.on('success', function (data, e) {\n                            _this2.log('Loading URL: ' + url + '\\nLoading Peak Data URL: ' + peaks);\n                            _this2.surfer.load(url, data.data);\n                        });\n                        ajax.on('error', function (e) {\n                            _this2.log('Unable to retrieve peak data from ' + peaks + '. Status code: ' + e.target.status, 'warn');\n                            _this2.log('Loading URL: ' + url);\n                            _this2.surfer.load(url);\n                        });\n                    }\n                } else {\n                    // no peaks\n                    this.log('Loading URL: ' + url);\n                    this.surfer.load(url);\n                }\n            }\n        }\n\n        /**\n         * Start/resume playback or microphone.\n         */\n\n    }, {\n        key: 'play',\n        value: function play() {\n            // show pause button\n            this.player.controlBar.playToggle.handlePlay();\n\n            if (this.liveMode) {\n                // start/resume microphone visualization\n                if (!this.surfer.microphone.active) {\n                    this.log('Start microphone');\n                    this.surfer.microphone.start();\n                } else {\n                    // toggle paused\n                    var paused = !this.surfer.microphone.paused;\n\n                    if (paused) {\n                        this.pause();\n                    } else {\n                        this.log('Resume microphone');\n                        this.surfer.microphone.play();\n                    }\n                }\n            } else {\n                this.log('Start playback');\n\n                // put video.js player UI in playback mode\n                this.player.play();\n\n                // start surfer playback\n                this.surfer.play();\n            }\n        }\n\n        /**\n         * Pauses playback or microphone visualization.\n         */\n\n    }, {\n        key: 'pause',\n        value: function pause() {\n            // show play button\n            this.player.controlBar.playToggle.handlePause();\n\n            if (this.liveMode) {\n                // pause microphone visualization\n                this.log('Pause microphone');\n                this.surfer.microphone.pause();\n            } else {\n                // pause playback\n                this.log('Pause playback');\n\n                if (!this.waveFinished) {\n                    // pause wavesurfer playback\n                    this.surfer.pause();\n                } else {\n                    this.waveFinished = false;\n                }\n\n                this.setCurrentTime();\n            }\n        }\n\n        /**\n         * @private\n         */\n\n    }, {\n        key: 'dispose',\n        value: function dispose() {\n            if (this.surfer) {\n                if (this.liveMode && this.surfer.microphone) {\n                    // destroy microphone plugin\n                    this.surfer.microphone.destroy();\n                    this.log('Destroyed microphone plugin');\n                }\n                // destroy wavesurfer instance\n                this.surfer.destroy();\n            }\n            this.log('Destroyed plugin');\n        }\n\n        /**\n         * Remove the player and waveform.\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            this.player.dispose();\n        }\n\n        /**\n         * Set the volume level.\n         *\n         * @param {number} volume - The new volume level.\n         */\n\n    }, {\n        key: 'setVolume',\n        value: function setVolume(volume) {\n            if (volume !== undefined) {\n                this.log('Changing volume to: ' + volume);\n\n                // update player volume\n                this.player.volume(volume);\n            }\n        }\n\n        /**\n         * Save waveform image as data URI.\n         *\n         * The default format is 'image/png'. Other supported types are\n         * 'image/jpeg' and 'image/webp'.\n         *\n         * @param {string} [format=image/png] - String indicating the image format.\n         * @param {number} [quality=1] - Number between 0 and 1 indicating image\n         *     quality if the requested type is 'image/jpeg' or 'image/webp'.\n         * @returns {string} The data URI of the image data.\n         */\n\n    }, {\n        key: 'exportImage',\n        value: function exportImage(format, quality) {\n            return this.surfer.exportImage(format, quality);\n        }\n\n        /**\n         * Change the audio output device.\n         *\n         * @param {string} sinkId - Id of audio output device.\n         */\n\n    }, {\n        key: 'setAudioOutput',\n        value: function setAudioOutput(deviceId) {\n            var _this3 = this;\n\n            if (deviceId) {\n                this.surfer.setSinkId(deviceId).then(function (result) {\n                    // notify listeners\n                    _this3.player.trigger('audioOutputReady');\n                }).catch(function (err) {\n                    // notify listeners\n                    _this3.player.trigger('error', err);\n\n                    _this3.log(err, 'error');\n                });\n            }\n        }\n\n        /**\n         * Get the current time (in seconds) of the stream during playback.\n         *\n         * Returns 0 if no stream is available (yet).\n         */\n\n    }, {\n        key: 'getCurrentTime',\n        value: function getCurrentTime() {\n            var currentTime = this.surfer.getCurrentTime();\n            currentTime = isNaN(currentTime) ? 0 : currentTime;\n\n            return currentTime;\n        }\n\n        /**\n         * Updates the player's element displaying the current time.\n         *\n         * @param {number} [currentTime] - Current position of the playhead\n         *     (in seconds).\n         * @param {number} [duration] - Duration of the waveform (in seconds).\n         * @private\n         */\n\n    }, {\n        key: 'setCurrentTime',\n        value: function setCurrentTime(currentTime, duration) {\n            // emit the timeupdate event so that the tech knows about the time change\n            this.trigger('timeupdate');\n\n            if (currentTime === undefined) {\n                currentTime = this.surfer.getCurrentTime();\n            }\n\n            if (duration === undefined) {\n                duration = this.surfer.getDuration();\n            }\n\n            currentTime = isNaN(currentTime) ? 0 : currentTime;\n            duration = isNaN(duration) ? 0 : duration;\n            var time = Math.min(currentTime, duration);\n\n            // update current time display component\n            this.player.controlBar.currentTimeDisplay.formattedTime_ = this.player.controlBar.currentTimeDisplay.contentEl().lastChild.textContent = (0, _formatTime2.default)(time, duration, this.msDisplayMax);\n        }\n\n        /**\n         * Get the duration of the stream in seconds.\n         *\n         * Returns 0 if no stream is available (yet).\n         */\n\n    }, {\n        key: 'getDuration',\n        value: function getDuration() {\n            var duration = this.surfer.getDuration();\n            duration = isNaN(duration) ? 0 : duration;\n\n            return duration;\n        }\n\n        /**\n         * Updates the player's element displaying the duration time.\n         *\n         * @param {number} [duration] - Duration of the waveform (in seconds).\n         * @private\n         */\n\n    }, {\n        key: 'setDuration',\n        value: function setDuration(duration) {\n            if (duration === undefined) {\n                duration = this.surfer.getDuration();\n            }\n            duration = isNaN(duration) ? 0 : duration;\n\n            // update duration display component\n            this.player.controlBar.durationDisplay.formattedTime_ = this.player.controlBar.durationDisplay.contentEl().lastChild.textContent = (0, _formatTime2.default)(duration, duration, this.msDisplayMax);\n        }\n\n        /**\n         * Audio is loaded, decoded and the waveform is drawn.\n         *\n         * @fires waveReady\n         * @private\n         */\n\n    }, {\n        key: 'onWaveReady',\n        value: function onWaveReady() {\n            this.waveReady = true;\n            this.waveFinished = false;\n            this.liveMode = false;\n\n            this.log('Waveform is ready');\n            this.player.trigger('waveReady');\n\n            // update time display\n            this.setCurrentTime();\n            this.setDuration();\n\n            // enable and show play button\n            this.player.controlBar.playToggle.show();\n\n            // hide loading spinner\n            this.player.loadingSpinner.hide();\n\n            // auto-play when ready (if enabled)\n            if (this.player.options_.autoplay === true) {\n                this.play();\n            }\n        }\n\n        /**\n         * Fires when audio playback completed.\n         *\n         * @fires playbackFinish\n         * @private\n         */\n\n    }, {\n        key: 'onWaveFinish',\n        value: function onWaveFinish() {\n            var _this4 = this;\n\n            this.log('Finished playback');\n\n            // notify listeners\n            this.player.trigger('playbackFinish');\n\n            // check if loop is enabled\n            if (this.player.options_.loop === true) {\n                // reset waveform\n                this.surfer.stop();\n                this.play();\n            } else {\n                // finished\n                this.waveFinished = true;\n\n                // pause player\n                this.pause();\n\n                // show the replay state of play toggle\n                this.player.trigger('ended');\n\n                // this gets called once after the clip has ended and the user\n                // seeks so that we can change the replay button back to a play\n                // button\n                this.surfer.once('seek', function () {\n                    _this4.player.controlBar.playToggle.removeClass('vjs-ended');\n                    _this4.player.trigger('pause');\n                });\n            }\n        }\n\n        /**\n         * Fires continuously during audio playback.\n         *\n         * @param {number} time - Current time/location of the playhead.\n         * @private\n         */\n\n    }, {\n        key: 'onWaveProgress',\n        value: function onWaveProgress(time) {\n            this.setCurrentTime();\n        }\n\n        /**\n         * Fires during seeking of the waveform.\n         * @private\n         */\n\n    }, {\n        key: 'onWaveSeek',\n        value: function onWaveSeek() {\n            this.setCurrentTime();\n        }\n\n        /**\n         * Waveform error.\n         *\n         * @param {string} error - The wavesurfer error.\n         * @private\n         */\n\n    }, {\n        key: 'onWaveError',\n        value: function onWaveError(error) {\n            // notify listeners\n            this.player.trigger('error', error);\n\n            this.log(error, 'error');\n        }\n\n        /**\n         * Fired when the play toggle is clicked.\n         * @private\n         */\n\n    }, {\n        key: 'onPlayToggle',\n        value: function onPlayToggle() {\n            // workaround for video.js 6.3.1 and newer\n            if (this.player.controlBar.playToggle.hasClass('vjs-ended')) {\n                this.player.controlBar.playToggle.removeClass('vjs-ended');\n            }\n            if (this.surfer.isPlaying()) {\n                this.pause();\n            } else {\n                this.play();\n            }\n        }\n\n        /**\n         * Fired when the volume in the video.js player changes.\n         * @private\n         */\n\n    }, {\n        key: 'onVolumeChange',\n        value: function onVolumeChange() {\n            var volume = this.player.volume();\n            if (this.player.muted()) {\n                // muted volume\n                volume = 0;\n            }\n\n            // update wavesurfer.js volume\n            this.surfer.setVolume(volume);\n        }\n\n        /**\n         * Fired when the video.js player switches in or out of fullscreen mode.\n         * @private\n         */\n\n    }, {\n        key: 'onScreenChange',\n        value: function onScreenChange() {\n            var _this5 = this;\n\n            // execute with tiny delay so the player element completes\n            // rendering and correct dimensions are reported\n            var fullscreenDelay = this.player.setInterval(function () {\n                var isFullscreen = _this5.player.isFullscreen();\n                var newWidth = void 0,\n                    newHeight = void 0;\n                if (!isFullscreen) {\n                    // restore original dimensions\n                    newWidth = _this5.originalWidth;\n                    newHeight = _this5.originalHeight;\n                }\n\n                if (_this5.waveReady) {\n                    if (_this5.liveMode && !_this5.surfer.microphone.active) {\n                        // we're in live mode but the microphone hasn't been\n                        // started yet\n                        return;\n                    }\n                    // redraw\n                    _this5.redrawWaveform(newWidth, newHeight);\n                }\n\n                // stop fullscreenDelay interval\n                _this5.player.clearInterval(fullscreenDelay);\n            }, 100);\n        }\n\n        /**\n         * Fired when the video.js player is resized.\n         *\n         * @private\n         */\n\n    }, {\n        key: 'onResizeChange',\n        value: function onResizeChange() {\n            if (this.surfer !== undefined) {\n                // redraw waveform\n                this.redrawWaveform();\n            }\n        }\n\n        /**\n         * Redraw waveform.\n         *\n         * @param {number} [newWidth] - New width for the waveform.\n         * @param {number} [newHeight] - New height for the waveform.\n         * @private\n         */\n\n    }, {\n        key: 'redrawWaveform',\n        value: function redrawWaveform(newWidth, newHeight) {\n            var rect = this.player.el_.getBoundingClientRect();\n            if (newWidth === undefined) {\n                // get player width\n                newWidth = rect.width;\n            }\n            if (newHeight === undefined) {\n                // get player height\n                newHeight = rect.height;\n            }\n\n            // destroy old drawing\n            this.surfer.drawer.destroy();\n\n            // set new dimensions\n            this.surfer.params.width = newWidth;\n            this.surfer.params.height = newHeight - this.player.controlBar.height();\n\n            // redraw waveform\n            this.surfer.createDrawer();\n            this.surfer.drawer.wrapper.className = wavesurferClassName;\n            this.surfer.drawBuffer();\n\n            // make sure playhead is restored at right position\n            this.surfer.drawer.progress(this.surfer.backend.getPlayedPercents());\n        }\n\n        /**\n         * @private\n         */\n\n    }, {\n        key: 'log',\n        value: function log(args, logType) {\n            (0, _log3.default)(args, logType, this.debug);\n        }\n    }]);\n\n    return Wavesurfer;\n}(Plugin);\n\n// version nr is injected during build\n\n\nWavesurfer.VERSION = \"2.3.0\";\n\n// register plugin\n_video2.default.Wavesurfer = Wavesurfer;\n_video2.default.registerPlugin('wavesurfer', Wavesurfer);\n\n// register the WavesurferTech as 'Html5' to override the default html5 tech.\n// If we register it as anything other then 'Html5', the <audio> element will\n// be removed by VJS and caption tracks will be lost in the Safari browser.\n_video2.default.registerTech('Html5', _tech2.default);\n\nmodule.exports = {\n    Wavesurfer: Wavesurfer\n};\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * @file log.js\n * @since 2.0.0\n */\n\nvar ERROR = 'error';\nvar WARN = 'warn';\n\n/**\n * Log message (if the debug option is enabled).\n */\nvar log = function log(args, logType, debug) {\n    if (debug === true) {\n        if (logType === ERROR) {\n            videojs.log.error(args);\n        } else if (logType === WARN) {\n            videojs.log.warn(args);\n        } else {\n            videojs.log(args);\n        }\n    }\n};\n\nexports.default = log;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * @file format-time.js\n * @since 2.0.0\n */\n\n/**\n * Format seconds as a time string, H:MM:SS, M:SS or M:SS:MMM.\n *\n * Supplying a guide (in seconds) will force a number of leading zeros\n * to cover the length of the guide.\n *\n * @param {number} seconds - Number of seconds to be turned into a\n *     string.\n * @param {number} guide - Number (in seconds) to model the string\n *     after.\n * @param {number} msDisplayMax - Number (in milliseconds) to model the string\n *     after.\n * @return {string} Time formatted as H:MM:SS, M:SS or M:SS:MMM, e.g.\n *     0:00:12.\n * @private\n */\nvar formatTime = function formatTime(seconds, guide, msDisplayMax) {\n    // Default to using seconds as guide\n    seconds = seconds < 0 ? 0 : seconds;\n    guide = guide || seconds;\n    var s = Math.floor(seconds % 60),\n        m = Math.floor(seconds / 60 % 60),\n        h = Math.floor(seconds / 3600),\n        gm = Math.floor(guide / 60 % 60),\n        gh = Math.floor(guide / 3600),\n        ms = Math.floor((seconds - s) * 1000);\n\n    // handle invalid times\n    if (isNaN(seconds) || seconds === Infinity) {\n        // '-' is false for all relational operators (e.g. <, >=) so this\n        // setting will add the minimum number of fields specified by the\n        // guide\n        h = m = s = ms = '-';\n    }\n\n    // Check if we need to show milliseconds\n    if (guide > 0 && guide < msDisplayMax) {\n        if (ms < 100) {\n            if (ms < 10) {\n                ms = '00' + ms;\n            } else {\n                ms = '0' + ms;\n            }\n        }\n        ms = ':' + ms;\n    } else {\n        ms = '';\n    }\n\n    // Check if we need to show hours\n    h = h > 0 || gh > 0 ? h + ':' : '';\n\n    // If hours are showing, we may need to add a leading zero.\n    // Always show at least one digit of minutes.\n    m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';\n\n    // Check if leading zero is need for seconds\n    s = s < 10 ? '0' + s : s;\n\n    return h + m + s + ms;\n};\n\nexports.default = formatTime;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * @file defaults.js\n * @since 2.0.0\n */\n\n// plugin defaults\nvar pluginDefaultOptions = {\n    // Display console log messages.\n    debug: false,\n    // msDisplayMax indicates the number of seconds that is\n    // considered the boundary value for displaying milliseconds\n    // in the time controls. An audio clip with a total length of\n    // 2 seconds and a msDisplayMax of 3 will use the format\n    // M:SS:MMM. Clips longer than msDisplayMax will be displayed\n    // as M:SS or HH:MM:SS.\n    msDisplayMax: 3\n};\n\nexports.default = pluginDefaultOptions;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @file tech.js\n * @since 2.1.0\n */\n\nvar Html5 = videojs.getTech('Html5');\n\nvar WavesurferTech = function (_Html) {\n    _inherits(WavesurferTech, _Html);\n\n    /**\n     * Create an instance of this Tech.\n     *\n     * @param {Object} [options]\n     *        The key/value store of player options.\n     *\n     * @param {Component~ReadyCallback} ready\n     *        Callback function to call when the `Flash` Tech is ready.\n     */\n    function WavesurferTech(options, ready) {\n        _classCallCheck(this, WavesurferTech);\n\n        // never allow for native text tracks, because this isn't actually\n        // HTML5 audio. Native tracks fail because we are using wavesurfer\n        options.nativeTextTracks = false;\n\n        return _possibleConstructorReturn(this, (WavesurferTech.__proto__ || Object.getPrototypeOf(WavesurferTech)).call(this, options, ready));\n    }\n\n    _createClass(WavesurferTech, [{\n        key: 'setActivePlayer',\n        value: function setActivePlayer(player) {\n            var _this2 = this;\n\n            // we need the player instance so that we can access the current\n            // wavesurfer plugin attached to that player\n            this.activePlayer = player;\n            this.waveready = false;\n\n            // track when wavesurfer is fully initialized (ready)\n            this.activePlayer.on('waveReady', function () {\n                _this2.waveready = true;\n            });\n\n            if (!this.playerIsUsingWavesurfer()) {\n                // the plugin hasn't been initialized for this player, so it\n                // likely doesn't need our html5 tech modifications\n                return;\n            }\n\n            // proxy timeupdate events so that the tech emits them too. This will\n            // allow the rest of videoJS to work (including text tracks)\n            this.activePlayer.activeWavesurferPlugin.on('timeupdate', function () {\n                _this2.trigger('timeupdate');\n            });\n        }\n\n        /**\n         * Determine whether or not the player is trying use the wavesurfer plugin\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'playerIsUsingWavesurfer',\n        value: function playerIsUsingWavesurfer() {\n            var availablePlugins = videojs.getPlugins();\n            var usingWavesurferPlugin = 'wavesurfer' in availablePlugins;\n            var usingRecordPlugin = 'record' in availablePlugins;\n\n            return usingWavesurferPlugin && !usingRecordPlugin;\n        }\n\n        /**\n         * Start playback.\n         */\n\n    }, {\n        key: 'play',\n        value: function play() {\n            if (!this.playerIsUsingWavesurfer()) {\n                // fall back to html5 tech functionality\n                return _get(WavesurferTech.prototype.__proto__ || Object.getPrototypeOf(WavesurferTech.prototype), 'play', this).call(this);\n            }\n\n            return this.activePlayer.activeWavesurferPlugin.play();\n        }\n\n        /**\n         * Pause playback.\n         */\n\n    }, {\n        key: 'pause',\n        value: function pause() {\n            if (!this.playerIsUsingWavesurfer()) {\n                //fall back to html5 tech functionality\n                return _get(WavesurferTech.prototype.__proto__ || Object.getPrototypeOf(WavesurferTech.prototype), 'pause', this).call(this);\n            }\n\n            return this.activePlayer.activeWavesurferPlugin.pause();\n        }\n\n        /**\n         * Get the current time\n         * @return {number}\n         */\n\n    }, {\n        key: 'currentTime',\n        value: function currentTime() {\n            if (!this.playerIsUsingWavesurfer()) {\n                // fall back to html5 tech functionality\n                return _get(WavesurferTech.prototype.__proto__ || Object.getPrototypeOf(WavesurferTech.prototype), 'currentTime', this).call(this);\n            }\n\n            if (!this.waveready) {\n                return 0;\n            }\n\n            return this.activePlayer.activeWavesurferPlugin.getCurrentTime();\n        }\n\n        /**\n         * Get the current duration\n         *\n         * @return {number}\n         *         The duration of the media or 0 if there is no duration.\n         */\n\n    }, {\n        key: 'duration',\n        value: function duration() {\n            if (!this.playerIsUsingWavesurfer()) {\n                // fall back to html5 tech functionality\n                return _get(WavesurferTech.prototype.__proto__ || Object.getPrototypeOf(WavesurferTech.prototype), 'duration', this).call(this);\n            }\n\n            if (!this.waveready) {\n                return 0;\n            }\n\n            return this.activePlayer.activeWavesurferPlugin.getDuration();\n        }\n\n        /**\n         * Set the current time\n         *\n         * @since 2.1.1\n         * @param {number} time\n         * @returns {*}\n         */\n\n    }, {\n        key: 'setCurrentTime',\n        value: function setCurrentTime(time) {\n            if (!this.playerIsUsingWavesurfer()) {\n                // fall back to html5 tech functionality\n                return _get(WavesurferTech.prototype.__proto__ || Object.getPrototypeOf(WavesurferTech.prototype), 'currentTime', this).call(this, time);\n            }\n\n            if (!this.waveready) {\n                return 0;\n            }\n\n            return this.activePlayer.activeWavesurferPlugin.surfer.seekTo(time / this.activePlayer.activeWavesurferPlugin.surfer.getDuration());\n        }\n\n        /**\n         * Sets the current playback rate. A playback rate of\n         * 1.0 represents normal speed and 0.5 would indicate half-speed\n         * playback, for instance.\n         *\n         * @since 2.1.1\n         * @param {number} [rate]\n         *       New playback rate to set.\n         *\n         * @return {number}\n         *         The current playback rate when getting or 1.0\n         */\n\n    }, {\n        key: 'setPlaybackRate',\n        value: function setPlaybackRate(rate) {\n            if (this.playerIsUsingWavesurfer()) {\n                this.activePlayer.activeWavesurferPlugin.surfer.setPlaybackRate(rate);\n            }\n\n            return _get(WavesurferTech.prototype.__proto__ || Object.getPrototypeOf(WavesurferTech.prototype), 'setPlaybackRate', this).call(this, rate);\n        }\n    }]);\n\n    return WavesurferTech;\n}(Html5);\n\nWavesurferTech.isSupported = function () {\n    return true;\n};\n\nexports.default = WavesurferTech;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// videojs.wavesurfer.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 44943580594f1f681626","/**\n * @file videojs.wavesurfer.js\n *\n * The main file for the videojs-wavesurfer project.\n * MIT license: https://github.com/collab-project/videojs-wavesurfer/blob/master/LICENSE\n */\n\nimport log from './utils/log';\nimport formatTime from './utils/format-time';\nimport pluginDefaultOptions from './defaults';\nimport WavesurferTech from './tech';\nimport window from 'global/window';\n\nimport videojs from 'video.js';\nimport WaveSurfer from 'wavesurfer.js';\n\nconst Plugin = videojs.getPlugin('plugin');\n\nconst wavesurferClassName = 'vjs-wavedisplay';\n\n/**\n * Draw a waveform for audio and video files in a video.js player.\n *\n * @class Wavesurfer\n * @extends videojs.Plugin\n */\nclass Wavesurfer extends Plugin {\n    /**\n     * The constructor function for the class.\n     *\n     * @param {(videojs.Player|Object)} player\n     * @param {Object} options - Player options.\n     */\n    constructor(player, options) {\n        super(player, options);\n\n        // parse options\n        options = videojs.mergeOptions(pluginDefaultOptions, options);\n        this.waveReady = false;\n        this.waveFinished = false;\n        this.liveMode = false;\n        this.debug = (options.debug.toString() === 'true');\n        this.msDisplayMax = parseFloat(options.msDisplayMax);\n\n        // attach this instance to the current player so that the tech can\n        // access it\n        this.player.activeWavesurferPlugin = this;\n\n        // check that wavesurfer is initialized in options, and add class to\n        // activate videojs-wavesurfer specific styles\n        if (this.player.options_.plugins.wavesurfer !== undefined) {\n            this.player.addClass('videojs-wavesurfer');\n        }\n\n        // microphone plugin\n        if (options.src === 'live') {\n            // check if the wavesurfer.js microphone plugin can be enabled\n            if (WaveSurfer.microphone !== undefined) {\n                // enable audio input from a microphone\n                this.liveMode = true;\n                this.waveReady = true;\n            } else {\n                this.onWaveError('Could not find wavesurfer.js ' +\n                    'microphone plugin!');\n                return;\n            }\n        }\n\n        // wait until player ui is ready\n        this.player.one('ready', this.initialize.bind(this));\n    }\n\n    /**\n     * Player UI is ready: customize controls.\n     */\n    initialize() {\n        // setup tech\n        this.player.tech_.setActivePlayer(this.player);\n\n        // hide big play button\n        this.player.bigPlayButton.hide();\n\n        // the native controls don't work for this UI so disable\n        // them no matter what\n        if (this.player.usingNativeControls_ === true) {\n            if (this.player.tech_.el_ !== undefined) {\n                this.player.tech_.el_.controls = false;\n            }\n        }\n\n        // controls\n        if (this.player.options_.controls === true) {\n            // make sure controlBar is showing\n            this.player.controlBar.show();\n            this.player.controlBar.el_.style.display = 'flex';\n\n            // progress control isn't used by this plugin\n            this.player.controlBar.progressControl.hide();\n\n            // make sure time displays are visible\n            let uiElements = [this.player.controlBar.currentTimeDisplay,\n                              this.player.controlBar.timeDivider,\n                              this.player.controlBar.durationDisplay];\n            uiElements.forEach((element) => {\n                // ignore and show when essential elements have been disabled\n                // by user\n                if (element !== undefined) {\n                    element.el_.style.display = 'block';\n                    element.show();\n                }\n            });\n            if (this.player.controlBar.remainingTimeDisplay !== undefined) {\n                this.player.controlBar.remainingTimeDisplay.hide();\n            }\n\n            // handle play toggle interaction\n            this.player.controlBar.playToggle.on(['tap', 'click'],\n                this.onPlayToggle.bind(this));\n\n            // disable play button until waveform is ready\n            // (except when in live mode)\n            if (!this.liveMode) {\n                this.player.controlBar.playToggle.hide();\n            }\n        }\n\n        // wavesurfer.js setup\n        let mergedOptions = this.parseOptions(this.player.options_.plugins.wavesurfer);\n        this.surfer = WaveSurfer.create(mergedOptions);\n        this.surfer.on('error', this.onWaveError.bind(this));\n        this.surfer.on('finish', this.onWaveFinish.bind(this));\n        if (this.liveMode === true) {\n            // listen for wavesurfer.js microphone plugin events\n            this.surfer.microphone.on('deviceError', this.onWaveError.bind(this));\n        }\n        this.surferReady = this.onWaveReady.bind(this);\n        this.surferProgress = this.onWaveProgress.bind(this);\n        this.surferSeek = this.onWaveSeek.bind(this);\n\n        // only listen to these wavesurfer.js playback events when not\n        // in live mode\n        if (!this.liveMode) {\n            this.setupPlaybackEvents(true);\n        }\n\n        // video.js player events\n        this.player.on('volumechange', this.onVolumeChange.bind(this));\n        this.player.on('fullscreenchange', this.onScreenChange.bind(this));\n\n        // make sure volume is muted when requested\n        if (this.player.muted()) {\n            this.setVolume(0);\n        }\n\n        // video.js fluid option\n        if (this.player.options_.fluid === true) {\n            // give wave element a classname so it can be styled\n            this.surfer.drawer.wrapper.className = wavesurferClassName;\n            // listen for window resize events\n            this.responsiveWave = WaveSurfer.util.debounce(\n                this.onResizeChange.bind(this), 150);\n            window.addEventListener('resize', this.responsiveWave);\n        }\n\n        // kick things off\n        this.startPlayers();\n    }\n\n    /**\n     * Initializes the waveform options.\n     *\n     * @param {Object} surferOpts - Plugin options.\n     * @private\n     */\n    parseOptions(surferOpts) {\n        let rect = this.player.el_.getBoundingClientRect();\n        this.originalWidth = this.player.options_.width || rect.width;\n        this.originalHeight = this.player.options_.height || rect.height;\n\n        // controlbar\n        let controlBarHeight = this.player.controlBar.height();\n        if (this.player.options_.controls === true && controlBarHeight === 0) {\n            // the dimensions of the controlbar are not known yet, but we\n            // need it now, so we can calculate the height of the waveform.\n            // The default height is 30px, so use that instead.\n            controlBarHeight = 30;\n        }\n\n        // set waveform element and dimensions\n        // Set the container to player's container if \"container\" option is\n        // not provided. If a waveform needs to be appended to your custom\n        // element, then use below option. For example:\n        // container: document.querySelector(\"#vjs-waveform\")\n        if (surferOpts.container === undefined) {\n            surferOpts.container = this.player.el_;\n        }\n\n        // set the height of generated waveform if user has provided height\n        // from options. If height of waveform need to be customized then use\n        // option below. For example: waveformHeight: 30\n        if (surferOpts.waveformHeight === undefined) {\n            let playerHeight = rect.height;\n            surferOpts.height = playerHeight - controlBarHeight;\n        } else {\n            surferOpts.height = opts.waveformHeight;\n        }\n\n        // split channels\n        if (surferOpts.splitChannels && surferOpts.splitChannels === true) {\n            surferOpts.height /= 2;\n        }\n\n        // enable wavesurfer.js microphone plugin\n        if (this.liveMode === true) {\n            surferOpts.plugins = [\n                WaveSurfer.microphone.create(surferOpts)\n            ];\n            this.log('wavesurfer.js microphone plugin enabled.');\n        }\n\n        return surferOpts;\n    }\n\n    /**\n     * Start the players.\n     * @private\n     */\n    startPlayers() {\n        let options = this.player.options_.plugins.wavesurfer;\n        if (options.src !== undefined) {\n            if (this.surfer.microphone === undefined) {\n                // show loading spinner\n                this.player.loadingSpinner.show();\n\n                // start loading file\n                this.load(options.src, options.peaks);\n            } else {\n                // hide loading spinner\n                this.player.loadingSpinner.hide();\n\n                // connect microphone input to our waveform\n                options.wavesurfer = this.surfer;\n            }\n        } else {\n            // no valid src found, hide loading spinner\n            this.player.loadingSpinner.hide();\n        }\n    }\n\n    /**\n     * Starts or stops listening to events related to audio-playback.\n     *\n     * @param {boolean} enable - Start or stop listening to playback\n     *     related events.\n     * @private\n     */\n    setupPlaybackEvents(enable) {\n        if (enable === false) {\n            this.surfer.un('ready', this.surferReady);\n            this.surfer.un('audioprocess', this.surferProgress);\n            this.surfer.un('seek', this.surferSeek);\n        } else if (enable === true) {\n            this.surfer.on('ready', this.surferReady);\n            this.surfer.on('audioprocess', this.surferProgress);\n            this.surfer.on('seek', this.surferSeek);\n        }\n    }\n\n    /**\n     * Start loading waveform data.\n     *\n     * @param {string|blob|file} url - Either the URL of the audio file,\n     *     a Blob or a File object.\n     * @param {string|?number[]|number[][]} peaks - Either the URL of peaks\n     *     data for the audio file, or an array with peaks data.\n     */\n    load(url, peaks) {\n        if (url instanceof Blob || url instanceof File) {\n            this.log('Loading object: ' + JSON.stringify(url));\n            this.surfer.loadBlob(url);\n        } else {\n            // load peak data from file\n            if (peaks !== undefined) {\n                if (Array.isArray(peaks)) {\n                    // use supplied peaks data\n                    this.log('Loading URL: ' + url);\n                    this.surfer.load(url, peaks);\n                } else {\n                    // load peak data from file\n                    let ajaxOptions = {\n                        url: peaks,\n                        responseType: 'json'\n                    };\n                    // supply xhr options, if any\n                    if (this.player.options_.plugins.wavesurfer.xhr !== undefined) {\n                        ajaxOptions.xhr = this.player.options_.plugins.wavesurfer.xhr;\n                    }\n                    let ajax = WaveSurfer.util.ajax(ajaxOptions);\n\n                    ajax.on('success', (data, e) => {\n                        this.log('Loading URL: ' + url +\n                            '\\nLoading Peak Data URL: ' + peaks);\n                        this.surfer.load(url, data.data);\n                    });\n                    ajax.on('error', (e) => {\n                        this.log('Unable to retrieve peak data from ' + peaks +\n                            '. Status code: ' + e.target.status, 'warn');\n                        this.log('Loading URL: ' + url);\n                        this.surfer.load(url);\n                    });\n                }\n            } else {\n                // no peaks\n                this.log('Loading URL: ' + url);\n                this.surfer.load(url);\n            }\n        }\n    }\n\n    /**\n     * Start/resume playback or microphone.\n     */\n    play() {\n        // show pause button\n        this.player.controlBar.playToggle.handlePlay();\n\n        if (this.liveMode) {\n            // start/resume microphone visualization\n            if (!this.surfer.microphone.active)\n            {\n                this.log('Start microphone');\n                this.surfer.microphone.start();\n            } else {\n                // toggle paused\n                let paused = !this.surfer.microphone.paused;\n\n                if (paused) {\n                    this.pause();\n                } else {\n                    this.log('Resume microphone');\n                    this.surfer.microphone.play();\n                }\n            }\n        } else {\n            this.log('Start playback');\n\n            // put video.js player UI in playback mode\n            this.player.play();\n\n            // start surfer playback\n            this.surfer.play();\n        }\n    }\n\n    /**\n     * Pauses playback or microphone visualization.\n     */\n    pause() {\n        // show play button\n        this.player.controlBar.playToggle.handlePause();\n\n        if (this.liveMode) {\n            // pause microphone visualization\n            this.log('Pause microphone');\n            this.surfer.microphone.pause();\n        } else {\n            // pause playback\n            this.log('Pause playback');\n\n            if (!this.waveFinished) {\n                // pause wavesurfer playback\n                this.surfer.pause();\n            } else {\n                this.waveFinished = false;\n            }\n\n            this.setCurrentTime();\n        }\n    }\n\n    /**\n     * @private\n     */\n    dispose() {\n        if (this.surfer) {\n            if (this.liveMode && this.surfer.microphone) {\n                // destroy microphone plugin\n                this.surfer.microphone.destroy();\n                this.log('Destroyed microphone plugin');\n            }\n            // destroy wavesurfer instance\n            this.surfer.destroy();\n        }\n        this.log('Destroyed plugin');\n    }\n\n    /**\n     * Remove the player and waveform.\n     */\n    destroy() {\n        this.player.dispose();\n    }\n\n    /**\n     * Set the volume level.\n     *\n     * @param {number} volume - The new volume level.\n     */\n    setVolume(volume) {\n        if (volume !== undefined) {\n            this.log('Changing volume to: ' + volume);\n\n            // update player volume\n            this.player.volume(volume);\n        }\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is 'image/png'. Other supported types are\n     * 'image/jpeg' and 'image/webp'.\n     *\n     * @param {string} [format=image/png] - String indicating the image format.\n     * @param {number} [quality=1] - Number between 0 and 1 indicating image\n     *     quality if the requested type is 'image/jpeg' or 'image/webp'.\n     * @returns {string} The data URI of the image data.\n     */\n    exportImage(format, quality) {\n        return this.surfer.exportImage(format, quality);\n    }\n\n    /**\n     * Change the audio output device.\n     *\n     * @param {string} sinkId - Id of audio output device.\n     */\n    setAudioOutput(deviceId) {\n        if (deviceId) {\n            this.surfer.setSinkId(deviceId).then((result) => {\n                // notify listeners\n                this.player.trigger('audioOutputReady');\n            }).catch((err) => {\n                // notify listeners\n                this.player.trigger('error', err);\n\n                this.log(err, 'error');\n            });\n        }\n    }\n\n    /**\n     * Get the current time (in seconds) of the stream during playback.\n     *\n     * Returns 0 if no stream is available (yet).\n     */\n    getCurrentTime() {\n        let currentTime = this.surfer.getCurrentTime();\n        currentTime = isNaN(currentTime) ? 0 : currentTime;\n\n        return currentTime;\n    }\n\n    /**\n     * Updates the player's element displaying the current time.\n     *\n     * @param {number} [currentTime] - Current position of the playhead\n     *     (in seconds).\n     * @param {number} [duration] - Duration of the waveform (in seconds).\n     * @private\n     */\n    setCurrentTime(currentTime, duration) {\n        // emit the timeupdate event so that the tech knows about the time change\n        this.trigger('timeupdate');\n\n        if (currentTime === undefined) {\n            currentTime = this.surfer.getCurrentTime();\n        }\n\n        if (duration === undefined) {\n            duration = this.surfer.getDuration();\n        }\n\n        currentTime = isNaN(currentTime) ? 0 : currentTime;\n        duration = isNaN(duration) ? 0 : duration;\n        let time = Math.min(currentTime, duration);\n\n        // update current time display component\n        this.player.controlBar.currentTimeDisplay.formattedTime_ =\n            this.player.controlBar.currentTimeDisplay.contentEl().lastChild.textContent =\n                formatTime(time, duration, this.msDisplayMax);\n    }\n\n    /**\n     * Get the duration of the stream in seconds.\n     *\n     * Returns 0 if no stream is available (yet).\n     */\n    getDuration() {\n        let duration = this.surfer.getDuration();\n        duration = isNaN(duration) ? 0 : duration;\n\n        return duration;\n    }\n\n    /**\n     * Updates the player's element displaying the duration time.\n     *\n     * @param {number} [duration] - Duration of the waveform (in seconds).\n     * @private\n     */\n    setDuration(duration) {\n        if (duration === undefined) {\n            duration = this.surfer.getDuration();\n        }\n        duration = isNaN(duration) ? 0 : duration;\n\n        // update duration display component\n        this.player.controlBar.durationDisplay.formattedTime_ =\n            this.player.controlBar.durationDisplay.contentEl().lastChild.textContent =\n                formatTime(duration, duration, this.msDisplayMax);\n    }\n\n    /**\n     * Audio is loaded, decoded and the waveform is drawn.\n     *\n     * @fires waveReady\n     * @private\n     */\n    onWaveReady() {\n        this.waveReady = true;\n        this.waveFinished = false;\n        this.liveMode = false;\n\n        this.log('Waveform is ready');\n        this.player.trigger('waveReady');\n\n        // update time display\n        this.setCurrentTime();\n        this.setDuration();\n\n        // enable and show play button\n        this.player.controlBar.playToggle.show();\n\n        // hide loading spinner\n        this.player.loadingSpinner.hide();\n\n        // auto-play when ready (if enabled)\n        if (this.player.options_.autoplay === true) {\n            this.play();\n        }\n    }\n\n    /**\n     * Fires when audio playback completed.\n     *\n     * @fires playbackFinish\n     * @private\n     */\n    onWaveFinish() {\n        this.log('Finished playback');\n\n        // notify listeners\n        this.player.trigger('playbackFinish');\n\n        // check if loop is enabled\n        if (this.player.options_.loop === true) {\n            // reset waveform\n            this.surfer.stop();\n            this.play();\n        } else {\n            // finished\n            this.waveFinished = true;\n\n            // pause player\n            this.pause();\n\n            // show the replay state of play toggle\n            this.player.trigger('ended');\n\n            // this gets called once after the clip has ended and the user\n            // seeks so that we can change the replay button back to a play\n            // button\n            this.surfer.once('seek', () => {\n                this.player.controlBar.playToggle.removeClass('vjs-ended');\n                this.player.trigger('pause');\n            });\n        }\n    }\n\n    /**\n     * Fires continuously during audio playback.\n     *\n     * @param {number} time - Current time/location of the playhead.\n     * @private\n     */\n    onWaveProgress(time) {\n        this.setCurrentTime();\n    }\n\n    /**\n     * Fires during seeking of the waveform.\n     * @private\n     */\n    onWaveSeek() {\n        this.setCurrentTime();\n    }\n\n    /**\n     * Waveform error.\n     *\n     * @param {string} error - The wavesurfer error.\n     * @private\n     */\n    onWaveError(error) {\n        // notify listeners\n        this.player.trigger('error', error);\n\n        this.log(error, 'error');\n    }\n\n    /**\n     * Fired when the play toggle is clicked.\n     * @private\n     */\n    onPlayToggle() {\n        // workaround for video.js 6.3.1 and newer\n        if (this.player.controlBar.playToggle.hasClass('vjs-ended')) {\n            this.player.controlBar.playToggle.removeClass('vjs-ended');\n        }\n        if (this.surfer.isPlaying()) {\n            this.pause();\n        } else {\n            this.play();\n        }\n    }\n\n    /**\n     * Fired when the volume in the video.js player changes.\n     * @private\n     */\n    onVolumeChange() {\n        let volume = this.player.volume();\n        if (this.player.muted()) {\n            // muted volume\n            volume = 0;\n        }\n\n        // update wavesurfer.js volume\n        this.surfer.setVolume(volume);\n    }\n\n    /**\n     * Fired when the video.js player switches in or out of fullscreen mode.\n     * @private\n     */\n    onScreenChange() {\n        // execute with tiny delay so the player element completes\n        // rendering and correct dimensions are reported\n        var fullscreenDelay = this.player.setInterval(() => {\n            let isFullscreen = this.player.isFullscreen();\n            let newWidth, newHeight;\n            if (!isFullscreen) {\n                // restore original dimensions\n                newWidth = this.originalWidth;\n                newHeight = this.originalHeight;\n            }\n\n            if (this.waveReady) {\n                if (this.liveMode && !this.surfer.microphone.active) {\n                    // we're in live mode but the microphone hasn't been\n                    // started yet\n                    return;\n                }\n                // redraw\n                this.redrawWaveform(newWidth, newHeight);\n            }\n\n            // stop fullscreenDelay interval\n            this.player.clearInterval(fullscreenDelay);\n\n        }, 100);\n    }\n\n    /**\n     * Fired when the video.js player is resized.\n     *\n     * @private\n     */\n    onResizeChange() {\n        if (this.surfer !== undefined) {\n            // redraw waveform\n            this.redrawWaveform();\n        }\n    }\n\n    /**\n     * Redraw waveform.\n     *\n     * @param {number} [newWidth] - New width for the waveform.\n     * @param {number} [newHeight] - New height for the waveform.\n     * @private\n     */\n    redrawWaveform(newWidth, newHeight) {\n        let rect = this.player.el_.getBoundingClientRect();\n        if (newWidth === undefined) {\n            // get player width\n            newWidth = rect.width;\n        }\n        if (newHeight === undefined) {\n            // get player height\n            newHeight = rect.height;\n        }\n\n        // destroy old drawing\n        this.surfer.drawer.destroy();\n\n        // set new dimensions\n        this.surfer.params.width = newWidth;\n        this.surfer.params.height = newHeight - this.player.controlBar.height();\n\n        // redraw waveform\n        this.surfer.createDrawer();\n        this.surfer.drawer.wrapper.className = wavesurferClassName;\n        this.surfer.drawBuffer();\n\n        // make sure playhead is restored at right position\n        this.surfer.drawer.progress(this.surfer.backend.getPlayedPercents());\n    }\n\n    /**\n     * @private\n     */\n    log(args, logType) {\n        log(args, logType, this.debug);\n    }\n}\n\n// version nr is injected during build\nWavesurfer.VERSION = __VERSION__;\n\n// register plugin\nvideojs.Wavesurfer = Wavesurfer;\nvideojs.registerPlugin('wavesurfer', Wavesurfer);\n\n// register the WavesurferTech as 'Html5' to override the default html5 tech.\n// If we register it as anything other then 'Html5', the <audio> element will\n// be removed by VJS and caption tracks will be lost in the Safari browser.\nvideojs.registerTech('Html5', WavesurferTech);\n\nmodule.exports = {\n    Wavesurfer\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/videojs.wavesurfer.js","/**\n * @file log.js\n * @since 2.0.0\n */\n\nconst ERROR = 'error';\nconst WARN = 'warn';\n\n/**\n * Log message (if the debug option is enabled).\n */\nconst log = function(args, logType, debug)\n{\n    if (debug === true) {\n        if (logType === ERROR) {\n            videojs.log.error(args);\n        } else if (logType === WARN) {\n            videojs.log.warn(args);\n        } else {\n            videojs.log(args);\n        }\n    }\n};\n\nexport default log;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/utils/log.js","/**\n * @file format-time.js\n * @since 2.0.0\n */\n\n/**\n * Format seconds as a time string, H:MM:SS, M:SS or M:SS:MMM.\n *\n * Supplying a guide (in seconds) will force a number of leading zeros\n * to cover the length of the guide.\n *\n * @param {number} seconds - Number of seconds to be turned into a\n *     string.\n * @param {number} guide - Number (in seconds) to model the string\n *     after.\n * @param {number} msDisplayMax - Number (in milliseconds) to model the string\n *     after.\n * @return {string} Time formatted as H:MM:SS, M:SS or M:SS:MMM, e.g.\n *     0:00:12.\n * @private\n */\nconst formatTime = function(seconds, guide, msDisplayMax) {\n    // Default to using seconds as guide\n    seconds = seconds < 0 ? 0 : seconds;\n    guide = guide || seconds;\n    let s = Math.floor(seconds % 60),\n        m = Math.floor(seconds / 60 % 60),\n        h = Math.floor(seconds / 3600),\n        gm = Math.floor(guide / 60 % 60),\n        gh = Math.floor(guide / 3600),\n        ms = Math.floor((seconds - s) * 1000);\n\n    // handle invalid times\n    if (isNaN(seconds) || seconds === Infinity) {\n        // '-' is false for all relational operators (e.g. <, >=) so this\n        // setting will add the minimum number of fields specified by the\n        // guide\n        h = m = s = ms = '-';\n    }\n\n    // Check if we need to show milliseconds\n    if (guide > 0 && guide < msDisplayMax) {\n        if (ms < 100) {\n            if (ms < 10) {\n                ms = '00' + ms;\n            } else {\n                ms = '0' + ms;\n            }\n        }\n        ms = ':' + ms;\n    } else {\n        ms = '';\n    }\n\n    // Check if we need to show hours\n    h = (h > 0 || gh > 0) ? h + ':' : '';\n\n    // If hours are showing, we may need to add a leading zero.\n    // Always show at least one digit of minutes.\n    m = (((h || gm >= 10) && m < 10) ? '0' + m : m) + ':';\n\n    // Check if leading zero is need for seconds\n    s = ((s < 10) ? '0' + s : s);\n\n    return h + m + s + ms;\n};\n\nexport default formatTime;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/utils/format-time.js","/**\n * @file defaults.js\n * @since 2.0.0\n */\n\n// plugin defaults\nconst pluginDefaultOptions = {\n    // Display console log messages.\n    debug: false,\n    // msDisplayMax indicates the number of seconds that is\n    // considered the boundary value for displaying milliseconds\n    // in the time controls. An audio clip with a total length of\n    // 2 seconds and a msDisplayMax of 3 will use the format\n    // M:SS:MMM. Clips longer than msDisplayMax will be displayed\n    // as M:SS or HH:MM:SS.\n    msDisplayMax: 3\n};\n\nexport default pluginDefaultOptions;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/defaults.js","/**\n * @file tech.js\n * @since 2.1.0\n */\n\nconst Html5 = videojs.getTech('Html5');\n\nclass WavesurferTech extends Html5 {\n    /**\n     * Create an instance of this Tech.\n     *\n     * @param {Object} [options]\n     *        The key/value store of player options.\n     *\n     * @param {Component~ReadyCallback} ready\n     *        Callback function to call when the `Flash` Tech is ready.\n     */\n    constructor(options, ready) {\n        // never allow for native text tracks, because this isn't actually\n        // HTML5 audio. Native tracks fail because we are using wavesurfer\n        options.nativeTextTracks = false;\n\n        super(options, ready);\n    }\n\n    setActivePlayer(player) {\n        // we need the player instance so that we can access the current\n        // wavesurfer plugin attached to that player\n        this.activePlayer = player;\n        this.waveready = false;\n\n        // track when wavesurfer is fully initialized (ready)\n        this.activePlayer.on('waveReady', () => {\n            this.waveready = true;\n        });\n\n        if (!this.playerIsUsingWavesurfer()) {\n            // the plugin hasn't been initialized for this player, so it\n            // likely doesn't need our html5 tech modifications\n            return;\n        }\n\n        // proxy timeupdate events so that the tech emits them too. This will\n        // allow the rest of videoJS to work (including text tracks)\n        this.activePlayer.activeWavesurferPlugin.on('timeupdate', () => {\n            this.trigger('timeupdate');\n        });\n    }\n\n    /**\n     * Determine whether or not the player is trying use the wavesurfer plugin\n     * @returns {boolean}\n     */\n    playerIsUsingWavesurfer()\n    {\n        let availablePlugins = videojs.getPlugins();\n        let usingWavesurferPlugin = 'wavesurfer' in availablePlugins;\n        let usingRecordPlugin = 'record' in availablePlugins;\n\n        return usingWavesurferPlugin && !usingRecordPlugin;\n    }\n\n    /**\n     * Start playback.\n     */\n    play() {\n        if (!this.playerIsUsingWavesurfer()) {\n            // fall back to html5 tech functionality\n            return super.play();\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.play();\n    }\n\n    /**\n     * Pause playback.\n     */\n    pause() {\n        if (!this.playerIsUsingWavesurfer()) {\n            //fall back to html5 tech functionality\n            return super.pause();\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.pause();\n    }\n\n    /**\n     * Get the current time\n     * @return {number}\n     */\n    currentTime() {\n        if (!this.playerIsUsingWavesurfer()) {\n            // fall back to html5 tech functionality\n            return super.currentTime();\n        }\n\n        if (!this.waveready) {\n            return 0;\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.getCurrentTime();\n    }\n\n    /**\n     * Get the current duration\n     *\n     * @return {number}\n     *         The duration of the media or 0 if there is no duration.\n     */\n    duration() {\n        if (!this.playerIsUsingWavesurfer()) {\n            // fall back to html5 tech functionality\n            return super.duration();\n        }\n\n        if (!this.waveready) {\n            return 0;\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.getDuration();\n    }\n\n    /**\n     * Set the current time\n     *\n     * @since 2.1.1\n     * @param {number} time\n     * @returns {*}\n     */\n    setCurrentTime(time) {\n        if (!this.playerIsUsingWavesurfer()) {\n            // fall back to html5 tech functionality\n            return super.currentTime(time);\n        }\n\n        if (!this.waveready) {\n            return 0;\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.surfer.seekTo(\n            time / this.activePlayer.activeWavesurferPlugin.surfer.getDuration());\n    }\n\n    /**\n     * Sets the current playback rate. A playback rate of\n     * 1.0 represents normal speed and 0.5 would indicate half-speed\n     * playback, for instance.\n     *\n     * @since 2.1.1\n     * @param {number} [rate]\n     *       New playback rate to set.\n     *\n     * @return {number}\n     *         The current playback rate when getting or 1.0\n     */\n    setPlaybackRate(rate) {\n        if (this.playerIsUsingWavesurfer()) {\n            this.activePlayer.activeWavesurferPlugin.surfer.setPlaybackRate(rate);\n        }\n\n        return super.setPlaybackRate(rate);\n    }\n}\n\nWavesurferTech.isSupported = function() {\n    return true;\n};\n\nexport default WavesurferTech;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/tech.js","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/global/window.js\n// module id = 5\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"videojs\"\n// module id = 7\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"WaveSurfer\"\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}