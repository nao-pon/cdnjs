{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 96d1d2813fe136aa09d8","webpack:///./src/js/videojs.wavesurfer.js","webpack:///./src/js/utils/log.js","webpack:///./src/js/utils/format-time.js","webpack:///./src/js/defaults.js","webpack:///./src/js/tech.js","webpack:///./node_modules/global/window.js","webpack:///(webpack)/buildin/global.js","webpack:///external \"videojs\"","webpack:///external \"WaveSurfer\""],"names":["Plugin","getPlugin","wavesurferClassName","Wavesurfer","player","options","mergeOptions","waveReady","waveFinished","liveMode","debug","toString","msDisplayMax","parseFloat","activeWavesurferPlugin","options_","plugins","wavesurfer","undefined","addClass","src","microphone","onWaveError","one","initialize","bind","tech_","setActivePlayer","bigPlayButton","hide","usingNativeControls_","el_","controls","controlBar","show","style","display","progressControl","uiElements","currentTimeDisplay","timeDivider","durationDisplay","forEach","element","remainingTimeDisplay","playToggle","on","onPlayToggle","mergedOptions","parseOptions","surfer","create","onWaveFinish","surferReady","onWaveReady","surferProgress","onWaveProgress","surferSeek","onWaveSeek","setupPlaybackEvents","onVolumeChange","onScreenChange","muted","setVolume","fluid","drawer","wrapper","className","responsiveWave","util","debounce","onResizeChange","addEventListener","startPlayers","surferOpts","rect","getBoundingClientRect","originalWidth","width","originalHeight","height","controlBarHeight","container","waveformHeight","playerHeight","opts","splitChannels","log","loadingSpinner","load","peaks","enable","un","url","Blob","File","JSON","stringify","loadBlob","Array","isArray","ajaxOptions","responseType","xhr","ajax","data","e","target","status","handlePlay","active","start","paused","pause","play","handlePause","setCurrentTime","destroy","dispose","volume","format","quality","exportImage","deviceId","setSinkId","then","result","trigger","catch","err","currentTime","getCurrentTime","isNaN","duration","getDuration","time","Math","min","formattedTime_","contentEl","lastChild","textContent","setDuration","autoplay","loop","stop","once","removeClass","error","hasClass","isPlaying","fullscreenDelay","setInterval","isFullscreen","newWidth","newHeight","redrawWaveform","clearInterval","params","createDrawer","drawBuffer","progress","backend","getPlayedPercents","args","logType","VERSION","registerPlugin","registerTech","module","exports","ERROR","WARN","videojs","warn","formatTime","seconds","guide","s","floor","m","h","gm","gh","ms","Infinity","pluginDefaultOptions","Html5","getTech","WavesurferTech","ready","nativeTextTracks","activePlayer","waveready","playerIsUsingWavesurfer","availablePlugins","getPlugins","usingWavesurferPlugin","usingRecordPlugin","seekTo","rate","setPlaybackRate","isSupported"],"mappings":"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","file":"videojs.wavesurfer.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"videojs\"), require(\"WaveSurfer\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"VideojsWavesurfer\", [\"videojs\", \"WaveSurfer\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VideojsWavesurfer\"] = factory(require(\"videojs\"), require(\"WaveSurfer\"));\n\telse\n\t\troot[\"VideojsWavesurfer\"] = factory(root[\"videojs\"], root[\"WaveSurfer\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 96d1d2813fe136aa09d8","/**\n * @file videojs.wavesurfer.js\n *\n * The main file for the videojs-wavesurfer project.\n * MIT license: https://github.com/collab-project/videojs-wavesurfer/blob/master/LICENSE\n */\n\nimport log from './utils/log';\nimport formatTime from './utils/format-time';\nimport pluginDefaultOptions from './defaults';\nimport WavesurferTech from './tech';\nimport window from 'global/window';\n\nimport videojs from 'video.js';\nimport WaveSurfer from 'wavesurfer.js';\n\nconst Plugin = videojs.getPlugin('plugin');\n\nconst wavesurferClassName = 'vjs-wavedisplay';\n\n/**\n * Draw a waveform for audio and video files in a video.js player.\n *\n * @class Wavesurfer\n * @extends videojs.Plugin\n */\nclass Wavesurfer extends Plugin {\n    /**\n     * The constructor function for the class.\n     *\n     * @param {(videojs.Player|Object)} player\n     * @param {Object} options - Player options.\n     */\n    constructor(player, options) {\n        super(player, options);\n\n        // parse options\n        options = videojs.mergeOptions(pluginDefaultOptions, options);\n        this.waveReady = false;\n        this.waveFinished = false;\n        this.liveMode = false;\n        this.debug = (options.debug.toString() === 'true');\n        this.msDisplayMax = parseFloat(options.msDisplayMax);\n\n        // attach this instance to the current player so that the tech can\n        // access it\n        this.player.activeWavesurferPlugin = this;\n\n        // check that wavesurfer is initialized in options, and add class to\n        // activate videojs-wavesurfer specific styles\n        if (this.player.options_.plugins.wavesurfer !== undefined) {\n            this.player.addClass('videojs-wavesurfer');\n        }\n\n        // microphone plugin\n        if (options.src === 'live') {\n            // check if the wavesurfer.js microphone plugin can be enabled\n            if (WaveSurfer.microphone !== undefined) {\n                // enable audio input from a microphone\n                this.liveMode = true;\n                this.waveReady = true;\n            } else {\n                this.onWaveError('Could not find wavesurfer.js ' +\n                    'microphone plugin!');\n                return;\n            }\n        }\n\n        // wait until player ui is ready\n        this.player.one('ready', this.initialize.bind(this));\n    }\n\n    /**\n     * Player UI is ready: customize controls.\n     */\n    initialize() {\n        // setup tech\n        this.player.tech_.setActivePlayer(this.player);\n\n        // hide big play button\n        this.player.bigPlayButton.hide();\n\n        // the native controls don't work for this UI so disable\n        // them no matter what\n        if (this.player.usingNativeControls_ === true) {\n            if (this.player.tech_.el_ !== undefined) {\n                this.player.tech_.el_.controls = false;\n            }\n        }\n\n        // controls\n        if (this.player.options_.controls === true) {\n            // make sure controlBar is showing\n            this.player.controlBar.show();\n            this.player.controlBar.el_.style.display = 'flex';\n\n            // progress control isn't used by this plugin\n            this.player.controlBar.progressControl.hide();\n\n            // make sure time displays are visible\n            let uiElements = [this.player.controlBar.currentTimeDisplay,\n                              this.player.controlBar.timeDivider,\n                              this.player.controlBar.durationDisplay];\n            uiElements.forEach((element) => {\n                // ignore and show when essential elements have been disabled\n                // by user\n                if (element !== undefined) {\n                    element.el_.style.display = 'block';\n                    element.show();\n                }\n            });\n            if (this.player.controlBar.remainingTimeDisplay !== undefined) {\n                this.player.controlBar.remainingTimeDisplay.hide();\n            }\n\n            // handle play toggle interaction\n            this.player.controlBar.playToggle.on(['tap', 'click'],\n                this.onPlayToggle.bind(this));\n\n            // disable play button until waveform is ready\n            // (except when in live mode)\n            if (!this.liveMode) {\n                this.player.controlBar.playToggle.hide();\n            }\n        }\n\n        // wavesurfer.js setup\n        let mergedOptions = this.parseOptions(this.player.options_.plugins.wavesurfer);\n        this.surfer = WaveSurfer.create(mergedOptions);\n        this.surfer.on('error', this.onWaveError.bind(this));\n        this.surfer.on('finish', this.onWaveFinish.bind(this));\n        if (this.liveMode === true) {\n            // listen for wavesurfer.js microphone plugin events\n            this.surfer.microphone.on('deviceError', this.onWaveError.bind(this));\n        }\n        this.surferReady = this.onWaveReady.bind(this);\n        this.surferProgress = this.onWaveProgress.bind(this);\n        this.surferSeek = this.onWaveSeek.bind(this);\n\n        // only listen to these wavesurfer.js playback events when not\n        // in live mode\n        if (!this.liveMode) {\n            this.setupPlaybackEvents(true);\n        }\n\n        // video.js player events\n        this.player.on('volumechange', this.onVolumeChange.bind(this));\n        this.player.on('fullscreenchange', this.onScreenChange.bind(this));\n\n        // make sure volume is muted when requested\n        if (this.player.muted()) {\n            this.setVolume(0);\n        }\n\n        // video.js fluid option\n        if (this.player.options_.fluid === true) {\n            // give wave element a classname so it can be styled\n            this.surfer.drawer.wrapper.className = wavesurferClassName;\n            // listen for window resize events\n            this.responsiveWave = WaveSurfer.util.debounce(\n                this.onResizeChange.bind(this), 150);\n            window.addEventListener('resize', this.responsiveWave);\n        }\n\n        // kick things off\n        this.startPlayers();\n    }\n\n    /**\n     * Initializes the waveform options.\n     *\n     * @param {Object} surferOpts - Plugin options.\n     * @private\n     */\n    parseOptions(surferOpts) {\n        let rect = this.player.el_.getBoundingClientRect();\n        this.originalWidth = this.player.options_.width || rect.width;\n        this.originalHeight = this.player.options_.height || rect.height;\n\n        // controlbar\n        let controlBarHeight = this.player.controlBar.height();\n        if (this.player.options_.controls === true && controlBarHeight === 0) {\n            // the dimensions of the controlbar are not known yet, but we\n            // need it now, so we can calculate the height of the waveform.\n            // The default height is 30px, so use that instead.\n            controlBarHeight = 30;\n        }\n\n        // set waveform element and dimensions\n        // Set the container to player's container if \"container\" option is\n        // not provided. If a waveform needs to be appended to your custom\n        // element, then use below option. For example:\n        // container: document.querySelector(\"#vjs-waveform\")\n        if (surferOpts.container === undefined) {\n            surferOpts.container = this.player.el_;\n        }\n\n        // set the height of generated waveform if user has provided height\n        // from options. If height of waveform need to be customized then use\n        // option below. For example: waveformHeight: 30\n        if (surferOpts.waveformHeight === undefined) {\n            let playerHeight = rect.height;\n            surferOpts.height = playerHeight - controlBarHeight;\n        } else {\n            surferOpts.height = opts.waveformHeight;\n        }\n\n        // split channels\n        if (surferOpts.splitChannels && surferOpts.splitChannels === true) {\n            surferOpts.height /= 2;\n        }\n\n        // enable wavesurfer.js microphone plugin\n        if (this.liveMode === true) {\n            surferOpts.plugins = [\n                WaveSurfer.microphone.create(surferOpts)\n            ];\n            this.log('wavesurfer.js microphone plugin enabled.');\n        }\n\n        return surferOpts;\n    }\n\n    /**\n     * Start the players.\n     * @private\n     */\n    startPlayers() {\n        let options = this.player.options_.plugins.wavesurfer;\n        if (options.src !== undefined) {\n            if (this.surfer.microphone === undefined) {\n                // show loading spinner\n                this.player.loadingSpinner.show();\n\n                // start loading file\n                this.load(options.src, options.peaks);\n            } else {\n                // hide loading spinner\n                this.player.loadingSpinner.hide();\n\n                // connect microphone input to our waveform\n                options.wavesurfer = this.surfer;\n            }\n        } else {\n            // no valid src found, hide loading spinner\n            this.player.loadingSpinner.hide();\n        }\n    }\n\n    /**\n     * Starts or stops listening to events related to audio-playback.\n     *\n     * @param {boolean} enable - Start or stop listening to playback\n     *     related events.\n     * @private\n     */\n    setupPlaybackEvents(enable) {\n        if (enable === false) {\n            this.surfer.un('ready', this.surferReady);\n            this.surfer.un('audioprocess', this.surferProgress);\n            this.surfer.un('seek', this.surferSeek);\n        } else if (enable === true) {\n            this.surfer.on('ready', this.surferReady);\n            this.surfer.on('audioprocess', this.surferProgress);\n            this.surfer.on('seek', this.surferSeek);\n        }\n    }\n\n    /**\n     * Start loading waveform data.\n     *\n     * @param {string|blob|file} url - Either the URL of the audio file,\n     *     a Blob or a File object.\n     * @param {string|?number[]|number[][]} peaks - Either the URL of peaks\n     *     data for the audio file, or an array with peaks data.\n     */\n    load(url, peaks) {\n        if (url instanceof Blob || url instanceof File) {\n            this.log('Loading object: ' + JSON.stringify(url));\n            this.surfer.loadBlob(url);\n        } else {\n            // load peak data from file\n            if (peaks !== undefined) {\n                if (Array.isArray(peaks)) {\n                    // use supplied peaks data\n                    this.log('Loading URL: ' + url);\n                    this.surfer.load(url, peaks);\n                } else {\n                    // load peak data from file\n                    let ajaxOptions = {\n                        url: peaks,\n                        responseType: 'json'\n                    };\n                    // supply xhr options, if any\n                    if (this.player.options_.plugins.wavesurfer.xhr !== undefined) {\n                        ajaxOptions.xhr = this.player.options_.plugins.wavesurfer.xhr;\n                    }\n                    let ajax = WaveSurfer.util.ajax(ajaxOptions);\n\n                    ajax.on('success', (data, e) => {\n                        this.log('Loading URL: ' + url +\n                            '\\nLoading Peak Data URL: ' + peaks);\n                        this.surfer.load(url, data.data);\n                    });\n                    ajax.on('error', (e) => {\n                        this.log('Unable to retrieve peak data from ' + peaks +\n                            '. Status code: ' + e.target.status, 'warn');\n                        this.log('Loading URL: ' + url);\n                        this.surfer.load(url);\n                    });\n                }\n            } else {\n                // no peaks\n                this.log('Loading URL: ' + url);\n                this.surfer.load(url);\n            }\n        }\n    }\n\n    /**\n     * Start/resume playback or microphone.\n     */\n    play() {\n        // show pause button\n        this.player.controlBar.playToggle.handlePlay();\n\n        if (this.liveMode) {\n            // start/resume microphone visualization\n            if (!this.surfer.microphone.active)\n            {\n                this.log('Start microphone');\n                this.surfer.microphone.start();\n            } else {\n                // toggle paused\n                let paused = !this.surfer.microphone.paused;\n\n                if (paused) {\n                    this.pause();\n                } else {\n                    this.log('Resume microphone');\n                    this.surfer.microphone.play();\n                }\n            }\n        } else {\n            this.log('Start playback');\n\n            // put video.js player UI in playback mode\n            this.player.play();\n\n            // start surfer playback\n            this.surfer.play();\n        }\n    }\n\n    /**\n     * Pauses playback or microphone visualization.\n     */\n    pause() {\n        // show play button\n        this.player.controlBar.playToggle.handlePause();\n\n        if (this.liveMode) {\n            // pause microphone visualization\n            this.log('Pause microphone');\n            this.surfer.microphone.pause();\n        } else {\n            // pause playback\n            this.log('Pause playback');\n\n            if (!this.waveFinished) {\n                // pause wavesurfer playback\n                this.surfer.pause();\n            } else {\n                this.waveFinished = false;\n            }\n\n            this.setCurrentTime();\n        }\n    }\n\n    /**\n     * @private\n     */\n    dispose() {\n        if (this.surfer) {\n            if (this.liveMode && this.surfer.microphone) {\n                // destroy microphone plugin\n                this.surfer.microphone.destroy();\n                this.log('Destroyed microphone plugin');\n            }\n            // destroy wavesurfer instance\n            this.surfer.destroy();\n        }\n        this.log('Destroyed plugin');\n    }\n\n    /**\n     * Remove the player and waveform.\n     */\n    destroy() {\n        this.player.dispose();\n    }\n\n    /**\n     * Set the volume level.\n     *\n     * @param {number} volume - The new volume level.\n     */\n    setVolume(volume) {\n        if (volume !== undefined) {\n            this.log('Changing volume to: ' + volume);\n\n            // update player volume\n            this.player.volume(volume);\n        }\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is 'image/png'. Other supported types are\n     * 'image/jpeg' and 'image/webp'.\n     *\n     * @param {string} [format=image/png] - String indicating the image format.\n     * @param {number} [quality=1] - Number between 0 and 1 indicating image\n     *     quality if the requested type is 'image/jpeg' or 'image/webp'.\n     * @returns {string} The data URI of the image data.\n     */\n    exportImage(format, quality) {\n        return this.surfer.exportImage(format, quality);\n    }\n\n    /**\n     * Change the audio output device.\n     *\n     * @param {string} sinkId - Id of audio output device.\n     */\n    setAudioOutput(deviceId) {\n        if (deviceId) {\n            this.surfer.setSinkId(deviceId).then((result) => {\n                // notify listeners\n                this.player.trigger('audioOutputReady');\n            }).catch((err) => {\n                // notify listeners\n                this.player.trigger('error', err);\n\n                this.log(err, 'error');\n            });\n        }\n    }\n\n    /**\n     * Get the current time (in seconds) of the stream during playback.\n     *\n     * Returns 0 if no stream is available (yet).\n     */\n    getCurrentTime() {\n        let currentTime = this.surfer.getCurrentTime();\n        currentTime = isNaN(currentTime) ? 0 : currentTime;\n\n        return currentTime;\n    }\n\n    /**\n     * Updates the player's element displaying the current time.\n     *\n     * @param {number} [currentTime] - Current position of the playhead\n     *     (in seconds).\n     * @param {number} [duration] - Duration of the waveform (in seconds).\n     * @private\n     */\n    setCurrentTime(currentTime, duration) {\n        // emit the timeupdate event so that the tech knows about the time change\n        this.trigger('timeupdate');\n\n        if (currentTime === undefined) {\n            currentTime = this.surfer.getCurrentTime();\n        }\n\n        if (duration === undefined) {\n            duration = this.surfer.getDuration();\n        }\n\n        currentTime = isNaN(currentTime) ? 0 : currentTime;\n        duration = isNaN(duration) ? 0 : duration;\n        let time = Math.min(currentTime, duration);\n\n        // update current time display component\n        this.player.controlBar.currentTimeDisplay.formattedTime_ =\n            this.player.controlBar.currentTimeDisplay.contentEl().lastChild.textContent =\n                formatTime(time, duration, this.msDisplayMax);\n    }\n\n    /**\n     * Get the duration of the stream in seconds.\n     *\n     * Returns 0 if no stream is available (yet).\n     */\n    getDuration() {\n        let duration = this.surfer.getDuration();\n        duration = isNaN(duration) ? 0 : duration;\n\n        return duration;\n    }\n\n    /**\n     * Updates the player's element displaying the duration time.\n     *\n     * @param {number} [duration] - Duration of the waveform (in seconds).\n     * @private\n     */\n    setDuration(duration) {\n        if (duration === undefined) {\n            duration = this.surfer.getDuration();\n        }\n        duration = isNaN(duration) ? 0 : duration;\n\n        // update duration display component\n        this.player.controlBar.durationDisplay.formattedTime_ =\n            this.player.controlBar.durationDisplay.contentEl().lastChild.textContent =\n                formatTime(duration, duration, this.msDisplayMax);\n    }\n\n    /**\n     * Audio is loaded, decoded and the waveform is drawn.\n     *\n     * @fires waveReady\n     * @private\n     */\n    onWaveReady() {\n        this.waveReady = true;\n        this.waveFinished = false;\n        this.liveMode = false;\n\n        this.log('Waveform is ready');\n        this.player.trigger('waveReady');\n\n        // update time display\n        this.setCurrentTime();\n        this.setDuration();\n\n        // enable and show play button\n        this.player.controlBar.playToggle.show();\n\n        // hide loading spinner\n        this.player.loadingSpinner.hide();\n\n        // auto-play when ready (if enabled)\n        if (this.player.options_.autoplay === true) {\n            this.play();\n        }\n    }\n\n    /**\n     * Fires when audio playback completed.\n     *\n     * @fires playbackFinish\n     * @private\n     */\n    onWaveFinish() {\n        this.log('Finished playback');\n\n        // notify listeners\n        this.player.trigger('playbackFinish');\n\n        // check if loop is enabled\n        if (this.player.options_.loop === true) {\n            // reset waveform\n            this.surfer.stop();\n            this.play();\n        } else {\n            // finished\n            this.waveFinished = true;\n\n            // pause player\n            this.pause();\n\n            // show the replay state of play toggle\n            this.player.trigger('ended');\n\n            // this gets called once after the clip has ended and the user\n            // seeks so that we can change the replay button back to a play\n            // button\n            this.surfer.once('seek', () => {\n                this.player.controlBar.playToggle.removeClass('vjs-ended');\n                this.player.trigger('pause');\n            });\n        }\n    }\n\n    /**\n     * Fires continuously during audio playback.\n     *\n     * @param {number} time - Current time/location of the playhead.\n     * @private\n     */\n    onWaveProgress(time) {\n        this.setCurrentTime();\n    }\n\n    /**\n     * Fires during seeking of the waveform.\n     * @private\n     */\n    onWaveSeek() {\n        this.setCurrentTime();\n    }\n\n    /**\n     * Waveform error.\n     *\n     * @param {string} error - The wavesurfer error.\n     * @private\n     */\n    onWaveError(error) {\n        // notify listeners\n        this.player.trigger('error', error);\n\n        this.log(error, 'error');\n    }\n\n    /**\n     * Fired when the play toggle is clicked.\n     * @private\n     */\n    onPlayToggle() {\n        // workaround for video.js 6.3.1 and newer\n        if (this.player.controlBar.playToggle.hasClass('vjs-ended')) {\n            this.player.controlBar.playToggle.removeClass('vjs-ended');\n        }\n        if (this.surfer.isPlaying()) {\n            this.pause();\n        } else {\n            this.play();\n        }\n    }\n\n    /**\n     * Fired when the volume in the video.js player changes.\n     * @private\n     */\n    onVolumeChange() {\n        let volume = this.player.volume();\n        if (this.player.muted()) {\n            // muted volume\n            volume = 0;\n        }\n\n        // update wavesurfer.js volume\n        this.surfer.setVolume(volume);\n    }\n\n    /**\n     * Fired when the video.js player switches in or out of fullscreen mode.\n     * @private\n     */\n    onScreenChange() {\n        // execute with tiny delay so the player element completes\n        // rendering and correct dimensions are reported\n        var fullscreenDelay = this.player.setInterval(() => {\n            let isFullscreen = this.player.isFullscreen();\n            let newWidth, newHeight;\n            if (!isFullscreen) {\n                // restore original dimensions\n                newWidth = this.originalWidth;\n                newHeight = this.originalHeight;\n            }\n\n            if (this.waveReady) {\n                if (this.liveMode && !this.surfer.microphone.active) {\n                    // we're in live mode but the microphone hasn't been\n                    // started yet\n                    return;\n                }\n                // redraw\n                this.redrawWaveform(newWidth, newHeight);\n            }\n\n            // stop fullscreenDelay interval\n            this.player.clearInterval(fullscreenDelay);\n\n        }, 100);\n    }\n\n    /**\n     * Fired when the video.js player is resized.\n     *\n     * @private\n     */\n    onResizeChange() {\n        if (this.surfer !== undefined) {\n            // redraw waveform\n            this.redrawWaveform();\n        }\n    }\n\n    /**\n     * Redraw waveform.\n     *\n     * @param {number} [newWidth] - New width for the waveform.\n     * @param {number} [newHeight] - New height for the waveform.\n     * @private\n     */\n    redrawWaveform(newWidth, newHeight) {\n        let rect = this.player.el_.getBoundingClientRect();\n        if (newWidth === undefined) {\n            // get player width\n            newWidth = rect.width;\n        }\n        if (newHeight === undefined) {\n            // get player height\n            newHeight = rect.height;\n        }\n\n        // destroy old drawing\n        this.surfer.drawer.destroy();\n\n        // set new dimensions\n        this.surfer.params.width = newWidth;\n        this.surfer.params.height = newHeight - this.player.controlBar.height();\n\n        // redraw waveform\n        this.surfer.createDrawer();\n        this.surfer.drawer.wrapper.className = wavesurferClassName;\n        this.surfer.drawBuffer();\n\n        // make sure playhead is restored at right position\n        this.surfer.drawer.progress(this.surfer.backend.getPlayedPercents());\n    }\n\n    /**\n     * @private\n     */\n    log(args, logType) {\n        log(args, logType, this.debug);\n    }\n}\n\n// version nr is injected during build\nWavesurfer.VERSION = __VERSION__;\n\n// register plugin\nvideojs.Wavesurfer = Wavesurfer;\nvideojs.registerPlugin('wavesurfer', Wavesurfer);\n\n// register the WavesurferTech as 'Html5' to override the default html5 tech.\n// If we register it as anything other then 'Html5', the <audio> element will\n// be removed by VJS and caption tracks will be lost in the Safari browser.\nvideojs.registerTech('Html5', WavesurferTech);\n\nmodule.exports = {\n    Wavesurfer\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/videojs.wavesurfer.js","/**\n * @file log.js\n * @since 2.0.0\n */\n\nconst ERROR = 'error';\nconst WARN = 'warn';\n\n/**\n * Log message (if the debug option is enabled).\n */\nconst log = function(args, logType, debug)\n{\n    if (debug === true) {\n        if (logType === ERROR) {\n            videojs.log.error(args);\n        } else if (logType === WARN) {\n            videojs.log.warn(args);\n        } else {\n            videojs.log(args);\n        }\n    }\n};\n\nexport default log;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/utils/log.js","/**\n * @file format-time.js\n * @since 2.0.0\n */\n\n/**\n * Format seconds as a time string, H:MM:SS, M:SS or M:SS:MMM.\n *\n * Supplying a guide (in seconds) will force a number of leading zeros\n * to cover the length of the guide.\n *\n * @param {number} seconds - Number of seconds to be turned into a\n *     string.\n * @param {number} guide - Number (in seconds) to model the string\n *     after.\n * @param {number} msDisplayMax - Number (in milliseconds) to model the string\n *     after.\n * @return {string} Time formatted as H:MM:SS, M:SS or M:SS:MMM, e.g.\n *     0:00:12.\n * @private\n */\nconst formatTime = function(seconds, guide, msDisplayMax) {\n    // Default to using seconds as guide\n    seconds = seconds < 0 ? 0 : seconds;\n    guide = guide || seconds;\n    let s = Math.floor(seconds % 60),\n        m = Math.floor(seconds / 60 % 60),\n        h = Math.floor(seconds / 3600),\n        gm = Math.floor(guide / 60 % 60),\n        gh = Math.floor(guide / 3600),\n        ms = Math.floor((seconds - s) * 1000);\n\n    // handle invalid times\n    if (isNaN(seconds) || seconds === Infinity) {\n        // '-' is false for all relational operators (e.g. <, >=) so this\n        // setting will add the minimum number of fields specified by the\n        // guide\n        h = m = s = ms = '-';\n    }\n\n    // Check if we need to show milliseconds\n    if (guide > 0 && guide < msDisplayMax) {\n        if (ms < 100) {\n            if (ms < 10) {\n                ms = '00' + ms;\n            } else {\n                ms = '0' + ms;\n            }\n        }\n        ms = ':' + ms;\n    } else {\n        ms = '';\n    }\n\n    // Check if we need to show hours\n    h = (h > 0 || gh > 0) ? h + ':' : '';\n\n    // If hours are showing, we may need to add a leading zero.\n    // Always show at least one digit of minutes.\n    m = (((h || gm >= 10) && m < 10) ? '0' + m : m) + ':';\n\n    // Check if leading zero is need for seconds\n    s = ((s < 10) ? '0' + s : s);\n\n    return h + m + s + ms;\n};\n\nexport default formatTime;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/utils/format-time.js","/**\n * @file defaults.js\n * @since 2.0.0\n */\n\n// plugin defaults\nconst pluginDefaultOptions = {\n    // Display console log messages.\n    debug: false,\n    // msDisplayMax indicates the number of seconds that is\n    // considered the boundary value for displaying milliseconds\n    // in the time controls. An audio clip with a total length of\n    // 2 seconds and a msDisplayMax of 3 will use the format\n    // M:SS:MMM. Clips longer than msDisplayMax will be displayed\n    // as M:SS or HH:MM:SS.\n    msDisplayMax: 3\n};\n\nexport default pluginDefaultOptions;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/defaults.js","/**\n * @file tech.js\n * @since 2.1.0\n */\n\nconst Html5 = videojs.getTech('Html5');\n\nclass WavesurferTech extends Html5 {\n    /**\n     * Create an instance of this Tech.\n     *\n     * @param {Object} [options]\n     *        The key/value store of player options.\n     *\n     * @param {Component~ReadyCallback} ready\n     *        Callback function to call when the `Flash` Tech is ready.\n     */\n    constructor(options, ready) {\n        // never allow for native text tracks, because this isn't actually\n        // HTML5 audio. Native tracks fail because we are using wavesurfer\n        options.nativeTextTracks = false;\n\n        super(options, ready);\n    }\n\n    setActivePlayer(player) {\n        // we need the player instance so that we can access the current\n        // wavesurfer plugin attached to that player\n        this.activePlayer = player;\n        this.waveready = false;\n\n        // track when wavesurfer is fully initialized (ready)\n        this.activePlayer.on('waveReady', () => {\n            this.waveready = true;\n        });\n\n        if (!this.playerIsUsingWavesurfer()) {\n            // the plugin hasn't been initialized for this player, so it\n            // likely doesn't need our html5 tech modifications\n            return;\n        }\n\n        // proxy timeupdate events so that the tech emits them too. This will\n        // allow the rest of videoJS to work (including text tracks)\n        this.activePlayer.activeWavesurferPlugin.on('timeupdate', () => {\n            this.trigger('timeupdate');\n        });\n    }\n\n    /**\n     * Determine whether or not the player is trying use the wavesurfer plugin\n     * @returns {boolean}\n     */\n    playerIsUsingWavesurfer()\n    {\n        let availablePlugins = videojs.getPlugins();\n        let usingWavesurferPlugin = 'wavesurfer' in availablePlugins;\n        let usingRecordPlugin = 'record' in availablePlugins;\n\n        return usingWavesurferPlugin && !usingRecordPlugin;\n    }\n\n    /**\n     * Start playback.\n     */\n    play() {\n        if (!this.playerIsUsingWavesurfer()) {\n            // fall back to html5 tech functionality\n            return super.play();\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.play();\n    }\n\n    /**\n     * Pause playback.\n     */\n    pause() {\n        if (!this.playerIsUsingWavesurfer()) {\n            //fall back to html5 tech functionality\n            return super.pause();\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.pause();\n    }\n\n    /**\n     * Get the current time\n     * @return {number}\n     */\n    currentTime() {\n        if (!this.playerIsUsingWavesurfer()) {\n            // fall back to html5 tech functionality\n            return super.currentTime();\n        }\n\n        if (!this.waveready) {\n            return 0;\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.getCurrentTime();\n    }\n\n    /**\n     * Get the current duration\n     *\n     * @return {number}\n     *         The duration of the media or 0 if there is no duration.\n     */\n    duration() {\n        if (!this.playerIsUsingWavesurfer()) {\n            // fall back to html5 tech functionality\n            return super.duration();\n        }\n\n        if (!this.waveready) {\n            return 0;\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.getDuration();\n    }\n\n    /**\n     * Set the current time\n     *\n     * @since 2.1.1\n     * @param {number} time\n     * @returns {*}\n     */\n    setCurrentTime(time) {\n        if (!this.playerIsUsingWavesurfer()) {\n            // fall back to html5 tech functionality\n            return super.currentTime(time);\n        }\n\n        if (!this.waveready) {\n            return 0;\n        }\n\n        return this.activePlayer.activeWavesurferPlugin.surfer.seekTo(\n            time / this.activePlayer.activeWavesurferPlugin.surfer.getDuration());\n    }\n\n    /**\n     * Sets the current playback rate. A playback rate of\n     * 1.0 represents normal speed and 0.5 would indicate half-speed\n     * playback, for instance.\n     *\n     * @since 2.1.1\n     * @param {number} [rate]\n     *       New playback rate to set.\n     *\n     * @return {number}\n     *         The current playback rate when getting or 1.0\n     */\n    setPlaybackRate(rate) {\n        if (this.playerIsUsingWavesurfer()) {\n            this.activePlayer.activeWavesurferPlugin.surfer.setPlaybackRate(rate);\n        }\n\n        return super.setPlaybackRate(rate);\n    }\n}\n\nWavesurferTech.isSupported = function() {\n    return true;\n};\n\nexport default WavesurferTech;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/tech.js","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/global/window.js\n// module id = 5\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"videojs\"\n// module id = 7\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"WaveSurfer\"\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}