{"version":3,"sources":["/mnt/c/Repositories/asmcrypto.js/src/utils.js","/mnt/c/Repositories/asmcrypto.js/src/errors.js","/mnt/c/Repositories/asmcrypto.js/src/aes/aes.asm.js","/mnt/c/Repositories/asmcrypto.js/src/aes/exports.js","/mnt/c/Repositories/asmcrypto.js/src/aes/aes.js","/mnt/c/Repositories/asmcrypto.js/src/aes/cbc/cbc.js","/mnt/c/Repositories/asmcrypto.js/src/aes/cbc/exports.js","/mnt/c/Repositories/asmcrypto.js/src/aes/gcm/gcm.js","/mnt/c/Repositories/asmcrypto.js/src/hash/hash.js","/mnt/c/Repositories/asmcrypto.js/src/aes/gcm/exports.js","/mnt/c/Repositories/asmcrypto.js/src/hash/sha1/sha1.js","/mnt/c/Repositories/asmcrypto.js/src/hash/sha1/sha1.asm.js","/mnt/c/Repositories/asmcrypto.js/src/hash/sha1/exports.js","/mnt/c/Repositories/asmcrypto.js/src/hash/sha256/sha256.js","/mnt/c/Repositories/asmcrypto.js/src/hash/sha256/sha256.asm.js","/mnt/c/Repositories/asmcrypto.js/src/hash/sha256/exports.js","/mnt/c/Repositories/asmcrypto.js/src/hmac/hmac.js","/mnt/c/Repositories/asmcrypto.js/src/hmac/hmac-sha1.js","/mnt/c/Repositories/asmcrypto.js/src/hmac/exports-hmac-sha1.js","/mnt/c/Repositories/asmcrypto.js/src/hmac/hmac-sha256.js","/mnt/c/Repositories/asmcrypto.js/src/hmac/exports-hmac-sha256.js","/mnt/c/Repositories/asmcrypto.js/src/pbkdf2/pbkdf2.js","/mnt/c/Repositories/asmcrypto.js/src/pbkdf2/pbkdf2-hmac-sha1.js","/mnt/c/Repositories/asmcrypto.js/src/pbkdf2/exports-pbkdf2-hmac-sha1.js","/mnt/c/Repositories/asmcrypto.js/src/pbkdf2/pbkdf2-hmac-sha256.js","/mnt/c/Repositories/asmcrypto.js/src/pbkdf2/exports-pbkdf2-hmac-sha256.js","/mnt/c/Repositories/asmcrypto.js/src/random/random.js","/mnt/c/Repositories/asmcrypto.js/src/random/isaac.js","/mnt/c/Repositories/asmcrypto.js/src/bignum/bigint.asm.js","/mnt/c/Repositories/asmcrypto.js/src/bignum/bignum.js","/mnt/c/Repositories/asmcrypto.js/src/bignum/extgcd.js","/mnt/c/Repositories/asmcrypto.js/src/bignum/modulus.js","/mnt/c/Repositories/asmcrypto.js/src/bignum/prime.js","/mnt/c/Repositories/asmcrypto.js/src/bignum/exports.js","/mnt/c/Repositories/asmcrypto.js/src/rsa/rsa.js","/mnt/c/Repositories/asmcrypto.js/src/rsa/pkcs1.js","/mnt/c/Repositories/asmcrypto.js/src/origin.js"],"names":["FloatArray","Float64Array","Float32Array","string_to_bytes","str","utf8","len","length","bytes","Uint8Array","i","j","c","charCodeAt","Error","subarray","bytes_to_string","chars","Array","b","String","fromCharCode","apply","slice","bytes_to_hex","arr","h","toString","bytes_to_base64","btoa","is_number","a","is_string","is_buffer","ArrayBuffer","is_bytes","is_typed_array","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","_heap_init","constructor","heap","heapSize","size","byteLength","_heap_write","hpos","data","dpos","dlen","hlen","wlen","set","IllegalStateError","err","this","arguments","message","stack","IllegalArgumentError","SecurityError","prototype","Object","create","name","value","AES_asm","gexp3","glog3","ginit_done","gmul","aes_sbox","aes_sinv","aes_enc","aes_dec","aes_init","_s","s","x","d","ginit","t","wrapper","foreign","buffer","asm","stdlib","S0","S1","S2","S3","I0","I1","I2","I3","N0","N1","N2","N3","M0","M1","M2","M3","H0","H1","H2","H3","R","HEAP","DATA","_core","k","r","x0","x1","x2","x3","t1","t2","t3","y0","y1","y2","y3","_ecb_enc","_ecb_dec","_cbc_enc","_cbc_dec","_cfb_enc","_cfb_dec","_ofb","_ctr","_gcm_mac","z0","z1","z2","z3","set_rounds","set_state","s0","s1","s2","s3","set_iv","i0","i1","i2","i3","set_nonce","n0","n1","n2","n3","set_mask","m0","m1","m2","m3","set_counter","c0","c1","c2","c3","get_state","pos","get_iv","gcm_init","cipher","mode","ret","_cipher_modes","mac","_mac_modes","set_key","ks","k0","k1","k2","k3","k4","k5","k6","k7","ekeys","dkeys","rcon","jj","ENC","ECB","CBC","CFB","OFB","CTR","DEC","MAC","GCM","HEAP_DATA","_AES_heap_instance","_AES_asm_instance","AES","[object Object]","key","iv","padding","nonce","counter","counterSize","AES_reset","undefined","TypeError","keylen","keyview","DataView","byteOffset","getUint32","mask","Math","pow","view","ivview","result","AES_set_key","AES_set_iv","AES_set_padding","amode","rpos","rlen","presult","prlen","AES_Encrypt_process","plen","hasOwnProperty","p","AES_Decrypt_process","pad","pcheck","AES_CBC","super","BLOCK_SIZE","AES_Encrypt_finish","AES_Decrypt_finish","encrypt","SyntaxError","decrypt","Encrypt","Decrypt","_AES_GCM_data_maxLength","AES_GCM","adata","tagSize","reset","AES_GCM_reset","AES_GCM_encrypt","AES_GCM_decrypt","RangeError","alen","clen","gamma0","tlen","atag","acheck","result1","AES_GCM_Decrypt_process","result2","AES_GCM_Decrypt_finish","AES_GCM_Encrypt_process","AES_GCM_Encrypt_finish","noncelen","noncebuf","_gcm_mac_process","nonceview","hash_reset","hash_process","process","hash_finish","finish","HASH_SIZE","_sha1_block_size","_sha1_hash_size","sha1_constructor","options","H4","TOTAL0","TOTAL1","I4","O0","O1","O2","O3","O4","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","e","n","w16","w17","w18","w19","w20","w21","w22","w23","w24","w25","w26","w27","w28","w29","w30","w31","w32","w33","w34","w35","w36","w37","w38","w39","w40","w41","w42","w43","w44","w45","w46","w47","w48","w49","w50","w51","w52","w53","w54","w55","w56","w57","w58","w59","w60","w61","w62","w63","w64","w65","w66","w67","w68","w69","w70","w71","w72","w73","w74","w75","w76","w77","w78","w79","_core_heap","offset","_state_to_heap","output","init","h0","h1","h2","h3","h4","total0","total1","hashed","hmac_reset","_hmac_opad","hmac_init","p0","p1","p2","p3","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13","p14","p15","hmac_finish","t0","t4","pbkdf2_generate_block","block","count","sha1_asm","NAME","sha1_prototype","sha1_instance","get_sha1_instance","sha1_bytes","SHA1","hex","base64","_sha256_block_size","_sha256_hash_size","sha256_constructor","H5","H6","H7","I5","I6","I7","O5","O6","O7","f","g","h5","h6","h7","t5","t6","t7","sha256_asm","sha256_prototype","sha256_instance","get_sha256_instance","sha256_bytes","SHA256","hmac_constructor","hash","HMAC_SIZE","verify","password","_hmac_key","_hmac_init_verify","hmac_process","hmac_prototype","hmac_sha1_constructor","call","ipad","inner_result","opad","diff","hmac_sha1_prototype","hmac_sha1_instance","get_hmac_sha1_instance","hmac_sha1_bytes","HMAC_SHA1","hmac_sha256_constructor","hmac_sha256_prototype","hmac_sha256_instance","get_hmac_sha256_instance","hmac_sha256_bytes","HMAC_SHA256","pbkdf2_constructor","hmac","pbkdf2_reset","pbkdf2_prototype","pbkdf2_hmac_sha1_constructor","generate","salt","blocks","ceil","l","tmp","pbkdf2_hmac_sha1_prototype","pbkdf2_hmac_sha1_instance","pbkdf2_hmac_sha1_bytes","iterations","dklen","pbkdf2_hmac_sha1_hex","pbkdf2_hmac_sha1_base64","PBKDF2","PBKDF2_HMAC_SHA1","pbkdf2_hmac_sha256_constructor","pbkdf2_hmac_sha256_prototype","pbkdf2_hmac_sha256_instance","get_pbkdf2_hmac_sha256_instance","pbkdf2_hmac_sha256_bytes","_global_crypto_getRandomValues","PBKDF2_HMAC_SHA256","ISAAC","m","acc","brs","cnt","gnt","randinit","mix","prng","y","seed","rand","_global_console","console","_global_date_now","Date","now","_global_math_random","random","_global_performance","performance","_global_crypto","crypto","msCrypto","getRandomValues","_hires_now","_isaac_rand","_isaac_seed","_isaac_counter","_isaac_weak_seeded","_isaac_seeded","_random_estimated_entropy","_random_required_entropy","_random_warn_callstacks","exports","_random_skip_system_rng_warning","_random_allow_weak","_hires_epoch","Random_weak_seed","location","href","pid","title","pbkdf2","Random_seed","bpos","blen","buff","nonzero","Random_getValues","error","warn","Random_getNumber","bigint_asm","SP","HEAP32","imul","sreset","salloc","sfree","cp","A","B","z","neg","lA","lR","cmp","lB","tst","add","sub","mul","al0","al1","al2","al3","al4","al5","al6","al7","ah0","ah1","ah2","ah3","ah4","ah5","ah6","ah7","bl0","bl1","bl2","bl3","bl4","bl5","bl6","bl7","bh0","bh1","bh2","bh3","bh4","bh5","bh6","bh7","r0","r1","r2","r3","r4","r5","r6","r7","r8","r9","r10","r11","r12","r13","r14","r15","u","v","w","Ai","Bj","Rk","sqr","dd","Aj","div","N","lN","D","lD","Q","u1","u0","v0","vh","vl","qh","ql","rh","rl","mredc","T","uh","ul","is_big_number","BigNumber_constructor","defineProperty","get","_bigint_asm","_bigint_stdlib","_bigint_heap","_BigNumber_ZERO_limbs","num","limbs","bitlen","sign","absnum","abs","BigNumber_ZERO","bitLength","BigNumberPrototype","Number","radix","substr","replace","toBytes","bytelen","valueOf","bits","clamp","clamped","slimbs","sliced","negate","negative","compare","that","alimbs","alimbcnt","blimbs","blimbcnt","rbitlen","rlimbcnt","rsign","rof","abitlen","asign","bbitlen","bsign","pA","pB","pR","subtract","multiply","square","divide","qlimbcnt","quotient","remainder","pQ","BigNumber_ONE","BigNumber_extGCD","sa","sb","a_cmp_b","q","xi","xj","lx","yi","yj","ly","gcd","Modulus","comodulus","floor","Number_extGCD","coefficient","comodulusRemainder","comodulusRemainderSquare","_Montgomery_reduce","nlimbs","nlimbcnt","pN","freeze","ModulusPrototype","_BigNumber_isMillerRabinProbablePrime","rounds","power","reduce","inverse","g2","gn","_primes","isProbablePrime","paranoia","s5","s17","l3","l5","l17","randomProbablePrime","filter","limbcnt","prime","divisors","push","_small_primes","remainders","LN2","seek","BigNumber","RSA_reset","RSA_encrypt","msg","RSA_decrypt","dp","dq","RSA_OAEP","label","RSA_MGF1_generate","hash_size","chunks","submask","chunk","RSA_PSS","saltLength","ZERO","ONE","extGCD","RSA_OAEP_prototype","key_size","data_length","ps_length","data_block","data_block_mask","seed_mask","lhash","ps_end","psz","RSA_PSS_prototype","slen","key_bits","message_length","salt_length","h_block","d_block","d_salt","m_block","m_hash","m_salt","d_block_mask","zbits","signature","h_block_verify","protocol","search","parseInt","atob"],"mappings":"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","file":"asmcrypto.min.js","sourcesContent":["export var FloatArray = typeof Float64Array !== \"undefined\" ? Float64Array : Float32Array; // make PhantomJS happy\n\nexport function string_to_bytes ( str, utf8 ) {\n    utf8 = !!utf8;\n\n    var len = str.length,\n        bytes = new Uint8Array( utf8 ? 4*len : len );\n\n    for ( var i = 0, j = 0; i < len; i++ ) {\n        var c = str.charCodeAt(i);\n\n        if ( utf8 && 0xd800 <= c && c <= 0xdbff ) {\n            if ( ++i >= len ) throw new Error( \"Malformed string, low surrogate expected at position \" + i );\n            c = ( (c ^ 0xd800) << 10 ) | 0x10000 | ( str.charCodeAt(i) ^ 0xdc00 );\n        }\n        else if ( !utf8 && c >>> 8 ) {\n            throw new Error(\"Wide characters are not allowed.\");\n        }\n\n        if ( !utf8 || c <= 0x7f ) {\n            bytes[j++] = c;\n        }\n        else if ( c <= 0x7ff ) {\n            bytes[j++] = 0xc0 | (c >> 6);\n            bytes[j++] = 0x80 | (c & 0x3f);\n        }\n        else if ( c <= 0xffff ) {\n            bytes[j++] = 0xe0 | (c >> 12);\n            bytes[j++] = 0x80 | (c >> 6 & 0x3f);\n            bytes[j++] = 0x80 | (c & 0x3f);\n        }\n        else {\n            bytes[j++] = 0xf0 | (c >> 18);\n            bytes[j++] = 0x80 | (c >> 12 & 0x3f);\n            bytes[j++] = 0x80 | (c >> 6 & 0x3f);\n            bytes[j++] = 0x80 | (c & 0x3f);\n        }\n    }\n\n    return bytes.subarray(0, j);\n}\n\nexport function hex_to_bytes ( str ) {\n    var len = str.length;\n    if ( len & 1 ) {\n        str = '0'+str;\n        len++;\n    }\n    var bytes = new Uint8Array(len>>1);\n    for ( var i = 0; i < len; i += 2 ) {\n        bytes[i>>1] = parseInt( str.substr( i, 2), 16 );\n    }\n    return bytes;\n}\n\nexport function base64_to_bytes ( str ) {\n    return string_to_bytes( atob( str ) );\n}\n\nexport function bytes_to_string ( bytes, utf8 ) {\n    utf8 = !!utf8;\n\n    var len = bytes.length,\n        chars = new Array(len);\n\n    for ( var i = 0, j = 0; i < len; i++ ) {\n        var b = bytes[i];\n        if ( !utf8 || b < 128 ) {\n            chars[j++] = b;\n        }\n        else if ( b >= 192 && b < 224 && i+1 < len ) {\n            chars[j++] = ( (b & 0x1f) << 6 ) | (bytes[++i] & 0x3f);\n        }\n        else if ( b >= 224 && b < 240 && i+2 < len ) {\n            chars[j++] = ( (b & 0xf) << 12 ) | ( (bytes[++i] & 0x3f) << 6 ) | (bytes[++i] & 0x3f);\n        }\n        else if ( b >= 240 && b < 248 && i+3 < len ) {\n            var c = ( (b & 7) << 18 ) | ( (bytes[++i] & 0x3f) << 12 ) | ( (bytes[++i] & 0x3f) << 6 ) | (bytes[++i] & 0x3f);\n            if ( c <= 0xffff ) {\n                chars[j++] = c;\n            }\n            else {\n                c ^= 0x10000;\n                chars[j++] = 0xd800 | (c >> 10);\n                chars[j++] = 0xdc00 | (c & 0x3ff);\n            }\n        }\n        else {\n            throw new Error(\"Malformed UTF8 character at byte offset \" + i);\n        }\n    }\n\n    var str = '',\n        bs = 16384;\n    for ( var i = 0; i < j; i += bs ) {\n        str += String.fromCharCode.apply( String, chars.slice( i, i+bs <= j ? i+bs : j ) );\n    }\n\n    return str;\n}\n\nexport function bytes_to_hex ( arr ) {\n    var str = '';\n    for ( var i = 0; i < arr.length; i++ ) {\n        var h = ( arr[i] & 0xff ).toString(16);\n        if ( h.length < 2 ) str += '0';\n        str += h;\n    }\n    return str;\n}\n\nexport function bytes_to_base64 ( arr ) {\n    return btoa( bytes_to_string(arr) );\n}\n\nexport function pow2_ceil ( a ) {\n    a -= 1;\n    a |= a >>> 1;\n    a |= a >>> 2;\n    a |= a >>> 4;\n    a |= a >>> 8;\n    a |= a >>> 16;\n    a += 1;\n    return a;\n}\n\nexport function is_number ( a ) {\n    return ( typeof a === 'number' );\n}\n\nexport function is_string ( a ) {\n    return ( typeof a === 'string' );\n}\n\nexport function is_buffer ( a ) {\n    return ( a instanceof ArrayBuffer );\n}\n\nexport function is_bytes ( a ) {\n    return ( a instanceof Uint8Array );\n}\n\nexport function is_typed_array ( a ) {\n    return ( a instanceof Int8Array ) || ( a instanceof Uint8Array )\n        || ( a instanceof Int16Array ) || ( a instanceof Uint16Array )\n        || ( a instanceof Int32Array ) || ( a instanceof Uint32Array )\n        || ( a instanceof Float32Array )\n        || ( a instanceof Float64Array );\n}\n\nexport function _heap_init ( constructor, heap, heapSize ) {\n    var size = heap ? heap.byteLength : heapSize || 65536;\n\n    if ( size & 0xfff || size <= 0 )\n        throw new Error(\"heap size must be a positive integer and a multiple of 4096\");\n\n    heap = heap || new constructor( new ArrayBuffer(size) );\n\n    return heap;\n}\n\nexport function _heap_write ( heap, hpos, data, dpos, dlen ) {\n    var hlen = heap.length - hpos,\n        wlen = ( hlen < dlen ) ? hlen : dlen;\n\n    heap.set( data.subarray( dpos, dpos+wlen ), hpos );\n\n    return wlen;\n}\n","export function IllegalStateError () { var err = Error.apply( this, arguments ); this.message = err.message, this.stack = err.stack; }\nIllegalStateError.prototype = Object.create( Error.prototype, { name: { value: 'IllegalStateError' } } );\n\nexport function IllegalArgumentError () { var err = Error.apply( this, arguments ); this.message = err.message, this.stack = err.stack; }\nIllegalArgumentError.prototype = Object.create( Error.prototype, { name: { value: 'IllegalArgumentError' } } );\n\nexport function SecurityError () { var err = Error.apply( this, arguments ); this.message = err.message, this.stack = err.stack; }\nSecurityError.prototype = Object.create( Error.prototype, { name: { value: 'SecurityError' } } );\n","/**\n * @file {@link http://asmjs.org Asm.js} implementation of the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard Advanced Encryption Standard}.\n * @author Artem S Vybornov <vybornov@gmail.com>\n * @license MIT\n */\nexport var AES_asm = function () {\n    \"use strict\";\n\n    /**\n     * Galois Field stuff init flag\n     */\n    var ginit_done = false;\n\n    /**\n     * Galois Field exponentiation and logarithm tables for 3 (the generator)\n     */\n    var gexp3, glog3;\n\n    /**\n     * Init Galois Field tables\n     */\n    function ginit () {\n        gexp3 = [],\n        glog3 = [];\n\n        var a = 1, c, d;\n        for ( c = 0; c < 255; c++ ) {\n            gexp3[c] = a;\n\n            // Multiply by three\n            d = a & 0x80, a <<= 1, a &= 255;\n            if ( d === 0x80 ) a ^= 0x1b;\n            a ^= gexp3[c];\n\n            // Set the log table value\n            glog3[gexp3[c]] = c;\n        }\n        gexp3[255] = gexp3[0];\n        glog3[0] = 0;\n\n        ginit_done = true;\n    }\n\n    /**\n     * Galois Field multiplication\n     * @param {int} a\n     * @param {int} b\n     * @return {int}\n     */\n    function gmul ( a, b ) {\n        var c = gexp3[ ( glog3[a] + glog3[b] ) % 255 ];\n        if ( a === 0 || b === 0 ) c = 0;\n        return c;\n    }\n\n    /**\n     * Galois Field reciprocal\n     * @param {int} a\n     * @return {int}\n     */\n    function ginv ( a ) {\n        var i = gexp3[ 255 - glog3[a] ];\n        if ( a === 0 ) i = 0;\n        return i;\n    }\n\n    /**\n     * AES stuff init flag\n     */\n    var aes_init_done = false;\n\n    /**\n     * Encryption, Decryption, S-Box and KeyTransform tables\n     */\n    var aes_sbox, aes_sinv, aes_enc, aes_dec;\n\n    /**\n     * Init AES tables\n     */\n    function aes_init () {\n        if ( !ginit_done ) ginit();\n\n        // Calculates AES S-Box value\n        function _s ( a ) {\n            var c, s, x;\n            s = x = ginv(a);\n            for ( c = 0; c < 4; c++ ) {\n                s = ( (s << 1) | (s >>> 7) ) & 255;\n                x ^= s;\n            }\n            x ^= 99;\n            return x;\n        }\n\n        // Tables\n        aes_sbox = [],\n        aes_sinv = [],\n        aes_enc = [ [], [], [], [] ],\n        aes_dec = [ [], [], [], [] ];\n\n        for ( var i = 0; i < 256; i++ ) {\n            var s = _s(i);\n\n            // S-Box and its inverse\n            aes_sbox[i]  = s;\n            aes_sinv[s]  = i;\n\n            // Ecryption and Decryption tables\n            aes_enc[0][i] = ( gmul( 2, s ) << 24 )  | ( s << 16 )            | ( s << 8 )             | gmul( 3, s );\n            aes_dec[0][s] = ( gmul( 14, i ) << 24 ) | ( gmul( 9, i ) << 16 ) | ( gmul( 13, i ) << 8 ) | gmul( 11, i );\n            // Rotate tables\n            for ( var t = 1; t < 4; t++ ) {\n                aes_enc[t][i] = ( aes_enc[t-1][i] >>> 8 ) | ( aes_enc[t-1][i] << 24 );\n                aes_dec[t][s] = ( aes_dec[t-1][s] >>> 8 ) | ( aes_dec[t-1][s] << 24 );\n            }\n        }\n    }\n\n    /**\n     * Asm.js module constructor.\n     *\n     * <p>\n     * Heap buffer layout by offset:\n     * <pre>\n     * 0x0000   encryption key schedule\n     * 0x0400   decryption key schedule\n     * 0x0800   sbox\n     * 0x0c00   inv sbox\n     * 0x1000   encryption tables\n     * 0x2000   decryption tables\n     * 0x3000   reserved (future GCM multiplication lookup table)\n     * 0x4000   data\n     * </pre>\n     * Don't touch anything before <code>0x400</code>.\n     * </p>\n     *\n     * @alias AES_asm\n     * @class\n     * @param {Object} foreign - <i>ignored</i>\n     * @param {ArrayBuffer} buffer - heap buffer to link with\n     */\n    var wrapper = function ( foreign, buffer ) {\n        // Init AES stuff for the first time\n        if ( !aes_init_done ) aes_init();\n\n        // Fill up AES tables\n        var heap = new Uint32Array(buffer);\n        heap.set( aes_sbox, 0x0800>>2 );\n        heap.set( aes_sinv, 0x0c00>>2 );\n        for ( var i = 0; i < 4; i++ ) {\n            heap.set( aes_enc[i], ( 0x1000 + 0x400 * i )>>2 );\n            heap.set( aes_dec[i], ( 0x2000 + 0x400 * i )>>2 );\n        }\n\n        /**\n         * Calculate AES key schedules.\n         * @instance\n         * @memberof AES_asm\n         * @param {int} ks - key size, 4/6/8 (for 128/192/256-bit key correspondingly)\n         * @param {int} k0..k7 - key vector components\n         */\n        function set_key ( ks, k0, k1, k2, k3, k4, k5, k6, k7 ) {\n            var ekeys = heap.subarray( 0x000, 60 ),\n                dkeys = heap.subarray( 0x100, 0x100+60 );\n\n            // Encryption key schedule\n            ekeys.set( [ k0, k1, k2, k3, k4, k5, k6, k7 ] );\n            for ( var i = ks, rcon = 1; i < 4*ks+28; i++ ) {\n                var k = ekeys[i-1];\n                if ( ( i % ks === 0 ) || ( ks === 8 && i % ks === 4 ) ) {\n                    k = aes_sbox[k>>>24]<<24 ^ aes_sbox[k>>>16&255]<<16 ^ aes_sbox[k>>>8&255]<<8 ^ aes_sbox[k&255];\n                }\n                if ( i % ks === 0 ) {\n                    k = (k << 8) ^ (k >>> 24) ^ (rcon << 24);\n                    rcon = (rcon << 1) ^ ( (rcon & 0x80) ? 0x1b : 0 );\n                }\n                ekeys[i] = ekeys[i-ks] ^ k;\n            }\n\n            // Decryption key schedule\n            for ( var j = 0; j < i; j += 4 ) {\n                for ( var jj = 0; jj < 4; jj++ ) {\n                    var k = ekeys[i-(4+j)+(4-jj)%4];\n                    if ( j < 4 || j >= i-4 ) {\n                        dkeys[j+jj] = k;\n                    } else {\n                        dkeys[j+jj] = aes_dec[0][aes_sbox[k>>>24]]\n                                    ^ aes_dec[1][aes_sbox[k>>>16&255]]\n                                    ^ aes_dec[2][aes_sbox[k>>>8&255]]\n                                    ^ aes_dec[3][aes_sbox[k&255]];\n                    }\n                }\n            }\n\n            // Set rounds number\n            asm.set_rounds( ks + 5 );\n        }\n\n        // create library object with necessary properties\n        var stdlib = { Uint8Array: Uint8Array, Uint32Array: Uint32Array };\n\n        var asm = function ( stdlib, foreign, buffer ) {\n            \"use asm\";\n\n            var S0 = 0, S1 = 0, S2 = 0, S3 = 0,\n                I0 = 0, I1 = 0, I2 = 0, I3 = 0,\n                N0 = 0, N1 = 0, N2 = 0, N3 = 0,\n                M0 = 0, M1 = 0, M2 = 0, M3 = 0,\n                H0 = 0, H1 = 0, H2 = 0, H3 = 0,\n                R = 0;\n\n            var HEAP = new stdlib.Uint32Array(buffer),\n                DATA = new stdlib.Uint8Array(buffer);\n\n            /**\n             * AES core\n             * @param {int} k - precomputed key schedule offset\n             * @param {int} s - precomputed sbox table offset\n             * @param {int} t - precomputed round table offset\n             * @param {int} r - number of inner rounds to perform\n             * @param {int} x0..x3 - 128-bit input block vector\n             */\n            function _core ( k, s, t, r, x0, x1, x2, x3 ) {\n                k = k|0;\n                s = s|0;\n                t = t|0;\n                r = r|0;\n                x0 = x0|0;\n                x1 = x1|0;\n                x2 = x2|0;\n                x3 = x3|0;\n\n                var t1 = 0, t2 = 0, t3 = 0,\n                    y0 = 0, y1 = 0, y2 = 0, y3 = 0,\n                    i = 0;\n\n                t1 = t|0x400, t2 = t|0x800, t3 = t|0xc00;\n\n                // round 0\n                x0 = x0 ^ HEAP[(k|0)>>2],\n                x1 = x1 ^ HEAP[(k|4)>>2],\n                x2 = x2 ^ HEAP[(k|8)>>2],\n                x3 = x3 ^ HEAP[(k|12)>>2];\n\n                // round 1..r\n                for ( i = 16; (i|0) <= (r<<4); i = (i+16)|0 ) {\n                    y0 = HEAP[(t|x0>>22&1020)>>2] ^ HEAP[(t1|x1>>14&1020)>>2] ^ HEAP[(t2|x2>>6&1020)>>2] ^ HEAP[(t3|x3<<2&1020)>>2] ^ HEAP[(k|i|0)>>2],\n                    y1 = HEAP[(t|x1>>22&1020)>>2] ^ HEAP[(t1|x2>>14&1020)>>2] ^ HEAP[(t2|x3>>6&1020)>>2] ^ HEAP[(t3|x0<<2&1020)>>2] ^ HEAP[(k|i|4)>>2],\n                    y2 = HEAP[(t|x2>>22&1020)>>2] ^ HEAP[(t1|x3>>14&1020)>>2] ^ HEAP[(t2|x0>>6&1020)>>2] ^ HEAP[(t3|x1<<2&1020)>>2] ^ HEAP[(k|i|8)>>2],\n                    y3 = HEAP[(t|x3>>22&1020)>>2] ^ HEAP[(t1|x0>>14&1020)>>2] ^ HEAP[(t2|x1>>6&1020)>>2] ^ HEAP[(t3|x2<<2&1020)>>2] ^ HEAP[(k|i|12)>>2];\n                    x0 = y0, x1 = y1, x2 = y2, x3 = y3;\n                }\n\n                // final round\n                S0 = HEAP[(s|x0>>22&1020)>>2]<<24 ^ HEAP[(s|x1>>14&1020)>>2]<<16 ^ HEAP[(s|x2>>6&1020)>>2]<<8 ^ HEAP[(s|x3<<2&1020)>>2] ^ HEAP[(k|i|0)>>2],\n                S1 = HEAP[(s|x1>>22&1020)>>2]<<24 ^ HEAP[(s|x2>>14&1020)>>2]<<16 ^ HEAP[(s|x3>>6&1020)>>2]<<8 ^ HEAP[(s|x0<<2&1020)>>2] ^ HEAP[(k|i|4)>>2],\n                S2 = HEAP[(s|x2>>22&1020)>>2]<<24 ^ HEAP[(s|x3>>14&1020)>>2]<<16 ^ HEAP[(s|x0>>6&1020)>>2]<<8 ^ HEAP[(s|x1<<2&1020)>>2] ^ HEAP[(k|i|8)>>2],\n                S3 = HEAP[(s|x3>>22&1020)>>2]<<24 ^ HEAP[(s|x0>>14&1020)>>2]<<16 ^ HEAP[(s|x1>>6&1020)>>2]<<8 ^ HEAP[(s|x2<<2&1020)>>2] ^ HEAP[(k|i|12)>>2];\n            }\n\n            /**\n             * ECB mode encryption\n             * @param {int} x0..x3 - 128-bit input block vector\n             */\n            function _ecb_enc ( x0, x1, x2, x3 ) {\n                x0 = x0|0;\n                x1 = x1|0;\n                x2 = x2|0;\n                x3 = x3|0;\n\n                _core(\n                    0x0000, 0x0800, 0x1000,\n                    R,\n                    x0,\n                    x1,\n                    x2,\n                    x3\n                );\n            }\n\n            /**\n             * ECB mode decryption\n             * @param {int} x0..x3 - 128-bit input block vector\n             */\n            function _ecb_dec ( x0, x1, x2, x3 ) {\n                x0 = x0|0;\n                x1 = x1|0;\n                x2 = x2|0;\n                x3 = x3|0;\n\n                var t = 0;\n\n                _core(\n                    0x0400, 0x0c00, 0x2000,\n                    R,\n                    x0,\n                    x3,\n                    x2,\n                    x1\n                );\n\n                t = S1, S1 = S3, S3 = t;\n            }\n\n\n            /**\n             * CBC mode encryption\n             * @param {int} x0..x3 - 128-bit input block vector\n             */\n            function _cbc_enc ( x0, x1, x2, x3 ) {\n                x0 = x0|0;\n                x1 = x1|0;\n                x2 = x2|0;\n                x3 = x3|0;\n\n                _core(\n                    0x0000, 0x0800, 0x1000,\n                    R,\n                    I0 ^ x0,\n                    I1 ^ x1,\n                    I2 ^ x2,\n                    I3 ^ x3\n                );\n\n                I0 = S0,\n                I1 = S1,\n                I2 = S2,\n                I3 = S3;\n            }\n\n            /**\n             * CBC mode decryption\n             * @param {int} x0..x3 - 128-bit input block vector\n             */\n            function _cbc_dec ( x0, x1, x2, x3 ) {\n                x0 = x0|0;\n                x1 = x1|0;\n                x2 = x2|0;\n                x3 = x3|0;\n\n                var t = 0;\n\n                _core(\n                    0x0400, 0x0c00, 0x2000,\n                    R,\n                    x0,\n                    x3,\n                    x2,\n                    x1\n                );\n\n                t = S1, S1 = S3, S3 = t;\n\n                S0 = S0 ^ I0,\n                S1 = S1 ^ I1,\n                S2 = S2 ^ I2,\n                S3 = S3 ^ I3;\n\n                I0 = x0,\n                I1 = x1,\n                I2 = x2,\n                I3 = x3;\n            }\n\n            /**\n             * CFB mode encryption\n             * @param {int} x0..x3 - 128-bit input block vector\n             */\n            function _cfb_enc ( x0, x1, x2, x3 ) {\n                x0 = x0|0;\n                x1 = x1|0;\n                x2 = x2|0;\n                x3 = x3|0;\n\n                _core(\n                    0x0000, 0x0800, 0x1000,\n                    R,\n                    I0,\n                    I1,\n                    I2,\n                    I3\n                );\n\n                I0 = S0 = S0 ^ x0,\n                I1 = S1 = S1 ^ x1,\n                I2 = S2 = S2 ^ x2,\n                I3 = S3 = S3 ^ x3;\n            }\n\n\n            /**\n             * CFB mode decryption\n             * @param {int} x0..x3 - 128-bit input block vector\n             */\n            function _cfb_dec ( x0, x1, x2, x3 ) {\n                x0 = x0|0;\n                x1 = x1|0;\n                x2 = x2|0;\n                x3 = x3|0;\n\n                _core(\n                    0x0000, 0x0800, 0x1000,\n                    R,\n                    I0,\n                    I1,\n                    I2,\n                    I3\n                );\n\n                S0 = S0 ^ x0,\n                S1 = S1 ^ x1,\n                S2 = S2 ^ x2,\n                S3 = S3 ^ x3;\n\n                I0 = x0,\n                I1 = x1,\n                I2 = x2,\n                I3 = x3;\n            }\n\n            /**\n             * OFB mode encryption / decryption\n             * @param {int} x0..x3 - 128-bit input block vector\n             */\n            function _ofb ( x0, x1, x2, x3 ) {\n                x0 = x0|0;\n                x1 = x1|0;\n                x2 = x2|0;\n                x3 = x3|0;\n\n                _core(\n                    0x0000, 0x0800, 0x1000,\n                    R,\n                    I0,\n                    I1,\n                    I2,\n                    I3\n                );\n\n                I0 = S0,\n                I1 = S1,\n                I2 = S2,\n                I3 = S3;\n\n                S0 = S0 ^ x0,\n                S1 = S1 ^ x1,\n                S2 = S2 ^ x2,\n                S3 = S3 ^ x3;\n            }\n\n            /**\n             * CTR mode encryption / decryption\n             * @param {int} x0..x3 - 128-bit input block vector\n             */\n            function _ctr ( x0, x1, x2, x3 ) {\n                x0 = x0|0;\n                x1 = x1|0;\n                x2 = x2|0;\n                x3 = x3|0;\n\n                _core(\n                    0x0000, 0x0800, 0x1000,\n                    R,\n                    N0,\n                    N1,\n                    N2,\n                    N3\n                );\n\n                N3 = ( ~M3 & N3 ) | M3 & ( N3 + 1 ),\n                N2 = ( ~M2 & N2 ) | M2 & ( N2 + ( (N3|0) == 0 ) ),\n                N1 = ( ~M1 & N1 ) | M1 & ( N1 + ( (N2|0) == 0 ) ),\n                N0 = ( ~M0 & N0 ) | M0 & ( N0 + ( (N1|0) == 0 ) );\n\n                S0 = S0 ^ x0,\n                S1 = S1 ^ x1,\n                S2 = S2 ^ x2,\n                S3 = S3 ^ x3;\n            }\n\n            /**\n             * GCM mode MAC calculation\n             * @param {int} x0..x3 - 128-bit input block vector\n             */\n            function _gcm_mac ( x0, x1, x2, x3 ) {\n                x0 = x0|0;\n                x1 = x1|0;\n                x2 = x2|0;\n                x3 = x3|0;\n\n                var y0 = 0, y1 = 0, y2 = 0, y3 = 0,\n                    z0 = 0, z1 = 0, z2 = 0, z3 = 0,\n                    i = 0, c = 0;\n\n                x0 = x0 ^ I0,\n                x1 = x1 ^ I1,\n                x2 = x2 ^ I2,\n                x3 = x3 ^ I3;\n\n                y0 = H0|0,\n                y1 = H1|0,\n                y2 = H2|0,\n                y3 = H3|0;\n\n                for ( ; (i|0) < 128; i = (i + 1)|0 ) {\n                    if ( y0 >>> 31 ) {\n                        z0 = z0 ^ x0,\n                        z1 = z1 ^ x1,\n                        z2 = z2 ^ x2,\n                        z3 = z3 ^ x3;\n                    }\n\n                    y0 = (y0 << 1) | (y1 >>> 31),\n                    y1 = (y1 << 1) | (y2 >>> 31),\n                    y2 = (y2 << 1) | (y3 >>> 31),\n                    y3 = (y3 << 1);\n\n                    c = x3 & 1;\n\n                    x3 = (x3 >>> 1) | (x2 << 31),\n                    x2 = (x2 >>> 1) | (x1 << 31),\n                    x1 = (x1 >>> 1) | (x0 << 31),\n                    x0 = (x0 >>> 1);\n\n                    if ( c ) x0 = x0 ^ 0xe1000000;\n                }\n\n                I0 = z0,\n                I1 = z1,\n                I2 = z2,\n                I3 = z3;\n            }\n\n            /**\n             * Set the internal rounds number.\n             * @instance\n             * @memberof AES_asm\n             * @param {int} r - number if inner AES rounds\n             */\n            function set_rounds ( r ) {\n                r = r|0;\n                R = r;\n            }\n\n            /**\n             * Populate the internal state of the module.\n             * @instance\n             * @memberof AES_asm\n             * @param {int} s0...s3 - state vector\n             */\n            function set_state ( s0, s1, s2, s3 ) {\n                s0 = s0|0;\n                s1 = s1|0;\n                s2 = s2|0;\n                s3 = s3|0;\n\n                S0 = s0,\n                S1 = s1,\n                S2 = s2,\n                S3 = s3;\n            }\n\n            /**\n             * Populate the internal iv of the module.\n             * @instance\n             * @memberof AES_asm\n             * @param {int} i0...i3 - iv vector\n             */\n            function set_iv ( i0, i1, i2, i3 ) {\n                i0 = i0|0;\n                i1 = i1|0;\n                i2 = i2|0;\n                i3 = i3|0;\n\n                I0 = i0,\n                I1 = i1,\n                I2 = i2,\n                I3 = i3;\n            }\n\n            /**\n             * Set nonce for CTR-family modes.\n             * @instance\n             * @memberof AES_asm\n             * @param {int} n0..n3 - nonce vector\n             */\n            function set_nonce ( n0, n1, n2, n3 ) {\n                n0 = n0|0;\n                n1 = n1|0;\n                n2 = n2|0;\n                n3 = n3|0;\n\n                N0 = n0,\n                N1 = n1,\n                N2 = n2,\n                N3 = n3;\n            }\n\n            /**\n             * Set counter mask for CTR-family modes.\n             * @instance\n             * @memberof AES_asm\n             * @param {int} m0...m3 - counter mask vector\n             */\n            function set_mask ( m0, m1, m2, m3 ) {\n                m0 = m0|0;\n                m1 = m1|0;\n                m2 = m2|0;\n                m3 = m3|0;\n\n                M0 = m0,\n                M1 = m1,\n                M2 = m2,\n                M3 = m3;\n            }\n\n            /**\n             * Set counter for CTR-family modes.\n             * @instance\n             * @memberof AES_asm\n             * @param {int} c0...c3 - counter vector\n             */\n            function set_counter ( c0, c1, c2, c3 ) {\n                c0 = c0|0;\n                c1 = c1|0;\n                c2 = c2|0;\n                c3 = c3|0;\n\n                N3 = ( ~M3 & N3 ) | M3 & c3,\n                N2 = ( ~M2 & N2 ) | M2 & c2,\n                N1 = ( ~M1 & N1 ) | M1 & c1,\n                N0 = ( ~M0 & N0 ) | M0 & c0;\n            }\n\n            /**\n             * Store the internal state vector into the heap.\n             * @instance\n             * @memberof AES_asm\n             * @param {int} pos - offset where to put the data\n             * @return {int} The number of bytes have been written into the heap, always 16.\n             */\n            function get_state ( pos ) {\n                pos = pos|0;\n\n                if ( pos & 15 ) return -1;\n\n                DATA[pos|0] = S0>>>24,\n                DATA[pos|1] = S0>>>16&255,\n                DATA[pos|2] = S0>>>8&255,\n                DATA[pos|3] = S0&255,\n                DATA[pos|4] = S1>>>24,\n                DATA[pos|5] = S1>>>16&255,\n                DATA[pos|6] = S1>>>8&255,\n                DATA[pos|7] = S1&255,\n                DATA[pos|8] = S2>>>24,\n                DATA[pos|9] = S2>>>16&255,\n                DATA[pos|10] = S2>>>8&255,\n                DATA[pos|11] = S2&255,\n                DATA[pos|12] = S3>>>24,\n                DATA[pos|13] = S3>>>16&255,\n                DATA[pos|14] = S3>>>8&255,\n                DATA[pos|15] = S3&255;\n\n                return 16;\n            }\n\n            /**\n             * Store the internal iv vector into the heap.\n             * @instance\n             * @memberof AES_asm\n             * @param {int} pos - offset where to put the data\n             * @return {int} The number of bytes have been written into the heap, always 16.\n             */\n            function get_iv ( pos ) {\n                pos = pos|0;\n\n                if ( pos & 15 ) return -1;\n\n                DATA[pos|0] = I0>>>24,\n                DATA[pos|1] = I0>>>16&255,\n                DATA[pos|2] = I0>>>8&255,\n                DATA[pos|3] = I0&255,\n                DATA[pos|4] = I1>>>24,\n                DATA[pos|5] = I1>>>16&255,\n                DATA[pos|6] = I1>>>8&255,\n                DATA[pos|7] = I1&255,\n                DATA[pos|8] = I2>>>24,\n                DATA[pos|9] = I2>>>16&255,\n                DATA[pos|10] = I2>>>8&255,\n                DATA[pos|11] = I2&255,\n                DATA[pos|12] = I3>>>24,\n                DATA[pos|13] = I3>>>16&255,\n                DATA[pos|14] = I3>>>8&255,\n                DATA[pos|15] = I3&255;\n\n                return 16;\n            }\n\n            /**\n             * GCM initialization.\n             * @instance\n             * @memberof AES_asm\n             */\n            function gcm_init ( ) {\n                _ecb_enc( 0, 0, 0, 0 );\n                H0 = S0,\n                H1 = S1,\n                H2 = S2,\n                H3 = S3;\n            }\n\n            /**\n             * Perform ciphering operation on the supplied data.\n             * @instance\n             * @memberof AES_asm\n             * @param {int} mode - block cipher mode (see {@link AES_asm} mode constants)\n             * @param {int} pos - offset of the data being processed\n             * @param {int} len - length of the data being processed\n             * @return {int} Actual amount of data have been processed.\n             */\n            function cipher ( mode, pos, len ) {\n                mode = mode|0;\n                pos = pos|0;\n                len = len|0;\n\n                var ret = 0;\n\n                if ( pos & 15 ) return -1;\n\n                while ( (len|0) >= 16 ) {\n                    _cipher_modes[mode&7](\n                        DATA[pos|0]<<24 | DATA[pos|1]<<16 | DATA[pos|2]<<8 | DATA[pos|3],\n                        DATA[pos|4]<<24 | DATA[pos|5]<<16 | DATA[pos|6]<<8 | DATA[pos|7],\n                        DATA[pos|8]<<24 | DATA[pos|9]<<16 | DATA[pos|10]<<8 | DATA[pos|11],\n                        DATA[pos|12]<<24 | DATA[pos|13]<<16 | DATA[pos|14]<<8 | DATA[pos|15]\n                    );\n\n                    DATA[pos|0] = S0>>>24,\n                    DATA[pos|1] = S0>>>16&255,\n                    DATA[pos|2] = S0>>>8&255,\n                    DATA[pos|3] = S0&255,\n                    DATA[pos|4] = S1>>>24,\n                    DATA[pos|5] = S1>>>16&255,\n                    DATA[pos|6] = S1>>>8&255,\n                    DATA[pos|7] = S1&255,\n                    DATA[pos|8] = S2>>>24,\n                    DATA[pos|9] = S2>>>16&255,\n                    DATA[pos|10] = S2>>>8&255,\n                    DATA[pos|11] = S2&255,\n                    DATA[pos|12] = S3>>>24,\n                    DATA[pos|13] = S3>>>16&255,\n                    DATA[pos|14] = S3>>>8&255,\n                    DATA[pos|15] = S3&255;\n\n                    ret = (ret + 16)|0,\n                    pos = (pos + 16)|0,\n                    len = (len - 16)|0;\n                }\n\n                return ret|0;\n            }\n\n            /**\n             * Calculates MAC of the supplied data.\n             * @instance\n             * @memberof AES_asm\n             * @param {int} mode - block cipher mode (see {@link AES_asm} mode constants)\n             * @param {int} pos - offset of the data being processed\n             * @param {int} len - length of the data being processed\n             * @return {int} Actual amount of data have been processed.\n             */\n            function mac ( mode, pos, len ) {\n                mode = mode|0;\n                pos = pos|0;\n                len = len|0;\n\n                var ret = 0;\n\n                if ( pos & 15 ) return -1;\n\n                while ( (len|0) >= 16 ) {\n                    _mac_modes[mode&1](\n                        DATA[pos|0]<<24 | DATA[pos|1]<<16 | DATA[pos|2]<<8 | DATA[pos|3],\n                        DATA[pos|4]<<24 | DATA[pos|5]<<16 | DATA[pos|6]<<8 | DATA[pos|7],\n                        DATA[pos|8]<<24 | DATA[pos|9]<<16 | DATA[pos|10]<<8 | DATA[pos|11],\n                        DATA[pos|12]<<24 | DATA[pos|13]<<16 | DATA[pos|14]<<8 | DATA[pos|15]\n                    );\n\n                    ret = (ret + 16)|0,\n                    pos = (pos + 16)|0,\n                    len = (len - 16)|0;\n                }\n\n                return ret|0;\n            }\n\n            /**\n             * AES cipher modes table (virual methods)\n             */\n            var _cipher_modes = [ _ecb_enc, _ecb_dec, _cbc_enc, _cbc_dec, _cfb_enc, _cfb_dec, _ofb, _ctr ];\n\n            /**\n             * AES MAC modes table (virual methods)\n             */\n            var _mac_modes = [ _cbc_enc, _gcm_mac ];\n\n            /**\n             * Asm.js module exports\n             */\n            return {\n                set_rounds: set_rounds,\n                set_state:  set_state,\n                set_iv:     set_iv,\n                set_nonce:  set_nonce,\n                set_mask:   set_mask,\n                set_counter:set_counter,\n                get_state:  get_state,\n                get_iv:     get_iv,\n                gcm_init:   gcm_init,\n                cipher:     cipher,\n                mac:        mac\n            };\n        }( stdlib, foreign, buffer );\n\n        asm.set_key = set_key;\n\n        return asm;\n    };\n\n    /**\n     * AES enciphering mode constants\n     * @enum {int}\n     * @const\n     */\n    wrapper.ENC = {\n        ECB: 0,\n        CBC: 2,\n        CFB: 4,\n        OFB: 6,\n        CTR: 7\n    },\n\n    /**\n     * AES deciphering mode constants\n     * @enum {int}\n     * @const\n     */\n    wrapper.DEC = {\n        ECB: 1,\n        CBC: 3,\n        CFB: 5,\n        OFB: 6,\n        CTR: 7\n    },\n\n    /**\n     * AES MAC mode constants\n     * @enum {int}\n     * @const\n     */\n    wrapper.MAC = {\n        CBC: 0,\n        GCM: 1\n    };\n\n    /**\n     * Heap data offset\n     * @type {int}\n     * @const\n     */\n    wrapper.HEAP_DATA = 0x4000;\n\n    return wrapper;\n}();\n","// shared asm.js module and heap\nimport {AES_asm} from './aes.asm';\n\nexport var _AES_heap_instance = new Uint8Array(0x100000); // 1MB\nexport var _AES_asm_instance  = AES_asm( null, _AES_heap_instance.buffer );\n","import {AES_asm} from './aes.asm';\nimport {_heap_init, _heap_write, is_bytes, is_number} from '../utils';\nimport {IllegalArgumentError, SecurityError} from '../errors';\n\nexport class AES {\n  constructor(key, iv, padding, heap, asm) {\n    this.nonce = null;\n    this.counter = 0;\n    this.counterSize = 0;\n\n    this.heap = _heap_init( Uint8Array, heap ).subarray( AES_asm.HEAP_DATA );\n    this.asm = asm || AES_asm( null, this.heap.buffer );\n    this.mode = null;\n    this.key = null;\n\n    this.AES_reset( key, iv, padding );\n  }\n\n  /**\n   * @param {Uint8Array} key\n   */\n  AES_set_key ( key ) {\n    if ( key !== undefined ) {\n      if ( !is_bytes(key) ) {\n        throw new TypeError(\"unexpected key type\");\n      }\n\n      var keylen = key.length;\n      if ( keylen !== 16 && keylen !== 24 && keylen !== 32 )\n        throw new IllegalArgumentError(\"illegal key size\");\n\n      var keyview = new DataView( key.buffer, key.byteOffset, key.byteLength );\n      this.asm.set_key(\n        keylen >> 2,\n        keyview.getUint32(0),\n        keyview.getUint32(4),\n        keyview.getUint32(8),\n        keyview.getUint32(12),\n        keylen > 16 ? keyview.getUint32(16) : 0,\n        keylen > 16 ? keyview.getUint32(20) : 0,\n        keylen > 24 ? keyview.getUint32(24) : 0,\n        keylen > 24 ? keyview.getUint32(28) : 0\n      );\n\n      this.key = key;\n    }\n    else if ( !this.key ) {\n      throw new Error(\"key is required\");\n    }\n  }\n\n  /**\n   * This should be mixin instead of inheritance\n   *\n   * @param {Uint8Array} nonce\n   * @param {number} [counter]\n   * @param {number} [size]\n   */\n  AES_CTR_set_options ( nonce, counter, size ) {\n    if ( size !== undefined ) {\n      if ( size < 8 || size > 48 )\n        throw new IllegalArgumentError(\"illegal counter size\");\n\n      this.counterSize = size;\n\n      var mask = Math.pow( 2, size ) - 1;\n      this.asm.set_mask( 0, 0, (mask / 0x100000000)|0, mask|0 );\n    }\n    else {\n      this.counterSize = size = 48;\n      this.asm.set_mask( 0, 0, 0xffff, 0xffffffff );\n    }\n\n    if ( nonce !== undefined ) {\n      if ( !is_bytes(nonce) ) {\n        throw new TypeError(\"unexpected nonce type\");\n      }\n\n      var len = nonce.length;\n      if ( !len || len > 16 )\n        throw new IllegalArgumentError(\"illegal nonce size\");\n\n      this.nonce = nonce;\n\n      var view = new DataView( new ArrayBuffer(16) );\n      new Uint8Array(view.buffer).set(nonce);\n\n      this.asm.set_nonce( view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12) );\n    }\n    else {\n      throw new Error(\"nonce is required\");\n    }\n\n    if ( counter !== undefined ) {\n      if ( !is_number(counter) )\n        throw new TypeError(\"unexpected counter type\");\n\n      if ( counter < 0 || counter >= Math.pow( 2, size ) )\n        throw new IllegalArgumentError(\"illegal counter value\");\n\n      this.counter = counter;\n\n      this.asm.set_counter( 0, 0, (counter / 0x100000000)|0, counter|0 );\n    }\n    else {\n      this.counter = 0;\n    }\n  }\n\n  /**\n   * @param {Uint8Array} iv\n   */\n  AES_set_iv ( iv ) {\n    if ( iv !== undefined ) {\n      if ( !is_bytes(iv) ) {\n        throw new TypeError(\"unexpected iv type\");\n      }\n\n      if ( iv.length !== 16 )\n        throw new IllegalArgumentError(\"illegal iv size\");\n\n      var ivview = new DataView( iv.buffer, iv.byteOffset, iv.byteLength );\n\n      this.iv = iv;\n      this.asm.set_iv( ivview.getUint32(0), ivview.getUint32(4), ivview.getUint32(8), ivview.getUint32(12) );\n    }\n    else {\n      this.iv = null;\n      this.asm.set_iv( 0, 0, 0, 0 );\n    }\n  }\n\n  /**\n   * @param {boolean} padding\n   */\n  AES_set_padding ( padding ) {\n    if ( padding !== undefined ) {\n      this.padding = !!padding;\n    }\n    else {\n      this.padding = true;\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} [iv]\n   * @param {boolean} [padding]\n   */\n  AES_reset ( key, iv, padding ) {\n    this.result = null;\n    this.pos = 0;\n    this.len = 0;\n\n    this.AES_set_key( key );\n    this.AES_set_iv( iv );\n    this.AES_set_padding( padding );\n\n    return this;\n  }\n\n\n  /**\n   * @param {Uint8Array} data\n   */\n  AES_Encrypt_process ( data ) {\n    if ( !is_bytes(data) )\n      throw new TypeError(\"data isn't of expected type\");\n\n    var asm = this.asm,\n      heap = this.heap,\n      amode = AES_asm.ENC[this.mode],\n      hpos = AES_asm.HEAP_DATA,\n      pos = this.pos,\n      len = this.len,\n      dpos = 0,\n      dlen = data.length || 0,\n      rpos = 0,\n      rlen = (len + dlen) & -16,\n      wlen = 0;\n\n    var result = new Uint8Array(rlen);\n\n    while ( dlen > 0 ) {\n      wlen = _heap_write( heap, pos+len, data, dpos, dlen );\n      len  += wlen;\n      dpos += wlen;\n      dlen -= wlen;\n\n      wlen = asm.cipher( amode, hpos + pos, len );\n\n      if ( wlen ) result.set( heap.subarray( pos, pos + wlen ), rpos );\n      rpos += wlen;\n\n      if ( wlen < len ) {\n        pos += wlen;\n        len -= wlen;\n      } else {\n        pos = 0;\n        len = 0;\n      }\n    }\n\n    this.result = result;\n    this.pos = pos;\n    this.len = len;\n\n    return this;\n  }\n\n  /**\n   * @param {Uint8Array} data\n   */\n  AES_Encrypt_finish ( data ) {\n    var presult = null,\n      prlen = 0;\n\n    if ( data !== undefined ) {\n      presult = this.AES_Encrypt_process( data ).result;\n      prlen = presult.length;\n    }\n\n    var asm = this.asm,\n      heap = this.heap,\n      amode = AES_asm.ENC[this.mode],\n      hpos = AES_asm.HEAP_DATA,\n      pos = this.pos,\n      len = this.len,\n      plen = 16 - len % 16,\n      rlen = len;\n\n    if ( this.hasOwnProperty('padding') ) {\n      if ( this.padding ) {\n        for ( var p = 0; p < plen; ++p ) heap[ pos + len + p ] = plen;\n        len += plen;\n        rlen = len;\n      }\n      else if ( len % 16 ) {\n        throw new IllegalArgumentError(\"data length must be a multiple of the block size\");\n      }\n    }\n    else {\n      len += plen;\n    }\n\n    var result = new Uint8Array( prlen + rlen );\n\n    if ( prlen ) result.set( presult );\n\n    if ( len ) asm.cipher( amode, hpos + pos, len );\n\n    if ( rlen ) result.set( heap.subarray( pos, pos + rlen ), prlen );\n\n    this.result = result;\n    this.pos = 0;\n    this.len = 0;\n\n    return this;\n  }\n\n  /**\n   * @param {Uint8Array} data\n   */\n  AES_Decrypt_process ( data ) {\n    if ( !is_bytes(data) )\n      throw new TypeError(\"data isn't of expected type\");\n\n    var asm = this.asm,\n      heap = this.heap,\n      amode = AES_asm.DEC[this.mode],\n      hpos = AES_asm.HEAP_DATA,\n      pos = this.pos,\n      len = this.len,\n      dpos = 0,\n      dlen = data.length || 0,\n      rpos = 0,\n      rlen = (len + dlen) & -16,\n      plen = 0,\n      wlen = 0;\n\n    if ( this.padding ) {\n      plen = len + dlen - rlen || 16;\n      rlen -= plen;\n    }\n\n    var result = new Uint8Array(rlen);\n\n    while ( dlen > 0 ) {\n      wlen = _heap_write( heap, pos+len, data, dpos, dlen );\n      len  += wlen;\n      dpos += wlen;\n      dlen -= wlen;\n\n      wlen = asm.cipher( amode, hpos + pos, len - ( !dlen ? plen : 0 ) );\n\n      if ( wlen ) result.set( heap.subarray( pos, pos + wlen ), rpos );\n      rpos += wlen;\n\n      if ( wlen < len ) {\n        pos += wlen;\n        len -= wlen;\n      } else {\n        pos = 0;\n        len = 0;\n      }\n    }\n\n    this.result = result;\n    this.pos = pos;\n    this.len = len;\n\n    return this;\n  }\n\n  /**\n   * @param {Uint8Array} data\n   */\n  AES_Decrypt_finish ( data ) {\n    var presult = null,\n      prlen = 0;\n\n    if ( data !== undefined ) {\n      presult = this.AES_Decrypt_process( data ).result;\n      prlen = presult.length;\n    }\n\n    var asm = this.asm,\n      heap = this.heap,\n      amode = AES_asm.DEC[this.mode],\n      hpos = AES_asm.HEAP_DATA,\n      pos = this.pos,\n      len = this.len,\n      rlen = len;\n\n    if ( len > 0 ) {\n      if ( len % 16 ) {\n        if ( this.hasOwnProperty('padding') ) {\n          throw new IllegalArgumentError(\"data length must be a multiple of the block size\");\n        } else {\n          len += 16 - len % 16;\n        }\n      }\n\n      asm.cipher( amode, hpos + pos, len );\n\n      if ( this.hasOwnProperty('padding') && this.padding ) {\n        var pad = heap[ pos + rlen - 1 ];\n        if ( pad < 1 || pad > 16 || pad > rlen )\n          throw new SecurityError(\"bad padding\");\n\n        var pcheck = 0;\n        for ( var i = pad; i > 1; i-- ) pcheck |= pad ^ heap[ pos + rlen - i ];\n        if ( pcheck )\n          throw new SecurityError(\"bad padding\");\n\n        rlen -= pad;\n      }\n    }\n\n    var result = new Uint8Array( prlen + rlen );\n\n    if ( prlen > 0 ) {\n      result.set( presult );\n    }\n\n    if ( rlen > 0 ) {\n      result.set( heap.subarray( pos, pos + rlen ), prlen );\n    }\n\n    this.result = result;\n    this.pos = 0;\n    this.len = 0;\n\n    return this;\n  }\n}\n\n\n\n\n","/**\n * Cipher Block Chaining Mode (CBC)\n */\nimport {AES} from '../aes';\n\nexport class AES_CBC extends AES {\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} [iv=null]\n   * @param {boolean} [padding=true]\n   * @param {Uint8Array} [heap]\n   * @param {Uint8Array} [asm]\n   */\n  constructor(key, iv = null, padding = true, heap, asm) {\n    super(key, iv, padding, heap, asm);\n\n    this.mode = 'CBC';\n    this.BLOCK_SIZE = 16;\n  }\n\n  encrypt(data) {\n    return this.AES_Encrypt_finish(data);\n  }\n\n  decrypt(data) {\n    return this.AES_Decrypt_finish(data);\n  }\n}\n\nexport class AES_CBC_Encrypt extends AES_CBC {\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} [iv=null]\n   * @param {boolean} [padding=true]\n   * @param {Uint8Array} [heap]\n   * @param {Uint8Array} [asm]\n   */\n  constructor(key, iv, padding, heap, asm) {\n    super(key, iv, padding, heap, asm);\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @returns {AES_CBC_Encrypt}\n   */\n  reset(key) {\n    return this.AES_reset(key, null, true);\n  }\n\n  /**\n   * @param {Uint8Array} data\n   * @returns {AES_CBC_Encrypt}\n   */\n  process(data) {\n    return this.AES_Encrypt_process(data);\n  }\n\n  /**\n   * @param {Uint8Array} data\n   * @returns {AES_CBC_Encrypt}\n   */\n  finish(data) {\n    return this.AES_Encrypt_finish(data);\n  }\n}\n\nexport class AES_CBC_Decrypt extends AES_CBC {\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} [iv=null]\n   * @param {boolean} [padding=true]\n   * @param {Uint8Array} [heap]\n   * @param {Uint8Array} [asm]\n   */\n  constructor(key, iv, padding, heap, asm) {\n    super(key, iv, padding, heap, asm);\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @returns {AES_CBC_Decrypt}\n   */\n  reset(key) {\n    return this.AES_reset(key, null, true);\n  }\n\n  /**\n   * @param {Uint8Array} data\n   * @returns {AES_CBC_Decrypt}\n   */\n  process(data) {\n    return this.AES_Decrypt_process(data);\n  }\n\n  /**\n   * @param {Uint8Array} data\n   * @returns {AES_CBC_Decrypt}\n   */\n  finish(data) {\n    return this.AES_Decrypt_finish(data);\n  }\n}\n\n","import {_AES_asm_instance, _AES_heap_instance} from '../exports';\nimport {AES_CBC, AES_CBC_Decrypt, AES_CBC_Encrypt} from './cbc';\n\n/**\n * @param {Uint8Array} data\n * @param {Uint8Array} key\n * @param {boolean} [padding]\n * @param {Uint8Array} [iv]\n * @returns {Uint8Array}\n */\nfunction AES_CBC_encrypt_bytes (data, key, padding, iv ) {\n    if ( data === undefined ) throw new SyntaxError(\"data required\");\n    if ( key === undefined ) throw new SyntaxError(\"key required\");\n    return new AES_CBC(key, iv, padding, _AES_heap_instance, _AES_asm_instance).encrypt(data).result;\n}\n\n/**\n * @param {Uint8Array} data\n * @param {Uint8Array} key\n * @param {boolean} [padding]\n * @param {Uint8Array} [iv]\n * @returns {Uint8Array}\n */\nfunction AES_CBC_decrypt_bytes ( data, key, padding, iv ) {\n    if ( data === undefined ) throw new SyntaxError(\"data required\");\n    if ( key === undefined ) throw new SyntaxError(\"key required\");\n    return new AES_CBC(key, iv, padding, _AES_heap_instance, _AES_asm_instance).decrypt(data).result;\n}\n\nAES_CBC.encrypt = AES_CBC_encrypt_bytes;\nAES_CBC.decrypt = AES_CBC_decrypt_bytes;\n\nAES_CBC.Encrypt = AES_CBC_Encrypt;\nAES_CBC.Decrypt = AES_CBC_Decrypt;\n\nexport {AES_CBC};\n","/**\n * Galois/Counter mode\n */\n\nimport {IllegalArgumentError, IllegalStateError, SecurityError} from '../../errors';\nimport {_heap_write, is_bytes, is_number} from '../../utils';\nimport {AES} from '../aes';\nimport {AES_asm} from '../aes.asm'\n\nvar _AES_GCM_data_maxLength = 68719476704;  // 2^36 - 2^5\n\nexport class AES_GCM extends AES {\n  constructor(key, nonce, adata, tagSize, heap, asm ) {\n    super(key, undefined, false, heap, asm);\n\n    this.nonce      = null;\n    this.adata      = null;\n    this.iv         = null;\n    this.counter    = 1;\n    this.tagSize    = 16;\n    this.mode       = 'GCM';\n    this.BLOCK_SIZE = 16;\n\n    this.reset(key, tagSize, nonce, adata);\n  }\n\n  reset(key, tagSize, nonce, adata) {\n    return this.AES_GCM_reset(key, tagSize, nonce, adata)\n  }\n\n  encrypt(data) {\n    return this.AES_GCM_encrypt(data);\n  }\n\n  decrypt(data) {\n    return this.AES_GCM_decrypt(data);\n  }\n\n  AES_GCM_Encrypt_process ( data ) {\n    if ( !is_bytes(data) )\n      throw new TypeError(\"data isn't of expected type\");\n\n    var dpos = 0,\n      dlen = data.length || 0,\n      asm = this.asm,\n      heap = this.heap,\n      counter = this.counter,\n      pos = this.pos,\n      len = this.len,\n      rpos = 0,\n      rlen = ( len + dlen ) & -16,\n      wlen = 0;\n\n    if ( ((counter-1)<<4) + len + dlen > _AES_GCM_data_maxLength )\n      throw new RangeError(\"counter overflow\");\n\n    var result = new Uint8Array(rlen);\n\n    while ( dlen > 0 ) {\n      wlen = _heap_write( heap, pos+len, data, dpos, dlen );\n      len  += wlen;\n      dpos += wlen;\n      dlen -= wlen;\n\n      wlen = asm.cipher( AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, len );\n      wlen = asm.mac( AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, wlen );\n\n      if ( wlen ) result.set( heap.subarray( pos, pos + wlen ), rpos );\n      counter += (wlen>>>4);\n      rpos += wlen;\n\n      if ( wlen < len ) {\n        pos += wlen;\n        len -= wlen;\n      } else {\n        pos = 0;\n        len = 0;\n      }\n    }\n\n    this.result = result;\n    this.counter = counter;\n    this.pos = pos;\n    this.len = len;\n\n    return this;\n  }\n\n  AES_GCM_Encrypt_finish () {\n    var asm = this.asm,\n      heap = this.heap,\n      counter = this.counter,\n      tagSize = this.tagSize,\n      adata = this.adata,\n      pos = this.pos,\n      len = this.len;\n\n    var result = new Uint8Array( len + tagSize );\n\n    asm.cipher( AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, (len + 15) & -16 );\n    if ( len ) result.set( heap.subarray( pos, pos + len ) );\n\n    for ( var i = len; i & 15; i++ ) heap[ pos + i ] = 0;\n    asm.mac( AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, i );\n\n    var alen = ( adata !== null ) ? adata.length : 0,\n      clen = ( (counter-1) << 4) + len;\n    heap[0] = heap[1] = heap[2] = 0,\n      heap[3] = alen>>>29,\n      heap[4] = alen>>>21,\n      heap[5] = alen>>>13&255,\n      heap[6] = alen>>>5&255,\n      heap[7] = alen<<3&255,\n      heap[8] = heap[9] = heap[10] = 0,\n      heap[11] = clen>>>29,\n      heap[12] = clen>>>21&255,\n      heap[13] = clen>>>13&255,\n      heap[14] = clen>>>5&255,\n      heap[15] = clen<<3&255;\n    asm.mac( AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16 );\n    asm.get_iv( AES_asm.HEAP_DATA );\n\n    asm.set_counter( 0, 0, 0, this.gamma0 );\n    asm.cipher( AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16 );\n    result.set( heap.subarray( 0, tagSize ), len );\n\n    this.result = result;\n    this.counter = 1;\n    this.pos = 0;\n    this.len = 0;\n\n    return this;\n  }\n\n  AES_GCM_Decrypt_process ( data ) {\n    if ( !is_bytes(data) )\n      throw new TypeError(\"data isn't of expected type\");\n\n    var dpos = 0,\n      dlen = data.length || 0,\n      asm = this.asm,\n      heap = this.heap,\n      counter = this.counter,\n      tagSize = this.tagSize,\n      pos = this.pos,\n      len = this.len,\n      rpos = 0,\n      rlen = len + dlen > tagSize ? ( len + dlen - tagSize ) & -16 : 0,\n      tlen = len + dlen - rlen,\n      wlen = 0;\n\n    if ( ((counter-1)<<4) + len + dlen > _AES_GCM_data_maxLength )\n      throw new RangeError(\"counter overflow\");\n\n    var result = new Uint8Array(rlen);\n\n    while ( dlen > tlen ) {\n      wlen = _heap_write( heap, pos+len, data, dpos, dlen-tlen );\n      len  += wlen;\n      dpos += wlen;\n      dlen -= wlen;\n\n      wlen = asm.mac( AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, wlen );\n      wlen = asm.cipher( AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, wlen );\n\n      if ( wlen ) result.set( heap.subarray( pos, pos+wlen ), rpos );\n      counter += (wlen>>>4);\n      rpos += wlen;\n\n      pos = 0;\n      len = 0;\n    }\n\n    if ( dlen > 0 ) {\n      len += _heap_write( heap, 0, data, dpos, dlen );\n    }\n\n    this.result = result;\n    this.counter = counter;\n    this.pos = pos;\n    this.len = len;\n\n    return this;\n  }\n\n  AES_GCM_Decrypt_finish () {\n    var asm = this.asm,\n      heap = this.heap,\n      tagSize = this.tagSize,\n      adata = this.adata,\n      counter = this.counter,\n      pos = this.pos,\n      len = this.len,\n      rlen = len - tagSize,\n      wlen = 0;\n\n    if (len < tagSize)\n      throw new IllegalStateError(\"authentication tag not found\");\n\n    var result = new Uint8Array(rlen),\n      atag = new Uint8Array(heap.subarray(pos + rlen, pos + len));\n\n    for (var i = rlen; i & 15; i++) heap[pos + i] = 0;\n\n    wlen = asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, i);\n    wlen = asm.cipher(AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, i);\n    if (rlen) result.set(heap.subarray(pos, pos + rlen));\n\n    var alen = (adata !== null) ? adata.length : 0,\n      clen = ((counter - 1) << 4) + len - tagSize;\n    heap[0] = heap[1] = heap[2] = 0,\n      heap[3] = alen >>> 29,\n      heap[4] = alen >>> 21,\n      heap[5] = alen >>> 13 & 255,\n      heap[6] = alen >>> 5 & 255,\n      heap[7] = alen << 3 & 255,\n      heap[8] = heap[9] = heap[10] = 0,\n      heap[11] = clen >>> 29,\n      heap[12] = clen >>> 21 & 255,\n      heap[13] = clen >>> 13 & 255,\n      heap[14] = clen >>> 5 & 255,\n      heap[15] = clen << 3 & 255;\n    asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16);\n    asm.get_iv(AES_asm.HEAP_DATA);\n\n    asm.set_counter(0, 0, 0, this.gamma0);\n    asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);\n\n    var acheck = 0;\n    for (var i = 0; i < tagSize; ++i) acheck |= atag[i] ^ heap[i];\n    if (acheck)\n      throw new SecurityError(\"data integrity check failed\");\n\n    this.result = result;\n    this.counter = 1;\n    this.pos = 0;\n    this.len = 0;\n\n    return this;\n  }\n\n  AES_GCM_decrypt ( data ) {\n    var result1 = this.AES_GCM_Decrypt_process( data ).result;\n    var result2 = this.AES_GCM_Decrypt_finish().result;\n\n    var result = new Uint8Array( result1.length + result2.length );\n    if ( result1.length ) result.set( result1 );\n    if ( result2.length ) result.set( result2, result1.length );\n    this.result = result;\n\n    return this;\n  }\n\n  AES_GCM_encrypt ( data ) {\n    var result1 = this.AES_GCM_Encrypt_process( data ).result;\n    var result2 = this.AES_GCM_Encrypt_finish().result;\n\n    var result = new Uint8Array( result1.length + result2.length );\n    if ( result1.length ) result.set( result1 );\n    if ( result2.length ) result.set( result2, result1.length );\n    this.result = result;\n\n    return this;\n  }\n\n  AES_GCM_reset (key, tagSize, nonce, adata, counter, iv  ) {\n    this.AES_reset(key, undefined, false);\n\n    var asm = this.asm;\n    var heap = this.heap;\n\n    asm.gcm_init();\n\n    var tagSize = tagSize;\n    if ( tagSize !== undefined ) {\n      if ( !is_number(tagSize) )\n        throw new TypeError(\"tagSize must be a number\");\n\n      if ( tagSize < 4 || tagSize > 16 )\n        throw new IllegalArgumentError(\"illegal tagSize value\");\n\n      this.tagSize = tagSize;\n    }\n    else {\n      this.tagSize = 16;\n    }\n\n    if ( nonce !== undefined ) {\n      if ( !is_bytes(nonce)) {\n        throw new TypeError(\"unexpected nonce type\");\n      }\n\n      this.nonce = nonce;\n\n      var noncelen = nonce.length || 0,\n        noncebuf = new Uint8Array(16);\n      if ( noncelen !== 12 ) {\n        this._gcm_mac_process( nonce );\n\n        heap[0] = heap[1] = heap[2] = heap[3] = heap[4] = heap[5] = heap[6] = heap[7] = heap[8] = heap[9] = heap[10] = 0,\n          heap[11] = noncelen>>>29,\n          heap[12] = noncelen>>>21&255,\n          heap[13] = noncelen>>>13&255,\n          heap[14] = noncelen>>>5&255,\n          heap[15] = noncelen<<3&255;\n        asm.mac( AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16 );\n\n        asm.get_iv( AES_asm.HEAP_DATA );\n        asm.set_iv();\n\n        noncebuf.set( heap.subarray( 0, 16 ) );\n      }\n      else {\n        noncebuf.set(nonce);\n        noncebuf[15] = 1;\n      }\n\n      var nonceview = new DataView( noncebuf.buffer );\n      this.gamma0 = nonceview.getUint32(12);\n\n      asm.set_nonce( nonceview.getUint32(0), nonceview.getUint32(4), nonceview.getUint32(8), 0 );\n      asm.set_mask( 0, 0, 0, 0xffffffff );\n    }\n    else {\n      throw new Error(\"nonce is required\");\n    }\n\n    if ( adata !== undefined && adata !== null ) {\n      if ( !is_bytes(adata) ){\n        throw new TypeError(\"unexpected adata type\");\n      }\n\n      if ( adata.length > _AES_GCM_data_maxLength )\n        throw new IllegalArgumentError(\"illegal adata length\");\n\n      if ( adata.length ) {\n        this.adata = adata;\n        this._gcm_mac_process( adata );\n      }\n      else {\n        this.adata = null;\n      }\n    }\n    else {\n      this.adata = null;\n    }\n\n    if ( counter !== undefined ) {\n      if ( !is_number(counter) )\n        throw new TypeError(\"counter must be a number\");\n\n      if ( counter < 1 || counter > 0xffffffff )\n        throw new RangeError(\"counter must be a positive 32-bit integer\");\n\n      this.counter = counter;\n      asm.set_counter( 0, 0, 0, this.gamma0+counter|0 );\n    }\n    else {\n      this.counter = 1;\n      asm.set_counter( 0, 0, 0, this.gamma0+1|0 );\n    }\n\n    if ( iv !== undefined ) {\n      if ( !is_number(iv) )\n        throw new TypeError(\"iv must be a number\");\n\n      this.iv = iv;\n\n      this.AES_set_iv( iv );\n    }\n\n    return this;\n  }\n\n  _gcm_mac_process ( data ) {\n    var heap = this.heap,\n      asm  = this.asm,\n      dpos = 0,\n      dlen = data.length || 0,\n      wlen = 0;\n\n    while ( dlen > 0 ) {\n      wlen = _heap_write( heap, 0, data, dpos, dlen );\n      dpos += wlen;\n      dlen -= wlen;\n\n      while ( wlen & 15 ) heap[ wlen++ ] = 0;\n\n      asm.mac( AES_asm.MAC.GCM, AES_asm.HEAP_DATA, wlen );\n    }\n  }\n}\n\nexport class AES_GCM_Encrypt extends AES_GCM {\n  constructor(key, nonce, adata, tagSize, heap, asm ) {\n    super(key, nonce, adata, tagSize, heap, asm );\n  }\n  process(data) {\n    return this.AES_GCM_Encrypt_process(data);\n  }\n  finish() {\n    return this.AES_GCM_Encrypt_finish();\n  }\n}\n\nexport class AES_GCM_Decrypt extends AES_GCM  {\n  constructor(key, nonce, adata, tagSize, heap, asm ) {\n    super(key, nonce, adata, tagSize, heap, asm );\n  }\n\n  process(data) {\n    return this.AES_GCM_Decrypt_process(data);\n  }\n  finish() {\n    return this.AES_GCM_Decrypt_finish();\n  }\n}\n","import {_heap_write, is_buffer, is_bytes, is_string, string_to_bytes} from '../utils';\nimport {IllegalStateError} from '../errors';\n\nexport function hash_reset () {\n    this.result = null;\n    this.pos = 0;\n    this.len = 0;\n\n    this.asm.reset();\n\n    return this;\n}\n\nexport function hash_process ( data ) {\n    if ( this.result !== null )\n        throw new IllegalStateError(\"state must be reset before processing new data\");\n\n    if ( is_string(data) )\n        data = string_to_bytes(data);\n\n    if ( is_buffer(data) )\n        data = new Uint8Array(data);\n\n    if ( !is_bytes(data) )\n        throw new TypeError(\"data isn't of expected type\");\n\n    var asm = this.asm,\n        heap = this.heap,\n        hpos = this.pos,\n        hlen = this.len,\n        dpos = 0,\n        dlen = data.length,\n        wlen = 0;\n\n    while ( dlen > 0 ) {\n        wlen = _heap_write( heap, hpos+hlen, data, dpos, dlen );\n        hlen += wlen;\n        dpos += wlen;\n        dlen -= wlen;\n\n        wlen = asm.process( hpos, hlen );\n\n        hpos += wlen;\n        hlen -= wlen;\n\n        if ( !hlen ) hpos = 0;\n    }\n\n    this.pos = hpos;\n    this.len = hlen;\n\n    return this;\n}\n\nexport function hash_finish () {\n    if ( this.result !== null )\n        throw new IllegalStateError(\"state must be reset before processing new data\");\n\n    this.asm.finish( this.pos, this.len, 0 );\n\n    this.result = new Uint8Array(this.HASH_SIZE);\n    this.result.set( this.heap.subarray( 0, this.HASH_SIZE ) );\n\n    this.pos = 0;\n    this.len = 0;\n\n    return this;\n}\n","/**\n * AES-GCM exports\n */\n\nimport {_AES_asm_instance, _AES_heap_instance} from '../exports';\nimport {AES_GCM, AES_GCM_Decrypt, AES_GCM_Encrypt} from './gcm';\n\n/**\n * @param {Uint8Array} data\n * @param {Uint8Array} key\n * @param {Uint8Array} nonce\n * @param {Uint8Array} [adata]\n * @param {number} [tagSize]\n * @return {Uint8Array}\n */\nfunction AES_GCM_encrypt_bytes ( data, key, nonce, adata, tagSize ) {\n    if ( data === undefined ) throw new SyntaxError(\"data required\");\n    if ( key === undefined ) throw new SyntaxError(\"key required\");\n    if ( nonce === undefined ) throw new SyntaxError(\"nonce required\");\n    return new AES_GCM(key, nonce, adata, tagSize, _AES_heap_instance, _AES_asm_instance).encrypt(data).result;\n}\n\n/**\n * @param {Uint8Array} data\n * @param {Uint8Array} key\n * @param {Uint8Array} nonce\n * @param {Uint8Array} [adata]\n * @param {number} [tagSize]\n * @return {Uint8Array}\n */\nfunction AES_GCM_decrypt_bytes ( data, key, nonce, adata, tagSize ) {\n    if ( data === undefined ) throw new SyntaxError(\"data required\");\n    if ( key === undefined ) throw new SyntaxError(\"key required\");\n    if ( nonce === undefined ) throw new SyntaxError(\"nonce required\");\n    return new AES_GCM(key, nonce, adata, tagSize, _AES_heap_instance, _AES_asm_instance).decrypt(data).result;\n}\n\nAES_GCM.encrypt = AES_GCM_encrypt_bytes;\nAES_GCM.decrypt = AES_GCM_decrypt_bytes;\n\nAES_GCM.Encrypt = AES_GCM_Encrypt;\nAES_GCM.Decrypt = AES_GCM_Decrypt;\n\nexport { AES_GCM };\n","import {sha1_asm} from './sha1.asm';\nimport {hash_finish, hash_process, hash_reset} from '../hash';\nimport {_heap_init} from '../../utils';\n\nexport var _sha1_block_size = 64;\nexport var _sha1_hash_size = 20;\n\nexport function sha1_constructor ( options ) {\n    options = options || {};\n\n    this.heap = _heap_init( Uint8Array, options.heap );\n    this.asm = options.asm || sha1_asm( { Uint8Array: Uint8Array }, null, this.heap.buffer );\n\n    this.BLOCK_SIZE = _sha1_block_size;\n    this.HASH_SIZE = _sha1_hash_size;\n\n    this.reset();\n}\n\nsha1_constructor.BLOCK_SIZE = _sha1_block_size;\nsha1_constructor.NAME = \"sha1\";\n\nsha1_constructor.HASH_SIZE = _sha1_hash_size;\nvar sha1_prototype = sha1_constructor.prototype;\nsha1_prototype.reset =   hash_reset;\nsha1_prototype.process = hash_process;\nsha1_prototype.finish =  hash_finish;\n\nvar sha1_instance = null;\n\nexport function get_sha1_instance () {\n    if ( sha1_instance === null ) sha1_instance = new sha1_constructor( { heapSize: 0x100000 } );\n    return sha1_instance;\n}\n","export function sha1_asm ( stdlib, foreign, buffer ) {\n    \"use asm\";\n\n    // SHA256 state\n    var H0 = 0, H1 = 0, H2 = 0, H3 = 0, H4 = 0,\n        TOTAL0 = 0, TOTAL1 = 0;\n\n    // HMAC state\n    var I0 = 0, I1 = 0, I2 = 0, I3 = 0, I4 = 0,\n        O0 = 0, O1 = 0, O2 = 0, O3 = 0, O4 = 0;\n\n    // I/O buffer\n    var HEAP = new stdlib.Uint8Array(buffer);\n\n    function _core ( w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15 ) {\n        w0 = w0|0;\n        w1 = w1|0;\n        w2 = w2|0;\n        w3 = w3|0;\n        w4 = w4|0;\n        w5 = w5|0;\n        w6 = w6|0;\n        w7 = w7|0;\n        w8 = w8|0;\n        w9 = w9|0;\n        w10 = w10|0;\n        w11 = w11|0;\n        w12 = w12|0;\n        w13 = w13|0;\n        w14 = w14|0;\n        w15 = w15|0;\n\n        var a = 0, b = 0, c = 0, d = 0, e = 0, n = 0, t = 0,\n            w16 = 0, w17 = 0, w18 = 0, w19 = 0,\n            w20 = 0, w21 = 0, w22 = 0, w23 = 0, w24 = 0, w25 = 0, w26 = 0, w27 = 0, w28 = 0, w29 = 0,\n            w30 = 0, w31 = 0, w32 = 0, w33 = 0, w34 = 0, w35 = 0, w36 = 0, w37 = 0, w38 = 0, w39 = 0,\n            w40 = 0, w41 = 0, w42 = 0, w43 = 0, w44 = 0, w45 = 0, w46 = 0, w47 = 0, w48 = 0, w49 = 0,\n            w50 = 0, w51 = 0, w52 = 0, w53 = 0, w54 = 0, w55 = 0, w56 = 0, w57 = 0, w58 = 0, w59 = 0,\n            w60 = 0, w61 = 0, w62 = 0, w63 = 0, w64 = 0, w65 = 0, w66 = 0, w67 = 0, w68 = 0, w69 = 0,\n            w70 = 0, w71 = 0, w72 = 0, w73 = 0, w74 = 0, w75 = 0, w76 = 0, w77 = 0, w78 = 0, w79 = 0;\n\n        a = H0;\n        b = H1;\n        c = H2;\n        d = H3;\n        e = H4;\n\n        // 0\n        t = ( w0 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 1\n        t = ( w1 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 2\n        t = ( w2 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 3\n        t = ( w3 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 4\n        t = ( w4 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 5\n        t = ( w5 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 6\n        t = ( w6 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 7\n        t = ( w7 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 8\n        t = ( w8 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 9\n        t = ( w9 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 10\n        t = ( w10 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 11\n        t = ( w11 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 12\n        t = ( w12 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 13\n        t = ( w13 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 14\n        t = ( w14 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 15\n        t = ( w15 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 16\n        n = w13 ^ w8 ^ w2 ^ w0;\n        w16 = (n << 1) | (n >>> 31);\n        t = (w16 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 17\n        n = w14 ^ w9 ^ w3 ^ w1;\n        w17 = (n << 1) | (n >>> 31);\n        t = (w17 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 18\n        n = w15 ^ w10 ^ w4 ^ w2;\n        w18 = (n << 1) | (n >>> 31);\n        t = (w18 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 19\n        n = w16 ^ w11 ^ w5 ^ w3;\n        w19 = (n << 1) | (n >>> 31);\n        t = (w19 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 20\n        n = w17 ^ w12 ^ w6 ^ w4;\n        w20 = (n << 1) | (n >>> 31);\n        t = (w20 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 21\n        n = w18 ^ w13 ^ w7 ^ w5;\n        w21 = (n << 1) | (n >>> 31);\n        t = (w21 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 22\n        n = w19 ^ w14 ^ w8 ^ w6;\n        w22 = (n << 1) | (n >>> 31);\n        t = (w22 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 23\n        n = w20 ^ w15 ^ w9 ^ w7;\n        w23 = (n << 1) | (n >>> 31);\n        t = (w23 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 24\n        n = w21 ^ w16 ^ w10 ^ w8;\n        w24 = (n << 1) | (n >>> 31);\n        t = (w24 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 25\n        n = w22 ^ w17 ^ w11 ^ w9;\n        w25 = (n << 1) | (n >>> 31);\n        t = (w25 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 26\n        n = w23 ^ w18 ^ w12 ^ w10;\n        w26 = (n << 1) | (n >>> 31);\n        t = (w26 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 27\n        n = w24 ^ w19 ^ w13 ^ w11;\n        w27 = (n << 1) | (n >>> 31);\n        t = (w27 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 28\n        n = w25 ^ w20 ^ w14 ^ w12;\n        w28 = (n << 1) | (n >>> 31);\n        t = (w28 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 29\n        n = w26 ^ w21 ^ w15 ^ w13;\n        w29 = (n << 1) | (n >>> 31);\n        t = (w29 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 30\n        n = w27 ^ w22 ^ w16 ^ w14;\n        w30 = (n << 1) | (n >>> 31);\n        t = (w30 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 31\n        n = w28 ^ w23 ^ w17 ^ w15;\n        w31 = (n << 1) | (n >>> 31);\n        t = (w31 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 32\n        n = w29 ^ w24 ^ w18 ^ w16;\n        w32 = (n << 1) | (n >>> 31);\n        t = (w32 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 33\n        n = w30 ^ w25 ^ w19 ^ w17;\n        w33 = (n << 1) | (n >>> 31);\n        t = (w33 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 34\n        n = w31 ^ w26 ^ w20 ^ w18;\n        w34 = (n << 1) | (n >>> 31);\n        t = (w34 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 35\n        n = w32 ^ w27 ^ w21 ^ w19;\n        w35 = (n << 1) | (n >>> 31);\n        t = (w35 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 36\n        n = w33 ^ w28 ^ w22 ^ w20;\n        w36 = (n << 1) | (n >>> 31);\n        t = (w36 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 37\n        n = w34 ^ w29 ^ w23 ^ w21;\n        w37 = (n << 1) | (n >>> 31);\n        t = (w37 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 38\n        n = w35 ^ w30 ^ w24 ^ w22;\n        w38 = (n << 1) | (n >>> 31);\n        t = (w38 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 39\n        n = w36 ^ w31 ^ w25 ^ w23;\n        w39 = (n << 1) | (n >>> 31);\n        t = (w39 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 40\n        n = w37 ^ w32 ^ w26 ^ w24;\n        w40 = (n << 1) | (n >>> 31);\n        t = (w40 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 41\n        n = w38 ^ w33 ^ w27 ^ w25;\n        w41 = (n << 1) | (n >>> 31);\n        t = (w41 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 42\n        n = w39 ^ w34 ^ w28 ^ w26;\n        w42 = (n << 1) | (n >>> 31);\n        t = (w42 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 43\n        n = w40 ^ w35 ^ w29 ^ w27;\n        w43 = (n << 1) | (n >>> 31);\n        t = (w43 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 44\n        n = w41 ^ w36 ^ w30 ^ w28;\n        w44 = (n << 1) | (n >>> 31);\n        t = (w44 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 45\n        n = w42 ^ w37 ^ w31 ^ w29;\n        w45 = (n << 1) | (n >>> 31);\n        t = (w45 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 46\n        n = w43 ^ w38 ^ w32 ^ w30;\n        w46 = (n << 1) | (n >>> 31);\n        t = (w46 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 47\n        n = w44 ^ w39 ^ w33 ^ w31;\n        w47 = (n << 1) | (n >>> 31);\n        t = (w47 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 48\n        n = w45 ^ w40 ^ w34 ^ w32;\n        w48 = (n << 1) | (n >>> 31);\n        t = (w48 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 49\n        n = w46 ^ w41 ^ w35 ^ w33;\n        w49 = (n << 1) | (n >>> 31);\n        t = (w49 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 50\n        n = w47 ^ w42 ^ w36 ^ w34;\n        w50 = (n << 1) | (n >>> 31);\n        t = (w50 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 51\n        n = w48 ^ w43 ^ w37 ^ w35;\n        w51 = (n << 1) | (n >>> 31);\n        t = (w51 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 52\n        n = w49 ^ w44 ^ w38 ^ w36;\n        w52 = (n << 1) | (n >>> 31);\n        t = (w52 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 53\n        n = w50 ^ w45 ^ w39 ^ w37;\n        w53 = (n << 1) | (n >>> 31);\n        t = (w53 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 54\n        n = w51 ^ w46 ^ w40 ^ w38;\n        w54 = (n << 1) | (n >>> 31);\n        t = (w54 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 55\n        n = w52 ^ w47 ^ w41 ^ w39;\n        w55 = (n << 1) | (n >>> 31);\n        t = (w55 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 56\n        n = w53 ^ w48 ^ w42 ^ w40;\n        w56 = (n << 1) | (n >>> 31);\n        t = (w56 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 57\n        n = w54 ^ w49 ^ w43 ^ w41;\n        w57 = (n << 1) | (n >>> 31);\n        t = (w57 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 58\n        n = w55 ^ w50 ^ w44 ^ w42;\n        w58 = (n << 1) | (n >>> 31);\n        t = (w58 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 59\n        n = w56 ^ w51 ^ w45 ^ w43;\n        w59 = (n << 1) | (n >>> 31);\n        t = (w59 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 60\n        n = w57 ^ w52 ^ w46 ^ w44;\n        w60 = (n << 1) | (n >>> 31);\n        t = (w60 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 61\n        n = w58 ^ w53 ^ w47 ^ w45;\n        w61 = (n << 1) | (n >>> 31);\n        t = (w61 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 62\n        n = w59 ^ w54 ^ w48 ^ w46;\n        w62 = (n << 1) | (n >>> 31);\n        t = (w62 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 63\n        n = w60 ^ w55 ^ w49 ^ w47;\n        w63 = (n << 1) | (n >>> 31);\n        t = (w63 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 64\n        n = w61 ^ w56 ^ w50 ^ w48;\n        w64 = (n << 1) | (n >>> 31);\n        t = (w64 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 65\n        n = w62 ^ w57 ^ w51 ^ w49;\n        w65 = (n << 1) | (n >>> 31);\n        t = (w65 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 66\n        n = w63 ^ w58 ^ w52 ^ w50;\n        w66 = (n << 1) | (n >>> 31);\n        t = (w66 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 67\n        n = w64 ^ w59 ^ w53 ^ w51;\n        w67 = (n << 1) | (n >>> 31);\n        t = (w67 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 68\n        n = w65 ^ w60 ^ w54 ^ w52;\n        w68 = (n << 1) | (n >>> 31);\n        t = (w68 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 69\n        n = w66 ^ w61 ^ w55 ^ w53;\n        w69 = (n << 1) | (n >>> 31);\n        t = (w69 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 70\n        n = w67 ^ w62 ^ w56 ^ w54;\n        w70 = (n << 1) | (n >>> 31);\n        t = (w70 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 71\n        n = w68 ^ w63 ^ w57 ^ w55;\n        w71 = (n << 1) | (n >>> 31);\n        t = (w71 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 72\n        n = w69 ^ w64 ^ w58 ^ w56;\n        w72 = (n << 1) | (n >>> 31);\n        t = (w72 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 73\n        n = w70 ^ w65 ^ w59 ^ w57;\n        w73 = (n << 1) | (n >>> 31);\n        t = (w73 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 74\n        n = w71 ^ w66 ^ w60 ^ w58;\n        w74 = (n << 1) | (n >>> 31);\n        t = (w74 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 75\n        n = w72 ^ w67 ^ w61 ^ w59;\n        w75 = (n << 1) | (n >>> 31);\n        t = (w75 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 76\n        n = w73 ^ w68 ^ w62 ^ w60;\n        w76 = (n << 1) | (n >>> 31);\n        t = (w76 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 77\n        n = w74 ^ w69 ^ w63 ^ w61;\n        w77 = (n << 1) | (n >>> 31);\n        t = (w77 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 78\n        n = w75 ^ w70 ^ w64 ^ w62;\n        w78 = (n << 1) | (n >>> 31);\n        t = (w78 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 79\n        n = w76 ^ w71 ^ w65 ^ w63;\n        w79 = (n << 1) | (n >>> 31);\n        t = (w79 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        H0 = ( H0 + a )|0;\n        H1 = ( H1 + b )|0;\n        H2 = ( H2 + c )|0;\n        H3 = ( H3 + d )|0;\n        H4 = ( H4 + e )|0;\n\n    }\n\n    function _core_heap ( offset ) {\n        offset = offset|0;\n\n        _core(\n            HEAP[offset|0]<<24 | HEAP[offset|1]<<16 | HEAP[offset|2]<<8 | HEAP[offset|3],\n            HEAP[offset|4]<<24 | HEAP[offset|5]<<16 | HEAP[offset|6]<<8 | HEAP[offset|7],\n            HEAP[offset|8]<<24 | HEAP[offset|9]<<16 | HEAP[offset|10]<<8 | HEAP[offset|11],\n            HEAP[offset|12]<<24 | HEAP[offset|13]<<16 | HEAP[offset|14]<<8 | HEAP[offset|15],\n            HEAP[offset|16]<<24 | HEAP[offset|17]<<16 | HEAP[offset|18]<<8 | HEAP[offset|19],\n            HEAP[offset|20]<<24 | HEAP[offset|21]<<16 | HEAP[offset|22]<<8 | HEAP[offset|23],\n            HEAP[offset|24]<<24 | HEAP[offset|25]<<16 | HEAP[offset|26]<<8 | HEAP[offset|27],\n            HEAP[offset|28]<<24 | HEAP[offset|29]<<16 | HEAP[offset|30]<<8 | HEAP[offset|31],\n            HEAP[offset|32]<<24 | HEAP[offset|33]<<16 | HEAP[offset|34]<<8 | HEAP[offset|35],\n            HEAP[offset|36]<<24 | HEAP[offset|37]<<16 | HEAP[offset|38]<<8 | HEAP[offset|39],\n            HEAP[offset|40]<<24 | HEAP[offset|41]<<16 | HEAP[offset|42]<<8 | HEAP[offset|43],\n            HEAP[offset|44]<<24 | HEAP[offset|45]<<16 | HEAP[offset|46]<<8 | HEAP[offset|47],\n            HEAP[offset|48]<<24 | HEAP[offset|49]<<16 | HEAP[offset|50]<<8 | HEAP[offset|51],\n            HEAP[offset|52]<<24 | HEAP[offset|53]<<16 | HEAP[offset|54]<<8 | HEAP[offset|55],\n            HEAP[offset|56]<<24 | HEAP[offset|57]<<16 | HEAP[offset|58]<<8 | HEAP[offset|59],\n            HEAP[offset|60]<<24 | HEAP[offset|61]<<16 | HEAP[offset|62]<<8 | HEAP[offset|63]\n        );\n    }\n\n    // offset — multiple of 32\n    function _state_to_heap ( output ) {\n        output = output|0;\n\n        HEAP[output|0] = H0>>>24;\n        HEAP[output|1] = H0>>>16&255;\n        HEAP[output|2] = H0>>>8&255;\n        HEAP[output|3] = H0&255;\n        HEAP[output|4] = H1>>>24;\n        HEAP[output|5] = H1>>>16&255;\n        HEAP[output|6] = H1>>>8&255;\n        HEAP[output|7] = H1&255;\n        HEAP[output|8] = H2>>>24;\n        HEAP[output|9] = H2>>>16&255;\n        HEAP[output|10] = H2>>>8&255;\n        HEAP[output|11] = H2&255;\n        HEAP[output|12] = H3>>>24;\n        HEAP[output|13] = H3>>>16&255;\n        HEAP[output|14] = H3>>>8&255;\n        HEAP[output|15] = H3&255;\n        HEAP[output|16] = H4>>>24;\n        HEAP[output|17] = H4>>>16&255;\n        HEAP[output|18] = H4>>>8&255;\n        HEAP[output|19] = H4&255;\n    }\n\n    function reset () {\n        H0 = 0x67452301;\n        H1 = 0xefcdab89;\n        H2 = 0x98badcfe;\n        H3 = 0x10325476;\n        H4 = 0xc3d2e1f0;\n        TOTAL0 = TOTAL1 = 0;\n    }\n\n    function init ( h0, h1, h2, h3, h4, total0, total1 ) {\n        h0 = h0|0;\n        h1 = h1|0;\n        h2 = h2|0;\n        h3 = h3|0;\n        h4 = h4|0;\n        total0 = total0|0;\n        total1 = total1|0;\n\n        H0 = h0;\n        H1 = h1;\n        H2 = h2;\n        H3 = h3;\n        H4 = h4;\n        TOTAL0 = total0;\n        TOTAL1 = total1;\n    }\n\n    // offset — multiple of 64\n    function process ( offset, length ) {\n        offset = offset|0;\n        length = length|0;\n\n        var hashed = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        while ( (length|0) >= 64 ) {\n            _core_heap(offset);\n\n            offset = ( offset + 64 )|0;\n            length = ( length - 64 )|0;\n\n            hashed = ( hashed + 64 )|0;\n        }\n\n        TOTAL0 = ( TOTAL0 + hashed )|0;\n        if ( TOTAL0>>>0 < hashed>>>0 ) TOTAL1 = ( TOTAL1 + 1 )|0;\n\n        return hashed|0;\n    }\n\n    // offset — multiple of 64\n    // output — multiple of 32\n    function finish ( offset, length, output ) {\n        offset = offset|0;\n        length = length|0;\n        output = output|0;\n\n        var hashed = 0,\n            i = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        if ( ~output )\n            if ( output & 31 )\n                return -1;\n\n        if ( (length|0) >= 64 ) {\n            hashed = process( offset, length )|0;\n            if ( (hashed|0) == -1 )\n                return -1;\n\n            offset = ( offset + hashed )|0;\n            length = ( length - hashed )|0;\n        }\n\n        hashed = ( hashed + length )|0;\n        TOTAL0 = ( TOTAL0 + length )|0;\n        if ( TOTAL0>>>0 < length>>>0 ) TOTAL1 = (TOTAL1 + 1)|0;\n\n        HEAP[offset|length] = 0x80;\n\n        if ( (length|0) >= 56 ) {\n            for ( i = (length+1)|0; (i|0) < 64; i = (i+1)|0 )\n                HEAP[offset|i] = 0x00;\n            _core_heap(offset);\n\n            length = 0;\n\n            HEAP[offset|0] = 0;\n        }\n\n        for ( i = (length+1)|0; (i|0) < 59; i = (i+1)|0 )\n            HEAP[offset|i] = 0;\n\n        HEAP[offset|56] = TOTAL1>>>21&255;\n        HEAP[offset|57] = TOTAL1>>>13&255;\n        HEAP[offset|58] = TOTAL1>>>5&255;\n        HEAP[offset|59] = TOTAL1<<3&255 | TOTAL0>>>29;\n        HEAP[offset|60] = TOTAL0>>>21&255;\n        HEAP[offset|61] = TOTAL0>>>13&255;\n        HEAP[offset|62] = TOTAL0>>>5&255;\n        HEAP[offset|63] = TOTAL0<<3&255;\n        _core_heap(offset);\n\n        if ( ~output )\n            _state_to_heap(output);\n\n        return hashed|0;\n    }\n\n    function hmac_reset () {\n        H0 = I0;\n        H1 = I1;\n        H2 = I2;\n        H3 = I3;\n        H4 = I4;\n        TOTAL0 = 64;\n        TOTAL1 = 0;\n    }\n\n    function _hmac_opad () {\n        H0 = O0;\n        H1 = O1;\n        H2 = O2;\n        H3 = O3;\n        H4 = O4;\n        TOTAL0 = 64;\n        TOTAL1 = 0;\n    }\n\n    function hmac_init ( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15 ) {\n        p0 = p0|0;\n        p1 = p1|0;\n        p2 = p2|0;\n        p3 = p3|0;\n        p4 = p4|0;\n        p5 = p5|0;\n        p6 = p6|0;\n        p7 = p7|0;\n        p8 = p8|0;\n        p9 = p9|0;\n        p10 = p10|0;\n        p11 = p11|0;\n        p12 = p12|0;\n        p13 = p13|0;\n        p14 = p14|0;\n        p15 = p15|0;\n\n        // opad\n        reset();\n        _core(\n            p0 ^ 0x5c5c5c5c,\n            p1 ^ 0x5c5c5c5c,\n            p2 ^ 0x5c5c5c5c,\n            p3 ^ 0x5c5c5c5c,\n            p4 ^ 0x5c5c5c5c,\n            p5 ^ 0x5c5c5c5c,\n            p6 ^ 0x5c5c5c5c,\n            p7 ^ 0x5c5c5c5c,\n            p8 ^ 0x5c5c5c5c,\n            p9 ^ 0x5c5c5c5c,\n            p10 ^ 0x5c5c5c5c,\n            p11 ^ 0x5c5c5c5c,\n            p12 ^ 0x5c5c5c5c,\n            p13 ^ 0x5c5c5c5c,\n            p14 ^ 0x5c5c5c5c,\n            p15 ^ 0x5c5c5c5c\n        );\n        O0 = H0;\n        O1 = H1;\n        O2 = H2;\n        O3 = H3;\n        O4 = H4;\n\n        // ipad\n        reset();\n        _core(\n            p0 ^ 0x36363636,\n            p1 ^ 0x36363636,\n            p2 ^ 0x36363636,\n            p3 ^ 0x36363636,\n            p4 ^ 0x36363636,\n            p5 ^ 0x36363636,\n            p6 ^ 0x36363636,\n            p7 ^ 0x36363636,\n            p8 ^ 0x36363636,\n            p9 ^ 0x36363636,\n            p10 ^ 0x36363636,\n            p11 ^ 0x36363636,\n            p12 ^ 0x36363636,\n            p13 ^ 0x36363636,\n            p14 ^ 0x36363636,\n            p15 ^ 0x36363636\n        );\n        I0 = H0;\n        I1 = H1;\n        I2 = H2;\n        I3 = H3;\n        I4 = H4;\n\n        TOTAL0 = 64;\n        TOTAL1 = 0;\n    }\n\n    // offset — multiple of 64\n    // output — multiple of 32\n    function hmac_finish ( offset, length, output ) {\n        offset = offset|0;\n        length = length|0;\n        output = output|0;\n\n        var t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, hashed = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        if ( ~output )\n            if ( output & 31 )\n                return -1;\n\n        hashed = finish( offset, length, -1 )|0;\n        t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;\n\n        _hmac_opad();\n        _core( t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672 );\n\n        if ( ~output )\n            _state_to_heap(output);\n\n        return hashed|0;\n    }\n\n    // salt is assumed to be already processed\n    // offset — multiple of 64\n    // output — multiple of 32\n    function pbkdf2_generate_block ( offset, length, block, count, output ) {\n        offset = offset|0;\n        length = length|0;\n        block = block|0;\n        count = count|0;\n        output = output|0;\n\n        var h0 = 0, h1 = 0, h2 = 0, h3 = 0, h4 = 0,\n            t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        if ( ~output )\n            if ( output & 31 )\n                return -1;\n\n        // pad block number into heap\n        // FIXME probable OOB write\n        HEAP[(offset+length)|0]   = block>>>24;\n        HEAP[(offset+length+1)|0] = block>>>16&255;\n        HEAP[(offset+length+2)|0] = block>>>8&255;\n        HEAP[(offset+length+3)|0] = block&255;\n\n        // finish first iteration\n        hmac_finish( offset, (length+4)|0, -1 )|0;\n        h0 = t0 = H0, h1 = t1 = H1, h2 = t2 = H2, h3 = t3 = H3, h4 = t4 = H4;\n        count = (count-1)|0;\n\n        // perform the rest iterations\n        while ( (count|0) > 0 ) {\n            hmac_reset();\n            _core( t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672 );\n            t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;\n\n            _hmac_opad();\n            _core( t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672 );\n            t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;\n\n            h0 = h0 ^ H0;\n            h1 = h1 ^ H1;\n            h2 = h2 ^ H2;\n            h3 = h3 ^ H3;\n            h4 = h4 ^ H4;\n\n            count = (count-1)|0;\n        }\n\n        H0 = h0;\n        H1 = h1;\n        H2 = h2;\n        H3 = h3;\n        H4 = h4;\n\n        if ( ~output )\n            _state_to_heap(output);\n\n        return 0;\n    }\n\n    return {\n        // SHA1\n        reset: reset,\n        init: init,\n        process: process,\n        finish: finish,\n\n        // HMAC-SHA1\n        hmac_reset: hmac_reset,\n        hmac_init: hmac_init,\n        hmac_finish: hmac_finish,\n\n        // PBKDF2-HMAC-SHA1\n        pbkdf2_generate_block: pbkdf2_generate_block\n    }\n}\n","/**\n * SHA1 exports\n */\n\nimport {get_sha1_instance, sha1_constructor} from './sha1';\nimport {bytes_to_base64, bytes_to_hex} from '../../utils';\n\nfunction sha1_bytes (data ) {\n    if ( data === undefined ) throw new SyntaxError(\"data required\");\n    return get_sha1_instance().reset().process(data).finish().result;\n}\n\nfunction sha1_hex ( data ) {\n    var result = sha1_bytes(data);\n    return bytes_to_hex(result);\n}\n\nfunction sha1_base64 ( data ) {\n    var result = sha1_bytes(data);\n    return bytes_to_base64(result);\n}\n\nexport var SHA1 = sha1_constructor;\n\nSHA1.bytes = sha1_bytes;\nSHA1.hex = sha1_hex;\nSHA1.base64 = sha1_base64;\n","import {sha256_asm} from './sha256.asm';\nimport {hash_finish, hash_process, hash_reset} from '../hash';\nimport {_heap_init} from '../../utils';\n\nexport var _sha256_block_size = 64;\nexport var _sha256_hash_size = 32;\n\nexport function sha256_constructor ( options ) {\n    options = options || {};\n\n    this.heap = _heap_init( Uint8Array, options.heap );\n    this.asm = options.asm || sha256_asm( { Uint8Array: Uint8Array }, null, this.heap.buffer );\n\n    this.BLOCK_SIZE = _sha256_block_size;\n    this.HASH_SIZE = _sha256_hash_size;\n\n    this.reset();\n}\n\nsha256_constructor.BLOCK_SIZE = _sha256_block_size;\nsha256_constructor.HASH_SIZE = _sha256_hash_size;\nsha256_constructor.NAME = \"sha256\";\n\nvar sha256_prototype = sha256_constructor.prototype;\nsha256_prototype.reset =   hash_reset;\nsha256_prototype.process = hash_process;\nsha256_prototype.finish =  hash_finish;\n\nvar sha256_instance = null;\n\nexport function get_sha256_instance () {\n    if ( sha256_instance === null ) sha256_instance = new sha256_constructor( { heapSize: 0x100000 } );\n    return sha256_instance;\n}\n","export function sha256_asm ( stdlib, foreign, buffer ) {\n    \"use asm\";\n\n    // SHA256 state\n    var H0 = 0, H1 = 0, H2 = 0, H3 = 0, H4 = 0, H5 = 0, H6 = 0, H7 = 0,\n        TOTAL0 = 0, TOTAL1 = 0;\n\n    // HMAC state\n    var I0 = 0, I1 = 0, I2 = 0, I3 = 0, I4 = 0, I5 = 0, I6 = 0, I7 = 0,\n        O0 = 0, O1 = 0, O2 = 0, O3 = 0, O4 = 0, O5 = 0, O6 = 0, O7 = 0;\n\n    // I/O buffer\n    var HEAP = new stdlib.Uint8Array(buffer);\n\n    function _core ( w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15 ) {\n        w0 = w0|0;\n        w1 = w1|0;\n        w2 = w2|0;\n        w3 = w3|0;\n        w4 = w4|0;\n        w5 = w5|0;\n        w6 = w6|0;\n        w7 = w7|0;\n        w8 = w8|0;\n        w9 = w9|0;\n        w10 = w10|0;\n        w11 = w11|0;\n        w12 = w12|0;\n        w13 = w13|0;\n        w14 = w14|0;\n        w15 = w15|0;\n\n        var a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0;\n\n        a = H0;\n        b = H1;\n        c = H2;\n        d = H3;\n        e = H4;\n        f = H5;\n        g = H6;\n        h = H7;\n        \n        // 0\n        h = ( w0 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0x428a2f98 )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 1\n        g = ( w1 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0x71374491 )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 2\n        f = ( w2 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0xb5c0fbcf )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 3\n        e = ( w3 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0xe9b5dba5 )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 4\n        d = ( w4 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0x3956c25b )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 5\n        c = ( w5 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0x59f111f1 )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 6\n        b = ( w6 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0x923f82a4 )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 7\n        a = ( w7 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0xab1c5ed5 )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        // 8\n        h = ( w8 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0xd807aa98 )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 9\n        g = ( w9 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0x12835b01 )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 10\n        f = ( w10 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0x243185be )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 11\n        e = ( w11 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0x550c7dc3 )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 12\n        d = ( w12 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0x72be5d74 )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 13\n        c = ( w13 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0x80deb1fe )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 14\n        b = ( w14 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0x9bdc06a7 )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 15\n        a = ( w15 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0xc19bf174 )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        // 16\n        w0 = ( ( w1>>>7  ^ w1>>>18 ^ w1>>>3  ^ w1<<25 ^ w1<<14 ) + ( w14>>>17 ^ w14>>>19 ^ w14>>>10 ^ w14<<15 ^ w14<<13 ) + w0 + w9 )|0;\n        h = ( w0 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0xe49b69c1 )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 17\n        w1 = ( ( w2>>>7  ^ w2>>>18 ^ w2>>>3  ^ w2<<25 ^ w2<<14 ) + ( w15>>>17 ^ w15>>>19 ^ w15>>>10 ^ w15<<15 ^ w15<<13 ) + w1 + w10 )|0;\n        g = ( w1 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0xefbe4786 )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 18\n        w2 = ( ( w3>>>7  ^ w3>>>18 ^ w3>>>3  ^ w3<<25 ^ w3<<14 ) + ( w0>>>17 ^ w0>>>19 ^ w0>>>10 ^ w0<<15 ^ w0<<13 ) + w2 + w11 )|0;\n        f = ( w2 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0x0fc19dc6 )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 19\n        w3 = ( ( w4>>>7  ^ w4>>>18 ^ w4>>>3  ^ w4<<25 ^ w4<<14 ) + ( w1>>>17 ^ w1>>>19 ^ w1>>>10 ^ w1<<15 ^ w1<<13 ) + w3 + w12 )|0;\n        e = ( w3 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0x240ca1cc )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 20\n        w4 = ( ( w5>>>7  ^ w5>>>18 ^ w5>>>3  ^ w5<<25 ^ w5<<14 ) + ( w2>>>17 ^ w2>>>19 ^ w2>>>10 ^ w2<<15 ^ w2<<13 ) + w4 + w13 )|0;\n        d = ( w4 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0x2de92c6f )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 21\n        w5 = ( ( w6>>>7  ^ w6>>>18 ^ w6>>>3  ^ w6<<25 ^ w6<<14 ) + ( w3>>>17 ^ w3>>>19 ^ w3>>>10 ^ w3<<15 ^ w3<<13 ) + w5 + w14 )|0;\n        c = ( w5 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0x4a7484aa )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 22\n        w6 = ( ( w7>>>7  ^ w7>>>18 ^ w7>>>3  ^ w7<<25 ^ w7<<14 ) + ( w4>>>17 ^ w4>>>19 ^ w4>>>10 ^ w4<<15 ^ w4<<13 ) + w6 + w15 )|0;\n        b = ( w6 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0x5cb0a9dc )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 23\n        w7 = ( ( w8>>>7  ^ w8>>>18 ^ w8>>>3  ^ w8<<25 ^ w8<<14 ) + ( w5>>>17 ^ w5>>>19 ^ w5>>>10 ^ w5<<15 ^ w5<<13 ) + w7 + w0 )|0;\n        a = ( w7 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0x76f988da )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        // 24\n        w8 = ( ( w9>>>7  ^ w9>>>18 ^ w9>>>3  ^ w9<<25 ^ w9<<14 ) + ( w6>>>17 ^ w6>>>19 ^ w6>>>10 ^ w6<<15 ^ w6<<13 ) + w8 + w1 )|0;\n        h = ( w8 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0x983e5152 )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 25\n        w9 = ( ( w10>>>7  ^ w10>>>18 ^ w10>>>3  ^ w10<<25 ^ w10<<14 ) + ( w7>>>17 ^ w7>>>19 ^ w7>>>10 ^ w7<<15 ^ w7<<13 ) + w9 + w2 )|0;\n        g = ( w9 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0xa831c66d )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 26\n        w10 = ( ( w11>>>7  ^ w11>>>18 ^ w11>>>3  ^ w11<<25 ^ w11<<14 ) + ( w8>>>17 ^ w8>>>19 ^ w8>>>10 ^ w8<<15 ^ w8<<13 ) + w10 + w3 )|0;\n        f = ( w10 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0xb00327c8 )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 27\n        w11 = ( ( w12>>>7  ^ w12>>>18 ^ w12>>>3  ^ w12<<25 ^ w12<<14 ) + ( w9>>>17 ^ w9>>>19 ^ w9>>>10 ^ w9<<15 ^ w9<<13 ) + w11 + w4 )|0;\n        e = ( w11 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0xbf597fc7 )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 28\n        w12 = ( ( w13>>>7  ^ w13>>>18 ^ w13>>>3  ^ w13<<25 ^ w13<<14 ) + ( w10>>>17 ^ w10>>>19 ^ w10>>>10 ^ w10<<15 ^ w10<<13 ) + w12 + w5 )|0;\n        d = ( w12 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0xc6e00bf3 )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 29\n        w13 = ( ( w14>>>7  ^ w14>>>18 ^ w14>>>3  ^ w14<<25 ^ w14<<14 ) + ( w11>>>17 ^ w11>>>19 ^ w11>>>10 ^ w11<<15 ^ w11<<13 ) + w13 + w6 )|0;\n        c = ( w13 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0xd5a79147 )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 30\n        w14 = ( ( w15>>>7  ^ w15>>>18 ^ w15>>>3  ^ w15<<25 ^ w15<<14 ) + ( w12>>>17 ^ w12>>>19 ^ w12>>>10 ^ w12<<15 ^ w12<<13 ) + w14 + w7 )|0;\n        b = ( w14 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0x06ca6351 )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 31\n        w15 = ( ( w0>>>7  ^ w0>>>18 ^ w0>>>3  ^ w0<<25 ^ w0<<14 ) + ( w13>>>17 ^ w13>>>19 ^ w13>>>10 ^ w13<<15 ^ w13<<13 ) + w15 + w8 )|0;\n        a = ( w15 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0x14292967 )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        // 32\n        w0 = ( ( w1>>>7  ^ w1>>>18 ^ w1>>>3  ^ w1<<25 ^ w1<<14 ) + ( w14>>>17 ^ w14>>>19 ^ w14>>>10 ^ w14<<15 ^ w14<<13 ) + w0 + w9 )|0;\n        h = ( w0 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0x27b70a85 )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 33\n        w1 = ( ( w2>>>7  ^ w2>>>18 ^ w2>>>3  ^ w2<<25 ^ w2<<14 ) + ( w15>>>17 ^ w15>>>19 ^ w15>>>10 ^ w15<<15 ^ w15<<13 ) + w1 + w10 )|0;\n        g = ( w1 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0x2e1b2138 )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 34\n        w2 = ( ( w3>>>7  ^ w3>>>18 ^ w3>>>3  ^ w3<<25 ^ w3<<14 ) + ( w0>>>17 ^ w0>>>19 ^ w0>>>10 ^ w0<<15 ^ w0<<13 ) + w2 + w11 )|0;\n        f = ( w2 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0x4d2c6dfc )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 35\n        w3 = ( ( w4>>>7  ^ w4>>>18 ^ w4>>>3  ^ w4<<25 ^ w4<<14 ) + ( w1>>>17 ^ w1>>>19 ^ w1>>>10 ^ w1<<15 ^ w1<<13 ) + w3 + w12 )|0;\n        e = ( w3 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0x53380d13 )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 36\n        w4 = ( ( w5>>>7  ^ w5>>>18 ^ w5>>>3  ^ w5<<25 ^ w5<<14 ) + ( w2>>>17 ^ w2>>>19 ^ w2>>>10 ^ w2<<15 ^ w2<<13 ) + w4 + w13 )|0;\n        d = ( w4 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0x650a7354 )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 37\n        w5 = ( ( w6>>>7  ^ w6>>>18 ^ w6>>>3  ^ w6<<25 ^ w6<<14 ) + ( w3>>>17 ^ w3>>>19 ^ w3>>>10 ^ w3<<15 ^ w3<<13 ) + w5 + w14 )|0;\n        c = ( w5 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0x766a0abb )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 38\n        w6 = ( ( w7>>>7  ^ w7>>>18 ^ w7>>>3  ^ w7<<25 ^ w7<<14 ) + ( w4>>>17 ^ w4>>>19 ^ w4>>>10 ^ w4<<15 ^ w4<<13 ) + w6 + w15 )|0;\n        b = ( w6 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0x81c2c92e )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 39\n        w7 = ( ( w8>>>7  ^ w8>>>18 ^ w8>>>3  ^ w8<<25 ^ w8<<14 ) + ( w5>>>17 ^ w5>>>19 ^ w5>>>10 ^ w5<<15 ^ w5<<13 ) + w7 + w0 )|0;\n        a = ( w7 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0x92722c85 )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        // 40\n        w8 = ( ( w9>>>7  ^ w9>>>18 ^ w9>>>3  ^ w9<<25 ^ w9<<14 ) + ( w6>>>17 ^ w6>>>19 ^ w6>>>10 ^ w6<<15 ^ w6<<13 ) + w8 + w1 )|0;\n        h = ( w8 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0xa2bfe8a1 )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 41\n        w9 = ( ( w10>>>7  ^ w10>>>18 ^ w10>>>3  ^ w10<<25 ^ w10<<14 ) + ( w7>>>17 ^ w7>>>19 ^ w7>>>10 ^ w7<<15 ^ w7<<13 ) + w9 + w2 )|0;\n        g = ( w9 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0xa81a664b )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 42\n        w10 = ( ( w11>>>7  ^ w11>>>18 ^ w11>>>3  ^ w11<<25 ^ w11<<14 ) + ( w8>>>17 ^ w8>>>19 ^ w8>>>10 ^ w8<<15 ^ w8<<13 ) + w10 + w3 )|0;\n        f = ( w10 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0xc24b8b70 )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 43\n        w11 = ( ( w12>>>7  ^ w12>>>18 ^ w12>>>3  ^ w12<<25 ^ w12<<14 ) + ( w9>>>17 ^ w9>>>19 ^ w9>>>10 ^ w9<<15 ^ w9<<13 ) + w11 + w4 )|0;\n        e = ( w11 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0xc76c51a3 )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 44\n        w12 = ( ( w13>>>7  ^ w13>>>18 ^ w13>>>3  ^ w13<<25 ^ w13<<14 ) + ( w10>>>17 ^ w10>>>19 ^ w10>>>10 ^ w10<<15 ^ w10<<13 ) + w12 + w5 )|0;\n        d = ( w12 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0xd192e819 )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 45\n        w13 = ( ( w14>>>7  ^ w14>>>18 ^ w14>>>3  ^ w14<<25 ^ w14<<14 ) + ( w11>>>17 ^ w11>>>19 ^ w11>>>10 ^ w11<<15 ^ w11<<13 ) + w13 + w6 )|0;\n        c = ( w13 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0xd6990624 )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 46\n        w14 = ( ( w15>>>7  ^ w15>>>18 ^ w15>>>3  ^ w15<<25 ^ w15<<14 ) + ( w12>>>17 ^ w12>>>19 ^ w12>>>10 ^ w12<<15 ^ w12<<13 ) + w14 + w7 )|0;\n        b = ( w14 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0xf40e3585 )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 47\n        w15 = ( ( w0>>>7  ^ w0>>>18 ^ w0>>>3  ^ w0<<25 ^ w0<<14 ) + ( w13>>>17 ^ w13>>>19 ^ w13>>>10 ^ w13<<15 ^ w13<<13 ) + w15 + w8 )|0;\n        a = ( w15 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0x106aa070 )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        // 48\n        w0 = ( ( w1>>>7  ^ w1>>>18 ^ w1>>>3  ^ w1<<25 ^ w1<<14 ) + ( w14>>>17 ^ w14>>>19 ^ w14>>>10 ^ w14<<15 ^ w14<<13 ) + w0 + w9 )|0;\n        h = ( w0 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0x19a4c116 )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 49\n        w1 = ( ( w2>>>7  ^ w2>>>18 ^ w2>>>3  ^ w2<<25 ^ w2<<14 ) + ( w15>>>17 ^ w15>>>19 ^ w15>>>10 ^ w15<<15 ^ w15<<13 ) + w1 + w10 )|0;\n        g = ( w1 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0x1e376c08 )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 50\n        w2 = ( ( w3>>>7  ^ w3>>>18 ^ w3>>>3  ^ w3<<25 ^ w3<<14 ) + ( w0>>>17 ^ w0>>>19 ^ w0>>>10 ^ w0<<15 ^ w0<<13 ) + w2 + w11 )|0;\n        f = ( w2 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0x2748774c )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 51\n        w3 = ( ( w4>>>7  ^ w4>>>18 ^ w4>>>3  ^ w4<<25 ^ w4<<14 ) + ( w1>>>17 ^ w1>>>19 ^ w1>>>10 ^ w1<<15 ^ w1<<13 ) + w3 + w12 )|0;\n        e = ( w3 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0x34b0bcb5 )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 52\n        w4 = ( ( w5>>>7  ^ w5>>>18 ^ w5>>>3  ^ w5<<25 ^ w5<<14 ) + ( w2>>>17 ^ w2>>>19 ^ w2>>>10 ^ w2<<15 ^ w2<<13 ) + w4 + w13 )|0;\n        d = ( w4 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0x391c0cb3 )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 53\n        w5 = ( ( w6>>>7  ^ w6>>>18 ^ w6>>>3  ^ w6<<25 ^ w6<<14 ) + ( w3>>>17 ^ w3>>>19 ^ w3>>>10 ^ w3<<15 ^ w3<<13 ) + w5 + w14 )|0;\n        c = ( w5 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0x4ed8aa4a )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 54\n        w6 = ( ( w7>>>7  ^ w7>>>18 ^ w7>>>3  ^ w7<<25 ^ w7<<14 ) + ( w4>>>17 ^ w4>>>19 ^ w4>>>10 ^ w4<<15 ^ w4<<13 ) + w6 + w15 )|0;\n        b = ( w6 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0x5b9cca4f )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 55\n        w7 = ( ( w8>>>7  ^ w8>>>18 ^ w8>>>3  ^ w8<<25 ^ w8<<14 ) + ( w5>>>17 ^ w5>>>19 ^ w5>>>10 ^ w5<<15 ^ w5<<13 ) + w7 + w0 )|0;\n        a = ( w7 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0x682e6ff3 )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        // 56\n        w8 = ( ( w9>>>7  ^ w9>>>18 ^ w9>>>3  ^ w9<<25 ^ w9<<14 ) + ( w6>>>17 ^ w6>>>19 ^ w6>>>10 ^ w6<<15 ^ w6<<13 ) + w8 + w1 )|0;\n        h = ( w8 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0x748f82ee )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 57\n        w9 = ( ( w10>>>7  ^ w10>>>18 ^ w10>>>3  ^ w10<<25 ^ w10<<14 ) + ( w7>>>17 ^ w7>>>19 ^ w7>>>10 ^ w7<<15 ^ w7<<13 ) + w9 + w2 )|0;\n        g = ( w9 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0x78a5636f )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 58\n        w10 = ( ( w11>>>7  ^ w11>>>18 ^ w11>>>3  ^ w11<<25 ^ w11<<14 ) + ( w8>>>17 ^ w8>>>19 ^ w8>>>10 ^ w8<<15 ^ w8<<13 ) + w10 + w3 )|0;\n        f = ( w10 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0x84c87814 )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 59\n        w11 = ( ( w12>>>7  ^ w12>>>18 ^ w12>>>3  ^ w12<<25 ^ w12<<14 ) + ( w9>>>17 ^ w9>>>19 ^ w9>>>10 ^ w9<<15 ^ w9<<13 ) + w11 + w4 )|0;\n        e = ( w11 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0x8cc70208 )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 60\n        w12 = ( ( w13>>>7  ^ w13>>>18 ^ w13>>>3  ^ w13<<25 ^ w13<<14 ) + ( w10>>>17 ^ w10>>>19 ^ w10>>>10 ^ w10<<15 ^ w10<<13 ) + w12 + w5 )|0;\n        d = ( w12 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0x90befffa )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 61\n        w13 = ( ( w14>>>7  ^ w14>>>18 ^ w14>>>3  ^ w14<<25 ^ w14<<14 ) + ( w11>>>17 ^ w11>>>19 ^ w11>>>10 ^ w11<<15 ^ w11<<13 ) + w13 + w6 )|0;\n        c = ( w13 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0xa4506ceb )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 62\n        w14 = ( ( w15>>>7  ^ w15>>>18 ^ w15>>>3  ^ w15<<25 ^ w15<<14 ) + ( w12>>>17 ^ w12>>>19 ^ w12>>>10 ^ w12<<15 ^ w12<<13 ) + w14 + w7 )|0;\n        b = ( w14 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0xbef9a3f7 )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 63\n        w15 = ( ( w0>>>7  ^ w0>>>18 ^ w0>>>3  ^ w0<<25 ^ w0<<14 ) + ( w13>>>17 ^ w13>>>19 ^ w13>>>10 ^ w13<<15 ^ w13<<13 ) + w15 + w8 )|0;\n        a = ( w15 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0xc67178f2 )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        H0 = ( H0 + a )|0;\n        H1 = ( H1 + b )|0;\n        H2 = ( H2 + c )|0;\n        H3 = ( H3 + d )|0;\n        H4 = ( H4 + e )|0;\n        H5 = ( H5 + f )|0;\n        H6 = ( H6 + g )|0;\n        H7 = ( H7 + h )|0;\n    }\n\n    function _core_heap ( offset ) {\n        offset = offset|0;\n\n        _core(\n            HEAP[offset|0]<<24 | HEAP[offset|1]<<16 | HEAP[offset|2]<<8 | HEAP[offset|3],\n            HEAP[offset|4]<<24 | HEAP[offset|5]<<16 | HEAP[offset|6]<<8 | HEAP[offset|7],\n            HEAP[offset|8]<<24 | HEAP[offset|9]<<16 | HEAP[offset|10]<<8 | HEAP[offset|11],\n            HEAP[offset|12]<<24 | HEAP[offset|13]<<16 | HEAP[offset|14]<<8 | HEAP[offset|15],\n            HEAP[offset|16]<<24 | HEAP[offset|17]<<16 | HEAP[offset|18]<<8 | HEAP[offset|19],\n            HEAP[offset|20]<<24 | HEAP[offset|21]<<16 | HEAP[offset|22]<<8 | HEAP[offset|23],\n            HEAP[offset|24]<<24 | HEAP[offset|25]<<16 | HEAP[offset|26]<<8 | HEAP[offset|27],\n            HEAP[offset|28]<<24 | HEAP[offset|29]<<16 | HEAP[offset|30]<<8 | HEAP[offset|31],\n            HEAP[offset|32]<<24 | HEAP[offset|33]<<16 | HEAP[offset|34]<<8 | HEAP[offset|35],\n            HEAP[offset|36]<<24 | HEAP[offset|37]<<16 | HEAP[offset|38]<<8 | HEAP[offset|39],\n            HEAP[offset|40]<<24 | HEAP[offset|41]<<16 | HEAP[offset|42]<<8 | HEAP[offset|43],\n            HEAP[offset|44]<<24 | HEAP[offset|45]<<16 | HEAP[offset|46]<<8 | HEAP[offset|47],\n            HEAP[offset|48]<<24 | HEAP[offset|49]<<16 | HEAP[offset|50]<<8 | HEAP[offset|51],\n            HEAP[offset|52]<<24 | HEAP[offset|53]<<16 | HEAP[offset|54]<<8 | HEAP[offset|55],\n            HEAP[offset|56]<<24 | HEAP[offset|57]<<16 | HEAP[offset|58]<<8 | HEAP[offset|59],\n            HEAP[offset|60]<<24 | HEAP[offset|61]<<16 | HEAP[offset|62]<<8 | HEAP[offset|63]\n        );\n    }\n\n    // offset — multiple of 32\n    function _state_to_heap ( output ) {\n        output = output|0;\n\n        HEAP[output|0] = H0>>>24;\n        HEAP[output|1] = H0>>>16&255;\n        HEAP[output|2] = H0>>>8&255;\n        HEAP[output|3] = H0&255;\n        HEAP[output|4] = H1>>>24;\n        HEAP[output|5] = H1>>>16&255;\n        HEAP[output|6] = H1>>>8&255;\n        HEAP[output|7] = H1&255;\n        HEAP[output|8] = H2>>>24;\n        HEAP[output|9] = H2>>>16&255;\n        HEAP[output|10] = H2>>>8&255;\n        HEAP[output|11] = H2&255;\n        HEAP[output|12] = H3>>>24;\n        HEAP[output|13] = H3>>>16&255;\n        HEAP[output|14] = H3>>>8&255;\n        HEAP[output|15] = H3&255;\n        HEAP[output|16] = H4>>>24;\n        HEAP[output|17] = H4>>>16&255;\n        HEAP[output|18] = H4>>>8&255;\n        HEAP[output|19] = H4&255;\n        HEAP[output|20] = H5>>>24;\n        HEAP[output|21] = H5>>>16&255;\n        HEAP[output|22] = H5>>>8&255;\n        HEAP[output|23] = H5&255;\n        HEAP[output|24] = H6>>>24;\n        HEAP[output|25] = H6>>>16&255;\n        HEAP[output|26] = H6>>>8&255;\n        HEAP[output|27] = H6&255;\n        HEAP[output|28] = H7>>>24;\n        HEAP[output|29] = H7>>>16&255;\n        HEAP[output|30] = H7>>>8&255;\n        HEAP[output|31] = H7&255;\n    }\n\n    function reset () {\n        H0 = 0x6a09e667;\n        H1 = 0xbb67ae85;\n        H2 = 0x3c6ef372;\n        H3 = 0xa54ff53a;\n        H4 = 0x510e527f;\n        H5 = 0x9b05688c;\n        H6 = 0x1f83d9ab;\n        H7 = 0x5be0cd19;\n        TOTAL0 = TOTAL1 = 0;\n    }\n\n    function init ( h0, h1, h2, h3, h4, h5, h6, h7, total0, total1 ) {\n        h0 = h0|0;\n        h1 = h1|0;\n        h2 = h2|0;\n        h3 = h3|0;\n        h4 = h4|0;\n        h5 = h5|0;\n        h6 = h6|0;\n        h7 = h7|0;\n        total0 = total0|0;\n        total1 = total1|0;\n\n        H0 = h0;\n        H1 = h1;\n        H2 = h2;\n        H3 = h3;\n        H4 = h4;\n        H5 = h5;\n        H6 = h6;\n        H7 = h7;\n        TOTAL0 = total0;\n        TOTAL1 = total1;\n    }\n\n    // offset — multiple of 64\n    function process ( offset, length ) {\n        offset = offset|0;\n        length = length|0;\n\n        var hashed = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        while ( (length|0) >= 64 ) {\n            _core_heap(offset);\n\n            offset = ( offset + 64 )|0;\n            length = ( length - 64 )|0;\n\n            hashed = ( hashed + 64 )|0;\n        }\n\n        TOTAL0 = ( TOTAL0 + hashed )|0;\n        if ( TOTAL0>>>0 < hashed>>>0 ) TOTAL1 = ( TOTAL1 + 1 )|0;\n\n        return hashed|0;\n    }\n\n    // offset — multiple of 64\n    // output — multiple of 32\n    function finish ( offset, length, output ) {\n        offset = offset|0;\n        length = length|0;\n        output = output|0;\n\n        var hashed = 0,\n            i = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        if ( ~output )\n            if ( output & 31 )\n                return -1;\n\n        if ( (length|0) >= 64 ) {\n            hashed = process( offset, length )|0;\n            if ( (hashed|0) == -1 )\n                return -1;\n\n            offset = ( offset + hashed )|0;\n            length = ( length - hashed )|0;\n        }\n\n        hashed = ( hashed + length )|0;\n        TOTAL0 = ( TOTAL0 + length )|0;\n        if ( TOTAL0>>>0 < length>>>0 ) TOTAL1 = ( TOTAL1 + 1 )|0;\n\n        HEAP[offset|length] = 0x80;\n\n        if ( (length|0) >= 56 ) {\n            for ( i = (length+1)|0; (i|0) < 64; i = (i+1)|0 )\n                HEAP[offset|i] = 0x00;\n\n            _core_heap(offset);\n\n            length = 0;\n\n            HEAP[offset|0] = 0;\n        }\n\n        for ( i = (length+1)|0; (i|0) < 59; i = (i+1)|0 )\n            HEAP[offset|i] = 0;\n\n        HEAP[offset|56] = TOTAL1>>>21&255;\n        HEAP[offset|57] = TOTAL1>>>13&255;\n        HEAP[offset|58] = TOTAL1>>>5&255;\n        HEAP[offset|59] = TOTAL1<<3&255 | TOTAL0>>>29;\n        HEAP[offset|60] = TOTAL0>>>21&255;\n        HEAP[offset|61] = TOTAL0>>>13&255;\n        HEAP[offset|62] = TOTAL0>>>5&255;\n        HEAP[offset|63] = TOTAL0<<3&255;\n        _core_heap(offset);\n\n        if ( ~output )\n            _state_to_heap(output);\n\n        return hashed|0;\n    }\n\n    function hmac_reset () {\n        H0 = I0;\n        H1 = I1;\n        H2 = I2;\n        H3 = I3;\n        H4 = I4;\n        H5 = I5;\n        H6 = I6;\n        H7 = I7;\n        TOTAL0 = 64;\n        TOTAL1 = 0;\n    }\n\n    function _hmac_opad () {\n        H0 = O0;\n        H1 = O1;\n        H2 = O2;\n        H3 = O3;\n        H4 = O4;\n        H5 = O5;\n        H6 = O6;\n        H7 = O7;\n        TOTAL0 = 64;\n        TOTAL1 = 0;\n    }\n\n    function hmac_init ( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15 ) {\n        p0 = p0|0;\n        p1 = p1|0;\n        p2 = p2|0;\n        p3 = p3|0;\n        p4 = p4|0;\n        p5 = p5|0;\n        p6 = p6|0;\n        p7 = p7|0;\n        p8 = p8|0;\n        p9 = p9|0;\n        p10 = p10|0;\n        p11 = p11|0;\n        p12 = p12|0;\n        p13 = p13|0;\n        p14 = p14|0;\n        p15 = p15|0;\n\n        // opad\n        reset();\n        _core(\n            p0 ^ 0x5c5c5c5c,\n            p1 ^ 0x5c5c5c5c,\n            p2 ^ 0x5c5c5c5c,\n            p3 ^ 0x5c5c5c5c,\n            p4 ^ 0x5c5c5c5c,\n            p5 ^ 0x5c5c5c5c,\n            p6 ^ 0x5c5c5c5c,\n            p7 ^ 0x5c5c5c5c,\n            p8 ^ 0x5c5c5c5c,\n            p9 ^ 0x5c5c5c5c,\n            p10 ^ 0x5c5c5c5c,\n            p11 ^ 0x5c5c5c5c,\n            p12 ^ 0x5c5c5c5c,\n            p13 ^ 0x5c5c5c5c,\n            p14 ^ 0x5c5c5c5c,\n            p15 ^ 0x5c5c5c5c\n        );\n        O0 = H0;\n        O1 = H1;\n        O2 = H2;\n        O3 = H3;\n        O4 = H4;\n        O5 = H5;\n        O6 = H6;\n        O7 = H7;\n\n        // ipad\n        reset();\n        _core(\n            p0 ^ 0x36363636,\n            p1 ^ 0x36363636,\n            p2 ^ 0x36363636,\n            p3 ^ 0x36363636,\n            p4 ^ 0x36363636,\n            p5 ^ 0x36363636,\n            p6 ^ 0x36363636,\n            p7 ^ 0x36363636,\n            p8 ^ 0x36363636,\n            p9 ^ 0x36363636,\n            p10 ^ 0x36363636,\n            p11 ^ 0x36363636,\n            p12 ^ 0x36363636,\n            p13 ^ 0x36363636,\n            p14 ^ 0x36363636,\n            p15 ^ 0x36363636\n        );\n        I0 = H0;\n        I1 = H1;\n        I2 = H2;\n        I3 = H3;\n        I4 = H4;\n        I5 = H5;\n        I6 = H6;\n        I7 = H7;\n\n        TOTAL0 = 64;\n        TOTAL1 = 0;\n    }\n\n    // offset — multiple of 64\n    // output — multiple of 32\n    function hmac_finish ( offset, length, output ) {\n        offset = offset|0;\n        length = length|0;\n        output = output|0;\n\n        var t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0,\n            hashed = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        if ( ~output )\n            if ( output & 31 )\n                return -1;\n\n        hashed = finish( offset, length, -1 )|0;\n        t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;\n\n        _hmac_opad();\n        _core( t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768 );\n\n        if ( ~output )\n            _state_to_heap(output);\n\n        return hashed|0;\n    }\n\n    // salt is assumed to be already processed\n    // offset — multiple of 64\n    // output — multiple of 32\n    function pbkdf2_generate_block ( offset, length, block, count, output ) {\n        offset = offset|0;\n        length = length|0;\n        block = block|0;\n        count = count|0;\n        output = output|0;\n\n        var h0 = 0, h1 = 0, h2 = 0, h3 = 0, h4 = 0, h5 = 0, h6 = 0, h7 = 0,\n            t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        if ( ~output )\n            if ( output & 31 )\n                return -1;\n\n        // pad block number into heap\n        // FIXME probable OOB write\n        HEAP[(offset+length)|0]   = block>>>24;\n        HEAP[(offset+length+1)|0] = block>>>16&255;\n        HEAP[(offset+length+2)|0] = block>>>8&255;\n        HEAP[(offset+length+3)|0] = block&255;\n\n        // finish first iteration\n        hmac_finish( offset, (length+4)|0, -1 )|0;\n        h0 = t0 = H0, h1 = t1 = H1, h2 = t2 = H2, h3 = t3 = H3, h4 = t4 = H4, h5 = t5 = H5, h6 = t6 = H6, h7 = t7 = H7;\n        count = (count-1)|0;\n\n        // perform the rest iterations\n        while ( (count|0) > 0 ) {\n            hmac_reset();\n            _core( t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768 );\n            t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;\n\n            _hmac_opad();\n            _core( t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768 );\n            t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;\n\n            h0 = h0 ^ H0;\n            h1 = h1 ^ H1;\n            h2 = h2 ^ H2;\n            h3 = h3 ^ H3;\n            h4 = h4 ^ H4;\n            h5 = h5 ^ H5;\n            h6 = h6 ^ H6;\n            h7 = h7 ^ H7;\n\n            count = (count-1)|0;\n        }\n\n        H0 = h0;\n        H1 = h1;\n        H2 = h2;\n        H3 = h3;\n        H4 = h4;\n        H5 = h5;\n        H6 = h6;\n        H7 = h7;\n\n        if ( ~output )\n            _state_to_heap(output);\n\n        return 0;\n    }\n\n    return {\n        // SHA256\n        reset: reset,\n        init: init,\n        process: process,\n        finish: finish,\n\n        // HMAC-SHA256\n        hmac_reset: hmac_reset,\n        hmac_init: hmac_init,\n        hmac_finish: hmac_finish,\n\n        // PBKDF2-HMAC-SHA256\n        pbkdf2_generate_block: pbkdf2_generate_block\n    }\n}\n","/**\n * SHA256 exports\n */\n\nimport {get_sha256_instance, sha256_constructor} from './sha256';\nimport {bytes_to_base64, bytes_to_hex} from '../../utils';\n\nfunction sha256_bytes (data ) {\n    if ( data === undefined ) throw new SyntaxError(\"data required\");\n    return get_sha256_instance().reset().process(data).finish().result;\n}\n\nfunction sha256_hex ( data ) {\n    var result = sha256_bytes(data);\n    return bytes_to_hex(result);\n}\n\nfunction sha256_base64 ( data ) {\n    var result = sha256_bytes(data);\n    return bytes_to_base64(result);\n}\n\nexport var SHA256 = sha256_constructor;\nSHA256.bytes = sha256_bytes;\nSHA256.hex = sha256_hex;\nSHA256.base64 = sha256_base64;\n","import {is_buffer, is_bytes, is_string, string_to_bytes} from '../utils';\nimport {IllegalArgumentError, IllegalStateError} from '../errors';\n\nexport function hmac_constructor (options ) {\n    options = options || {};\n\n    if ( !options.hash )\n        throw new SyntaxError(\"option 'hash' is required\");\n\n    if ( !options.hash.HASH_SIZE )\n        throw new SyntaxError(\"option 'hash' supplied doesn't seem to be a valid hash function\");\n\n    this.hash = options.hash;\n    this.BLOCK_SIZE = this.hash.BLOCK_SIZE;\n    this.HMAC_SIZE = this.hash.HASH_SIZE;\n\n    this.key = null;\n    this.verify = null;\n    this.result = null;\n\n    if ( options.password !== undefined || options.verify !== undefined )\n        this.reset(options);\n\n    return this;\n}\n\nexport function _hmac_key ( hash, password ) {\n    if ( is_buffer(password) )\n        password = new Uint8Array(password);\n\n    if ( is_string(password) )\n        password = string_to_bytes(password);\n\n    if ( !is_bytes(password) )\n        throw new TypeError(\"password isn't of expected type\");\n\n    var key = new Uint8Array( hash.BLOCK_SIZE );\n\n    if ( password.length > hash.BLOCK_SIZE ) {\n        key.set( hash.reset().process(password).finish().result );\n    }\n    else {\n        key.set(password);\n    }\n\n    return key;\n}\n\nexport function _hmac_init_verify ( verify ) {\n    if ( is_buffer(verify) || is_bytes(verify) ) {\n        verify = new Uint8Array(verify);\n    }\n    else if ( is_string(verify) ) {\n        verify = string_to_bytes(verify);\n    }\n    else {\n        throw new TypeError(\"verify tag isn't of expected type\");\n    }\n\n    if ( verify.length !== this.HMAC_SIZE )\n        throw new IllegalArgumentError(\"illegal verification tag size\");\n\n    this.verify = verify;\n}\n\nfunction hmac_reset ( options ) {\n    options = options || {};\n    var password = options.password;\n\n    if ( this.key === null && !is_string(password) && !password )\n        throw new IllegalStateError(\"no key is associated with the instance\");\n\n    this.result = null;\n    this.hash.reset();\n\n    if ( password || is_string(password) )\n        this.key = _hmac_key( this.hash, password );\n\n    var ipad = new Uint8Array(this.key);\n    for ( var i = 0; i < ipad.length; ++i )\n        ipad[i] ^= 0x36;\n\n    this.hash.process(ipad);\n\n    var verify = options.verify;\n    if ( verify !== undefined ) {\n        _hmac_init_verify.call( this, verify );\n    }\n    else {\n        this.verify = null;\n    }\n\n    return this;\n}\n\nexport function hmac_process ( data ) {\n    if ( this.key === null )\n        throw new IllegalStateError(\"no key is associated with the instance\");\n\n    if ( this.result !== null )\n        throw new IllegalStateError(\"state must be reset before processing new data\");\n\n    this.hash.process(data);\n\n    return this;\n}\n\nfunction hmac_finish () {\n    if ( this.key === null )\n        throw new IllegalStateError(\"no key is associated with the instance\");\n\n    if ( this.result !== null )\n        throw new IllegalStateError(\"state must be reset before processing new data\");\n\n    var inner_result = this.hash.finish().result;\n\n    var opad = new Uint8Array(this.key);\n    for ( var i = 0; i < opad.length; ++i )\n        opad[i] ^= 0x5c;\n\n    var verify = this.verify;\n    var result = this.hash.reset().process(opad).process(inner_result).finish().result;\n\n    if ( verify ) {\n        if ( verify.length === result.length ) {\n            var diff = 0;\n            for ( var i = 0; i < verify.length; i++ ) {\n                diff |= ( verify[i] ^ result[i] );\n            }\n            this.result = !diff;\n        } else {\n            this.result = false;\n        }\n    }\n    else {\n        this.result = result;\n    }\n\n    return this;\n}\n\nvar hmac_prototype = hmac_constructor.prototype;\nhmac_prototype.reset =   hmac_reset;\nhmac_prototype.process = hmac_process;\nhmac_prototype.finish =  hmac_finish;\n","import {hmac_process, hmac_constructor, _hmac_key, _hmac_init_verify} from './hmac';\nimport {_sha1_hash_size, get_sha1_instance, sha1_constructor} from '../hash/sha1/sha1';\nimport {is_string, string_to_bytes} from '../utils';\nimport {IllegalStateError} from '../errors';\n\nexport function hmac_sha1_constructor (options ) {\n    options = options || {};\n\n    if ( !( options.hash instanceof sha1_constructor ) )\n        options.hash = get_sha1_instance();\n\n    hmac_constructor.call( this, options );\n\n    return this;\n}\n\nfunction hmac_sha1_reset ( options ) {\n    options = options || {};\n\n    this.result = null;\n    this.hash.reset();\n\n    var password = options.password;\n    if ( password !== undefined ) {\n        if ( is_string(password) )\n            password = string_to_bytes(password);\n\n        var key = this.key = _hmac_key( this.hash, password );\n        this.hash.reset().asm.hmac_init(\n                (key[0]<<24)|(key[1]<<16)|(key[2]<<8)|(key[3]),\n                (key[4]<<24)|(key[5]<<16)|(key[6]<<8)|(key[7]),\n                (key[8]<<24)|(key[9]<<16)|(key[10]<<8)|(key[11]),\n                (key[12]<<24)|(key[13]<<16)|(key[14]<<8)|(key[15]),\n                (key[16]<<24)|(key[17]<<16)|(key[18]<<8)|(key[19]),\n                (key[20]<<24)|(key[21]<<16)|(key[22]<<8)|(key[23]),\n                (key[24]<<24)|(key[25]<<16)|(key[26]<<8)|(key[27]),\n                (key[28]<<24)|(key[29]<<16)|(key[30]<<8)|(key[31]),\n                (key[32]<<24)|(key[33]<<16)|(key[34]<<8)|(key[35]),\n                (key[36]<<24)|(key[37]<<16)|(key[38]<<8)|(key[39]),\n                (key[40]<<24)|(key[41]<<16)|(key[42]<<8)|(key[43]),\n                (key[44]<<24)|(key[45]<<16)|(key[46]<<8)|(key[47]),\n                (key[48]<<24)|(key[49]<<16)|(key[50]<<8)|(key[51]),\n                (key[52]<<24)|(key[53]<<16)|(key[54]<<8)|(key[55]),\n                (key[56]<<24)|(key[57]<<16)|(key[58]<<8)|(key[59]),\n                (key[60]<<24)|(key[61]<<16)|(key[62]<<8)|(key[63])\n        );\n    }\n    else {\n        this.hash.asm.hmac_reset();\n    }\n\n    var verify = options.verify;\n    if ( verify !== undefined ) {\n        _hmac_init_verify.call( this, verify );\n    }\n    else {\n        this.verify = null;\n    }\n\n    return this;\n}\n\nfunction hmac_sha1_finish () {\n    if ( this.key === null )\n        throw new IllegalStateError(\"no key is associated with the instance\");\n\n    if ( this.result !== null )\n        throw new IllegalStateError(\"state must be reset before processing new data\");\n\n    var hash = this.hash,\n        asm = this.hash.asm,\n        heap = this.hash.heap;\n\n    asm.hmac_finish( hash.pos, hash.len, 0 );\n\n    var verify = this.verify;\n    var result = new Uint8Array(_sha1_hash_size);\n    result.set( heap.subarray( 0, _sha1_hash_size ) );\n\n    if ( verify ) {\n        if ( verify.length === result.length ) {\n            var diff = 0;\n            for ( var i = 0; i < verify.length; i++ ) {\n                diff |= ( verify[i] ^ result[i] );\n            }\n            this.result = !diff;\n        } else {\n            this.result = false;\n        }\n    }\n    else {\n        this.result = result;\n    }\n\n    return this;\n}\n\nhmac_sha1_constructor.BLOCK_SIZE = sha1_constructor.BLOCK_SIZE;\nhmac_sha1_constructor.HMAC_SIZE = sha1_constructor.HASH_SIZE;\n\nvar hmac_sha1_prototype = hmac_sha1_constructor.prototype;\nhmac_sha1_prototype.reset = hmac_sha1_reset;\nhmac_sha1_prototype.process = hmac_process;\nhmac_sha1_prototype.finish = hmac_sha1_finish;\n\nvar hmac_sha1_instance = null;\n\nexport function get_hmac_sha1_instance () {\n    if ( hmac_sha1_instance === null ) hmac_sha1_instance = new hmac_sha1_constructor();\n    return hmac_sha1_instance;\n}\n","/**\n * HMAC-SHA1 exports\n */\n\nimport {get_hmac_sha1_instance, hmac_sha1_constructor} from './hmac-sha1';\nimport {bytes_to_base64, bytes_to_hex} from '../utils';\n\nfunction hmac_sha1_bytes (data, password ) {\n    if ( data === undefined ) throw new SyntaxError(\"data required\");\n    if ( password === undefined ) throw new SyntaxError(\"password required\");\n    return get_hmac_sha1_instance().reset( { password: password } ).process(data).finish().result;\n}\n\nfunction hmac_sha1_hex ( data, password ) {\n    var result = hmac_sha1_bytes( data, password );\n    return bytes_to_hex(result);\n}\n\nfunction hmac_sha1_base64 ( data, password ) {\n    var result = hmac_sha1_bytes( data, password );\n    return bytes_to_base64(result);\n}\n\nexport var HMAC_SHA1 = hmac_sha1_constructor;\n\nHMAC_SHA1.bytes = hmac_sha1_bytes;\nHMAC_SHA1.hex = hmac_sha1_hex;\nHMAC_SHA1.base64 = hmac_sha1_base64;\n","import {hmac_constructor, hmac_process, _hmac_init_verify, _hmac_key} from './hmac';\nimport {_sha256_hash_size, get_sha256_instance, sha256_constructor} from '../hash/sha256/sha256';\nimport {is_string, string_to_bytes} from '../utils';\nimport {IllegalStateError} from '../errors';\n\nexport function hmac_sha256_constructor (options ) {\n    options = options || {};\n\n    if ( !( options.hash instanceof sha256_constructor ) )\n        options.hash = get_sha256_instance();\n\n    hmac_constructor.call( this, options );\n\n    return this;\n}\n\nfunction hmac_sha256_reset ( options ) {\n    options = options || {};\n\n    this.result = null;\n    this.hash.reset();\n\n    var password = options.password;\n    if ( password !== undefined ) {\n        if ( is_string(password) )\n            password = string_to_bytes(password);\n\n        var key = this.key = _hmac_key( this.hash, password );\n        this.hash.reset().asm.hmac_init(\n            (key[0]<<24)|(key[1]<<16)|(key[2]<<8)|(key[3]),\n            (key[4]<<24)|(key[5]<<16)|(key[6]<<8)|(key[7]),\n            (key[8]<<24)|(key[9]<<16)|(key[10]<<8)|(key[11]),\n            (key[12]<<24)|(key[13]<<16)|(key[14]<<8)|(key[15]),\n            (key[16]<<24)|(key[17]<<16)|(key[18]<<8)|(key[19]),\n            (key[20]<<24)|(key[21]<<16)|(key[22]<<8)|(key[23]),\n            (key[24]<<24)|(key[25]<<16)|(key[26]<<8)|(key[27]),\n            (key[28]<<24)|(key[29]<<16)|(key[30]<<8)|(key[31]),\n            (key[32]<<24)|(key[33]<<16)|(key[34]<<8)|(key[35]),\n            (key[36]<<24)|(key[37]<<16)|(key[38]<<8)|(key[39]),\n            (key[40]<<24)|(key[41]<<16)|(key[42]<<8)|(key[43]),\n            (key[44]<<24)|(key[45]<<16)|(key[46]<<8)|(key[47]),\n            (key[48]<<24)|(key[49]<<16)|(key[50]<<8)|(key[51]),\n            (key[52]<<24)|(key[53]<<16)|(key[54]<<8)|(key[55]),\n            (key[56]<<24)|(key[57]<<16)|(key[58]<<8)|(key[59]),\n            (key[60]<<24)|(key[61]<<16)|(key[62]<<8)|(key[63])\n        );\n    }\n    else {\n        this.hash.asm.hmac_reset();\n    }\n\n    var verify = options.verify;\n    if ( verify !== undefined ) {\n        _hmac_init_verify.call( this, verify );\n    }\n    else {\n        this.verify = null;\n    }\n\n    return this;\n}\n\nfunction hmac_sha256_finish () {\n    if ( this.key === null )\n        throw new IllegalStateError(\"no key is associated with the instance\");\n\n    if ( this.result !== null )\n        throw new IllegalStateError(\"state must be reset before processing new data\");\n\n    var hash = this.hash,\n        asm = this.hash.asm,\n        heap = this.hash.heap;\n\n    asm.hmac_finish( hash.pos, hash.len, 0 );\n\n    var verify = this.verify;\n    var result = new Uint8Array(_sha256_hash_size);\n    result.set( heap.subarray( 0, _sha256_hash_size ) );\n\n    if ( verify ) {\n        if ( verify.length === result.length ) {\n            var diff = 0;\n            for ( var i = 0; i < verify.length; i++ ) {\n                diff |= ( verify[i] ^ result[i] );\n            }\n            this.result = !diff;\n        } else {\n            this.result = false;\n        }\n    }\n    else {\n        this.result = result;\n    }\n\n    return this;\n}\n\nhmac_sha256_constructor.BLOCK_SIZE = sha256_constructor.BLOCK_SIZE;\nhmac_sha256_constructor.HMAC_SIZE = sha256_constructor.HASH_SIZE;\n\nvar hmac_sha256_prototype = hmac_sha256_constructor.prototype;\nhmac_sha256_prototype.reset = hmac_sha256_reset;\nhmac_sha256_prototype.process = hmac_process;\nhmac_sha256_prototype.finish = hmac_sha256_finish;\n\nvar hmac_sha256_instance = null;\n\nexport function get_hmac_sha256_instance () {\n    if ( hmac_sha256_instance === null ) hmac_sha256_instance = new hmac_sha256_constructor();\n    return hmac_sha256_instance;\n}\n","/**\n * HMAC-SHA256 exports\n */\n\nimport {get_hmac_sha256_instance, hmac_sha256_constructor} from './hmac-sha256';\nimport {bytes_to_base64, bytes_to_hex} from '../utils';\n\nfunction hmac_sha256_bytes (data, password ) {\n    if ( data === undefined ) throw new SyntaxError(\"data required\");\n    if ( password === undefined ) throw new SyntaxError(\"password required\");\n    return get_hmac_sha256_instance().reset( { password: password } ).process(data).finish().result;\n}\n\nfunction hmac_sha256_hex ( data, password ) {\n    var result = hmac_sha256_bytes( data, password );\n    return bytes_to_hex(result);\n}\n\nfunction hmac_sha256_base64 ( data, password ) {\n    var result = hmac_sha256_bytes( data, password );\n    return bytes_to_base64(result);\n}\n\nexport var HMAC_SHA256 = hmac_sha256_constructor;\n\nHMAC_SHA256.bytes = hmac_sha256_bytes;\nHMAC_SHA256.hex = hmac_sha256_hex;\nHMAC_SHA256.base64 = hmac_sha256_base64;\n","import {is_string} from '../utils';\nimport {IllegalArgumentError, IllegalStateError} from '../errors';\n\nexport function pbkdf2_constructor (options ) {\n    options = options || {};\n\n    if ( !options.hmac )\n        throw new SyntaxError(\"option 'hmac' is required\");\n\n    if ( !options.hmac.HMAC_SIZE )\n        throw new SyntaxError(\"option 'hmac' supplied doesn't seem to be a valid HMAC function\");\n\n    this.hmac = options.hmac;\n    this.count = options.count || 4096;\n    this.length = options.length || this.hmac.HMAC_SIZE;\n\n    this.result = null;\n\n    var password = options.password;\n    if ( password || is_string(password) )\n        this.reset(options);\n\n    return this;\n}\n\nexport function pbkdf2_reset ( options ) {\n    this.result = null;\n\n    this.hmac.reset(options);\n\n    return this;\n}\n\nfunction pbkdf2_generate ( salt, count, length ) {\n    if ( this.result !== null )\n        throw new IllegalStateError(\"state must be reset before processing new data\");\n\n    if ( !salt && !is_string(salt) )\n        throw new IllegalArgumentError(\"bad 'salt' value\");\n\n    count = count || this.count;\n    length = length || this.length;\n\n    this.result = new Uint8Array(length);\n\n    var blocks = Math.ceil( length / this.hmac.HMAC_SIZE );\n\n    for ( var i = 1; i <= blocks; ++i ) {\n        var j = ( i - 1 ) * this.hmac.HMAC_SIZE;\n        var l = ( i < blocks ? 0 : length % this.hmac.HMAC_SIZE ) || this.hmac.HMAC_SIZE;\n        var tmp = new Uint8Array( this.hmac.reset().process(salt).process( new Uint8Array([ i>>>24&0xff, i>>>16&0xff, i>>>8&0xff, i&0xff ]) ).finish().result );\n        this.result.set( tmp.subarray( 0, l ), j );\n        for ( var k = 1; k < count; ++k ) {\n            tmp = new Uint8Array( this.hmac.reset().process(tmp).finish().result );\n            for ( var r = 0; r < l; ++r ) this.result[j+r] ^= tmp[r];\n        }\n    }\n\n    return this;\n}\n\n// methods\nvar pbkdf2_prototype = pbkdf2_constructor.prototype;\npbkdf2_prototype.reset =   pbkdf2_reset;\npbkdf2_prototype.generate = pbkdf2_generate;\n","import {get_hmac_sha1_instance, hmac_sha1_constructor} from '../hmac/hmac-sha1';\nimport {pbkdf2_constructor, pbkdf2_reset} from './pbkdf2';\nimport {is_string} from '../utils';\nimport {IllegalArgumentError, IllegalStateError} from '../errors';\n\nexport function pbkdf2_hmac_sha1_constructor (options ) {\n    options = options || {};\n\n    if ( !( options.hmac instanceof hmac_sha1_constructor ) )\n        options.hmac = get_hmac_sha1_instance();\n\n    pbkdf2_constructor.call( this, options );\n\n    return this;\n}\n\nfunction pbkdf2_hmac_sha1_generate ( salt, count, length ) {\n    if ( this.result !== null )\n        throw new IllegalStateError(\"state must be reset before processing new data\");\n\n    if ( !salt && !is_string(salt) )\n        throw new IllegalArgumentError(\"bad 'salt' value\");\n\n    count = count || this.count;\n    length = length || this.length;\n\n    this.result = new Uint8Array(length);\n\n    var blocks = Math.ceil( length / this.hmac.HMAC_SIZE );\n\n    for ( var i = 1; i <= blocks; ++i ) {\n        var j = ( i - 1 ) * this.hmac.HMAC_SIZE;\n        var l = ( i < blocks ? 0 : length % this.hmac.HMAC_SIZE ) || this.hmac.HMAC_SIZE;\n\n        this.hmac.reset().process(salt);\n        this.hmac.hash.asm.pbkdf2_generate_block( this.hmac.hash.pos, this.hmac.hash.len, i, count, 0 );\n\n        this.result.set( this.hmac.hash.heap.subarray( 0, l ), j );\n    }\n\n    return this;\n}\n\nvar pbkdf2_hmac_sha1_prototype = pbkdf2_hmac_sha1_constructor.prototype;\npbkdf2_hmac_sha1_prototype.reset =   pbkdf2_reset;\npbkdf2_hmac_sha1_prototype.generate = pbkdf2_hmac_sha1_generate;\n\nvar pbkdf2_hmac_sha1_instance = null;\n\nexport function get_pbkdf2_hmac_sha1_instance () {\n    if ( pbkdf2_hmac_sha1_instance === null ) pbkdf2_hmac_sha1_instance = new pbkdf2_hmac_sha1_constructor();\n    return pbkdf2_hmac_sha1_instance;\n}\n","/**\n * PBKDF2-HMAC-SHA1 exports\n */\n\nimport {bytes_to_base64, bytes_to_hex} from '../utils';\nimport {get_pbkdf2_hmac_sha1_instance} from './pbkdf2-hmac-sha1';\n\nfunction pbkdf2_hmac_sha1_bytes (password, salt, iterations, dklen ) {\n    if ( password === undefined ) throw new SyntaxError(\"password required\");\n    if ( salt === undefined ) throw new SyntaxError(\"salt required\");\n    return get_pbkdf2_hmac_sha1_instance().reset( { password: password } ).generate( salt, iterations, dklen ).result;\n}\n\nfunction pbkdf2_hmac_sha1_hex ( password, salt, iterations, dklen ) {\n    var result = pbkdf2_hmac_sha1_bytes( password, salt, iterations, dklen );\n    return bytes_to_hex(result);\n}\n\nfunction pbkdf2_hmac_sha1_base64 ( password, salt, iterations, dklen ) {\n    var result = pbkdf2_hmac_sha1_bytes( password, salt, iterations, dklen );\n    return bytes_to_base64(result);\n}\n\nexport var PBKDF2 = {\n    bytes: pbkdf2_hmac_sha1_bytes,\n    hex: pbkdf2_hmac_sha1_hex,\n    base64: pbkdf2_hmac_sha1_base64\n};\n\nexport var PBKDF2_HMAC_SHA1 = {\n  bytes: pbkdf2_hmac_sha1_bytes,\n  hex: pbkdf2_hmac_sha1_hex,\n  base64: pbkdf2_hmac_sha1_base64\n};\n","import {pbkdf2_constructor, pbkdf2_reset} from './pbkdf2';\nimport {get_hmac_sha256_instance, hmac_sha256_constructor} from '../hmac/hmac-sha256';\nimport {is_string} from '../utils';\nimport {IllegalArgumentError, IllegalStateError} from '../errors';\n\nexport function pbkdf2_hmac_sha256_constructor ( options ) {\n    options = options || {};\n\n    if ( !( options.hmac instanceof hmac_sha256_constructor ) )\n        options.hmac = get_hmac_sha256_instance();\n\n    pbkdf2_constructor.call( this, options );\n\n    return this;\n}\n\nfunction pbkdf2_hmac_sha256_generate ( salt, count, length ) {\n    if ( this.result !== null )\n        throw new IllegalStateError(\"state must be reset before processing new data\");\n\n    if ( !salt && !is_string(salt) )\n        throw new IllegalArgumentError(\"bad 'salt' value\");\n\n    count = count || this.count;\n    length = length || this.length;\n\n    this.result = new Uint8Array(length);\n\n    var blocks = Math.ceil( length / this.hmac.HMAC_SIZE );\n\n    for ( var i = 1; i <= blocks; ++i ) {\n        var j = ( i - 1 ) * this.hmac.HMAC_SIZE;\n        var l = ( i < blocks ? 0 : length % this.hmac.HMAC_SIZE ) || this.hmac.HMAC_SIZE;\n\n        this.hmac.reset().process(salt);\n        this.hmac.hash.asm.pbkdf2_generate_block( this.hmac.hash.pos, this.hmac.hash.len, i, count, 0 );\n\n        this.result.set( this.hmac.hash.heap.subarray( 0, l ), j );\n    }\n\n    return this;\n}\n\nvar pbkdf2_hmac_sha256_prototype = pbkdf2_hmac_sha256_constructor.prototype;\npbkdf2_hmac_sha256_prototype.reset =   pbkdf2_reset;\npbkdf2_hmac_sha256_prototype.generate = pbkdf2_hmac_sha256_generate;\n\nvar pbkdf2_hmac_sha256_instance = null;\n\nexport function get_pbkdf2_hmac_sha256_instance () {\n    if ( pbkdf2_hmac_sha256_instance === null ) pbkdf2_hmac_sha256_instance = new pbkdf2_hmac_sha256_constructor();\n    return pbkdf2_hmac_sha256_instance;\n}\n","/**\n * PBKDF2-HMAC-SHA256 exports\n */\n\nimport {get_pbkdf2_hmac_sha256_instance} from './pbkdf2-hmac-sha256';\nimport {bytes_to_base64, bytes_to_hex} from '../utils';\n\nfunction pbkdf2_hmac_sha256_bytes (password, salt, iterations, dklen ) {\n    if ( password === undefined ) throw new SyntaxError(\"password required\");\n    if ( salt === undefined ) throw new SyntaxError(\"salt required\");\n    return get_pbkdf2_hmac_sha256_instance().reset( { password: password } ).generate( salt, iterations, dklen ).result;\n}\n\nfunction pbkdf2_hmac_sha256_hex ( password, salt, iterations, dklen ) {\n    var result = pbkdf2_hmac_sha256_bytes( password, salt, iterations, dklen );\n    return bytes_to_hex(result);\n}\n\nfunction pbkdf2_hmac_sha256_base64 ( password, salt, iterations, dklen ) {\n    var result = pbkdf2_hmac_sha256_bytes( password, salt, iterations, dklen );\n    return bytes_to_base64(result);\n}\n\nexport var PBKDF2_HMAC_SHA256 = {\n    bytes: pbkdf2_hmac_sha256_bytes,\n    hex: pbkdf2_hmac_sha256_hex,\n    base64: pbkdf2_hmac_sha256_base64\n};\n","import { ISAAC } from './isaac';\nimport {FloatArray, is_buffer, is_typed_array} from '../utils';\nimport {get_pbkdf2_hmac_sha256_instance} from '../pbkdf2/pbkdf2-hmac-sha256';\nimport {SecurityError} from '../errors';\n\nvar _global_console = typeof console !== \"undefined\" ? console : undefined,\n    _global_date_now = Date.now,\n    _global_math_random = Math.random,\n    _global_performance = typeof performance !== \"undefined\" ? performance : undefined,\n    _global_crypto = typeof crypto !== \"undefined\" ? crypto : (typeof msCrypto !== \"undefined\" ? msCrypto : undefined),\n    _global_crypto_getRandomValues;\n\nif ( _global_crypto !== undefined )\n    _global_crypto_getRandomValues = _global_crypto.getRandomValues;\n\nvar _isaac_rand = ISAAC.rand,\n    _isaac_seed = ISAAC.seed,\n    _isaac_counter = 0,\n    _isaac_weak_seeded = false,\n    _isaac_seeded = false;\n\nvar _random_estimated_entropy = 0,\n    _random_required_entropy = 256,\n    _random_warn_callstacks = {};\n\nexport var _random_skip_system_rng_warning = false;\nexport var _random_allow_weak = false;\n\nvar _hires_now;\nif ( _global_performance !== undefined ) {\n    _hires_now = function () { return 1000 * _global_performance.now() | 0 };\n}\nelse {\n    var _hires_epoch = 1000 * _global_date_now() | 0;\n    _hires_now = function () { return 1000 * _global_date_now() - _hires_epoch | 0 };\n}\n\n/**\n * weak_seed\n *\n * Seeds RNG with native `crypto.getRandomValues` output or with high-resolution\n * time and single `Math.random()` value, and various other sources.\n *\n * We estimate this may give at least ~50 bits of unpredictableness,\n * but this has not been analysed thoroughly or precisely.\n */\nfunction Random_weak_seed () {\n    if ( _global_crypto !== undefined ) {\n        buffer = new Uint8Array(32);\n        _global_crypto_getRandomValues.call( _global_crypto, buffer );\n\n        _isaac_seed(buffer);\n    }\n    else {\n        // Some clarification about brute-force attack cost:\n        // - entire bitcoin network operates at ~10^16 hash guesses per second;\n        // - each PBKDF2 iteration requires the same number of hashing operations as bitcoin nonce guess;\n        // - attacker having such a hashing power is able to break worst-case 50 bits of the randomness in ~3 hours;\n        // Sounds sad though attacker having such a hashing power more likely would prefer to mine bitcoins.\n        var buffer = new FloatArray(3),\n            i, t;\n\n        buffer[0] = _global_math_random();\n        buffer[1] = _global_date_now();\n        buffer[2] = _hires_now();\n\n        buffer = new Uint8Array(buffer.buffer);\n\n        var salt = '';\n        if ( typeof location !== \"undefined\" ) {\n            salt += location.href;\n        }\n        else if ( typeof process !== \"undefined\" ) {\n            salt += process.pid + process.title;\n        }\n\n        var pbkdf2 = get_pbkdf2_hmac_sha256_instance();\n        for ( i = 0; i < 100; i++ ) {\n            buffer = pbkdf2.reset( { password: buffer } ).generate( salt, 1000, 32 ).result;\n            t = _hires_now();\n            buffer[0] ^= t >>> 24, buffer[1] ^= t >>> 16, buffer[2] ^= t >>> 8, buffer[3] ^= t;\n        }\n\n        _isaac_seed(buffer);\n    }\n\n    _isaac_counter = 0;\n\n    _isaac_weak_seeded = true;\n}\n\n/**\n * seed\n *\n * Seeds PRNG with supplied random values if these values have enough entropy.\n *\n * A false return value means the RNG is currently insecure; however a true\n * return value does not mean it is necessarily secure (depending on how you\n * collected the seed) though asmCrypto will be forced to assume this.\n *\n * The input buffer will be zeroed to discourage reuse. You should not copy it\n * or use it anywhere else before passing it into this function.\n *\n * **DISCLAIMER!** Seeding with a poor values is an easiest way shoot your legs, so\n * do not seed until you're know what entropy is and how to obtail high-quality random values,\n * **DO NOT SEED WITH CONSTANT VALUE! YOU'LL GET NO RANDOMNESS FROM CONSTANT!**\n */\nexport function Random_seed ( seed ) {\n    if ( !is_buffer(seed) && !is_typed_array(seed) )\n        throw new TypeError(\"bad seed type\");\n\n    var bpos = seed.byteOffset || 0,\n        blen = seed.byteLength || seed.length,\n        buff = new Uint8Array( ( seed.buffer || seed ), bpos, blen );\n\n    _isaac_seed(buff);\n\n    _isaac_counter = 0;\n\n    // don't let the user use these bytes again\n    var nonzero = 0;\n    for ( var i = 0; i < buff.length; i++ ) {\n        nonzero |= buff[i];\n        buff[i] = 0;\n    }\n\n    if ( nonzero !== 0 ) {\n        // TODO we could make a better estimate, but half-length is a prudent\n        // simple measure that seems unlikely to over-estimate\n        _random_estimated_entropy += 4 * blen;\n    }\n\n    _isaac_seeded = ( _random_estimated_entropy  >= _random_required_entropy );\n\n    return _isaac_seeded;\n}\n\n/**\n * getValues\n *\n * Populates the buffer with cryptographically secure random values. These are\n * calculated using `crypto.getRandomValues` if it is available, as well as our\n * own ISAAC PRNG implementation.\n *\n * If the former is not available (older browsers such as IE10 [1]), then the\n * latter *must* be seeded using `Random.seed`, unless `asmCrypto.random.allowWeak` is true.\n *\n * *We assume the system RNG is strong*; if you cannot afford this risk, then\n * you should also seed ISAAC using `Random.seed`. This is advisable for very\n * important situations, such as generation of long-term secrets. See also [2].\n *\n * [1] https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n * [2] https://en.wikipedia.org/wiki/Dual_EC_DRBG\n *\n * In all cases, we opportunistically seed using various arbitrary sources\n * such as high-resolution time and one single value from the insecure\n * Math.random(); however this is not reliable as a strong security measure.\n */\nexport function Random_getValues ( buffer ) {\n    // opportunistically seed ISAAC with a weak seed; this hopefully makes an\n    // attack harder in the case where the system RNG is weak *and* we haven't\n    // seeded ISAAC. but don't make any guarantees to the user about this.\n    if ( !_isaac_weak_seeded )\n        Random_weak_seed();\n\n    // if we have no strong sources then the RNG is weak, handle it\n    if ( !_isaac_seeded && _global_crypto === undefined ) {\n        if ( !_random_allow_weak )\n            throw new SecurityError(\"No strong PRNGs available. Use asmCrypto.random.seed().\");\n\n        if ( _global_console !== undefined )\n            _global_console.error(\"No strong PRNGs available; your security is greatly lowered. Use asmCrypto.random.seed().\");\n    }\n\n    // separate warning about assuming system RNG strong\n    if ( !_random_skip_system_rng_warning && !_isaac_seeded && _global_crypto !== undefined && _global_console !== undefined ) {\n        // Hacky way to get call stack\n        var s = new Error().stack;\n        _random_warn_callstacks[s] |= 0;\n        if ( !_random_warn_callstacks[s]++ )\n            _global_console.warn(\"asmCrypto PRNG not seeded; your security relies on your system PRNG. If this is not acceptable, use asmCrypto.random.seed().\");\n    }\n\n    // proceed to get random values\n    if ( !is_buffer(buffer) && !is_typed_array(buffer) )\n        throw new TypeError(\"unexpected buffer type\");\n\n    var bpos = buffer.byteOffset || 0,\n        blen = buffer.byteLength || buffer.length,\n        bytes = new Uint8Array( ( buffer.buffer || buffer ), bpos, blen ),\n        i, r;\n\n    // apply system rng\n    if ( _global_crypto !== undefined )\n        _global_crypto_getRandomValues.call( _global_crypto, bytes );\n\n    // apply isaac rng\n    for ( i = 0; i < blen; i++ ) {\n        if ( (i & 3) === 0 ) {\n            if ( _isaac_counter >= 0x10000000000 ) Random_weak_seed();\n            r = _isaac_rand();\n            _isaac_counter++;\n        }\n        bytes[i] ^= r;\n        r >>>= 8;\n    }\n\n    return buffer;\n}\n\n/**\n * getNumber\n *\n * A drop-in `Math.random` replacement.\n * Intended for prevention of random material leakage out of the user's host.\n */\nexport function Random_getNumber () {\n    if ( !_isaac_weak_seeded || _isaac_counter >= 0x10000000000 )\n        Random_weak_seed();\n\n    var n = ( 0x100000 * _isaac_rand() + ( _isaac_rand() >>> 12 ) ) / 0x10000000000000;\n    _isaac_counter += 2;\n\n    return n;\n}\n\nObject.defineProperty( Random_getNumber, 'allowWeak', {\n  get: function () { return _random_allow_weak; },\n  set: function ( a ) { _random_allow_weak = a; }\n});\n\nObject.defineProperty( Random_getNumber, 'skipSystemRNGWarning', {\n  get: function () { return _random_skip_system_rng_warning; },\n  set: function ( w ) { _random_skip_system_rng_warning = w; }\n});\n\n\nObject.defineProperty( Random_getValues, 'allowWeak', {\n  get: function () { return _random_allow_weak; },\n  set: function ( a ) { _random_allow_weak = a; }\n});\n\nObject.defineProperty( Random_getValues, 'skipSystemRNGWarning', {\n  get: function () { return _random_skip_system_rng_warning; },\n  set: function ( w ) { _random_skip_system_rng_warning = w; }\n});\n\nRandom_getNumber.seed = Random_seed;\nRandom_getValues.seed = Random_seed;\n","/* ----------------------------------------------------------------------\n * Copyright (c) 2014 Artem S Vybornov\n *\n * Copyright (c) 2012 Yves-Marie K. Rinquin\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * ----------------------------------------------------------------------\n *\n * ISAAC is a cryptographically secure pseudo-random number generator\n * (or CSPRNG for short) designed by Robert J. Jenkins Jr. in 1996 and\n * based on RC4. It is designed for speed and security.\n *\n * ISAAC's informations & analysis:\n *   http://burtleburtle.net/bob/rand/isaac.html\n * ISAAC's implementation details:\n *   http://burtleburtle.net/bob/rand/isaacafa.html\n *\n * ISAAC succesfully passed TestU01\n */\n\nimport {FloatArray, is_buffer, is_number, is_string, is_typed_array, string_to_bytes} from '../utils';\n\nexport var ISAAC =  ( function () {\n    var m = new Uint32Array(256), // internal memory\n        r = new Uint32Array(256), // result array\n        acc = 0,              // accumulator\n        brs = 0,              // last result\n        cnt = 0,              // counter\n        gnt = 0;              // generation counter\n\n    /* private: randinit function, same as ISAAC reference implementation */\n    function randinit() {\n        var a, b, c, d, e, f, g, h;\n\n        /* private mixing function */\n        function mix () {\n            a ^= b <<  11; d = (d + a)|0; b = (b + c)|0;\n            b ^= c >>>  2; e = (e + b)|0; c = (c + d)|0;\n            c ^= d <<   8; f = (f + c)|0; d = (d + e)|0;\n            d ^= e >>> 16; g = (g + d)|0; e = (e + f)|0;\n            e ^= f <<  10; h = (h + e)|0; f = (f + g)|0;\n            f ^= g >>>  4; a = (a + f)|0; g = (g + h)|0;\n            g ^= h <<   8; b = (b + g)|0; h = (h + a)|0;\n            h ^= a >>>  9; c = (c + h)|0; a = (a + b)|0;\n        }\n\n        acc = brs = cnt = 0;\n\n        // the golden ratio\n        a = b = c = d = e = f = g = h = 0x9e3779b9;\n\n        // scramble it\n        for ( var i = 0; i < 4; i++ )\n            mix();\n\n        // mix it and combine with the internal state\n        for ( var i = 0; i < 256; i += 8 ) {\n            a = (a + r[i|0])|0; b = (b + r[i|1])|0;\n            c = (c + r[i|2])|0; d = (d + r[i|3])|0;\n            e = (e + r[i|4])|0; f = (f + r[i|5])|0;\n            g = (g + r[i|6])|0; h = (h + r[i|7])|0;\n            mix();\n            m.set([a, b, c, d, e, f, g, h], i);\n        }\n\n        // mix it again\n        for ( var i = 0; i < 256; i += 8 ) {\n            a = (a + m[i|0])|0; b = (b + m[i|1])|0;\n            c = (c + m[i|2])|0; d = (d + m[i|3])|0;\n            e = (e + m[i|4])|0; f = (f + m[i|5])|0;\n            g = (g + m[i|6])|0; h = (h + m[i|7])|0;\n            mix();\n            m.set([a, b, c, d, e, f, g, h], i);\n        }\n\n        // fill in the first set of results\n        prng(1), gnt = 256;\n    }\n\n    /* public: seeding function */\n    function seed ( s ) {\n        var i, j, k, n, l;\n\n        if ( !is_typed_array(s) ) {\n            if ( is_number(s) ) {\n                n = new FloatArray(1), n[0] = s;\n                s = new Uint8Array(n.buffer);\n            }\n            else if ( is_string(s) ) {\n                s = string_to_bytes(s);\n            }\n            else if ( is_buffer(s) ) {\n                s = new Uint8Array(s);\n            }\n            else {\n                throw new TypeError(\"bad seed type\");\n            }\n        }\n        else {\n            s = new Uint8Array(s.buffer);\n        }\n\n        // preprocess the seed\n        l = s.length;\n        for ( j = 0; j < l; j += 1024 )\n        {\n            // xor each chunk of 1024 bytes with r, for randinit() to mix in\n            for ( k = j, i = 0; ( i < 1024 ) && ( k < l ); k = j | (++i) ) {\n                r[i >> 2] ^= ( s[k] << ( (i & 3) << 3 ) );\n            }\n            randinit();\n        }\n    }\n\n    /* public: isaac generator, n = number of run */\n    function prng ( n ) {\n        n = n || 1;\n\n        var i, x, y;\n\n        while ( n-- ) {\n            cnt = (cnt + 1)|0;\n            brs = (brs + cnt)|0;\n\n            for ( i = 0; i < 256; i += 4 ) {\n                acc ^= acc << 13;\n                acc = m[(i + 128) & 0xff] + acc | 0; x = m[i|0];\n                m[i|0] = y = m[(x>>>2) & 0xff] + ( acc + brs | 0 ) | 0;\n                r[i|0] = brs = m[(y>>>10) & 0xff] + x | 0;\n\n                acc ^= acc >>> 6;\n                acc = m[(i + 129) & 0xff] + acc | 0; x = m[i|1];\n                m[i|1] = y = m[(x >>> 2) & 0xff] + ( acc + brs | 0 ) | 0;\n                r[i|1] = brs = m[(y >>> 10) & 0xff] + x | 0;\n\n                acc ^= acc << 2;\n                acc = m[(i + 130) & 0xff] + acc | 0; x = m[i|2];\n                m[i|2] = y = m[(x >>> 2) & 0xff] + ( acc + brs | 0 ) | 0;\n                r[i|2] = brs = m[(y >>> 10) & 0xff] + x | 0;\n\n                acc ^= acc >>> 16;\n                acc = m[(i + 131) & 0xff] + acc | 0; x = m[i|3];\n                m[i|3] = y = m[(x >>> 2) & 0xff] + (acc + brs | 0 ) | 0;\n                r[i|3] = brs = m[(y >>> 10) & 0xff] + x | 0;\n            }\n        }\n    }\n\n    /* public: return a random number */\n    function rand() {\n        if ( !gnt-- )\n            prng(1), gnt = 255;\n\n        return r[gnt];\n    }\n\n    /* return class object */\n    return {\n        'seed':  seed,\n        'prng':  prng,\n        'rand':  rand\n    };\n})();\n","/**\n * Integers are represented as little endian array of 32-bit limbs.\n * Limbs number is a power of 2 and a multiple of 8 (256 bits).\n * Negative values use two's complement representation.\n */\nexport function bigint_asm ( stdlib, foreign, buffer ) {\n    \"use asm\";\n\n    var SP = 0;\n\n    var HEAP32 = new stdlib.Uint32Array(buffer);\n\n    var imul = stdlib.Math.imul;\n\n    /**\n     * Simple stack memory allocator\n     *\n     * Methods:\n     *  sreset\n     *  salloc\n     *  sfree\n     */\n\n    function sreset ( p ) {\n        p = p|0;\n        SP = p = (p + 31) & -32;\n        return p|0;\n    }\n\n    function salloc ( l ) {\n        l = l|0;\n        var p = 0; p = SP;\n        SP = p + ((l + 31) & -32)|0;\n        return p|0;\n    }\n\n    function sfree ( l ) {\n        l = l|0;\n        SP = SP - ((l + 31) & -32)|0;\n    }\n\n    /**\n     * Utility functions:\n     *  cp\n     *  z\n     */\n\n    function cp ( l, A, B ) {\n        l = l|0;\n        A = A|0;\n        B = B|0;\n\n        var i = 0;\n\n        if ( (A|0) > (B|0) ) {\n            for ( ; (i|0) < (l|0); i = (i+4)|0 ) {\n                HEAP32[(B+i)>>2] = HEAP32[(A+i)>>2];\n            }\n        }\n        else {\n            for ( i = (l-4)|0; (i|0) >= 0; i = (i-4)|0 ) {\n                HEAP32[(B+i)>>2] = HEAP32[(A+i)>>2];\n            }\n        }\n    }\n\n    function z ( l, z, A ) {\n        l = l|0;\n        z = z|0;\n        A = A|0;\n\n        var i = 0;\n\n        for ( ; (i|0) < (l|0); i = (i+4)|0 ) {\n            HEAP32[(A+i)>>2] = z;\n        }\n    }\n\n    /**\n     * Negate the argument\n     *\n     * Perform two's complement transformation:\n     *\n     *  -A = ~A + 1\n     *\n     * @param A offset of the argment being negated, 32-byte aligned\n     * @param lA length of the argument, multiple of 32\n     *\n     * @param R offset where to place the result to, 32-byte aligned\n     * @param lR length to truncate the result to, multiple of 32\n     */\n    function neg ( A, lA, R, lR ) {\n        A  =  A|0;\n        lA = lA|0;\n        R  =  R|0;\n        lR = lR|0;\n\n        var a = 0, c = 0, t = 0, r = 0, i = 0;\n\n        if ( (lR|0) <= 0 )\n            lR = lA;\n\n        if ( (lR|0) < (lA|0) )\n            lA = lR;\n\n        c = 1;\n        for ( ; (i|0) < (lA|0); i = (i+4)|0 ) {\n            a = ~HEAP32[(A+i)>>2];\n            t = (a & 0xffff) + c|0;\n            r = (a >>> 16) + (t >>> 16)|0;\n            HEAP32[(R+i)>>2] = (r << 16) | (t & 0xffff);\n            c = r >>> 16;\n        }\n\n        for ( ; (i|0) < (lR|0); i = (i+4)|0 ) {\n            HEAP32[(R+i)>>2] = (c-1)|0;\n        }\n\n        return c|0;\n    }\n\n    function cmp ( A, lA, B, lB ) {\n        A  =  A|0;\n        lA = lA|0;\n        B  =  B|0;\n        lB = lB|0;\n\n        var a = 0, b = 0, i = 0;\n\n        if ( (lA|0) > (lB|0) ) {\n            for ( i = (lA-4)|0; (i|0) >= (lB|0); i = (i-4)|0 ) {\n                if ( HEAP32[(A+i)>>2]|0 ) return 1;\n            }\n        }\n        else {\n            for ( i = (lB-4)|0; (i|0) >= (lA|0); i = (i-4)|0 ) {\n                if ( HEAP32[(B+i)>>2]|0 ) return -1;\n            }\n        }\n\n        for ( ; (i|0) >= 0; i = (i-4)|0 ) {\n            a = HEAP32[(A+i)>>2]|0, b = HEAP32[(B+i)>>2]|0;\n            if ( (a>>>0) < (b>>>0) ) return -1;\n            if ( (a>>>0) > (b>>>0) ) return 1;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Test the argument\n     *\n     * Same as `cmp` with zero.\n     */\n    function tst ( A, lA ) {\n        A  =  A|0;\n        lA = lA|0;\n\n        var i = 0;\n\n        for ( i = (lA-4)|0; (i|0) >= 0; i = (i-4)|0 ) {\n            if ( HEAP32[(A+i)>>2]|0 ) return (i+4)|0;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Conventional addition\n     *\n     * @param A offset of the first argument, 32-byte aligned\n     * @param lA length of the first argument, multiple of 32\n     *\n     * @param B offset of the second argument, 32-bit aligned\n     * @param lB length of the second argument, multiple of 32\n     *\n     * @param R offset where to place the result to, 32-byte aligned\n     * @param lR length to truncate the result to, multiple of 32\n     */\n    function add ( A, lA, B, lB, R, lR ) {\n        A  =  A|0;\n        lA = lA|0;\n        B  =  B|0;\n        lB = lB|0;\n        R  =  R|0;\n        lR = lR|0;\n\n        var a = 0, b = 0, c = 0, t = 0, r = 0, i = 0;\n\n        if ( (lA|0) < (lB|0) ) {\n            t = A, A = B, B = t;\n            t = lA, lA = lB, lB = t;\n        }\n\n        if ( (lR|0) <= 0 )\n            lR = lA+4|0;\n\n        if ( (lR|0) < (lB|0) )\n            lA = lB = lR;\n\n        for ( ; (i|0) < (lB|0); i = (i+4)|0 ) {\n            a = HEAP32[(A+i)>>2]|0;\n            b = HEAP32[(B+i)>>2]|0;\n            t = ( (a & 0xffff) + (b & 0xffff)|0 ) + c|0;\n            r = ( (a >>> 16) + (b >>> 16)|0 ) + (t >>> 16)|0;\n            HEAP32[(R+i)>>2] = (t & 0xffff) | (r << 16);\n            c = r >>> 16;\n        }\n\n        for ( ; (i|0) < (lA|0); i = (i+4)|0 ) {\n            a = HEAP32[(A+i)>>2]|0;\n            t = (a & 0xffff) + c|0;\n            r = (a >>> 16) + (t >>> 16)|0;\n            HEAP32[(R+i)>>2] = (t & 0xffff) | (r << 16);\n            c = r >>> 16;\n        }\n\n        for ( ; (i|0) < (lR|0); i = (i+4)|0 ) {\n            HEAP32[(R+i)>>2] = c|0;\n            c = 0;\n        }\n\n        return c|0;\n    }\n\n   /**\n     * Conventional subtraction\n     *\n     * @param A offset of the first argument, 32-byte aligned\n     * @param lA length of the first argument, multiple of 32\n     *\n     * @param B offset of the second argument, 32-bit aligned\n     * @param lB length of the second argument, multiple of 32\n     *\n     * @param R offset where to place the result to, 32-byte aligned\n     * @param lR length to truncate the result to, multiple of 32\n     */\n    function sub ( A, lA, B, lB, R, lR ) {\n        A  =  A|0;\n        lA = lA|0;\n        B  =  B|0;\n        lB = lB|0;\n        R  =  R|0;\n        lR = lR|0;\n\n        var a = 0, b = 0, c = 0, t = 0, r = 0, i = 0;\n\n        if ( (lR|0) <= 0 )\n            lR = (lA|0) > (lB|0) ? lA+4|0 : lB+4|0;\n\n        if ( (lR|0) < (lA|0) )\n            lA = lR;\n\n        if ( (lR|0) < (lB|0) )\n            lB = lR;\n\n        if ( (lA|0) < (lB|0) ) {\n            for ( ; (i|0) < (lA|0); i = (i+4)|0 ) {\n                a = HEAP32[(A+i)>>2]|0;\n                b = HEAP32[(B+i)>>2]|0;\n                t = ( (a & 0xffff) - (b & 0xffff)|0 ) + c|0;\n                r = ( (a >>> 16) - (b >>> 16)|0 ) + (t >> 16)|0;\n                HEAP32[(R+i)>>2] = (t & 0xffff) | (r << 16);\n                c = r >> 16;\n            }\n\n            for ( ; (i|0) < (lB|0); i = (i+4)|0 ) {\n                b = HEAP32[(B+i)>>2]|0;\n                t = c - (b & 0xffff)|0;\n                r = (t >> 16) - (b >>> 16)|0;\n                HEAP32[(R+i)>>2] = (t & 0xffff) | (r << 16);\n                c = r >> 16;\n            }\n        }\n        else {\n            for ( ; (i|0) < (lB|0); i = (i+4)|0 ) {\n                a = HEAP32[(A+i)>>2]|0;\n                b = HEAP32[(B+i)>>2]|0;\n                t = ( (a & 0xffff) - (b & 0xffff)|0 ) + c|0;\n                r = ( (a >>> 16) - (b >>> 16)|0 ) + (t >> 16)|0;\n                HEAP32[(R+i)>>2] = (t & 0xffff) | (r << 16);\n                c = r >> 16;\n            }\n\n            for ( ; (i|0) < (lA|0); i = (i+4)|0 ) {\n                a = HEAP32[(A+i)>>2]|0;\n                t = (a & 0xffff) + c|0;\n                r = (a >>> 16) + (t >> 16)|0;\n                HEAP32[(R+i)>>2] = (t & 0xffff) | (r << 16);\n                c = r >> 16;\n            }\n        }\n\n        for ( ; (i|0) < (lR|0); i = (i+4)|0 ) {\n            HEAP32[(R+i)>>2] = c|0;\n        }\n\n        return c|0;\n    }\n\n    /**\n     * Conventional multiplication\n     *\n     * TODO implement Karatsuba algorithm for large multiplicands\n     *\n     * @param A offset of the first argument, 32-byte aligned\n     * @param lA length of the first argument, multiple of 32\n     *\n     * @param B offset of the second argument, 32-byte aligned\n     * @param lB length of the second argument, multiple of 32\n     *\n     * @param R offset where to place the result to, 32-byte aligned\n     * @param lR length to truncate the result to, multiple of 32\n     */\n    function mul ( A, lA, B, lB, R, lR ) {\n        A  =  A|0;\n        lA = lA|0;\n        B  =  B|0;\n        lB = lB|0;\n        R  =  R|0;\n        lR = lR|0;\n\n        var al0 = 0, al1 = 0, al2 = 0, al3 = 0, al4 = 0, al5 = 0, al6 = 0, al7 = 0, ah0 = 0, ah1 = 0, ah2 = 0, ah3 = 0, ah4 = 0, ah5 = 0, ah6 = 0, ah7 = 0,\n            bl0 = 0, bl1 = 0, bl2 = 0, bl3 = 0, bl4 = 0, bl5 = 0, bl6 = 0, bl7 = 0, bh0 = 0, bh1 = 0, bh2 = 0, bh3 = 0, bh4 = 0, bh5 = 0, bh6 = 0, bh7 = 0,\n            r0 = 0, r1 = 0, r2 = 0, r3 = 0, r4 = 0, r5 = 0, r6 = 0, r7 = 0, r8 = 0, r9 = 0, r10 = 0, r11 = 0, r12 = 0, r13 = 0, r14 = 0, r15 = 0,\n            u = 0, v = 0, w = 0, m = 0,\n            i = 0, Ai = 0, j = 0, Bj = 0, Rk = 0;\n\n        if ( (lA|0) > (lB|0) ) {\n            u = A, v = lA;\n            A = B, lA = lB;\n            B = u, lB = v;\n        }\n\n        m = (lA+lB)|0;\n        if ( ( (lR|0) > (m|0) ) | ( (lR|0) <= 0 ) )\n            lR = m;\n\n        if ( (lR|0) < (lA|0) )\n            lA = lR;\n\n        if ( (lR|0) < (lB|0) )\n            lB = lR;\n\n        for ( ; (i|0) < (lA|0); i = (i+32)|0 ) {\n            Ai = (A+i)|0;\n\n            ah0 = HEAP32[(Ai|0)>>2]|0,\n            ah1 = HEAP32[(Ai|4)>>2]|0,\n            ah2 = HEAP32[(Ai|8)>>2]|0,\n            ah3 = HEAP32[(Ai|12)>>2]|0,\n            ah4 = HEAP32[(Ai|16)>>2]|0,\n            ah5 = HEAP32[(Ai|20)>>2]|0,\n            ah6 = HEAP32[(Ai|24)>>2]|0,\n            ah7 = HEAP32[(Ai|28)>>2]|0,\n            al0 = ah0 & 0xffff,\n            al1 = ah1 & 0xffff,\n            al2 = ah2 & 0xffff,\n            al3 = ah3 & 0xffff,\n            al4 = ah4 & 0xffff,\n            al5 = ah5 & 0xffff,\n            al6 = ah6 & 0xffff,\n            al7 = ah7 & 0xffff,\n            ah0 = ah0 >>> 16,\n            ah1 = ah1 >>> 16,\n            ah2 = ah2 >>> 16,\n            ah3 = ah3 >>> 16,\n            ah4 = ah4 >>> 16,\n            ah5 = ah5 >>> 16,\n            ah6 = ah6 >>> 16,\n            ah7 = ah7 >>> 16;\n\n            r8 = r9 = r10 = r11 = r12 = r13 = r14 = r15 = 0;\n\n            for ( j = 0; (j|0) < (lB|0); j = (j+32)|0 ) {\n                Bj = (B+j)|0;\n                Rk = (R+(i+j|0))|0;\n\n                bh0 = HEAP32[(Bj|0)>>2]|0,\n                bh1 = HEAP32[(Bj|4)>>2]|0,\n                bh2 = HEAP32[(Bj|8)>>2]|0,\n                bh3 = HEAP32[(Bj|12)>>2]|0,\n                bh4 = HEAP32[(Bj|16)>>2]|0,\n                bh5 = HEAP32[(Bj|20)>>2]|0,\n                bh6 = HEAP32[(Bj|24)>>2]|0,\n                bh7 = HEAP32[(Bj|28)>>2]|0,\n                bl0 = bh0 & 0xffff,\n                bl1 = bh1 & 0xffff,\n                bl2 = bh2 & 0xffff,\n                bl3 = bh3 & 0xffff,\n                bl4 = bh4 & 0xffff,\n                bl5 = bh5 & 0xffff,\n                bl6 = bh6 & 0xffff,\n                bl7 = bh7 & 0xffff,\n                bh0 = bh0 >>> 16,\n                bh1 = bh1 >>> 16,\n                bh2 = bh2 >>> 16,\n                bh3 = bh3 >>> 16,\n                bh4 = bh4 >>> 16,\n                bh5 = bh5 >>> 16,\n                bh6 = bh6 >>> 16,\n                bh7 = bh7 >>> 16;\n\n                r0 = HEAP32[(Rk|0)>>2]|0,\n                r1 = HEAP32[(Rk|4)>>2]|0,\n                r2 = HEAP32[(Rk|8)>>2]|0,\n                r3 = HEAP32[(Rk|12)>>2]|0,\n                r4 = HEAP32[(Rk|16)>>2]|0,\n                r5 = HEAP32[(Rk|20)>>2]|0,\n                r6 = HEAP32[(Rk|24)>>2]|0,\n                r7 = HEAP32[(Rk|28)>>2]|0;\n\n                u = ((imul(al0, bl0)|0) + (r8 & 0xffff)|0) + (r0 & 0xffff)|0;\n                v = ((imul(ah0, bl0)|0) + (r8 >>> 16)|0) + (r0 >>> 16)|0;\n                w = ((imul(al0, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r0 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al0, bl1)|0) + (m & 0xffff)|0) + (r1 & 0xffff)|0;\n                v = ((imul(ah0, bl1)|0) + (m >>> 16)|0) + (r1 >>> 16)|0;\n                w = ((imul(al0, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r1 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al0, bl2)|0) + (m & 0xffff)|0) + (r2 & 0xffff)|0;\n                v = ((imul(ah0, bl2)|0) + (m >>> 16)|0) + (r2 >>> 16)|0;\n                w = ((imul(al0, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r2 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al0, bl3)|0) + (m & 0xffff)|0) + (r3 & 0xffff)|0;\n                v = ((imul(ah0, bl3)|0) + (m >>> 16)|0) + (r3 >>> 16)|0;\n                w = ((imul(al0, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r3 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al0, bl4)|0) + (m & 0xffff)|0) + (r4 & 0xffff)|0;\n                v = ((imul(ah0, bl4)|0) + (m >>> 16)|0) + (r4 >>> 16)|0;\n                w = ((imul(al0, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r4 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al0, bl5)|0) + (m & 0xffff)|0) + (r5 & 0xffff)|0;\n                v = ((imul(ah0, bl5)|0) + (m >>> 16)|0) + (r5 >>> 16)|0;\n                w = ((imul(al0, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r5 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al0, bl6)|0) + (m & 0xffff)|0) + (r6 & 0xffff)|0;\n                v = ((imul(ah0, bl6)|0) + (m >>> 16)|0) + (r6 >>> 16)|0;\n                w = ((imul(al0, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r6 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al0, bl7)|0) + (m & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah0, bl7)|0) + (m >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al0, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                r8 = m;\n\n                u = ((imul(al1, bl0)|0) + (r9 & 0xffff)|0) + (r1 & 0xffff)|0;\n                v = ((imul(ah1, bl0)|0) + (r9 >>> 16)|0) + (r1 >>> 16)|0;\n                w = ((imul(al1, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r1 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al1, bl1)|0) + (m & 0xffff)|0) + (r2 & 0xffff)|0;\n                v = ((imul(ah1, bl1)|0) + (m >>> 16)|0) + (r2 >>> 16)|0;\n                w = ((imul(al1, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r2 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al1, bl2)|0) + (m & 0xffff)|0) + (r3 & 0xffff)|0;\n                v = ((imul(ah1, bl2)|0) + (m >>> 16)|0) + (r3 >>> 16)|0;\n                w = ((imul(al1, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r3 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al1, bl3)|0) + (m & 0xffff)|0) + (r4 & 0xffff)|0;\n                v = ((imul(ah1, bl3)|0) + (m >>> 16)|0) + (r4 >>> 16)|0;\n                w = ((imul(al1, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r4 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al1, bl4)|0) + (m & 0xffff)|0) + (r5 & 0xffff)|0;\n                v = ((imul(ah1, bl4)|0) + (m >>> 16)|0) + (r5 >>> 16)|0;\n                w = ((imul(al1, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r5 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al1, bl5)|0) + (m & 0xffff)|0) + (r6 & 0xffff)|0;\n                v = ((imul(ah1, bl5)|0) + (m >>> 16)|0) + (r6 >>> 16)|0;\n                w = ((imul(al1, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r6 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al1, bl6)|0) + (m & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah1, bl6)|0) + (m >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al1, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al1, bl7)|0) + (m & 0xffff)|0) + (r8 & 0xffff)|0;\n                v = ((imul(ah1, bl7)|0) + (m >>> 16)|0) + (r8 >>> 16)|0;\n                w = ((imul(al1, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r8 = (w << 16) | (u & 0xffff);\n\n                r9 = m;\n\n                u = ((imul(al2, bl0)|0) + (r10 & 0xffff)|0) + (r2 & 0xffff)|0;\n                v = ((imul(ah2, bl0)|0) + (r10 >>> 16)|0) + (r2 >>> 16)|0;\n                w = ((imul(al2, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r2 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al2, bl1)|0) + (m & 0xffff)|0) + (r3 & 0xffff)|0;\n                v = ((imul(ah2, bl1)|0) + (m >>> 16)|0) + (r3 >>> 16)|0;\n                w = ((imul(al2, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r3 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al2, bl2)|0) + (m & 0xffff)|0) + (r4 & 0xffff)|0;\n                v = ((imul(ah2, bl2)|0) + (m >>> 16)|0) + (r4 >>> 16)|0;\n                w = ((imul(al2, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r4 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al2, bl3)|0) + (m & 0xffff)|0) + (r5 & 0xffff)|0;\n                v = ((imul(ah2, bl3)|0) + (m >>> 16)|0) + (r5 >>> 16)|0;\n                w = ((imul(al2, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r5 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al2, bl4)|0) + (m & 0xffff)|0) + (r6 & 0xffff)|0;\n                v = ((imul(ah2, bl4)|0) + (m >>> 16)|0) + (r6 >>> 16)|0;\n                w = ((imul(al2, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r6 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al2, bl5)|0) + (m & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah2, bl5)|0) + (m >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al2, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al2, bl6)|0) + (m & 0xffff)|0) + (r8 & 0xffff)|0;\n                v = ((imul(ah2, bl6)|0) + (m >>> 16)|0) + (r8 >>> 16)|0;\n                w = ((imul(al2, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r8 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al2, bl7)|0) + (m & 0xffff)|0) + (r9 & 0xffff)|0;\n                v = ((imul(ah2, bl7)|0) + (m >>> 16)|0) + (r9 >>> 16)|0;\n                w = ((imul(al2, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r9 = (w << 16) | (u & 0xffff);\n\n                r10 = m;\n\n                u = ((imul(al3, bl0)|0) + (r11 & 0xffff)|0) + (r3 & 0xffff)|0;\n                v = ((imul(ah3, bl0)|0) + (r11 >>> 16)|0) + (r3 >>> 16)|0;\n                w = ((imul(al3, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r3 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al3, bl1)|0) + (m & 0xffff)|0) + (r4 & 0xffff)|0;\n                v = ((imul(ah3, bl1)|0) + (m >>> 16)|0) + (r4 >>> 16)|0;\n                w = ((imul(al3, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r4 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al3, bl2)|0) + (m & 0xffff)|0) + (r5 & 0xffff)|0;\n                v = ((imul(ah3, bl2)|0) + (m >>> 16)|0) + (r5 >>> 16)|0;\n                w = ((imul(al3, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r5 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al3, bl3)|0) + (m & 0xffff)|0) + (r6 & 0xffff)|0;\n                v = ((imul(ah3, bl3)|0) + (m >>> 16)|0) + (r6 >>> 16)|0;\n                w = ((imul(al3, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r6 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al3, bl4)|0) + (m & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah3, bl4)|0) + (m >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al3, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al3, bl5)|0) + (m & 0xffff)|0) + (r8 & 0xffff)|0;\n                v = ((imul(ah3, bl5)|0) + (m >>> 16)|0) + (r8 >>> 16)|0;\n                w = ((imul(al3, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r8 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al3, bl6)|0) + (m & 0xffff)|0) + (r9 & 0xffff)|0;\n                v = ((imul(ah3, bl6)|0) + (m >>> 16)|0) + (r9 >>> 16)|0;\n                w = ((imul(al3, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r9 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al3, bl7)|0) + (m & 0xffff)|0) + (r10 & 0xffff)|0;\n                v = ((imul(ah3, bl7)|0) + (m >>> 16)|0) + (r10 >>> 16)|0;\n                w = ((imul(al3, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r10 = (w << 16) | (u & 0xffff);\n\n                r11 = m;\n\n                u = ((imul(al4, bl0)|0) + (r12 & 0xffff)|0) + (r4 & 0xffff)|0;\n                v = ((imul(ah4, bl0)|0) + (r12 >>> 16)|0) + (r4 >>> 16)|0;\n                w = ((imul(al4, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r4 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al4, bl1)|0) + (m & 0xffff)|0) + (r5 & 0xffff)|0;\n                v = ((imul(ah4, bl1)|0) + (m >>> 16)|0) + (r5 >>> 16)|0;\n                w = ((imul(al4, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r5 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al4, bl2)|0) + (m & 0xffff)|0) + (r6 & 0xffff)|0;\n                v = ((imul(ah4, bl2)|0) + (m >>> 16)|0) + (r6 >>> 16)|0;\n                w = ((imul(al4, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r6 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al4, bl3)|0) + (m & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah4, bl3)|0) + (m >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al4, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al4, bl4)|0) + (m & 0xffff)|0) + (r8 & 0xffff)|0;\n                v = ((imul(ah4, bl4)|0) + (m >>> 16)|0) + (r8 >>> 16)|0;\n                w = ((imul(al4, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r8 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al4, bl5)|0) + (m & 0xffff)|0) + (r9 & 0xffff)|0;\n                v = ((imul(ah4, bl5)|0) + (m >>> 16)|0) + (r9 >>> 16)|0;\n                w = ((imul(al4, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r9 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al4, bl6)|0) + (m & 0xffff)|0) + (r10 & 0xffff)|0;\n                v = ((imul(ah4, bl6)|0) + (m >>> 16)|0) + (r10 >>> 16)|0;\n                w = ((imul(al4, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r10 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al4, bl7)|0) + (m & 0xffff)|0) + (r11 & 0xffff)|0;\n                v = ((imul(ah4, bl7)|0) + (m >>> 16)|0) + (r11 >>> 16)|0;\n                w = ((imul(al4, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r11 = (w << 16) | (u & 0xffff);\n\n                r12 = m;\n\n                u = ((imul(al5, bl0)|0) + (r13 & 0xffff)|0) + (r5 & 0xffff)|0;\n                v = ((imul(ah5, bl0)|0) + (r13 >>> 16)|0) + (r5 >>> 16)|0;\n                w = ((imul(al5, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r5 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al5, bl1)|0) + (m & 0xffff)|0) + (r6 & 0xffff)|0;\n                v = ((imul(ah5, bl1)|0) + (m >>> 16)|0) + (r6 >>> 16)|0;\n                w = ((imul(al5, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r6 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al5, bl2)|0) + (m & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah5, bl2)|0) + (m >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al5, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al5, bl3)|0) + (m & 0xffff)|0) + (r8 & 0xffff)|0;\n                v = ((imul(ah5, bl3)|0) + (m >>> 16)|0) + (r8 >>> 16)|0;\n                w = ((imul(al5, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r8 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al5, bl4)|0) + (m & 0xffff)|0) + (r9 & 0xffff)|0;\n                v = ((imul(ah5, bl4)|0) + (m >>> 16)|0) + (r9 >>> 16)|0;\n                w = ((imul(al5, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r9 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al5, bl5)|0) + (m & 0xffff)|0) + (r10 & 0xffff)|0;\n                v = ((imul(ah5, bl5)|0) + (m >>> 16)|0) + (r10 >>> 16)|0;\n                w = ((imul(al5, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r10 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al5, bl6)|0) + (m & 0xffff)|0) + (r11 & 0xffff)|0;\n                v = ((imul(ah5, bl6)|0) + (m >>> 16)|0) + (r11 >>> 16)|0;\n                w = ((imul(al5, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r11 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al5, bl7)|0) + (m & 0xffff)|0) + (r12 & 0xffff)|0;\n                v = ((imul(ah5, bl7)|0) + (m >>> 16)|0) + (r12 >>> 16)|0;\n                w = ((imul(al5, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r12 = (w << 16) | (u & 0xffff);\n\n                r13 = m;\n\n                u = ((imul(al6, bl0)|0) + (r14 & 0xffff)|0) + (r6 & 0xffff)|0;\n                v = ((imul(ah6, bl0)|0) + (r14 >>> 16)|0) + (r6 >>> 16)|0;\n                w = ((imul(al6, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r6 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al6, bl1)|0) + (m & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah6, bl1)|0) + (m >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al6, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al6, bl2)|0) + (m & 0xffff)|0) + (r8 & 0xffff)|0;\n                v = ((imul(ah6, bl2)|0) + (m >>> 16)|0) + (r8 >>> 16)|0;\n                w = ((imul(al6, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r8 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al6, bl3)|0) + (m & 0xffff)|0) + (r9 & 0xffff)|0;\n                v = ((imul(ah6, bl3)|0) + (m >>> 16)|0) + (r9 >>> 16)|0;\n                w = ((imul(al6, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r9 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al6, bl4)|0) + (m & 0xffff)|0) + (r10 & 0xffff)|0;\n                v = ((imul(ah6, bl4)|0) + (m >>> 16)|0) + (r10 >>> 16)|0;\n                w = ((imul(al6, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r10 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al6, bl5)|0) + (m & 0xffff)|0) + (r11 & 0xffff)|0;\n                v = ((imul(ah6, bl5)|0) + (m >>> 16)|0) + (r11 >>> 16)|0;\n                w = ((imul(al6, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r11 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al6, bl6)|0) + (m & 0xffff)|0) + (r12 & 0xffff)|0;\n                v = ((imul(ah6, bl6)|0) + (m >>> 16)|0) + (r12 >>> 16)|0;\n                w = ((imul(al6, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r12 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al6, bl7)|0) + (m & 0xffff)|0) + (r13 & 0xffff)|0;\n                v = ((imul(ah6, bl7)|0) + (m >>> 16)|0) + (r13 >>> 16)|0;\n                w = ((imul(al6, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r13 = (w << 16) | (u & 0xffff);\n\n                r14 = m;\n\n                u = ((imul(al7, bl0)|0) + (r15 & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah7, bl0)|0) + (r15 >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al7, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al7, bl1)|0) + (m & 0xffff)|0) + (r8 & 0xffff)|0;\n                v = ((imul(ah7, bl1)|0) + (m >>> 16)|0) + (r8 >>> 16)|0;\n                w = ((imul(al7, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r8 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al7, bl2)|0) + (m & 0xffff)|0) + (r9 & 0xffff)|0;\n                v = ((imul(ah7, bl2)|0) + (m >>> 16)|0) + (r9 >>> 16)|0;\n                w = ((imul(al7, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r9 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al7, bl3)|0) + (m & 0xffff)|0) + (r10 & 0xffff)|0;\n                v = ((imul(ah7, bl3)|0) + (m >>> 16)|0) + (r10 >>> 16)|0;\n                w = ((imul(al7, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r10 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al7, bl4)|0) + (m & 0xffff)|0) + (r11 & 0xffff)|0;\n                v = ((imul(ah7, bl4)|0) + (m >>> 16)|0) + (r11 >>> 16)|0;\n                w = ((imul(al7, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r11 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al7, bl5)|0) + (m & 0xffff)|0) + (r12 & 0xffff)|0;\n                v = ((imul(ah7, bl5)|0) + (m >>> 16)|0) + (r12 >>> 16)|0;\n                w = ((imul(al7, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r12 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al7, bl6)|0) + (m & 0xffff)|0) + (r13 & 0xffff)|0;\n                v = ((imul(ah7, bl6)|0) + (m >>> 16)|0) + (r13 >>> 16)|0;\n                w = ((imul(al7, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r13 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al7, bl7)|0) + (m & 0xffff)|0) + (r14 & 0xffff)|0;\n                v = ((imul(ah7, bl7)|0) + (m >>> 16)|0) + (r14 >>> 16)|0;\n                w = ((imul(al7, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r14 = (w << 16) | (u & 0xffff);\n\n                r15 = m;\n\n                HEAP32[(Rk|0)>>2] = r0,\n                HEAP32[(Rk|4)>>2] = r1,\n                HEAP32[(Rk|8)>>2] = r2,\n                HEAP32[(Rk|12)>>2] = r3,\n                HEAP32[(Rk|16)>>2] = r4,\n                HEAP32[(Rk|20)>>2] = r5,\n                HEAP32[(Rk|24)>>2] = r6,\n                HEAP32[(Rk|28)>>2] = r7;\n            }\n\n            Rk = (R+(i+j|0))|0;\n            HEAP32[(Rk|0)>>2] = r8,\n            HEAP32[(Rk|4)>>2] = r9,\n            HEAP32[(Rk|8)>>2] = r10,\n            HEAP32[(Rk|12)>>2] = r11,\n            HEAP32[(Rk|16)>>2] = r12,\n            HEAP32[(Rk|20)>>2] = r13,\n            HEAP32[(Rk|24)>>2] = r14,\n            HEAP32[(Rk|28)>>2] = r15;\n        }\n/*\n        for ( i = lA & -32; (i|0) < (lA|0); i = (i+4)|0 ) {\n            Ai = (A+i)|0;\n\n            ah0 = HEAP32[Ai>>2]|0,\n            al0 = ah0 & 0xffff,\n            ah0 = ah0 >>> 16;\n\n            r1 = 0;\n\n            for ( j = 0; (j|0) < (lB|0); j = (j+4)|0 ) {\n                Bj = (B+j)|0;\n                Rk = (R+(i+j|0))|0;\n\n                bh0 = HEAP32[Bj>>2]|0,\n                bl0 = bh0 & 0xffff,\n                bh0 = bh0 >>> 16;\n\n                r0 = HEAP32[Rk>>2]|0;\n\n                u = ((imul(al0, bl0)|0) + (r1 & 0xffff)|0) + (r0 & 0xffff)|0;\n                v = ((imul(ah0, bl0)|0) + (r1 >>> 16)|0) + (r0 >>> 16)|0;\n                w = ((imul(al0, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r0 = (w << 16) | (u & 0xffff);\n\n                r1 = m;\n\n                HEAP32[Rk>>2] = r0;\n            }\n\n            Rk = (R+(i+j|0))|0;\n            HEAP32[Rk>>2] = r1;\n        }\n*/\n    }\n\n    /**\n     * Fast squaring\n     *\n     * Exploits the fact:\n     *\n     *  X² = ( X0 + X1*B )² = X0² + 2*X0*X1*B + X1²*B²,\n     *\n     * where B is a power of 2, so:\n     *\n     *  2*X0*X1*B = (X0*X1 << 1)*B\n     *\n     * @param A offset of the argument being squared, 32-byte aligned\n     * @param lA length of the argument, multiple of 32\n     *\n     * @param R offset where to place the result to, 32-byte aligned\n     */\n    function sqr ( A, lA, R ) {\n        A  =  A|0;\n        lA = lA|0;\n        R  =  R|0;\n\n        var al0 = 0, al1 = 0, al2 = 0, al3 = 0, al4 = 0, al5 = 0, al6 = 0, al7 = 0, ah0 = 0, ah1 = 0, ah2 = 0, ah3 = 0, ah4 = 0, ah5 = 0, ah6 = 0, ah7 = 0,\n            bl0 = 0, bl1 = 0, bl2 = 0, bl3 = 0, bl4 = 0, bl5 = 0, bl6 = 0, bl7 = 0, bh0 = 0, bh1 = 0, bh2 = 0, bh3 = 0, bh4 = 0, bh5 = 0, bh6 = 0, bh7 = 0,\n            r0 = 0, r1 = 0, r2 = 0, r3 = 0, r4 = 0, r5 = 0, r6 = 0, r7 = 0, r8 = 0, r9 = 0, r10 = 0, r11 = 0, r12 = 0, r13 = 0, r14 = 0, r15 = 0,\n            u = 0, v = 0, w = 0, c = 0, h = 0, m = 0, r = 0,\n            d = 0, dd = 0, p = 0, i = 0, j = 0, k = 0, Ai = 0, Aj = 0, Rk = 0;\n\n        // prepare for iterations\n        for ( ; (i|0) < (lA|0); i = (i+4)|0 ) {\n            Rk = R+(i<<1)|0;\n            ah0 = HEAP32[(A+i)>>2]|0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16;\n            u = imul(al0,al0)|0;\n            v = (imul(al0,ah0)|0) + (u >>> 17)|0;\n            w = (imul(ah0,ah0)|0) + (v >>> 15)|0;\n            HEAP32[(Rk)>>2] = (v << 17) | (u & 0x1ffff);\n            HEAP32[(Rk|4)>>2] = w;\n        }\n\n        // unrolled 1st iteration\n        for ( p = 0; (p|0) < (lA|0); p = (p+8)|0 ) {\n            Ai = A+p|0, Rk = R+(p<<1)|0;\n\n            ah0 = HEAP32[(Ai)>>2]|0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16;\n\n            bh0 = HEAP32[(Ai|4)>>2]|0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16;\n\n            u = imul(al0,bl0)|0;\n            v = (imul(al0,bh0)|0) + (u >>> 16)|0;\n            w = (imul(ah0,bl0)|0) + (v & 0xffff)|0;\n            m = ((imul(ah0,bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n\n            r = HEAP32[(Rk|4)>>2]|0;\n            u = (r & 0xffff) + ((u & 0xffff) << 1)|0;\n            w = ((r >>> 16) + ((w & 0xffff) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|4)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk|8)>>2]|0;\n            u = ((r & 0xffff) + ((m & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((m >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|8)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            if ( c ) {\n                r = HEAP32[(Rk|12)>>2]|0;\n                u = (r & 0xffff) + c|0;\n                w = (r >>> 16) + (u >>> 16)|0;\n                HEAP32[(Rk|12)>>2] = (w << 16) | (u & 0xffff);\n            }\n        }\n\n        // unrolled 2nd iteration\n        for ( p = 0; (p|0) < (lA|0); p = (p+16)|0 ) {\n            Ai = A+p|0, Rk = R+(p<<1)|0;\n\n            ah0 = HEAP32[(Ai)>>2]|0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16,\n            ah1 = HEAP32[(Ai|4)>>2]|0, al1 = ah1 & 0xffff, ah1 = ah1 >>> 16;\n\n            bh0 = HEAP32[(Ai|8)>>2]|0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16,\n            bh1 = HEAP32[(Ai|12)>>2]|0, bl1 = bh1 & 0xffff, bh1 = bh1 >>> 16;\n\n            u = imul(al0, bl0)|0;\n            v = imul(ah0, bl0)|0;\n            w = ((imul(al0, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah0, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r0 = (w << 16) | (u & 0xffff);\n\n            u = (imul(al0, bl1)|0) + (m & 0xffff)|0;\n            v = (imul(ah0, bl1)|0) + (m >>> 16)|0;\n            w = ((imul(al0, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah0, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r1 = (w << 16) | (u & 0xffff);\n\n            r2 = m;\n\n            u = (imul(al1, bl0)|0) + (r1 & 0xffff)|0;\n            v = (imul(ah1, bl0)|0) + (r1 >>> 16)|0;\n            w = ((imul(al1, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah1, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r1 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al1, bl1)|0) + (r2 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah1, bl1)|0) + (r2 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al1, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah1, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r2 = (w << 16) | (u & 0xffff);\n\n            r3 = m;\n\n            r = HEAP32[(Rk|8)>>2]|0;\n            u = (r & 0xffff) + ((r0 & 0xffff) << 1)|0;\n            w = ((r >>> 16) + ((r0 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|8)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk|12)>>2]|0;\n            u = ((r & 0xffff) + ((r1 & 0xffff) << 1)|0)  + c|0;\n            w = ((r >>> 16) + ((r1 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|12)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk|16)>>2]|0;\n            u = ((r & 0xffff) + ((r2 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r2 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|16)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk|20)>>2]|0;\n            u = ((r & 0xffff) + ((r3 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r3 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|20)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            for ( k = 24; !!c & ( (k|0) < 32 ); k = (k+4)|0 ) {\n                r = HEAP32[(Rk|k)>>2]|0;\n                u = (r & 0xffff) + c|0;\n                w = (r >>> 16) + (u >>> 16)|0;\n                HEAP32[(Rk|k)>>2] = (w << 16) | (u & 0xffff);\n                c = w >>> 16;\n            }\n        }\n\n        // unrolled 3rd iteration\n        for ( p = 0; (p|0) < (lA|0); p = (p+32)|0 ) {\n            Ai = A+p|0, Rk = R+(p<<1)|0;\n\n            ah0 = HEAP32[(Ai)>>2]|0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16,\n            ah1 = HEAP32[(Ai|4)>>2]|0, al1 = ah1 & 0xffff, ah1 = ah1 >>> 16,\n            ah2 = HEAP32[(Ai|8)>>2]|0, al2 = ah2 & 0xffff, ah2 = ah2 >>> 16,\n            ah3 = HEAP32[(Ai|12)>>2]|0, al3 = ah3 & 0xffff, ah3 = ah3 >>> 16;\n\n            bh0 = HEAP32[(Ai|16)>>2]|0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16,\n            bh1 = HEAP32[(Ai|20)>>2]|0, bl1 = bh1 & 0xffff, bh1 = bh1 >>> 16,\n            bh2 = HEAP32[(Ai|24)>>2]|0, bl2 = bh2 & 0xffff, bh2 = bh2 >>> 16,\n            bh3 = HEAP32[(Ai|28)>>2]|0, bl3 = bh3 & 0xffff, bh3 = bh3 >>> 16;\n\n            u = imul(al0, bl0)|0;\n            v = imul(ah0, bl0)|0;\n            w = ((imul(al0, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah0, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r0 = (w << 16) | (u & 0xffff);\n\n            u = (imul(al0, bl1)|0) + (m & 0xffff)|0;\n            v = (imul(ah0, bl1)|0) + (m >>> 16)|0;\n            w = ((imul(al0, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah0, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r1 = (w << 16) | (u & 0xffff);\n\n            u = (imul(al0, bl2)|0) + (m & 0xffff)|0;\n            v = (imul(ah0, bl2)|0) + (m >>> 16)|0;\n            w = ((imul(al0, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah0, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r2 = (w << 16) | (u & 0xffff);\n\n            u = (imul(al0, bl3)|0) + (m & 0xffff)|0;\n            v = (imul(ah0, bl3)|0) + (m >>> 16)|0;\n            w = ((imul(al0, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah0, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r3 = (w << 16) | (u & 0xffff);\n\n            r4 = m;\n\n            u = (imul(al1, bl0)|0) + (r1 & 0xffff)|0;\n            v = (imul(ah1, bl0)|0) + (r1 >>> 16)|0;\n            w = ((imul(al1, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah1, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r1 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al1, bl1)|0) + (r2 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah1, bl1)|0) + (r2 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al1, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah1, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r2 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al1, bl2)|0) + (r3 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah1, bl2)|0) + (r3 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al1, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah1, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r3 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al1, bl3)|0) + (r4 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah1, bl3)|0) + (r4 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al1, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah1, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r4 = (w << 16) | (u & 0xffff);\n\n            r5 = m;\n\n            u = (imul(al2, bl0)|0) + (r2 & 0xffff)|0;\n            v = (imul(ah2, bl0)|0) + (r2 >>> 16)|0;\n            w = ((imul(al2, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah2, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r2 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al2, bl1)|0) + (r3 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah2, bl1)|0) + (r3 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al2, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah2, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r3 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al2, bl2)|0) + (r4 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah2, bl2)|0) + (r4 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al2, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah2, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r4 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al2, bl3)|0) + (r5 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah2, bl3)|0) + (r5 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al2, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah2, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r5 = (w << 16) | (u & 0xffff);\n\n            r6 = m;\n\n            u = (imul(al3, bl0)|0) + (r3 & 0xffff)|0;\n            v = (imul(ah3, bl0)|0) + (r3 >>> 16)|0;\n            w = ((imul(al3, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah3, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r3 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al3, bl1)|0) + (r4 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah3, bl1)|0) + (r4 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al3, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah3, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r4 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al3, bl2)|0) + (r5 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah3, bl2)|0) + (r5 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al3, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah3, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r5 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al3, bl3)|0) + (r6 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah3, bl3)|0) + (r6 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al3, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah3, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r6 = (w << 16) | (u & 0xffff);\n\n            r7 = m;\n\n            r = HEAP32[(Rk|16)>>2]|0;\n            u = (r & 0xffff) + ((r0 & 0xffff) << 1)|0;\n            w = ((r >>> 16) + ((r0 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|16)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk|20)>>2]|0;\n            u = ((r & 0xffff) + ((r1 & 0xffff) << 1)|0)  + c|0;\n            w = ((r >>> 16) + ((r1 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|20)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk|24)>>2]|0;\n            u = ((r & 0xffff) + ((r2 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r2 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|24)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk|28)>>2]|0;\n            u = ((r & 0xffff) + ((r3 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r3 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|28)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk+32)>>2]|0;\n            u = ((r & 0xffff) + ((r4 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r4 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk+32)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk+36)>>2]|0;\n            u = ((r & 0xffff) + ((r5 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r5 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk+36)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk+40)>>2]|0;\n            u = ((r & 0xffff) + ((r6 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r6 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk+40)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk+44)>>2]|0;\n            u = ((r & 0xffff) + ((r7 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r7 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk+44)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            for ( k = 48; !!c & ( (k|0) < 64 ); k = (k+4)|0 ) {\n                r = HEAP32[(Rk+k)>>2]|0;\n                u = (r & 0xffff) + c|0;\n                w = (r >>> 16) + (u >>> 16)|0;\n                HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                c = w >>> 16;\n            }\n        }\n\n        // perform iterations\n        for ( d = 32; (d|0) < (lA|0); d = d << 1 ) { // depth loop\n            dd = d << 1;\n\n            for ( p = 0; (p|0) < (lA|0); p = (p+dd)|0 ) { // part loop\n                Rk = R+(p<<1)|0;\n\n                h = 0;\n                for ( i = 0; (i|0) < (d|0); i = (i+32)|0 ) { // multiply-and-add loop\n                    Ai = (A+p|0)+i|0;\n\n                    ah0 = HEAP32[(Ai)>>2]|0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16,\n                    ah1 = HEAP32[(Ai|4)>>2]|0, al1 = ah1 & 0xffff, ah1 = ah1 >>> 16,\n                    ah2 = HEAP32[(Ai|8)>>2]|0, al2 = ah2 & 0xffff, ah2 = ah2 >>> 16,\n                    ah3 = HEAP32[(Ai|12)>>2]|0, al3 = ah3 & 0xffff, ah3 = ah3 >>> 16,\n                    ah4 = HEAP32[(Ai|16)>>2]|0, al4 = ah4 & 0xffff, ah4 = ah4 >>> 16,\n                    ah5 = HEAP32[(Ai|20)>>2]|0, al5 = ah5 & 0xffff, ah5 = ah5 >>> 16,\n                    ah6 = HEAP32[(Ai|24)>>2]|0, al6 = ah6 & 0xffff, ah6 = ah6 >>> 16,\n                    ah7 = HEAP32[(Ai|28)>>2]|0, al7 = ah7 & 0xffff, ah7 = ah7 >>> 16;\n\n                    r8 = r9 = r10 = r11 = r12 = r13 = r14 = r15 = c = 0;\n\n                    for ( j = 0; (j|0) < (d|0); j = (j+32)|0 ) {\n                        Aj = ((A+p|0)+d|0)+j|0;\n\n                        bh0 = HEAP32[(Aj)>>2]|0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16,\n                        bh1 = HEAP32[(Aj|4)>>2]|0, bl1 = bh1 & 0xffff, bh1 = bh1 >>> 16,\n                        bh2 = HEAP32[(Aj|8)>>2]|0, bl2 = bh2 & 0xffff, bh2 = bh2 >>> 16,\n                        bh3 = HEAP32[(Aj|12)>>2]|0, bl3 = bh3 & 0xffff, bh3 = bh3 >>> 16,\n                        bh4 = HEAP32[(Aj|16)>>2]|0, bl4 = bh4 & 0xffff, bh4 = bh4 >>> 16,\n                        bh5 = HEAP32[(Aj|20)>>2]|0, bl5 = bh5 & 0xffff, bh5 = bh5 >>> 16,\n                        bh6 = HEAP32[(Aj|24)>>2]|0, bl6 = bh6 & 0xffff, bh6 = bh6 >>> 16,\n                        bh7 = HEAP32[(Aj|28)>>2]|0, bl7 = bh7 & 0xffff, bh7 = bh7 >>> 16;\n\n                        r0 = r1 = r2 = r3 = r4 = r5 = r6 = r7 = 0;\n\n                        u = ((imul(al0, bl0)|0) + (r0 & 0xffff)|0) + (r8 & 0xffff)|0;\n                        v = ((imul(ah0, bl0)|0) + (r0 >>> 16)|0) + (r8 >>> 16)|0;\n                        w = ((imul(al0, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r0 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al0, bl1)|0) + (r1 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah0, bl1)|0) + (r1 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al0, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r1 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al0, bl2)|0) + (r2 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah0, bl2)|0) + (r2 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al0, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r2 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al0, bl3)|0) + (r3 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah0, bl3)|0) + (r3 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al0, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r3 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al0, bl4)|0) + (r4 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah0, bl4)|0) + (r4 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al0, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r4 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al0, bl5)|0) + (r5 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah0, bl5)|0) + (r5 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al0, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r5 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al0, bl6)|0) + (r6 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah0, bl6)|0) + (r6 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al0, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r6 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al0, bl7)|0) + (r7 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah0, bl7)|0) + (r7 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al0, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        r8 = m;\n\n                        u = ((imul(al1, bl0)|0) + (r1 & 0xffff)|0) + (r9 & 0xffff)|0;\n                        v = ((imul(ah1, bl0)|0) + (r1 >>> 16)|0) + (r9 >>> 16)|0;\n                        w = ((imul(al1, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r1 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al1, bl1)|0) + (r2 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah1, bl1)|0) + (r2 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al1, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r2 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al1, bl2)|0) + (r3 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah1, bl2)|0) + (r3 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al1, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r3 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al1, bl3)|0) + (r4 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah1, bl3)|0) + (r4 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al1, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r4 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al1, bl4)|0) + (r5 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah1, bl4)|0) + (r5 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al1, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r5 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al1, bl5)|0) + (r6 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah1, bl5)|0) + (r6 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al1, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r6 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al1, bl6)|0) + (r7 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah1, bl6)|0) + (r7 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al1, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al1, bl7)|0) + (r8 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah1, bl7)|0) + (r8 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al1, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r8 = (w << 16) | (u & 0xffff);\n\n                        r9 = m;\n\n                        u = ((imul(al2, bl0)|0) + (r2 & 0xffff)|0) + (r10 & 0xffff)|0;\n                        v = ((imul(ah2, bl0)|0) + (r2 >>> 16)|0) + (r10 >>> 16)|0;\n                        w = ((imul(al2, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r2 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al2, bl1)|0) + (r3 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah2, bl1)|0) + (r3 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al2, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r3 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al2, bl2)|0) + (r4 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah2, bl2)|0) + (r4 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al2, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r4 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al2, bl3)|0) + (r5 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah2, bl3)|0) + (r5 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al2, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r5 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al2, bl4)|0) + (r6 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah2, bl4)|0) + (r6 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al2, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r6 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al2, bl5)|0) + (r7 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah2, bl5)|0) + (r7 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al2, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al2, bl6)|0) + (r8 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah2, bl6)|0) + (r8 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al2, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r8 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al2, bl7)|0) + (r9 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah2, bl7)|0) + (r9 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al2, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r9 = (w << 16) | (u & 0xffff);\n\n                        r10 = m;\n\n                        u = ((imul(al3, bl0)|0) + (r3 & 0xffff)|0) + (r11 & 0xffff)|0;\n                        v = ((imul(ah3, bl0)|0) + (r3 >>> 16)|0) + (r11 >>> 16)|0;\n                        w = ((imul(al3, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r3 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al3, bl1)|0) + (r4 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah3, bl1)|0) + (r4 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al3, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r4 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al3, bl2)|0) + (r5 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah3, bl2)|0) + (r5 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al3, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r5 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al3, bl3)|0) + (r6 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah3, bl3)|0) + (r6 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al3, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r6 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al3, bl4)|0) + (r7 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah3, bl4)|0) + (r7 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al3, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al3, bl5)|0) + (r8 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah3, bl5)|0) + (r8 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al3, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r8 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al3, bl6)|0) + (r9 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah3, bl6)|0) + (r9 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al3, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r9 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al3, bl7)|0) + (r10 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah3, bl7)|0) + (r10 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al3, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r10 = (w << 16) | (u & 0xffff);\n\n                        r11 = m;\n\n                        u = ((imul(al4, bl0)|0) + (r4 & 0xffff)|0) + (r12 & 0xffff)|0;\n                        v = ((imul(ah4, bl0)|0) + (r4 >>> 16)|0) + (r12 >>> 16)|0;\n                        w = ((imul(al4, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r4 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al4, bl1)|0) + (r5 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah4, bl1)|0) + (r5 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al4, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r5 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al4, bl2)|0) + (r6 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah4, bl2)|0) + (r6 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al4, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r6 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al4, bl3)|0) + (r7 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah4, bl3)|0) + (r7 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al4, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al4, bl4)|0) + (r8 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah4, bl4)|0) + (r8 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al4, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r8 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al4, bl5)|0) + (r9 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah4, bl5)|0) + (r9 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al4, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r9 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al4, bl6)|0) + (r10 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah4, bl6)|0) + (r10 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al4, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r10 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al4, bl7)|0) + (r11 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah4, bl7)|0) + (r11 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al4, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r11 = (w << 16) | (u & 0xffff);\n\n                        r12 = m;\n\n                        u = ((imul(al5, bl0)|0) + (r5 & 0xffff)|0) + (r13 & 0xffff)|0;\n                        v = ((imul(ah5, bl0)|0) + (r5 >>> 16)|0) + (r13 >>> 16)|0;\n                        w = ((imul(al5, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r5 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al5, bl1)|0) + (r6 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah5, bl1)|0) + (r6 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al5, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r6 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al5, bl2)|0) + (r7 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah5, bl2)|0) + (r7 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al5, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al5, bl3)|0) + (r8 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah5, bl3)|0) + (r8 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al5, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r8 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al5, bl4)|0) + (r9 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah5, bl4)|0) + (r9 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al5, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r9 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al5, bl5)|0) + (r10 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah5, bl5)|0) + (r10 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al5, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r10 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al5, bl6)|0) + (r11 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah5, bl6)|0) + (r11 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al5, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r11 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al5, bl7)|0) + (r12 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah5, bl7)|0) + (r12 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al5, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r12 = (w << 16) | (u & 0xffff);\n\n                        r13 = m;\n\n                        u = ((imul(al6, bl0)|0) + (r6 & 0xffff)|0) + (r14 & 0xffff)|0;\n                        v = ((imul(ah6, bl0)|0) + (r6 >>> 16)|0) + (r14 >>> 16)|0;\n                        w = ((imul(al6, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r6 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al6, bl1)|0) + (r7 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah6, bl1)|0) + (r7 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al6, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al6, bl2)|0) + (r8 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah6, bl2)|0) + (r8 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al6, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r8 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al6, bl3)|0) + (r9 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah6, bl3)|0) + (r9 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al6, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r9 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al6, bl4)|0) + (r10 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah6, bl4)|0) + (r10 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al6, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r10 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al6, bl5)|0) + (r11 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah6, bl5)|0) + (r11 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al6, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r11 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al6, bl6)|0) + (r12 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah6, bl6)|0) + (r12 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al6, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r12 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al6, bl7)|0) + (r13 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah6, bl7)|0) + (r13 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al6, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r13 = (w << 16) | (u & 0xffff);\n\n                        r14 = m;\n\n                        u = ((imul(al7, bl0)|0) + (r7 & 0xffff)|0) + (r15 & 0xffff)|0;\n                        v = ((imul(ah7, bl0)|0) + (r7 >>> 16)|0) + (r15 >>> 16)|0;\n                        w = ((imul(al7, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al7, bl1)|0) + (r8 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah7, bl1)|0) + (r8 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al7, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r8 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al7, bl2)|0) + (r9 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah7, bl2)|0) + (r9 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al7, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r9 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al7, bl3)|0) + (r10 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah7, bl3)|0) + (r10 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al7, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r10 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al7, bl4)|0) + (r11 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah7, bl4)|0) + (r11 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al7, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r11 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al7, bl5)|0) + (r12 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah7, bl5)|0) + (r12 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al7, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r12 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al7, bl6)|0) + (r13 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah7, bl6)|0) + (r13 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al7, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r13 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al7, bl7)|0) + (r14 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah7, bl7)|0) + (r14 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al7, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r14 = (w << 16) | (u & 0xffff);\n\n                        r15 = m;\n\n                        k = d+(i+j|0)|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r0 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r0 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n\n                        k = k+4|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r1 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r1 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n\n                        k = k+4|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r2 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r2 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n\n                        k = k+4|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r3 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r3 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n\n                        k = k+4|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r4 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r4 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n\n                        k = k+4|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r5 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r5 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n\n                        k = k+4|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r6 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r6 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n\n                        k = k+4|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r7 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r7 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n                    }\n\n                    k = d+(i+j|0)|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = (((r & 0xffff) + ((r8 & 0xffff) << 1)|0) + c|0) + h|0;\n                    w = ((r >>> 16) + ((r8 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    c = w >>> 16;\n\n                    k = k+4|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = ((r & 0xffff) + ((r9 & 0xffff) << 1)|0) + c|0;\n                    w = ((r >>> 16) + ((r9 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    c = w >>> 16;\n\n                    k = k+4|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = ((r & 0xffff) + ((r10 & 0xffff) << 1)|0) + c|0;\n                    w = ((r >>> 16) + ((r10 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    c = w >>> 16;\n\n                    k = k+4|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = ((r & 0xffff) + ((r11 & 0xffff) << 1)|0) + c|0;\n                    w = ((r >>> 16) + ((r11 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    c = w >>> 16;\n\n                    k = k+4|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = ((r & 0xffff) + ((r12 & 0xffff) << 1)|0) + c|0;\n                    w = ((r >>> 16) + ((r12 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    c = w >>> 16;\n\n                    k = k+4|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = ((r & 0xffff) + ((r13 & 0xffff) << 1)|0) + c|0;\n                    w = ((r >>> 16) + ((r13 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    c = w >>> 16;\n\n                    k = k+4|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = ((r & 0xffff) + ((r14 & 0xffff) << 1)|0) + c|0;\n                    w = ((r >>> 16) + ((r14 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    c = w >>> 16;\n\n                    k = k+4|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = ((r & 0xffff) + ((r15 & 0xffff) << 1)|0) + c|0;\n                    w = ((r >>> 16) + ((r15 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    h = w >>> 16;\n                }\n\n                for ( k = k+4|0; !!h & ( (k|0) < (dd<<1) ); k = (k+4)|0 ) { // carry propagation loop\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = (r & 0xffff) + h|0;\n                    w = (r >>> 16) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    h = w >>> 16;\n                }\n            }\n        }\n    }\n\n    /**\n     * Conventional division\n     *\n     * @param A offset of the numerator, 32-byte aligned\n     * @param lA length of the numerator, multiple of 32\n     *\n     * @param B offset of the divisor, 32-byte aligned\n     * @param lB length of the divisor, multiple of 32\n     *\n     * @param R offset where to place the remainder to, 32-byte aligned\n     *\n     * @param Q offser where to place the quotient to, 32-byte aligned\n     */\n\n    function div ( N, lN, D, lD, Q ) {\n        N  =  N|0;\n        lN = lN|0\n        D  =  D|0;\n        lD = lD|0\n        Q  =  Q|0;\n\n        var n = 0, d = 0, e = 0,\n            u1 = 0, u0 = 0,\n            v0 = 0, vh = 0, vl = 0,\n            qh = 0, ql = 0, rh = 0, rl = 0,\n            t1 = 0, t2 = 0, m = 0, c = 0,\n            i = 0, j = 0, k = 0;\n\n        // number of significant limbs in `N` (multiplied by 4)\n        for ( i = (lN-1) & -4; (i|0) >= 0; i = (i-4)|0 ) {\n            n = HEAP32[(N+i)>>2]|0;\n            if ( n ) {\n                lN = i;\n                break;\n            }\n        }\n\n        // number of significant limbs in `D` (multiplied by 4)\n        for ( i = (lD-1) & -4; (i|0) >= 0; i = (i-4)|0 ) {\n            d = HEAP32[(D+i)>>2]|0;\n            if ( d ) {\n                lD = i;\n                break;\n            }\n        }\n\n        // `D` is zero? WTF?!\n\n        // calculate `e` — the power of 2 of the normalization factor\n        while ( (d & 0x80000000) == 0 ) {\n            d = d << 1;\n            e = e + 1|0;\n        }\n\n        // normalize `N` in place\n        u0 = HEAP32[(N+lN)>>2]|0;\n        if ( e ) {\n            u1 = u0>>>(32-e|0);\n            for ( i = (lN-4)|0; (i|0) >= 0; i = (i-4)|0 ) {\n                n = HEAP32[(N+i)>>2]|0;\n                HEAP32[(N+i+4)>>2] = (u0 << e) | ( e ? n >>> (32-e|0) : 0 );\n                u0 = n;\n            }\n            HEAP32[N>>2] = u0 << e;\n        }\n\n        // normalize `D` in place\n        if ( e ) {\n            v0 = HEAP32[(D+lD)>>2]|0;\n            for ( i = (lD-4)|0; (i|0) >= 0; i = (i-4)|0 ) {\n                d = HEAP32[(D+i)>>2]|0;\n                HEAP32[(D+i+4)>>2] = (v0 << e) | ( d >>> (32-e|0) );\n                v0 = d;\n            }\n            HEAP32[D>>2] = v0 << e;\n        }\n\n        // divisor parts won't change\n        v0 = HEAP32[(D+lD)>>2]|0;\n        vh = v0 >>> 16, vl = v0 & 0xffff;\n\n        // perform division\n        for ( i = lN; (i|0) >= (lD|0); i = (i-4)|0 ) {\n            j = (i-lD)|0;\n\n            // estimate high part of the quotient\n            u0 = HEAP32[(N+i)>>2]|0;\n            qh = ( (u1>>>0) / (vh>>>0) )|0, rh = ( (u1>>>0) % (vh>>>0) )|0, t1 = imul(qh, vl)|0;\n            while ( ( (qh|0) == 0x10000 ) | ( (t1>>>0) > (((rh << 16)|(u0 >>> 16))>>>0) ) ) {\n                qh = (qh-1)|0, rh = (rh+vh)|0, t1 = (t1-vl)|0;\n                if ( (rh|0) >= 0x10000 ) break;\n            }\n\n            // bulk multiply-and-subtract\n            // m - multiplication carry, c - subtraction carry\n            m = 0, c = 0;\n            for ( k = 0; (k|0) <= (lD|0); k = (k+4)|0 ) {\n                d = HEAP32[(D+k)>>2]|0;\n                t1 = (imul(qh, d & 0xffff)|0) + (m >>> 16)|0;\n                t2 = (imul(qh, d >>> 16)|0) + (t1 >>> 16)|0;\n                d = (m & 0xffff) | (t1 << 16);\n                m = t2;\n                n = HEAP32[(N+j+k)>>2]|0;\n                t1 = ((n & 0xffff) - (d & 0xffff)|0) + c|0;\n                t2 = ((n >>> 16) - (d >>> 16)|0) + (t1 >> 16)|0;\n                HEAP32[(N+j+k)>>2] = (t2 << 16) | (t1 & 0xffff);\n                c = t2 >> 16;\n            }\n            t1 = ((u1 & 0xffff) - (m & 0xffff)|0) + c|0;\n            t2 = ((u1 >>> 16) - (m >>> 16)|0) + (t1 >> 16)|0;\n            u1 = (t2 << 16) | (t1 & 0xffff);\n            c = t2 >> 16;\n\n            // add `D` back if got carry-out\n            if ( c ) {\n                qh = (qh-1)|0;\n                c = 0;\n                for ( k = 0; (k|0) <= (lD|0); k = (k+4)|0 ) {\n                    d = HEAP32[(D+k)>>2]|0;\n                    n = HEAP32[(N+j+k)>>2]|0;\n                    t1 = (n & 0xffff) + c|0;\n                    t2 = (n >>> 16) + d + (t1 >>> 16)|0;\n                    HEAP32[(N+j+k)>>2] = (t2 << 16) | (t1 & 0xffff);\n                    c = t2 >>> 16;\n                }\n                u1 = (u1+c)|0;\n            }\n\n            // estimate low part of the quotient\n            u0 = HEAP32[(N+i)>>2]|0;\n            n = (u1 << 16) | (u0 >>> 16);\n            ql = ( (n>>>0) / (vh>>>0) )|0, rl = ( (n>>>0) % (vh>>>0) )|0, t1 = imul(ql, vl)|0;\n            while ( ( (ql|0) == 0x10000 ) | ( (t1>>>0) > (((rl << 16)|(u0 & 0xffff))>>>0) ) ) {\n                ql = (ql-1)|0, rl = (rl+vh)|0, t1 = (t1-vl)|0;\n                if ( (rl|0) >= 0x10000 ) break;\n            }\n\n            // bulk multiply-and-subtract\n            // m - multiplication carry, c - subtraction carry\n            m = 0, c = 0;\n            for ( k = 0; (k|0) <= (lD|0); k = (k+4)|0 ) {\n                d = HEAP32[(D+k)>>2]|0;\n                t1 = (imul(ql, d & 0xffff)|0) + (m & 0xffff)|0;\n                t2 = ((imul(ql, d >>> 16)|0) + (t1 >>> 16)|0) + (m >>> 16)|0;\n                d = (t1 & 0xffff) | (t2 << 16);\n                m = t2 >>> 16;\n                n = HEAP32[(N+j+k)>>2]|0;\n                t1 = ((n & 0xffff) - (d & 0xffff)|0) + c|0;\n                t2 = ((n >>> 16) - (d >>> 16)|0) + (t1 >> 16)|0;\n                c = t2 >> 16;\n                HEAP32[(N+j+k)>>2] = (t2 << 16) | (t1 & 0xffff);\n            }\n            t1 = ((u1 & 0xffff) - (m & 0xffff)|0) + c|0;\n            t2 = ((u1 >>> 16) - (m >>> 16)|0) + (t1 >> 16)|0;\n            c = t2 >> 16;\n\n            // add `D` back if got carry-out\n            if ( c ) {\n                ql = (ql-1)|0;\n                c = 0;\n                for ( k = 0; (k|0) <= (lD|0); k = (k+4)|0 ) {\n                    d = HEAP32[(D+k)>>2]|0;\n                    n = HEAP32[(N+j+k)>>2]|0;\n                    t1 = ((n & 0xffff) + (d & 0xffff)|0) + c|0;\n                    t2 = ((n >>> 16) + (d >>> 16)|0) + (t1 >>> 16)|0;\n                    c = t2 >>> 16;\n                    HEAP32[(N+j+k)>>2] = (t1 & 0xffff) | (t2 << 16);\n                }\n            }\n\n            // got quotient limb\n            HEAP32[(Q+j)>>2] = (qh << 16) | ql;\n\n            u1 = HEAP32[(N+i)>>2]|0;\n        }\n\n        if ( e ) {\n            // TODO denormalize `D` in place\n\n            // denormalize `N` in place\n            u0 = HEAP32[N>>2]|0;\n            for ( i = 4; (i|0) <= (lD|0); i = (i+4)|0 ) {\n                n = HEAP32[(N+i)>>2]|0;\n                HEAP32[(N+i-4)>>2] = ( n << (32-e|0) ) | (u0 >>> e);\n                u0 = n;\n            }\n            HEAP32[(N+lD)>>2] = u0 >>> e;\n        }\n    }\n\n    /**\n     * Montgomery modular reduction\n     *\n     * Definition:\n     *\n     *  MREDC(A) = A × X (mod N),\n     *  M × X = N × Y + 1,\n     *\n     * where M = 2^(32*m) such that N < M and A < N×M\n     *\n     * Numbers `X` and `Y` can be calculated using Extended Euclidean Algorithm.\n     */\n    function mredc ( A, lA, N, lN, y, R ) {\n        A  =  A|0;\n        lA = lA|0;\n        N  =  N|0;\n        lN = lN|0;\n        y  =  y|0;\n        R  =  R|0;\n\n        var T = 0,\n            c = 0, uh = 0, ul = 0, vl = 0, vh = 0, w0 = 0, w1 = 0, w2 = 0, r0 = 0, r1 = 0,\n            i = 0, j = 0, k = 0;\n\n        T = salloc(lN<<1)|0;\n        z(lN<<1, 0, T);\n\n        cp( lA, A, T );\n\n        // HAC 14.32\n        for ( i = 0; (i|0) < (lN|0); i = (i+4)|0 ) {\n            uh = HEAP32[(T+i)>>2]|0, ul = uh & 0xffff, uh = uh >>> 16;\n            vh = y >>> 16, vl = y & 0xffff;\n            w0 = imul(ul,vl)|0, w1 = ( (imul(ul,vh)|0) + (imul(uh,vl)|0) | 0 ) + (w0 >>> 16) | 0;\n            ul = w0 & 0xffff, uh = w1 & 0xffff;\n            r1 = 0;\n            for ( j = 0; (j|0) < (lN|0); j = (j+4)|0 ) {\n                k = (i+j)|0;\n                vh = HEAP32[(N+j)>>2]|0, vl = vh & 0xffff, vh = vh >>> 16;\n                r0 = HEAP32[(T+k)>>2]|0;\n                w0 = ((imul(ul, vl)|0) + (r1 & 0xffff)|0) + (r0 & 0xffff)|0;\n                w1 = ((imul(ul, vh)|0) + (r1 >>> 16)|0) + (r0 >>> 16)|0;\n                w2 = ((imul(uh, vl)|0) + (w1 & 0xffff)|0) + (w0 >>> 16)|0;\n                r1 = ((imul(uh, vh)|0) + (w2 >>> 16)|0) + (w1 >>> 16)|0;\n                r0 = (w2 << 16) | (w0 & 0xffff);\n                HEAP32[(T+k)>>2] = r0;\n            }\n            k = (i+j)|0;\n            r0 = HEAP32[(T+k)>>2]|0;\n            w0 = ((r0 & 0xffff) + (r1 & 0xffff)|0) + c|0;\n            w1 = ((r0 >>> 16) + (r1 >>> 16)|0) + (w0 >>> 16)|0;\n            HEAP32[(T+k)>>2] = (w1 << 16) | (w0 & 0xffff);\n            c = w1 >>> 16;\n        }\n\n        cp( lN, (T+lN)|0, R );\n\n        sfree(lN<<1);\n\n        if ( c | ( (cmp( N, lN, R, lN )|0) <= 0 ) ) {\n            sub( R, lN, N, lN, R, lN )|0;\n        }\n    }\n\n    return {\n        sreset: sreset,\n        salloc: salloc,\n        sfree:  sfree,\n        z: z,\n        tst: tst,\n        neg: neg,\n        cmp: cmp,\n        add: add,\n        sub: sub,\n        mul: mul,\n        sqr: sqr,\n        div: div,\n        mredc: mredc\n    };\n}\n","import {bigint_asm} from './bigint.asm';\nimport {is_buffer, is_bytes, is_number, is_string, string_to_bytes} from '../utils';\nimport {IllegalArgumentError} from '../errors';\n\nexport function is_big_number ( a ) {\n    return ( a instanceof BigNumber_constructor );\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\nexport var _bigint_stdlib = { Uint32Array: Uint32Array, Math: Math };\nexport var _bigint_heap = new Uint32Array(0x100000);\nexport var _bigint_asm;\n\nfunction _half_imul ( a, b ) {\n    return a * b | 0;\n}\n\nif ( _bigint_stdlib.Math.imul === undefined ) {\n    _bigint_stdlib.Math.imul = _half_imul;\n    _bigint_asm = bigint_asm( _bigint_stdlib, null, _bigint_heap.buffer );\n    delete _bigint_stdlib.Math.imul;\n}\nelse {\n    _bigint_asm = bigint_asm( _bigint_stdlib, null, _bigint_heap.buffer );\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\nvar _BigNumber_ZERO_limbs = new Uint32Array(0);\n\nexport function BigNumber_constructor (num ) {\n    var limbs = _BigNumber_ZERO_limbs,\n        bitlen = 0,\n        sign = 0;\n\n    if ( is_string(num) )\n        num = string_to_bytes(num);\n\n    if ( is_buffer(num) )\n        num = new Uint8Array(num);\n\n    if ( num === undefined ) {\n        // do nothing\n    }\n    else if ( is_number(num) ) {\n        var absnum = Math.abs(num);\n        if ( absnum > 0xffffffff ) {\n            limbs = new Uint32Array(2);\n            limbs[0] = absnum|0;\n            limbs[1] = (absnum/0x100000000)|0;\n            bitlen = 52;\n        }\n        else if ( absnum > 0 ) {\n            limbs = new Uint32Array(1);\n            limbs[0] = absnum;\n            bitlen = 32;\n        }\n        else {\n            limbs = _BigNumber_ZERO_limbs;\n            bitlen = 0;\n        }\n        sign = num < 0 ? -1 : 1;\n    }\n    else if ( is_bytes(num) ) {\n        for ( var i = 0; !num[i]; i++ );\n\n        bitlen = ( num.length - i ) * 8;\n        if ( !bitlen )\n            return BigNumber_ZERO;\n\n        limbs = new Uint32Array( (bitlen + 31) >> 5 );\n        for ( var j = num.length-4; j >= i ; j -= 4 ) {\n            limbs[(num.length-4-j)>>2] = (num[j] << 24) | (num[j+1] << 16) | (num[j+2] << 8) | num[j+3];\n        }\n        if ( i-j === 3 ) {\n            limbs[limbs.length-1] = num[i];\n        }\n        else if ( i-j === 2 ) {\n            limbs[limbs.length-1] = (num[i] << 8) | num[i+1];\n        }\n        else if ( i-j === 1 ) {\n            limbs[limbs.length-1] = (num[i] << 16) | (num[i+1] << 8) | num[i+2];\n        }\n\n        sign = 1;\n    }\n    else if ( typeof num === 'object' && num !== null ) {\n        limbs = new Uint32Array( num.limbs );\n        bitlen = num.bitLength;\n        sign = num.sign;\n    }\n    else {\n        throw new TypeError(\"number is of unexpected type\");\n    }\n\n    this.limbs = limbs;\n    this.bitLength = bitlen;\n    this.sign = sign;\n}\n\nfunction BigNumber_toString ( radix ) {\n    radix = radix || 16;\n\n    var limbs = this.limbs,\n        bitlen = this.bitLength,\n        str = '';\n\n    if ( radix === 16 ) {\n        // FIXME clamp last limb to (bitlen % 32)\n        for ( var i = (bitlen+31>>5)-1; i >= 0; i-- ) {\n            var h = limbs[i].toString(16);\n            str += '00000000'.substr(h.length);\n            str += h;\n        }\n\n        str = str.replace( /^0+/, '' );\n\n        if ( !str.length )\n            str = '0';\n    }\n    else {\n        throw new IllegalArgumentError(\"bad radix\");\n    }\n\n    if ( this.sign < 0 )\n        str = '-' + str;\n\n    return str;\n}\n\nfunction BigNumber_toBytes () {\n    var bitlen = this.bitLength,\n        limbs = this.limbs;\n\n    if ( bitlen === 0 )\n        return new Uint8Array(0);\n\n    var bytelen = ( bitlen + 7 ) >> 3,\n        bytes = new Uint8Array(bytelen);\n    for ( var i = 0; i < bytelen; i++ ) {\n        var j = bytelen - i - 1;\n        bytes[i] = limbs[j>>2] >> ( (j & 3) << 3 );\n    }\n\n    return bytes;\n}\n\n// Downgrade to Number\nfunction BigNumber_valueOf () {\n    var limbs = this.limbs,\n        bits = this.bitLength,\n        sign = this.sign;\n\n    if ( !sign )\n        return 0;\n\n    if ( bits <= 32 )\n        return sign * (limbs[0]>>>0);\n\n    if ( bits <= 52 )\n        return sign * ( 0x100000000 * (limbs[1]>>>0) + (limbs[0]>>>0) );\n\n    // normalization\n    var i, l, e = 0;\n    for ( i = limbs.length-1; i >= 0; i-- ) {\n        if ( (l = limbs[i]) === 0 ) continue;\n        while ( ( (l << e) & 0x80000000 ) === 0 ) e++;\n        break;\n    }\n\n    if ( i === 0 )\n        return sign * (limbs[0]>>>0);\n\n    return sign * ( 0x100000 * (( (limbs[i] << e) | ( e ? limbs[i-1] >>> (32-e) : 0 ) )>>>0)\n                             + (( (limbs[i-1] << e) | ( e && i > 1 ? limbs[i-2] >>> (32-e) : 0 ) )>>>12)\n                  ) * Math.pow( 2, 32*i-e-52 );\n}\n\nfunction BigNumber_clamp ( b ) {\n    var limbs = this.limbs,\n        bitlen = this.bitLength;\n\n    // FIXME check b is number and in a valid range\n\n    if ( b >= bitlen )\n        return this;\n\n    var clamped = new BigNumber_constructor,\n        n = (b + 31) >> 5,\n        k = b % 32;\n\n    clamped.limbs = new Uint32Array( limbs.subarray(0,n) );\n    clamped.bitLength = b;\n    clamped.sign = this.sign;\n\n    if ( k ) clamped.limbs[n-1] &= (-1 >>> (32-k));\n\n    return clamped;\n}\n\nfunction BigNumber_slice ( f, b ) {\n    if ( !is_number(f) )\n        throw new TypeError(\"TODO\");\n\n    if ( b !== undefined && !is_number(b) )\n        throw new TypeError(\"TODO\");\n\n    var limbs = this.limbs,\n        bitlen = this.bitLength;\n\n    if ( f < 0 )\n        throw new RangeError(\"TODO\");\n\n    if ( f >= bitlen )\n        return BigNumber_ZERO;\n\n    if ( b === undefined || b > bitlen - f )\n        b = bitlen - f;\n\n    var sliced = new BigNumber_constructor, slimbs,\n        n = f >> 5, m = (f + b + 31) >> 5, l = (b + 31) >> 5,\n        t = f % 32, k = b % 32;\n\n    slimbs = new Uint32Array(l);\n    if ( t ) {\n        for ( var i = 0; i < m-n-1; i++ ) {\n            slimbs[i] = (limbs[n+i]>>>t) | ( limbs[n+i+1]<<(32-t) );\n        }\n        slimbs[i] = limbs[n+i]>>>t;\n    }\n    else {\n        slimbs.set( limbs.subarray(n, m) );\n    }\n\n    if ( k ) {\n        slimbs[l-1] &= (-1 >>> (32-k));\n    }\n\n    sliced.limbs = slimbs\n    sliced.bitLength = b;\n    sliced.sign = this.sign;\n\n    return sliced;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\nfunction BigNumber_negate () {\n    var negative = new BigNumber_constructor;\n\n    negative.limbs = this.limbs;\n    negative.bitLength = this.bitLength;\n    negative.sign = -1 * this.sign;\n\n    return negative;\n}\n\nfunction BigNumber_compare ( that ) {\n    if ( !is_big_number(that) )\n        that = new BigNumber_constructor(that);\n\n    var alimbs = this.limbs, alimbcnt = alimbs.length,\n        blimbs = that.limbs, blimbcnt = blimbs.length,\n        z = 0;\n\n    if ( this.sign < that.sign )\n        return -1;\n\n    if ( this.sign > that.sign )\n        return 1;\n\n    _bigint_heap.set( alimbs, 0 );\n    _bigint_heap.set( blimbs, alimbcnt );\n    z = _bigint_asm.cmp( 0, alimbcnt<<2, alimbcnt<<2, blimbcnt<<2 );\n\n    return z * this.sign;\n}\n\nfunction BigNumber_add ( that ) {\n    if ( !is_big_number(that) )\n        that = new BigNumber_constructor(that);\n\n    if ( !this.sign )\n        return that;\n\n    if ( !that.sign )\n        return this;\n\n    var abitlen = this.bitLength, alimbs = this.limbs, alimbcnt = alimbs.length, asign = this.sign,\n        bbitlen = that.bitLength, blimbs = that.limbs, blimbcnt = blimbs.length, bsign = that.sign,\n        rbitlen, rlimbcnt, rsign, rof, result = new BigNumber_constructor;\n\n    rbitlen = ( abitlen > bbitlen ? abitlen : bbitlen ) + ( asign * bsign > 0 ? 1 : 0 );\n    rlimbcnt = ( rbitlen + 31 ) >> 5;\n\n    _bigint_asm.sreset();\n\n    var pA = _bigint_asm.salloc( alimbcnt<<2 ),\n        pB = _bigint_asm.salloc( blimbcnt<<2 ),\n        pR = _bigint_asm.salloc( rlimbcnt<<2 );\n\n    _bigint_asm.z( pR-pA+(rlimbcnt<<2), 0, pA );\n\n    _bigint_heap.set( alimbs, pA>>2 );\n    _bigint_heap.set( blimbs, pB>>2 );\n\n    if ( asign * bsign > 0 ) {\n        _bigint_asm.add( pA, alimbcnt<<2, pB, blimbcnt<<2, pR, rlimbcnt<<2 );\n        rsign = asign;\n    }\n    else if ( asign > bsign ) {\n        rof = _bigint_asm.sub( pA, alimbcnt<<2, pB, blimbcnt<<2, pR, rlimbcnt<<2 );\n        rsign = rof ? bsign : asign;\n    }\n    else {\n        rof = _bigint_asm.sub( pB, blimbcnt<<2, pA, alimbcnt<<2, pR, rlimbcnt<<2 );\n        rsign = rof ? asign : bsign;\n    }\n\n    if ( rof )\n        _bigint_asm.neg( pR, rlimbcnt<<2, pR, rlimbcnt<<2 );\n\n    if ( _bigint_asm.tst( pR, rlimbcnt<<2 ) === 0 )\n        return BigNumber_ZERO;\n\n    result.limbs = new Uint32Array( _bigint_heap.subarray( pR>>2, (pR>>2)+rlimbcnt ) );\n    result.bitLength = rbitlen;\n    result.sign = rsign;\n\n    return result;\n}\n\nfunction BigNumber_subtract ( that ) {\n    if ( !is_big_number(that) )\n        that = new BigNumber_constructor(that);\n\n    return this.add( that.negate() );\n}\n\nfunction BigNumber_multiply ( that ) {\n    if ( !is_big_number(that) )\n        that = new BigNumber_constructor(that);\n\n    if ( !this.sign || !that.sign )\n        return BigNumber_ZERO;\n\n    var abitlen = this.bitLength, alimbs = this.limbs, alimbcnt = alimbs.length,\n        bbitlen = that.bitLength, blimbs = that.limbs, blimbcnt = blimbs.length,\n        rbitlen, rlimbcnt, result = new BigNumber_constructor;\n\n    rbitlen = abitlen + bbitlen;\n    rlimbcnt = ( rbitlen + 31 ) >> 5;\n\n    _bigint_asm.sreset();\n\n    var pA = _bigint_asm.salloc( alimbcnt<<2 ),\n        pB = _bigint_asm.salloc( blimbcnt<<2 ),\n        pR = _bigint_asm.salloc( rlimbcnt<<2 );\n\n    _bigint_asm.z( pR-pA+(rlimbcnt<<2), 0, pA );\n\n    _bigint_heap.set( alimbs, pA>>2 );\n    _bigint_heap.set( blimbs, pB>>2 );\n\n    _bigint_asm.mul( pA, alimbcnt<<2, pB, blimbcnt<<2, pR, rlimbcnt<<2 );\n\n    result.limbs = new Uint32Array( _bigint_heap.subarray( pR>>2, (pR>>2)+rlimbcnt ) );\n    result.sign = this.sign * that.sign;\n    result.bitLength = rbitlen;\n\n    return result;\n}\n\nfunction BigNumber_square () {\n    if ( !this.sign )\n        return BigNumber_ZERO;\n\n    var abitlen = this.bitLength, alimbs = this.limbs, alimbcnt = alimbs.length,\n        rbitlen, rlimbcnt, result = new BigNumber_constructor;\n\n    rbitlen = abitlen << 1;\n    rlimbcnt = ( rbitlen + 31 ) >> 5;\n\n    _bigint_asm.sreset();\n\n    var pA = _bigint_asm.salloc( alimbcnt<<2 ),\n        pR = _bigint_asm.salloc( rlimbcnt<<2 );\n\n    _bigint_asm.z( pR-pA+(rlimbcnt<<2), 0, pA );\n\n    _bigint_heap.set( alimbs, pA>>2 );\n\n    _bigint_asm.sqr( pA, alimbcnt<<2, pR );\n\n    result.limbs = new Uint32Array( _bigint_heap.subarray( pR>>2, (pR>>2)+rlimbcnt ) );\n    result.bitLength = rbitlen;\n    result.sign = 1;\n\n    return result;\n}\n\nfunction BigNumber_divide ( that ) {\n    if ( !is_big_number(that) )\n        that = new BigNumber_constructor(that);\n\n    var abitlen = this.bitLength, alimbs = this.limbs, alimbcnt = alimbs.length,\n        bbitlen = that.bitLength, blimbs = that.limbs, blimbcnt = blimbs.length,\n        qlimbcnt, rlimbcnt, quotient = BigNumber_ZERO, remainder = BigNumber_ZERO;\n\n    _bigint_asm.sreset();\n\n    var pA = _bigint_asm.salloc( alimbcnt<<2 ),\n        pB = _bigint_asm.salloc( blimbcnt<<2 ),\n        pQ = _bigint_asm.salloc( alimbcnt<<2 );\n\n    _bigint_asm.z( pQ-pA+(alimbcnt<<2), 0, pA );\n\n    _bigint_heap.set( alimbs, pA>>2 );\n    _bigint_heap.set( blimbs, pB>>2 );\n\n    _bigint_asm.div( pA, alimbcnt<<2, pB, blimbcnt<<2, pQ );\n\n    qlimbcnt = _bigint_asm.tst( pQ, alimbcnt<<2 )>>2;\n    if ( qlimbcnt ) {\n        quotient = new BigNumber_constructor;\n        quotient.limbs = new Uint32Array( _bigint_heap.subarray( pQ>>2, (pQ>>2)+qlimbcnt ) );\n        quotient.bitLength = abitlen < (qlimbcnt<<5) ? abitlen : (qlimbcnt<<5);\n        quotient.sign = this.sign * that.sign;\n    }\n\n    rlimbcnt = _bigint_asm.tst( pA, blimbcnt<<2 )>>2;\n    if ( rlimbcnt ) {\n        remainder = new BigNumber_constructor;\n        remainder.limbs = new Uint32Array( _bigint_heap.subarray( pA>>2, (pA>>2)+rlimbcnt ) );;\n        remainder.bitLength = bbitlen < (rlimbcnt<<5) ? bbitlen : (rlimbcnt<<5);\n        remainder.sign = this.sign;\n    }\n\n    return {\n        quotient: quotient,\n        remainder: remainder\n    };\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\nvar BigNumberPrototype = BigNumber_constructor.prototype = new Number;\nBigNumberPrototype.toString = BigNumber_toString;\nBigNumberPrototype.toBytes = BigNumber_toBytes;\nBigNumberPrototype.valueOf = BigNumber_valueOf;\nBigNumberPrototype.clamp = BigNumber_clamp;\nBigNumberPrototype.slice = BigNumber_slice;\n\n///////////////////////////////////////////////////////////////////////////////\n\nBigNumberPrototype.negate = BigNumber_negate;\nBigNumberPrototype.compare = BigNumber_compare;\nBigNumberPrototype.add = BigNumber_add;\nBigNumberPrototype.subtract = BigNumber_subtract;\nBigNumberPrototype.multiply = BigNumber_multiply;\nBigNumberPrototype.square = BigNumber_square;\nBigNumberPrototype.divide = BigNumber_divide;\n\n///////////////////////////////////////////////////////////////////////////////\n\nexport var BigNumber_ZERO = new BigNumber_constructor(0);\nexport var BigNumber_ONE  = new BigNumber_constructor(1);\n\nObject.freeze(BigNumber_ZERO);\nObject.freeze(BigNumber_ONE);\n","import {BigNumber_constructor, BigNumber_ONE, BigNumber_ZERO, is_big_number} from './bignum';\n\nexport function Number_extGCD (a, b ) {\n    var sa = ( a < 0 ) ? -1 : 1,\n        sb = ( b < 0 ) ? -1 : 1,\n        xi = 1, xj = 0,\n        yi = 0, yj = 1,\n        r, q, t, a_cmp_b;\n\n    a *= sa;\n    b *= sb;\n\n    a_cmp_b = ( a < b );\n    if ( a_cmp_b ) {\n        t = a; a = b, b = t;\n        t = sa; sa = sb; sb = t;\n    }\n\n    q = Math.floor( a / b ), r = a - q*b;\n    while ( r ) {\n        t = xi - q*xj, xi = xj, xj = t;\n        t = yi - q*yj, yi = yj, yj = t;\n        a = b, b = r;\n\n        q = Math.floor( a / b ), r = a - q*b;\n    }\n\n    xj *= sa;\n    yj *= sb;\n\n    if ( a_cmp_b ) {\n        t = xj; xj = yj, yj = t;\n    }\n\n    return {\n        gcd: b,\n        x: xj,\n        y: yj\n    };\n}\n\nexport function BigNumber_extGCD ( a, b ) {\n    if ( !is_big_number(a) )\n        a = new BigNumber_constructor(a);\n\n    if ( !is_big_number(b) )\n        b = new BigNumber_constructor(b);\n\n    var sa = a.sign, sb = b.sign;\n\n    if ( sa < 0 )\n        a = a.negate();\n\n    if ( sb < 0 )\n        b = b.negate();\n\n    var a_cmp_b = a.compare(b);\n    if ( a_cmp_b < 0 ) {\n        var t = a; a = b, b = t;\n        t = sa; sa = sb; sb = t;\n    }\n\n    var xi = BigNumber_ONE, xj = BigNumber_ZERO, lx = b.bitLength,\n        yi = BigNumber_ZERO, yj = BigNumber_ONE, ly = a.bitLength,\n        z, r, q;\n\n    z = a.divide(b);\n    while ( (r = z.remainder) !== BigNumber_ZERO ) {\n        q = z.quotient;\n\n        z = xi.subtract( q.multiply(xj).clamp(lx) ).clamp(lx), xi = xj, xj = z;\n        z = yi.subtract( q.multiply(yj).clamp(ly) ).clamp(ly), yi = yj, yj = z;\n\n        a = b, b = r;\n\n        z = a.divide(b);\n    }\n\n    if ( sa < 0 )\n        xj = xj.negate();\n\n    if ( sb < 0 )\n        yj = yj.negate();\n\n    if ( a_cmp_b < 0 ) {\n        var t = xj; xj = yj, yj = t;\n    }\n\n    return {\n        gcd: b,\n        x: xj,\n        y: yj\n    };\n}\n","import {BigNumber_constructor, is_big_number} from './bignum';\nimport {BigNumber_extGCD, Number_extGCD} from './extgcd';\nimport {_bigint_asm, _bigint_heap} from './bignum'\n\n/**\n * Modulus\n */\nexport function Modulus () {\n    BigNumber_constructor.apply( this, arguments );\n\n    if ( this.valueOf() < 1 )\n        throw new RangeError();\n\n    if ( this.bitLength <= 32 )\n        return;\n\n    var comodulus;\n\n    if ( this.limbs[0] & 1 ) {\n        var bitlen = ( (this.bitLength+31) & -32 ) + 1, limbs = new Uint32Array( (bitlen+31) >> 5 );\n        limbs[limbs.length-1] = 1;\n        comodulus = new BigNumber_constructor();\n        comodulus.sign = 1;\n        comodulus.bitLength = bitlen;\n        comodulus.limbs = limbs;\n\n        var k = Number_extGCD( 0x100000000, this.limbs[0] ).y;\n        this.coefficient = k < 0 ? -k : 0x100000000-k;\n    }\n    else {\n        /**\n         * TODO even modulus reduction\n         * Modulus represented as `N = 2^U * V`, where `V` is odd and thus `GCD(2^U, V) = 1`.\n         * Calculation `A = TR' mod V` is made as for odd modulo using Montgomery method.\n         * Calculation `B = TR' mod 2^U` is easy as modulus is a power of 2.\n         * Using Chinese Remainder Theorem and Garner's Algorithm restore `TR' mod N` from `A` and `B`.\n         */\n        return;\n    }\n\n    this.comodulus = comodulus;\n    this.comodulusRemainder = comodulus.divide(this).remainder;\n    this.comodulusRemainderSquare = comodulus.square().divide(this).remainder;\n}\n\n/**\n * Modular reduction\n */\nfunction Modulus_reduce ( a ) {\n    if ( !is_big_number(a) )\n        a = new BigNumber_constructor(a);\n\n    if ( a.bitLength <= 32 && this.bitLength <= 32 )\n        return new BigNumber_constructor( a.valueOf() % this.valueOf() );\n\n    if ( a.compare(this) < 0 )\n        return a;\n\n    return a.divide(this).remainder;\n}\n\n/**\n * Modular inverse\n */\nfunction Modulus_inverse ( a ) {\n    a = this.reduce(a);\n\n    var r = BigNumber_extGCD( this, a );\n    if ( r.gcd.valueOf() !== 1 ) return null;\n\n    r = r.y;\n    if ( r.sign < 0 ) r = r.add(this).clamp(this.bitLength);\n\n    return r;\n}\n\n/**\n * Modular exponentiation\n */\nfunction Modulus_power ( g, e ) {\n    if ( !is_big_number(g) )\n        g = new BigNumber_constructor(g);\n\n    if ( !is_big_number(e) )\n        e = new BigNumber_constructor(e);\n\n    // count exponent set bits\n    var c = 0;\n    for ( var i = 0; i < e.limbs.length; i++ ) {\n        var t = e.limbs[i];\n        while ( t ) {\n            if ( t & 1 ) c++;\n            t >>>= 1;\n        }\n    }\n\n    // window size parameter\n    var k = 8;\n    if ( e.bitLength <= 4536 ) k = 7;\n    if ( e.bitLength <= 1736 ) k = 6;\n    if ( e.bitLength <= 630 ) k = 5;\n    if ( e.bitLength <= 210 ) k = 4;\n    if ( e.bitLength <= 60 ) k = 3;\n    if ( e.bitLength <= 12 ) k = 2;\n    if ( c <= (1 << (k-1)) ) k = 1;\n\n    // montgomerize base\n    g = _Montgomery_reduce( this.reduce(g).multiply(this.comodulusRemainderSquare), this );\n\n    // precompute odd powers\n    var g2 = _Montgomery_reduce( g.square(), this ),\n        gn = new Array( 1 << (k-1) );\n    gn[0] = g;\n    gn[1] = _Montgomery_reduce( g.multiply(g2), this );\n    for ( var i = 2; i < (1 << (k-1)); i++ ) {\n        gn[i] = _Montgomery_reduce( gn[i-1].multiply(g2), this );\n    }\n\n    // perform exponentiation\n    var u = this.comodulusRemainder,\n        r = u;\n    for ( var i = e.limbs.length-1; i >= 0; i-- ) {\n        var t = e.limbs[i];\n        for ( var j = 32; j > 0; ) {\n            if ( t & 0x80000000 ) {\n                var n = t >>> (32-k), l = k;\n                while ( (n & 1) === 0 ) { n >>>= 1; l--; }\n                var m = gn[n>>>1];\n                while ( n ) { n >>>= 1; if ( r !== u ) r = _Montgomery_reduce( r.square(), this ); }\n                r = ( r !== u ) ? _Montgomery_reduce( r.multiply(m), this ) : m;\n                t <<= l, j -= l;\n            }\n            else {\n                if ( r !== u ) r = _Montgomery_reduce( r.square(), this );\n                t <<= 1, j--;\n            }\n        }\n    }\n\n    // de-montgomerize result\n    r = _Montgomery_reduce( r, this );\n\n    return r;\n}\n\nfunction _Montgomery_reduce ( a, n ) {\n    var alimbs = a.limbs, alimbcnt = alimbs.length,\n        nlimbs = n.limbs, nlimbcnt = nlimbs.length,\n        y = n.coefficient;\n\n    _bigint_asm.sreset();\n\n    var pA = _bigint_asm.salloc( alimbcnt<<2 ),\n        pN = _bigint_asm.salloc( nlimbcnt<<2 ),\n        pR = _bigint_asm.salloc( nlimbcnt<<2 );\n\n    _bigint_asm.z( pR-pA+(nlimbcnt<<2), 0, pA );\n\n    _bigint_heap.set( alimbs, pA>>2 );\n    _bigint_heap.set( nlimbs, pN>>2 );\n\n    _bigint_asm.mredc( pA, alimbcnt<<2, pN, nlimbcnt<<2, y, pR );\n\n    var result = new BigNumber_constructor();\n    result.limbs = new Uint32Array( _bigint_heap.subarray( pR>>2, (pR>>2)+nlimbcnt ) );\n    result.bitLength = n.bitLength;\n    result.sign = 1;\n\n    return result;\n}\n\nvar ModulusPrototype = Modulus.prototype = new BigNumber_constructor;\nModulusPrototype.reduce = Modulus_reduce;\nModulusPrototype.inverse = Modulus_inverse;\nModulusPrototype.power = Modulus_power;\n","// Tests if the number supplied is a Miller-Rabin strong probable prime\nimport {BigNumber_constructor, BigNumber_ONE} from './bignum';\nimport {pow2_ceil} from '../utils';\nimport {Random_getValues} from '../random/random';\nimport {Modulus} from './modulus';\n\nfunction _BigNumber_isMillerRabinProbablePrime (rounds ) {\n    var t = new BigNumber_constructor(this),\n        s = 0;\n    t.limbs[0] -= 1;\n    while ( t.limbs[s>>5] === 0 ) s += 32;\n    while ( ( ( t.limbs[s>>5] >> (s & 31) ) & 1 ) === 0 ) s++;\n    t = t.slice(s);\n\n    var m = new Modulus(this),\n        m1 = this.subtract(BigNumber_ONE),\n        a = new BigNumber_constructor(this),\n        l = this.limbs.length-1;\n    while ( a.limbs[l] === 0 ) l--;\n\n    while ( --rounds >= 0 ) {\n        Random_getValues(a.limbs);\n        if ( a.limbs[0] < 2 ) a.limbs[0] += 2;\n        while ( a.compare(m1) >= 0 ) a.limbs[l] >>>= 1;\n\n        var x = m.power( a, t );\n        if ( x.compare(BigNumber_ONE) === 0 ) continue;\n        if ( x.compare(m1) === 0 ) continue;\n\n        var c = s;\n        while ( --c > 0 ) {\n            x = x.square().divide(m).remainder;\n            if ( x.compare(BigNumber_ONE) === 0 ) return false;\n            if ( x.compare(m1) === 0 ) break;\n        }\n\n        if ( c === 0 ) return false;\n    }\n\n    return true;\n}\n\nfunction BigNumber_isProbablePrime ( paranoia ) {\n    paranoia = paranoia || 80;\n\n    var limbs = this.limbs,\n        i = 0;\n\n    // Oddity test\n    // (50% false positive probability)\n    if ( ( limbs[0] & 1 ) === 0 ) return false;\n    if ( paranoia <= 1 ) return true;\n\n    // Magic divisors (3, 5, 17) test\n    // (~25% false positive probability)\n    var s3 = 0, s5 = 0, s17 = 0;\n    for ( i = 0; i < limbs.length; i++ ) {\n        var l3 = limbs[i];\n        while ( l3 ) {\n            s3 += (l3 & 3);\n            l3 >>>= 2;\n        }\n\n        var l5 = limbs[i];\n        while ( l5 ) {\n            s5 += (l5 & 3);\n            l5 >>>= 2;\n            s5 -= (l5 & 3);\n            l5 >>>= 2;\n        }\n\n        var l17 = limbs[i];\n        while ( l17 ) {\n            s17 += (l17 & 15);\n            l17 >>>= 4;\n            s17 -= (l17 & 15);\n            l17 >>>= 4;\n        }\n    }\n    if ( !(s3 % 3) || !(s5 % 5) || !(s17 % 17) ) return false;\n    if ( paranoia <= 2 ) return true;\n\n    // Miller-Rabin test\n    // (≤ 4^(-k) false positive probability)\n    return _BigNumber_isMillerRabinProbablePrime.call( this, paranoia >>> 1 );\n}\n\n// Small primes for trail division\nvar _primes = [ 2, 3 /* and so on, computed lazily */ ];\n\n// Returns an array populated with first n primes.\nfunction _small_primes ( n ) {\n    if ( _primes.length >= n )\n        return _primes.slice( 0, n );\n\n    for ( var p = _primes[_primes.length-1] + 2; _primes.length < n; p += 2 ) {\n        for ( var i = 0, d = _primes[i]; d*d <= p; d = _primes[++i] ) {\n            if ( p % d == 0 ) break;\n        }\n        if ( d*d > p ) _primes.push(p);\n    }\n\n    return _primes;\n}\n\n// Returns strong pseudoprime of a specified bit length\nexport function BigNumber_randomProbablePrime ( bitlen, filter ) {\n    var limbcnt = (bitlen + 31) >> 5,\n        prime = new BigNumber_constructor({ sign: 1, bitLength: bitlen, limbs: limbcnt }),\n        limbs = prime.limbs;\n\n    // Number of small divisors to try that minimizes the total cost of the trial division\n    // along with the first round of Miller-Rabin test for a certain bit length.\n    var k = 10000;\n    if ( bitlen <= 512 ) k = 2200;\n    if ( bitlen <= 256 ) k = 600;\n\n    var divisors = _small_primes(k),\n        remainders = new Uint32Array(k);\n\n    // Number of Miller-Rabin iterations for an error rate  of less than 2^-80\n    // Damgaard, Landrock, Pomerance: Average case error estimates for the strong probable prime test.\n    var s = (bitlen * Math.LN2) | 0,\n        r = 27;\n    if ( bitlen >= 250 ) r = 12;\n    if ( bitlen >= 450 ) r = 6;\n    if ( bitlen >= 850 ) r = 3;\n    if ( bitlen >= 1300 ) r = 2;\n\n    while ( true ) {\n        // populate `prime` with random bits, clamp to the appropriate bit length\n        Random_getValues(limbs);\n        limbs[0] |= 1;\n        limbs[limbcnt-1] |= 1 << ((bitlen - 1) & 31);\n        if ( bitlen & 31 ) limbs[limbcnt-1] &= pow2_ceil((bitlen + 1) & 31) - 1;\n\n        // remainders from division to small primes\n        remainders[0] = 1;\n        for ( var i = 1; i < k; i++ ) {\n            remainders[i] = prime.divide( divisors[i] ).remainder.valueOf();\n        }\n\n        // try no more than `s` subsequent candidates\n        seek:\n        for ( var j = 0; j < s; j += 2, limbs[0] += 2 ) {\n            // check for small factors\n            for ( var i = 1; i < k; i++ ) {\n                if ( ( remainders[i] + j ) % divisors[i] === 0 ) continue seek;\n            }\n\n            // additional check just before the heavy lifting\n            if ( typeof filter === 'function' && !filter(prime) ) continue;\n\n            // proceed to Miller-Rabin test\n            if ( _BigNumber_isMillerRabinProbablePrime.call( prime, r ) ) return prime;\n        }\n    }\n}\n\nBigNumber_constructor.prototype.isProbablePrime = BigNumber_isProbablePrime;\n\nBigNumber_constructor.randomProbablePrime = BigNumber_randomProbablePrime;\n","import {BigNumber_constructor, BigNumber_ONE, BigNumber_ZERO} from './bignum';\nimport {BigNumber_extGCD} from './extgcd';\nimport \"./prime\";\n\nexport var BigNumber = BigNumber_constructor;\nBigNumber.ZERO = BigNumber_ZERO;\nBigNumber.ONE  = BigNumber_ONE;\n\nBigNumber.extGCD = BigNumber_extGCD;\n\nexport { Modulus } from \"./modulus\";\n","import {Modulus} from '../bignum/modulus';\nimport {BigNumber_constructor, is_big_number} from '../bignum/bignum';\nimport {is_buffer, is_bytes, is_string, string_to_bytes} from '../utils';\nimport {IllegalStateError} from '../errors';\n\nexport function RSA (options ) {\n    options = options || {};\n\n    this.key = null;\n    this.result = null;\n\n    this.reset(options);\n}\n\nexport function RSA_reset ( options ) {\n    options = options || {};\n\n    this.result = null;\n\n    var key = options.key\n    if ( key !== undefined ) {\n        if ( key instanceof Array ) {\n            var l = key.length;\n            if ( l !== 2 && l !== 3 && l !== 8 )\n                throw new SyntaxError(\"unexpected key type\");\n\n            var k = [];\n            k[0] = new Modulus( key[0] );\n            k[1] = new BigNumber_constructor( key[1] );\n            if ( l > 2 ) {\n                k[2] = new BigNumber_constructor( key[2] );\n            }\n            if ( l > 3 ) {\n                k[3] = new Modulus( key[3] );\n                k[4] = new Modulus( key[4] );\n                k[5] = new BigNumber_constructor( key[5] );\n                k[6] = new BigNumber_constructor( key[6] );\n                k[7] = new BigNumber_constructor( key[7] );\n            }\n\n            this.key = k;\n        }\n        else {\n            throw new TypeError(\"unexpected key type\");\n        }\n    }\n\n    return this;\n}\n\nexport function RSA_encrypt ( data ) {\n    if ( !this.key )\n        throw new IllegalStateError(\"no key is associated with the instance\");\n\n    if ( is_string(data) )\n        data = string_to_bytes(data);\n\n    if ( is_buffer(data) )\n        data = new Uint8Array(data);\n\n    var msg;\n    if ( is_bytes(data) ) {\n        msg = new BigNumber_constructor(data);\n    }\n    else if ( is_big_number(data) ) {\n        msg = data;\n    }\n    else {\n        throw new TypeError(\"unexpected data type\");\n    }\n\n    if ( this.key[0].compare(msg) <= 0 )\n        throw new RangeError(\"data too large\");\n\n    var m = this.key[0],\n        e = this.key[1];\n\n    var result = m.power( msg, e ).toBytes();\n\n    var bytelen = m.bitLength + 7 >> 3;\n    if ( result.length < bytelen ) {\n        var r = new Uint8Array(bytelen);\n        r.set( result, bytelen - result.length );\n        result = r;\n    }\n\n    this.result = result;\n\n    return this;\n}\n\nexport function RSA_decrypt ( data ) {\n    if ( !this.key )\n        throw new IllegalStateError(\"no key is associated with the instance\");\n\n    if ( this.key.length < 3 )\n        throw new IllegalStateError(\"key isn't suitable for decription\");\n\n    if ( is_string(data) )\n        data = string_to_bytes(data);\n\n    if ( is_buffer(data) )\n        data = new Uint8Array(data);\n\n    var msg;\n    if ( is_bytes(data) ) {\n        msg = new BigNumber_constructor(data);\n    }\n    else if ( is_big_number(data) ) {\n        msg = data;\n    }\n    else {\n        throw new TypeError(\"unexpected data type\");\n    }\n\n    if ( this.key[0].compare(msg) <= 0 )\n        throw new RangeError(\"data too large\");\n\n    var result;\n    if ( this.key.length > 3 ) {\n        var m = this.key[0],\n            p = this.key[3],\n            q = this.key[4],\n            dp = this.key[5],\n            dq = this.key[6],\n            u = this.key[7];\n\n        var x = p.power( msg, dp ),\n            y = q.power( msg, dq );\n\n        var t = x.subtract(y);\n        while ( t.sign < 0 ) t = t.add(p);\n\n        var h = p.reduce( u.multiply(t) );\n\n        result = h.multiply(q).add(y).clamp(m.bitLength).toBytes();\n    }\n    else {\n        var m = this.key[0],\n            d = this.key[2];\n\n        result = m.power( msg, d ).toBytes();\n    }\n\n    var bytelen = m.bitLength + 7 >> 3;\n    if ( result.length < bytelen ) {\n        var r = new Uint8Array(bytelen);\n        r.set( result, bytelen - result.length );\n        result = r;\n    }\n\n    this.result = result;\n\n    return this;\n}\n\nvar RSA_prototype = RSA.prototype;\nRSA_prototype.reset = RSA_reset;\nRSA_prototype.encrypt = RSA_encrypt;\nRSA_prototype.decrypt = RSA_decrypt;\n","import {RSA_reset, RSA_encrypt, RSA_decrypt} from './rsa'\nimport {Random_getValues} from '../random/random';\nimport {is_buffer, is_bytes, is_number, is_string, string_to_bytes} from '../utils';\nimport {IllegalArgumentError, IllegalStateError, SecurityError} from '../errors';\n\nexport function RSA_OAEP ( options ) {\n    options = options || {};\n\n    if ( !options.hash )\n        throw new SyntaxError(\"option 'hash' is required\");\n\n    if ( !options.hash.HASH_SIZE )\n        throw new SyntaxError(\"option 'hash' supplied doesn't seem to be a valid hash function\");\n\n    this.hash = options.hash;\n\n    this.label = null;\n\n    this.reset(options);\n}\n\nfunction RSA_OAEP_reset ( options ) {\n    options = options || {};\n\n    var label = options.label;\n    if ( label !== undefined ) {\n        if ( is_buffer(label) || is_bytes(label) ) {\n            label = new Uint8Array(label);\n        }\n        else if ( is_string(label) ) {\n            label = string_to_bytes(label);\n        }\n        else {\n            throw new TypeError(\"unexpected label type\");\n        }\n\n        this.label = ( label.length > 0 ) ? label : null;\n    }\n    else {\n        this.label = null;\n    }\n\n    RSA_reset.call( this, options );\n}\n\nfunction RSA_OAEP_encrypt ( data ) {\n    if ( !this.key )\n        throw new IllegalStateError(\"no key is associated with the instance\");\n\n    var key_size = Math.ceil( this.key[0].bitLength / 8 ),\n        hash_size = this.hash.HASH_SIZE,\n        data_length = data.byteLength || data.length || 0,\n        ps_length = key_size - data_length - 2*hash_size - 2;\n\n    if ( data_length > key_size - 2*this.hash.HASH_SIZE - 2 )\n        throw new IllegalArgumentError(\"data too large\");\n\n    var message = new Uint8Array(key_size),\n        seed = message.subarray( 1, hash_size + 1 ),\n        data_block = message.subarray( hash_size + 1 );\n\n    if ( is_bytes(data) ) {\n        data_block.set( data, hash_size + ps_length + 1 );\n    }\n    else if ( is_buffer(data) ) {\n        data_block.set( new Uint8Array(data), hash_size + ps_length + 1 );\n    }\n    else if ( is_string(data) ) {\n        data_block.set( string_to_bytes(data), hash_size + ps_length + 1 );\n    }\n    else {\n        throw new TypeError(\"unexpected data type\");\n    }\n\n    data_block.set( this.hash.reset().process( this.label || '' ).finish().result, 0 );\n    data_block[ hash_size + ps_length ] = 1;\n\n    Random_getValues(seed);\n\n    var data_block_mask = RSA_MGF1_generate.call( this, seed, data_block.length );\n    for ( var i = 0; i < data_block.length; i++ )\n        data_block[i] ^= data_block_mask[i];\n\n    var seed_mask = RSA_MGF1_generate.call( this, data_block, seed.length );\n    for ( var i = 0; i < seed.length; i++ )\n        seed[i] ^= seed_mask[i];\n\n    RSA_encrypt.call( this, message );\n\n    return this;\n}\n\nfunction RSA_OAEP_decrypt ( data ) {\n    if ( !this.key )\n        throw new IllegalStateError(\"no key is associated with the instance\");\n\n    var key_size = Math.ceil( this.key[0].bitLength / 8 ),\n        hash_size = this.hash.HASH_SIZE,\n        data_length = data.byteLength || data.length || 0;\n\n    if ( data_length !== key_size )\n        throw new IllegalArgumentError(\"bad data\");\n\n    RSA_decrypt.call( this, data );\n\n    var z = this.result[0],\n        seed = this.result.subarray( 1, hash_size + 1 ),\n        data_block = this.result.subarray( hash_size + 1 );\n\n    if ( z !== 0 )\n        throw new SecurityError(\"decryption failed\");\n\n    var seed_mask = RSA_MGF1_generate.call( this, data_block, seed.length );\n    for ( var i = 0; i < seed.length; i++ )\n        seed[i] ^= seed_mask[i];\n\n    var data_block_mask = RSA_MGF1_generate.call( this, seed, data_block.length );\n    for ( var i = 0; i < data_block.length; i++ )\n        data_block[i] ^= data_block_mask[i];\n\n    var lhash = this.hash.reset().process( this.label || '' ).finish().result;\n    for ( var i = 0; i < hash_size; i++ ) {\n        if ( lhash[i] !== data_block[i] )\n            throw new SecurityError(\"decryption failed\");\n    }\n\n    var ps_end = hash_size;\n    for ( ; ps_end < data_block.length; ps_end++ ) {\n        var psz = data_block[ps_end];\n        if ( psz === 1 )\n            break;\n        if ( psz !== 0 )\n            throw new SecurityError(\"decryption failed\");\n    }\n    if ( ps_end === data_block.length )\n        throw new SecurityError(\"decryption failed\");\n\n    this.result = data_block.subarray( ps_end + 1 );\n\n    return this;\n}\n\nfunction RSA_MGF1_generate( seed, length ) {\n    seed = seed || '';\n    length = length || 0;\n\n    var hash_size = this.hash.HASH_SIZE;\n//    if ( length > (hash_size * 0x100000000) )\n//        throw new IllegalArgumentError(\"mask length too large\");\n\n    var mask = new Uint8Array(length),\n        counter = new Uint8Array(4),\n        chunks = Math.ceil( length / hash_size );\n    for ( var i = 0; i < chunks; i++ ) {\n        counter[0] = i >>> 24,\n        counter[1] = (i >>> 16) & 255,\n        counter[2] = (i >>> 8) & 255,\n        counter[3] = i & 255;\n\n        var submask = mask.subarray( i * hash_size );\n\n        var chunk = this.hash.reset().process(seed).process(counter).finish().result;\n        if ( chunk.length > submask.length ) chunk = chunk.subarray( 0, submask.length );\n\n        submask.set(chunk);\n    }\n\n    return mask;\n}\n\nexport function RSA_PSS ( options ) {\n    options = options || {};\n\n    if ( !options.hash )\n        throw new SyntaxError(\"option 'hash' is required\");\n\n    if ( !options.hash.HASH_SIZE )\n        throw new SyntaxError(\"option 'hash' supplied doesn't seem to be a valid hash function\");\n\n    this.hash = options.hash;\n\n    this.saltLength = 4;\n\n    this.reset(options);\n}\n\nfunction RSA_PSS_reset ( options ) {\n    options = options || {};\n\n    RSA_reset.call( this, options );\n\n    var slen = options.saltLength;\n    if ( slen !== undefined ) {\n        if ( !is_number(slen) || slen < 0 )\n            throw new TypeError(\"saltLength should be a non-negative number\");\n\n        if ( this.key !== null && Math.ceil( ( this.key[0].bitLength - 1 ) / 8 ) < this.hash.HASH_SIZE + slen + 2 )\n            throw new SyntaxError(\"saltLength is too large\");\n\n        this.saltLength = slen;\n    }\n    else {\n        this.saltLength = 4;\n    }\n}\n\nfunction RSA_PSS_sign ( data ) {\n    if ( !this.key )\n        throw new IllegalStateError(\"no key is associated with the instance\");\n\n    var key_bits = this.key[0].bitLength,\n        hash_size = this.hash.HASH_SIZE,\n        message_length = Math.ceil( ( key_bits - 1 ) / 8 ),\n        salt_length = this.saltLength,\n        ps_length = message_length - salt_length - hash_size - 2;\n\n    var message = new Uint8Array(message_length),\n        h_block = message.subarray( message_length - hash_size - 1, message_length - 1 ),\n        d_block = message.subarray( 0, message_length - hash_size - 1 ),\n        d_salt = d_block.subarray( ps_length + 1 );\n\n    var m_block = new Uint8Array( 8 + hash_size + salt_length ),\n        m_hash = m_block.subarray( 8, 8 + hash_size ),\n        m_salt = m_block.subarray( 8 + hash_size );\n\n    m_hash.set( this.hash.reset().process(data).finish().result );\n\n    if ( salt_length > 0 )\n        Random_getValues(m_salt);\n\n    d_block[ps_length] = 1;\n    d_salt.set(m_salt);\n\n    h_block.set( this.hash.reset().process(m_block).finish().result );\n\n    var d_block_mask = RSA_MGF1_generate.call( this, h_block, d_block.length );\n    for ( var i = 0; i < d_block.length; i++ )\n        d_block[i] ^= d_block_mask[i];\n\n    message[message_length-1] = 0xbc;\n\n    var zbits = 8*message_length - key_bits + 1;\n    if ( zbits % 8 ) message[0] &= (0xff >>> zbits);\n\n    RSA_decrypt.call( this, message );\n\n    return this;\n}\n\nfunction RSA_PSS_verify ( signature, data ) {\n    if ( !this.key )\n        throw new IllegalStateError(\"no key is associated with the instance\");\n\n    var key_bits = this.key[0].bitLength,\n        hash_size = this.hash.HASH_SIZE,\n        message_length = Math.ceil( ( key_bits - 1 ) / 8 ),\n        salt_length = this.saltLength,\n        ps_length = message_length - salt_length - hash_size - 2;\n\n    RSA_encrypt.call( this, signature );\n\n    var message = this.result;\n    if ( message[message_length-1] !== 0xbc )\n        throw new SecurityError(\"bad signature\");\n\n    var h_block = message.subarray( message_length - hash_size - 1, message_length - 1 ),\n        d_block = message.subarray( 0, message_length - hash_size - 1 ),\n        d_salt = d_block.subarray( ps_length + 1 );\n\n    var zbits = 8*message_length - key_bits + 1;\n    if ( (zbits % 8) && (message[0] >>> (8-zbits)) )\n        throw new SecurityError(\"bad signature\");\n\n    var d_block_mask = RSA_MGF1_generate.call( this, h_block, d_block.length );\n    for ( var i = 0; i < d_block.length; i++ )\n        d_block[i] ^= d_block_mask[i];\n\n    if ( zbits % 8 ) message[0] &= (0xff >>> zbits);\n\n    for ( var i = 0; i < ps_length; i++ ) {\n        if ( d_block[i] !== 0 )\n            throw new SecurityError(\"bad signature\");\n    }\n    if ( d_block[ps_length] !== 1 )\n        throw new SecurityError(\"bad signature\");\n\n    var m_block = new Uint8Array( 8 + hash_size + salt_length ),\n        m_hash = m_block.subarray( 8, 8 + hash_size ),\n        m_salt = m_block.subarray( 8 + hash_size );\n\n    m_hash.set( this.hash.reset().process(data).finish().result );\n    m_salt.set( d_salt );\n\n    var h_block_verify = this.hash.reset().process(m_block).finish().result;\n    for ( var i = 0; i < hash_size; i++ ) {\n        if ( h_block[i] !== h_block_verify[i] )\n            throw new SecurityError(\"bad signature\");\n    }\n\n    return this;\n}\n\nfunction RSA_PKCS1_v1_5(options) {\n    options = options || {};\n\n    if (!options.hash)\n        throw new SyntaxError(\"option 'hash' is required\");\n\n    if (!options.hash.HASH_SIZE)\n        throw new SyntaxError(\"option 'hash' supplied doesn't seem to be a valid hash function\");\n\n    this.hash = options.hash;\n\n    this.reset(options);\n}\n\nfunction RSA_PKCS1_v1_5_reset(options) {\n    options = options || {};\n\n    RSA_reset.call(this, options);\n}\n\nvar HASH_PREFIXES = {\n    \"sha1\": new Uint8Array([0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04, 0x14]),\n    \"sha256\": new Uint8Array([0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20]),\n    \"sha384\": new Uint8Array([0x30, 0x41, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x05, 0x00, 0x04, 0x30]),\n    \"sha512\": new Uint8Array([0x30, 0x51, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0x04, 0x40]),\n}\n\nfunction getHashPrefix(hash) {\n    var hashName = hash.constructor.NAME;\n    var prefix = HASH_PREFIXES[hashName];\n    if (!prefix) {\n        throw new Error(\"Cannot get hash prefix for hash algorithm '\" + hashName + \"'\");\n    }\n    return prefix;\n}\n\nfunction RSA_PKCS1_v1_5_sign(data) {\n    if (!this.key) {\n        throw new IllegalStateError(\"no key is associated with the instance\");\n    }\n    var prefix = getHashPrefix(this.hash);\n    var hash_size = this.hash.HASH_SIZE;\n\n    var t_len = prefix.length + hash_size;\n    var k = (this.key[0].bitLength + 7) >> 3;\n    if (k < t_len + 11) {\n        throw new Error(\"Message too long\");\n    }\n\n    var m_hash = new Uint8Array(hash_size);\n    m_hash.set(this.hash.reset().process(data).finish().result);\n\n    // EM = 0x00 || 0x01 || PS || 0x00 || T\n    var em = new Uint8Array(k);\n    var i = 0;\n    em[i++] = 0; // 0x00\n    em[i++] = 1; // 0x01\n    // PS\n    for (i; i < k - t_len - 1; i++) {\n        em[i] = 0xff;\n    }\n    em[i++] = 0;\n    em.set(prefix, i); // 0x00\n    // T\n    em.set(m_hash, em.length - hash_size);\n\n    RSA_decrypt.call(this, em);\n\n    return this;\n}\n\nfunction RSA_PKCS1_v1_5_verify(signature, data) {\n    if (!this.key) {\n        throw new IllegalStateError(\"no key is associated with the instance\");\n    }\n    var prefix = getHashPrefix(this.hash);\n    var hash_size = this.hash.HASH_SIZE;\n\n    var t_len = prefix.length + hash_size;\n    var k = (this.key[0].bitLength + 7) >> 3;\n    if (k < t_len + 11) {\n        throw new SecurityError(\"Bad signature\");\n    }\n\n    RSA_encrypt.call(this, signature);\n\n    var m_hash = new Uint8Array(hash_size);\n    m_hash.set(this.hash.reset().process(data).finish().result);\n\n    var res = 1;\n    // EM = 0x00 || 0x01 || PS || 0x00 || T\n    var decryptedSignature = this.result;\n    var i = 0;\n    res &= decryptedSignature[i++] === 0; // 0x00\n    res &= decryptedSignature[i++] === 1; // 0x01\n    // PS\n    for (i; i < k - t_len - 1; i++) {\n        res &= decryptedSignature[i] === 0xff;\n    }\n    res &= decryptedSignature[i++] === 0; // 0x00\n    // T\n    var j = 0;\n    var n = i + prefix.length;\n    // prefix\n    for (i; i < n; i++) {\n        res &= decryptedSignature[i] === prefix[j++];\n    }\n    j = 0;\n    n = i + m_hash.length;\n    // hash\n    for (i; i < n; i++) {\n        res &= decryptedSignature[i] === m_hash[j++];\n    }\n\n    if (!res) {\n        throw new SecurityError(\"Bad signature\");\n    }\n\n    return this;\n}\n\nvar RSA_OAEP_prototype = RSA_OAEP.prototype;\nRSA_OAEP_prototype.reset = RSA_OAEP_reset;\nRSA_OAEP_prototype.encrypt = RSA_OAEP_encrypt;\nRSA_OAEP_prototype.decrypt = RSA_OAEP_decrypt;\n\nvar RSA_PSS_prototype = RSA_PSS.prototype;\nRSA_PSS_prototype.reset = RSA_PSS_reset;\nRSA_PSS_prototype.sign = RSA_PSS_sign;\nRSA_PSS_prototype.verify = RSA_PSS_verify;\n\nvar RSA_PKCS1_v1_5_prototype = RSA_PKCS1_v1_5.prototype;\nRSA_PKCS1_v1_5_prototype.reset = RSA_PKCS1_v1_5_reset;\nRSA_PKCS1_v1_5_prototype.sign = RSA_PKCS1_v1_5_sign;\nRSA_PKCS1_v1_5_prototype.verify = RSA_PKCS1_v1_5_verify;\n","var _global_console = typeof console !== 'undefined' ? console : undefined;\n\nvar _secure_origin = (typeof location === \"undefined\") || !location.protocol.search( /https:|file:|chrome:|chrome-extension:|moz-extension:/ );\n\nif ( !_secure_origin && _global_console !== undefined ) {\n    _global_console.warn(\"asmCrypto seems to be load from an insecure origin; this may cause to MitM-attack vulnerability. Consider using secure transport protocol.\");\n}\n"]}